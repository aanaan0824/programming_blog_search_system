{"blogid": "126671922", "writerAge": "码龄3年", "writerBlogNum": "53", "writerCollect": "58", "writerComment": "4", "writerFan": "8", "writerGrade": "3级", "writerIntegral": "562", "writerName": "ik i5", "writerProfileAdress": "writer_image\\profile_126671922.jpg", "writerRankTotal": "31579", "writerRankWeekly": "69326", "writerThumb": "37", "writerVisitNum": "19978", "blog_read_count": "857", "blog_time": "已于 2022-09-03 22:54:58 修改", "blog_title": "Vuex详解(五种状态)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1__2\">1 .状态管理</a></li><li><ul><li><a href=\"#1_1_3\">1 .1单状态管理</a></li><li><ul><li><a href=\"#1__1_1_6\">1 . 1 .1单状态管理的代码实现</a></li></ul>\n</li><li><a href=\"#1_2_Vuex_30\">1 .2 Vuex的多状态管理</a></li><li><a href=\"#13__Store_50\">1.3 . Store</a></li></ul>\n</li><li><a href=\"#2_VuexOptions_API_124\">2. Vuex的核心概念(`Options API`)</a></li><li><ul><li><a href=\"#2_1_state_125\">2 .1 state的使用</a></li><li><a href=\"#2_2_Mutation_179\">2 .2 Mutation的使用</a></li><li><ul><li><a href=\"#2_2_1_Mutation_215\">2 .2 .1 Mutation函数基本语法使用</a></li><li><ul><li><a href=\"#2_2_1_1_228\">2 .2 .1 .1方式一</a></li><li><a href=\"#2_2_1_2__239\">2 .2 .1 .2 方式二</a></li></ul>\n</li><li><a href=\"#2_2_2_Mutation_258\">2 .2 .2 Mutation传递参数</a></li><li><a href=\"#2_2_3Mutation_294\">2 .2 .3Mutation常量类型</a></li></ul>\n</li><li><a href=\"#2_3__Action_346\">2 .3 Action使用</a></li><li><ul><li><a href=\"#2_3_1_Actons_358\">2 .3 .1 Actons使用方式</a></li><li><ul><li><a href=\"#2_3_1_2__407\">2 .3 .1 .2 使用方式二</a></li><li><a href=\"#2_3_1_2__428\">2 .3 .1 .2 使用方式三</a></li></ul>\n</li><li><a href=\"#2_3_2__Actions_437\">2 .3 .2 Actions携带参数</a></li><li><a href=\"#2_3_3_ActionsPromise_473\">2 .3 .3 Actions与Promise结合</a></li></ul>\n</li><li><a href=\"#2_4_Getters_504\">2 .4 Getters的使用</a></li><li><ul><li><a href=\"#2_4_1_509\">2 .4 .1使用方式一</a></li><li><a href=\"#2_4_2__532\">2 .4 .2 使用方式二</a></li></ul>\n</li><li><a href=\"#2_5_Modules_555\">2 .5 Modules使用</a></li><li><ul><li><a href=\"#2_5_1_Modules_620\">2 .5 .1 利用Modules对项目进行优化</a></li></ul>\n</li></ul>\n</li><li><a href=\"#3_VuexCPA_679\">3 .Vuex核心概念(`CPA`)</a></li><li><ul><li><a href=\"#3_1_state_714\">3 .1. state的使用</a></li><li><ul><li><a href=\"#3_1_1_734\">3 .1 .1封装函数的方式使用</a></li></ul>\n</li><li><a href=\"#3_2_Getters_789\">3 .2 Getters的基本使用</a></li><li><ul><li><a href=\"#3_2_1_getters_794\">3 .2 .1 getters第二个参数与返回值</a></li><li><a href=\"#3_2_2__849\">3 .2 .2 封装函数的方式使用</a></li></ul>\n</li><li><a href=\"#3_Mutation_896\">3 .Mutation的使用</a></li><li><a href=\"#4_Action_905\">4 .Action的使用</a></li><li><ul><li><a href=\"#4_1Action_906\">4 .1Action的异步使用</a></li></ul>\n</li><li><a href=\"#5_Mudule_941\">5 .Mudule的使用</a></li><li><ul><li><a href=\"#5_1module_948\">5 .1module的命名空间</a></li><li><a href=\"#5_2module_1046\">5 .2module修改或派发根组件</a></li><li><a href=\"#5_3module_1060\">5 .3module的辅助函数</a></li></ul>\n</li></ul>\n</li><li><a href=\"#4__1089\">4 .面试题型</a></li><li><ul><li><a href=\"#4_1_1090\">4 .1项目结构</a></li><li><a href=\"#4_2_vuex_1102\">4 .2 vuex的五个核心</a></li></ul>\n</li></ul>\n</div>\n<br/> 备注: \n<code>npm install vuex@next</code>\n<p></p>\n<h1><a id=\"1__2\"></a>1 .状态管理</h1>\n<h2><a id=\"1_1_3\"></a>1 .1单状态管理</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2dfcb3228c234f0ebe919c6d13b83b48.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c89efedb3cab4c44aaef90d965cd28ab.png\"/></p>\n<h3><a id=\"1__1_1_6\"></a>1 . 1 .1单状态管理的代码实现</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> counter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"counter + 1\"</span><span class=\"token operator\">&gt;</span>加<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"counter - 1\"</span><span class=\"token operator\">&gt;</span>减<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>style<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\649dbb899a424ecbae04afc3c4990039.png\"/></p>\n<h2><a id=\"1_2_Vuex_30\"></a>1 .2 Vuex的多状态管理</h2>\n<p><strong>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？</strong></p>\n<ul><li>多个试图都依赖同一个状态（一个状态改了，多个界面需要进行更新）</li><li>不同界面的Actions都想修改同一个状态（Home.vue需要修改，Profile.vue也需要修改这个状态）</li></ul>\n<p><strong>也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个试图，但是也有一些状态(状态a/状态b/状态c)属于多个试图共同想要维护的</strong></p>\n<ul><li>状态1/状态2/状态3你放在自己的房间中，你自己管理自己用，没问题。</li><li>但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！</li><li>没错，Vuex就是为我们提供这个大管家的工具。</li></ul>\n<p><strong>全局单例模式（大管家）</strong></p>\n<ul><li>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。</li><li>之后，你们每个试图，按照我规定好的规定，进行访问和修改等操作。</li><li>这就是Vuex背后的基本思想。</li></ul>\n<p><code>图解</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\63f2d0d213c6486cbb9cc0f31a5812e6.jpeg\"/></p>\n<h2><a id=\"13__Store_50\"></a>1.3 . Store</h2>\n<p><strong>每一个Vuex应用的核心就是store（仓库）：</strong></p>\n<ul><li>store本质上是一个容器，它包含着你的应用中大部分的状态（state）；</li></ul>\n<p><strong>Vuex和单纯的全局对象有什么区别呢？</strong></p>\n<ul><li>第一：Vuex的状态存储是响应式的</li><li>当Vue组件从store中读取状态的时候，若store中的状态发生变化，那么相应的组件也会被更新；</li><li>第二：你不能直接改变store中的状态</li></ul>\n<p><strong>改变store中的状态的唯一途径就显示提交(commit) mutation；</strong></p>\n<ul><li>这样使得我们可以方便的跟踪每一个状态的变化，从而让我们能够通过一些工具帮助我们更好的管理应用的状态；</li></ul>\n<p><strong>使用步骤：</strong></p>\n<ul><li>创建Store对象；</li><li>在app中通过插件安装；</li></ul>\n<p><code>创建Store对象=&gt;Vue3</code></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stort <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> stort<span class=\"token punctuation\">;</span>\n\n</code></pre>\n<ul><li>进行挂载</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'./stort/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>vuex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>App.vue</code> =&gt;委托给mutations进行处理</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>home <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> $store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"addClick()\"</span><span class=\"token operator\">&gt;</span>加一<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"redClick()\"</span><span class=\"token operator\">&gt;</span>减一<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  \n  <span class=\"token comment\">// 基本的状态管理实现</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">addClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">//  进行委托给Mutations处理=&gt;委托的是事件不是数据</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addClick\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">redClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redClick\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>style<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h1><a id=\"2_VuexOptions_API_124\"></a>2. Vuex的核心概念(<code>Options API</code>)</h1>\n<h2><a id=\"2_1_state_125\"></a>2 .1 state的使用</h2>\n<p><strong>概念:</strong></p>\n<ul><li>State是提供唯一的公共数据源，所有共享的数据都要统一放到`Store的State中进行存储。</li><li>如果状态信息是保存到多个Store对象中的，那么之后的管理和维护等都会变得特别困难，所以Vuex也使用了单一状态树(单一数据源Single<br/> Source of Truth)来管理应用层级的全部状态。</li><li>单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>  \n    <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>    \n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>  \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>State数据访问方式一 :</strong></p>\n<ul><li>通过this.$store.state.全局数据名称访问</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>当前最新Count值为：<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>State数据访问方式二 :</strong></p>\n<ul><li>从vuex中按需导入mapState函数</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> mapState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n</code></pre>\n<ul><li>通过刚才导入的mapState函数，将当前组件需要的全局数据，映射为当前组件的computed计算属性：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>当前最新Count值为：<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> count <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">&gt;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n​\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> mapState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n​\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//对象写法</span>\n    <span class=\"token comment\">// ...mapState([\"counte\"])</span>\n      <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function-variable function\">sCounter</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>counte<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"2_2_Mutation_179\"></a>2 .2 Mutation的使用</h2>\n<ul><li>如果果想修改count的值,我们可以直接在组件中对this.$store.state.count进行操作即可</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>当前最新Count值为：<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"add\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n​\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<ul><li>测试发现，这可以实现需求，完成+1操作。</li><li>但是，这种方法在vuex中是严格禁止的<code>(检测不到数据的变化)</code>，那要怎么做呢？这时，就需要使用Mutation了。</li></ul>\n<p><strong>利用Mutation用于变更存储在Store中的数据。</strong></p>\n<p><code>注意点</code>:</p>\n<ul><li>通过mutation变更Store数据，不可以直接操作Store中的数据</li><li>通过这种方式，虽然操作稍微繁琐一些，但可以集中监控所有数据的变化，直接操作Store数据是无法进行监控的</li></ul>\n<p><code>下图通过devtools工具监控</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1b5c095321ed45b6b7e287aa0bfb4d7c.png\"/></p>\n<h3><a id=\"2_2_1_Mutation_215\"></a>2 .2 .1 Mutation函数基本语法使用</h3>\n<p><strong>在mutations中定义函数，如下：</strong></p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>    \n      <span class=\"token comment\">// 自增    </span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>      \n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>    \n      <span class=\"token punctuation\">}</span>  \n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>定义的函数会有一个默认参数state，这个就是存储在Store中的state对象。</li></ul>\n<h4><a id=\"2_2_1_1_228\"></a>2 .2 .1 .1方式一</h4>\n<ul><li>在组件中，通过<code>this.$store.commit(方法名)</code>完成触发，如下：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>    \n      <span class=\"token comment\">// 自增    </span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>      \n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>    \n      <span class=\"token punctuation\">}</span>  \n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"2_2_1_2__239\"></a>2 .2 .1 .2 方式二</h4>\n<ul><li>在组件中导入mapMutations函数</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> mapMutations <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n</code></pre>\n<ul><li>通过导入的mapMutations函数，将需要的mutations函数映射为当前组件的methods方法：</li></ul>\n<pre><code class=\"prism language-javascript\">  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"increment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"decrement\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">//对象写法</span>\n      <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">add</span><span class=\"token operator\">:</span> <span class=\"token string\">\"increment\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<h3><a id=\"2_2_2_Mutation_258\"></a>2 .2 .2 Mutation传递参数</h3>\n<ul><li>在通过mutation更新数据的时候，有时候需携带一些额外的参数，此处，参数被成为mutation的载荷<code>Payload。</code>\n<ul><li>如果仅有一个参数时，那payload对应的就是这个参数值，</li></ul> </li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b8ec1a0e78b74bbdbca3f54543a60569.png\"/></p>\n<ul><li>如果是多参数的话，那就会以对象的形式传递，此时的payload是一个对象，可以从对象中取出相关的数据。 \n  <ul><li>在<code>mutations</code>中定义函数时，同样可以接收参数，示例如下：</li></ul> </li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 自增</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 带参数</span>\n    <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> payload<span class=\"token punctuation\">.</span>number\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>App.vue组件调用</code></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//   this.$store.state.count++;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addNum\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"2_2_3Mutation_294\"></a>2 .2 .3Mutation常量类型</h3>\n<ul><li>在mutation中, 我们定义了很多事件类型(也就是其中的方法名称)，当项目越来越大时，Vuex管理的状态越来越多，需要更新状态的情况也越来越多，也就意味着Mutation中的方法越来越多。</li><li>当方法过多，使用者需要花费大量时间精力去记住这些方法，甚至多个文件间来回切换，查看方法名称，也存在拷贝或拼写错误的情况。</li></ul>\n<p><code>解决方案</code></p>\n<ul><li>创建<code>mutation-types.js</code>文件，在其中定义常量</li><li>定义常量时, 可以使用ES2015中的风格, 使用一个常量来作为函数的名称</li><li>使用处引入文件即可<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f3da8f91be3f4d15b03a83052add602e.png\"/><br/> <code>在store/index.js中引入并使用：</code></li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> types <span class=\"token keyword\">from</span> <span class=\"token string\">'./mutation-type'</span>\n \nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'旺财'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 自增</span>\n    <span class=\"token punctuation\">[</span>types<span class=\"token punctuation\">.</span><span class=\"token constant\">ADD_NUM</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>在组件中，引入并调用：</code></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token constant\">ADD_NUM</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../store/mutation-type\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_NUM</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//   this.addAsync();</span>\n      <span class=\"token comment\">//   this.$store.state.count++;</span>\n      <span class=\"token comment\">//   this.$store.commit(\"add\");</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"2_3__Action_346\"></a>2 .3 Action使用</h2>\n<ul><li>Action类似于Mutation，但是是用于处理异步任务的，比如网络请求等</li><li>如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但在Action中还是要通过触发Mutation的方式间接变更数据。</li></ul>\n<p><strong>参数<code>context</code></strong></p>\n<ul><li> <p>在actions中定义的方法，都会有默认值context</p> </li><li> <p>context是和store对象具有相同方法和属性的对象</p> </li><li> <p>可以通过context进行commit相关操作，可以获取context.state数据</p> </li></ul>\n<h3><a id=\"2_3_1_Actons_358\"></a>2 .3 .1 Actons使用方式</h3>\n<p><code>注意点</code></p>\n<ul><li> <p>在 action 中，不能直接修改 state 中的数据</p> </li><li> <p>必须通过 context.commit() 触发某个 mutation 才行</p> </li></ul>\n<p><code>使用方式一 : </code></p>\n<ul><li>在index.js中，添加actions及对应的方法：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token comment\">//只有 mutations 中定义的函数，才有权力修改 state 中的数据</span>\n  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 自增</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">//在 action 中，不能直接修改 state 中的数据</span>\n      <span class=\"token comment\">//必须通过 context.commit() 触发某个 mutation 才行</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>在组件中调用：<code>dispatch派发</code></li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">addNumSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// dispatch函数 专门用于触发 Action</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addAsync'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h4><a id=\"2_3_1_2__407\"></a>2 .3 .1 .2 使用方式二</h4>\n<ul><li>在组件中，导入mapActions函数</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> mapActions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n</code></pre>\n<ul><li>通过刚才导入的mapActions函数，将需要的actions函数映射为当前组件的methods方法：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> mapActions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"addAsync\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>Î\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"2_3_1_2__428\"></a>2 .3 .1 .2 使用方式三</h4>\n<ul><li>在导入mapActions后，可以直接将指定方法绑定在@click事件上。</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"addAsync\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"addAsync\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">(</span>异步<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"2_3_2__Actions_437\"></a>2 .3 .2 Actions携带参数</h3>\n<ul><li>在<code>index.js</code>的actions中，增加携带参数方法，如下：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 带参数</span>\n    <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> payload<span class=\"token punctuation\">.</span>number\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">addAsyncParams</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addNum'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>在组件中，调用如下：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">addNumSyncParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addAsyncParams\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"2_3_3_ActionsPromise_473\"></a>2 .3 .3 Actions与Promise结合</h3>\n<p>Promise经常用于异步操作，在Action中，可以将异步操作放在Promise中，并且在成功或失败后，调用对应的resolve或reject。</p>\n<ul><li>在store/index.js中，为actions添加异步方法：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">loadUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>在组件中调用，如下：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">addPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loadUserInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_4_Getters_504\"></a>2 .4 Getters的使用</h2>\n<ul><li><code>Getters用于对Store中的数据进行加工处理形成新的数据，类似于Vue中的计算属性</code></li><li><code>Store中数据发生变化，Getters的数据也会跟随变化</code></li></ul>\n<h3><a id=\"2_4_1_509\"></a>2 .4 .1使用方式一</h3>\n<ul><li>在index.js中定义getter</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//定义 Getter</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">showNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">return</span> <span class=\"token string\">'当前Count值为:['</span><span class=\"token operator\">+</span>state<span class=\"token punctuation\">.</span>count<span class=\"token string\">']'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>在组件中使用：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">.</span>showNum <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"2_4_2__532\"></a>2 .4 .2 使用方式二</h3>\n<ul><li>在组件中，导入mapGetters函数</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> mapGetters <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n</code></pre>\n<ul><li>通过刚才导入的mapGetters函数，将需要的getters函数映射为当前组件的computed方法：</li></ul>\n<pre><code class=\"prism language-javascript\"> <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"showNum\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>使用时，直接调用即可：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> showNum <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"2_5_Modules_555\"></a>2 .5 Modules使用</h2>\n<ul><li>Vues使用单一状态树，意味着很多状态都会交给Vuex来管理</li><li>当应用变的非常复杂时，Store对象就可能变的相当臃肿</li><li>为解决这个问题，Vuex允许我们将store分割成模块(Module)，并且每个模块拥有自己的State、Mutation、Actions、Getters等</li></ul>\n<p><code>基本使用</code></p>\n<ul><li>在store目录下，新建文件夹modules，用于存放各个模块的modules文件，此处以moduleA为例。</li><li>在modules文件夹中，新建moduleA.js，内部各属性state、mutations等都和之前一致，注释详见代码，示例如下：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'凤凰于飞'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">aUpdateName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateName'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'旺财'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">updateName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            state<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> payload\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'王昭君'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">fullName2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> getters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 通过getters调用本组方法</span>\n            <span class=\"token keyword\">return</span> getters<span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">+</span> <span class=\"token string\">' 礼拜'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">fullName3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">,</span> rootState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// state代表当前module数据状态，rootState代表根节点数据状态</span>\n            <span class=\"token keyword\">return</span> getters<span class=\"token punctuation\">.</span>fullName2 <span class=\"token operator\">+</span> rootState<span class=\"token punctuation\">.</span>counter\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>注意</code> 局部状态通过context.state暴露出来，根节点状态则为context.rootState</p>\n<ul><li>在store/index.js中引用moduleA，如下：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span>\n \n<span class=\"token keyword\">import</span> moduleA <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/moduleA'</span>\n \nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> moduleA\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store\n</code></pre>\n<ul><li>这样就通过分模块完成了对状态管理的模块化拆分。</li></ul>\n<h3><a id=\"2_5_1_Modules_620\"></a>2 .5 .1 利用Modules对项目进行优化</h3>\n<p><code>注意</code> 如果项目非常复杂，除了分模块划分外，还可以将主模块的actions、mutations、getters等分别独立出去，拆分成单独的js文件，分别通过export导出，然后再index.js中导入使用。</p>\n<ul><li>示例： 分别将主模块的actions、mutations、getters独立成js文件并导出，以actions.js为例，</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">aUpdateInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateInfo'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>在store/index.js中，引入并使用，如下：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span>\n<span class=\"token keyword\">import</span> mutations <span class=\"token keyword\">from</span> <span class=\"token string\">'./mutations'</span>\n<span class=\"token keyword\">import</span> actions <span class=\"token keyword\">from</span> <span class=\"token string\">'./actions'</span>\n<span class=\"token keyword\">import</span> getters <span class=\"token keyword\">from</span> <span class=\"token string\">'./getters'</span>\n<span class=\"token keyword\">import</span> moduleA <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/moduleA'</span>\n \n \nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">students</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'旺财'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小强'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">31</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'大明'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'狗蛋'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">78</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'keko'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token punctuation\">,</span>\n    mutations<span class=\"token punctuation\">,</span>\n    getters<span class=\"token punctuation\">,</span>\n    actions<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> moduleA\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store\n</code></pre>\n<p><code>模块项目图</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\5cdf78e1c7164eda98f09f8af09f3045.png\"/></p>\n<h1><a id=\"3_VuexCPA_679\"></a>3 .Vuex核心概念(<code>CPA</code>)</h1>\n<p><code>注意点</code></p>\n<ul><li><code>setup没有this</code>\n<ul><li>我们知道vue3的setup函数中是没有this的，就算传了context参数，打印出来也没有相关属性</li><li>但是我们可以直接从vuex 4.X中解构出<code>useStore方法</code>，就可以在setup中使用vuex的相关函数了</li></ul> </li></ul>\n<p><code>基本使用参考代码</code></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> $store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"plusCount\"</span><span class=\"token operator\">&gt;</span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用useStore方法</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">plusCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"increaseCount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span> plusCount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<h2><a id=\"3_1_state_714\"></a>3 .1. state的使用</h2>\n<p><strong>导入函数</strong></p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> mapState<span class=\"token punctuation\">,</span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> computed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n</code></pre>\n<p><code>基本使用</code></p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> sCounter <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">//必须return</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n        sCounter<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"3_1_1_734\"></a>3 .1 .1封装函数的方式使用</h3>\n<p>创建<code>useStart.js</code>封装函数</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> computed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> mapState<span class=\"token punctuation\">,</span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mapper</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 拿到store独享</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 获取到对应的对象的functions: {name: function, age: function}</span>\n  <span class=\"token keyword\">const</span> storeStateFns <span class=\"token operator\">=</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 对数据进行转换</span>\n  <span class=\"token keyword\">const</span> storeState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 抽取key进行遍历</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>storeStateFns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fnKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//  把key给storeStateFns函数=&gt;并绑定this</span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> storeStateFns<span class=\"token punctuation\">[</span>fnKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">$store</span><span class=\"token operator\">:</span> store <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 函数给计算属性并赋值给storeState对象</span>\n    storeState<span class=\"token punctuation\">[</span>fnKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> storeState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>在组件中进行使用</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../hooks/useState'</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> storeState <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"counter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> storeState2 <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function-variable function\">sCounter</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">sName</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>name\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">...</span>storeState<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>storeState2\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>展示方式</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>counter<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"3_2_Getters_789\"></a>3 .2 Getters的基本使用</h2>\n<ul><li>某些属性我们可能需要变化后在使用，这个时候可以使用getters：<code>(相当于computed属性)</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\9fb975174fc9410cb269af079b47bcdb.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b0d3d0ce08cf460597494631185b891e.png\"/></li></ul>\n<h3><a id=\"3_2_1_getters_794\"></a>3 .2 .1 getters第二个参数与返回值</h3>\n<ul><li> <p>getters可以接收第二个参数：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ad08a9a9f39a4b46a7771a1c3dd4a61e.png\"/></p> </li><li> <p>getters中的函数本身，可以返回一个函数，那么在使用的地方相当于可以调用这个函数：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9e537248287f41e286f3a4be8ee466ae.png\"/><br/> <code>index.js中state与Getter代码</code></p> </li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"why\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">1.88</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">books</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"深入Vuejs\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"深入Webpack\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"深入React\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"深入Node\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">220</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">discount</span><span class=\"token operator\">:</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">banners</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">totalPrice</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> getters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">let</span> totalPrice <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> book <span class=\"token keyword\">of</span> state<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        totalPrice <span class=\"token operator\">+=</span> book<span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> book<span class=\"token punctuation\">.</span>price\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> totalPrice <span class=\"token operator\">*</span> getters<span class=\"token punctuation\">.</span>currentDiscount\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">currentDiscount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>discount <span class=\"token operator\">*</span> <span class=\"token number\">0.9</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">totalPriceCountGreaterN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> getters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> totalPrice <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> book <span class=\"token keyword\">of</span> state<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&gt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            totalPrice <span class=\"token operator\">+=</span> book<span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> book<span class=\"token punctuation\">.</span>price\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> totalPrice <span class=\"token operator\">*</span> getters<span class=\"token punctuation\">.</span>currentDiscount\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<ul><li>组件代码</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>总价值<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> $store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">.</span>totalPrice <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>总价值<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> $store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">.</span><span class=\"token function\">totalPriceCountGreaterN</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"3_2_2__849\"></a>3 .2 .2 封装函数的方式使用</h3>\n<p><code>创建useGetters.js</code></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> computed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> mapGetters<span class=\"token punctuation\">,</span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useGetters</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mapper</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 拿到store独享</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 获取到对应的对象的functions: {name: function, age: function}</span>\n  <span class=\"token keyword\">const</span> storeStateFns <span class=\"token operator\">=</span> <span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 对数据进行转换</span>\n  <span class=\"token keyword\">const</span> storeState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>storeStateFns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fnKey</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> storeStateFns<span class=\"token punctuation\">[</span>fnKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">$store</span><span class=\"token operator\">:</span> store<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    storeState<span class=\"token punctuation\">[</span>fnKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> storeState\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>在组件中的使用</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> nameInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> ageInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> heightInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> useGetters <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../hooks/useGetters'</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> storeGetters <span class=\"token operator\">=</span> <span class=\"token function\">useGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"nameInfo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ageInfo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"heightInfo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">...</span>storeGetters\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_Mutation_896\"></a>3 .Mutation的使用</h2>\n<ul><li>提交载荷（Payload）</li><li>对象风格的提交方式</li><li>使用常量替代 Mutation 事件类型</li><li>Mutation 必须是同步函数</li><li>在组件中提交 Mutation</li></ul>\n<p><a href=\"https://vuex.vuejs.org/zh/guide/mutations.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%AD%E6%8F%90%E4%BA%A4-mutation\">Mutation的使用核心参考官网</a></p>\n<h2><a id=\"4_Action_905\"></a>4 .Action的使用</h2>\n<h3><a id=\"4_1Action_906\"></a>4 .1Action的异步使用</h3>\n<ul><li>在<code>index.js</code>中为Actions添加异步方法</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">getHomeMultidata</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://123.207.32.32:8000/home/multidata\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addBannerData\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>banner<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xiazhan\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>在组件中使用</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getHomeMultidata\"</span><span class=\"token punctuation\">)</span>\n        promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"5_Mudule_941\"></a>5 .Mudule的使用</h2>\n<ul><li>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象，当应用变得非常复杂时，store 对象就有可能变得相当臃肿；</li><li>为了解决以上问题，Vuex 允许我们将store 分割成模块（module）；</li><li>每个模块拥有自己的state、mutation、action、getter、甚至是嵌套子模块；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3e61293f2f604db7ac4da09c8a45d661.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\37a9155752e44fbe8bc5e5cb8af4d029.png\"/></li></ul>\n<h3><a id=\"5_1module_948\"></a>5 .1module的命名空间</h3>\n<ul><li>默认情况下，模块内部的action和mutation仍然是注册在全局的命名空间中的： \n  <ul><li>这样使得多个模块能够对同一个action 或mutation 作出响应；</li><li>Getter 同样也默认注册在全局命名空间；</li></ul> </li><li>如果我们希望模块具有更高的封装度和复用性，可以添加<code>namespaced: true</code> 的方式使其成为带命名空间的模块：</li><li>当模块被注册后，它的所有getter、action 及mutation 都会自动根据模块注册的路径调整命名；</li></ul>\n<p>在模块module文件夹中创建<code>home.js</code></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> homeModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 指定命名空间 =&gt;局部</span>\n  <span class=\"token literal-property property\">namespaced</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">homeCounter</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">doubleHomeCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">,</span> rootState<span class=\"token punctuation\">,</span> rootGetters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>homeCounter <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">otherGetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">100</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      state<span class=\"token punctuation\">.</span>homeCounter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">incrementAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{<!-- --></span>commit<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> rootState<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">,</span> rootGetters<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"increment\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"increment\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> homeModule\n</code></pre>\n<p>在入口文件<code>index.js</code>导入<code>home.js</code></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span>\n<span class=\"token keyword\">import</span> home <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/home'</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/user'</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">rootCounter</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">doubleRootCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>rootCounter <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      state<span class=\"token punctuation\">.</span>rootCounter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    home<span class=\"token punctuation\">,</span>\n    user\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在组件中访问<code>home.js' </code>中的counte和action的数据</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token comment\">//[查找规则]</span>\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> $store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">[</span><span class=\"token string\">\"home/doubleHomeCounter\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"homeIncrement\"</span><span class=\"token operator\">&gt;</span>home<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"homeIncrementAction\"</span><span class=\"token operator\">&gt;</span>home<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">homeIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"home/increment\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">homeIncrementAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"home/incrementAction\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"5_2module_1046\"></a>5 .2module修改或派发根组件</h3>\n<ul><li>如果要在action中修改root中的state，可以使用：</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0b32c3068fee436cb8cf2683e65f504e.png\"/><br/> <code>参考代码</code></p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">incrementAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{<!-- --></span>commit<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> rootState<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">,</span> rootGetters<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"increment\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"increment\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"5_3module_1060\"></a>5 .3module的辅助函数</h3>\n<ul><li>方式一：通过完整的模块空间名称来查找；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4df64989c23947868de2718c84b47756.png\"/><br/> -方式二: 第一个参数传入模块空间名称，后面写上要使用的属性；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5ebe86a2d0664d5aa350263f42286490.png\"/></li><li>方式三：通过createNamespacedHelpers 生成一个模块的辅助函数；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d252dbb844f14b6bb4a6b64f41bcef40.png\"/><br/> <strong>在<code>setup</code>中的使用</strong></li></ul>\n<pre><code class=\"prism language-javascript\"> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// {homeCounter: function}</span>\n      <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"rootCounter\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> rootGetters <span class=\"token operator\">=</span> <span class=\"token function\">useGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"doubleRootCounter\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token function\">useGetters</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"home\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"doubleHomeCounter\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> mutations <span class=\"token operator\">=</span> <span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"increment\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"incrementAction\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>getters<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>rootGetters<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>mutations<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>actions\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"4__1089\"></a>4 .面试题型</h1>\n<h2><a id=\"4_1_1090\"></a>4 .1项目结构</h2>\n<p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ol><li>应用层级的状态应该集中到单个 store 对象中。</li><li>提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。</li><li>异步逻辑都应该封装到 action 里面。</li></ol>\n<p>只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p>\n<p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\44c268b55f5d44b19fdc31d6351e6cfb.png\"/></p>\n<h2><a id=\"4_2_vuex_1102\"></a>4 .2 vuex的五个核心</h2>\n<p>一、Vuex的五个核心概念：state、getters、mutations、actions、modules<br/> 1、state: vuex的基本数据，<code>用来存储变量</code>；<br/> 2、getters: 从基本数据（state）派生的数据，相当于<code>state的计算属性；</code><br/> 3、mutations: 提交更新数据的方法，<code>必须是同步的(如果需要异步使用action)</code>。每个mution 都有一个字符串的事件类型（type）和一个回调函数（handler）。<br/> 回调函数就是我们实际进行状态更改的地方，并且它会接受 state作为第一个参数，提交载荷作为第二个参数。<br/> 4、action: 和mution的功能大致相同，不同之处在于 <code>①Action提交的是mution，而不是直接变更状态，②Action可以包含任意异步操作。</code><br/> 5、modules: 模块化vuex，可以让每一个模块拥有自己的 state、mutation、action、 getters，使得结构非常清晰，方便管理。</p>\n<p><code>图解</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\d5bb83544b21420394576b44410e9872.jpeg\"/><br/> 参考: <a href=\"https://blog.csdn.net/qq_43363884/article/details/95948884?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166221597716781432937301%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166221597716781432937301&amp;biz_id=0&amp;utm_medium=distribute.pc_chrome_plugin_search_result.none-task-blog-2~all~top_positive~default-1-95948884-null-null.nonecase&amp;utm_term=vuex&amp;spm=1018.2226.3001.4187\">vue中使用vuex(超详细)</a><br/> <a href=\"https://blog.csdn.net/x550392236/article/details/80668263?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=vuex&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-80668263.nonecase&amp;spm=1018.2226.3001.4187\">vuex基础解析</a><br/> <a href=\"https://vuex.vuejs.org/zh/guide/#%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84-store\">vuex官网</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}