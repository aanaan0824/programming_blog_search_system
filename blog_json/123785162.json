{"blogid": "123785162", "writerAge": "码龄9年", "writerBlogNum": "1073", "writerCollect": "813", "writerComment": "212", "writerFan": "8799", "writerGrade": "7级", "writerIntegral": "10921", "writerName": "Rust语言中文社区", "writerProfileAdress": "writer_image\\profile_123785162.jpg", "writerRankTotal": "1209", "writerRankWeekly": "3826", "writerThumb": "431", "writerVisitNum": "619136", "blog_read_count": "2079", "blog_time": "于 2022-03-27 23:34:17 发布", "blog_title": "【Rust 日报】2022-03-27 Google对25名Rust开源贡献者做出奖励", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div id=\"js_content\">\n<h2><strong>Google对25名Rust开源贡献者做出奖励</strong></h2>\n<p>Rust 是系统级编程语言，重点关注内存安全。Google 在一些项目中使用了 Rust：包括 Android、Fuchsia 和 ICU4X；并一直参与在 Linux 内核中评估 Rust 的工作。Google 也是 Rust 基金会的创始成员。</p>\n<p>部分列表（经允许）如下：</p>\n<table><thead><tr><th>Winner</th><th>Project</th></tr></thead><tbody><tr><td>antoyo</td><td>For work on rustc_codegen_gcc</td></tr><tr><td>Asherah Connor</td><td>For maintaining comrak</td></tr><tr><td>David Hewitt</td><td>For maintaining PyO3</td></tr><tr><td>Dirkjan Ochtman</td><td>For maintaining rustls and quinn</td></tr><tr><td>Frank Denis</td><td>For maintaining rust-ed25519-compact</td></tr><tr><td>Gary Guo</td><td>For maintaining Rust for Linux</td></tr><tr><td>Jack Grigg</td><td>For integrating RustCrypto into Fuchsia</td></tr><tr><td>Jack Huey</td><td>For highly involved rust compiler work fixing a large number of crashes around higher-kinded types.</td></tr><tr><td>Joe Birr-Pixton</td><td>For building rustls</td></tr><tr><td>Joshua Nelson</td><td>For improving the developer workflow for contributing to Rust itself</td></tr><tr><td>Lokathor</td><td>For creating tinyvec and bytemuck</td></tr><tr><td>Mara Bos</td><td>For work on the Rust Libraries Team and the 2021 Rust Edition</td></tr><tr><td>Nikita Popov</td><td>For maintaining the Rust compiler’s LLVM backend</td></tr><tr><td>Pietro Albini</td><td>For maintaining crucial Rust infrastructure and working on the Rust core team</td></tr><tr><td>Ricky Hosfelt</td><td>For maintaining cargo-outdated</td></tr><tr><td>Sébastien Crozet</td><td>For creating dimforge</td></tr><tr><td>Simonas Kazlauskas</td><td>For maintaining the Rust compiler’s LLVM backend</td></tr></tbody></table>\n<blockquote>\n<p>找了几次，没在原文中找到到底奖了啥；）不过，Google Open Source Peer Bonus 主页有：一张预付借记卡和一封奖励信 :D</p>\n<p>另外，社区成员说 Gary Guo 大佬是中国人~</p>\n</blockquote>\n<p>地址：https://opensource.googleblog.com/2022/03/Rewarding-Rust-contributors-with-Google-Open-Source-Peer-Bonuses.html</p>\n<h2><strong>Rust移动开发与跨平台模式探究</strong></h2>\n<p>社区张汉东老师关于 Rust 在移动开发和跨平台模式方面的探究，大纲如下：</p>\n<ul><li><p>Rust 语言 对 iOS 和 Android 平台支持状态</p></li><li><p>Rust 用于移动开发的几种方式</p></li><li><p>Android 官方支持 Rust 的方式</p></li><li><p>给 Apple 的一封公开信：请用 Rust 替换 Objective-C</p></li></ul>\n<p><img alt=\"2d004ed1e1d097558fcd8b803a27d18f.png\" src=\"image\\2d004ed1e1d097558fcd8b803a27d18f.png\"/></p>\n<p>地址：https://zhuanlan.zhihu.com/p/484269271</p>\n<h2><strong>bombs：单生产者多消费者通信类型</strong></h2>\n<p>其中 <code>Fuse</code> 是生产者，<code>Bomb</code> 是消费者。</p>\n<p>使用指南：</p>\n<pre class=\"has\"><code class=\"language-go\">// Create a new fuse and bomb pair.\nlet (fuse, bomb) = Bomb::new(); \n \n// Clone `bomb` into thread.\nlet bomb_clone = bomb.clone();\nthread::spawn(move || {\n    loop {\n        // Do some stuff...\n     \n        if let Some(_) = bomb_clone.exploded() {\n            // Received close signal, break.\n \n            // Clean up data values...\n \n            break;\n        }\n    }\n});\n \n// Create another thread.\n// Move original `bomb` into thread.\nthread::spawn(move || {\n    loop {\n        // Do some other stuff...\n     \n        if let Some(_) = bomb.exploded() {\n            // Received close signal, break.\n \n            // Clean up data values...\n \n            break;\n        }\n    }\n});\n \n// Do some different stuff...\n \n// Send close signal.\nlet fire = fuse.light(());\n \n// Wait for all inner threads to close safely (checked by `Bomb` drop).\nwhile !fire.extinguished() { }\n \n// Now safely quit the program.</code></pre>\n<p>GitHub：https://gitlab.com/nebneb0703/bombs</p>\n<h2><strong>用Rust写个语言</strong></h2>\n<p>使用 Rust 和 LALRPOP 从头开始实现一个 C 风格架构的编程语言。</p>\n<p>视频：https://www.youtube.com/watch?v=OynJIFEsf3o</p>\n<p>GitHub：https://github.com/eZanmoto/norpl</p>\n<p>使用 Rust 实现 Brainfuck 语言。</p>\n<blockquote>\n<p>Brainfuck 是 Urban Müller 于 1993 年创建的一种极简、深奥的编程语言。该语言以其极简主义著称，仅包含八个简单的命令、一个数据指针和一个指令指针。虽然它是完全图灵完备的，但它并不是为了实际使用，而是为了挑战和娱乐程序员。——来自维基百科</p>\n</blockquote>\n<p>Brainfuck 的 Hello World 是这样的：</p>\n<pre class=\"has\"><code class=\"language-go\">++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]\n&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.\n&gt;.+++.------.--------.&gt;+.&gt;.</code></pre>\n<blockquote>\n<p>小编内心 OS：谁吃饱了撑的没事干搞这个^_^</p>\n</blockquote>\n<p>地址：https://rtoch.com/posts/brainfuck-interpreter-implementation-part-1/</p>\n<p>GitHub：https://github.com/CrazyRoka/brainfuck-interpreter</p>\n<h2><strong>num2words：数字转文本</strong></h2>\n<p>一个阿拉伯数字转自然语言的小工具。使用方法：</p>\n<pre class=\"has\"><code class=\"language-go\">use num2words::num2words;\nassert_eq!(num2words!(42), Ok(String::from(\"forty-two\")));</code></pre>\n<p>也可以在命令行使用：</p>\n<pre class=\"has\"><code class=\"language-go\">$ num2words 42\nforty-two\n$ num2words 10 --to EUR\nten euros</code></pre>\n<p>GitHub：https://github.com/Ballasi/num2words/</p>\n<h2><strong>rust_android_ios寻找维护者</strong></h2>\n<p>项目通过使用共享库来防止代码重复，保持完全原生的 UI 体验和对平台最新 API 的简单访问。它也非常灵活，允许在不同平台之间轻松迁移，包括传统的跨平台框架，如 Flutter 或 React Native。例如，您可以使用 Rust+React Native 或 Rust+Flutter 开发您的 MVP，然后迁移到原生 iOS/Android，而无需重写所有内容。您甚至可以使用 WebAssembly 或桌面应用程序将您的核心重用于 Web 应用程序（同样，您可以使用本机或跨平台框架，如 Electron）。</p>\n<p>如果你有意向，可以在项目上开个 Issue，或给作者发邮件：mailto:ivanhp978@gmail.com</p>\n<p>GitHub：https://github.com/ivanschuetz/rust_android_ios</p>\n<hr/>\n<p>From 日报小组 长琴</p>\n<p>社区学习交流平台订阅：</p>\n<ul><li><p>Rustcc 论坛：支持 rss</p></li><li><p>微信公众号：Rust 语言中文社区</p></li></ul>\n</div>\n</div>\n</div>"}