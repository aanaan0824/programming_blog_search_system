{"blogid": "114684428", "writerAge": "码龄9年", "writerBlogNum": "427", "writerCollect": "12800", "writerComment": "598", "writerFan": "4512", "writerGrade": "7级", "writerIntegral": "9246", "writerName": "巨輪", "writerProfileAdress": "writer_image\\profile_114684428.jpg", "writerRankTotal": "9874", "writerRankWeekly": "1834", "writerThumb": "3088", "writerVisitNum": "797053", "blog_read_count": "68287", "blog_time": "于 2021-03-12 02:53:38 发布", "blog_title": "Java开发常见面试题详解（并发，JVM）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>预览</h2>\n<h3><a id=\"_2\"></a>并发</h3>\n<table><thead><tr><th>问题</th><th>详解</th></tr></thead><tbody><tr><td>请谈谈你对volatile的理解</td><td><a href=\"#02_volatile_188\">link</a></td></tr><tr><td>CAS你知道吗？</td><td><a href=\"#12_CAS_702\">link</a></td></tr><tr><td>原子类Atomiclnteger的ABA问题谈谈?原子更新引用知道吗？</td><td><a href=\"#16_ABA_894\">link</a></td></tr><tr><td>我们知道ArrayList是线程不安全，请编码写一个不安全的案例并给出解决方案</td><td><a href=\"#20__1080\">link</a></td></tr><tr><td>公平锁/非公平锁/可重入锁/递归锁/自旋锁谈谈你的理解？请手写一个自旋锁</td><td><a href=\"#25_java_1503\">link</a></td></tr><tr><td>CountDownLatch/CyclicBarrier/Semaphore使用过吗？</td><td><a href=\"#32_CountDownLatch_2030\">link</a></td></tr><tr><td>阻塞队列知道吗？</td><td><a href=\"#35__2448\">link</a></td></tr><tr><td>线程池用过吗？ThreadPoolExecutor谈谈你的理解？</td><td><a href=\"#46__3374\">link</a></td></tr><tr><td>线程池用过吗？生产上你如何设置合理参数</td><td><a href=\"#48_7_3512\">link</a></td></tr><tr><td>死锁编码及定位分析</td><td><a href=\"#55__3810\">link</a></td></tr></tbody></table>\n<h3><a id=\"JVM_18\"></a>JVM</h3>\n<table><thead><tr><th>问题</th><th>详解</th></tr></thead><tbody><tr><td>JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots</td><td><a href=\"#57_JVMGC_4047\">link</a></td></tr><tr><td>你说你做过JVM调优和参数配置，请问如何盘点查看JVM系统默认值</td><td><a href=\"#59_JVMX_4177\">link</a></td></tr><tr><td>你平时工作用过的JVM常用基本配置参数有哪些？</td><td><a href=\"#59_JVMX_4177\">link</a></td></tr><tr><td>强引用、软引用、弱引用、虚引用分别是什么？请谈谈你对OOM的认识</td><td><a href=\"#72_Reference_4525\">link</a></td></tr><tr><td>GC垃圾回收算法和垃圾收集器的关系？分别是什么请你谈谈怎么查看服务器默认的垃圾收集器是那个？</td><td><a href=\"#88__5322\">link</a></td></tr><tr><td>生产上如何配置垃圾收集器的？</td><td><a href=\"#100_GC_5840\">link</a></td></tr><tr><td>谈谈你对垃圾收集器的理解？G1垃圾收集器</td><td><a href=\"#101_GCG1_5865\">link</a></td></tr><tr><td>生产环境服务器变慢，诊断思路和性能评估谈谈？</td><td><a href=\"#105_Linuxtop_6190\">link</a></td></tr><tr><td>假如生产环境出现CPU占用过高，请谈谈你的分析思路和定位</td><td><a href=\"#112_CPU_6327\">link</a></td></tr><tr><td>对于JDK自带的JVM监控和性能分析工具用过哪些?一般你是怎么用的？</td><td><a href=\"https://blog.csdn.net/u011863024/article/details/106651068\">link</a></td></tr></tbody></table>\n<hr/>\n<table><thead><tr><th>-</th><th>-</th><th>-</th></tr></thead><tbody><tr><td><a href=\"#_0\">预览</a></td><td><a href=\"#01__79\">01_本课程前提要求和说明</a></td><td><a href=\"#02_volatile_188\">02_volatile是什么</a></td></tr><tr><td><a href=\"#03_JMM_198\">03_JMM内存模型之可见性</a></td><td><a href=\"#04__226\">04_可见性的代码验证说明</a></td><td><a href=\"#05_volatile_297\">05_volatile不保证原子性</a></td></tr><tr><td><a href=\"#06_volatile_356\">06_volatile不保证原子性理论解释</a></td><td><a href=\"#07_volatile_368\">07_volatile不保证原子性问题解决</a></td><td><a href=\"#08_volatile1_433\">08_volatile指令重排案例1</a></td></tr><tr><td><a href=\"#09_volatile2_496\">09_volatile指令重排案例2</a></td><td><a href=\"#10__553\">10_单例模式在多线程环境下可能存在安全问题</a></td><td><a href=\"#11_volatile_652\">11_单例模式volatile分析</a></td></tr><tr><td><a href=\"#12_CAS_702\">12_CAS是什么</a></td><td><a href=\"#13_CAS_727\">13_CAS底层原理-上</a></td><td><a href=\"#14_CAS_809\">14_CAS底层原理-下</a></td></tr><tr><td><a href=\"#15_CAS_861\">15_CAS缺点</a></td><td><a href=\"#16_ABA_894\">16_ABA问题</a></td><td><a href=\"#17_AtomicReference_908\">17_AtomicReference原子引用</a></td></tr><tr><td><a href=\"#18_AtomicStampedReference_955\">18_AtomicStampedReference版本号原子引用</a></td><td><a href=\"#19_ABA_961\">19_ABA问题的解决</a></td><td><a href=\"#20__1080\">20_集合类不安全之并发修改异常</a></td></tr><tr><td><a href=\"#21__1115\">21_集合类不安全之写时复制</a></td><td><a href=\"#22_Set_1264\">22_集合类不安全之Set</a></td><td><a href=\"#23_Map_1388\">23_集合类不安全之Map</a></td></tr><tr><td><a href=\"#24_TransferValue_1427\">24_TransferValue醒脑小练习</a></td><td><a href=\"#25_java_1503\">25_java锁之公平和非公平锁</a></td><td><a href=\"#26_java_1554\">26_java锁之可重入锁和递归锁理论知识</a></td></tr><tr><td><a href=\"#27_java_1570\">27_java锁之可重入锁和递归锁代码验证</a></td><td><a href=\"#28_java_1693\">28_java锁之自旋锁理论知识</a></td><td><a href=\"#29_java_1705\">29_java锁之自旋锁代码验证</a></td></tr><tr><td><a href=\"#30_java_1790\">30_java锁之读写锁理论知识</a></td><td><a href=\"#31_java_1808\">31_java锁之读写锁代码验证</a></td><td><a href=\"#32_CountDownLatch_2030\">32_CountDownLatch</a></td></tr><tr><td><a href=\"#33_CyclicBarrierDemo_2176\">33_CyclicBarrierDemo</a></td><td><a href=\"#34_SemaphoreDemo_2372\">34_SemaphoreDemo</a></td><td><a href=\"#35__2448\">35_阻塞队列理论</a></td></tr><tr><td><a href=\"#36__2456\">36_阻塞队列接口结构和实现类</a></td><td><a href=\"#37_api_2518\">37_阻塞队列api之抛出异常组</a></td><td><a href=\"#38_api_2583\">38_阻塞队列api之返回布尔值组</a></td></tr><tr><td><a href=\"#39_api_2622\">39_阻塞队列api之阻塞和超时控制</a></td><td><a href=\"#40_SynchronousQueue_2716\">40_阻塞队列之同步SynchronousQueue队列</a></td><td><a href=\"#41__2801\">41_线程通信之生产者消费者传统版</a></td></tr><tr><td><a href=\"#42_SynchronizedLock_2960\">42_Synchronized和Lock有什么区别</a></td><td><a href=\"#43_Condition_2982\">43_锁绑定多个条件Condition</a></td><td><a href=\"#44__3184\">44_线程通信之生产者消费者阻塞队列版</a></td></tr><tr><td><a href=\"#45_Callable_3336\">45_Callable接口</a></td><td><a href=\"#46__3374\">46_线程池使用及优势</a></td><td><a href=\"#47_3_3392\">47_线程池3个常用方式</a></td></tr><tr><td><a href=\"#48_7_3512\">48_线程池7大参数入门简介</a></td><td><a href=\"#49_7_3551\">49_线程池7大参数深入介绍</a></td><td><a href=\"#50__3567\">50_线程池底层工作原理</a></td></tr><tr><td><a href=\"#51_4_3589\">51_线程池的4种拒绝策略理论简介</a></td><td><a href=\"#52__3610\">52_线程池实际中使用哪一个</a></td><td><a href=\"#53__3638\">53_线程池的手写改造和拒绝策略</a></td></tr><tr><td><a href=\"#54__3769\">54_线程池配置合理线程数</a></td><td><a href=\"#55__3810\">55_死锁编码及定位分析</a></td><td><a href=\"#56_JVMGC_4041\">56_JVMGC下半场技术加强说明和前提知识要求</a></td></tr><tr><td><a href=\"#57_JVMGC_4047\">57_JVMGC快速回顾复习串讲</a></td><td><a href=\"#58_GCRoots_4113\">58_谈谈你对GCRoots的理解</a></td><td><a href=\"#59_JVMX_4177\">59_JVM的标配参数和X参数</a></td></tr><tr><td><a href=\"#60_JVMXX_4196\">60_JVM的XX参数之布尔类型</a></td><td><a href=\"#61_JVMXX_4224\">61_JVM的XX参数之设值类型</a></td><td><a href=\"#62_JVMXXXmsXmx_4237\">62_JVM的XX参数之XmsXmx坑题</a></td></tr><tr><td><a href=\"#63_JVM_4246\">63_JVM盘点家底查看初始默认值</a></td><td><a href=\"#64_JVM_4301\">64_JVM盘点家底查看修改变更值</a></td><td><a href=\"#65__4331\">65_堆内存初始大小快速复习</a></td></tr><tr><td><a href=\"#66_Xss_4375\">66_常用基础参数栈内存Xss讲解</a></td><td><a href=\"#67_MetaspaceSize_4399\">67_常用基础参数元空间MetaspaceSize讲解</a></td><td><a href=\"#68_PrintGCDetails_4417\">68_常用基础参数PrintGCDetails回收前后对比讲解</a></td></tr><tr><td><a href=\"#69_SurvivorRatio_4471\">69_常用基础参数SurvivorRatio讲解</a></td><td><a href=\"#70_NewRatio_4487\">70_常用基础参数NewRatio讲解</a></td><td><a href=\"#71_MaxTenuringThreshold_4501\">71_常用基础参数MaxTenuringThreshold讲解</a></td></tr><tr><td><a href=\"#72_Reference_4525\">72_强引用Reference</a></td><td><a href=\"#73_SoftReference_4546\">73_软引用SoftReference</a></td><td><a href=\"#74_WeakReference_4680\">74_弱引用WeakReference</a></td></tr><tr><td><a href=\"#75__4714\">75_软引用和弱引用的适用场景</a></td><td><a href=\"#76_WeakHashMap_4731\">76_WeakHashMap案例演示和解析</a></td><td><a href=\"#77__4795\">77_虚引用简介</a></td></tr><tr><td><a href=\"#78_ReferenceQueue_4811\">78_ReferenceQueue引用队列介</a></td><td><a href=\"#79_PhantomReference_4875\">79_虚引用PhantomReference</a></td><td><a href=\"#80_GCRoots_4928\">80_GCRoots和四大引用小总结</a></td></tr><tr><td><a href=\"#81_SOFEStackOverflowError_4934\">81_SOFE之StackOverflowError</a></td><td><a href=\"#82_OOMJava_heap_space_4978\">82_OOM之Java heap space</a></td><td><a href=\"#83_OOMGC_overhead_limit_exceeded_5005\">83_OOM之GC overhead limit exceeded</a></td></tr><tr><td><a href=\"#84_OOMDirect_buffer_memory_5088\">84_OOM之Direct buffer memory</a></td><td><a href=\"#85_OOMunable_to_create_new_native_thread_5148\">85_OOM之unable to create new native thread故障演示</a></td><td><a href=\"#86_OOMunable_to_create_new_native_thread_5191\">86_OOM之unable to create new native thread上限调整</a></td></tr><tr><td><a href=\"#87_OOMMetaspace_5229\">87_OOM之Metaspace</a></td><td><a href=\"#88__5322\">88_垃圾收集器回收种类</a></td><td><a href=\"#89_G1_5339\">89_串行并行并发G1四大垃圾回收方式</a></td></tr><tr><td><a href=\"#90__5355\">90_如何查看默认的垃圾收集器</a></td><td><a href=\"#91_JVM_5389\">91_JVM默认的垃圾收集器有哪些</a></td><td><a href=\"#92_GC7_5405\">92_GC之7大垃圾收集器概述</a></td></tr><tr><td><a href=\"#93_GC_5423\">93_GC之约定参数说明</a></td><td><a href=\"#94_GCSerial_5451\">94_GC之Serial收集器</a></td><td><a href=\"#95_GCParNew_5535\">95_GC之ParNew收集器</a></td></tr><tr><td><a href=\"#96_GCParallel_5600\">96_GC之Parallel收集器</a></td><td><a href=\"#97_GCParallelOld_5664\">97_GC之ParallelOld收集器</a></td><td><a href=\"#98_GCCMS_5716\">98_GC之CMS收集器</a></td></tr><tr><td><a href=\"#99_GCSerialOld_5810\">99_GC之SerialOld收集器</a></td><td><a href=\"#100_GC_5840\">100_GC之如何选择垃圾收集器</a></td><td><a href=\"#101_GCG1_5865\">101_GC之G1收集器</a></td></tr><tr><td><a href=\"#102_GCG1_6090\">102_GC之G1底层原理</a></td><td><a href=\"#103_GCG1CMS_6151\">103_GC之G1参数配置及和CMS的比较</a></td><td><a href=\"#104_JVMGCSpringBoot_6181\">104_JVMGC结合SpringBoot微服务优化简介</a></td></tr><tr><td><a href=\"#105_Linuxtop_6190\">105_Linux命令之top</a></td><td><a href=\"#106_Linuxcpuvmstat_6212\">106_Linux之cpu查看vmstat</a></td><td><a href=\"#107_Linuxcpupidstat_6234\">107_Linux之cpu查看pidstat</a></td></tr><tr><td><a href=\"#108_Linuxfreepidstat_6256\">108_Linux之内存查看free和pidstat</a></td><td><a href=\"#109_Linuxdf_6278\">109_Linux之硬盘查看df</a></td><td><a href=\"#110_LinuxIOiostatpidstat_6284\">110_Linux之磁盘IO查看iostat和pidstat</a></td></tr><tr><td><a href=\"#111_LinuxIOifstat_6301\">111_Linux之网络IO查看ifstat</a></td><td><a href=\"#112_CPU_6327\">112_CPU占用过高的定位分析思路</a></td><td><a href=\"#113_GitHub_6366\">113_GitHub骚操作之开启</a></td></tr><tr><td><a href=\"#114_GitHub_6370\">114_GitHub骚操作之常用词</a></td><td><a href=\"#115_GitHubin_6380\">115_GitHub骚操作之in限制搜索</a></td><td><a href=\"#116_GitHubstarfork_6392\">116_GitHub骚操作之star和fork范围搜索</a></td></tr><tr><td><a href=\"#117_GitHubawesome_6403\">117_GitHub骚操作之awesome搜索</a></td><td><a href=\"#118_GitHubL_6408\">118_GitHub骚操作之#L数字</a></td><td><a href=\"#119_GitHubT_6415\">119_GitHub骚操作之T搜索</a></td></tr><tr><td><a href=\"#120_GitHub_6423\">120_GitHub骚操作之搜索区域活跃用户</a></td><td>-</td><td>-</td></tr></tbody></table>\n<h2><a id=\"01__79\"></a>01_本课程前提要求和说明</h2>\n<p><a href=\"https://www.bilibili.com/video/BV18b411M7xz\">教学视频</a></p>\n<p><strong>一些大厂的面试题</strong></p>\n<p>蚂蚁花呗一面：</p>\n<ol><li>Java容器有哪些？哪些是同步容器,哪些是并发容器？</li><li>ArrayList和LinkedList的插入和访问的时间复杂度？</li><li>java反射原理，注解原理？</li><li>新生代分为几个区？使用什么算法进行垃圾回收？为什么使用这个算法？</li><li>HashMap在什么情况下会扩容，或者有哪些操作会导致扩容？</li><li>HashMap push方法的执行过程？</li><li>HashMap检测到hash冲突后，将元素插入在链表的末尾还是开头？</li><li>1.8还采用了红黑树，讲讲红黑树的特性，为什么人家一定要用红黑树而不是AVL、B树之类的？</li><li>https和http区别，有没有用过其他安全传输手段？</li><li>线程池的工作原理，几个重要参数，然后给了具体几个参数分析线程池会怎么做，最后问阻塞队列的作用是什么？</li><li>linux怎么查看系统负载情况？</li><li>请详细描述springmvc处理请求全流程？spring 一个bean装配的过程？</li><li>讲一讲AtomicInteger，为什么要用CAS而不是synchronized？</li></ol>\n<p>美团一面：</p>\n<ol><li>最近做的比较熟悉的项目是哪个，画一下项目技术架构图。</li><li>JVM老年代和新生代的比例？</li><li>YGC和FGC发生的具体场景？</li><li>jstack，jmap，jutil分别的意义？如何线上排查JVM的相关问题？</li><li>线程池的构造类的方法的5个参数的具体意义？</li><li>单机上一个线程池正在处理服务如果忽然断电怎么办（正在处理和阻塞队列里的请求怎么处理)？</li><li>使用无界阻塞队列会出现什么问题？接口如何处理重复请求？</li></ol>\n<p>百度一面：</p>\n<ol><li>介绍一下集合框架？</li><li>hashmap hastable 底层实现什么区别？hashtable和concurrenthashtable呢？</li><li>hashmap和treemap什么区别？低层数据结构是什么？</li><li>线程池用过吗都有什么参数？底层如何实现的？</li><li>sychnized和Lock什么区别？sychnize 什么情况情况是对象锁？什么时候是全局锁为什么？</li><li>ThreadLocal 是什么底层如何实现？写一个例子呗？</li><li>volitile的工作原理？</li><li>cas知道吗如何实现的？</li><li>请用至少四种写法写一个单例模式？</li><li>请介绍一下JVM内存模型？用过什么垃圾回收器都说说呗线上发送频繁full gc如何处理？CPU使用率过高怎么办？如何定位问题？如何解决说一下解决思路和处理方法</li><li>知道字节码吗？字节码都有哪些？Integer x =5,int y =5，比较x =y 都经过哪些步骤？讲讲类加载机制呗都有哪些类加载器，这些类加载器都加载哪些文件？</li><li>手写一下类加载Demo</li><li>知道osgi吗？他是如何实现的？</li><li>请问你做过哪些JVM优化？使用什么方法达到什么效果？</li><li>classforName(“java.lang.String”)和String classgetClassLoader() LoadClass(“java.lang.String”)什么区别啊？</li></ol>\n<p>今日头条</p>\n<ol><li>HashMap如果一直put元素会怎么样？ hashcode全都相同如何？</li><li>ApplicationContext的初始化过程？</li><li>GC 用什么收集器？收集的过程如何？哪些部分可以作为GC Root？</li><li>Volatile关键字，指令重排序有什么意义 ？synchronied,怎么用？</li><li>Redis数据结构有哪些？如何实现sorted set？</li><li>并发包里的原子类有哪些，怎么实现？</li><li>MvSql索引是什么数据结构？ B tree有什么特点？优点是什么？</li><li>慢查询怎么优化？</li><li>项目: cache，各部分职责，有哪些优化点</li></ol>\n<p>京东金融面试</p>\n<ol><li>Dubbo超时重试；Dubbo超时时间设置</li><li>如何保障请求执行顺序</li><li>分布式事务与分布式锁(扣款不要出现负数)</li><li>分布式Session设置</li><li>执行某操作，前50次成功，第51次失败a全部回滚b前50次提交第51次抛异常，ab场景分别如何设计Spring (传播特性)</li><li>Zookeeper有却些作用</li><li>JVM内存模型</li><li>数据库垂直和水平拆分</li><li>MyBatis如何分页;如何设置缓存;MySQL分页</li></ol>\n<p>蚂蚁金服二面</p>\n<ol><li>自我介绍、工作经历、技术栈</li><li>项目中你学到了什么技术？(把三项目具体描述了很久)</li><li>微服务划分的粒度</li><li>微服务的高可用怎么保证的？</li><li>常用的负载均衡，该怎么用，你能说下吗？</li><li>网关能够为后端服务带来哪些好处？</li><li>Spring Bean的生命周期</li><li>HashSet是不是线程安全的？为什么不是线程安全的？</li><li>Java 中有哪些线程安全的Map？</li><li>Concurrenthashmap 是怎么做到线程安全的？</li><li>HashTable你了解过吗？</li><li>如何保证线程安全问题？</li><li>synchronized、lock</li><li>volatile 的原子性问题？为什么i++这种不支持原子性﹖从计算机原理的设计来讲下不能保证原子性的原因</li><li>happens before 原理</li><li>cas操作</li><li>lock和 synchronized 的区别？</li><li>公平锁和非公平锁</li><li>Java读写锁</li><li>读写锁设计主要解决什么问题？</li></ol>\n<h2><a id=\"02_volatile_188\"></a>02_volatile是什么</h2>\n<p>volatile是JVM提供的轻量级的同步机制</p>\n<ol><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排（保证有序性）</li></ol>\n<h2><a id=\"03_JMM_198\"></a>03_JMM内存模型之可见性</h2>\n<p>JMM（Java内存模型Java Memory Model，简称JMM）本身是一种抽象的概念并不真实存在，它描述的是一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式。</p>\n<p>JMM关于同步的规定：</p>\n<ol><li>线程解锁前，必须把共享变量的值刷新回主内存</li><li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li><li>加锁解锁是同一把锁</li></ol>\n<p>由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存（有些地方称为栈空间），工作内存是每个线程的私有数据区域，而Java内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，<strong>但线程对变量的操作（读取赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝的自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存</strong>，不能直接操作主内存中的变量，各个线程中的工作内存中存储着主内存中的<strong>变量副本拷贝</strong>，因此不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成，其简要访问过程如下图：</p>\n<p><img alt=\"\" src=\"image\\086f17f778d19c9be53c65117aaacd87.png\"/></p>\n<p><strong>可见性</strong></p>\n<p>通过前面对JMM的介绍，我们知道各个线程对主内存中共享变量的操作都是各个线程各自拷贝到自己的工作内存进行操作后再写回到主内存中的。</p>\n<p>这就可能存在一个线程AAA修改了共享变量X的值但还未写回主内存时，另外一个线程BBB又对主内存中同一个共享变量X进行操作，但此时A线程工作内存中共享变量x对线程B来说并不可见，这种工作内存与主内存同步延迟现象就造成了可见性问题</p>\n<h2><a id=\"04__226\"></a>04_可见性的代码验证说明</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 假设是主物理内存\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyData</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">//volatile int number = 0;</span>\n    <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addTo60</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 验证volatile的可见性\n * 1. 假设int number = 0， number变量之前没有添加volatile关键字修饰\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VolatileDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">// 资源类</span>\n        MyData myData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// AAA线程 实现了Runnable接口的，lambda表达式</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t come in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 线程睡眠3秒，假设在进行运算</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 修改number的值</span>\n            myData<span class=\"token punctuation\">.</span><span class=\"token function\">addTo60</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 输出修改后的值</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t update number value:\"</span> <span class=\"token operator\">+</span> myData<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// main线程就一直在这里等待循环，直到number的值不等于零</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>myData<span class=\"token punctuation\">.</span>number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 按道理这个值是不可能打印出来的，因为主线程运行的时候，number的值为0，所以一直在循环</span>\n        <span class=\"token comment\">// 如果能输出这句话，说明AAA线程在睡眠3秒后，更新的number的值，重新写入到主内存，并被main线程感知到了</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t mission is over\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>由于没有<code>volatile</code>修饰<code>MyData</code>类的成员变量<code>number</code>，<code>main</code>线程将会卡在<code>while(myData.number == 0) {}</code>，不能正常结束。若想正确结束，用<code>volatile</code>修饰<code>MyData</code>类的成员变量<code>number</code>吧。</p>\n<p><strong>volatile类比</strong></p>\n<p>没有volatile修饰变量效果，相当于A同学拷贝了老师同一课件，A同学对课件进一步的总结归纳，形成自己的课件，这就与老师的课件不同了。</p>\n<p>有volatile修饰变量效果，相当于A同学拷贝了老师同一课件，A同学对课件进一步的总结归纳，形成自己的课件，并且与老师分享，老师认可A同学修改后的课件，并用它来作下一届的课件。</p>\n<h2><a id=\"05_volatile_297\"></a>05_volatile不保证原子性</h2>\n<p>原子性指的是什么意思？</p>\n<p>不可分割，完整性，也即某个线程正在做某个具体业务时，中间不可以被加塞或者被分割。需要整体完整要么同时成功，要么同时失败。</p>\n<p>volatile不保证原子性案例演示：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyData2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * volatile 修饰的关键字，是为了增加 主线程和线程之间的可见性，只要有一个线程修改了内存中的值，其它线程也能马上感知\n     */</span>\n    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        number <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VolatileAtomicityDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        MyData2 myData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyData2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 创建10个线程，线程里面进行1000次循环</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 里面</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    myData<span class=\"token punctuation\">.</span><span class=\"token function\">addPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 需要等待上面20个线程都计算完成后，在用main线程取得最终的结果值</span>\n        <span class=\"token comment\">// 这里判断线程数是否大于2，为什么是2？因为默认是有两个线程的，一个main线程，一个gc线程</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">activeCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// yield表示不执行</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 查看最终的值</span>\n        <span class=\"token comment\">// 假设volatile保证原子性，那么输出的值应该为：  20 * 1000 = 20000</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t finally number value: \"</span> <span class=\"token operator\">+</span> myData<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>最后的结果总是小于20000。</p>\n<h2><a id=\"06_volatile_356\"></a>06_volatile不保证原子性理论解释</h2>\n<p><code>number++</code>在多线程下是非线程安全的。</p>\n<p>我们可以将代码编译成字节码，可看出<code>number++</code>被编译成3条指令。</p>\n<p><img alt=\"\" src=\"image\\1ea2ba83722d23f1a9ec62b31066ab6d.png\"/></p>\n<p>假设我们没有加 <code>synchronized</code>那么第一步就可能存在着，三个线程同时通过<code>getfield</code>命令，拿到主存中的 n值，然后三个线程，各自在自己的工作内存中进行加1操作，但他们并发进行 <code>iadd</code> 命令的时候，因为只能一个进行写，所以其它操作会被挂起，假设1线程，先进行了写操作，在写完后，volatile的可见性，应该需要告诉其它两个线程，主内存的值已经被修改了，但是因为太快了，其它两个线程，陆续执行 <code>iadd</code>命令，进行写入操作，这就造成了其他线程没有接受到主内存n的改变，从而覆盖了原来的值，出现写丢失，这样也就让最终的结果少于20000。</p>\n<h2><a id=\"07_volatile_368\"></a>07_volatile不保证原子性问题解决</h2>\n<p>可加synchronized解决，但它是重量级同步机制，性能上有所顾虑。</p>\n<p>如何不加synchronized解决number++在多线程下是非线程安全的问题？使用AtomicInteger。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span>AtomicInteger<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyData2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * volatile 修饰的关键字，是为了增加 主线程和线程之间的可见性，只要有一个线程修改了内存中的值，其它线程也能马上感知\n     */</span>\n\t<span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tAtomicInteger number2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        number <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addPlusPlus2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \tnumber2<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VolatileAtomicityDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        MyData2 myData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyData2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 创建10个线程，线程里面进行1000次循环</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 里面</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    myData<span class=\"token punctuation\">.</span><span class=\"token function\">addPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    myData<span class=\"token punctuation\">.</span><span class=\"token function\">addPlusPlus2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 需要等待上面20个线程都计算完成后，在用main线程取得最终的结果值</span>\n        <span class=\"token comment\">// 这里判断线程数是否大于2，为什么是2？因为默认是有两个线程的，一个main线程，一个gc线程</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">activeCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// yield表示不执行</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 查看最终的值</span>\n        <span class=\"token comment\">// 假设volatile保证原子性，那么输出的值应该为：  20 * 1000 = 20000</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t finally number value: \"</span> <span class=\"token operator\">+</span> myData<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t finally number2 value: \"</span> <span class=\"token operator\">+</span> myData<span class=\"token punctuation\">.</span>number2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果为：</p>\n<pre><code>main\t finally number value: 18766\nmain\t finally number2 value: 20000\n</code></pre>\n<h2><a id=\"08_volatile1_433\"></a>08_volatile指令重排案例1</h2>\n<p>计算机在执行程序时，为了提高性能，编译器和处理器的常常会对指令做重排，一般分以下3种：</p>\n<p><img alt=\"\" src=\"image\\bd9649a5795e503000a1fe89e57665a7.png\"/></p>\n<p>单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致。</p>\n<p>处理器在进行重排序时必须要考虑指令之间的<strong>数据依赖性</strong></p>\n<p>多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的，结果无法预测。</p>\n<p><strong>重排案例</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> mySort<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//语句1</span>\n    <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//语句2</span>\n    × <span class=\"token operator\">=</span> × <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//语句3</span>\n    y <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span><span class=\"token comment\">//语句4</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可重排序列：</p>\n<ul><li>1234</li><li>2134</li><li>1324</li></ul>\n<p>问题：请问语句4可以重排后变成第一个条吗？答：不能。</p>\n<p><strong>重排案例2</strong></p>\n<p>int a,b,x,y = 0</p>\n<table><thead><tr><th>线程1</th><th>线程2</th></tr></thead><tbody><tr><td>x = a;</td><td>y = b;</td></tr><tr><td>b = 1;</td><td>a = 2;</td></tr><tr><td></td><td></td></tr><tr><td>x = 0; y = 0</td><td></td></tr></tbody></table>\n<p>如果编译器对这段程序代码执行重排优化后，可能出现下列情况：</p>\n<table><thead><tr><th>线程1</th><th>线程2</th></tr></thead><tbody><tr><td>b = 1;</td><td>a = 2;</td></tr><tr><td>x = a;</td><td>y = b;</td></tr><tr><td></td><td></td></tr><tr><td>x = 2; y = 1</td><td></td></tr></tbody></table>\n<p>这也就说明在多线程环境下，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的。</p>\n<h2><a id=\"09_volatile2_496\"></a>09_volatile指令重排案例2</h2>\n<p>观察以下程序：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReSortSeqDemo</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\ta <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//语句1</span>\n\t\tflag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//语句2</span>\n\t<span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//语句3</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"retValue: \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可能是6或1或5或0</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>多线程环境中线程交替执行<code>method01()</code>和<code>method02()</code>，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的，结果无法预测。</p>\n<p><strong>禁止指令重排小总结</strong></p>\n<p>volatile实现<strong>禁止指令重排优化</strong>，从而避免多线程环境下程序出现乱序执行的现象</p>\n<p>先了解一个概念，内存屏障(Memory Barrier）又称内存栅栏，是一个CPU指令，它的作用有两个:</p>\n<ol><li>保证特定操作的执行顺序，</li><li>保证某些变量的内存可见性（利用该特性实现volatile的内存可见性）。</li></ol>\n<p>由于编译器和处理器都能执行指令重排优化。如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，也就是说<strong>通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化</strong>。内存屏障另外一个作用是强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本。</p>\n<p>对volatile变量进行写操作时，会在写操作后加入一条store屏障指令，将工作内存中的共享变量值刷新回到主内存。</p>\n<p><img alt=\"\" src=\"image\\d7626eb368ec93d80ed98478dd579401.png\"/></p>\n<p>对Volatile变量进行读操作时，会在读操作前加入一条load屏障指令，从主内存中读取共享变量。</p>\n<p><img alt=\"\" src=\"image\\c351d47587cbdf0ba57028ec8b894114.png\"/></p>\n<p><strong>线性安全性获得保证</strong></p>\n<ul><li> <p>工作内存与主内存同步延迟现象导致的<strong>可见性</strong>问题 - 可以使用synchronized或volatile关键字解决，它们都可以使一个线程修改后的变量立即对其他线程可见。</p> </li><li> <p>对于指令重排导致的<strong>可见性</strong>问题和<strong>有序性</strong>问题 - 可以利用volatile关键字解决，因为volatile的另外一个作用就是禁止重排序优化。</p> </li></ul>\n<h2><a id=\"10__553\"></a>10_单例模式在多线程环境下可能存在安全问题</h2>\n<p>懒汉单例模式</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> SingletonDemo instance <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> SingletonDemo <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 我是构造方法SingletonDemo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> SingletonDemo <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 这里的 == 是比较内存地址</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>main    我是构造方法singletonDemo\ntrue\ntrue\ntrue\ntrue\n</code></pre>\n<p>但是，在多线程环境运行上述代码，能保证单例吗？</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> SingletonDemo instance <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> SingletonDemo <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 我是构造方法SingletonDemo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> SingletonDemo <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-java\"><span class=\"token number\">4</span>\t 我是构造方法SingletonDemo\n<span class=\"token number\">2</span>\t 我是构造方法SingletonDemo\n<span class=\"token number\">5</span>\t 我是构造方法SingletonDemo\n<span class=\"token number\">6</span>\t 我是构造方法SingletonDemo\n<span class=\"token number\">0</span>\t 我是构造方法SingletonDemo\n<span class=\"token number\">3</span>\t 我是构造方法SingletonDemo\n<span class=\"token number\">1</span>\t 我是构造方法SingletonDemo\n</code></pre>\n<p>显然不能保证单例。</p>\n<p>解决方法之一：用<code>synchronized</code>修饰方法<code>getInstance()</code>，但它属重量级同步机制，使用时慎重。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> SingletonDemo <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"11_volatile_652\"></a>11_单例模式volatile分析</h2>\n<p>解决方法之二：DCL（Double Check Lock双端检锁机制）</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonDemo</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">private</span> <span class=\"token function\">SingletonDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> SingletonDemo instance <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> SingletonDemo <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>SingletonDemo<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       \n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>DCL中volatile解析</strong></p>\n<p>原因在于某一个线程执行到第一次检测，读取到的instance不为null时，instance的引用对象<strong>可能没有完成初始化</strong>。<code>instance = new SingletonDemo();</code>可以分为以下3步完成(伪代码)：</p>\n<pre><code>memory = allocate(); //1.分配对象内存空间\ninstance(memory); //2.初始化对象\ninstance = memory; //3.设置instance指向刚分配的内存地址，此时instance != null\n</code></pre>\n<p>步骤2和步骤3不存在数据依赖关系，而且无论重排前还是重排后程序的执行结果在单线程中并没有改变，因此这种重排优化是允许的。</p>\n<pre><code>memory = allocate(); //1.分配对象内存空间\ninstance = memory;//3.设置instance指向刚分配的内存地址，此时instance! =null，但是对象还没有初始化完成!\ninstance(memory);//2.初始化对象\n</code></pre>\n<p>但是指令重排只会保证串行语义的执行的一致性(单线程)，但并不会关心多线程间的语义一致性。</p>\n<p>所以当一条线程访问instance不为null时，由于instance实例未必已初始化完成，也就造成了线程安全问题。</p>\n<h2><a id=\"12_CAS_702\"></a>12_CAS是什么</h2>\n<p>Compare And Set</p>\n<p>示例程序</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CASDemo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        AtomicInteger atomicInteger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// mian do thing. . . . ..</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2019</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\t current data: \"</span><span class=\"token operator\">+</span>atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndset</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\t current data: \"</span><span class=\"token operator\">+</span>atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果为</p>\n<pre><code>true    2019\nfalse   2019\n</code></pre>\n<h2><a id=\"13_CAS_727\"></a>13_CAS底层原理-上</h2>\n<p>Cas底层原理？如果知道，谈谈你对UnSafe的理解</p>\n<p><code>atomiclnteger.getAndIncrement();</code>源码</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AtomicInteger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Serializable</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">6214790243416807050</span>L<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// setup to use Unsafe.compareAndSwapInt for updates</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Unsafe unsafe <span class=\"token operator\">=</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> valueOffset<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            valueOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset\n                <span class=\"token punctuation\">(</span>AtomicInteger<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n     * Creates a new AtomicInteger with the given initial value.\n     *\n     * @param initialValue the initial value\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        value <span class=\"token operator\">=</span> initialValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Creates a new AtomicInteger with initial value {@code 0}.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            \n    <span class=\"token comment\">/**\n     * Atomically increments by one the current value.\n     *\n     * @return the previous value\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">getAndAddInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> valueOffset<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n    \n</code></pre>\n<p><strong>UnSafe</strong></p>\n<p>1 Unsafe</p>\n<p>是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地（native）方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定内存的数据。Unsafe类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，因为Java中CAS操作的执行依赖于Unsafe类的方法。</p>\n<p><strong>注意Unsafe类中的所有方法都是native修饰的，也就是说Unsafe类中的方法都直接调用操作系统底层资源执行相应任务</strong>。</p>\n<p>2 变量valueOffset，表示该变量值在内存中的偏移地址，因为Unsafe就是根据内存偏移地址获取数据的。</p>\n<p>3 变量value用volatile修饰，保证了多线程之间的内存可见性。</p>\n<p><strong>CAS是什么</strong></p>\n<p>CAS的全称为Compare-And-Swap，它是一条CPU并发原语。</p>\n<p>它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。</p>\n<p>CAS并发原语体现在JAVA语言中就是sun.misc.Unsafe类中的各个方法。调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令。这是一种完全依赖于硬件的功能，通过它实现了原子操作。再次强调，由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致问题。（原子性）</p>\n<p><img alt=\"\" src=\"image\\de2bc76845ed3724333393f6aee2e62f.png\"/></p>\n<h2><a id=\"14_CAS_809\"></a>14_CAS底层原理-下</h2>\n<p>继续上一节</p>\n<p><code>UnSafe.getAndAddInt()</code>源码解释：</p>\n<ul><li><code>var1</code> AtomicInteger对象本身。</li><li><code>var2</code> 该对象值得引用地址。</li><li><code>var4</code> 需要变动的数量。</li><li><code>var5</code>是用过<code>var1</code>，<code>var2</code>找出的主内存中真实的值。</li><li>用该对象当前的值与<code>var5</code>比较： \n  <ul><li>如果相同，更新<code>var5+var4</code>并且返回<code>true</code>,</li><li>如果不同，继续取值然后再比较，直到更新完成。</li></ul> </li></ul>\n<p>假设<strong>线程A</strong>和<strong>线程B</strong>两个线程同时执行getAndAddInt操作（分别跑在不同CPU上) ：</p>\n<ol><li>Atomiclnteger里面的value原始值为3，即主内存中Atomiclnteger的value为3，根据JMM模型，线程A和线程B各自持有一份值为3的value的副本分别到各自的工作内存。</li><li>线程A通过getIntVolatile(var1, var2)拿到value值3，这时线程A被挂起。</li><li>线程B也通过getintVolatile(var1, var2)方法获取到value值3，此时刚好线程B没有被挂起并执行compareAndSwapInt方法比较内存值也为3，成功修改内存值为4，线程B打完收工，一切OK。</li><li>这时线程A恢复，执行compareAndSwapInt方法比较，发现自己手里的值数字3和主内存的值数字4不一致，说明该值己经被其它线程抢先一步修改过了，那A线程本次修改失败，只能重新读取重新来一遍了。</li><li>线程A重新获取value值，因为变量value被volatile修饰，所以其它线程对它的修改，线程A总是能够看到，线程A继续执行compareAndSwaplnt进行比较替换，直到成功。</li></ol>\n<p><strong>底层汇编</strong></p>\n<p>Unsafe类中的compareAndSwapInt，是一个本地方法，该方法的实现位于unsafe.cpp中。</p>\n<pre><code>UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x)\nUnsafeWrapper(\"Unsafe_CompareAndSwaplnt\");\noop p = JNlHandles::resolve(obj);\njint* addr = (jint *)index_oop_from_field_offset_long(p, offset);\nreturn (jint)(Atomic::cmpxchg(x, addr, e))== e;\nUNSAFE_END\n//先想办法拿到变量value在内存中的地址。\n//通过Atomic::cmpxchg实现比较替换，其中参数x是即将更新的值，参数e是原内存的值。\n</code></pre>\n<p><strong>小结</strong></p>\n<p>CAS指令</p>\n<p>CAS有3个操作数，内存值V，旧的预期值A，要修改的更新值B。<br/> 当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>\n<h2><a id=\"15_CAS_861\"></a>15_CAS缺点</h2>\n<p><strong>循环时间长开销很大</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// ursafe.getAndAddInt</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAndAddInt</span><span class=\"token punctuation\">(</span>Object var1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> var4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> var5<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tvar5 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIntVolatile</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span>varl<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">,</span> var5，var5 <span class=\"token operator\">+</span> var4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> var5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们可以看到getAndAddInt方法执行时，有个do while，如果CAS失败，会一直进行尝试。如果CAS长时间一直不成功，可能会给CPU带来很大的开销。</p>\n<p><strong>只能保证一个共享变量的原子操作</strong></p>\n<p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是，对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁来保证原子性。</p>\n<p><strong>引出来ABA问题</strong></p>\n<h2><a id=\"16_ABA_894\"></a>16_ABA问题</h2>\n<p><strong>ABA问题怎么产生的</strong></p>\n<p>CAS会导致“ABA问题”。</p>\n<p>CAS算法实现一个重要前提需要取出内存中某时刻的数据并在当下时刻比较并替换，那么在这个时间差类会导致数据的变化。</p>\n<p>比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且线程two进行了一些操作将值变成了B,然后线程two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后线程one操作成功。</p>\n<p><em>尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的。</em></p>\n<h2><a id=\"17_AtomicReference_908\"></a>17_AtomicReference原子引用</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span>AtomicReference<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">{<!-- --></span>\n\t\n\tString userName<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token keyword\">public</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>String userName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User [userName=%s, age=%s]\"</span><span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AtomicReferenceDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        User z3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"z3\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        User li4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li4\"</span> <span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tAtomicReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">&gt;</span></span> atomicReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>z3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>z3<span class=\"token punctuation\">,</span> li4<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">+</span>atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>z3<span class=\"token punctuation\">,</span> li4<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">+</span>atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出结果</p>\n<pre><code>true\tUser [userName=li4, age=25]\nfalse\tUser [userName=li4, age=25]\n</code></pre>\n<h2><a id=\"18_AtomicStampedReference_955\"></a>18_AtomicStampedReference版本号原子引用</h2>\n<p>原子引用 + 新增一种机制，那就是修改版本号（类似时间戳），它用来解决ABA问题。</p>\n<h2><a id=\"19_ABA_961\"></a>19_ABA问题的解决</h2>\n<p>ABA问题程序演示及解决方法演示：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span>AtomicReference<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span>AtomicStampedReference<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ABADemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">/**\n\t * 普通的原子引用包装类\n\t */</span>\n\t<span class=\"token keyword\">static</span> AtomicReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> atomicReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 传递两个值，一个是初始值，一个是初始版本号</span>\n\t<span class=\"token keyword\">static</span> AtomicStampedReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> atomicStampedReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicStampedReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============以下是ABA问题的产生==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// 把100 改成 101 然后在改成100，也就是ABA</span>\n\t\t\tatomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tatomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">// 睡眠一秒，保证t1线程，完成了ABA操作</span>\n\t\t\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 把100 改成 101 然后在改成100，也就是ABA</span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2019</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">/</span>\n\n\t\t\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============以下是ABA问题的解决==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t\t\t<span class=\"token comment\">// 获取版本号</span>\n\t\t\t<span class=\"token keyword\">int</span> stamp <span class=\"token operator\">=</span> atomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 第一次版本号\"</span> <span class=\"token operator\">+</span> stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// 暂停t3一秒钟</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// 传入4个值，期望值，更新值，期望版本号，更新版本号</span>\n\t\t\tatomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> atomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tatomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 第二次版本号\"</span> <span class=\"token operator\">+</span> atomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tatomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> atomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tatomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 第三次版本号\"</span> <span class=\"token operator\">+</span> atomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t\t\t<span class=\"token comment\">// 获取版本号</span>\n\t\t\t<span class=\"token keyword\">int</span> stamp <span class=\"token operator\">=</span> atomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 第一次版本号\"</span> <span class=\"token operator\">+</span> stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// 暂停t4 3秒钟，保证t3线程也进行一次ABA问题</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> atomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> stamp<span class=\"token punctuation\">,</span> stamp <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 修改成功否：\"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 当前最新实际版本号：\"</span>\n\t\t\t\t\t<span class=\"token operator\">+</span> atomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 当前实际最新值\"</span> <span class=\"token operator\">+</span> atomicStampedReference<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果</p>\n<pre><code>============以下是ABA问题的产生==========\ntrue\t2019\n============以下是ABA问题的解决==========\nt3\t 第一次版本号1\nt4\t 第一次版本号1\nt3\t 第二次版本号2\nt3\t 第三次版本号3\nt4\t 修改成功否：false\t 当前最新实际版本号：3\nt4\t 当前实际最新值100\n</code></pre>\n<h2><a id=\"20__1080\"></a>20_集合类不安全之并发修改异常</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayListNotSafeDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        List<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//List&lt;String&gt; list = new Vector&lt;&gt;();</span>\n        <span class=\"token comment\">//List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上述程序会抛java.util.ConcurrentModificationException</p>\n<p>解决方法之一：Vector</p>\n<p>解决方法之二：Collections.synchronizedList()</p>\n<h2><a id=\"21__1115\"></a>21_集合类不安全之写时复制</h2>\n<p>上一节程序导致抛java.util.ConcurrentModificationException的原因解析</p>\n<p>先观察下抛错打印栈堆信息：</p>\n<pre><code>java.util.ConcurrentModificationException\n\tat java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)\n\tat java.util.ArrayList$Itr.next(ArrayList.java:859)\n\tat java.util.AbstractCollection.toString(AbstractCollection.java:461)\n\tat java.lang.String.valueOf(String.java:2994)\n\tat java.io.PrintStream.println(PrintStream.java:821)\n\tat com.lun.collection.ArrayListNotSafeDemo.lambda$0(ArrayListNotSafeDemo.java:20)\n\tat java.lang.Thread.run(Thread.java:748)\n</code></pre>\n<p>可看出toString()，Itr.next()，Itr.checkForComodification()后抛出异常，那么看看它们next()，checkForComodification()源码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span> RandomAccess<span class=\"token punctuation\">,</span> Cloneable<span class=\"token punctuation\">,</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Serializable<span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Itr</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> cursor<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// index of next element to return</span>\n        <span class=\"token keyword\">int</span> lastRet <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// index of last element returned; -1 if no such</span>\n        <span class=\"token keyword\">int</span> expectedModCount <span class=\"token operator\">=</span> modCount<span class=\"token punctuation\">;</span><span class=\"token comment\">//modCount在AbstractList类声明</span>\n\n        <span class=\"token function\">Itr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">public</span> E <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">checkForComodification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkForComodification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modCount <span class=\"token operator\">!=</span> expectedModCount<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentModificationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&lt;---异常在此抛出</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>E e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">ensureCapacityInternal</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Increments modCount!!</span>\n        elementData<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacityInternal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">ensureExplicitCapacity</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculateCapacity</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureExplicitCapacity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//添加时，修改了modCount的值</span>\n\n        <span class=\"token comment\">// overflow-conscious code</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minCapacity <span class=\"token operator\">-</span> elementData<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractCollection</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n\t\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> modCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>modCount具体详细说明如下：</p>\n<blockquote>\n<p><strong>The number of times this list has been structurally modified</strong>. Structural modifications are those that change the size of the list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.</p>\n<p>This field is used by the iterator and list iterator implementation returned by the <code>iterator</code> and <code>listIterator</code> methods. <strong>If the value of this field changes unexpectedly, the iterator (or list iterator) will throw a <code>ConcurrentModificationException</code> in response to the <code>next</code>, <code>remove</code>, <code>previous</code>, <code>set</code> or <code>add</code> operations.</strong> This provides <em>fail-fast</em> behavior, rather than non-deterministic behavior in the face of concurrent modification during iteration.</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html#modCount\">link</a></p>\n</blockquote>\n<p>综上所述，假设线程A将通过迭代器next()获取下一元素时，从而将其打印出来。但之前，其他某线程添加新元素至list，结构发生了改变，modCount自增。当线程A运行到checkForComodification()，expectedModCount是modCount之前自增的值，判定modCount != expectedModCount为真，继而抛出ConcurrentModificationException。</p>\n<p>解决方法之三：CopyOnWriteArrayList（推荐）</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span> RandomAccess<span class=\"token punctuation\">,</span> Cloneable<span class=\"token punctuation\">,</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Serializable <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/** The array, accessed only via getArray/setArray. */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">final</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setArray</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        array <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>E e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">final</span> ReentrantLock lock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements <span class=\"token operator\">=</span> <span class=\"token function\">getArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newElements <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            newElements<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">setArray</span><span class=\"token punctuation\">(</span>newElements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>CopyOnWrite容器即写时复制的容器。待一个容器添加元素的时候，不直接往当前容器Object[]添加，而是先将当前容器Object[]进行copy，复制出一个新的容器Object[] newELements，然后新的容器Object[ ] newELements里添加元素，添加完元素之后，再将原容器的引用指向新的容器setArray (newELements)。</p>\n<p>这样做的好处是可以对CopyOnWrite容器进行并发的读，而不需要加锁（区别于Vector和Collections.synchronizedList()），因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p>\n<h2><a id=\"22_Set_1264\"></a>22_集合类不安全之Set</h2>\n<p>HashSet也是非线性安全的。（HashSet内部是包装了一个HashMap的）</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashSet<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>CopyOnWriteArraySet<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SetNotSafeDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\tSet<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span>\n\t\t<span class=\"token comment\">//Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;String&gt;();</span>\n\t\t\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>解决方法：</p>\n<ol><li>Collections.synchronizedSet(new HashSet&lt;&gt;())</li><li>CopyOnWriteArraySet&lt;&gt;()（推荐）</li></ol>\n<hr/>\n<p>CopyOnWriteArraySet源码一览：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CopyOnWriteArraySet</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSet</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Serializable</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">5457747651344034263</span>L<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> CopyOnWriteArrayList<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span> al<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Creates an empty set.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CopyOnWriteArraySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        al <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CopyOnWriteArraySet</span><span class=\"token punctuation\">(</span>Collection<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token operator\">&gt;</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CopyOnWriteArraySet<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span> CopyOnWriteArraySet<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span> cc <span class=\"token operator\">=</span>\n                <span class=\"token punctuation\">(</span>CopyOnWriteArraySet<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">;</span>\n            al <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">.</span>al<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            al <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>E<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            al<span class=\"token punctuation\">.</span><span class=\"token function\">addAllAbsent</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">//可看出CopyOnWriteArraySet包装了一个CopyOnWriteArrayList</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>E e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> al<span class=\"token punctuation\">.</span><span class=\"token function\">addIfAbsent</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addIfAbsent</span><span class=\"token punctuation\">(</span>E e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> snapshot <span class=\"token operator\">=</span> <span class=\"token function\">getArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span>\n            <span class=\"token function\">addIfAbsent</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">//暴力查找</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>Object o<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">,</span>\n                               <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fence<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> fence<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> fence<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addIfAbsent</span><span class=\"token punctuation\">(</span>E e<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> snapshot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">final</span> ReentrantLock lock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> current <span class=\"token operator\">=</span> <span class=\"token function\">getArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snapshot <span class=\"token operator\">!=</span> current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//还要检查多一次元素存在性，生怕别的线程已经插入了</span>\n                <span class=\"token comment\">// Optimize for lost race to another addXXX operation</span>\n                <span class=\"token keyword\">int</span> common <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> common<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> snapshot<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> common<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newElements <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            newElements<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">setArray</span><span class=\"token punctuation\">(</span>newElements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"23_Map_1388\"></a>23_集合类不安全之Map</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashMap<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Hashtable<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ConcurrentHashMap<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapNotSafeDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        Map&lt;String, String&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;());</span>\n<span class=\"token comment\">//\t\tMap&lt;String, String&gt; map = new ConcurrentHashMap&lt;&gt;();</span>\n<span class=\"token comment\">//\t\tMap&lt;String, String&gt; map = new Hashtable&lt;&gt;();</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>解决方法：</p>\n<ol><li>HashTable</li><li>Collections.synchronizedMap(new HashMap&lt;&gt;())</li><li>ConcurrencyMap&lt;&gt;()（推荐）</li></ol>\n<h2><a id=\"24_TransferValue_1427\"></a>24_TransferValue醒脑小练习</h2>\n<p>Java的参数传递是值传递，不是引用传递。</p>\n<p>下面程序体验下上一句的含义：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> Integer id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String personName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>String personName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>personName <span class=\"token operator\">=</span> personName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> Integer <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>Integer id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> String <span class=\"token function\">getPersonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> personName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPersonName</span><span class=\"token punctuation\">(</span>String personName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>personName <span class=\"token operator\">=</span> personName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TransferValueDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeValue1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeValue2</span><span class=\"token punctuation\">(</span>Person person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        person<span class=\"token punctuation\">.</span><span class=\"token function\">setPersonName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeValue3</span><span class=\"token punctuation\">(</span>String str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        str <span class=\"token operator\">=</span> <span class=\"token string\">\"XXX\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        TransferValueDemo test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransferValueDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 定义基本数据类型</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">changeValue1</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age ----\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 实例化person类</span>\n        Person person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">changeValue2</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"personName-----\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getPersonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// String</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">changeValue3</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string-----\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-java\">age <span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">20</span>\npersonName<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>XXXX\nstring<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>abc\n</code></pre>\n<h2><a id=\"25_java_1503\"></a>25_java锁之公平和非公平锁</h2>\n<p><strong>是什么</strong></p>\n<ul><li> <p><strong>公平锁</strong>―是指多个线程按照申请锁的顺序来获取锁，类似排队打饭，先来后到。</p> </li><li> <p><strong>非公平锁</strong>是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后中请的线程比先中请的线程优先获取锁。在高并发的情况下，有可能会造成优先级反转或者饥饿现象</p> </li></ul>\n<p>并发包中ReentrantLock的创建可以指定构造函数的boolean类型来得到公平锁或非公平锁，默认是非公平锁。</p>\n<blockquote>\n<p>The constructor for this class accepts an optional <em>fairness</em> parameter. When set <code>true</code>, under contention, locks favor granting access to the longest-waiting thread. Otherwise this lock does not guarantee any particular access order. Programs using fair locks accessed by many threads may display lower overall throughput (i.e., are slower; often much slower) than those using the default setting, but have smaller variances in times to obtain locks and guarantee lack of starvation.</p>\n<p>Note however, that fairness of locks does not guarantee fairness of thread scheduling. Thus, one of many threads using a fair lock may obtain it multiple times in succession while other active threads are not progressing and not currently holding the lock. Also note that the untimed <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantLock.html#tryLock--\"><code>tryLock()</code></a> method does not honor the fairness setting. It will succeed if the lock is available even if other threads are waiting.</p>\n<p>此类的构造函数接受可选的公平性参数。当设置为true时，在争用下，<strong>锁有利于向等待时间最长的线程授予访问权限</strong>。否则，此锁不保证任何特定的访问顺序。与使用默认设置的程序相比，使用由许多线程访问的公平锁的程序可能显示出较低的总体吞吐量（即，较慢；通常要慢得多），但是在获得锁和保证没有饥饿的时间上差异较小。</p>\n<p>但是请注意，锁的公平性并不能保证线程调度的公平性。因此，使用公平锁的多个线程中的一个线程可以连续多次获得公平锁，而其他活动线程则没有进行并且当前没有持有该锁。还要注意，不计时的 tryLock()方法不支持公平性设置。如果锁可用，即使其他线程正在等待，它也会成功。</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantLock.html#ReentrantLock--\">link</a></p>\n</blockquote>\n<blockquote>\n<p>reentrant<br/> 英 [riːˈɛntrənt] 美 [ˌriˈɛntrənt]<br/> a. 可重入;可重入的;重入;可再入的;重进入</p>\n</blockquote>\n<p><strong>两者区别</strong></p>\n<p>关于两者区别：</p>\n<ul><li>公平锁 \n  <ul><li>Threads acquire a fair lock in the order in which they requested it.</li><li>公平锁就是很公平，在并发环境中，每个线程在获取锁时会先查看此锁维护的等待队列，如果为空，或者当前线程是等待队列的第一个，就占有锁，否则就会加入到等待队列中，以后会按照FIFO的规则从队列中取到自己。</li></ul> </li><li>非公平锁 \n  <ul><li>a nonfair lock permits barging: threads requesting a lock can jump ahead of the queue of waiting threads if the lockhappens to be available when it is requested.</li><li>非公平锁比较粗鲁，上来就直接尝试占有锁，如果尝试失败，就再采用类似公平锁那种方式。</li></ul> </li></ul>\n<p><strong>题外话</strong></p>\n<p>Java ReentrantLock而言，通过构造函数指定该锁是否是公平锁，<strong>默认是非公平锁</strong>。</p>\n<p>非公平锁的优点在于吞吐量比公平锁大。</p>\n<p>对于Synchronized而言，也是一种非公平锁</p>\n<h2><a id=\"26_java_1554\"></a>26_java锁之可重入锁和递归锁理论知识</h2>\n<p>可重入锁（也叫做递归锁）</p>\n<p>指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。</p>\n<p>也即是说，<strong>线程可以进入任何一个它已经拥有的锁所同步着的代码块</strong>。</p>\n<p>ReentrantLock/synchronized就是一个典型的可重入锁。</p>\n<p>可重入锁最大的作用是避免死锁。</p>\n<h2><a id=\"27_java_1570\"></a>27_java锁之可重入锁和递归锁代码验证</h2>\n<p>Synchronized可入锁演示程序</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Phone</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t invoked sendSMS()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 在同步方法中，调用另外一个同步方法</span>\n        <span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t invoked sendEmail()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedReentrantLockDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Phone phone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 两个线程操作资源列</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                phone<span class=\"token punctuation\">.</span><span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                phone<span class=\"token punctuation\">.</span><span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出结果：</p>\n<pre><code>t1\t invoked sendSMS()\n11\t invoked sendEmail()\nt2\t invoked sendSMS()\n12\t invoked sendEmail()\n</code></pre>\n<p>ReentrantLock可重入锁演示程序</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span>ReentrantLock<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Phone2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n\n    Lock lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * set进去的时候，就加锁，调用set方法的时候，能否访问另外一个加锁的set方法\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t get Lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">setLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t set Lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReentrantLockDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Phone2 phone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phone2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/**\n         * 因为Phone实现了Runnable接口\n         */</span>\n        Thread t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">,</span> <span class=\"token string\">\"t3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Thread t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">,</span> <span class=\"token string\">\"t4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果</p>\n<pre><code class=\"prism language-java\">t3\t get Lock\nt3\t set Lock\nt4\t get Lock\t\nt4\t set Lock\n</code></pre>\n<h2><a id=\"28_java_1693\"></a>28_java锁之自旋锁理论知识</h2>\n<p>自旋锁（Spin Lock）</p>\n<p>是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU</p>\n<blockquote>\n<p>提到了互斥同步对性能最大的影响阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态完成，这些操作给系统的并发性能带来了很大的压力。同时，虚拟机的开发团队也注意到在许多应用上，<strong>共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程并不值得</strong>。如果物理机器有一个以上的处理器，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程 “<strong>稍等一下</strong>”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让线程执行一个忙循环（自旋），这项技术就是所谓的<strong>自旋锁</strong>。</p>\n<p><a href=\"#\">《深入理解JVM.2nd》Page 398</a></p>\n</blockquote>\n<h2><a id=\"29_java_1705\"></a>29_java锁之自旋锁代码验证</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span>AtomicReference<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpinLockDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 现在的泛型装的是Thread，原子引用线程</span>\n    AtomicReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Thread<span class=\"token punctuation\">&gt;</span></span>  atomicReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 获取当前进来的线程</span>\n        Thread thread <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t come in \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 开始自旋，期望值是null，更新值是当前线程，如果是null，则更新为当前线程，否者自旋</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">,</span> thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//摸鱼</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myUnLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 获取当前进来的线程</span>\n        Thread thread <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 自己用完了后，把atomicReference变成null</span>\n        atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t invoked myUnlock()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        SpinLockDemo spinLockDemo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpinLockDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 启动t1线程，开始操作</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token comment\">// 开始占有锁</span>\n            spinLockDemo<span class=\"token punctuation\">.</span><span class=\"token function\">myLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 开始释放锁</span>\n            spinLockDemo<span class=\"token punctuation\">.</span><span class=\"token function\">myUnLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// 让main线程暂停1秒，使得t1线程，先执行</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 1秒后，启动t2线程，开始占用这个锁</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token comment\">// 开始占有锁</span>\n            spinLockDemo<span class=\"token punctuation\">.</span><span class=\"token function\">myLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 开始释放锁</span>\n            spinLockDemo<span class=\"token punctuation\">.</span><span class=\"token function\">myUnLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果</p>\n<pre><code>t1\t come in \nt2\t come in \nt1\t invoked myUnlock()\nt2\t invoked myUnlock()\n</code></pre>\n<h2><a id=\"30_java_1790\"></a>30_java锁之读写锁理论知识</h2>\n<p>独占锁：指该锁一次只能被一个线程所持有。对ReentrantLock和Synchronized而言都是独占锁</p>\n<p>共享锁：指该锁可被多个线程所持有。</p>\n<p>多个线程同时读一个资源类没有任何问题，所以为了满足并发量，读取共享资源应该可以同时进行。但是，如果有一个线程想去写共享资源来，就不应该再有其它线程可以对该资源进行读或写。</p>\n<p>对ReentrantReadWriteLock其读锁是共享锁，其写锁是独占锁。</p>\n<p>读锁的共享锁可保证并发读是非常高效的，读写，写读，写写的过程是互斥的。</p>\n<h2><a id=\"31_java_1808\"></a>31_java锁之读写锁代码验证</h2>\n<p>实现一个读写缓存的操作，假设开始没有加锁的时候，会出现什么情况</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashMap<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCache</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> Object value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 正在写入：\"</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 模拟网络拥堵，延迟0.3秒</span>\n            TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 写入完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 正在读取:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 模拟网络拥堵，延迟0.3秒</span>\n            TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Object value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 读取完成：\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReadWriteWithoutLockDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        MyCache myCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 线程操作资源类，5个线程写</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> tempInt <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                myCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>tempInt <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> tempInt <span class=\"token operator\">+</span>  <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 线程操作资源类， 5个线程读</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> tempInt <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                myCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tempInt <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>0\t 正在写入：0\n1\t 正在写入：1\n3\t 正在写入：3\n2\t 正在写入：2\n4\t 正在写入：4\n0\t 正在读取:\n1\t 正在读取:\n2\t 正在读取:\n4\t 正在读取:\n3\t 正在读取:\n1\t 写入完成\n4\t 写入完成\n0\t 写入完成\n2\t 写入完成\n3\t 写入完成\n3\t 读取完成：3\n0\t 读取完成：0\n2\t 读取完成：2\n1\t 读取完成：null\n4\t 读取完成：null\n</code></pre>\n<p>看到有些线程读取到null，可用ReentrantReadWriteLock解决</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>lun<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashMap<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span>ReentrantReadWriteLock<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCache2</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> ReentrantReadWriteLock rwLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantReadWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> Object value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">// 创建一个写锁</span>\n        rwLock<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 正在写入：\"</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 模拟网络拥堵，延迟0.3秒</span>\n                TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 写入完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 写锁 释放</span>\n            rwLock<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">// 读锁</span>\n        rwLock<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 正在读取:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 模拟网络拥堵，延迟0.3秒</span>\n                TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            Object value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 读取完成：\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 读锁释放</span>\n            rwLock<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReadWriteWithLockDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        MyCache2 myCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCache2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 线程操作资源类，5个线程写</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// lambda表达式内部必须是final</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> tempInt <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                myCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>tempInt <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> tempInt <span class=\"token operator\">+</span>  <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 线程操作资源类， 5个线程读</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// lambda表达式内部必须是final</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> tempInt <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                myCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tempInt <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出结果：</p>\n<pre><code>1\t 正在写入：1\n1\t 写入完成\n2\t 正在写入：2\n2\t 写入完成\n3\t 正在写入：3\n3\t 写入完成\n5\t 正在写入：5\n5\t 写入完成\n4\t 正在写入：4\n4\t 写入完成\n2\t 正在读取:\n3\t 正在读取:\n1\t 正在读取:\n5\t 正在读取:\n4\t 正在读取:\n3\t 读取完成：3\n2\t 读取完成：2\n1\t 读取完成：1\n5\t 读取完成：5\n4\t 读取完成：4\n</code></pre>\n<h2><a id=\"32_CountDownLatch_2030\"></a>32_CountDownLatch</h2>\n<p>让一线程阻塞直到另一些线程完成一系列操作才被唤醒。</p>\n<p>CountDownLatch主要有两个方法（await()，countDown()）。</p>\n<p>当一个或多个线程调用await()时，调用线程会被阻塞。其它线程调用countDown()会将计数器减1(调用countDown方法的线程不会阻塞)，当计数器的值变为零时，因调用await方法被阻塞的线程会被唤醒，继续执行。</p>\n<blockquote>\n<p>latch<br/> 英 [lætʃ] 美 [lætʃ]<br/> n. 门闩;插销;碰锁;弹簧锁<br/> v. 用插销插上;用碰锁锁上</p>\n</blockquote>\n<p>假设一个自习室里有7个人，其中有一个是班长，班长的主要职责就是在其它6个同学走了后，关灯，锁教室门，然后走人，因此班长是需要最后一个走的，那么有什么方法能够控制班长这个线程是最后一个执行，而其它线程是随机执行的</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>CountDownLatch<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountDownLatchDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">// 计数器</span>\n        CountDownLatch countDownLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 上完自习，离开教室\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 班长最后关门\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出结果：</p>\n<pre><code>0\t 上完自习，离开教室\n6\t 上完自习，离开教室\n4\t 上完自习，离开教室\n5\t 上完自习，离开教室\n3\t 上完自习，离开教室\n1\t 上完自习，离开教室\n2\t 上完自习，离开教室\nmain\t 班长最后关门\n</code></pre>\n<hr/>\n<p><strong>温习枚举</strong></p>\n<p>枚举 + CountDownLatch</p>\n<p>程序演示秦国统一六国</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Objects<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> CountryEnum <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">ONE</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"齐\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TWO</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"楚\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">THREE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"燕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FOUR</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"赵\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FIVE</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"魏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SIX</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"韩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> Integer retcode<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> String retMessage<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">CountryEnum</span><span class=\"token punctuation\">(</span>Integer retcode<span class=\"token punctuation\">,</span> String retMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>retcode <span class=\"token operator\">=</span> retcode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>retMessage <span class=\"token operator\">=</span> retMessage<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> CountryEnum <span class=\"token function\">forEach_countryEnum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\tCountryEnum<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> myArray <span class=\"token operator\">=</span> CountryEnum<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>CountryEnum ce <span class=\"token operator\">:</span> myArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Objects<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> ce<span class=\"token punctuation\">.</span><span class=\"token function\">getRetcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> ce<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> Integer <span class=\"token function\">getRetcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> retcode<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRetcode</span><span class=\"token punctuation\">(</span>Integer retcode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>retcode <span class=\"token operator\">=</span> retcode<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> String <span class=\"token function\">getRetMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> retMessage<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRetMessage</span><span class=\"token punctuation\">(</span>String retMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>retMessage <span class=\"token operator\">=</span> retMessage<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>CountDownLatch<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnifySixCountriesDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 计数器</span>\n        CountDownLatch countDownLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"国被灭了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> CountryEnum<span class=\"token punctuation\">.</span><span class=\"token function\">forEach_countryEnum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRetMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 秦国统一中原。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-java\">齐国被灭了！\n燕国被灭了！\n楚国被灭了！\n魏国被灭了！\n韩国被灭了！\n赵国被灭了！\nmain 秦国统一中原。\n</code></pre>\n<h2><a id=\"33_CyclicBarrierDemo_2176\"></a>33_CyclicBarrierDemo</h2>\n<p>CyclicBarrier的字面意思就是可循环（Cyclic）使用的屏障（Barrier）。它要求做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await方法。</p>\n<p>CyclicBarrier与CountDownLatch的区别：CyclicBarrier可重复多次，而CountDownLatch只能是一次。</p>\n<p>程序演示集齐7个龙珠，召唤神龙</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>BrokenBarrierException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>CyclicBarrier<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SummonTheDragonDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/**\n         * 定义一个循环屏障，参数1：需要累加的值，参数2 需要执行的方法\n         */</span>\n        CyclicBarrier cyclicBarrier <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CyclicBarrier</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"召唤神龙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">final</span> Integer tempInt <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 收集到 第\"</span> <span class=\"token operator\">+</span> tempInt <span class=\"token operator\">+</span> <span class=\"token string\">\"颗龙珠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 先到的被阻塞，等全部线程完成后，才能执行方法</span>\n                    cyclicBarrier<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BrokenBarrierException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>2\t 收集到 第2颗龙珠\n6\t 收集到 第6颗龙珠\n1\t 收集到 第1颗龙珠\n7\t 收集到 第7颗龙珠\n5\t 收集到 第5颗龙珠\n4\t 收集到 第4颗龙珠\n3\t 收集到 第3颗龙珠\n召唤神龙\n</code></pre>\n<hr/>\n<p>来自《Java编程思想》的例子，展现CyclicBarrier的可循环性：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Horse</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> strides <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Random rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token number\">47</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> CyclicBarrier barrier<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">Horse</span><span class=\"token punctuation\">(</span>CyclicBarrier b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tbarrier <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getStrides</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> strides<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//没有中断，就不断循环</span>\n\t\t\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//模拟马单位时间的移动距离</span>\n\t\t\t\t\tstrides <span class=\"token operator\">+=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Produces 0, 1 or 2</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tbarrier<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&lt;---等待其他马到齐到循环屏障</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// A legitimate way to exit</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BrokenBarrierException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// This one we want to know about</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Horse \"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> String <span class=\"token function\">tracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tStringBuilder s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getStrides</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HorseRace</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> FINISH_LINE <span class=\"token operator\">=</span> <span class=\"token number\">75</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> List<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Horse<span class=\"token punctuation\">&gt;</span></span> horses <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Horse<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> ExecutorService exec <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> CyclicBarrier barrier<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">HorseRace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nHorses<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> pause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//初始化循环屏障</span>\n\t\tbarrier <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CyclicBarrier</span><span class=\"token punctuation\">(</span>nHorses<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// 循环多次执行的任务</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                \n                <span class=\"token comment\">// The fence on the racetrack</span>\n\t\t\t\tStringBuilder s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> FINISH_LINE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token comment\">//打印马移动距离</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Horse horse <span class=\"token operator\">:</span> horses<span class=\"token punctuation\">)</span>\n\t\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>horse<span class=\"token punctuation\">.</span><span class=\"token function\">tracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token comment\">//判断有没有马到终点了</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Horse horse <span class=\"token operator\">:</span> horses<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>horse<span class=\"token punctuation\">.</span><span class=\"token function\">getStrides</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> FINISH_LINE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>horse <span class=\"token operator\">+</span> <span class=\"token string\">\"won!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\texec<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有只马跑赢了，所有任务都结束了</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tTimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>pause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"barrier-action sleep interrupted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 开跑！</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nHorses<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tHorse horse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Horse</span><span class=\"token punctuation\">(</span>barrier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\thorses<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>horse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\texec<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>horse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> nHorses <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> pause <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">HorseRace</span><span class=\"token punctuation\">(</span>nHorses<span class=\"token punctuation\">,</span> pause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>...省略一些...\n===========================================================================\n**********************************************************0\n************************************************************1\n******************************************************2\n***********************************************************************3\n*************************************************************************4\n*****************************************************************5\n*****************************************************************6\n===========================================================================\n**********************************************************0\n************************************************************1\n*******************************************************2\n***********************************************************************3\n**************************************************************************4\n*****************************************************************5\n*******************************************************************6\n===========================================================================\n***********************************************************0\n*************************************************************1\n*******************************************************2\n***********************************************************************3\n****************************************************************************4\n*******************************************************************5\n********************************************************************6\nHorse 4 won!\n</code></pre>\n<h2><a id=\"34_SemaphoreDemo_2372\"></a>34_SemaphoreDemo</h2>\n<p>信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。</p>\n<blockquote>\n<p>semaphore<br/> 英 [ˈseməfɔː®] 美 [ˈseməfɔːr]<br/> n. 信号标;旗语<br/> v. 打旗语;(用其他类似的信号系统)发信号</p>\n</blockquote>\n<p>正常的锁(concurrency.locks或synchronized锁)在任何时刻都<strong>只允许一个任务访问一项资源</strong>，而 Semaphore允许<strong>n个任务</strong>同时访问这个资源。</p>\n<p>模拟一个抢车位的场景，假设一共有6个车，3个停车位</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>Semaphore<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SemaphoreDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">/**\n         * 初始化一个信号量为3，默认是false 非公平锁， 模拟3个停车位\n         */</span>\n        Semaphore semaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 模拟6部车</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 代表一辆车，已经占用了该车位</span>\n                    semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抢占</span>\n\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 抢到车位\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 每个车停3秒</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                        TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 离开车位\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 释放停车位</span>\n                    semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>1\t 抢到车位\n2\t 抢到车位\n0\t 抢到车位\n0\t 离开车位\n2\t 离开车位\n1\t 离开车位\n5\t 抢到车位\n4\t 抢到车位\n3\t 抢到车位\n5\t 离开车位\n4\t 离开车位\n3\t 离开车位\n</code></pre>\n<h2><a id=\"35__2448\"></a>35_阻塞队列理论</h2>\n<ul><li> <p>阻塞队列有没有好的一面</p> </li><li> <p>不得不阻塞，你如何管理</p> </li></ul>\n<h2><a id=\"36__2456\"></a>36_阻塞队列接口结构和实现类</h2>\n<p><strong>阻塞队列</strong>，顾名思义，首先它是一个队列，而一个阻塞队列在数据结构中所起的作用大致如下图所示：</p>\n<p><img alt=\"\" src=\"image\\6ba101e95c6d3027b697cb4ac9af4a82.png\"/></p>\n<p>线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素。</p>\n<p>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞。</p>\n<p>当阻塞队列是满时，往队列里添加元素的操作将会被阻塞。</p>\n<p>试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其他的线程往空的队列插入新的元素。</p>\n<p>同样试图往已满的阻塞队列中添加新元素的线程同样也会被阻塞，直到其他的线程从列中移除一个或者多个元素或者完全清空队列后使队列重新变得空闲起来并后续新增</p>\n<p><strong>为什么用？有什么好处？</strong></p>\n<p>在多线程领域：所谓阻塞，在某些情况下余挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒</p>\n<p>为什么需要BlockingQueue<br/> 好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都给你一手包办了</p>\n<p>在Concurrent包发布以前，在多线程环境下，我们每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。</p>\n<p>架构介绍</p>\n<p><img alt=\"\" src=\"image\\e71c12243095b80c6a1719c428ed7810.png\"/></p>\n<p>种类分析：</p>\n<ul><li>ArrayBlockingQueue：由数组结构组成的有界阻塞队列。</li><li>LinkedBlockingQueue：由链表结构组成的有界（但大小默认值为Integer.MAX_VALUE）阻塞队列。</li><li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列。</li><li>DelayQueue：使用优先级队列实现妁延迟无界阻塞队列。</li><li>SynchronousQueue：不存储元素的阻塞队列。</li><li>LinkedTransferQueue：由链表结构绒成的无界阻塞队列。</li><li>LinkedBlockingDeque：由链表结构组成的双向阻塞队列。</li></ul>\n<p><strong>BlockingQueue的核心方法</strong></p>\n<table><thead><tr><th align=\"center\">方法类型</th><th align=\"center\">抛出异常</th><th align=\"center\">特殊值</th><th align=\"center\">阻塞</th><th align=\"center\">超时</th></tr></thead><tbody><tr><td align=\"center\">插入</td><td align=\"center\">add(e)</td><td align=\"center\">offer(e)</td><td align=\"center\">put(e)</td><td align=\"center\">offer(e,time,unit)</td></tr><tr><td align=\"center\">移除</td><td align=\"center\">remove()</td><td align=\"center\">poll()</td><td align=\"center\">take()</td><td align=\"center\">poll(time,unit)</td></tr><tr><td align=\"center\">检查</td><td align=\"center\">element()</td><td align=\"center\">peek()</td><td align=\"center\">不可用</td><td align=\"center\">不可用</td></tr></tbody></table>\n<table><thead><tr><th>性质</th><th>说明</th></tr></thead><tbody><tr><td>抛出异常</td><td>当阻塞队列满时：在往队列中add插入元素会抛出 IIIegalStateException：Queue full<br/>当阻塞队列空时：再往队列中remove移除元素，会抛出NoSuchException</td></tr><tr><td>特殊性</td><td>插入方法，成功true，失败false <br/>移除方法：成功返回出队列元素，队列没有就返回空</td></tr><tr><td>一直阻塞</td><td>当阻塞队列满时，生产者继续往队列里put元素，队列会一直阻塞生产线程直到put数据or响应中断退出。<br/>当阻塞队列空时，消费者线程试图从队列里take元素，队列会一直阻塞消费者线程直到队列可用。</td></tr><tr><td>超时退出</td><td>当阻塞队列满时，队里会阻塞生产者线程一定时间，超过限时后生产者线程会退出</td></tr></tbody></table>\n<h2><a id=\"37_api_2518\"></a>37_阻塞队列api之抛出异常组</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ArrayBlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>BlockingQueue<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueueExceptionDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tBlockingQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> blockingQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//抛出 java.lang.IllegalStateException: Queue full</span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">///</span>\n\t\t\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//抛出 java.util.NoSuchElementException</span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//element()相当于peek(),但element()会抛NoSuchElementException</span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>true\ntrue\ntrue\na\njava.lang.IllegalStateException: Queue full\na\nb\nc\njava.util.NoSuchElementException\njava.util.NoSuchElementException\n</code></pre>\n<h2><a id=\"38_api_2583\"></a>38_阻塞队列api之返回布尔值组</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ArrayBlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>BlockingQueue<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueueBooleanDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tBlockingQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> blockingQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-java\"><span class=\"token boolean\">true</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token boolean\">false</span>\na\nb\nc\nnull\n</code></pre>\n<h2><a id=\"39_api_2622\"></a>39_阻塞队列api之阻塞和超时控制</h2>\n<p>队列阻塞演示：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ArrayBlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>BlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueueBlockedDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{<!-- --></span>\n\t\tBlockingQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> blockingQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将会阻塞,直到主线程take()</span>\n\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it was blocked.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\n\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blocking...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将会阻塞</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>阻塞超时放弃演示</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ArrayBlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>BlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueueTimeoutDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{<!-- --></span>\n\t\tBlockingQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> blockingQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offer.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Poll.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Offer.\ntrue\ntrue\ntrue\nfalse\nPoll.\na\nb\nc\nnull\n</code></pre>\n<h2><a id=\"40_SynchronousQueue_2716\"></a>40_阻塞队列之同步SynchronousQueue队列</h2>\n<p>SynchronousQueue没有容量。</p>\n<p>与其他BlockingQueue不同，SynchronousQueue是一个不存储元素的BlockingQueue。</p>\n<p>每一个put操作必须要等待一个take操作，否则不能继续添加元素，反之亦然。</p>\n<blockquote>\n<p>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\">blocking queue</a> in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa. A synchronous queue does not have any internal capacity, not even a capacity of one.</p>\n<ul><li> <p>You cannot <code>peek</code> at a synchronous queue because an element is only present when you try to remove it;</p> </li><li> <p>You cannot insert an element (using any method) unless another thread is trying to remove it;</p> </li><li> <p>You cannot iterate as there is nothing to iterate.</p> </li></ul>\n<p>The <em>head</em> of the queue is the element that the first queued inserting thread is trying to add to the queue; if there is no such queued thread then no element is available for removal and <code>poll()</code> will return <code>null</code>. For purposes of other <code>Collection</code> methods (for example <code>contains</code>), a <code>SynchronousQueue</code> acts as an empty collection. This queue does not permit <code>null</code> elements.</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html\">link</a></p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>BlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>SynchronousQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronousQueueDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tBlockingQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> blockingQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>       \n\t\t        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t put A \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t        blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t       \n\t\t        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t put B \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t        blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n\t\t        \n\t\t        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t put C \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t        blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n\t\t        \n\t\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\n\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t take A \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t take B \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tblockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t take C \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"41__2801\"></a>41_线程通信之生产者消费者传统版</h2>\n<p>阻塞队列用在哪里？</p>\n<ul><li>生产者消费者模式 \n  <ul><li>传统版（synchronized, wait, notify）</li><li>阻塞队列版（lock, await, signal）</li></ul> </li><li>线程池</li><li>消息中间件</li></ul>\n<p>实现一个简单的生产者消费者模式</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span>Condition<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span>ReentrantLock<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ShareData</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Lock lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Condition condition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 同步代码块，加锁</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 判断</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 等待不能生产</span>\n                condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 干活</span>\n            number<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t \"</span> <span class=\"token operator\">+</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 通知 唤醒</span>\n            condition<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 同步代码块，加锁</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 判断</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 等待不能消费</span>\n                condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 干活</span>\n            number<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t \"</span> <span class=\"token operator\">+</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 通知 唤醒</span>\n            condition<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TraditionalProducerConsumerDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        ShareData shareData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShareData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// t1线程，生产</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    shareData<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// t2线程，消费</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    shareData<span class=\"token punctuation\">.</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>t1\t 1\nt2\t 0\nt1\t 1\nt2\t 0\nt1\t 1\nt2\t 0\nt1\t 1\nt2\t 0\nt1\t 1\nt2\t 0\nt1\t 1\nt2\t 0\nt1\t 1\nt2\t 0\nt1\t 1\nt2\t 0\nt1\t 1\nt2\t 0\nt1\t 1\nt2\t 0\n</code></pre>\n<hr/>\n<p><strong>注意</strong>，increment()和decrement()内的</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 判断</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 等待不能生产</span>\n    condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>不能用</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 判断</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 等待不能生产</span>\n    condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>否则会出现虚假唤醒，出现异常状况。</p>\n<h2><a id=\"42_SynchronizedLock_2960\"></a>42_Synchronized和Lock有什么区别</h2>\n<ol><li>synchronized属于JVM层面，属于java的关键字 \n  <ul><li>monitorenter（底层是通过monitor对象来完成，其实wait/notify等方法也依赖于monitor对象 只能在同步块或者方法中才能调用 wait/ notify等方法）</li><li>Lock是具体类（java.util.concurrent.locks.Lock）是api层面的锁</li></ul> </li><li>使用方法： \n  <ul><li>synchronized：不需要用户去手动释放锁，当synchronized代码执行后，系统会自动让线程释放对锁的占用。</li><li>ReentrantLock：则需要用户去手动释放锁，若没有主动释放锁，就有可能出现死锁的现象，需要lock() 和 unlock() 配置try catch语句来完成</li></ul> </li><li>等待是否中断 \n  <ul><li>synchronized：不可中断，除非抛出异常或者正常运行完成。</li><li>ReentrantLock：可中断，可以设置超时方法 \n    <ul><li>设置超时方法，trylock(long timeout, TimeUnit unit)</li><li>lockInterrupible() 放代码块中，调用interrupt() 方法可以中断</li></ul> </li></ul> </li><li>加锁是否公平 \n  <ul><li>synchronized：非公平锁</li><li>ReentrantLock：默认非公平锁，构造函数可以传递boolean值，true为公平锁，false为非公平锁</li></ul> </li><li>锁绑定多个条件Condition \n  <ul><li>synchronized：没有，要么随机，要么全部唤醒</li><li>ReentrantLock：用来实现分组唤醒需要唤醒的线程，可以精确唤醒，而不是像synchronized那样，要么随机，要么全部唤醒</li></ul> </li></ol>\n<h2><a id=\"43_Condition_2982\"></a>43_锁绑定多个条件Condition</h2>\n<p><strong>实现场景</strong></p>\n<p>多线程之间按顺序调用，实现 A-&gt; B -&gt; C 三个线程启动，要求如下：<br/> AA打印5次，BB打印10次，CC打印15次<br/> 紧接着<br/> AA打印5次，BB打印10次，CC打印15次<br/> …<br/> 来10轮</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span>Condition<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span>ReentrantLock<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ShareResource</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// A 1   B 2   c 3</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 创建一个重入锁</span>\n    <span class=\"token keyword\">private</span> Lock lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 这三个相当于备用钥匙</span>\n    <span class=\"token keyword\">private</span> Condition condition1 <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Condition condition2 <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Condition condition3 <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 判断</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 不等于1，需要等待</span>\n                condition1<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 干活</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t \"</span> <span class=\"token operator\">+</span> number <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 唤醒 （干完活后，需要通知B线程执行）</span>\n            number <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通知2号去干活了</span>\n            condition2<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print10</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 判断</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 不等于1，需要等待</span>\n                condition2<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 干活</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t \"</span> <span class=\"token operator\">+</span> number <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 唤醒 （干完活后，需要通知C线程执行）</span>\n            number <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通知2号去干活了</span>\n            condition3<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print15</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 判断</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 不等于1，需要等待</span>\n                condition3<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 干活</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t \"</span> <span class=\"token operator\">+</span> number <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 唤醒 （干完活后，需要通知C线程执行）</span>\n            number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通知1号去干活了</span>\n            condition1<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedAndReentrantLockDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        ShareResource shareResource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShareResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    shareResource<span class=\"token punctuation\">.</span><span class=\"token function\">print5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                shareResource<span class=\"token punctuation\">.</span><span class=\"token function\">print10</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                shareResource<span class=\"token punctuation\">.</span><span class=\"token function\">print15</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出结果：</p>\n<pre><code>...\nA\t 1\t0\nA\t 1\t1\nA\t 1\t2\nA\t 1\t3\nA\t 1\t4\nB\t 2\t0\nB\t 2\t1\nB\t 2\t2\nB\t 2\t3\nB\t 2\t4\nB\t 2\t5\nB\t 2\t6\nB\t 2\t7\nB\t 2\t8\nB\t 2\t9\nC\t 3\t0\nC\t 3\t1\nC\t 3\t2\nC\t 3\t3\nC\t 3\t4\nC\t 3\t5\nC\t 3\t6\nC\t 3\t7\nC\t 3\t8\nC\t 3\t9\nC\t 3\t10\nC\t 3\t11\nC\t 3\t12\nC\t 3\t13\nC\t 3\t14\nA\t 1\t0\nA\t 1\t1\nA\t 1\t2\nA\t 1\t3\nA\t 1\t4\nB\t 2\t0\nB\t 2\t1\nB\t 2\t2\nB\t 2\t3\nB\t 2\t4\nB\t 2\t5\nB\t 2\t6\nB\t 2\t7\nB\t 2\t8\nB\t 2\t9\nC\t 3\t0\nC\t 3\t1\nC\t 3\t2\nC\t 3\t3\nC\t 3\t4\nC\t 3\t5\nC\t 3\t6\nC\t 3\t7\nC\t 3\t8\nC\t 3\t9\nC\t 3\t10\nC\t 3\t11\nC\t 3\t12\nC\t 3\t13\nC\t 3\t14\n</code></pre>\n<h2><a id=\"44__3184\"></a>44_线程通信之生产者消费者阻塞队列版</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ArrayBlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>BlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span>AtomicInteger<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyResource</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 默认开启，进行生产消费</span>\n    <span class=\"token comment\">// 这里用到了volatile是为了保持数据的可见性，也就是当TLAG修改时，要马上通知其它线程进行修改</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> FLAG <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 使用原子包装类，而不用number++</span>\n    <span class=\"token keyword\">private</span> AtomicInteger atomicInteger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 这里不能为了满足条件，而实例化一个具体的SynchronousBlockingQueue</span>\n    BlockingQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> blockingQueue <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 而应该采用依赖注入里面的，构造注入方法传入</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyResource</span><span class=\"token punctuation\">(</span>BlockingQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> blockingQueue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>blockingQueue <span class=\"token operator\">=</span> blockingQueue<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 查询出传入的class是什么</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myProducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{<!-- --></span>\n        String data <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> retValue<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 多线程环境的判断，一定要使用while进行，防止出现虚假唤醒</span>\n        <span class=\"token comment\">// 当FLAG为true的时候，开始生产</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>FLAG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            data <span class=\"token operator\">=</span> atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 2秒存入1个data</span>\n            retValue <span class=\"token operator\">=</span> blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>retValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 插入队列:\"</span> <span class=\"token operator\">+</span> data  <span class=\"token operator\">+</span> <span class=\"token string\">\"成功\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 插入队列:\"</span> <span class=\"token operator\">+</span> data  <span class=\"token operator\">+</span> <span class=\"token string\">\"失败\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 停止生产，表示FLAG=false，生产介绍\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myConsumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{<!-- --></span>\n        String retValue<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 多线程环境的判断，一定要使用while进行，防止出现虚假唤醒</span>\n        <span class=\"token comment\">// 当FLAG为true的时候，开始生产</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>FLAG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 2秒存入1个data</span>\n            retValue <span class=\"token operator\">=</span> blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>retValue <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> retValue <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 消费队列:\"</span> <span class=\"token operator\">+</span> retValue  <span class=\"token operator\">+</span> <span class=\"token string\">\"成功\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                FLAG <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 消费失败，队列中已为空，退出\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 退出消费队列</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 停止生产的判断\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>FLAG <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerConsumerWithBlockingQueueDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 传入具体的实现类， ArrayBlockingQueue</span>\n        MyResource myResource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyResource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 生产线程启动\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                myResource<span class=\"token punctuation\">.</span><span class=\"token function\">myProducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"producer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 消费线程启动\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                myResource<span class=\"token punctuation\">.</span><span class=\"token function\">myConsumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"consumer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 5秒后，停止生产和消费</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n5秒中后，生产和消费线程停止，线程结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myResource<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>java.util.concurrent.ArrayBlockingQueue\nproducer\t 生产线程启动\n\n\nconsumer\t 消费线程启动\nproducer\t 插入队列:1成功\nconsumer\t 消费队列:1成功\nproducer\t 插入队列:2成功\nconsumer\t 消费队列:2成功\nproducer\t 插入队列:3成功\nconsumer\t 消费队列:3成功\nproducer\t 插入队列:4成功\nconsumer\t 消费队列:4成功\nproducer\t 插入队列:5成功\nconsumer\t 消费队列:5成功\n\n\n5秒中后，生产和消费线程停止，线程结束\nproducer\t 停止生产，表示FLAG=false，生产介绍\n\n\nconsumer\t 消费失败，队列中已为空，退出\n</code></pre>\n<h2><a id=\"45_Callable_3336\"></a>45_Callable接口</h2>\n<p>Callable接口，是一种让线程执行完成后，能够返回结果的。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>Callable<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ExecutionException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>FutureTask<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> Integer <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" come in Callable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CallableDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException<span class=\"token punctuation\">,</span> ExecutionException <span class=\"token punctuation\">{<!-- --></span>\n\t\tFutureTask<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//多个线程执行 一个FutureTask的时候，只会计算一次</span>\n\t\t\n\t\t<span class=\"token comment\">// 输出FutureTask的返回值</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result FutureTask \"</span> <span class=\"token operator\">+</span> futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"46__3374\"></a>46_线程池使用及优势</h2>\n<p>线程池做的工作主要是控制运行的线程的数量，<strong>处理过程中将任务放入队列</strong>，然后在线程创建后启动这些任务，如果线程数量超过了最大数量超出数量的线程排队等候，等其它线程执行完毕，再从队列中取出任务来执行。</p>\n<p>它的主要特点为：线程复用，控制最大并发数，管理线程。</p>\n<p>优点：</p>\n<ol><li>降低资源消耗。通过重复利用己创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ol>\n<h2><a id=\"47_3_3392\"></a>47_线程池3个常用方式</h2>\n<p>Java中的线程池是通过Executor框架实现的，该框架中用到了Executor，Executors，ExecutorService，ThreadPoolExecutor这几个类。</p>\n<p><img alt=\"\" src=\"image\\947b9a063ddd04eaa276b03b38c45ec6.png\"/></p>\n<p>了解</p>\n<ul><li>Executors.newScheduledThreadPool()</li><li>Executors.newWorkStealingPool(int) - Java8新增，使用目前机器上可用的处理器作为它的并行级别</li></ul>\n<p>重点</p>\n<ul><li>Executors.newSingleThreadExecutor()</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> ExecutorService <span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizableDelegatedExecutorService</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token number\">0</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">,</span>\n                                <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Runnable<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>主要特点如下：</p>\n<ol><li>创建<strong>一个单线程化</strong>的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序执行。</li><li>newSingleThreadExecutor将corePoolSize和maximumPoolSize都设置为1，它使用的LinkedBlockingQueue。</li></ol>\n<ul><li>Executors.newFixedThreadPool(int)</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> ExecutorService <span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nThreads<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>nThreads<span class=\"token punctuation\">,</span> nThreads<span class=\"token punctuation\">,</span>\n                                  <span class=\"token number\">0</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Runnable<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>主要特点如下：</p>\n<ol><li>创建一个<strong>定长线程池</strong>，可控制线程最大并发数，超出的线程会在队列中等待。</li><li>newFixedThreadPool创建的线程池corePoolSize和maximumPoolSize值是相等的，它使用的LinkedBlockingQueue。</li></ol>\n<ul><li>Executors.newCachedThreadPool()</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> ExecutorService <span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">,</span>\n                                  <span class=\"token number\">60</span>L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Runnable<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>主要特点如下：</p>\n<ol><li>创建一个<strong>可缓存线程池</strong>，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li><li>newCachedThreadPool将corePoolSize设置为0，将maximumPoolSize设置为Integer.MAX_VALUE，使用的SynchronousQueue，也就是说来了任务就创建线程运行，当线程空闲超过60秒，就销毁线程。</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ExecutorService<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>Executors<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    \t<span class=\"token comment\">// 一池5个处理线程（用池化技术，一定要记得关闭）</span>\n<span class=\"token comment\">//    \tExecutorService threadPool = Executors.newFixedThreadPool(5);</span>\n\n    \t<span class=\"token comment\">// 创建一个只有一个线程的线程池</span>\n<span class=\"token comment\">//    \tExecutorService threadPool = Executors.newSingleThreadExecutor();</span>\n\n    \t<span class=\"token comment\">// 创建一个拥有N个线程的线程池，根据调度创建合适的线程</span>\n    \tExecutorService threadPool <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 模拟10个用户来办理业务，每个用户就是一个来自外部请求线程</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token comment\">// 循环十次，模拟业务办理，让5个线程处理这10个请求</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> tempInt <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 给用户:\"</span> <span class=\"token operator\">+</span> tempInt <span class=\"token operator\">+</span> <span class=\"token string\">\" 办理业务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>pool-1-thread-1\t 给用户:0 办理业务\npool-1-thread-6\t 给用户:5 办理业务\npool-1-thread-5\t 给用户:4 办理业务\npool-1-thread-2\t 给用户:1 办理业务\npool-1-thread-4\t 给用户:3 办理业务\npool-1-thread-3\t 给用户:2 办理业务\npool-1-thread-10\t 给用户:9 办理业务\npool-1-thread-9\t 给用户:8 办理业务\npool-1-thread-8\t 给用户:7 办理业务\npool-1-thread-7\t 给用户:6 办理业务\n</code></pre>\n<h2><a id=\"48_7_3512\"></a>48_线程池7大参数入门简介</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolExecutor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractExecutorService</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n\t<span class=\"token keyword\">public</span> <span class=\"token function\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span>\n                              TimeUnit unit<span class=\"token punctuation\">,</span>\n                              BlockingQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Runnable<span class=\"token punctuation\">&gt;</span></span> workQueue<span class=\"token punctuation\">,</span>\n                              ThreadFactory threadFactory<span class=\"token punctuation\">,</span>\n                              RejectedExecutionHandler handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>corePoolSize <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n            maximumPoolSize <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n            maximumPoolSize <span class=\"token operator\">&lt;</span> corePoolSize <span class=\"token operator\">||</span>\n            keepAliveTime <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workQueue <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> threadFactory <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> handler <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acc <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">?</span>\n                null <span class=\"token operator\">:</span>\n                AccessController<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>corePoolSize <span class=\"token operator\">=</span> corePoolSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maximumPoolSize <span class=\"token operator\">=</span> maximumPoolSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workQueue <span class=\"token operator\">=</span> workQueue<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keepAliveTime <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>keepAliveTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadFactory <span class=\"token operator\">=</span> threadFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"49_7_3551\"></a>49_线程池7大参数深入介绍</h2>\n<ol><li> <p>corePoolSize：线程池中的常驻核心线程数</p>\n<ul><li>在创建了线程池后，当有请求任务来之后，就会安排池中的线程去执行请求任务，近似理解为今日当值线程。</li><li>当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中。</li></ul> </li><li> <p>maximumPoolSize：线程池能够容纳同时执行的最大线程数，此值必须大于等于1</p> </li><li> <p>keepAliveTime：多余的空闲线程的存活时间。</p>\n<ul><li>当前线程池数量超过corePoolSize时，当空闲时间达到keepAliveTime值时，多余空闲线程会被销毁直到只剩下corePoolSize个线程为止</li></ul> </li><li> <p>unit：keepAliveTime的单位。</p> </li><li> <p>workQueue：任务队列，被提交但尚未被执行的任务。</p> </li><li> <p>threadFactory：表示生成线程池中工作线程的线程工厂，用于创建线程一般用默认的即可。</p> </li><li> <p>handler：拒绝策略，表示当队列满了并且工作线程大于等于线程池的最大线程数（ maximumPoolSize)。</p> </li></ol>\n<h2><a id=\"50__3567\"></a>50_线程池底层工作原理</h2>\n<p><img alt=\"\" src=\"image\\e409c2155477e1a58733372caefee96f.png\"/></p>\n<p><img alt=\"\" src=\"image\\90c6fb12f14ffe1a7e2d695ece27c94e.png\"/></p>\n<ol><li> <p>在创建了线程池后，等待提交过来的任务请求。</p> </li><li> <p>当调用execute()方法添加一个请求任务时，线程池会做如下判断：</p>\n<ol><li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；</li><li>如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列；</li><li>如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务;</li><li>如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。</li></ol> </li><li> <p>当一个线程完成任务时，它会从队列中取下一个任务来执行。</p> </li><li> <p>当一个线程无事可做超过一定的时间（keepAliveTime）时，线程池会判断:</p>\n<ul><li>如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉，所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小。</li></ul> </li></ol>\n<h2><a id=\"51_4_3589\"></a>51_线程池的4种拒绝策略理论简介</h2>\n<p><strong>等待队列也已经排满了</strong>，再也塞不下新任务了同时，<strong>线程池中的max线程也达到了</strong>，无法继续为新任务服务。</p>\n<p>这时候我们就需要拒绝策略机制合理的处理这个问题。</p>\n<p>JDK拒绝策略：</p>\n<ul><li>AbortPolicy（默认）：直接抛出 RejectedExecutionException异常阻止系统正常运知。</li><li>CallerRunsPolicy：\"调用者运行\"一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量。</li><li>DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务。</li><li>DiscardPolicy：直接丢弃任务，不予任何处理也不抛出异常。如果允许任务丢失，这是最好的一种方案。</li></ul>\n<p>以上内置拒绝策略均实现了RejectedExecutionHandler接口。</p>\n<h2><a id=\"52__3610\"></a>52_线程池实际中使用哪一个</h2>\n<p>（<strong>超级大坑警告</strong>）你在工作中单一的/固定数的/可变的三种创建线程池的方法，你用那个多？</p>\n<p>答案是一个都不用，我们生产上只能使用自定义的</p>\n<p>Executors 中JDK已经给你提供了，为什么不用?</p>\n<blockquote>\n<p>3.【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>\n<p>说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。 如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>\n<p>4.【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>\n<p>说明：Executors 返回的线程池对象的弊端如下：</p>\n<p>1） FixedThreadPool 和 SingleThreadPool： 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p>\n<p>2） CachedThreadPool： 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>\n<p><a href=\"https://developer.aliyun.com/topic/download?spm=a2c6h.15028928.J_5293118740.2&amp;id=805\">阿里巴巴《Java 开发手册》</a></p>\n</blockquote>\n<h2><a id=\"53__3638\"></a>53_线程池的手写改造和拒绝策略</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ExecutorService<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>Executors<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>LinkedBlockingQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>RejectedExecutionHandler<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>ThreadPoolExecutor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThreadPoolExecutorDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>ExecutorService executorService<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t    \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ThreadPoolExecutor<span class=\"token punctuation\">)</span>executorService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRejectedExecutionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numOfRequest<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> tempInt <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t 给用户:\"</span> <span class=\"token operator\">+</span> tempInt <span class=\"token operator\">+</span> <span class=\"token string\">\" 办理业务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        \tSystem<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> ExecutorService <span class=\"token function\">newMyThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span>\n           <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> blockingQueueSize<span class=\"token punctuation\">,</span> RejectedExecutionHandler handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>\n                corePoolSize<span class=\"token punctuation\">,</span>\n                maximumPoolSize<span class=\"token punctuation\">,</span>\n                <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//keepAliveTime</span>\n                TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>blockingQueueSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                Executors<span class=\"token punctuation\">.</span><span class=\"token function\">defaultThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token function\">newMyThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>AbortPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token function\">newMyThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token function\">newMyThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>DiscardOldestPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token function\">newMyThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>DiscardPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>class java.util.concurrent.ThreadPoolExecutor$AbortPolicy:\npool-1-thread-1\t 给用户:0 办理业务\npool-1-thread-3\t 给用户:5 办理业务java.util.concurrent.RejectedExecutionException: Task com.lun.concurrency.MyThreadPoolExecutorDemo$$Lambda$1/303563356@eed1f14 rejected from java.util.concurrent.ThreadPoolExecutor@7229724f[Running, pool size = 5, active threads = 0, queued tasks = 0, completed tasks = 8]\n\npool-1-thread-2\t 给用户:1 办理业务\npool-1-thread-5\t 给用户:7 办理业务\npool-1-thread-3\t 给用户:3 办理业务\npool-1-thread-4\t 给用户:6 办理业务\npool-1-thread-1\t 给用户:2 办理业务\npool-1-thread-2\t 给用户:4 办理业务\nclass java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy:\npool-2-thread-1\t 给用户:0 办理业务\npool-2-thread-2\t 给用户:1 办理业务\npool-2-thread-1\t 给用户:2 办理业务\npool-2-thread-3\t 给用户:5 办理业务\npool-2-thread-3\t 给用户:7 办理业务\npool-2-thread-3\t 给用户:9 办理业务\npool-2-thread-4\t 给用户:6 办理业务\npool-2-thread-2\t 给用户:3 办理业务\npool-2-thread-5\t 给用户:8 办理业务\nmain\t 给用户:10 办理业务\npool-2-thread-1\t 给用户:4 办理业务\npool-2-thread-3\t 给用户:11 办理业务\npool-2-thread-4\t 给用户:13 办理业务\nmain\t 给用户:14 办理业务\npool-2-thread-1\t 给用户:12 办理业务\npool-2-thread-5\t 给用户:15 办理业务\npool-2-thread-2\t 给用户:17 办理业务\nmain\t 给用户:18 办理业务\npool-2-thread-3\t 给用户:16 办理业务\npool-2-thread-4\t 给用户:19 办理业务\n\n\n\nclass java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy:\npool-3-thread-1\t 给用户:0 办理业务\npool-3-thread-2\t 给用户:1 办理业务\npool-3-thread-1\t 给用户:2 办理业务\npool-3-thread-2\t 给用户:3 办理业务\npool-3-thread-3\t 给用户:5 办理业务\npool-3-thread-5\t 给用户:8 办理业务\npool-3-thread-2\t 给用户:7 办理业务\npool-3-thread-4\t 给用户:6 办理业务\npool-3-thread-1\t 给用户:4 办理业务\npool-3-thread-3\t 给用户:9 办理业务\n\n\n\nclass java.util.concurrent.ThreadPoolExecutor$DiscardPolicy:\npool-4-thread-1\t 给用户:0 办理业务\npool-4-thread-2\t 给用户:1 办理业务\npool-4-thread-1\t 给用户:2 办理业务\npool-4-thread-2\t 给用户:3 办理业务\npool-4-thread-3\t 给用户:5 办理业务\npool-4-thread-3\t 给用户:9 办理业务\npool-4-thread-1\t 给用户:4 办理业务\npool-4-thread-5\t 给用户:8 办理业务\npool-4-thread-4\t 给用户:6 办理业务\npool-4-thread-2\t 给用户:7 办理业务\n\n\n\n\n</code></pre>\n<h2><a id=\"54__3769\"></a>54_线程池配置合理线程数</h2>\n<p>合理配置线程池你是如何考虑的？</p>\n<p><strong>CPU密集型</strong></p>\n<p>CPU密集的意思是该任务需要大量的运算，而没有阻塞，CPU一直全速运行。</p>\n<p>CPU密集任务只有在真正的多核CPU上才可能得到加速(通过多线程),<br/> 而在单核CPU上，无论你开几个模拟的多线程该任务都不可能得到加速，因为CPU总的运算能力就那些。</p>\n<p>CPU密集型任务配置尽可能少的线程数量：</p>\n<p>一般公式：（CPU核数+1）个线程的线程池</p>\n<p><strong>lO密集型</strong></p>\n<p>由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如CPU核数 * 2。</p>\n<p>IO密集型，即该任务需要大量的IO，即大量的阻塞。</p>\n<p>在单线程上运行IO密集型的任务会导致浪费大量的CPU运算能力浪费在等待。</p>\n<p>所以在IO密集型任务中使用多线程可以大大的加速程序运行，即使在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞时间。</p>\n<p>IO密集型时，大部分线程都阻塞，故需要多配置线程数：</p>\n<p>参考公式：CPU核数/ (1-阻塞系数)</p>\n<p>阻塞系数在0.8~0.9之间</p>\n<p>比如8核CPU：8/(1-0.9)=80个线程数</p>\n<h2><a id=\"55__3810\"></a>55_死锁编码及定位分析</h2>\n<p><strong>是什么</strong></p>\n<p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象,若无外力干涉那它们都将无法推进下去，如果系统资源充足，进程的资源请求都能够碍到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。</p>\n<p><img alt=\"\" src=\"image\\5d9a16c9c88e8676d9c8df8ecf9a4d4f.png\"/></p>\n<p><strong>产生死锁主要原因</strong></p>\n<ul><li>系统资源不足</li><li>进程运行推进的顺序不合适</li><li>资源分配不当</li></ul>\n<p><strong>发生死锁的四个条件</strong>：</p>\n<ol><li>互斥条件，线程使用的资源至少有一个不能共享的。</li><li>至少有一个线程必须持有一个资源<strong>且</strong>正在等待获取一个当前被别的线程持有的资源。</li><li>资源不能被抢占。</li><li>循环等待。</li></ol>\n<p><strong>如何解决死锁问题</strong></p>\n<p>破坏发生死锁的四个条件其中之一即可。</p>\n<p><strong>产生死锁的代码</strong>（根据发生死锁的四个条件）：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>lun<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTask</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">private</span> Object resourceA<span class=\"token punctuation\">,</span> resourceB<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">MyTask</span><span class=\"token punctuation\">(</span>Object resourceA<span class=\"token punctuation\">,</span> Object resourceB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceA <span class=\"token operator\">=</span> resourceA<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceB <span class=\"token operator\">=</span> resourceB<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>resourceA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s 自己持有%s，尝试持有%s\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// </span>\n\t\t\t\t\tThread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resourceA<span class=\"token punctuation\">,</span> resourceB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>resourceB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s 同时持有%s，%s\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// </span>\n\t\t\t\t\t\tThread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resourceA<span class=\"token punctuation\">,</span> resourceB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLockDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tObject resourceA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tObject resourceB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span>resourceA<span class=\"token punctuation\">,</span> resourceB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Thread A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span>resourceB<span class=\"token punctuation\">,</span> resourceA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Thread B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Thread A 自己持有java.lang.Object@59d8d77，尝试持有java.lang.Object@7a15e6e6\nThread B 自己持有java.lang.Object@7a15e6e6，尝试持有java.lang.Object@59d8d77\n</code></pre>\n<p>程序卡死，未出现<code>同时持有</code>的字样。</p>\n<p><strong>查看是否死锁工具</strong>：</p>\n<ol><li> <p>jps命令定位进程号</p> </li><li> <p>jstack找到死锁查看</p> </li></ol>\n<pre><code class=\"prism language-cmd\">C:\\Users\\abc&gt;jps -l\n11968 com.lun.concurrency.DeadLockDemo\n6100 jdk.jcmd/sun.tools.jps.Jps\n6204 Eclipse\n\nC:\\Users\\abc&gt;jstack 11968\n2021-03-09 02:42:46\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.251-b08 mixed mode):\n\n\"DestroyJavaVM\" #13 prio=5 os_prio=0 tid=0x00000000004de800 nid=0x2524 waiting on condition [0\nx0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Thread B\" #12 prio=5 os_prio=0 tid=0x000000001e0a5800 nid=0x6bc waiting for monitor entry [0x\n000000001efae000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n        at com.lun.concurrency.MyTask.run(DeadLockDemo.java:27)\n        - waiting to lock &lt;0x000000076b431d80&gt; (a java.lang.Object)\n        - locked &lt;0x000000076b431d90&gt; (a java.lang.Object)\n        at java.lang.Thread.run(Thread.java:748)\n\n\"Thread A\" #11 prio=5 os_prio=0 tid=0x000000001e0a4800 nid=0x650 waiting for monitor entry [0x\n000000001eeae000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n        at com.lun.concurrency.MyTask.run(DeadLockDemo.java:27)\n        - waiting to lock &lt;0x000000076b431d90&gt; (a java.lang.Object)\n        - locked &lt;0x000000076b431d80&gt; (a java.lang.Object)\n        at java.lang.Thread.run(Thread.java:748)\n\n\"Service Thread\" #10 daemon prio=9 os_prio=0 tid=0x000000001e034000 nid=0x2fb8 runnable [0x000\n0000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C1 CompilerThread3\" #9 daemon prio=9 os_prio=2 tid=0x000000001dffa000 nid=0x26e8 waiting on c\nondition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread2\" #8 daemon prio=9 os_prio=2 tid=0x000000001dff6000 nid=0x484 waiting on co\nndition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread1\" #7 daemon prio=9 os_prio=2 tid=0x000000001dfe0800 nid=0x35c8 waiting on c\nondition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread0\" #6 daemon prio=9 os_prio=2 tid=0x000000001dfde800 nid=0x3b7c waiting on c\nondition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Attach Listener\" #5 daemon prio=5 os_prio=2 tid=0x000000001dfdd000 nid=0x3834 waiting on cond\nition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Signal Dispatcher\" #4 daemon prio=9 os_prio=2 tid=0x000000001dfdb000 nid=0x214 runnable [0x00\n00000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Finalizer\" #3 daemon prio=8 os_prio=1 tid=0x000000001df70800 nid=0x2650 in Object.wait() [0x0\n00000001e54f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on &lt;0x000000076b388ee0&gt; (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)\n        - locked &lt;0x000000076b388ee0&gt; (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)\n\n\"Reference Handler\" #2 daemon prio=10 os_prio=2 tid=0x000000001c17d000 nid=0x1680 in Object.wa\nit() [0x000000001e44f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on &lt;0x000000076b386c00&gt; (a java.lang.ref.Reference$Lock)\n        at java.lang.Object.wait(Object.java:502)\n        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)\n        - locked &lt;0x000000076b386c00&gt; (a java.lang.ref.Reference$Lock)\n        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)\n\n\"VM Thread\" os_prio=2 tid=0x000000001c178000 nid=0x3958 runnable\n\n\"GC task thread#0 (ParallelGC)\" os_prio=0 tid=0x0000000002667800 nid=0xd3c runnable\n\n\"GC task thread#1 (ParallelGC)\" os_prio=0 tid=0x0000000002669000 nid=0x297c runnable\n\n\"GC task thread#2 (ParallelGC)\" os_prio=0 tid=0x000000000266a800 nid=0x2fd0 runnable\n\n\"GC task thread#3 (ParallelGC)\" os_prio=0 tid=0x000000000266c000 nid=0x1c90 runnable\n\n\"GC task thread#4 (ParallelGC)\" os_prio=0 tid=0x000000000266f800 nid=0x3614 runnable\n\n\"GC task thread#5 (ParallelGC)\" os_prio=0 tid=0x0000000002670800 nid=0x298c runnable\n\n\"GC task thread#6 (ParallelGC)\" os_prio=0 tid=0x0000000002674000 nid=0x2b40 runnable\n\n\"GC task thread#7 (ParallelGC)\" os_prio=0 tid=0x0000000002675000 nid=0x25f4 runnable\n\n\"VM Periodic Task Thread\" os_prio=2 tid=0x000000001e097000 nid=0xd54 waiting on condition\n\nJNI global references: 5\n\n\nFound one Java-level deadlock:\n=============================\n\"Thread B\":\n  waiting to lock monitor 0x000000001e105dc8 (object 0x000000076b431d80, a java.lang.Object),\n  which is held by \"Thread A\"\n\"Thread A\":\n  waiting to lock monitor 0x000000001c181828 (object 0x000000076b431d90, a java.lang.Object),\n  which is held by \"Thread B\"\n\nJava stack information for the threads listed above:\n===================================================\n\"Thread B\":\n        at com.lun.concurrency.MyTask.run(DeadLockDemo.java:27)\n        - waiting to lock &lt;0x000000076b431d80&gt; (a java.lang.Object)\n        - locked &lt;0x000000076b431d90&gt; (a java.lang.Object)\n        at java.lang.Thread.run(Thread.java:748)\n\"Thread A\":\n        at com.lun.concurrency.MyTask.run(DeadLockDemo.java:27)\n        - waiting to lock &lt;0x000000076b431d90&gt; (a java.lang.Object)\n        - locked &lt;0x000000076b431d80&gt; (a java.lang.Object)\n        at java.lang.Thread.run(Thread.java:748)\n\nFound 1 deadlock.\n\n\nC:\\Users\\abc&gt;\n\n</code></pre>\n<h2><a id=\"56_JVMGC_4041\"></a>56_JVMGC下半场技术加强说明和前提知识要求</h2>\n<p>略</p>\n<h2><a id=\"57_JVMGC_4047\"></a>57_JVMGC快速回顾复习串讲</h2>\n<p>JVM内存结构</p>\n<p><strong>JVM体系概述</strong></p>\n<p><img alt=\"\" src=\"image\\744917972635fcf5008e788f31d2e7a7.png\"/></p>\n<p><strong>Java8以后的JVM</strong></p>\n<p><img alt=\"\" src=\"image\\808d73c0d88279b65d32896ae4c54b3a.png\"/></p>\n<p><img alt=\"\" src=\"image\\0a353afc018530227826545c62ab5f00.png\"/></p>\n<p><img alt=\"\" src=\"image\\edf88716d56a32ba3a590425d3bdcbb6.png\"/></p>\n<p><strong>常见的垃圾回收算法</strong></p>\n<p>1.引用计数</p>\n<p><img alt=\"\" src=\"image\\78b1237fc1f357a6a5afdf65c4af2b4c.png\"/></p>\n<p>2.复制</p>\n<p>Java堆从GC的角度还可以细分为: 新生代(Eden 区、From Survivor 区和To Survivor 区)和老年代。</p>\n<p><img alt=\"\" src=\"image\\5799217d4beece00818129f315ac4dab.png\"/></p>\n<p>MinorGC的过程（复制-&gt;清空-&gt;互换）:<br/> a. Eden、SurvivorFrom复制到SurvivorTo，年龄+1<br/> 首先，当Eden区满的时候会触发第一次GC，把还活着的对象拷贝到SurvivorFrom区，当Eden区再次触发GC的时候会扫描Eden区和From区域，对这两个区域进行垃圾回收，经过这次回收后还存活的对象,则直接复制到To区域（如果有对象的年龄已经达到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1。</p>\n<p>b. 清空eden-SurvivorErom<br/> 然后，清空Eden和Survivor From中的对象，也即复制之后有交换，谁空谁是To。</p>\n<p>c. Survivor To和 Survivor From互换<br/> 最后，Survivor To和Survivor From互换，原SurvivorTo成为下一次GC时的Survivor From区。部分对象会在From和To区域中复制来复制去,如此交换15次(由ⅣM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代。</p>\n<p>标记清除</p>\n<p>算法分成标记和清除两个阶段，先标记出要回收的对象，然后统一回收这些对象。</p>\n<p><img alt=\"\" src=\"image\\ed6827070424da8c6645b63cd75d1727.png\"/></p>\n<p>标记整理</p>\n<p><img alt=\"\" src=\"image\\7ca80a4dd7bfce31488bae7a1b05cf18.png\"/></p>\n<h2><a id=\"58_GCRoots_4113\"></a>58_谈谈你对GCRoots的理解</h2>\n<p>什么是垃圾？</p>\n<p>简单的说就是内存中已经不再被使用到的空间就是垃圾。</p>\n<p>要进行垃圾回收，如何判断一个对象是否可以被回收?</p>\n<ul><li> <p>引用计数法</p> </li><li> <p>枚举根节点做可达性分析(根搜索路径)</p> </li></ul>\n<p><strong>引用计数法</strong></p>\n<p>Java 中，引用和对象是有关联的。如果要操作对象则必须用引用进行。</p>\n<p>因此，很显然一个简单的办法是通过引用计数来判断一个对象是否可以回收。简单说，给对象中添加一个引用计数器，</p>\n<p>每当有一个地方引用它，计数器值加1，</p>\n<p>每当有一个引用失效时，计数器值减1。</p>\n<p>任何时刻计数器值为零的对象就是不可能再被使用的，那么这个对象就是可回收对象。</p>\n<p>那为什么主流的Java虚拟机里面都没有选用这种算法呢?其中最主要的原因是它很难解决对象之间相互循环引用的问题。</p>\n<p>该算法存在但目前无人用了，解决不掉循环引用的问题，了解即可。</p>\n<p><img alt=\"\" src=\"image\\78b1237fc1f357a6a5afdf65c4af2b4c.png\"/></p>\n<p><strong>枚举根节点做可达性分析(根搜索路径)</strong></p>\n<p>为了解决引用计数法的循环引用问题，Java使用了可达性分析的方法。</p>\n<p><img alt=\"\" src=\"image\\9614c73d69b01665eeb31cf2b6a28f58.png\"/></p>\n<p><img alt=\"\" src=\"image\\5f68ea706c299a6e6158fa66dda0164e.png\"/></p>\n<p>所谓“GC roots”或者说tracing GC的“根集合”<strong>就是一组必须活跃的引用</strong>。</p>\n<p><strong>基本思路就是通过一系列名为”GC Roots”的对象作为起始点</strong>，从这个被称为GC Roots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。也即给定一个集合的引用作为根出发，通过引用关系遍历对象图，能被遍历到的（可到达的）对象就被判定为存活;没有被遍历到的就自然被判定为死亡。</p>\n<p>Java中可以作为GC Roots的对象</p>\n<ul><li> <p>虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中引用的对象。</p> </li><li> <p>方法区中的类静态属性引用的对象。</p> </li><li> <p>方法区中常量引用的对象。</p> </li><li> <p>本地方法栈中JNI(Native方法)引用的对象。</p> </li></ul>\n<h2><a id=\"59_JVMX_4177\"></a>59_JVM的标配参数和X参数</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html\">官方文档</a></p>\n<p>JVM的参数类型：</p>\n<ul><li> <p>标配参数</p>\n<ul><li>-version <code>java -version</code></li><li>-help</li></ul> </li><li> <p>X参数（了解）</p>\n<ul><li>-Xint：解释执行</li><li>-Xcomp：第一次使用就编译成本地代码</li><li>-Xmixed：混合模式</li></ul> </li><li> <p>XX参数（下一节）</p> </li></ul>\n<h2><a id=\"60_JVMXX_4196\"></a>60_JVM的XX参数之布尔类型</h2>\n<p>公式：<code>-XX:+ 或者 - 某个属性值</code>（+表示开启，-表示关闭）</p>\n<p>如何查看一个正在运行中的java程序，它的某个jvm参数是否开启？具体值是多少？</p>\n<ol><li><code>jps -l</code> 查看一个正在运行中的java程序，得到Java程序号。</li><li><code>jinfo -flag PrintGCDetails (Java程序号 )</code>查看它的某个jvm参数（如PrintGCDetails ）是否开启。</li><li><code>jinfo -flags (Java程序号 )</code>查看它的所有jvm参数</li></ol>\n<p>Case</p>\n<p>是否打印GC收集细节</p>\n<ul><li>-XX:-PrintGCDetails</li><li>-XX:+PrintGCDetails</li></ul>\n<p>是否使用串行垃圾回收器</p>\n<ul><li>-XX:-UseSerialGC</li><li>-XX:+UserSerialGC</li></ul>\n<h2><a id=\"61_JVMXX_4224\"></a>61_JVM的XX参数之设值类型</h2>\n<p>公式：<code>-XX:属性key=属性值value</code></p>\n<p>Case</p>\n<ul><li>-XX:MetaspaceSize=128m</li><li>-XX:MaxTenuringThreshold=15</li></ul>\n<h2><a id=\"62_JVMXXXmsXmx_4237\"></a>62_JVM的XX参数之XmsXmx坑题</h2>\n<p>两个经典参数：</p>\n<ul><li>-Xms等价于-XX:InitialHeapSize，初始大小内存，默认物理内存1/64</li><li>-Xmx等价于-XX:MaxHeapSize，最大分配内存，默认为物理内存1/4</li></ul>\n<h2><a id=\"63_JVM_4246\"></a>63_JVM盘点家底查看初始默认值</h2>\n<p><strong>查看初始默认参数值</strong></p>\n<p>-XX:+PrintFlagsInitial</p>\n<p>公式：<code>java -XX:+PrintFlagsInitial</code></p>\n<pre><code class=\"prism language-cmd\">C:\\Users\\abc&gt;java -XX:+PrintFlagsInitial\n[Global flags]\n      int ActiveProcessorCount                     = -1                                        {product} {default}\n    uintx AdaptiveSizeDecrementScaleFactor         = 4                                         {product} {default}\n    uintx AdaptiveSizeMajorGCDecayTimeScale        = 10                                        {product} {default}\n    uintx AdaptiveSizePolicyCollectionCostMargin   = 50                                        {product} {default}\n    uintx AdaptiveSizePolicyInitializingSteps      = 20                                        {product} {default}\n    uintx AdaptiveSizePolicyOutputInterval         = 0                                         {product} {default}\n    uintx AdaptiveSizePolicyWeight                 = 10                                        {product} {default}\n... \n</code></pre>\n<p><strong>查看修改更新参数值</strong></p>\n<p>-XX:+PrintFlagsFinal</p>\n<p>公式：<code>java -XX:+PrintFlagsFinal</code></p>\n<pre><code class=\"prism language-cmd\">C:\\Users\\abc&gt;java -XX:+PrintFlagsFinal\n...\n   size_t HeapBaseMinAddress                       = 2147483648                             {pd product} {default}\n     bool HeapDumpAfterFullGC                      = false                                  {manageable} {default}\n     bool HeapDumpBeforeFullGC                     = false                                  {manageable} {default}\n     bool HeapDumpOnOutOfMemoryError               = false                                  {manageable} {default}\n    ccstr HeapDumpPath                             =                                        {manageable} {default}\n    uintx HeapFirstMaximumCompactionCount          = 3                                         {product} {default}\n    uintx HeapMaximumCompactionInterval            = 20                                        {product} {default}\n    uintx HeapSearchSteps                          = 3                                         {product} {default}\n   size_t HeapSizePerGCThread                      = 43620760                                  {product} {default}\n     bool IgnoreEmptyClassPaths                    = false                                     {product} {default}\n     bool IgnoreUnrecognizedVMOptions              = false                                     {product} {default}\n    uintx IncreaseFirstTierCompileThresholdAt      = 50                                        {product} {default}\n     bool IncrementalInline                        = true                                   {C2 product} {default}\n   size_t InitialBootClassLoaderMetaspaceSize      = 4194304                                   {product} {default}\n    uintx InitialCodeCacheSize                     = 2555904                                {pd product} {default}\n   size_t InitialHeapSize                          := 268435456                                 {product} {ergonomic}\n...\n</code></pre>\n<p>=表示默认，:=表示修改过的。</p>\n<h2><a id=\"64_JVM_4301\"></a>64_JVM盘点家底查看修改变更值</h2>\n<p>PrintFlagsFinal举例，运行java命令的同时打印出参数</p>\n<p><code>java -XX:+PrintFlagsFinal -XX:MetaspaceSize=512m HelloWorld</code></p>\n<pre><code class=\"prism language-cmd\">...\n   size_t MetaspaceSize                            := 536870912                               {pd product} {default}\n...\n</code></pre>\n<p>打印命令行参数</p>\n<p>-XX:+PrintCommandLineFlags</p>\n<pre><code class=\"prism language-cmd\">C:\\Users\\abc&gt;java -XX:+PrintCommandLineFlags -version\n-XX:ConcGCThreads=2 -XX:G1ConcRefinementThreads=8 -XX:GCDrainStackTargetSize=64 -XX:InitialHeapSize=266613056 -XX:MarkStackSize=4\n194304 -XX:MaxHeapSize=4265808896 -XX:MinHeapSize=6815736 -XX:+PrintCommandLineFlags -XX:ReservedCodeCacheSize=251658240 -XX:+Seg\nmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC -XX:-UseLargePagesIndividualAllocation\nopenjdk version \"15.0.1\" 2020-10-20\nOpenJDK Runtime Environment (build 15.0.1+9-18)\nOpenJDK 64-Bit Server VM (build 15.0.1+9-18, mixed mode)\n</code></pre>\n<h2><a id=\"65__4331\"></a>65_堆内存初始大小快速复习</h2>\n<p>JDK 1.8之后将最初的永久代取消了，由元空间取代。</p>\n<p><img alt=\"\" src=\"image\\5799217d4beece00818129f315ac4dab.png\"/></p>\n<p>在Java8中，永久代已经被移除，被一个称为<strong>元空间</strong>的区域所取代。元空间的本质和永久代类似。</p>\n<p>元空间(Java8)与永久代(Java7)之间最大的区别在于：永久带使用的JVM的堆内存，但是Java8以后的<strong>元空间并不在虚拟机中而是使用本机物理内存</strong>。</p>\n<p>因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入native memory，字符串池和类的静态变量放入java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制，而由系统的实际可用空间来控制。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JVMMemorySizeDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 返回Java虚拟机中内存的总量</span>\n        <span class=\"token keyword\">long</span> totalMemory <span class=\"token operator\">=</span> Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">totalMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 返回Java虚拟机中试图使用的最大内存量</span>\n        <span class=\"token keyword\">long</span> maxMemory <span class=\"token operator\">=</span> Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">maxMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOTAL_MEMORY(-Xms): %d B, %.2f MB.\"</span><span class=\"token punctuation\">,</span> totalMemory<span class=\"token punctuation\">,</span> totalMemory <span class=\"token operator\">/</span> <span class=\"token number\">1024.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAX_MEMORY(-Xmx): %d B, %.2f MB.\"</span><span class=\"token punctuation\">,</span> maxMemory<span class=\"token punctuation\">,</span> maxMemory <span class=\"token operator\">/</span> <span class=\"token number\">1024.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>TOTAL_MEMORY(-Xms): 257425408 B, 245.50 MB.\nMAX_MEMORY(-Xmx): 3793747968 B, 3618.00 MB.\n</code></pre>\n<h2><a id=\"66_Xss_4375\"></a>66_常用基础参数栈内存Xss讲解</h2>\n<p>设置单个线程栈的大小，一般默认为512k~1024K</p>\n<p>等价于-XX:ThreadStackSize</p>\n<blockquote>\n<p><strong>-XX:ThreadStackSize=<em>size</em></strong></p>\n<p>Sets the thread stack size (in bytes). Append the letter <code>k</code> or <code>K</code> to indicate kilobytes, <code>m</code> or <code>M</code> to indicate megabytes, <code>g</code> or <code>G</code> to indicate gigabytes. The default value depends on virtual memory.</p>\n<p>The following examples show how to set the thread stack size to 1024 KB in different units:</p>\n<pre><code>-XX:ThreadStackSize=1m\n-XX:ThreadStackSize=1024k\n-XX:ThreadStackSize=1048576\n</code></pre>\n<p>This option is equivalent to <code>-Xss</code>.</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html#BGBCIEFC\">官方文档</a></p>\n</blockquote>\n<h2><a id=\"67_MetaspaceSize_4399\"></a>67_常用基础参数元空间MetaspaceSize讲解</h2>\n<p>-Xmn：设置年轻代大小</p>\n<p>-XX:MetaspaceSize 设置元空间大小</p>\n<p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：<strong>元空间并不在虚拟机中，而是使用本地内存</strong>。因此，默认情况下，元空间的大小仅受本地内存限制</p>\n<p>典型设置案例</p>\n<p>-Xms128m -Xmx4096m -Xss1024k -XX:MetaspaceSize=512m -XX:+PrintCommandLineFlags -XX:+PrintGCDetails-XX:+UseSerialGC</p>\n<h2><a id=\"68_PrintGCDetails_4417\"></a>68_常用基础参数PrintGCDetails回收前后对比讲解</h2>\n<p>-XX:+PrintGCDetails 输出详细GC收集日志信息</p>\n<p>设置参数 -Xms10m -Xmx10m -XX:+PrintGCDetails 运行以下程序</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintGCDetailsDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> byteArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>[GC (Allocation Failure) [PSYoungGen: 778K-&gt;480K(2560K)] 778K-&gt;608K(9728K), 0.0029909 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 480K-&gt;480K(2560K)] 608K-&gt;616K(9728K), 0.0007890 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 480K-&gt;0K(2560K)] [ParOldGen: 136K-&gt;518K(7168K)] 616K-&gt;518K(9728K), [Metaspace: 2644K-&gt;2644K(1056768K)], 0.0058272 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 518K-&gt;518K(9728K), 0.0002924 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] [ParOldGen: 518K-&gt;506K(7168K)] 518K-&gt;506K(9728K), [Metaspace: 2644K-&gt;2644K(1056768K)], 0.0056906 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] \nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat com.lun.jvm.PrintGCDetailsDemo.main(PrintGCDetailsDemo.java:9)\nHeap\n PSYoungGen      total 2560K, used 61K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 3% used [0x00000000ffd00000,0x00000000ffd0f748,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 7168K, used 506K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 7% used [0x00000000ff600000,0x00000000ff67ea58,0x00000000ffd00000)\n Metaspace       used 2676K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 285K, capacity 386K, committed 512K, reserved 1048576K\n\n</code></pre>\n<p><img alt=\"\" src=\"image\\0b2b715c3a4d62e238ea06f09b02e796.png\"/></p>\n<p><img alt=\"\" src=\"image\\14d0c3733742d375f6b4f15cd7ed48d7.png\"/></p>\n<h2><a id=\"69_SurvivorRatio_4471\"></a>69_常用基础参数SurvivorRatio讲解</h2>\n<p><img alt=\"\" src=\"image\\5799217d4beece00818129f315ac4dab.png\"/></p>\n<p>调节新生代中 eden 和 S0、S1的空间比例，默认为 -XX:SuriviorRatio=8，Eden:S0:S1 = 8:1:1</p>\n<p>假如设置成 -XX:SurvivorRatio=4，则为 Eden:S0:S1 = 4:1:1</p>\n<p>SurvivorRatio值就是设置eden区的比例占多少，S0和S1相同。</p>\n<blockquote>\n<p>ratio<br/> 英 [ˈreɪʃiəʊ] 美 [ˈreɪʃioʊ]<br/> n. 比率;比例</p>\n</blockquote>\n<h2><a id=\"70_NewRatio_4487\"></a>70_常用基础参数NewRatio讲解</h2>\n<p>配置年轻代new 和老年代old 在堆结构的占比</p>\n<p>默认：-XX:NewRatio=2 新生代占1，老年代2，年轻代占整个堆的1/3</p>\n<p>-XX:NewRatio=4：新生代占1，老年代占4，年轻代占整个堆的1/5，</p>\n<p>NewRadio值就是设置老年代的占比，剩下的1个新生代。</p>\n<p>新生代特别小，会造成频繁的进行GC收集。</p>\n<h2><a id=\"71_MaxTenuringThreshold_4501\"></a>71_常用基础参数MaxTenuringThreshold讲解</h2>\n<p>晋升到老年代的对象年龄。</p>\n<p>SurvivorTo和SurvivorFrom互换，原SurvivorTo成为下一次GC时的SurvivorFrom区，部分对象会在From和To区域中复制来复制去，如此交换15次（由JVM参数MaxTenuringThreshold决定，这个参数默认为15），最终如果还是存活，就存入老年代。</p>\n<p>这里就是调整这个次数的，默认是15，并且设置的值 在 0~15之间。</p>\n<p>-XX:MaxTenuringThreshold=0：设置垃圾最大年龄。如果设置为0的话，则年轻对象不经过Survivor区，直接进入老年代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大的值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概念。</p>\n<blockquote>\n<p>tenure</p>\n<p>英 [ˈtenjə®] 美 [ˈtenjər]</p>\n<p>n. 任期；占有 vt. 授予…终身职位</p>\n</blockquote>\n<blockquote>\n<p>threshold<br/> 英 [ˈθreʃhəʊld] 美 [ˈθreʃhoʊld]<br/> n. 门槛;门口;阈;界;起始点;开端;起点;入门</p>\n</blockquote>\n<h2><a id=\"72_Reference_4525\"></a>72_强引用Reference</h2>\n<p>Reference类以及继承派生的类</p>\n<p><img alt=\"\" src=\"image\\ca4589e319fe6b89eeef7010467fb74d.png\"/></p>\n<p>当内存不足，JVM开始垃圾回收，对于强引用的对象，就算是出现了OOM也不会对该对象进行回收，死都不收。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 这样定义的默认就是强应用</span>\nObject obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>强引用是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。在Java中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，即使该对象以后永远都不会被用到JVM也不会回收。因此强引用是造成Java内存泄漏的主要原因之一。</p>\n<p>对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null一般认为就是可以被垃圾收集的了(当然具体回收时机还是要看垃圾收集策略)。</p>\n<h2><a id=\"73_SoftReference_4546\"></a>73_软引用SoftReference</h2>\n<p>软引用是一种相对强引用弱化了一些的引用，需要用java.lang.ref.SoftReference类来实现，可以让对象豁免一些垃圾收集。</p>\n<p>对于只有软引用的对象来说，</p>\n<ul><li>当系统内存充足时它不会被回收，</li><li>当系统内存不足时它会被回收。</li></ul>\n<p>软引用通常用在对内存敏感的程序中，比如高速缓存就有用到软引用，<strong>内存够用的时候就保留，不够用就回收</strong>!</p>\n<p>当内存充足的时候，软引用不用回收：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SoftReferenceDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/**\n     * 内存够用的时候\n     * -XX:+PrintGCDetails\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">softRefMemoryEnough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 创建一个强应用</span>\n        Object o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建一个软引用</span>\n        SoftReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span> softReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>softReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        o1 <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 手动GC</span>\n        System<span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>softReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * JVM配置，故意产生大对象并配置小的内存，让它的内存不够用了导致OOM，看软引用的回收情况\n     * -Xms5m -Xmx5m -XX:+PrintGCDetails\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">softRefMemoryNoEnough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建一个强应用</span>\n        Object o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建一个软引用</span>\n        SoftReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span> softReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>softReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        o1 <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 模拟OOM自动GC</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 创建30M的大对象</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>softReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">softRefMemoryEnough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//softRefMemoryNoEnough();</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>内存充足输出结果：</p>\n<pre><code>java.lang.Object@15db9742\njava.lang.Object@15db9742\n[GC (System.gc()) [PSYoungGen: 2621K-&gt;728K(76288K)] 2621K-&gt;736K(251392K), 0.0011732 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 728K-&gt;0K(76288K)] [ParOldGen: 8K-&gt;519K(175104K)] 736K-&gt;519K(251392K), [Metaspace: 2646K-&gt;2646K(1056768K)], 0.0048782 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \nnull\njava.lang.Object@15db9742\nHeap\n PSYoungGen      total 76288K, used 1966K [0x000000076b380000, 0x0000000770880000, 0x00000007c0000000)\n  eden space 65536K, 3% used [0x000000076b380000,0x000000076b56ba70,0x000000076f380000)\n  from space 10752K, 0% used [0x000000076f380000,0x000000076f380000,0x000000076fe00000)\n  to   space 10752K, 0% used [0x000000076fe00000,0x000000076fe00000,0x0000000770880000)\n ParOldGen       total 175104K, used 519K [0x00000006c1a00000, 0x00000006cc500000, 0x000000076b380000)\n  object space 175104K, 0% used [0x00000006c1a00000,0x00000006c1a81e88,0x00000006cc500000)\n Metaspace       used 2653K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 282K, capacity 386K, committed 512K, reserved 1048576K\n\n</code></pre>\n<p>内存不充足，软引用关联对象会被回收：</p>\n<pre><code>========================\njava.lang.Object@15db9742\njava.lang.Object@15db9742\n[GC (Allocation Failure) [PSYoungGen: 756K-&gt;496K(1536K)] 756K-&gt;600K(5632K), 0.0009017 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 496K-&gt;480K(1536K)] 600K-&gt;624K(5632K), 0.0006772 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 480K-&gt;0K(1536K)] [ParOldGen: 144K-&gt;519K(4096K)] 624K-&gt;519K(5632K), [Metaspace: 2646K-&gt;2646K(1056768K)], 0.0055489 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(1536K)] 519K-&gt;519K(5632K), 0.0002674 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(1536K)] [ParOldGen: 519K-&gt;507K(4096K)] 519K-&gt;507K(5632K), [Metaspace: 2646K-&gt;2646K(1056768K)], 0.0052951 secs] [Times: user=0.11 sys=0.00, real=0.01 secs] \nnull\nnull\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat com.lun.jvm.SoftReferenceDemo.softRefMemoryNotEnough(SoftReferenceDemo.java:44)\n\tat com.lun.jvm.SoftReferenceDemo.main(SoftReferenceDemo.java:58)\nHeap\n PSYoungGen      total 1536K, used 30K [0x00000000ffe00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 1024K, 2% used [0x00000000ffe00000,0x00000000ffe07ac8,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 4096K, used 507K [0x00000000ffa00000, 0x00000000ffe00000, 0x00000000ffe00000)\n  object space 4096K, 12% used [0x00000000ffa00000,0x00000000ffa7edd0,0x00000000ffe00000)\n Metaspace       used 2678K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 285K, capacity 386K, committed 512K, reserved 1048576K\n\n</code></pre>\n<p>回收后，内存依然不足的话，还是会抛异常。</p>\n<h2><a id=\"74_WeakReference_4680\"></a>74_弱引用WeakReference</h2>\n<p>弱引用需要用java.lang.ref.WeakReference类来实现，它比软引用的生存期更短，</p>\n<p>对于只有弱引用的对象来说，<strong>只要垃圾回收机制</strong>一运行不管JVM的内存空间是否足够，都会回收该对象占用的内存。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>WeakReference<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeakReferenceDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Object o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        WeakReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span> weakReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>weakReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o1 <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>weakReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>java.lang.Object@15db9742\njava.lang.Object@15db9742\nnull\nnull\n</code></pre>\n<h2><a id=\"75__4714\"></a>75_软引用和弱引用的适用场景</h2>\n<p>场景：假如有一个应用需要读取大量的本地图片</p>\n<ul><li>如果每次读取图片都从硬盘读取则会严重影响性能</li><li>如果一次性全部加载到内存中，又可能造成内存溢出</li></ul>\n<p>此时使用软引用可以解决这个问题。</p>\n<p>设计思路：使用HashMap来保存图片的路径和相应图片对象关联的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占的空间，从而有效地避免了OOM的问题</p>\n<pre><code class=\"prism language-java\">Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> SoftReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span><span class=\"token operator\">&gt;</span> imageCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> SoftReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Bitmap<span class=\"token punctuation\">&gt;</span></span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"76_WeakHashMap_4731\"></a>76_WeakHashMap案例演示和解析</h2>\n<blockquote>\n<p>Hash table based implementation of the <code>Map</code> interface, with <em>weak keys</em>. An entry in a <code>WeakHashMap</code> will automatically be removed when its key is no longer in ordinary use. More precisely, the presence of a mapping for a given key will not prevent the key from being discarded by the garbage collector, that is, made finalizable, finalized, and then reclaimed. When a key has been discarded its entry is effectively removed from the map, so this class behaves somewhat differently from other <code>Map</code> implementations.</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html\">link</a></p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashMap<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>WeakHashMap<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeakHashMapDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">myHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">myWeakHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Integer key <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String value <span class=\"token operator\">=</span> <span class=\"token string\">\"HashMap\"</span><span class=\"token punctuation\">;</span>\n\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        key <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myWeakHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakHashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Integer key <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String value <span class=\"token operator\">=</span> <span class=\"token string\">\"WeakHashMap\"</span><span class=\"token punctuation\">;</span>\n\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        key <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>{1=HashMap}\n{1=HashMap}\n==========\n{1=WeakHashMap}\n{}\n</code></pre>\n<h2><a id=\"77__4795\"></a>77_虚引用简介</h2>\n<p>虚引用需要java.lang.ref.PhantomReference类来实现。</p>\n<p>顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。</p>\n<p>如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收，它不能单独使用也不能通过它访问对象，虚引用必须和引用队列(ReferenceQueue)联合使用。</p>\n<p><strong>虚引用的主要作用是跟踪对象被垃圾回收的状态</strong>。仅仅是提供了一种确保对象被finalize以后，做某些事情的机制。</p>\n<p>PhantomReference的gei方法总是返回null，因此无法访问对应的引用对象。其意义在于说明一个对象已经进入finalization阶段，可以被gc回收，用来实现比fihalization机制更灵活的回收操作。</p>\n<p>换句话说，设置虚引用关联的唯一目的，就是在这个对象被收集器回收的时候收到一个系统通知或者后续添加进一步的处理。Java技术允许使用finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。</p>\n<h2><a id=\"78_ReferenceQueue_4811\"></a>78_ReferenceQueue引用队列介</h2>\n<blockquote>\n<p>Reference queues, to which registered reference objects are appended by the garbage collector after the appropriate reachability changes are detected.</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/ref/ReferenceQueue.html\">link</a></p>\n</blockquote>\n<p>回收前需要被引用的，用队列保存下。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>ReferenceQueue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>WeakReference<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReferenceQueueDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Object o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 创建引用队列</span>\n        ReferenceQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span> referenceQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 创建一个弱引用</span>\n        WeakReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span> weakReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> referenceQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>weakReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 取队列中的内容</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>referenceQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        o1 <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行GC操作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>weakReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 取队列中的内容</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>referenceQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>java.lang.Object@15db9742\njava.lang.Object@15db9742\nnull\n==================\n执行GC操作\nnull\nnull\njava.lang.ref.WeakReference@6d06d69c\n</code></pre>\n<h2><a id=\"79_PhantomReference_4875\"></a>79_虚引用PhantomReference</h2>\n<p>Java提供了4种引用类型，在垃圾回收的时候，都有自己各自的特点。</p>\n<p>ReferenceQueue是用来配合引用工作的，没有ReferenceQueue一样可以运行。</p>\n<p>创建引用的时候可以指定关联的队列，当Gc释放对象内存的时候，会将引用加入到引用队列，如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动这相当于是一种通知机制。</p>\n<p>当关联的引用队列中有数据的时候，意味着引用指向的堆内存中的对象被回收。通过这种方式，JVW允许我们在对象被销毁后，做一些我们自己想做的事情。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>PhantomReference<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>ReferenceQueue<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PhantomReferenceDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{<!-- --></span>\n\t\tObject o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tReferenceQueue<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span> referenceQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tPhantomReference<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">&gt;</span></span> phantomReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhantomReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> referenceQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>phantomReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>referenceQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\to1 <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tThread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\t\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>phantomReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>referenceQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>java.lang.Object@15db9742\nnull\nnull\n==================\nnull\nnull\njava.lang.ref.PhantomReference@6d06d69c\n</code></pre>\n<h2><a id=\"80_GCRoots_4928\"></a>80_GCRoots和四大引用小总结</h2>\n<p><img alt=\"\" src=\"image\\cd9be030204769e861961629a9341191.png\"/></p>\n<h2><a id=\"81_SOFEStackOverflowError_4934\"></a>81_SOFE之StackOverflowError</h2>\n<p>JVM中常见的两种错误</p>\n<ul><li> <p>StackoverFlowError</p>\n<ul><li>java.lang.StackOverflowError</li></ul> </li><li> <p>OutofMemoryError</p>\n<ul><li>java.lang.OutOfMemoryError：java heap space</li><li>java.lang.OutOfMemoryError：GC overhead limit exceeeded</li><li>java.lang.OutOfMemoryError：Direct buffer memory</li><li>java.lang.OutOfMemoryError：unable to create new native thread</li><li>java.lang.OutOfMemoryError：Metaspace</li></ul> </li></ul>\n<p><img alt=\"\" src=\"image\\562efa8b207eed7a1e17aed1f7dc101c.png\"/></p>\n<p>StackOverflowError的展现</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StackOverflowErrorDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Exception in thread \"main\" java.lang.StackOverflowError\n\tat com.lun.jvm.StackOverflowErrorDemo.main(StackOverflowErrorDemo.java:6)\n\tat com.lun.jvm.StackOverflowErrorDemo.main(StackOverflowErrorDemo.java:6)\n\tat com.lun.jvm.StackOverflowErrorDemo.main(StackOverflowErrorDemo.java:6)\n\t...\n</code></pre>\n<h2><a id=\"82_OOMJava_heap_space_4978\"></a>82_OOM之Java heap space</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OOMEJavaHeapSpaceDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">/**\n\t * \n\t * -Xms10m -Xmx10m\n\t * \n\t * @param args\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">80</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat com.lun.jvm.OOMEJavaHeapSpaceDemo.main(OOMEJavaHeapSpaceDemo.java:6)\n</code></pre>\n<h2><a id=\"83_OOMGC_overhead_limit_exceeded_5005\"></a>83_OOM之GC overhead limit exceeded</h2>\n<blockquote>\n<p>GC overhead limit exceeded</p>\n<p>超出GC开销限制</p>\n</blockquote>\n<p>GC回收时间过长时会抛出OutOfMemroyError。过长的定义是，超过98%的时间用来做GC并且回收了不到2%的堆内存，连续多次GC 都只回收了不到2%的极端情况下才会抛出。</p>\n<p>假如不抛出GC overhead limit错误会发生什么情况呢？那就是GC清理的这么点内存很快会再次填满，迫使cc再次执行。这样就形成恶性循环，CPU使用率一直是100%，而Gc却没有任何成果。</p>\n<p><img alt=\"\" src=\"image\\fc9fbf77d929b509b197f35139d7868d.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OOMEGCOverheadLimitExceededDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/**\n     * \n     * -Xms10m -Xmx10m -XX:MaxDirectMemorySize=5m\n     * \n     * @param args\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        List<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***************i:\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果</p>\n<pre><code>[GC (Allocation Failure) [PSYoungGen: 2048K-&gt;498K(2560K)] 2048K-&gt;1658K(9728K), 0.0033090 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 2323K-&gt;489K(2560K)] 3483K-&gt;3305K(9728K), 0.0020911 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 2537K-&gt;496K(2560K)] 5353K-&gt;4864K(9728K), 0.0025591 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 2410K-&gt;512K(2560K)] 6779K-&gt;6872K(9728K), 0.0058689 secs] [Times: user=0.09 sys=0.00, real=0.01 secs] \n[Full GC (Ergonomics) [PSYoungGen: 512K-&gt;0K(2560K)] [ParOldGen: 6360K-&gt;6694K(7168K)] 6872K-&gt;6694K(9728K), [Metaspace: 2651K-&gt;2651K(1056768K)], 0.0894928 secs] [Times: user=0.42 sys=0.00, real=0.09 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2048K-&gt;1421K(2560K)] [ParOldGen: 6694K-&gt;6902K(7168K)] 8742K-&gt;8324K(9728K), [Metaspace: 2651K-&gt;2651K(1056768K)], 0.0514932 secs] [Times: user=0.34 sys=0.00, real=0.05 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2048K-&gt;2047K(2560K)] [ParOldGen: 6902K-&gt;6902K(7168K)] 8950K-&gt;8950K(9728K), [Metaspace: 2651K-&gt;2651K(1056768K)], 0.0381615 secs] [Times: user=0.13 sys=0.00, real=0.04 secs] \n...省略89行...\n[Full GC (Ergonomics) [PSYoungGen: 2047K-&gt;2047K(2560K)] [ParOldGen: 7044K-&gt;7044K(7168K)] 9092K-&gt;9092K(9728K), [Metaspace: 2651K-&gt;2651K(1056768K)], 0.0360935 secs] [Times: user=0.25 sys=0.00, real=0.04 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2047K-&gt;2047K(2560K)] [ParOldGen: 7046K-&gt;7046K(7168K)] 9094K-&gt;9094K(9728K), [Metaspace: 2651K-&gt;2651K(1056768K)], 0.0360458 secs] [Times: user=0.38 sys=0.00, real=0.04 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2047K-&gt;2047K(2560K)] [ParOldGen: 7048K-&gt;7048K(7168K)] 9096K-&gt;9096K(9728K), [Metaspace: 2651K-&gt;2651K(1056768K)], 0.0353033 secs] [Times: user=0.11 sys=0.00, real=0.04 secs] \n***************i:147041\n[Full GC (Ergonomics) [PSYoungGen: 2047K-&gt;2047K(2560K)] [ParOldGen: 7050K-&gt;7048K(7168K)] 9098K-&gt;9096K(9728K), [Metaspace: 2670K-&gt;2670K(1056768K)], 0.0371397 secs] [Times: user=0.22 sys=0.00, real=0.04 secs] \njava.lang.OutOfMemoryError: GC overhead limit exceeded\n[Full GC (Ergonomics) \tat java.lang.Integer.toString(Integer.java:401)\n[PSYoungGen: 2047K-&gt;2047K(2560K)] [ParOldGen: 7051K-&gt;7050K(7168K)] 9099K-&gt;9097K(9728K), [Metaspace: 2676K-&gt;2676K(1056768K)], 0.0434184 secs] [Times: user=0.38 sys=0.00, real=0.04 secs] \n\tat java.lang.String.valueOf(String.java:3099)\n\tat com.lun.jvm.OOMEGCOverheadLimitExceededDemo.main(OOMEGCOverheadLimitExceededDemo.java:19)\nException in thread \"main\" java.lang.OutOfMemoryError: GC overhead limit exceeded\n[Full GC (Ergonomics) [PSYoungGen: 2047K-&gt;0K(2560K)] [ParOldGen: 7054K-&gt;513K(7168K)] 9102K-&gt;513K(9728K), [Metaspace: 2677K-&gt;2677K(1056768K)], 0.0056578 secs] [Times: user=0.11 sys=0.00, real=0.01 secs] \n\tat java.lang.Integer.toString(Integer.java:401)\n\tat java.lang.String.valueOf(String.java:3099)\n\tat com.lun.jvm.OOMEGCOverheadLimitExceededDemo.main(OOMEGCOverheadLimitExceededDemo.java:19)\nHeap\n PSYoungGen      total 2560K, used 46K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 2% used [0x00000000ffd00000,0x00000000ffd0bb90,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n ParOldGen       total 7168K, used 513K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 7% used [0x00000000ff600000,0x00000000ff6807f0,0x00000000ffd00000)\n Metaspace       used 2683K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 285K, capacity 386K, committed 512K, reserved 1048576K\n\n</code></pre>\n<h2><a id=\"84_OOMDirect_buffer_memory_5088\"></a>84_OOM之Direct buffer memory</h2>\n<p>导致原因：</p>\n<p>写NIO程序经常使用ByteBuffer来读取或者写入数据，这是一种基于通道(Channel)与缓冲区(Buffer)的IO方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避兔了在Java堆和Native堆中来回复制数据。</p>\n<ul><li>ByteBuffer.allocate(capability) 第一种方式是分配VM堆内存，属于GC管辖范围，由于需要拷贝所以速度相对较慢。</li><li>ByteBuffer.allocateDirect(capability) 第二种方式是分配OS本地内存，不属于GC管辖范围，由于不需要内存拷贝所以速度相对较快。</li></ul>\n<p>但如果不断分配本地内存，堆内存很少使用，那么JV就不需要执行GC，DirectByteBuffer对象们就不会被回收，这时候堆内存充足，但本地内存可能已经使用光了，再次尝试分配本地内存就会出现OutOfMemoryError，那程序就直接崩溃了。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>ByteBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>TimeUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OOMEDirectBufferMemoryDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">/**\n\t * -Xms5m -Xmx5m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m\n\t * \n\t * @param args\n\t * @throws InterruptedException\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{<!-- --></span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"配置的maxDirectMemory: %.2f MB\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// </span>\n\t\t\t\tsun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>VM<span class=\"token punctuation\">.</span><span class=\"token function\">maxDirectMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tTimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tByteBuffer bb <span class=\"token operator\">=</span> ByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocateDirect</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>[GC (Allocation Failure) [PSYoungGen: 1024K-&gt;504K(1536K)] 1024K-&gt;772K(5632K), 0.0014568 secs] [Times: user=0.09 sys=0.00, real=0.00 secs] \n配置的maxDirectMemory: 5.00 MB\n[GC (System.gc()) [PSYoungGen: 622K-&gt;504K(1536K)] 890K-&gt;820K(5632K), 0.0009753 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 504K-&gt;0K(1536K)] [ParOldGen: 316K-&gt;725K(4096K)] 820K-&gt;725K(5632K), [Metaspace: 3477K-&gt;3477K(1056768K)], 0.0072268 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nException in thread \"main\" Heap\n PSYoungGen      total 1536K, used 40K [0x00000000ffe00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 1024K, 4% used [0x00000000ffe00000,0x00000000ffe0a3e0,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n ParOldGen       total 4096K, used 725K [0x00000000ffa00000, 0x00000000ffe00000, 0x00000000ffe00000)\n  object space 4096K, 17% used [0x00000000ffa00000,0x00000000ffab5660,0x00000000ffe00000)\n Metaspace       used 3508K, capacity 4566K, committed 4864K, reserved 1056768K\n  class space    used 391K, capacity 394K, committed 512K, reserved 1048576K\njava.lang.OutOfMemoryError: Direct buffer memory\n\tat java.nio.Bits.reserveMemory(Bits.java:694)\n\tat java.nio.DirectByteBuffer.&lt;init&gt;(DirectByteBuffer.java:123)\n\tat java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)\n\tat com.lun.jvm.OOMEDirectBufferMemoryDemo.main(OOMEDirectBufferMemoryDemo.java:20)\n\n</code></pre>\n<h2><a id=\"85_OOMunable_to_create_new_native_thread_5148\"></a>85_OOM之unable to create new native thread故障演示</h2>\n<p>不能够创建更多的新的线程了，也就是说创建线程的上限达到了</p>\n<p>高并发请求服务器时，经常会出现异常<code>java.lang.OutOfMemoryError:unable to create new native thread</code>，准确说该native thread异常与对应的平台有关</p>\n<p>导致原因：</p>\n<ul><li>应用创建了太多线程，一个应用进程创建多个线程，超过系统承载极限</li><li>服务器并不允许你的应用程序创建这么多线程，linux系统默认运行单个进程可以创建的线程为1024个，如果应用创建超过这个数量，就会报 <code>java.lang.OutOfMemoryError:unable to create new native thread</code></li></ul>\n<p>解决方法：</p>\n<ol><li>想办法降低你应用程序创建线程的数量，分析应用是否真的需要创建这么多线程，如果不是，改代码将线程数降到最低</li><li>对于有的应用，确实需要创建很多线程，远超过linux系统默认1024个线程限制，可以通过修改Linux服务器配置，扩大linux默认限制</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OOMEUnableCreateNewThreadDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"************** i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面程序在Linux OS（CentOS）运行，会出现下列的错误，线程数大概在900多个</p>\n<pre><code>Exception in thread \"main\" java.lang.OutOfMemoryError: unable to cerate new native thread\n</code></pre>\n<h2><a id=\"86_OOMunable_to_create_new_native_thread_5191\"></a>86_OOM之unable to create new native thread上限调整</h2>\n<p>非root用户登录Linux系统（CentOS）测试</p>\n<p>服务器级别调参调优</p>\n<p>查看系统线程限制数目</p>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">ulimit</span> -u\n</code></pre>\n<p>修改系统线程限制数目</p>\n<pre><code>vim /etc/security/limits.d/90-nproc.conf\n</code></pre>\n<p>打开后发现除了root，其他账户都限制在1024个</p>\n<p><img alt=\"\" src=\"image\\c27a569c9d4b5f2e46933711030866b1.png\"/></p>\n<p>假如我们想要张三这个用卢运行，希望他生成的线程多一些，我们可以如下配置</p>\n<p><img alt=\"\" src=\"image\\1ca76a04c6b892bc091b6f3887e613f6.png\"/></p>\n<h2><a id=\"87_OOMMetaspace_5229\"></a>87_OOM之Metaspace</h2>\n<p>使用java -XX:+PrintFlagsInitial命令查看本机的初始化参数，-XX:MetaspaceSize为21810376B（大约20.8M）</p>\n<p>Java 8及之后的版本使用Metaspace来替代永久代。</p>\n<p>Metaspace是方法区在Hotspot 中的实现，它与持久代最大的区别在于：Metaspace并不在虚拟机内存中而是使用本地内存也即在Java8中, classe metadata(the virtual machines internal presentation of Java class)，被存储在叫做Metaspace native memory。</p>\n<p>永久代（Java8后被原空向Metaspace取代了）存放了以下信息：</p>\n<ul><li>虚拟机加载的类信息</li><li>常量池</li><li>静态变量</li><li>即时编译后的代码</li></ul>\n<p>模拟Metaspace空间溢出，我们借助CGLib直接操作字节码运行时不断生成类往元空间灌，类占据的空间总是会超过Metaspace指定的空间大小的。</p>\n<p>首先添加CGLib依赖</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>cglib<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>cglib<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.2.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> net<span class=\"token punctuation\">.</span>sf<span class=\"token punctuation\">.</span>cglib<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">.</span>Enhancer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> net<span class=\"token punctuation\">.</span>sf<span class=\"token punctuation\">.</span>cglib<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">.</span>MethodInterceptor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> net<span class=\"token punctuation\">.</span>sf<span class=\"token punctuation\">.</span>cglib<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">.</span>MethodProxy<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OOMEMetaspaceDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 静态类</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OOMObject</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m\n     * \n     * @param args\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 模拟计数多少次以后发生异常</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 使用Spring的动态字节码技术</span>\n                Enhancer enhancer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setSuperclass</span><span class=\"token punctuation\">(</span>OOMObject<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setUseCache</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> Object <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span>Object o<span class=\"token punctuation\">,</span> Method method<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects<span class=\"token punctuation\">,</span> MethodProxy methodProxy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Throwable <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">return</span> methodProxy<span class=\"token punctuation\">.</span><span class=\"token function\">invokeSuper</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发生异常的次数:\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果</p>\n<pre><code>发生异常的次数:569\njava.lang.OutOfMemoryError: Metaspace\n\tat net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:348)\n\tat net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:492)\n\tat net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:117)\n\tat net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:294)\n\tat net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:480)\n\tat net.sf.cglib.proxy.Enhancer.create(Enhancer.java:305)\n\tat com.lun.jvm.OOMEMetaspaceDemo.main(OOMEMetaspaceDemo.java:37)\n</code></pre>\n<h2><a id=\"88__5322\"></a>88_垃圾收集器回收种类</h2>\n<p>GC算法(引用计数/复制/标清/标整)是内存回收的方法论，垃圾收集器就是算法落地实现。</p>\n<p>因为目前为止还没有完美的收集器出现，更加没有万能的收集器，只是针对具体应用最合适的收集器，进行分代收集</p>\n<p>4种主要垃圾收集器</p>\n<ul><li>Serial</li><li>Parallel</li><li>CMS</li><li>G1</li></ul>\n<p><img alt=\"\" src=\"image\\66a41f86a94641626e78e1278b7b2de0.png\"/></p>\n<h2><a id=\"89_G1_5339\"></a>89_串行并行并发G1四大垃圾回收方式</h2>\n<ul><li>串行垃级回收器(Serial) - 它为单线程环境设计且值使用一个线程进行垃圾收集，会暂停所有的用户线程，只有当垃圾回收完成时，才会重新唤醒主线程继续执行。所以不适合服务器环境。</li><li>并行垃圾回收器(Parallel) - 多个垃圾收集线程并行工作，此时用户线程<strong>也是阻塞的</strong>，适用于科学计算 / 大数据处理等弱交互场景，也就是说Serial 和 Parallel其实是类似的，不过是多了几个线程进行垃圾收集，但是主线程都会被暂停，但是并行垃圾收集器处理时间，肯定比串行的垃圾收集器要更短。</li><li>并发垃圾回收器(CMS) - 用户线程和垃圾收集线程同时执行（不一定是并行，可能是交替执行），不需要停顿用户线程，互联网公司都在使用，适用于响应时间有要求的场景。</li><li>G1垃圾回收器 - G1垃圾回收器将堆内存分割成不同的区域然后并发的对其进行垃圾回收。</li><li>ZGC（Java 11的，了解）</li></ul>\n<p>串行，并行，并发GC小总结（G1稍后）</p>\n<p><img alt=\"\" src=\"image\\35b6e31d8ca498dd287e890bc0f362ea.png\"/></p>\n<h2><a id=\"90__5355\"></a>90_如何查看默认的垃圾收集器</h2>\n<pre><code>java -XX:+PrintCommandLineFlags -version\n</code></pre>\n<p>输出结果</p>\n<pre><code class=\"prism language-cmd\">C:\\Users\\abc&gt;java -XX:+PrintCommandLineFlags -version\n-XX:InitialHeapSize=266613056 -XX:MaxHeapSize=4265808896 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC\njava version \"1.8.0_251\"\nJava(TM) SE Runtime Environment (build 1.8.0_251-b08)\nJava HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)\n</code></pre>\n<p>从结果看到-XX:+UseParallelGC，也就是说默认的垃圾收集器是并行垃圾回收器。</p>\n<p>或者</p>\n<pre><code>jps -l\n</code></pre>\n<p>得出Java程序号</p>\n<pre><code>jinfo -flags (Java程序号)\n</code></pre>\n<h2><a id=\"91_JVM_5389\"></a>91_JVM默认的垃圾收集器有哪些</h2>\n<p>Java中一共有7大垃圾收集器</p>\n<ul><li> <p>年轻代GC</p>\n<ul><li>UserSerialGC：串行垃圾收集器</li><li>UserParallelGC：并行垃圾收集器</li><li>UseParNewGC：年轻代的并行垃圾回收器</li></ul> </li><li> <p>老年代GC</p>\n<ul><li>UserSerialOldGC：串行老年代垃圾收集器（已经被移除）</li><li>UseParallelOldGC：老年代的并行垃圾回收器</li><li>UseConcMarkSweepGC：（CMS）并发标记清除</li></ul> </li><li> <p>老嫩通吃</p>\n<ul><li>UseG1GC：G1垃圾收集器</li></ul> </li></ul>\n<h2><a id=\"92_GC7_5405\"></a>92_GC之7大垃圾收集器概述</h2>\n<p>垃圾收集器就来具体实现这些GC算法并实现内存回收。</p>\n<p>不同厂商、不同版本的虚拟机实现差别很大，HotSpot中包含的收集器如下图所示：</p>\n<p><img alt=\"\" src=\"image\\ea9a1bd9934ea5678ca95d6d1365532e.png\"/></p>\n<p>新生代</p>\n<ul><li> <p>串行GC(Serial)/(Serial Copying)</p> </li><li> <p>并行GC(ParNew)</p> </li><li> <p>并行回收GC(Parallel)/(Parallel Scavenge)</p> </li></ul>\n<h2><a id=\"93_GC_5423\"></a>93_GC之约定参数说明</h2>\n<ul><li>DefNew：Default New Generation</li><li>Tenured：Old</li><li>ParNew：Parallel New Generation</li><li>PSYoungGen：Parallel Scavenge</li><li>ParOldGen：Parallel Old Generation</li></ul>\n<p>Server/Client模式分别是什么意思？</p>\n<ul><li> <p>使用范围：一般使用Server模式，Client模式基本不会使用</p> </li><li> <p>操作系统</p>\n<ul><li>32位的Window操作系统，不论硬件如何都默认使用Client的JVM模式</li><li>32位的其它操作系统，2G内存同时有2个cpu以上用Server模式，低于该配置还是Client模式</li><li>64位只有Server模式</li></ul> </li></ul>\n<pre><code>C:\\Users\\abc&gt;java -version\njava version \"1.8.0_251\"\nJava(TM) SE Runtime Environment (build 1.8.0_251-b08)\nJava HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)\n</code></pre>\n<h2><a id=\"94_GCSerial_5451\"></a>94_GC之Serial收集器</h2>\n<blockquote>\n<p>serial<br/> 英 [ˈsɪəriəl] 美 [ˈsɪriəl]<br/> n. 电视连续剧;广播连续剧;杂志连载小说<br/> adj. 顺序排列的;排成系列的;连续的;多次的;以连续剧形式播出的;连载的</p>\n</blockquote>\n<p>一句话：一个单线程的收集器，在进行垃圾收集时候，必须暂停其他所有的工作线程直到它收集结束。</p>\n<p><img alt=\"\" src=\"image\\a2f9de5e9b485247a7daa7b343b70264.png\"/></p>\n<p>STW: Stop The World</p>\n<p>串行收集器是最古老，最稳定以及效率高的收集器，只使用一个线程去回收但其在进行垃圾收集过程中可能会产生较长的停顿（Stop-The-World”状态)。虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限定单个CPU环境来说，<strong>没有线程交互的开销可以获得最高的单线程垃圾收集效率</strong>，因此Serial垃圾收集器依然是java虚拟机运行在Client模式下默认的新生代垃圾收集器。</p>\n<p>对应JVM参数是：-XX:+UseSerialGC</p>\n<p>开启后会使用：Serial(Young区用) + Serial Old(Old区用)的收集器组合</p>\n<p>表示：新生代、老年代都会使用串行回收收集器，新生代使用复制算法，老年代使用标记-整理算法</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GCDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\tRandom rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tString str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tstr <span class=\"token operator\">+=</span> str <span class=\"token operator\">+</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>VM参数：（启用UseSerialGC）</p>\n<pre><code>-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:+PrintCommandLineFlags -XX:+UseSerialGC\n</code></pre>\n<p>输出结果：</p>\n<pre><code>-XX:InitialHeapSize=10485760 -XX:MaxHeapSize=10485760 -XX:+PrintCommandLineFlags -XX:+PrintGCDetails -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseSerialGC \n[GC (Allocation Failure) [DefNew: 2346K-&gt;320K(3072K), 0.0012956 secs] 2346K-&gt;1030K(9920K), 0.0013536 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [DefNew: 2888K-&gt;0K(3072K), 0.0013692 secs] 3598K-&gt;2539K(9920K), 0.0014059 secs] [Times: user=0.02 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [DefNew: 2065K-&gt;0K(3072K), 0.0011613 secs] 4604K-&gt;4550K(9920K), 0.0011946 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [DefNew: 2056K-&gt;0K(3072K), 0.0010394 secs] 6606K-&gt;6562K(9920K), 0.0010808 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [DefNew: 2011K-&gt;2011K(3072K), 0.0000124 secs][Tenured: 6562K-&gt;2537K(6848K), 0.0021691 secs] 8574K-&gt;2537K(9920K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0024399 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [DefNew: 2059K-&gt;2059K(3072K), 0.0000291 secs][Tenured: 6561K-&gt;6561K(6848K), 0.0012330 secs] 8620K-&gt;6561K(9920K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0012888 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [Tenured: 6561K-&gt;6547K(6848K), 0.0017784 secs] 6561K-&gt;6547K(9920K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0018111 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \njava.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOfRange(Arrays.java:3664)\n\tat java.lang.String.&lt;init&gt;(String.java:207)\n\tat java.lang.StringBuilder.toString(StringBuilder.java:407)\n\tat com.lun.jvm.GCDemo.main(GCDemo.java:23)\nHeap\n def new generation   total 3072K, used 105K [0x00000000ff600000, 0x00000000ff950000, 0x00000000ff950000)\n  eden space 2752K,   3% used [0x00000000ff600000, 0x00000000ff61a7c8, 0x00000000ff8b0000)\n  from space 320K,   0% used [0x00000000ff8b0000, 0x00000000ff8b0000, 0x00000000ff900000)\n  to   space 320K,   0% used [0x00000000ff900000, 0x00000000ff900000, 0x00000000ff950000)\n tenured generation   total 6848K, used 6547K [0x00000000ff950000, 0x0000000100000000, 0x0000000100000000)\n   the space 6848K,  95% used [0x00000000ff950000, 0x00000000fffb4c30, 0x00000000fffb4e00, 0x0000000100000000)\n Metaspace       used 2689K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 286K, capacity 386K, committed 512K, reserved 1048576K\n\n</code></pre>\n<ul><li>DefNew：Default New Generation</li><li>Tenured：Old</li></ul>\n<h2><a id=\"95_GCParNew_5535\"></a>95_GC之ParNew收集器</h2>\n<p>一句话：使用多线程进行垃圾回收，在垃圾收集时，会Stop-The-World暂停其他所有的工作线程直到它收集结束。</p>\n<p><img alt=\"\" src=\"image\\25405deebf37fd1517467ef47cc2a1ea.png\"/></p>\n<p>ParNew收集器其实就是Serial收集器新生代的并行多线程版本，最常见的应用场景是配合老年代的CMS GC工作，其余的行为和Seria收集器完全一样，ParNew垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。<strong>它是很多Java虚拟机运行在Server模式下新生代的默认垃圾收集器</strong>。</p>\n<p>常用对应JVM参数：-XX:+UseParNewGC启用ParNew收集器，只影响新生代的收集，不影响老年代。</p>\n<p>开启上述参数后，会使用：ParNew(Young区)+ Serial Old的收集器组合，新生代使用复制算法，老年代采用标记-整理算法</p>\n<p>但是，ParNew+Tenured这样的搭配，Java8已经不再被推荐</p>\n<blockquote>\n<p>Java HotSpot™64-Bit Server VM warning:<br/> Using the ParNew young collector with the Serial old collector is deprecated and will likely be removed in a future release.</p>\n</blockquote>\n<p>备注：-XX:ParallelGCThreads限制线程数量，默认开启和CPU数目相同的线程数。</p>\n<p>复用上一节的<code>GCDemo</code></p>\n<p>VM参数：</p>\n<pre><code>-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:+PrintCommandLineFlags -XX:+UseParNewGC\n</code></pre>\n<p>输出结果：</p>\n<pre><code>-XX:InitialHeapSize=10485760 -XX:MaxHeapSize=10485760 -XX:+PrintCommandLineFlags -XX:+PrintGCDetails -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC \n[GC (Allocation Failure) [ParNew: 2702K-&gt;320K(3072K), 0.0007029 secs] 2702K-&gt;1272K(9920K), 0.0007396 secs] [Times: user=0.02 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [ParNew: 2292K-&gt;37K(3072K), 0.0010829 secs] 3244K-&gt;2774K(9920K), 0.0011000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [ParNew: 2005K-&gt;9K(3072K), 0.0008401 secs] 4742K-&gt;5624K(9920K), 0.0008605 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [ParNew: 1974K-&gt;1974K(3072K), 0.0000136 secs][Tenured: 5615K-&gt;3404K(6848K), 0.0021646 secs] 7589K-&gt;3404K(9920K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0022520 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [ParNew: 1918K-&gt;2K(3072K), 0.0008094 secs] 5322K-&gt;5324K(9920K), 0.0008273 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [ParNew: 1970K-&gt;1970K(3072K), 0.0000282 secs][Tenured: 5322K-&gt;4363K(6848K), 0.0018652 secs] 7292K-&gt;4363K(9920K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0019205 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [Tenured: 4363K-&gt;4348K(6848K), 0.0023131 secs] 4363K-&gt;4348K(9920K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0023358 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \njava.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOf(Arrays.java:3332)\n\tat java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)\n\tat java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448)\n\tat java.lang.StringBuilder.append(StringBuilder.java:136)\n\tat com.lun.jvm.GCDemo.main(GCDemo.java:22)\nHeap\n par new generation   total 3072K, used 106K [0x00000000ff600000, 0x00000000ff950000, 0x00000000ff950000)\n  eden space 2752K,   3% used [0x00000000ff600000, 0x00000000ff61a938, 0x00000000ff8b0000)\n  from space 320K,   0% used [0x00000000ff8b0000, 0x00000000ff8b0000, 0x00000000ff900000)\n  to   space 320K,   0% used [0x00000000ff900000, 0x00000000ff900000, 0x00000000ff950000)\n tenured generation   total 6848K, used 4348K [0x00000000ff950000, 0x0000000100000000, 0x0000000100000000)\n   the space 6848K,  63% used [0x00000000ff950000, 0x00000000ffd8f3a0, 0x00000000ffd8f400, 0x0000000100000000)\n Metaspace       used 2689K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 286K, capacity 386K, committed 512K, reserved 1048576K\nJava HotSpot(TM) 64-Bit Server VM warning: Using the ParNew young collector with the Serial old collector is deprecated and will likely be removed in a future release\n\n</code></pre>\n<h2><a id=\"96_GCParallel_5600\"></a>96_GC之Parallel收集器</h2>\n<p>Parallel / Parallel Scavenge</p>\n<p><img alt=\"\" src=\"image\\42f9a757b25c0d6f8f1d86d5eaddf398.png\"/></p>\n<p>Parallel Scavenge收集器类似ParNew也是一个新生代垃圾收集器，使用复制算法，也是一个并行的多线程的垃圾收集器，俗称吞吐量优先收集器。一句话：串行收集器在新生代和老年代的并行化。</p>\n<p>它重点关注的是：</p>\n<p>可控制的吞吐量(Thoughput=运行用户代码时间(运行用户代码时间+垃圾收集时间),也即比如程序运行100分钟，垃圾收集时间1分钟，吞吐量就是99% )。高吞吐量意味着高效利用CPU的时间，它多用于在后台运算而不需要太多交互的任务。</p>\n<p>自适应调节策略也是ParallelScavenge收集器与ParNew收集器的一个重要区别。(自适应调节策略:虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间（-XX:MaxGCPauseMillis）或最大的吞吐量。</p>\n<p>常用JVM参数：-XX:+UseParallelGC或-XX:+UseParallelOldGC（可互相激活）使用Parallel Scanvenge收集器。</p>\n<p>开启该参数后：新生代使用复制算法，老年代使用标记-整理算法。</p>\n<p>多说一句：-XX:ParallelGCThreads=数字N 表示启动多少个GC线程</p>\n<ul><li> <p>cpu&gt;8 N= 5/8</p> </li><li> <p>cpu&lt;8 N=实际个数</p> </li></ul>\n<p>复用上一节<code>GCDemo</code></p>\n<p>VM参数：</p>\n<pre><code>-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:+PrintCommandLineFlags -XX:+UseParallelGC\n</code></pre>\n<p>输出结果：</p>\n<pre><code>-XX:InitialHeapSize=10485760 -XX:MaxHeapSize=10485760 -XX:+PrintCommandLineFlags -XX:+PrintGCDetails -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC \n[GC (Allocation Failure) [PSYoungGen: 2009K-&gt;503K(2560K)] 2009K-&gt;803K(9728K), 0.7943182 secs] [Times: user=0.00 sys=0.00, real=0.79 secs] \n[GC (Allocation Failure) [PSYoungGen: 2272K-&gt;432K(2560K)] 2572K-&gt;2214K(9728K), 0.0020218 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 2448K-&gt;352K(2560K)] 4230K-&gt;3122K(9728K), 0.0017173 secs] [Times: user=0.11 sys=0.02, real=0.00 secs] \n[Full GC (Ergonomics) [PSYoungGen: 1380K-&gt;0K(2560K)] [ParOldGen: 6722K-&gt;2502K(7168K)] 8102K-&gt;2502K(9728K), [Metaspace: 2657K-&gt;2657K(1056768K)], 0.0039763 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2016K-&gt;0K(2560K)] [ParOldGen: 6454K-&gt;6454K(7168K)] 8471K-&gt;6454K(9728K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0049598 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 6454K-&gt;6454K(9728K), 0.0008614 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] [ParOldGen: 6454K-&gt;6440K(7168K)] 6454K-&gt;6440K(9728K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0055542 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \njava.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOfRange(Arrays.java:3664)\n\tat java.lang.String.&lt;init&gt;(String.java:207)\n\tat java.lang.StringBuilder.toString(StringBuilder.java:407)\n\tat com.lun.jvm.GCDemo.main(GCDemo.java:22)\nHeap\n PSYoungGen      total 2560K, used 82K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 4% used [0x00000000ffd00000,0x00000000ffd14810,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n ParOldGen       total 7168K, used 6440K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 89% used [0x00000000ff600000,0x00000000ffc4a1c8,0x00000000ffd00000)\n Metaspace       used 2689K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 286K, capacity 386K, committed 512K, reserved 1048576K\n\n</code></pre>\n<h2><a id=\"97_GCParallelOld_5664\"></a>97_GC之ParallelOld收集器</h2>\n<p>Parallel Old收集器是Parallel Scavenge的老年代版本，使用多线程的标记-整理算法，Parallel Old收集器在JDK1.6才开始提供。</p>\n<p>在JDK1.6之前，新生代使用ParallelScavenge收集器只能搭配年老代的Serial Old收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量。在JDK1.6之前（Parallel Scavenge + Serial Old )</p>\n<p>Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，JDK1.8后可以优先考虑新生代Parallel Scavenge和年老代Parallel Old收集器的搭配策略。在JDK1.8及后〈Parallel Scavenge + Parallel Old )</p>\n<p>JVM常用参数：-XX:+UseParallelOldGC使用Parallel Old收集器，设置该参数后，新生代Parallel+老年代Parallel Old。</p>\n<p>复用上一节<code>GCDemo</code></p>\n<p>VM参数：</p>\n<pre><code>-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:+PrintCommandLineFlags -XX:+UseParallelOldGC\n</code></pre>\n<p>输出结果：</p>\n<pre><code>-XX:InitialHeapSize=10485760 -XX:MaxHeapSize=10485760 -XX:+PrintCommandLineFlags -XX:+PrintGCDetails -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelOldGC \n[GC (Allocation Failure) [PSYoungGen: 1979K-&gt;480K(2560K)] 1979K-&gt;848K(9728K), 0.0007724 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 2205K-&gt;480K(2560K)] 2574K-&gt;2317K(9728K), 0.0008700 secs] [Times: user=0.02 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 2446K-&gt;496K(2560K)] 4284K-&gt;3312K(9728K), 0.0010374 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Ergonomics) [PSYoungGen: 1499K-&gt;0K(2560K)] [ParOldGen: 6669K-&gt;2451K(7168K)] 8168K-&gt;2451K(9728K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0043327 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Ergonomics) [PSYoungGen: 1966K-&gt;0K(2560K)] [ParOldGen: 6304K-&gt;6304K(7168K)] 8270K-&gt;6304K(9728K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0021269 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 6304K-&gt;6304K(9728K), 0.0004841 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] [ParOldGen: 6304K-&gt;6290K(7168K)] 6304K-&gt;6290K(9728K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0058149 secs] [Times: user=0.11 sys=0.00, real=0.01 secs] \njava.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOfRange(Arrays.java:3664)\n\tat java.lang.String.&lt;init&gt;(String.java:207)\n\tat java.lang.StringBuilder.toString(StringBuilder.java:407)\n\tat com.lun.jvm.GCDemo.main(GCDemo.java:22)\nHeap\n PSYoungGen      total 2560K, used 81K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 3% used [0x00000000ffd00000,0x00000000ffd14768,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n ParOldGen       total 7168K, used 6290K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 87% used [0x00000000ff600000,0x00000000ffc24b70,0x00000000ffd00000)\n Metaspace       used 2689K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 286K, capacity 386K, committed 512K, reserved 1048576K\n\n</code></pre>\n<h2><a id=\"98_GCCMS_5716\"></a>98_GC之CMS收集器</h2>\n<p>CMS收集器(Concurrent Mark Sweep：并发标记清除）是一种以获取最短回收停顿时间为目标的收集器。</p>\n<p>适合应用在互联网站或者B/S系统的服务器上，这类应用尤其重视服务器的响应速度，希望系统停顿时间最短。</p>\n<p>CMS非常适合地内存大、CPU核数多的服务器端应用，也是G1出现之前大型应用的首选收集器。</p>\n<p><img alt=\"\" src=\"image\\59c716f3ebb5070f67062ea8094a5266.png\"/></p>\n<p>Concurrent Mark Sweep并发标记清除，并发收集低停顿,并发指的是与用户线程一起执行<br/> 开启该收集器的JVM参数：-XX:+UseConcMarkSweepGC开启该参数后会自动将-XX:+UseParNewGC打开。</p>\n<p>开启该参数后，使用ParNew（Young区用）+ CMS（Old区用）+ Serial Old的收集器组合，Serial Old将作为CMS出错的后备收集器。</p>\n<p>4步过程：</p>\n<ul><li> <p>初始标记（CMS initial mark） - 只是标记一下GC Roots能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。</p> </li><li> <p>并发标记（CMS concurrent mark）和用户线程一起 - 进行GC Roots跟踪的过程，和用户线程一起工作，不需要暂停工作线程。主要标记过程，标记全部对象。</p> </li><li> <p>重新标记（CMS remark）- 为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。由于并发标记时，用户线程依然运行，因此在正式清理前，再做修正。</p> </li><li> <p>并发清除（CMS concurrent sweep） - 清除GCRoots不可达对象，和用户线程一起工作，不需要暂停工作线程。基于标记结果，直接清理对象，由于耗时最长的并发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看CMS 收集器的内存回收和用户线程是一起并发地执行。</p> </li></ul>\n<p><img alt=\"\" src=\"image\\232c6da9405df5933336be71228c2bb9.png\"/></p>\n<p>优点：并发收集低停顿。</p>\n<p>缺点：并发执行，对CPU资源压力大，采用的标记清除算法会导致大量碎片。</p>\n<p>由于并发进行，CMS在收集与应用线程会同时会增加对堆内存的占用，也就是说，CMS必须要在老年代堆内存用尽之前完成垃圾回收，否则CMS回收失败时，将触发担保机制，串行老年代收集器将会以STW的方式进行一次GC，从而造成较大停顿时间。</p>\n<p>标记清除算法无法整理空间碎片，老年代空间会随着应用时长被逐步耗尽，最后将不得不通过担保机制对堆内存进行压缩。CMS也提供了参数-XX:CMSFullGCsBeForeCompaction(默认O，即每次都进行内存整理)来指定多少次CMS收集之后，进行一次压缩的Full GC。</p>\n<p>复用上一节<code>GCDemo</code></p>\n<p>VM参数：</p>\n<pre><code>-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:+PrintCommandLineFlags -XX:+UseConcMarkSweepGC\n</code></pre>\n<p>输出结果：</p>\n<pre><code>-XX:InitialHeapSize=10485760 -XX:MaxHeapSize=10485760 -XX:MaxNewSize=3497984 -XX:MaxTenuringThreshold=6 -XX:NewSize=3497984 -XX:OldPLABSize=16 -XX:OldSize=6987776 -XX:+PrintCommandLineFlags -XX:+PrintGCDetails -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC \n[GC (Allocation Failure) [ParNew: 2274K-&gt;319K(3072K), 0.0016975 secs] 2274K-&gt;1043K(9920K), 0.0017458 secs] [Times: user=0.03 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [ParNew: 2844K-&gt;8K(3072K), 0.0010921 secs] 3568K-&gt;2287K(9920K), 0.0011138 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [ParNew: 2040K-&gt;2K(3072K), 0.0037625 secs] 4318K-&gt;4257K(9920K), 0.0037843 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (CMS Initial Mark) [1 CMS-initial-mark: 4255K(6848K)] 6235K(9920K), 0.0003380 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[CMS-concurrent-mark-start]\n[GC (Allocation Failure) [ParNew: 2024K-&gt;2K(3072K), 0.0013295 secs] 6279K-&gt;6235K(9920K), 0.0013596 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [ParNew: 1979K-&gt;1979K(3072K), 0.0000116 secs][CMS[CMS-concurrent-mark: 0.001/0.003 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n (concurrent mode failure): 6233K-&gt;2508K(6848K), 0.0031737 secs] 8212K-&gt;2508K(9920K), [Metaspace: 2657K-&gt;2657K(1056768K)], 0.0032232 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [ParNew: 2025K-&gt;2025K(3072K), 0.0000154 secs][CMS: 6462K-&gt;6461K(6848K), 0.0020534 secs] 8488K-&gt;6461K(9920K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0021033 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [CMS: 6461K-&gt;6448K(6848K), 0.0020383 secs] 6461K-&gt;6448K(9920K), [Metaspace: 2658K-&gt;2658K(1056768K)], 0.0020757 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (CMS Initial Mark) [1 CMS-initial-mark: 6448K(6848K)] 6448K(9920K), 0.0001419 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[CMS-concurrent-mark-start]\n[CMS-concurrent-mark: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[CMS-concurrent-preclean-start]\n[CMS-concurrent-preclean: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (CMS Final Remark) [YG occupancy: 50 K (3072 K)][Rescan (parallel) , 0.0002648 secs][weak refs processing, 0.0000173 secs][class unloading, 0.0002671 secs][scrub symbol table, 0.0004290 secs][scrub string table, 0.0001593 secs][1 CMS-remark: 6448K(6848K)] 6499K(9920K), 0.0012107 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[CMS-concurrent-sweep-start]\njava.lang.OutOfMemoryError: Java heap space\n[CMS-concurrent-sweep: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[CMS-concurrent-reset-start]\n[CMS-concurrent-reset: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n\tat java.util.Arrays.copyOfRange(Arrays.java:3664)\n\tat java.lang.String.&lt;init&gt;(String.java:207)\n\tat java.lang.StringBuilder.toString(StringBuilder.java:407)\n\tat com.lun.jvm.GCDemo.main(GCDemo.java:22)\nHeap\n par new generation   total 3072K, used 106K [0x00000000ff600000, 0x00000000ff950000, 0x00000000ff950000)\n  eden space 2752K,   3% used [0x00000000ff600000, 0x00000000ff61a820, 0x00000000ff8b0000)\n  from space 320K,   0% used [0x00000000ff8b0000, 0x00000000ff8b0000, 0x00000000ff900000)\n  to   space 320K,   0% used [0x00000000ff900000, 0x00000000ff900000, 0x00000000ff950000)\n concurrent mark-sweep generation total 6848K, used 6447K [0x00000000ff950000, 0x0000000100000000, 0x0000000100000000)\n Metaspace       used 2689K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 286K, capacity 386K, committed 512K, reserved 1048576K\n</code></pre>\n<h2><a id=\"99_GCSerialOld_5810\"></a>99_GC之SerialOld收集器</h2>\n<p>Serial Old是Serial垃圾收集器老年代版本，它同样是个单线程的收集器，使用标记-整理算法，这个收集器也主要是运行在 Client默认的java虚拟机默认的年老代垃圾收集器。</p>\n<p>在Server模式下，主要有两个用途(了解，版本已经到8及以后):</p>\n<ol><li>在JDK1.5之前版本中与新生代的Parallel Scavenge 收集器搭配使用。(Parallel Scavenge + Serial Old )</li><li>作为老年代版中使用CMS收集器的后备垃圾收集方案。</li></ol>\n<p>复用上一节<code>GCDemo</code></p>\n<p>VM参数：</p>\n<pre><code>-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:+PrintCommandLineFlags -XX:+UseSerialOldGC\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Unrecognized VM option 'UseSerialOldGC'\nDid you mean '(+/-)UseSerialGC'?\n</code></pre>\n<p>在Java8中，-XX:+UseSerialOldGC不起作用。</p>\n<h2><a id=\"100_GC_5840\"></a>100_GC之如何选择垃圾收集器</h2>\n<p>组合的选择</p>\n<ul><li>单CPU或者小内存，单机程序 \n  <ul><li>-XX:+UseSerialGC</li></ul> </li><li>多CPU，需要最大的吞吐量，如后台计算型应用 \n  <ul><li>-XX:+UseParallelGC（这两个相互激活）</li><li>-XX:+UseParallelOldGC</li></ul> </li><li>多CPU，追求低停顿时间，需要快速响应如互联网应用 \n  <ul><li>-XX:+UseConcMarkSweepGC</li><li>-XX:+ParNewGC</li></ul> </li></ul>\n<table><thead><tr><th>参数</th><th>新生代垃圾收集器</th><th>新生代算法</th><th>老年代垃圾收集器</th><th>老年代算法</th></tr></thead><tbody><tr><td>-XX:+UseSerialGC</td><td>SerialGC</td><td>复制</td><td>SerialOldGC</td><td>标记整理</td></tr><tr><td>-XX:+UseParNewGC</td><td>ParNew</td><td>复制</td><td>SerialOldGC</td><td>标记整理</td></tr><tr><td>-XX:+UseParallelGC</td><td>Parallel [Scavenge]</td><td>复制</td><td>Parallel Old</td><td>标记整理</td></tr><tr><td>-XX:+UseConcMarkSweepGC</td><td>ParNew</td><td>复制</td><td>CMS + Serial Old的收集器组合，Serial Old作为CMS出错的后备收集器</td><td>标记清除</td></tr><tr><td>-XX:+UseG1GC</td><td>G1整体上采用标记整理算法</td><td>局部复制</td><td></td><td></td></tr></tbody></table>\n<h2><a id=\"101_GCG1_5865\"></a>101_GC之G1收集器</h2>\n<p>复用上一节<code>GCDemo</code></p>\n<p>VM参数：</p>\n<pre><code>-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:+PrintCommandLineFlags -XX:+UseG1GC\n</code></pre>\n<p>输出结果：</p>\n<pre><code>-XX:InitialHeapSize=10485760 -XX:MaxHeapSize=10485760 -XX:+PrintCommandLineFlags -XX:+PrintGCDetails -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC -XX:-UseLargePagesIndividualAllocation \n[GC pause (G1 Humongous Allocation) (young) (initial-mark), 0.0015787 secs]\n   [Parallel Time: 0.8 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 106.4, Avg: 106.5, Max: 106.5, Diff: 0.1]\n      [Ext Root Scanning (ms): Min: 0.2, Avg: 0.3, Max: 0.5, Diff: 0.4, Sum: 2.2]\n      [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Processed Buffers: Min: 0, Avg: 0.0, Max: 0, Diff: 0, Sum: 0]\n      [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Object Copy (ms): Min: 0.0, Avg: 0.3, Max: 0.3, Diff: 0.3, Sum: 2.1]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.4]\n         [Termination Attempts: Min: 1, Avg: 5.3, Max: 10, Diff: 9, Sum: 42]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.3]\n      [GC Worker Total (ms): Min: 0.6, Avg: 0.6, Max: 0.7, Diff: 0.1, Sum: 4.9]\n      [GC Worker End (ms): Min: 107.1, Avg: 107.1, Max: 107.1, Diff: 0.0]\n   [Code Root Fixup: 0.0 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.3 ms]\n   [Other: 0.5 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 0.2 ms]\n      [Ref Enq: 0.0 ms]\n      [Redirty Cards: 0.3 ms]\n      [Humongous Register: 0.0 ms]\n      [Humongous Reclaim: 0.0 ms]\n      [Free CSet: 0.0 ms]\n   [Eden: 4096.0K(4096.0K)-&gt;0.0B(4096.0K) Survivors: 0.0B-&gt;1024.0K Heap: 7073.4K(10.0M)-&gt;2724.8K(10.0M)]\n [Times: user=0.02 sys=0.02, real=0.00 secs] \n[GC concurrent-root-region-scan-start]\n[GC concurrent-root-region-scan-end, 0.0004957 secs]\n[GC concurrent-mark-start]\n[GC concurrent-mark-end, 0.0001071 secs]\n[GC remark [Finalize Marking, 0.0001876 secs] [GC ref-proc, 0.0002450 secs] [Unloading, 0.0003675 secs], 0.0011690 secs]\n [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC cleanup 4725K-&gt;4725K(10M), 0.0004907 secs]\n [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC pause (G1 Humongous Allocation) (young), 0.0009748 secs]\n   [Parallel Time: 0.6 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 111.8, Avg: 111.9, Max: 112.2, Diff: 0.5]\n      [Ext Root Scanning (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 0.8]\n      [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Processed Buffers: Min: 0, Avg: 0.0, Max: 0, Diff: 0, Sum: 0]\n      [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Object Copy (ms): Min: 0.0, Avg: 0.2, Max: 0.3, Diff: 0.3, Sum: 1.7]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.2]\n         [Termination Attempts: Min: 1, Avg: 3.3, Max: 5, Diff: 4, Sum: 26]\n      [GC Worker Other (ms): Min: 0.1, Avg: 0.1, Max: 0.1, Diff: 0.0, Sum: 0.8]\n      [GC Worker Total (ms): Min: 0.1, Avg: 0.5, Max: 0.6, Diff: 0.5, Sum: 3.6]\n      [GC Worker End (ms): Min: 112.3, Avg: 112.3, Max: 112.4, Diff: 0.0]\n   [Code Root Fixup: 0.0 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.1 ms]\n   [Other: 0.2 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 0.1 ms]\n      [Ref Enq: 0.0 ms]\n      [Redirty Cards: 0.1 ms]\n      [Humongous Register: 0.0 ms]\n      [Humongous Reclaim: 0.0 ms]\n      [Free CSet: 0.0 ms]\n   [Eden: 1024.0K(4096.0K)-&gt;0.0B(4096.0K) Survivors: 1024.0K-&gt;1024.0K Heap: 6808.1K(10.0M)-&gt;2595.2K(10.0M)]\n [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC pause (G1 Humongous Allocation) (young) (initial-mark), 0.0006211 secs]\n   [Parallel Time: 0.2 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 113.3, Avg: 113.3, Max: 113.4, Diff: 0.1]\n      [Ext Root Scanning (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 1.0]\n      [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Processed Buffers: Min: 0, Avg: 0.1, Max: 1, Diff: 1, Sum: 1]\n      [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Object Copy (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.3]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [GC Worker Total (ms): Min: 0.1, Avg: 0.2, Max: 0.2, Diff: 0.1, Sum: 1.4]\n      [GC Worker End (ms): Min: 113.5, Avg: 113.5, Max: 113.5, Diff: 0.0]\n   [Code Root Fixup: 0.0 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.1 ms]\n   [Other: 0.3 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 0.1 ms]\n      [Ref Enq: 0.0 ms]\n      [Redirty Cards: 0.1 ms]\n      [Humongous Register: 0.0 ms]\n      [Humongous Reclaim: 0.0 ms]\n      [Free CSet: 0.0 ms]\n   [Eden: 0.0B(4096.0K)-&gt;0.0B(2048.0K) Survivors: 1024.0K-&gt;1024.0K Heap: 4595.9K(10.0M)-&gt;4557.3K(10.0M)]\n [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC concurrent-root-region-scan-start]\n[GC pause (G1 Humongous Allocation) (young)[GC concurrent-root-region-scan-end, 0.0001112 secs]\n[GC concurrent-mark-start]\n, 0.0006422 secs]\n   [Root Region Scan Waiting: 0.0 ms]\n   [Parallel Time: 0.2 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 114.2, Avg: 114.3, Max: 114.4, Diff: 0.2]\n      [Ext Root Scanning (ms): Min: 0.0, Avg: 0.1, Max: 0.1, Diff: 0.1, Sum: 0.7]\n      [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Processed Buffers: Min: 0, Avg: 0.1, Max: 1, Diff: 1, Sum: 1]\n      [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Object Copy (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [GC Worker Total (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 0.9]\n      [GC Worker End (ms): Min: 114.4, Avg: 114.4, Max: 114.4, Diff: 0.0]\n   [Code Root Fixup: 0.0 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.1 ms]\n   [Other: 0.3 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 0.1 ms]\n      [Ref Enq: 0.0 ms]\n      [Redirty Cards: 0.1 ms]\n      [Humongous Register: 0.0 ms]\n      [Humongous Reclaim: 0.0 ms]\n      [Free CSet: 0.0 ms]\n   [Eden: 0.0B(2048.0K)-&gt;0.0B(2048.0K) Survivors: 1024.0K-&gt;1024.0K Heap: 4557.3K(10.0M)-&gt;4547.6K(10.0M)]\n [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure)  4547K-&gt;4527K(10M), 0.0023437 secs]\n   [Eden: 0.0B(2048.0K)-&gt;0.0B(3072.0K) Survivors: 1024.0K-&gt;0.0B Heap: 4547.6K(10.0M)-&gt;4527.6K(10.0M)], [Metaspace: 2658K-&gt;2658K(1056768K)]\n [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure)  4527K-&gt;4513K(10M), 0.0021281 secs]\n   [Eden: 0.0B(3072.0K)-&gt;0.0B(3072.0K) Survivors: 0.0B-&gt;0.0B Heap: 4527.6K(10.0M)-&gt;4514.0K(10.0M)], [Metaspace: 2658K-&gt;2658K(1056768K)]\n [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC concurrent-mark-abort]\njava.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOf(Arrays.java:3332)\n\tat java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)\n\tat java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448)\n\tat java.lang.StringBuilder.append(StringBuilder.java:136)\n\tat com.lun.jvm.GCDemo.main(GCDemo.java:22)\nHeap\n garbage-first heap   total 10240K, used 4513K [0x00000000ff600000, 0x00000000ff700050, 0x0000000100000000)\n  region size 1024K, 1 young (1024K), 0 survivors (0K)\n Metaspace       used 2689K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 286K, capacity 386K, committed 512K, reserved 1048576K\n\n</code></pre>\n<p><strong>以前收集器特点</strong>：</p>\n<ul><li>年轻代和老年代是各自独立且连续的内存块；</li><li>年轻代收集使用单eden+s0+s1进行复机算法；</li><li>老年代收集必须扫描整个老年代区域；</li><li>都是以尽可能少而快速地执行GC为设计原则。</li></ul>\n<p><strong>G1是什么</strong></p>\n<p>G1 (Garbage-First）收集器，是一款面向服务端应用的收集器：</p>\n<p>The Garbage-First (G1) collector is a server-style garbage collector, targeted for multi-processor machines with large memories. It meets garbage collection(GC) pause time goals with a high probability, while achieving high throughput. The G1 garbage<br/> collector is fully supported in Oracle JDK 7 update 4 and later releases. The G1 collectoris designed for applications that:</p>\n<ul><li>Can operate concurrently with applications threads like the CMS collector.</li><li>Compact free space without lengthy GC induced pause times.</li><li>Need more predictable GC pause durations.</li><li>Do not want to sacrifice a lot of throughput performance.</li><li>Do not require a much larger Java heap.</li></ul>\n<p>从官网的描述中，我们知道G1是一种服务器端的垃圾收集器，应用在多处理器和大容量内存环境中，在实现高吞吐量的同时，尽可能的满足垃圾收集暂停时间的要求。另外，它还具有以下特性:</p>\n<p>像CMS收集器一样，能与应用程序线程并发执行。</p>\n<p>整理空闲空间更快。</p>\n<p>需要更多的时间来预测GC停顿时间。</p>\n<p>不希望牺牲大量的吞吐性能。</p>\n<p>不需要更大的Java Heap。</p>\n<p><strong>G1收集器的设计目标是取代CMS收集器</strong>，它同CMS相比，在以下方面表现的更出色：</p>\n<p>G1是一个有整理内存过程的垃圾收集器，不会产生很多内存碎片。</p>\n<p>G1的Stop The World(STW)更可控，G1在停顿时间上添加了预测机制，用户可以指定期望停顿时间。</p>\n<p>CMS垃圾收集器虽然减少了暂停应用程序的运行时间，但是它还是存在着内存碎片问题。于是，为了去除内存碎片问题，同时又保留CMS垃圾收集器低暂停时间的优点，JAVA7发布了一个新的垃圾收集器-G1垃圾收集器。</p>\n<p>G1是在2012年才在jdk1.7u4中可用。oracle官方计划在JDK9中将G1变成默认的垃圾收集器以替代CMS。它是一款面向服务端应用的收集器，主要应用在多CPU和大内存服务器环境下，极大的减少垃圾收集的停顿时间，全面提升服务器的性能，逐步替换java8以前的CMS收集器。</p>\n<p>主要改变是Eden，Survivor和Tenured等内存区域不再是连续的了，而是变成了一个个大小一样的region ,每个region从1M到32M不等。一个region有可能属于Eden，Survivor或者Tenured内存区域。</p>\n<p><strong>特点</strong>：</p>\n<ol><li>G1能充分利用多CPU、多核环境硬件优势，尽量缩短STW。</li><li>G1整体上采用标记-整理算法，局部是通过复制算法，不会产生内存碎片。</li><li>宏观上看G1之中不再区分年轻代和老年代。<strong>把内存划分成多个独立的子区域</strong>(Region)，可以近似理解为一个围棋的棋盘。</li><li>G1收集器里面讲整个的内存区都混合在一起了，但其本身依然在小范围内要进行年轻代和老年代的区分，保留了新生代和老年代，但它们不再是物理隔离的，而是一部分Region的集合且不需要Region是连续的，也就是说依然会采用不同的GC方式来处理不同的区域。</li><li>G1虽然也是分代收集器，但整个内存分区不存在物理上的年轻代与老年代的区别，也不需要完全独立的survivor(to space)堆做复制准备。G1只有逻辑上的分代概念，或者说每个分区都可能随G1的运行在不同代之间前后切换。</li></ol>\n<h2><a id=\"102_GCG1_6090\"></a>102_GC之G1底层原理</h2>\n<p>Region区域化垃圾收集器 - 最大好处是化整为零，避免全内存扫描，只需要按照区域来进行扫描即可。</p>\n<p>区域化内存划片Region，整体编为了一些列不连续的内存区域，避免了全内存区的GC操作。</p>\n<p>核心思想是将整个堆内存区域分成大小相同的子区域(Region)，在JVM启动时会自动设置这些子区域的大小，在堆的使用上，<strong>G1并不要求对象的存储一定是物理上连续的只要逻辑上连续即可</strong>，每个分区也不会固定地为某个代服务，可以按需在年轻代和老年代之间切换。启动时可以通过参数-XX:G1HeapRegionSize=n可指定分区大小（1MB~32MB，且必须是2的幂），默认将整堆划分为2048个分区。</p>\n<p>大小范围在1MB~32MB，最多能设置2048个区域，也即能够支持的最大内存为：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        32\n       \n       \n        M\n       \n       \n        B\n       \n       \n        ∗\n       \n       \n        2048\n       \n       \n        =\n       \n       \n        65536\n       \n       \n        M\n       \n       \n        B\n       \n       \n        =\n       \n       \n        64\n       \n       \n        G\n       \n      \n      \n       32MB*2048=65536MB=64G\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.68333em; vertical-align: 0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.68333em; vertical-align: 0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.68333em; vertical-align: 0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord mathdefault\">G</span></span></span></span></span>内存</p>\n<p><img alt=\"\" src=\"image\\b804a13751168e17c42652f585b12772.png\"/></p>\n<blockquote>\n<p>humongous<br/> 英 [hjuːˈmʌŋɡəs] 美 [hjuːˈmʌŋɡəs]<br/> adj. 巨大的;庞大的</p>\n</blockquote>\n<p>G1算法将堆划分为若干个区域(Region），它仍然属于分代收集器。</p>\n<p>这些Region的一部分包含<strong>新生代</strong>，新生代的垃圾收集依然采用暂停所有应用线程的方式，将存活对象拷贝到老年代或者Survivor空间。</p>\n<p>这些Region的一部分包含<strong>老年代</strong>，G1收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作。这就意味着，在正常的处理过程中，G1完成了堆的压缩（至少是部分堆的压缩），<strong>这样也就不会有CMS内存碎片问题的存在了</strong>。</p>\n<p>在G1中，还有一种特殊的区域，叫Humongous区域。</p>\n<p>如果一个对象占用的空间超过了分区容量50%以上，G1收集器就认为这是一个巨型对象。这些巨型对象默认直接会被分配在年老代，但是如果它是一个短期存在的巨型对象，就会对垃圾收集器造成负面影响。</p>\n<p>为了解决这个问题，G1划分了一个Humongous区，它用来专门存放巨型对象。如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了能找到连续的H区，有时候不得不启动Full GC。</p>\n<p><strong>回收步骤</strong></p>\n<p>G1收集器下的Young GC</p>\n<p>针对Eden区进行收集，Eden区耗尽后会被触发，主要是小区域收集＋形成连续的内存块，避免内存碎片</p>\n<ul><li>Eden区的数据移动到Survivor区，假如出现Survivor区空间不够，Eden区数据会部会晋升到Old区。</li><li>Survivor区的数据移动到新的Survivor区，部会数据晋升到Old区。</li><li>最后Eden区收拾干净了，GC结束，用户的应用程序继续执行。</li></ul>\n<p><img alt=\"\" src=\"image\\4a747a577ee9ffb9d4f22b3ad883ca48.png\"/></p>\n<p><img alt=\"\" src=\"image\\868f99e06ca822ccc04d197f88067969.png\"/></p>\n<p>4步过程：</p>\n<ol><li>初始标记：只标记GC Roots能直接关联到的对象</li><li>并发标记：进行GC Roots Tracing的过程</li><li>最终标记：修正并发标记期间，因程序运行导致标记发生变化的那一部分对象</li><li>筛选回收：根据时间来进行价值最大化的回收</li></ol>\n<p><img alt=\"\" src=\"image\\388dfd48e99e82bd025f6b33f4e41ff5.png\"/></p>\n<h2><a id=\"103_GCG1CMS_6151\"></a>103_GC之G1参数配置及和CMS的比较</h2>\n<ul><li>-XX:+UseG1GC</li><li>-XX:G1HeapRegionSize=n：设置的G1区域的大小。值是2的幂，范围是1MB到32MB。目标是根据最小的Java堆大小划分出约2048个区域。</li><li>-XX:MaxGCPauseMillis=n：最大GC停顿时间，这是个软目标，JVM将尽可能（但不保证）停顿小于这个时间。</li><li>-XX:InitiatingHeapOccupancyPercent=n：堆占用了多少的时候就触发GC，默认为45。</li><li>-XX:ConcGCThreads=n：并发GC使用的线程数。</li><li>-XX:G1ReservePercent=n：设置作为空闲空间的预留内存百分比，以降低目标空间溢出的风险，默认值是10%。</li></ul>\n<p>开发人员仅仅需要声明以下参数即可：</p>\n<p>三步归纳：开始G1+设置最大内存+设置最大停顿时间</p>\n<ol><li>-XX:+UseG1GC</li><li>-Xmx32g</li><li>-XX:MaxGCPauseMillis=100</li></ol>\n<p>-XX:MaxGCPauseMillis=n：最大GC停顿时间单位毫秒，这是个软目标，JVM将尽可能（但不保证）停顿小于这个时间</p>\n<p><strong>G1和CMS比较</strong></p>\n<ul><li>G1不会产生内碎片</li><li>是可以精准控制停顿。该收集器是把整个堆（新生代、老年代）划分成多个固定大小的区域，每次根据允许停顿的时间去收集垃圾最多的区域。</li></ul>\n<h2><a id=\"104_JVMGCSpringBoot_6181\"></a>104_JVMGC结合SpringBoot微服务优化简介</h2>\n<ol><li>IDEA开发微服务工程。</li><li>Maven进行clean package。</li><li>要求微服务启动的时候，同时配置我们的JVM/GC的调优参数。</li><li>公式：<code>java -server jvm的各种参数 -jar 第1步上面的jar/war包名</code>。</li></ol>\n<h2><a id=\"105_Linuxtop_6190\"></a>105_Linux命令之top</h2>\n<p>top - 整机性能查看</p>\n<p><img alt=\"\" src=\"image\\b829c179436e73f3c6f6fb69d3fc8288.png\"/></p>\n<p>主要看load average, CPU, MEN三部分</p>\n<blockquote>\n<p>load average表示系统负载，即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</p>\n<p>load average: 如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p>\n<p><a href=\"https://yjclsx.blog.csdn.net/article/details/81508455\">Linux中top命令参数详解</a></p>\n</blockquote>\n<p>uptime - 系统性能命令的精简版</p>\n<p><img alt=\"\" src=\"image\\e02451e25e5c4fd1b63d5ce4dc34e458.png\"/></p>\n<h2><a id=\"106_Linuxcpuvmstat_6212\"></a>106_Linux之cpu查看vmstat</h2>\n<p><img alt=\"\" src=\"image\\ee8791481bb181011148f66dd04f553e.png\"/></p>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">vmstat</span> -n 2 3\n</code></pre>\n<ul><li> <p><strong>procs</strong></p>\n<ul><li>r：运行和等待的CPU时间片的进程数，原则上1核的CPU的运行队列不要超过2，整个系统的运行队列不超过总核数的2倍，否则代表系统压力过大，我们看蘑菇博客测试服务器，能发现都超过了2，说明现在压力过大</li><li>b：等待资源的进程数，比如正在等待磁盘I/O、网络I/O等</li></ul> </li><li> <p><strong>cpu</strong></p>\n<ul><li>us：用户进程消耗CPU时间百分比，us值高，用户进程消耗CPU时间多，如果长期大于50%，优化程序</li><li>sy：内核进程消耗的CPU时间百分比</li><li>us + sy 参考值为80%，如果us + sy 大于80%，说明可能存在CPU不足，从上面的图片可以看出，us + sy还没有超过百分80，因此说明蘑菇博客的CPU消耗不是很高</li><li>id：处于空闲的CPU百分比</li><li>wa：系统等待IO的CPU时间百分比</li><li>st：来自于一个虚拟机偷取的CPU时间比</li></ul> </li></ul>\n<h2><a id=\"107_Linuxcpupidstat_6234\"></a>107_Linux之cpu查看pidstat</h2>\n<p>查看看所有cpu核信息</p>\n<pre><code>mpstat -P ALL 2\n</code></pre>\n<p><img alt=\"\" src=\"image\\4a7ca2740a0e9eabac40b45ed1344202.png\"/></p>\n<p>每个进程使用cpu的用量分解信息</p>\n<pre><code>pidstat -u 1 -p 进程编号\n</code></pre>\n<p><img alt=\"\" src=\"image\\3596b5f35d36984db7b9ecc0245ff58e.png\"/></p>\n<h2><a id=\"108_Linuxfreepidstat_6256\"></a>108_Linux之内存查看free和pidstat</h2>\n<p>应用程序可用内存数</p>\n<p>经验值</p>\n<ul><li> <p>应用程序可用内存l系统物理内存&gt;70%内存充足</p> </li><li> <p>应用程序可用内存/系统物理内存&lt;20%内存不足，需要增加内存</p> </li><li> <p>20%&lt;应用程序可用内存/系统物理内存&lt;70%内存基本够用</p> </li></ul>\n<p><img alt=\"\" src=\"image\\1ab546935109a63c8840c768448b74d2.png\"/></p>\n<p>m/g：兆/吉</p>\n<p>查看额外</p>\n<pre><code>pidstat -p 进程号 -r 采样间隔秒数\n</code></pre>\n<h2><a id=\"109_Linuxdf_6278\"></a>109_Linux之硬盘查看df</h2>\n<p>查看磁盘剩余空间数</p>\n<p><img alt=\"\" src=\"image\\33654217317fd70931081cd9759ed7ed.png\"/></p>\n<h2><a id=\"110_LinuxIOiostatpidstat_6284\"></a>110_Linux之磁盘IO查看iostat和pidstat</h2>\n<p>磁盘I/O性能评估</p>\n<p><img alt=\"\" src=\"image\\c82b388b2ee38bb5797ec657926e1aed.png\"/></p>\n<p>磁盘块设备分布</p>\n<ul><li>rkB/s每秒读取数据量kB;wkB/s每秒写入数据量kB;</li><li>svctm lO请求的平均服务时间，单位毫秒;</li><li>await l/O请求的平均等待时间，单位毫秒;值越小，性能越好;</li><li>util一秒中有百分几的时间用于I/O操作。接近100%时，表示磁盘带宽跑满，需要优化程序或者增加磁盘;</li><li>rkB/s、wkB/s根据系统应用不同会有不同的值，但有规律遵循:长期、超大数据读写，肯定不正常，需要优化程序读取。</li><li>svctm的值与await的值很接近，表示几乎没有IO等待，磁盘性能好。</li><li>如果await的值远高于svctm的值，则表示IO队列等待太长，需要优化程序或更换更快磁盘。</li></ul>\n<h2><a id=\"111_LinuxIOifstat_6301\"></a>111_Linux之网络IO查看ifstat</h2>\n<p>默认本地没有，下载ifstat</p>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">wget</span> http://gael.roualland.free.fr/lifstat/ifstat-1.1.tar.gz\n<span class=\"token function\">tar</span> -xzvf ifstat-1.1.tar.gz\n<span class=\"token function\">cd</span> ifstat-1.1\n./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span>\n</code></pre>\n<p>查看网络IO</p>\n<p>各个网卡的in、out</p>\n<p>观察网络负载情况程序</p>\n<p>网络读写是否正常</p>\n<ul><li>程序网络I/O优化</li><li>增加网络I/O带宽</li></ul>\n<p><img alt=\"\" src=\"image\\14c4a886c3ebfed15dc9b305ecef5d60.png\"/></p>\n<h2><a id=\"112_CPU_6327\"></a>112_CPU占用过高的定位分析思路</h2>\n<p>结合Linux和JDK命令一块分析</p>\n<p>案例步骤</p>\n<ul><li>先用top命令找出CPU占比最高的</li></ul>\n<p><img alt=\"\" src=\"image\\27939876a55ca389e04ebd8310670834.png\"/></p>\n<ul><li>ps -ef或者jps进一步定位，得知是一个怎么样的一个后台程序作搞屎棍</li></ul>\n<p><img alt=\"\" src=\"image\\e48aa6fcb9f26baad5ac34cacb70cfe5.png\"/></p>\n<ul><li> <p>定位到具体线程或者代码</p>\n<ul><li>ps -mp 进程 -o THREAD,tid,time \n    <ul><li>-m 显示所有的线程</li><li>-p pid进程使用cpu的时间</li><li>-o 该参数后是用户自定义格式</li></ul> </li></ul> </li></ul>\n<p><img alt=\"\" src=\"image\\337abc1b3d8618482906d45a6db3aa6e.png\"/></p>\n<ul><li>将需要的线程ID转换为16进制格式（英文小写格式），命令printf %x 172 将172转换为十六进制</li><li>jstack 进程ID | grep tid（16进制线程ID小写英文）-A60</li></ul>\n<blockquote>\n<p>ps - process status<br/> -A Display information about other users’ processes, including those without controlling terminals.</p>\n<p>-e Identical to -A.</p>\n<p>-f Display the uid, pid, parent pid, recent CPU usage, process start time, controlling tty, elapsed CPU usage, and the associated command. If the -u option is also used, display the user name rather then the numeric uid. When -o or -O is used to add to the display following -f, the command field is not truncated as severely as it is in other formats.</p>\n<p><a href=\"https://blog.csdn.net/lzufeng/article/details/83537275\">ps -ef中的e、f是什么含义</a></p>\n</blockquote>\n<p>对于JDK自带的JVM监控和性能分析工具用过哪些?一般你是怎么用的?<a href=\"https://blog.csdn.net/u011863024/article/details/106651068\">link</a></p>\n<h2><a id=\"113_GitHub_6366\"></a>113_GitHub骚操作之开启</h2>\n<p>略</p>\n<h2><a id=\"114_GitHub_6370\"></a>114_GitHub骚操作之常用词</h2>\n<p>常用词含义</p>\n<ul><li>watch：会持续收到该项目的动态</li><li>fork：复制其个项目到自己的Github仓库中</li><li>star，可以理解为点赞</li><li>clone，将项目下载至本地</li><li>follow，关注你感兴趣的作者，会收到他们的动态</li></ul>\n<h2><a id=\"115_GitHubin_6380\"></a>115_GitHub骚操作之in限制搜索</h2>\n<p>in关键词限制搜索范围：</p>\n<ul><li>公式 ：xxx(关键词) in:name或description或readme \n  <ul><li>xxx in:name 项目名包含xxx的</li><li>xxx in:description 项目描述包含xxx的</li><li>xxx in:readme 项目的readme文件中包含xxx的组合使用</li></ul> </li><li>组合使用 \n  <ul><li>搜索项目名或者readme中包含秒杀的项目</li><li>xxx in:name,readme</li></ul> </li></ul>\n<h2><a id=\"116_GitHubstarfork_6392\"></a>116_GitHub骚操作之star和fork范围搜索</h2>\n<ul><li>公式： \n  <ul><li>xxx关键字 stars 通配符 :&gt; 或者 :&gt;=</li><li>区间范围数字： stars:数字1…数字2</li></ul> </li><li>案例 \n  <ul><li>查找stars数大于等于5000的springboot项目：springboot stars:&gt;=5000</li><li>查找forks数在1000~2000之间的springboot项目：springboot forks:1000…5000</li></ul> </li><li>组合使用 \n  <ul><li>查找star大于1000，fork数在500到1000的springboot项目：springboot stars:&gt;1000 forks:500…1000</li></ul> </li></ul>\n<h2><a id=\"117_GitHubawesome_6403\"></a>117_GitHub骚操作之awesome搜索</h2>\n<ul><li>公式：awesome 关键字：awesome系列，一般用来收集学习、工具、书籍类相关的项目</li><li>搜索优秀的redis相关的项目，包括框架，教程等 awesome redis</li></ul>\n<h2><a id=\"118_GitHubL_6408\"></a>118_GitHub骚操作之#L数字</h2>\n<ul><li>一行：地址后面紧跟 #L10 \n  <ul><li>https://github.com/abc/abc/pom.xml#L13</li></ul> </li><li>多行：地址后面紧跟 #Lx - #Ln \n  <ul><li>https://github.com/moxi624/abc/abc/pom.xml#L13-L30</li></ul> </li></ul>\n<h2><a id=\"119_GitHubT_6415\"></a>119_GitHub骚操作之T搜索</h2>\n<p>在项目仓库下按键盘T，进行项目内搜索</p>\n<p><img alt=\"\" src=\"image\\7bbdf17bc8e0d9f19a9b11d85cfe639e.png\"/></p>\n<p><a href=\"https://docs.github.com/en/github/getting-started-with-github/keyboard-shortcuts\">更多github快捷键</a></p>\n<h2><a id=\"120_GitHub_6423\"></a>120_GitHub骚操作之搜索区域活跃用户</h2>\n<ul><li>location：地区</li><li>language：语言</li><li>例如：location:beijing language:java</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}