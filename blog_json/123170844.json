{"blogid": "123170844", "writerAge": "码龄2年", "writerBlogNum": "173", "writerCollect": "342", "writerComment": "73", "writerFan": "10448", "writerGrade": "5级", "writerIntegral": "1886", "writerName": "IT盛夏的果实", "writerProfileAdress": "writer_image\\profile_123170844.jpg", "writerRankTotal": "12354", "writerRankWeekly": "638", "writerThumb": "72", "writerVisitNum": "150317", "blog_read_count": "14834", "blog_time": "已于 2022-07-06 08:57:53 修改", "blog_title": "（Java）String截取指定字符前面（后面）所有字符和String的常用方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:40px;\"></p>\n<p id=\"1%20%E8%8E%B7%E5%8F%96String%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD-toc\" style=\"margin-left:40px;\"><a href=\"#1%20%E8%8E%B7%E5%8F%96String%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD\">1 获取String的相关信息功能</a></p>\n<p id=\"2%20String%E7%9A%84%E5%88%A4%E6%96%AD%E5%8A%9F%E8%83%BD-toc\" style=\"margin-left:40px;\"><a href=\"#2%20String%E7%9A%84%E5%88%A4%E6%96%AD%E5%8A%9F%E8%83%BD\">2 String的判断功能</a></p>\n<p id=\"3%20String%E5%AD%97%E7%AC%A6%E4%B8%AD%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#3%20String%E5%AD%97%E7%AC%A6%E4%B8%AD%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95\">3 String字符中转换方法</a></p>\n<p id=\"4%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#4%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\">4 常用方法</a></p>\n<p id=\"5%20%E5%B9%B3%E6%97%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:40px;\"><a href=\"#5%20%E5%B9%B3%E6%97%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">5 平时开发中常见问题</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"1%20%E8%8E%B7%E5%8F%96String%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD\">1 获取String的相关信息功能</h2>\n<p><strong>1）length()：获取该字符串长度</strong></p>\n<pre><code>        String str = \"group-banner-top-\";\n        int length = str.length();\n        System.out.println(length);</code></pre>\n<p>运行结果：17</p>\n<p><strong>2）charAt(int index)：获取指定索引处字符</strong></p>\n<pre><code>        String str = \"group-banner-top-\";\n        System.out.println(str.charAt(7));</code></pre>\n<p>运行结果：a</p>\n<p><strong>3）indexOf(String str)：获取指定字符在该字符串第一次出现的位置</strong></p>\n<pre><code>        String str = \"group-banner-top-\";\n        int index = str.indexOf(\"a\");\n        System.out.println(index);</code></pre>\n<p>运行结果：7</p>\n<p><strong>4）indexOf(String str, int fromIndex) 获取指定字符从某处开始第一次出现的位置</strong></p>\n<pre><code>        String str = \"graap-banner-top-\";\n        int index = str.indexOf(\"a\",5);\n        System.out.println(index);</code></pre>\n<p>运行结果：7</p>\n<p><strong>5）substring(int beginIndex) 从beginIndex开始位置截取字符串</strong></p>\n<pre><code>        String str = \"graap-banner-top-\";\n        String substring = str.substring(1);\n        System.out.println(substring);</code></pre>\n<p>运行结果：raap-banner-top-</p>\n<p><strong>6）substring(int beginIndex, int endIndex) 从beginIndex开始，到endIndex结束截取字符串。包括start，不包括end</strong></p>\n<pre><code>        String str = \"graap-banner-top-\";\n        String substring = str.substring(1,3);\n        System.out.println(substring);</code></pre>\n<p>运行结果：ra</p>\n<h2 id=\"2%20String%E7%9A%84%E5%88%A4%E6%96%AD%E5%8A%9F%E8%83%BD\">2 String的判断功能</h2>\n<p><strong>1）equals(Object anObject)：比较字符串内容是否相同</strong></p>\n<pre><code>        String str = \"fghjkvja女大三你看看电视\";\n        System.out.println(\"fghjkvja女大三你看看电视\".equals(str));\n        System.out.println(\"hhhjjj\".equals(str));</code></pre>\n<p>运行结果：true<br/> false</p>\n<p><strong>2）equalsIgnoreCase(String anotherString) ：比较字符串内容是否相同，忽略大小写</strong></p>\n<pre><code>        String str = \"ffffff\";\n        System.out.println(\"FFFFFF\".equalsIgnoreCase(str));\n</code></pre>\n<p>运行结果：true</p>\n<p><strong>3）startsWith(String prefix)：判断字符串是否以指定的字符开头</strong></p>\n<pre><code>        String str = \"fff白居寺fff\";\n        System.out.println(str.startsWith(\"fff\"));\n</code></pre>\n<p>运行结果：true</p>\n<p><strong>4）startsWith(String prefix, int toffset)：判断字符串是否以指定的字符开头，参数toffest指定从哪个下标开始</strong></p>\n<pre><code>        String str = \"fff白居寺fff\";\n        System.out.println(str.startsWith(\"白\",3));\n        System.out.println(str.startsWith(\"白\",4));</code></pre>\n<p>运行结果：true<br/> false</p>\n<p><strong>5）endsWith(String suffix)：判断字符串是否以指定的字符结尾</strong></p>\n<pre><code>        String str = \"fff白居寺fff\";\n        System.out.println(str.endsWith(\"白\"));\n</code></pre>\n<p>运行结果：false</p>\n<p><strong>6）isEmpty()：判断字符串是否为空</strong></p>\n<pre><code>        String str = \"\";\n        System.out.println(str.isEmpty());\n</code></pre>\n<p>运行结果：true</p>\n<h2 id=\"3%20String%E5%AD%97%E7%AC%A6%E4%B8%AD%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95\">3 String字符中转换方法</h2>\n<p><strong>1）String toLowerCase()：将字符串转为小写</strong></p>\n<pre><code>        String str = \"HDFNNCVNDK\";\n        System.out.println(str.toLowerCase());\n</code></pre>\n<p>运行结果：hdfnncvndk</p>\n<p><strong>2）String toUpperCase()：将字符串转大写</strong></p>\n<pre><code>        String str = \"kkskksfhdf\";\n        System.out.println(str.toUpperCase());</code></pre>\n<p><strong>3）char[ ] toCharArray()：将字符串转为字符数组</strong></p>\n<pre><code>        String str = \"HDFNNCV把接口顶你个肺NDK\";\n        char[] chars = str.toCharArray();\n        System.out.println(chars);</code></pre>\n<p>运行结果：HDFNNCV把接口顶你个肺NDK</p>\n<h2 id=\"4%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\">4 常用方法</h2>\n<p><strong>1）String trim()：去除字符串两端的空格</strong></p>\n<pre><code>        String str = \" kkskksfhdf \";\n        System.out.println(str);\n        System.out.println(str.trim());</code></pre>\n<p>运行结果： kkskksfhdf <br/> kkskksfhdf</p>\n<p><strong>2）CharSequence subSequence(int beginIndex, int endIndex):截取字符串指定位置组成一个新的字符串</strong></p>\n<pre><code>        String str = \" kkskaaaaksfhdf \";\n        System.out.println(str.subSequence(1,5));</code></pre>\n<p>运行结果：kksk</p>\n<p><strong>3） String replace(CharSequence target, CharSequence replacement)</strong></p>\n<pre><code>        String str = \"kkskaaaaksfhdf\";\n        System.out.println(str.replace(\"a\",\"o\"));</code></pre>\n<p>运行结果：kkskooooksfhdf</p>\n<p><strong>4）String replaceAll(String regex, String replacement)：用新的内容替换全部就内容</strong></p>\n<pre><code>        String str = \"kkskaaaaksfhdf\";\n        System.out.println(str.replaceAll(\"a\",\"o\"));</code></pre>\n<p>运行结果：kkskooooksfhdf</p>\n<p><strong>5）String replaceFirst(String regex, String replacement)：替换首个满足函数的内容</strong></p>\n<pre><code>        String str = \"kkskaaaaksfhdf\";\n        System.out.println(str.replaceFirst(\"k\",\"o\"));</code></pre>\n<p>运行结果：okskaaaaksfhdf</p>\n<p><strong>注意：</strong>之前用replaceFirst的时候遇到了一些问题：特意写出来分享下：</p>\n<p>想把22.22.02.23切割成2222.02.23的形式，就想到了replaceFirst这个方法，但是结果却出乎意料。</p>\n<pre><code> String str = \"22.22.02.23\";\n String s = str.replaceFirst(\".\", \"\");\n System.out.println(s);</code></pre>\n<p>运行结果：2.22.02.23</p>\n<p>可以发现，它将我的第一个字符给切割了，并没有切割第一个.的字符。因为这个时候\".\"相当于元字符，匹配除“\\n”和\"\\r\"之外的任何单个字符。所以就把第一个字符切割了。</p>\n<pre><code>        String str = \"22.22.02.23\";\n        String s = str.replaceFirst(\"\\\\.\", \"\");\n        System.out.println(s);</code></pre>\n<p>运行结果：2222.02.23</p>\n<p><strong>6）lastIndexOf(String str)：返回指定字符出现最后一次的下标</strong></p>\n<pre><code>        String str = \"kkskaaaaksfhdf\";\n        System.out.println(str.lastIndexOf(\"k\"));</code></pre>\n<p>运行结果：8</p>\n<p><strong>7）contains(CharSequence s)：字符串中是否包含指定字符</strong></p>\n<pre><code>        String str = \"kkskaaaaksfhdf\";\n        System.out.println(str.contains(\"aa\"));</code></pre>\n<p>运行结果：true</p>\n<p><strong>8）String concat(String str)：在原有字符串基础上加上指定字符串</strong></p>\n<pre><code>         String str = \"大\";\n        System.out.println(str.concat(\"逼兜\"));</code></pre>\n<p>运行结果：大逼兜</p>\n<h2 id=\"5%20%E5%B9%B3%E6%97%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">5 平时开发中常见问题</h2>\n<p><strong>1）获取第一个“-”后面（前面）的所有字符</strong></p>\n<pre><code>    public static void main(String[] args) {\n        String str = \"group-banner-top-http://pic/test/20220225092606e0dc59c3ef8c915b8fbe9f99153b7ef9\";\n        //获取第一个\"-\"后面的所有字符串\n        int index = str.indexOf(\"-\");\n        System.out.println(\"第一个字符下标:\"+index);\n        String after = str.substring(index+1);\n        System.out.println(\"第一个-后面的字符:\"+after);\n        String before = str.substring(0,index);\n        System.out.println(\"第一个-前面的字符:\"+before);\n    }</code></pre>\n<p><img alt=\"\" height=\"187\" src=\"image\\a29ba60235e7499586a1fa309559e8d9.png\" width=\"1019\"/> 其实获取第一个标识符的前面和后面的所有内容还是比较容易的。</p>\n<p><strong>2）获取第二个“-”后面的所有字符</strong></p>\n<pre><code>    public static void main(String[] args) {\n    String str = \"group-banner-top-http://pic/test/20220225092606e0dc59c3ef8c915b8fbe9f99153b7ef9\";\n    //获取第一个\"-\"后面的所有字符串\n        int index = str.indexOf(\"-\");\n        System.out.println(\"第一个字符下标:\"+index);\n        String after = str.substring(str.indexOf(\"-\",str.indexOf(\"-\")+1)+1);\n        System.out.println(\"第二个-后面的字符:\"+after);\n        String before = str.substring(0,str.indexOf(\"-\",str.indexOf(\"-\")+1));\n        System.out.println(\"第三个-前面的字符:\"+before);\n    }</code></pre>\n<p><img alt=\"\" height=\"161\" src=\"image\\da13f8a6267c45ccabec76cc087d8454.png\" width=\"966\"/></p>\n<p> 获取第二个标识符后面的内容，只需要拿到第一个标识符的初始位置并且加1，它就会从后开始切割</p>\n<p><strong>2）获取第三个“-”后面的所有字符</strong></p>\n<pre><code>    public static void main(String[] args) {\n    String str = \"group-banner-top-http://pic/test/20220225092606e0dc59c3ef8c915b8fbe9f99153b7ef9\";\n    //获取第一个\"-\"后面的所有字符串\n        int index = str.indexOf(\"-\");\n        System.out.println(\"第一个字符下标:\"+index);\n        String str1 = str.substring(index+1); //先切割一遍,使得字符串前面变的只有两个两个“-”,然后就可以用上一种获取第二个字符的方法了\n        System.out.println(\"切割掉第一个‘-’和前面的字符串剩下的字符串为:\"+str1);\n        String after = str1.substring(str1.indexOf(\"-\",str1.indexOf(\"-\")+1)+1);\n        System.out.println(\"第三个‘-’后面的字符:\"+after);\n        int length =  (str.length() - after.length()) - 1;\n        String before1 = str.substring(0,length);\n        System.out.println(\"第三个‘-’前面的字符:\"+before1);\n    }</code></pre>\n<p><img alt=\"\" height=\"180\" src=\"image\\a8e67ad3509243f78f1a165dec64bf48.png\" width=\"1193\"/></p>\n<p> 获取第三个标识符的时候，因为我们不清楚前面字符串的长度，所以只需要先切割一遍，再按照获取第二个标识符那样就好了</p>\n<p></p>\n<p>参考博客：<a href=\"https://blog.csdn.net/lz_1014/article/details/86241850\" title=\"日常开发中，String类中常用的方法_lz_1014的博客-CSDN博客_string方法\">日常开发中，String类中常用的方法_lz_1014的博客-CSDN博客_string方法</a></p>\n</div>\n</div>"}