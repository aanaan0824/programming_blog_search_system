{"blogid": "122180181", "writerAge": "码龄3年", "writerBlogNum": "679", "writerCollect": "813", "writerComment": "44", "writerFan": "60", "writerGrade": "6级", "writerIntegral": "7396", "writerName": "TABE_", "writerProfileAdress": "writer_image\\profile_122180181.jpg", "writerRankTotal": "2476", "writerRankWeekly": "8080", "writerThumb": "184", "writerVisitNum": "256641", "blog_read_count": "9363", "blog_time": "已于 2022-08-27 21:42:08 修改", "blog_title": "C++ 虚函数详解（动态绑定）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>这里写目录标题</h3>\n<ul><li><a href=\"#_1\">动态绑定</a></li><li><a href=\"#_3\">类的虚表</a></li><li><ul><li><a href=\"#_32\">一般继承（无虚函数覆盖）</a></li><li><a href=\"#_44\">一般继承（有虚函数覆盖）</a></li><li><a href=\"#_61\">多重继承（无虚函数覆盖）</a></li><li><a href=\"#_77\">多重继承（有虚函数覆盖）</a></li></ul>\n</li><li><a href=\"#_90\">虚表指针</a></li><li><a href=\"#_104\">带缺省参数的虚函数</a></li><li><a href=\"#_126\">虚函数表和虚函数指针存放在哪个位置</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>动态绑定</h1>\n<p>虚函数的作用主要是实现了多态的机制。关于多态，简而言之就是用父类型别的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。我们在使用基类的引用（指针）调用虚函数时，就会发生动态绑定。所谓动态绑定，就是在运行时，虚函数会根据绑定对象的实际类型，选择调用函数的版本。</p>\n<h1><a id=\"_3\"></a>类的虚表</h1>\n<p><strong>每个包含了虚函数的类都包含一个虚表，虚函数表保存的是虚函数的指针，因此虚表的大小是虚函数个数*4个字节</strong>。</p>\n<p>我们来看以下的代码。类 A 包含虚函数vfunc1，vfunc2，由于类 A 包含虚函数，故类 A 拥有一个虚表。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">vfunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">vfunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> m_data1<span class=\"token punctuation\">,</span> m_data2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>类 A 的虚表如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b4ad19fed2794e8d8738221b8e104ea5.png\"/></p>\n<p>对于虚表，需要注意的是：</p>\n<ol><li>虚表是一个指针数组，其元素是虚函数的指针，每个元素对应一个虚函数的函数指针。需要指出的是，普通的函数即非虚函数，其调用并不需要经过虚表，所以<strong>虚表的元素并不包括普通函数的函数指针</strong>。</li><li>虚表内的条目，即虚函数指针的赋值发生在编译器的编译阶段，也就是说<strong>在代码的编译阶段，虚表就可以构造出来了</strong>。</li><li><strong>虚表是属于类的，而不是属于某个具体的对象</strong>，一个类只需要一个虚表即可。同一个类的所有对象都使用同一个虚表。</li></ol>\n<p>我们知道，当一个类A继承另一个类B时，类 A 会继承类 B 的函数的调用权。所以如果一个基类包含了虚函数，那么其继承类也可调用这些虚函数，换句话说，一个类继承了包含虚函数的基类，那么这个类也拥有自己的虚表，下面根据继承方式的不同，描述继承类的虚表。</p>\n<h2><a id=\"_32\"></a>一般继承（无虚函数覆盖）</h2>\n<p>假设有如下所示的一个继承关系：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f504cc7ad73141d4a98529c95ba02734.png\"/></p>\n<p>请注意，在这个继承关系中，子类没有重任何父类的函数。那么，对于实例Derive d，Derive类虚函数表如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b9179065d4c045fe9c68e0305aedef0a.png\"/></p>\n<p>从表中可以看到下面几点：</p>\n<ol><li>虚函数按照其声明顺序放于表中。</li><li>父类的虚函数在子类的虚函数前面。</li></ol>\n<h2><a id=\"_44\"></a>一般继承（有虚函数覆盖）</h2>\n<p>覆盖父类的虚函数是很显然的事情，不然，虚函数就变得毫无意义。下面，我们来看一下，如果子类中有虚函数重载了父类的虚函数，会是一个什么样子？假设，我们有下面这样的一个继承关系。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\46ccdfd4efe24c818917f468c1057d3f.png\"/></p>\n<p>为了让大家看到被继承过后的效果，在这个类的设计中，派生类只覆盖了父类的一个函数：f()。那么，对于派生类的实例，其虚函数表会是下面的一个样子：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\90b219b88f304f3e87e5f4c99c8f8561.png\"/></p>\n<p>从表中可以看到下面几点：</p>\n<ol><li>覆盖的f()函数被放到了虚表中原来父类虚函数的位置。</li><li>没有被覆盖的函数依旧存在于虚函数表中。</li></ol>\n<h2><a id=\"_61\"></a>多重继承（无虚函数覆盖）</h2>\n<p>下面，再让我们来看看多重继承中的情况，假设有下面这样一个类的继承关系。注意：子类并没有覆盖父类的函数。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d673668ae8bc45fcb6d2bd0ccdcd0581.png\"/></p>\n<p>对于子类实例中的虚函数表，是下面这个样子：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d148f78751ae4c1db0cb84fd027bf7d6.png\"/></p>\n<p>我们可以看到：</p>\n<ol><li>每个父类都有自己的虚表。</li><li><strong>子类的成员函数被放到了第一个父类的表中</strong>。（<strong>所谓的第一个父类是按照声明顺序来判断的</strong>）</li></ol>\n<p>这样做就是为了解决不同的父类类型的指针指向同一个子类实例，而能够调用到实际的函数。</p>\n<h2><a id=\"_77\"></a>多重继承（有虚函数覆盖）</h2>\n<p>下面我们再来看看，如果发生虚函数覆盖的情况。</p>\n<p>下图中，我们在子类中覆盖了父类的f()函数。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ba6fc0d903b4437c88a72b2a1bc45ef1.png\"/></p>\n<p>下面是对于子类实例中的虚函数表的图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4a8bf473e27744d8b6c652d78f346ea1.png\"/></p>\n<p>我们可以看见，三个父类虚函数表中的f()的位置被替换成了子类的函数指针。这样，我们就可以任一静态类型的父类来指向子类，并调用子类的f()了。</p>\n<h1><a id=\"_90\"></a>虚表指针</h1>\n<p>为了指定对象的虚表，对象内部包含一个虚表的指针，来指向自己所使用的虚表。为了让每个包含虚表的类的对象都拥有一个虚表指针，在<strong>编译阶段</strong>，编译器在类中添加了一个指针<code>*__vptr</code>，用来指向虚表。这样，当类的对象在创建时便拥有了这个指针，且这个指针的值会自动被设置为指向类的虚表，<strong><code>*__vptr</code>一般在对象内存分布的最前面</strong>。</p>\n<p><strong>虚表指针的初始化确实发生在构造函数的调用过程中， 但是在执行构造函数体之前，即进入到构造函数的\"{“和”}\"之前</strong>。 为了更好的理解这一问题， 我们可以把构造函数的调用过程细分为两个阶段，即：</p>\n<ol><li>进入到构造函数体之前。在这个阶段如果存在虚函数的话，虚表指针被初始化。如果存在构造函数的初始化列表的话，初始化列表也会被执行。</li><li>进入到构造函数体内。这一阶段是我们通常意义上说的构造函数。</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ce834d6cad9f491da14e6a8bcd143bdd.png\"/></p>\n<h1><a id=\"_104\"></a>带缺省参数的虚函数</h1>\n<p>当缺省参数和虚函数一起出现的时候情况有点复杂，极易出错。我们知道，<strong>虚函数是动态绑定的，但是为了执行效率，缺省参数是静态绑定的</strong>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">vfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">vfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nD<span class=\"token operator\">*</span> pD <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nB<span class=\"token operator\">*</span> pB <span class=\"token operator\">=</span> pD<span class=\"token punctuation\">;</span>\npD<span class=\"token operator\">-&gt;</span><span class=\"token function\">vfun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npB<span class=\"token operator\">-&gt;</span><span class=\"token function\">vfun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>有上面的分析可知pD-&gt;vfun()和pB-&gt;vfun()调用都是函数D::vfun()，但是他们的缺省参数是多少？</p>\n<p>分析一下，缺省参数是静态绑定的，pD-&gt;vfun()时，pD的静态类型是D*，所以它的缺省参数应该是20；同理，pB-&gt;vfun()的缺省参数应该是10。编写代码验证了一下，正确。</p>\n<h1><a id=\"_126\"></a>虚函数表和虚函数指针存放在哪个位置</h1>\n<ul><li>虚表指针一般都是在<strong>类的最前边</strong>（取决于编译器的实现）。</li><li>虚函数表是属于一个类所有对象的，不是属于某一个对象特有的，有点像一个类里面的staic成员变量，即它位于C++内存模型中的<strong>全局/静态存储区</strong>。</li><li>虚函数位于代码段（.text），也就是C++内存模型中的<strong>代码区</strong>。</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}