{"blogid": "126625546", "writerAge": "码龄1年", "writerBlogNum": "86", "writerCollect": "2786", "writerComment": "692", "writerFan": "3847", "writerGrade": "5级", "writerIntegral": "3274", "writerName": "粉色的志明", "writerProfileAdress": "writer_image\\profile_126625546.jpg", "writerRankTotal": "5203", "writerRankWeekly": "302", "writerThumb": "939", "writerVisitNum": "167502", "blog_read_count": "599", "blog_time": "于 2022-09-01 00:00:00 发布", "blog_title": "软件测试 -进阶篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>回顾上一篇博客主要内容: <a href=\"https://blog.csdn.net/chenbaifan/article/details/125450899?spm=1001.2014.3001.5501\">用例篇</a></p>\n<blockquote>\n<p><font color=\"red\">如何根据需求去设计测试用例?</font></p>\n<ol><li>验证需求的正确性，合理性，无二义性，逻辑自洽</li><li>分析需求，细化需求，从需求中提出测试项，根据测试项找到测试点，根据测试点去具体的设计测试用例</li></ol>\n</blockquote>\n<blockquote>\n<p><font color=\"red\">根据需求设计测试用例分为哪两个方面？</font><br/> 功能性和非功能性</p>\n</blockquote>\n<blockquote>\n<ol><li>功能性<br/> 界面的所有功能不能遗漏（从上到下，重左到右）<br/> 把功能串起来，形成场景或者业务，对场景和业务进行测试<br/> 一个功能的多个输入要进行测试<br/> 功能的异常数据输入，异常操作进行测试</li><li>非功能性<br/> 可靠性，易用性，容错性，兼容性，可移植性，性能，安全，可维护性<br/> 不同类型的软件，非功能性测试的侧重点是不一样的<br/> 大型商用软件（淘宝，微信，微博等），客户端安装的软件，B/S 企业内部使用的软件，Word，office（单机安装）</li></ol>\n</blockquote>\n<blockquote>\n<p><font color=\"red\">具体的设计测试用例的方法有哪些？</font><br/> 等价类，边界值，场景法，错误猜测法，因果图法，正交法</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3> </h3>\n<ul><li><a href=\"#1__25\">1. 按照测试对象划分</a></li><li><ul><li><a href=\"#11__26\">1.1 界面测试</a></li><li><a href=\"#12__37\">1.2 可靠性测试</a></li><li><a href=\"#13__53\">1.3 容错性测试</a></li><li><a href=\"#14__64\">1.4 文档测试</a></li><li><a href=\"#15__74\">1.5 兼容性测试</a></li><li><a href=\"#16__84\">1.6 易用性测试</a></li><li><a href=\"#17__95\">1.7 安装卸载测试</a></li><li><a href=\"#18__103\">1.8 安全性测试</a></li><li><a href=\"#19__116\">1.9 性能测试</a></li><li><a href=\"#110__120\">1.10 内存泄漏</a></li></ul>\n</li><li><a href=\"#2__126\">2. 按照是否查看代码划分</a></li><li><ul><li><a href=\"#21__127\">2.1 黑盒测试</a></li><li><a href=\"#22__138\">2.2 白盒测试</a></li><li><a href=\"#23__145\">2.3 灰盒测试</a></li></ul>\n</li><li><a href=\"#3__149\">3. 按照开发阶段划分</a></li><li><ul><li><a href=\"#31__158\">3.1 单元测试阶段</a></li><li><a href=\"#32__168\">3.2 集成测试</a></li><li><a href=\"#33__178\">3.3 系统测试</a></li><li><a href=\"#34__188\">3.4 回归测试</a></li><li><a href=\"#35__190\">3.5 冒烟测试</a></li><li><a href=\"#36__195\">3.6 验收测试</a></li></ul>\n</li><li><a href=\"#4__205\">4. 按照实施组织划分</a></li><li><ul><li><a href=\"#41__206\">4.1 α测试</a></li><li><a href=\"#42__213\">4.2 β测试</a></li><li><a href=\"#43__218\">4.3 第三方测试</a></li></ul>\n</li><li><a href=\"#5__221\">5. 按照代码是否运行划分</a></li><li><ul><li><a href=\"#51__222\">5.1 静态测试</a></li><li><a href=\"#52__224\">5.2 动态测试</a></li></ul>\n</li><li><a href=\"#6__229\">6. 按照是否手工划分</a></li><li><ul><li><a href=\"#61__230\">6.1 手工测试</a></li><li><a href=\"#62__235\">6.2 自动化测试</a></li></ul>\n</li><li><a href=\"#7__240\">7. 按照地域划分</a></li><li><ul><li><a href=\"#71__242\">7.1 软件国际化测试</a></li><li><a href=\"#72__251\">7.2 软件本地化测试</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1__25\"></a>1. 按照测试对象划分</h1>\n<h2><a id=\"11__26\"></a>1.1 界面测试</h2>\n<p>用户是通过界面和软件之间进行交互的，界面设计的好坏，直接影响了用户对软件的映像。</p>\n<p>界面测试（简称UI测试)，指按照界面的需求（一般是UI设计稿）和界面的设计规则，对我们软件界面所展示的全部内容进行测试和检查，一般包括如下内容：</p>\n<ol><li>测试软件界面元素完整性，正确性，一致性。</li><li>软件界面排版布局合理，字体，颜色。</li><li>测试界面的自适应性，界面适应不同的页面大小（文字没有重叠，消失，功能都在，可以正常使用，图片清晰排版合理，手机，iPad，电脑屏幕，界面重大到小（从小到大）变化的过程中，功能完整，文字完整，图片完整，不出现叠加，消失，功能无法使用的情况）。</li><li>界面控件功能正常，对话框滚动条，按钮。按钮的有效状态和失效状态时可以区分。</li><li>界面设计（颜色，布局）。</li></ol>\n<h2><a id=\"12__37\"></a>1.2 可靠性测试</h2>\n<p>可靠性指软件正常运行的能力，软件正常运行的时间和总体运行的时间的百分比。</p>\n<blockquote>\n<p>可靠性 = 正常运行时间/（正常运行时间+非正常运行时间）*100%</p>\n</blockquote>\n<p>影响软件可靠性的因素： 网络，软件环境（安装），硬件环境，软件自身，环境的异常都会使得软件运行异常</p>\n<blockquote>\n<p>不同的软件对可靠性要求不一样，非实时性软件可靠性要求一般为 99.99% ，99.95%（邮件系统）<br/> 特殊软件对可靠性就很高，99.999%（军事系统）</p>\n</blockquote>\n<blockquote>\n<p>如果可用性达到99.99%，对于一个全年不间断（7*24的方式）运行的系统，意味着全年（252600min)不能正常工作的时间只有52min，不到一个小时。<br/> 如果可用性达到99.999%，意味着全年不能正常工作的时间只有5min。</p>\n</blockquote>\n<blockquote>\n<p><code>怎样测试软件的可靠性？</code><br/> 一个周，出现故障的时间记下来，去计算百分比</p>\n</blockquote>\n<h2><a id=\"13__53\"></a>1.3 容错性测试</h2>\n<p>系统发生异常，或者由于错误操作导致软件系统发生错误，软件自我消化掉错误，或者进行修改，不让客户知道，叫做系统的容错性。</p>\n<blockquote>\n<ol><li>常见的容错性处理<br/> <code>数据容错性：</code> 取款机输入小于 100 的钱数 （给出提示）时间： 25时70分这样、年月日： 二月份 30号这样，其他月份 32号（都给出提示）<br/> <code>校验容错性：</code> 前后空格（自动化过滤）；校验大小写字母（验证码：自动转化为大小写），同一个表格或文件前后的信息校验（身份证，学号，自动前后校验）<br/> <code>界面容错性：</code>复杂操作的提示，危险操作的提示；危险按钮的屏蔽<br/> <code>环境容错性：</code>软件所在的环境发生故障，软件有备用方案；可以让用户无感知切换。（网络，电，硬件环境，软件部署的软件环境）</li><li>灾难恢复测试<br/> 人为让系统发生故障，看系统自身，对于用户数据的存储和回复是否快速</li></ol>\n</blockquote>\n<h2><a id=\"14__64\"></a>1.4 文档测试</h2>\n<p>软件开发的相关文档的测试。</p>\n<p>文档测试的关注点：</p>\n<ol><li>文档的术语</li><li>文档的正确性</li><li>文档的完整性</li><li>文档的一致性</li><li>文档的易用性</li></ol>\n<h2><a id=\"15__74\"></a>1.5 兼容性测试</h2>\n<blockquote>\n<ol><li><code>软件自身的兼容性</code><br/> 软件前后的兼容性，软件开发的新功能不能影响旧功能的使用，不能够影响后续功能的开发</li><li><code>软件对于数据的兼容性（用户数据）</code><br/> 设计功能的时候，要考虑用户已有的数据</li><li><code>软件对应用平台的兼容性(安装软件的环境,硬件环境,APP,浏览器)</code><br/> APP / IOS / Android 不同品牌手机 ,不同型号,web 不同浏览器,不同浏览器在不同的电脑设备上</li><li><code>软件对于第三方软件或者第三方软件数据的兼容性(相关软件)</code><br/> 淘宝 / 支付宝 / 微博 / 第三方登录</li></ol>\n</blockquote>\n<h2><a id=\"16__84\"></a>1.6 易用性测试</h2>\n<p>就是用户的体验测试</p>\n<blockquote>\n<ol><li><code>标准性和规范性</code><br/> 界面上的各种信息应该符合规范和习惯，否则用户使用起来会不舒适，并得不到用户的认可。测试人员需要把与标准规范，习惯不一致的问题报告为缺陷</li><li><code>直观性</code><br/> 用户期望的操作在用户可见的范围之内</li><li><code>灵活性</code><br/> 键盘: 九宫格、全键盘、手写、拼音</li><li><code>舒适性</code></li><li><code>实用性</code></li></ol>\n</blockquote>\n<h2><a id=\"17__95\"></a>1.7 安装卸载测试</h2>\n<ol><li>不同的安装路径,安装卸载软件正常<br/> APPstore、安装包、第三方（软件小助手）、命令行等</li><li>安装或者卸载过程中是否暂停，暂停后还可以正常安装卸载</li><li>安装过程中空间不足，有提示</li><li>正常卸载软件，如果卸载取消，那么软件可以正常使用（数据恢复）</li><li>安装过程中出现异常，软件可以正常处理（断电、断网连接异常等）</li></ol>\n<h2><a id=\"18__103\"></a>1.8 安全性测试</h2>\n<p>安全性指信息安全,软件保护用户的数据,隐式,以及数据传输过程的安全性,防止病毒侵入和黑客攻击。</p>\n<ol><li>输入域，如输入恶性或者带有病毒的脚本或长字符串</li><li>代码中的安全性问题，如SQL/XML注入</li><li>不安全的数据存储或者传递</li><li>数据文件，邮件文件，系统配置文件等里面有危害系统的信息或者数据；</li><li>有问题的访问控制，权限分配等</li><li>假冒ID：身份欺骗</li><li>篡改，对数据的恶意修改，破坏数据的完整性</li></ol>\n<blockquote>\n<p>对于安全性测试，可以有代码走读，工具检测的方式</p>\n</blockquote>\n<h2><a id=\"19__116\"></a>1.9 性能测试</h2>\n<p><code>系统性能问题的表现：</code>资源泄漏；资源分配不均衡；线程死锁；查询速度越来越慢；响应越来越慢<br/> <code>性能指标：</code> TPS(每秒事务处理量），每秒HTTP请求数，点击率，吞吐量，响应时间，CPU和资源利用率</p>\n<h2><a id=\"110__120\"></a>1.10 内存泄漏</h2>\n<p><code>内存泄漏产生的原因：</code> 程序中写的有问题，没办法回收内存；API 函数使用不正确，无法回收内存；分配内存后，忘记回收内存。</p>\n<p><code>检查代码是否资源泄漏：</code> 人工检查，工具检查</p>\n<h1><a id=\"2__126\"></a>2. 按照是否查看代码划分</h1>\n<h2><a id=\"21__127\"></a>2.1 黑盒测试</h2>\n<p>不去关心代码内部的逻辑结构,不去查看代码,只关心软件功能的外部的输入和输出是否满足用户的需求(相当于把软件的内部实现屏蔽掉了)</p>\n<p>优点:</p>\n<ol><li>不用去关心软件内部的实现,不用去看代码</li><li>站在用户角度去设计测试用例,容易培养产品思维</li><li>设计测试用例是根据软件需求来设计的,不容易遗漏需求</li></ol>\n<blockquote>\n<p>黑盒测试的方法:<br/> 等价类、边界值、场景法、因果图、错误猜测法、正交法</p>\n</blockquote>\n<h2><a id=\"22__138\"></a>2.2 白盒测试</h2>\n<p>查看代码是否规范,代码的风格是否和公司设计一致,分析代码的逻辑结构,对代码进行测试,看代码是否实现了需求.</p>\n<blockquote>\n<p>白盒测试的方法:<br/> 语句覆盖、路径覆盖、逻辑覆盖、判定覆盖、条件覆盖、判定组合覆盖、判定和条件覆盖、条件和条件组合<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b279076a6dd54e7d9ed16e54e7547973.png\"/></p>\n</blockquote>\n<h2><a id=\"23__145\"></a>2.3 灰盒测试</h2>\n<p>既关心软件功能的输入输出，也关心软件内部程序的实现</p>\n<h1><a id=\"3__149\"></a>3. 按照开发阶段划分</h1>\n<p><strong>测试金字塔</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\87fe521a2d38494bbfe15bd2c2aac6e8.png\"/></p>\n<p>特点：</p>\n<ol><li>越往底层走，测试效率越高</li><li>越往底层走，定位问题越容易</li><li>越往底层走，测试独立性越高，耦合性变低</li></ol>\n<h2><a id=\"31__158\"></a>3.1 单元测试阶段</h2>\n<p>值得是对软件组成的最小的单元进行测试，查看测试单元的功能是否正常</p>\n<ol><li>测试阶段：一般单元测试之后进行</li><li>测试对象：模块间的接口</li><li>测试人员：白盒测试工程师或开发工程师</li><li>测试依据：单元测试的模块+概要设计文档</li><li>测试方法：黑盒测试与白盒测试相结合</li><li>测试内容：接口测试，局部数据结构测试，路径测试，边界测试，循环测试，错误处理测试，局部变量测试</li></ol>\n<h2><a id=\"32__168\"></a>3.2 集成测试</h2>\n<p>按照一定的逻辑和策略把单元模块组合在一起，形成一个具有完成功能的大模块。</p>\n<ol><li>测试阶段：一般单元测试之后进行</li><li>测试对象：模块间的接口</li><li>测试人员：白盒测试工程师或开发工程师</li><li>测试依据：单元测试的模块+概要设计文档</li><li>测试方法：黑盒测试与白盒测试相结合</li><li>测试内容：模块之间数据传输、模块之间功能冲突、模块组装功能正确性、全局数据结构、单模块缺陷对系统的影响</li></ol>\n<h2><a id=\"33__178\"></a>3.3 系统测试</h2>\n<p>对软件系统进行全面的功能和非功能测试</p>\n<ol><li>测试阶段：集成测试以后</li><li>测试对象：整个软件系统</li><li>测试人员：黑盒测试工程师</li><li>测试依据：需求设计文档</li><li>测试方法：黑盒测试</li><li>测试内容：系统的功能，界面，可靠性，容错性，易用性，可移植性，兼容性，安全性，性能，安装卸载（新软件）</li></ol>\n<h2><a id=\"34__188\"></a>3.4 回归测试</h2>\n<p>当系统引入了新代码的时候，测试人员往往需要验证新的代码对旧的功能产生的影响，所做的测试就叫回归测试。（增加新功能的时候 -&gt; 修改BUG）</p>\n<h2><a id=\"35__190\"></a>3.5 冒烟测试</h2>\n<p>在软件开发完成后，要对软件的基础功能和核心流程进行测试，测试通过之后，才可以进入正式的测试环境，如果测试不通过，测试人员有权利打回，让开发重新修改直到冒烟成功。</p>\n<blockquote>\n<p>回归测试和冒烟测试都属于系统测试。</p>\n</blockquote>\n<h2><a id=\"36__195\"></a>3.6 验收测试</h2>\n<p>软件上线前的最后一次测试，也称为交付测试。</p>\n<ol><li>测试阶段：系统测试之后</li><li>测试对象：整体软件系统</li><li>测试人员：用户</li><li>测试依据：用户需求</li><li>测试方法：黑盒测试</li><li>测试内容：同系统测试（文档测试），可用性分析文档，需求设计文档，软件设计文档，软件开发文档，功能手册，用户手册</li></ol>\n<h1><a id=\"4__205\"></a>4. 按照实施组织划分</h1>\n<h2><a id=\"41__206\"></a>4.1 α测试</h2>\n<p>在 β 测试之前进行的</p>\n<p>把用户或者非测试和开发的人请到开发现场进行测试；<br/> 测试环境：开发现场<br/> 测试人员：非开发和测试的人</p>\n<h2><a id=\"42__213\"></a>4.2 β测试</h2>\n<p>让实际用户在实际使用环境中进行测试，测试完成后对问题进行统一汇总反馈</p>\n<blockquote>\n<p><code>α 测试和 β 测试的区别：</code><br/> 测试环境不同；测试时间集中程度不同；α 测试优先 β 测试的</p>\n</blockquote>\n<h2><a id=\"43__218\"></a>4.3 第三方测试</h2>\n<p>是软件第三方测评机构，按照软件行业的标准规范对软件进行测试</p>\n<h1><a id=\"5__221\"></a>5. 按照代码是否运行划分</h1>\n<h2><a id=\"51__222\"></a>5.1 静态测试</h2>\n<p>不运行代码，检查代码的风格，格式是否符合公司的规范标准，检查代码的逻辑结构是否满足需求需要实现的功能。</p>\n<h2><a id=\"52__224\"></a>5.2 动态测试</h2>\n<p>运行代码，给程序响应的输入，看是否得到期望的输出</p>\n<blockquote>\n<p>大多数软件测试工作都属于动态测试。</p>\n</blockquote>\n<h1><a id=\"6__229\"></a>6. 按照是否手工划分</h1>\n<h2><a id=\"61__230\"></a>6.1 手工测试</h2>\n<p>按照测试用例，手工去测试系统的功能</p>\n<blockquote>\n<p><code>缺点：</code>量大容易出错；效率低；有些极端情况无法测试到<br/> <code>优点：</code>进行探索性测试，比较灵活</p>\n</blockquote>\n<h2><a id=\"62__235\"></a>6.2 自动化测试</h2>\n<p>机器按照认为设定好预设条件运行，这些预设包括正常的异常的，去检查软件系统有没有符合设定的条件。</p>\n<p>自动化测试把手工测试用例转化为脚本运行。</p>\n<h1><a id=\"7__240\"></a>7. 按照地域划分</h1>\n<h2><a id=\"71__242\"></a>7.1 软件国际化测试</h2>\n<p>软件国际化：进行软件设计和开发的时候，使用一种工程技术，使得软件在转化为不同的国家语言的时候，可以不用修改源码，适应不同的语言，不同国家人民的风俗习惯等（苹果手机 ， 华为手机 ，office ， Word）</p>\n<ol><li>外观上看界面功能没有缺失，正常使用</li><li>是否适应这个国家人的使用习惯，文字，日期，风俗习惯</li><li>度量单位，货币，重量单位</li><li>不同分辨率下，软件正常展示和使用</li><li>不同硬件设备</li></ol>\n<h2><a id=\"72__251\"></a>7.2 软件本地化测试</h2>\n<p>具体到某一个国家，上面讲的全是本地化测试</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}