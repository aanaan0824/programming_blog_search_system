{"blogid": "123073783", "writerAge": "码龄2年", "writerBlogNum": "68", "writerCollect": "1904", "writerComment": "1445", "writerFan": "6655", "writerGrade": "6级", "writerIntegral": "5475", "writerName": "AKA你的闺蜜", "writerProfileAdress": "writer_image\\profile_123073783.jpg", "writerRankTotal": "2912", "writerRankWeekly": "411", "writerThumb": "2641", "writerVisitNum": "78920", "blog_read_count": "1318", "blog_time": "已于 2022-02-25 00:34:32 修改", "blog_title": "C++初阶：内存管理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"CC__0\"></a>C/C++ 内存管理</h2>\n<blockquote>\n<p>程序启动后会将内存空间划分成这样的几块区域，便于更好的管理。</p>\n</blockquote>\n<h3><a id=\"1_CC__4\"></a>1. C/C++ 内存分布</h3>\n<p><img alt=\"\" src=\"image\\f9237ae1a1154d0eb6e6dfa67017bc79.png\"/></p>\n<ol><li>栈区：调用函数时，函数栈帧、函数形参、局部变量都会在栈区上创建。</li><li>堆区（<code>heap</code>）：运行时按需开辟的空间，从堆低向上开辟空间，堆顶向下释放空间。在程序结束后也被操作系统会自动回收。</li><li>数据段（静态区）：系统层面上被称为数据段，语言层面上叫作静态区。存放全局变量，静态数据。</li><li>代码段（常量区）：系统层面上被称为代码段，语言层面上叫作常量区。存放可执行代码、指令一类的和只读常量，这些东西一般不会被修改。</li></ol>\n<p>值得注意的是，字符串数组<code>char2</code>的内容<code>\"abcd\"</code>也是存储在栈上的，是从常量区拷贝过来的。</p>\n<p> </p>\n<h3><a id=\"2__18\"></a>2. 动态内存管理</h3>\n<h4><a id=\"21_C_20\"></a>2.1 C语言动态内存管理</h4>\n<h5><a id=\"malloccallocrealloc_free_22\"></a>malloc/calloc/realloc free</h5>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">size_t</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li><code>malloc</code>返回通用类型的指针，将其强制转换为所需类型，并用该类型的指针维护该内存空间。</li><li>开辟成功返回空间起始地址，开辟失败则返回<code>NULL</code>。</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">calloc</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">size_t</span> num<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>calloc</code>函数在堆区上申请<code>num</code>个<code>size</code>大小的空间，返回起始地址并将内容初始化为0。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">realloc</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> memblock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>realloc</code>函数为已开辟的空间重新开辟大小。</p>\n<ul><li>当原空间后有足够大小时，就紧接原空间开辟剩余空间，并返回整个空间的起始地址。反之，就在堆区寻找新空间，再将原空间的内容移动到新空间，返回新空间的地址且释放原空间。</li><li>当剩余空间不够无法开辟时，增容失败，返回<code>NULL</code>。</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">free</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> memblock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p><code>free</code>函数释放指针指向的动态开辟的空间，但不对指针造成任何影响。</p> </li><li> <p>使用结束<code>free</code>释放内存以防内存泄漏，将指针置空避免成为野指针。</p> </li></ul>\n<blockquote>\n<p>防止增容失败将原空间指针置空，故不可直接使用原指针接受返回值。判断非空后再赋给原指针。</p>\n</blockquote>\n<h4><a id=\"22_C__58\"></a>2.2 C++ 动态内存管理</h4>\n<p>C语言的动态内存管理不够方便在细节上还需要优化，所以C++进行了一些改动。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//C语言动态申请</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//动态释放</span>\n<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//C++动态申请</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//动态释放</span>\n<span class=\"token keyword\">delete</span> p3<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p4<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>使用关键字<code>new</code>开辟空间，不需要强制类型转换，new 后面跟的类型就是空间地址解引用后对应的类型。new和delete 操作连续空间使更加方便。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//初始化空间</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nA<span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> A<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>new 类型后面可以使用<code>()</code>进行初始化，按照类型的大小用相同的值初始化每块空间。</p>\n<blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>C++11支持用<code>{}</code>初始化连续空间。</p>\n</blockquote>\n<h5><a id=\"newdelete__95\"></a>new/delete 操作内置类型</h5>\n<p><img alt=\"\" src=\"image\\e4d6a191afa34264bcd0138447b17a5a.png\"/></p>\n<blockquote>\n<p>如图所示，监视1对应开辟空间，监视2对应着销毁空间的时候。可见，此时 malloc free 和 new delete 没有区别。</p>\n</blockquote>\n<p>malloc/free 和 new/delete 对内置类型没有本质区别，只有语法上的区别。</p>\n<h5><a id=\"newdelete__104\"></a>new/delete 操作自定义类型</h5>\n<p><img alt=\"\" src=\"image\\23ad825cdafd4f8695e2d85c0c85a393.png\"/></p>\n<ul><li>对于自定义类型，new 不仅会开出对应的空间，还会调用该类型对应的构造函数进行初始化。</li></ul>\n<blockquote>\n<p>自定义类型自动调用构造函数，比粗暴初始化的 calloc 更加人性化。由于 new 定义对象时没有传参，所以必须要类有默认构造函数。</p>\n</blockquote>\n<p><img alt=\"\" src=\"image\\1e969f77f30e4d5aa61e2d8d51748552.png\"/></p>\n<ul><li>对于自定义类型，delete 先自动调用析构函数，再释放空间。</li></ul>\n<h5><a id=\"_118\"></a>注意</h5>\n<p>malloc/free 和 new/delete 最好匹配使用，不要随意搭配，否则可能会出错。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//1.</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//2.</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//3.</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>C++之所以发明 new/delete 语法，原因有二：</p>\n<ol><li>操作自定义类型时，可以自动调用构造和析构函数以初始化和清理资源。</li><li>开辟或释放空间时，能够以抛异常的形式提示错误，符合面向对象的错误处理机制。</li></ol>\n<p> </p>\n<h3><a id=\"3_newdelete__141\"></a>3. new/delete 重载函数</h3>\n<blockquote>\n<p>new/delete 和 malloc/free 二者对于内置类型只有用法上的区别，对于自定义类型，会自动调用自定义类型的构造函数和析构函数。这是二者最大的区别，也是发明 new/delete 的目的。</p>\n</blockquote>\n<ul><li>new：先开辟空间，再调用构造函数</li><li>delete：先调用析构函数，再释放空间</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_capacity</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_top</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{<!-- --></span>\n\t\t_a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>_capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//不需要判空</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _a<span class=\"token punctuation\">;</span>\n\t\t_capacity <span class=\"token operator\">=</span> _top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//动态开辟，主动控制生命周期</span>\nStack<span class=\"token operator\">*</span> pst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//开辟空间，调用构造函数</span>\n<span class=\"token keyword\">delete</span> pst<span class=\"token punctuation\">;</span>                <span class=\"token comment\">//调用析构函数，释放空间</span>\n</code></pre>\n<h4><a id=\"31_new_delete__171\"></a>3.1 new/ delete 重载函数实现</h4>\n<p>new/delete是进行动态开辟和释放的操作符，operator new/operator delete 是系统提供的全局函数。</p>\n<p>new/delete的底层是分别调用operator new/operator delete 来实现的，而 operator new/operator delete 又是分别调用C语言的 malloc/free 实现的。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>__CRTDECL <span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span> <span class=\"token function\">_THROW1</span><span class=\"token punctuation\">(</span>_STD bad_alloc<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>       <span class=\"token comment\">// try to allocate size bytes</span>\n        <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_callnewh</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>       <span class=\"token comment\">// report no memory</span>\n                <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>bad_alloc nomem<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">_RAISE</span><span class=\"token punctuation\">(</span>nomem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pUserData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        _CrtMemBlockHeader <span class=\"token operator\">*</span> pHead<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">RTCCALLBACK</span><span class=\"token punctuation\">(</span>_RTC_Free_hook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pUserData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pUserData <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_mlock</span><span class=\"token punctuation\">(</span>_HEAP_LOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* block other threads */</span>\n        __TRY\n            <span class=\"token comment\">/* get a pointer to memory block header */</span>\n            pHead <span class=\"token operator\">=</span> <span class=\"token function\">pHdr</span><span class=\"token punctuation\">(</span>pUserData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token comment\">/* verify block type */</span>\n            <span class=\"token function\">_ASSERTE</span><span class=\"token punctuation\">(</span><span class=\"token function\">_BLOCK_TYPE_IS_VALID</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">-&gt;</span>nBlockUse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">_free_dbg</span><span class=\"token punctuation\">(</span> pUserData<span class=\"token punctuation\">,</span> pHead<span class=\"token operator\">-&gt;</span>nBlockUse <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        __FINALLY\n            <span class=\"token function\">_munlock</span><span class=\"token punctuation\">(</span>_HEAP_LOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* release other threads */</span>\n        __END_TRY_FINALLY\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"\" src=\"image\\5f0a36212edd40fab266729bd37a30fb.png\"/></p>\n<p>如图所示，调用 operator new 函数只能开辟空间和抛出异常，而 new 对象时会调用 operator new 函数，并调用构造函数。</p>\n<p>operator new/operator delete 就是对 malloc/free 的封装，operator new 可以说是符合面向对象特征的 malloc，多了抛异常的处理机制，更符合面向对象对程序异常的处理机制。operator delete 同理。</p>\n<blockquote>\n<p>operator new/operator delete 并不是提供给用户使用的函数，是提供给 free/delete 使用的。</p>\n</blockquote>\n<h4><a id=\"32_newdelete__219\"></a>3.2 new/delete 类专属重载*</h4>\n<blockquote>\n<p>operator new/operator delete 的类专属重载多用于解决项目中需要频繁的申请小块内存的问题，先向系统申请一块内存池，之后开辟空间就向内存池开辟空间，以免不必要的消耗。</p>\n</blockquote>\n<p>operator new 一般有两种形式，一是全局重载的 operator new，二是针对某个类专属定制的重载 operator new。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> A<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一般 operator new 就是用来分配内存的，系统默认的全局重载也是用 malloc 实现向堆上申请内存，并返回地址。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\tp <span class=\"token operator\">=</span> allocator<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//STL中内存池--空间配置器</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"memory pool allocate\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tallocator<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"memory pool deallocate\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tListNode<span class=\"token operator\">*</span> _prev<span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">*</span> _next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        _head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ListNode<span class=\"token punctuation\">;</span>\n        _head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n        _head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _head<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> _head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            ListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">delete</span> cur<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">delete</span> _head<span class=\"token punctuation\">;</span>\n        _head <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> _head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>new 不能被重载，其行为总是一致的。它先调用 operator new 分配内存，然后调用构造函数初始化那段空间。要实现不同的内存分配行为，应该重载函数 operator new，而不是重载操作符 new。</p>\n<p>使用 new/delete 操作对象时，系统会优先调用类专属的重载 operator new/delete，没有的话才会调用全局的。</p>\n<blockquote>\n<p>不管是全局还是类专属的 operator new 都是用来实现内存空间的开辟的。除此以外，operator new[]、operator delete、operator delete[] 也是可以重载的。</p>\n</blockquote>\n<h4><a id=\"33_newdelete__279\"></a>3.3 new/delete 实现原理</h4>\n<blockquote>\n<p>new/delete 的执行过程上面也已经探究过，实现原理也分为操作内置类型和自定义类型两种。</p>\n</blockquote>\n<h5><a id=\"_283\"></a>内置类型</h5>\n<p>对于内置类型，new/delete 分别调用 operator new/operator delete 函数去开辟或释放空间。和 malloc/free 基本类似，不同点上面已经讲解过，这里就不在赘述。</p>\n<h5><a id=\"_287\"></a>自定义类型</h5>\n<table><thead><tr><th>操作单个对象</th><th>实现原理</th></tr></thead><tbody><tr><td>new</td><td>调用 operator new 申请空间，调用构造函数构造对象</td></tr><tr><td>delete</td><td>调用析构函数清理资源，调用 operator delete 释放空间</td></tr><tr><td><strong>操作多个对象</strong></td><td><strong>实现原理</strong></td></tr><tr><td>new[N]</td><td>调用 operator new[] ，由该函数调用 operator new 申请N块空间，再调用N次构造函数构造对象</td></tr><tr><td>delete[]</td><td>调用N次析构函数清理资源，再调用 operator delete[]，由该函数调用 operator delete 释放空间</td></tr></tbody></table>\n<p> </p>\n<h3><a id=\"4__new__299\"></a>4. 定位 new 表达式*</h3>\n<h4><a id=\"41__301\"></a>4.1 使用方式</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//1.</span>\n<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>place_address<span class=\"token punctuation\">)</span> type<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//2.</span>\n<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>place_address<span class=\"token punctuation\">)</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>initailizer_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>定位 new 表达式是<strong>为已分配给对象的空间调用该类型的构造函数</strong>初始化该段空间。</p>\n<pre><code class=\"prism language-cpp\">Test<span class=\"token operator\">*</span> pt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Test<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//已开辟好的空间，调用构造函数</span>\n<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">)</span> Test<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">)</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如上述代码所示：<code>pt</code>是一开辟好的空间，使用定位 new 表达式初始化<code>pt</code>，会调用对象的构造函数初始化这段空间。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//1.</span>\nA<span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> A<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//2.</span>\nA<span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> A<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>可以说第一种和第二种方式是等价的，所以 new 开辟对象空间相当于调用 operator new 函数开辟空间再使用定位 new 表达式。</p>\n<h4><a id=\"42__331\"></a>4.2 使用场景</h4>\n<blockquote>\n<p>使用定位new表达式初始化一段已开辟好的空间，不如直接使用操作符 new 来的方便。</p>\n</blockquote>\n<p>定位 new 表达式实际上一般配合内存池使用。内存池分配的内存没有被初始化，如果分配给自定义类型的对象，需要使用定位 new 表达式进行显式调用构造函数。</p>\n<p>构造函数不可以显式调用，所以要使用 定位 new 表达式，但析构函数可以直接调用。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// new</span>\nA<span class=\"token operator\">*</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span> A<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// delete</span>\na2<span class=\"token operator\">-&gt;</span><span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p> </p>\n<h3><a id=\"5__350\"></a>5. 常见面试题</h3>\n<h4><a id=\"51_mallocfree__newdelete__352\"></a>5.1 malloc/free 和 new/delete 的区别</h4>\n<p>malloc/free 和 new/delete 的相同点是都是从堆上主动申请空间和释放空间，不同点是：</p>\n<table><thead><tr><th>用法上的区别</th></tr></thead><tbody><tr><td>malloc 申请空间需要计算大小并强转类型，new 只需要在后面跟上对象类型</td></tr><tr><td>malloc 申请空间失败时会返回NULL，因此需判空，new 失败时会抛异常</td></tr><tr><td><strong>底层上的区别</strong></td></tr><tr><td>malloc/free 是函数，new/delete 是操作符</td></tr><tr><td>malloc/free 申请/释放空间不存在初始化，new/delete 可以初始化和销毁空间</td></tr></tbody></table>\n<h4><a id=\"52__364\"></a>5.2 内存泄漏</h4>\n<h5><a id=\"_366\"></a>内存泄漏的定义</h5>\n<p>内存泄漏指的是因为疏忽或错误造成程序未能释放并不可再使用的内存空间。内存泄漏不是指内存物理层面的消失，而是给程序分配内存后，因错误失去了对该段内存的控制，造成了内存的浪费。</p>\n<p>内存泄漏可以在程序结束后返还给系统，但长期运行的程序出现内存泄漏的影响很大，如操作系统、服务器后台等，出现内存泄漏会导致程序变慢，最终卡死。</p>\n<h5><a id=\"_372\"></a>内存泄漏的分类</h5>\n<ul><li>堆内存泄漏</li></ul>\n<p>堆内存指的是程序执行中通过动态开辟的函数从堆中分配的一块内存，用完后必须通过调用相应的 free 或者 delete 释放掉。假设程序的设计错误导致这部分内存没有被释放，那么以后这部分空间在结束运行前将无法再被使用，也就是堆内存泄漏。</p>\n<ul><li>系统资源泄漏</li></ul>\n<p>指程序使用系统分配的资源，比如套接字、文件描述符、管道等没有使用对应的函数释放掉，导致系统资源的浪费，严重可导致系统效能减少，系统执行不稳定。</p>\n<h5><a id=\"_382\"></a>如何避免内存泄漏</h5>\n<ol><li>良好的设计规范，良好的编码规范。</li><li>采用 RAII 思想或者智能指针来管理资源。</li><li>公司内部规范使用内部实现的私有内存管理库。这套库自带内存泄漏检测的功能选项。</li><li>出问题了使用内存泄漏工具检测。</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}