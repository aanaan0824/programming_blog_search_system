{"blogid": "123730422", "writerAge": "码龄3年", "writerBlogNum": "4", "writerCollect": "47", "writerComment": "1", "writerFan": "3", "writerGrade": "1级", "writerIntegral": "57", "writerName": "CShadow7", "writerProfileAdress": "writer_image\\profile_123730422.jpg", "writerRankTotal": "168695", "writerRankWeekly": "283057", "writerThumb": "13", "writerVisitNum": "7681", "blog_read_count": "6245", "blog_time": "于 2022-03-27 16:52:26 发布", "blog_title": "Chrome插件开发入门", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>视频作者：<a href=\"https://space.bilibili.com/1424209245\" title=\"猿伙伴的个人空间_哔哩哔哩_bilibili\">猿伙伴的个人空间_哔哩哔哩_bilibili</a></strong></p>\n<p><strong>源码：<a class=\"link-info\" href=\"https://pan.baidu.com/s/1EUOUo6QwHezyddmslyFsJQ\" title=\"https://pan.baidu.com/s/1EUOUo6QwHezyddmslyFsJQ\">https://pan.baidu.com/s/1EUOUo6QwHezyddmslyFsJQ</a>   提取码：xtex </strong></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6helloWorld-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6helloWorld\">一、第一个插件helloWorld</a></p>\n<p id=\"%E4%BA%8C%E3%80%81JavaScript%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81JavaScript%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">二、JavaScript的基本用法</a></p>\n<p id=\"%E4%B8%89%E3%80%81storage%E7%9A%84%E7%94%A8%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81storage%E7%9A%84%E7%94%A8%E6%B3%95\">三、storage的用法</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E8%AE%BE%E7%BD%AE%E6%8F%92%E4%BB%B6%E5%8F%82%E6%95%B0option_page-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E8%AE%BE%E7%BD%AE%E6%8F%92%E4%BB%B6%E5%8F%82%E6%95%B0option_page\">四、设置插件参数option_page</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5notifications-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5notifications\">五、消息通知notifications</a></p>\n<p id=\"%E5%85%AD%E3%80%81%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95contextMenus-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AD%E3%80%81%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95contextMenus\">六、右键菜单contextMenus</a></p>\n<p id=\"%E4%B8%83%E3%80%81%E5%BE%BD%E7%AB%A0Badge-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81%E5%BE%BD%E7%AB%A0Badge\">七、徽章Badge</a></p>\n<p id=\"%E5%85%AB%E3%80%81%E9%92%88%E5%AF%B9%E7%89%B9%E5%AE%9A%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%8F%92%E4%BB%B6pageAction-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AB%E3%80%81%E9%92%88%E5%AF%B9%E7%89%B9%E5%AE%9A%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%8F%92%E4%BB%B6pageAction\">八、针对特定页面的插件pageAction</a></p>\n<p id=\"%E4%B9%9D%E3%80%81%E5%90%91%E9%A1%B5%E9%9D%A2%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81content_scripts-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B9%9D%E3%80%81%E5%90%91%E9%A1%B5%E9%9D%A2%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81content_scripts\">九、向页面注入代码content_scripts</a></p>\n<p id=\"%E5%8D%81%E3%80%81%E9%87%8D%E5%86%99%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2chrome_url_overrides-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E3%80%81%E9%87%8D%E5%86%99%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2chrome_url_overrides\">十、重写浏览器页面chrome_url_overrides</a></p>\n<p id=\"%E5%8D%81%E4%B8%80%E3%80%81%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%B8%80%E3%80%81%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91%E6%A1%88%E4%BE%8B\">十一、谷歌翻译案例</a></p>\n<p id=\"%E5%8D%81%E4%BA%8C%E3%80%81%20%E8%AF%AD%E9%9F%B3%E6%9C%97%E8%AF%BB%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%BA%8C%E3%80%81%20%E8%AF%AD%E9%9F%B3%E6%9C%97%E8%AF%BB%E6%A1%88%E4%BE%8B\">十二、 语音朗读案例</a></p>\n<p id=\"%E5%8D%81%E4%B8%89%E3%80%81content_scripts%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%B8%89%E3%80%81content_scripts%E7%AE%80%E4%BB%8B\">十三、content_scripts简介</a></p>\n<p id=\"%E5%8D%81%E5%9B%9B%E3%80%81%E6%9B%B4%E4%BE%BF%E6%8D%B7%E5%9C%B0%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81executeScript-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E5%9B%9B%E3%80%81%E6%9B%B4%E4%BE%BF%E6%8D%B7%E5%9C%B0%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81executeScript\">十四、更便捷地注入代码executeScript</a></p>\n<p id=\"%C2%A0%E5%8D%81%E4%BA%94%E3%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BEweb_accessible_resources-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E5%8D%81%E4%BA%94%E3%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BEweb_accessible_resources\">十五、设置背景图web_accessible_resources</a></p>\n<p id=\"%E5%8D%81%E4%B8%83%E3%80%81%E4%BF%AE%E6%94%B9%E9%A1%B5%E9%9D%A2%E6%A0%B7%E5%BC%8FinsertCSS-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%B8%83%E3%80%81%E4%BF%AE%E6%94%B9%E9%A1%B5%E9%9D%A2%E6%A0%B7%E5%BC%8FinsertCSS\">十六、修改页面样式insertCSS</a></p>\n<p id=\"%E5%8D%81%E5%85%AB%E3%80%81%20%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%B6%88%E6%81%AFconnect-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E5%85%AB%E3%80%81%20%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%B6%88%E6%81%AFconnect\">十七、 长连接消息connect</a></p>\n<p id=\"%E5%8D%81%E5%85%AB%E3%80%81%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E5%85%AB%E3%80%81%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E6%A1%88%E4%BE%8B\">十八、百度翻译案例</a></p>\n<p id=\"%E4%BA%8C%E5%8D%81%E3%80%81%20%E6%8F%92%E4%BB%B6%E8%B0%83%E8%AF%95Debug-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E5%8D%81%E3%80%81%20%E6%8F%92%E4%BB%B6%E8%B0%83%E8%AF%95Debug\">十九、 插件调试Debug</a></p>\n<p id=\"%E4%BA%8C%E5%8D%81%E4%B8%80%E3%80%81%E6%8F%92%E4%BB%B6%E6%89%93%E5%8C%85-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E5%8D%81%E4%B8%80%E3%80%81%E6%8F%92%E4%BB%B6%E6%89%93%E5%8C%85\">二十、插件打包</a></p>\n<hr/>\n<h1 id=\"%E4%B8%80%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6helloWorld\">一、第一个插件helloWorld</h1>\n<ul><li>1、首先新建文件夹helloWorld，用于放入插件代码，并将文件夹拖入vscode内；</li></ul>\n<p><img alt=\"\" height=\"103\" src=\"image\\56a4e9c7c8cf48e38e2cd9eef3bcb55d.png\" width=\"457\"/></p>\n<ul><li>2、在vscode内该文件夹中，创建manifest.json文件，进行插件信息的配置；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,//版本号，由google指定为2\n    \"name\": \"helloWorld\",//插件名称\n    \"version\":\"1.0\",//插件版本\n    \"description\":\"hello world 插件\",//插件描述\n    \"icons\":{//插件图标\n        \"128\":\"img/logo.png\",\n        \"48\":\"img/logo.png\",\n        \"16\":\"img/logo.png\"\n    },\n    \"browser_action\":{\n        \"default_icon\":\"img/logo.png\",//插件图标\n        \"default_popup\":\"popup.html\"//点击图标后弹出的html互动文件\n    }\n    \n}</code></pre>\n<ul><li>3、创建popup.html文件，进行点击图标后弹出窗口的配置；</li></ul>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;helloWorld&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"/&gt;\n    &lt;/head&gt;\n    &lt;body style=\"width: 200px;height: 200px;\"&gt;\n        &lt;h1 id =\"message\"&gt;你好&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<ul><li>4、将插件图标文件移入到插件根目录文件夹下；</li></ul>\n<p><img alt=\"\" height=\"205\" src=\"image\\035b56b039744a81ae74e45dc9bfe20c.png\" width=\"217\"/></p>\n<ul><li>5、进入Chrome浏览器，输入chrome://extensions/进入扩展程序界面，找到位于右上角的开发者模式，打开；</li><li>6、点击加载已解压的扩展程序，找到刚才的helloWorld文件夹，选择即可加载插件；</li></ul>\n<p><strong>问题：</strong>此处疑似需要使用原生的png图片，我用了jpg图片转png图片后，插件图标一直显示不出来，不太清楚是什么原因，后来换成原生的png图片就可以显示了。</p>\n<ul><li>7、点击右上角的扩展程序按钮，找到对应的helloWorld插件，点击固定按钮，将插件固定在Chrome主界面上；</li></ul>\n<p><img alt=\"\" height=\"168\" src=\"image\\ef0d1c68ccd54ca795db1753af8f5d70.png\" width=\"325\"/></p>\n<ul><li>8、点击右上角的helloWorld插件按钮，插件开发完毕。</li></ul>\n<p><img alt=\"\" height=\"129\" src=\"image\\000b77bcd3db4d31b0cbf4db35a460e8.png\" width=\"184\"/></p>\n<hr/>\n<h1 id=\"%E4%BA%8C%E3%80%81JavaScript%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">二、JavaScript的基本用法</h1>\n<ul><li><strong>目的：</strong>为了给插件添加一个输入框，并实现随着输入框的输入不同，插件弹出的语句也不同的功能。</li><li>1、在上一节的基础上，在根目录下创建js包；</li></ul>\n<p><img alt=\"\" height=\"155\" src=\"image\\97fa662b1c5343a989c4d369c1cfe25f.png\" width=\"154\"/></p>\n<ul><li>2、在js包中，首先引入jquery库简化JavaScript代码，jquery库可以从<a class=\"link-info\" href=\"https://www.jq22.com/jquery-info122\" title=\"jquery包全版本下载\">jquery包全版本下载</a>网址下载，将下载好的jquery文件放入到js文件夹下；</li></ul>\n<p><img alt=\"\" height=\"58\" src=\"image\\504b9387b3034769859fd4bb8a745c43.png\" width=\"219\"/></p>\n<ul><li>3、在js包中，创建popup.js文件，写入JavaScript代码，实现插件的逻辑功能；</li></ul>\n<pre><code class=\"language-javascript\">$(function(){\n    $('#input1').keyup(function(){\n        $('#message').text('你好'+$('#input1').val())\n    })\n})</code></pre>\n<ul><li> 4、进入popup.html文件，在&lt;head&gt;标签内更改html代码，导入jquery.js及popup.js；</li></ul>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;helloWorld&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"/&gt;\n        &lt;script src=\"js/jquery-3.3.1.min.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"js/popup.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body style=\"width: 200px;height: 200px;\"&gt;\n        &lt;h1 id =\"message\"&gt;你好&lt;/h1&gt;\n        &lt;input id=\"input1\" type=\"text\"/&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<ul><li>5、在Chrome上传插件，即可完成插件开发。</li></ul>\n<p><img alt=\"\" height=\"107\" src=\"image\\33217ffdb7c04d4f89c77f12d9b76553.png\" width=\"275\"/></p>\n<hr/>\n<h1 id=\"%E4%B8%89%E3%80%81storage%E7%9A%84%E7%94%A8%E6%B3%95\">三、storage的用法</h1>\n<ul><li><strong>目的：</strong>为了在第3节中实现一个金额计数器的功能插件，需要使用到chrome的storage存储功能，该功能可以将插件中需要保存的数据写入到本地磁盘，从而帮助存储每次累加的金额，而不至于下一次打开插件，金额就归0需要重新计算。</li><li>1、首先在第2节的基础上，在manifest.json中加入下列语句，赋予chrome.storage的权限；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"helloEverything\",\n    \"version\":\"1.0\",\n    \"description\":\"hello everything 插件\",\n    \"icons\":{\n        \"128\":\"img/logo.png\",\n        \"48\":\"img/logo.png\",\n        \"16\":\"img/logo.png\"\n    },\n    \"browser_action\":{\n        \"default_icon\":\"img/logo.png\",\n        \"default_popup\":\"popup.html\"     \n    },\n    \"permissions\":[\n        \"storage\"\n    ]\n}</code></pre>\n<ul><li> 2、在popup.html文件中，在&lt;body&gt;标签内，写入以下html语句，实现金额计数器的UI界面；</li></ul>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;helloWorld&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"/&gt;\n        &lt;script src=\"js/jquery-3.3.1.min.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"js/popup.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body style=\"width: 400px;height: 400px;\"&gt;\n        &lt;h2&gt;总金额:&lt;span id=\"total\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;h2&gt;本次使用:&lt;input type=\"text\" id=\"amount\"&gt;&lt;/h2&gt;\n        &lt;input type=\"submit\" id=\"add\" value=\"添加\"/&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p><img alt=\"\" height=\"97\" src=\"image\\1efa03a628dc4e61a8bc55ea116ece39.png\" width=\"337\"/></p>\n<ul><li>3、在js文件夹内的popup.js文件内，写入JavaScript的逻辑代码，实现金额计数器的逻辑功能；</li></ul>\n<pre><code class=\"language-javascript\">$(function(){\n    //在第一次运行时，如果总金额为0，也不会留空，而是有值显示\n    chrome.storage.sync.get('total',function(budget){\n        $('#total').text(budget.total);\n    });\n    $('#add').click(function(){\n        //1、从浏览器获取存储的金额\n        chrome.storage.sync.get('total',function(budget){\n            var totalAmount = 0;\n            if(budget.total){\n                totalAmount = parseFloat(budget.total);\n            }\n            //2、将本次金额加到总金额中\n            var amount = $('#amount').val();\n            if(amount){\n                totalAmount += parseFloat(amount);\n                chrome.storage.sync.set({'total':totalAmount});\n            }\n            //3、更新显示ui\n            $('#total').text(totalAmount);\n            $('#amount').val('');\n        })\n    })\n})</code></pre>\n<ul><li>4、在Chrome上传插件，即可完成插件开发，金额加入前后如下。</li></ul>\n<p> <img alt=\"\" height=\"96\" src=\"image\\bc6fd9453a7e4247be782cd5bc14adcf.png\" width=\"290\"/>→<img alt=\"\" height=\"98\" src=\"image\\c262ea0dbbe548fe8a6c2369141ccdac.png\" width=\"285\"/></p>\n<hr/>\n<h1 id=\"%E5%9B%9B%E3%80%81%E8%AE%BE%E7%BD%AE%E6%8F%92%E4%BB%B6%E5%8F%82%E6%95%B0option_page\">四、设置插件参数option_page</h1>\n<ul><li><strong>目的：</strong>为了给金额计数器插件，添加限制金额及总金额清除的功能，第4节引入了options_page功能配置插件参数.</li><li>1、首先进入到manifest.json中，添加下列语句赋予插件options_page的权限；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"optionsPage\",\n    \"version\":\"1.0\",\n    \"description\":\"optionsPage 插件\",\n    \"icons\":{\n        \"128\":\"img/logo.png\",\n        \"48\":\"img/logo.png\",\n        \"16\":\"img/logo.png\"\n    },\n    \"browser_action\":{\n        \"default_icon\":\"img/logo.png\",\n        \"default_popup\":\"popup.html\"     \n    },\n    \"permissions\":[\n        \"storage\"\n    ],\n    \"options_page\":\"options.html\"\n}</code></pre>\n<ul><li> 2、创建options.html，实现options页面的UI设计；</li></ul>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;budget manager options&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"/&gt;\n        &lt;script src=\"js/jquery-3.3.1.min.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"js/options.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;预算管理选项&lt;/h1&gt;\n        &lt;h2&gt;预算限制:&lt;input type=\"text\" id=\"limit\"/&gt;&lt;/h2&gt;\n        &lt;input type=\"submit\" id=\"setLimit\" value=\"保存限制\"/&gt;\n        &lt;input type=\"submit\" id=\"resetTotal\" value=\"清除总金额\"/&gt;\n    &lt;/body&gt;\n&lt;/html&gt; </code></pre>\n<p><img alt=\"\" height=\"126\" src=\"image\\5e8cff1f6c984e1aaf26ceb2543f917f.png\" width=\"280\"/></p>\n<ul><li>3、进入js文件夹，创建options.js文件，实现了options.html中按钮的互动逻辑；</li></ul>\n<pre><code class=\"language-javascript\">$(function(){\n    chrome.storage.sync.get('limit',function(budget){\n        $('#limit').val(budget.limit);\n    })\n\n    $('#setLimit').click(function(){\n        var limit = $('#limit').val();\n        if(limit){\n            chrome.storage.sync.set({'limit':limit},function(){\n                close();\n            })\n        }\n    })\n\n    $('#resetTotal').click(function(){\n        chrome.storage.sync.set({'total':0});\n    })\n})</code></pre>\n<ul><li>4、更新popup.html，加入限制金额的UI；</li></ul>\n<pre><code class=\"language-html\">&lt;h2&gt;限制金额:&lt;span id=\"limit\"&gt;&lt;/span&gt;&lt;/h2&gt;</code></pre>\n<ul><li>5、更新popup.js，加入限制金额的初始化代码；</li></ul>\n<pre><code class=\"language-javascript\">chrome.storage.sync.get(['total','limit'],function(budget){\n    $('#total').text(budget.total);\n    $('#limit').text(budget.limit);\n});</code></pre>\n<ul><li>6、将插件上传到Chrome，完成插件开发。</li></ul>\n<hr/>\n<h1 id=\"%E4%BA%94%E3%80%81%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5notifications\">五、消息通知notifications</h1>\n<ul><li><strong>目的：</strong>为了让金额计数器在总金额超过限制金额及总金额清零的时候发送chrome通知，第5节引入notifications消息通知</li><li>1、首先在manifest.json中添加下列语句，为金额计数器添加消息通知权限；</li></ul>\n<pre><code>\"permissions\":[\n    \"storage\",\n    \"notifications\"\n],</code></pre>\n<ul><li> 2、修改popup.js及options.js，为其添加消息通知逻辑功能；</li></ul>\n<pre><code class=\"language-javascript\">$(function(){\n    //在第一次运行时，如果总金额为0，也不会留空，而是有值显示\n    chrome.storage.sync.get(['total','limit'],function(budget){\n        $('#total').text(budget.total);\n        $('#limit').text(budget.limit);\n    });\n    $('#add').click(function(){\n        //1、从浏览器获取存储的金额\n        chrome.storage.sync.get('total',function(budget){\n            var totalAmount = 0;\n            if(budget.total){\n                totalAmount = parseFloat(budget.total);\n            }\n            //2、将本次金额加到总金额中\n            var amount = $('#amount').val();\n            if(amount){\n                totalAmount += parseFloat(amount);\n                chrome.storage.sync.set({'total':totalAmount},function(){\n                    if(totalAmount &gt; parseFloat(budget.limit)){\n                        var notifyOptions = {\n                            type:'basic',\n                            title:'提示！',\n                            iconUrl:'img/logo.png',\n                            message:'您消费的总金额已经超出限制！'\n                        }\n                        chrome.notifications.create('limitNotify',notifyOptions);\n                    }\n                });\n            }\n            //3、更新显示ui\n            $('#total').text(totalAmount);\n            $('#amount').val('');\n        })\n    })\n})</code></pre>\n<pre><code class=\"language-javascript\">$(function(){\n    chrome.storage.sync.get('limit',function(budget){\n        $('#limit').val(budget.limit);\n    })\n\n    $('#setLimit').click(function(){\n        var limit = $('#limit').val();\n        if(limit){\n            chrome.storage.sync.set({'limit':limit},function(){\n                close();\n            })\n        }\n    })\n\n    $('#resetTotal').click(function(){\n        chrome.storage.sync.set({'total':0},function(){\n            var notifyOptions = {\n                type:'basic',\n                title:'提示！',\n                iconUrl:'img/logo.png',\n                message:'您消费的总金额已经清0！'\n            }\n            chrome.notifications.create('limitNotify',notifyOptions);\n        });\n    })\n})</code></pre>\n<ul><li>3、将插件上传至Chrome，插件开发完成，消息通知结果如下。</li></ul>\n<p><img alt=\"\" height=\"125\" src=\"image\\9865b97e5b144ee7a1c9bfcd749657d2.png\" width=\"329\"/></p>\n<hr/>\n<h1 id=\"%E5%85%AD%E3%80%81%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95contextMenus\">六、右键菜单contextMenus</h1>\n<ul><li><strong>目的：</strong>为了可以将被鼠标直接右键点击的数字加入到金额计数器中计算总金额，第6节引入了contextMenus功能。</li><li>1、首先进入manifest.json文件，在permission字条中添加contextMenus，并添加background字条关联event Page.js文件；</li></ul>\n<pre><code>\"background\":{\n    \"scripts\":[\"js/eventPage.js\"],//关联的代码\n    \"persistent\":false//是否在页面上一直运行\n},\n\"permissions\":[\n    \"storage\",\n    \"notifications\",\n    \"contextMenus\"\n],\n    \n</code></pre>\n<ul><li>2、在js文件夹内，添加eventPage.js文件，创建右击后的contextMenus并为其添加事件监听；</li></ul>\n<pre><code class=\"language-javascript\">//1、创建contextMenus\nvar contextMenu = {\n    id:\"addAmount\",\n    title:\"添加消费\",\n    //contexts:page,video...\n    contexts:[\"selection\"]\n}\nchrome.contextMenus.create(contextMenu);\n//2、为contextMenus添加事件监听\nchrome.contextMenus.onClicked.addListener(function(clickData){\n    //clickData.menuItemId:被点击的菜单选项卡的id\n    //clickData.selectionText:选中的内容\n    if(clickData.menuItemId == 'addAmount' &amp;&amp; clickData.selectionText){\n        var amount = parseFloat(clickData.selectionText);\n        //1、从浏览器获取存储的金额\n        chrome.storage.sync.get('total',function(budget){\n            var totalAmount = 0;\n            if(budget.total){\n                totalAmount = parseFloat(budget.total);\n            }\n            //2、将本次金额加到总金额中\n            if(amount){\n                totalAmount += amount;\n                chrome.storage.sync.set({'total':totalAmount},function(){\n                    if(totalAmount &gt; parseFloat(budget.limit)){\n                        var notifyOptions = {\n                            type:'basic',\n                            title:'提示！',\n                            iconUrl:'img/logo.png',\n                            message:'您消费的总金额已经超出限制！'\n                        }\n                        chrome.notifications.create('limitNotify',notifyOptions);\n                    }\n                });\n            }\n        })\n    }\n})</code></pre>\n<ul><li>3、将插件上传至Chrome，则插件开发完成，对功能的演示如下。</li></ul>\n<p><img alt=\"\" height=\"87\" src=\"image\\f15cd14069ee4faa80f3f98ddab89c39.png\" width=\"193\"/>→<img alt=\"\" height=\"125\" src=\"image\\135258500d914c2f8a14ab9e35de4c5b.png\" width=\"269\"/>→<img alt=\"\" height=\"86\" src=\"image\\699407f9fd6d4bce89feb01177b7e324.png\" width=\"175\"/></p>\n<hr/>\n<h1 id=\"%E4%B8%83%E3%80%81%E5%BE%BD%E7%AB%A0Badge\">七、徽章Badge</h1>\n<ul><li><strong>目的：</strong>为了实现将总金额直接显示在图标上，而不用每次都点开弹窗才能看得到总金额，第7节引入徽章badge功能。</li><li>1、直接进入eventPage界面，添加如下代码实现功能；</li></ul>\n<pre><code class=\"language-javascript\">//设置Badge徽章\nchrome.storage.onChanged.addListener(function(changes,storageName){\n    //changes.total.newValue:总金额变化后的值\n    chrome.browserAction.setBadgeText({\"text\":changes.total.newValue.toString()});\n    chrome.browserAction.setBadgeBackgroundColor({\"color\":[0,255,0,255]});\n});</code></pre>\n<ul><li>2、将插件上传，完成插件开发，功能效果如下。</li></ul>\n<p><img alt=\"\" height=\"31\" src=\"image\\b2c1899f18044fd29166e3f36a18e7d1.png\" width=\"157\"/></p>\n<hr/>\n<h1 id=\"%E5%85%AB%E3%80%81%E9%92%88%E5%AF%B9%E7%89%B9%E5%AE%9A%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%8F%92%E4%BB%B6pageAction\">八、针对特定页面的插件pageAction</h1>\n<ul><li><strong>目的：</strong>之前实现的browserAction插件，在任何界面上都可以使用，而为了实现仅针对特定页面的插件，第8节引入了pageAction功能。</li><li>1、首先创建新的manifest文件，需要注意的是，这里的新增了page_action词条，并且permission词条中加入了tabs权限；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"pageAction\",\n    \"version\":\"1.0\",\n    \"description\":\"pageAction 插件\",\n    \"icons\":{\n        \"128\":\"img/f.png\",\n        \"48\":\"img/f.png\",\n        \"16\":\"img/f.png\"\n    },\n    \"page_action\":{\n        \"default_icon\":\"img/f.png\",\n        \"default_title\":\"pageAction 插件\",\n        \"default_popup\":\"popup.html\"     \n    },\n    \"background\":{\n        \"scripts\":[\"js/pageAction.js\"],\n        \"persistent\":false\n    },\n    \"permissions\":[\n        \"tabs\"\n    ]\n}</code></pre>\n<ul><li> 2、 创建popup.html，完成插件UI的编写；</li></ul>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;page action&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"/&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;page action 插件&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<ul><li>3、创建pageAction.js文件，完成针对特定网页启动插件的功能逻辑代码；</li></ul>\n<pre><code class=\"language-javascript\">//chrome.tabs.query:查询当前的窗口是否为淘宝，如果是，则将当前的窗口存入到tabs中\n//chrome.pageAction.show:将插件在之前传入到tabs的窗口中进行展示\nchrome.tabs.query({currentWindow:true,url:\"https://www.taobao.com/\"},function(tabs){\n    chrome.pageAction.show(tabs[0].id);\n})</code></pre>\n<ul><li>4、将插件上传到Chrome，完成插件的开发，对于特定页面的识别功能如下。</li></ul>\n<p><img alt=\"\" height=\"411\" src=\"image\\cfbb970565ee4f4f88210f9a98f49bf8.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"328\" src=\"image\\a61fe00f808a44f682d9510ab0fc89dd.png\" width=\"1200\"/></p>\n<hr/>\n<h1 id=\"%E4%B9%9D%E3%80%81%E5%90%91%E9%A1%B5%E9%9D%A2%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81content_scripts\">九、向页面注入代码content_scripts</h1>\n<ul><li><strong>目的：</strong>在第8节中，我们先通过匹配页面的url，再确定当前插件是否可在页面上可用，然而我们在实际操作中一般不这么做，在实际操作中，我们一般向特定的页面进行注入代码，然后动态地进行识别。</li><li>1、首先在manifest.json中，加入\"content_scripts\"词条，匹配特定的页面，并向页面注入代码；同时在permission词条中，加入所需匹配的页面；</li></ul>\n<pre><code>\"permissions\":[\n    \"tabs\",\n    \"https://*.baidu.com/\"\n],\n\"content_scripts\":[\n    {\n        \"matches\":[\"https://*.baidu.com/\"],\n        \"js\":[\"js/jquery-3.3.1.min.js\",\"js/content.js\"]\n    }\n]</code></pre>\n<ul><li>2、创建content.js作为向页面内注入代码的JavaScript文件，此时被注入的页面会发送消息；</li></ul>\n<pre><code class=\"language-javascript\">//消息发送出去\nchrome.runtime.sendMessage({todo:\"showPageAction\"});</code></pre>\n<ul><li>3、创建pageAction.js文件，用于接受由特定页面发送的消息，并判断当前打开的动态页面是否可以匹配上发送消息的页面，如果匹配成功，则让插件可以在该页面上使用；</li></ul>\n<pre><code class=\"language-javascript\">//由content.js实现发送消息的逻辑后，通过pageAction实现接受消息的逻辑\nchrome.runtime.onMessage.addListener(function(request,sender,response){\n    //通过匹配接受到消息的todo是否为showPageAction，从而确定当前接受的消息是否是目标消息，\n    //如果是，则使插件可以在当前页面使用\n    if(request.todo==\"showPageAction\"){\n        chrome.tabs.query({active:true,currentWindow:true},function(tabs){\n            chrome.pageAction.show(tabs[0].id);\n        });\n    }\n});</code></pre>\n<ul><li>4、将插件上传到Chrome，则插件开发完成，功能演示，如下，本章使用*.baidu.com作为特定页面，则插件仅可以在百度页面使用。</li></ul>\n<p><img alt=\"\" height=\"299\" src=\"image\\432426c54f294d4da57c3b3ac6aa1b06.png\" width=\"651\"/></p>\n<p><img alt=\"\" height=\"265\" src=\"image\\0010d8e8838f43888ab50183bf96fa6e.png\" width=\"640\"/></p>\n<hr/>\n<h1 id=\"%E5%8D%81%E3%80%81%E9%87%8D%E5%86%99%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2chrome_url_overrides\">十、重写浏览器页面chrome_url_overrides</h1>\n<ul><li><strong>目的：</strong>目前可以重写的页面包括：新标签页、历史记录页面和书签页面，通过引入chrome_url_overrides可以将这三个页面重写为我们想要的样子。</li><li>1、创建manifest.json，添加chrome_url_overrides标签，指定需要重写的页面(新标签页:newtab，历史记录页面:history，书签页:bookmarks)，需要注意的是，每个插件仅可以重写一个页面；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"pageAction\",\n    \"version\":\"1.0\",\n    \"description\":\"pageAction 插件\",\n    \"icons\":{\n        \"128\":\"img/f.png\",\n        \"48\":\"img/f.png\",\n        \"16\":\"img/f.png\"\n    },\n    \"chrome_url_overrides\":{\n        \"newtab\":\"new.html\"\n    }\n}</code></pre>\n<ul><li> 2、创建new.html，编写新页面的代码；</li></ul>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;CShadow7的博客&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"/&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;CShadow7的博客&lt;/h1&gt;\n        &lt;h2&gt;&lt;a href=\"https://blog.csdn.net/CShadow7?spm=1000.2115.3001.5343/\"&gt;\n            https://blog.csdn.net/CShadow7?spm=1000.2115.3001.5343/&lt;/a&gt;&lt;/h2&gt;\n        &lt;h2&gt;视频讲解，源码分析，文字笔记，真正能学会的教程！！&lt;/h2&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<ul><li> 3、上传插件到chrome，完成开发，页面如下。</li></ul>\n<p><img alt=\"\" height=\"198\" src=\"image\\d429b6534b7f43b28b6f54518fdb0eea.png\" width=\"534\"/></p>\n<hr/>\n<h1 id=\"%E5%8D%81%E4%B8%80%E3%80%81%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91%E6%A1%88%E4%BE%8B\">十一、谷歌翻译案例</h1>\n<ul><li><strong>目的：</strong>为了实现在任何页面上，随机选定一个单词，都可以右键使用google翻译的功能。</li><li>1、创建manifest.json；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"translation\",\n    \"version\":\"1.0\",\n    \"description\":\"谷歌翻译插件\",\n    \"icons\":{\n        \"128\":\"img/f.png\",\n        \"48\":\"img/f.png\",\n        \"16\":\"img/f.png\"\n    },\n    \"background\":{\n        \"scripts\":[\"js/translate.js\"],\n        \"persistent\":false\n    },\n    \"permissions\":[\n        \"contextMenus\"\n    ]\n}</code></pre>\n<ul><li>2、创建translate.js文件；</li></ul>\n<pre><code class=\"language-javascript\">var menuItem = {\n    \"id\":\"translate\",\n    \"title\":\"使用谷歌翻译\",\n    \"contexts\":[\"selection\"]\n}\nchrome.contextMenus.create(menuItem);\n\nchrome.contextMenus.onClicked.addListener(function(clickData){\n    //clickData.menuItemId:被点击的菜单选项卡的id\n    //clickData.selectionText:选中的内容\n    if(clickData.menuItemId == 'translate' &amp;&amp; clickData.selectionText){\n        //配置createData的参数\n        var createData = {\n            url:\"https://translate.google.cn/?sl=zh-CN&amp;tl=en&amp;text=\"+clickData.selectionText+\"&amp;op=translate\",\n            type:\"popup\",\n            top:5,\n            left:5,\n            width:screen.availWidth/2,\n            height:screen.availHeight/2\n        }\n        chrome.windows.create(createData);\n    }\n})</code></pre>\n<ul><li>3、上传插件到Chrome，完成插件开发，功能如下。</li></ul>\n<p><img alt=\"\" height=\"201\" src=\"image\\03bb79c6a49e4e5cac1352f6a80530c7.png\" width=\"414\"/></p>\n<p><img alt=\"\" height=\"197\" src=\"image\\ece58c1ab56e49269267802799e716f9.png\" width=\"500\"/></p>\n<hr/>\n<h1 id=\"%E5%8D%81%E4%BA%8C%E3%80%81%20%E8%AF%AD%E9%9F%B3%E6%9C%97%E8%AF%BB%E6%A1%88%E4%BE%8B\">十二、 语音朗读案例</h1>\n<ul><li><strong>目的：</strong>为了实现在任何页面上，随机选定一个单词，都可以右键使用语音朗读的功能；</li><li>1、创建manifest.json，在permission标签中加入tts权限，启用google自带的语音朗读功能；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"tts\",\n    \"version\":\"1.0\",\n    \"description\":\"语音朗读插件\",\n    \"icons\":{\n        \"128\":\"img/f.png\",\n        \"48\":\"img/f.png\",\n        \"16\":\"img/f.png\"\n    },\n    \"background\":{\n        \"scripts\":[\"js/speak.js\"],\n        \"persistent\":false\n    },\n    \"permissions\":[\n        \"contextMenus\",\n        \"tts\"\n    ]\n}</code></pre>\n<ul><li> 2、创建speak.js文件；</li></ul>\n<pre><code class=\"language-javascript\">var menuItem = {\n    \"id\":\"tts\",\n    \"title\":\"使用语音朗读\",\n    \"contexts\":[\"selection\"]\n}\nchrome.contextMenus.create(menuItem);\n\nchrome.contextMenus.onClicked.addListener(function(clickData){\n    //clickData.menuItemId:被点击的菜单选项卡的id\n    //clickData.selectionText:选中的内容\n    if(clickData.menuItemId == 'tts' &amp;&amp; clickData.selectionText){\n        chrome.tts.speak(clickData.selectionText,{\"rate\":0.7});\n    }\n})</code></pre>\n<ul><li> 3、上传插件到Chrome，完成插件开发，功能如下。</li></ul>\n<p><img alt=\"\" height=\"162\" src=\"image\\4ed7d26829b74baeb76e94e2f68164ad.png\" width=\"646\"/></p>\n<hr/>\n<h1 id=\"%E5%8D%81%E4%B8%89%E3%80%81content_scripts%E7%AE%80%E4%BB%8B\">十三、content_scripts简介</h1>\n<ul><li>content_scripts是在web页面运行的JavaScript脚本，通过使用标准的DOM，它可以获取浏览器访问页面的详细信息，并可以修改这些信息。</li><li><strong>可以做的事：</strong></li><li>1、获取DOM元素</li><li>2、修改DOM元素</li><li>3、修改样式</li><li><strong>不可以做的事：</strong></li><li>1、不能使用除了chrome.extension之外的chrome.*接口</li><li>2、不能访问它所在扩展中定义的函数和变量</li><li>3、不能访问web页面和其他content_scripts中定义的函数和变量</li><li>4、不能做cross_site XMLHttpRsquest</li><li><strong>解决方案：</strong></li><li>1、content_scripts可以使用message机制与它所在的扩展通信，来间接使用chrome.*接口，或访问扩展数据</li><li>2、content_scripts可以通过共享的DOM来与web页面通信。</li></ul>\n<hr/>\n<h1 id=\"%E5%8D%81%E5%9B%9B%E3%80%81%E6%9B%B4%E4%BE%BF%E6%8D%B7%E5%9C%B0%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81executeScript\">十四、更便捷地注入代码executeScript</h1>\n<ul><li><strong>目的：</strong>之前学习了在manifest.json文件中用content_scripts注入javascript或css文件到页面，这个方法有几个弊端：</li><li>1、文件直接写在了manifest中，灵活性较差；</li><li>2、即使只执行一行代码，也需要注入一个文件；</li><li>3、执行的时机不好掌握。</li><li><strong>需求：</strong>当觉得网页字体较小的时候，右击页面，弹出菜单中点击增大字体，可以增大网页的字体字号。</li><li>1、首先创建manifest.json，在permission标签中，添加了tabs及&lt;all_urls&gt;；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"increase\",\n    \"version\":\"1.0\",\n    \"description\":\"增大字体插件\",\n    \"icons\":{\n        \"128\":\"img/f.png\",\n        \"48\":\"img/f.png\",\n        \"16\":\"img/f.png\"\n    },\n    \"background\":{\n        \"scripts\":[\"js/increase.js\"],\n        \"persistent\":false\n    },\n    \"permissions\":[\n        \"contextMenus\",\n        \"tabs\",\n        \"&lt;all_urls&gt;\"\n    ]\n}</code></pre>\n<ul><li> 2、创建increase.js文件；</li></ul>\n<pre><code class=\"language-javascript\">var menuItem = {\n    \"id\":\"increase\",\n    \"title\":\"增大字体\",\n    \"contexts\":[\"all\"]\n}\nchrome.contextMenus.create(menuItem);\n\nchrome.contextMenus.onClicked.addListener(function(clickData){\n    chrome.tabs.executeScript(null,{code:\"var old = window.getComputedStyle(document.body).fontSize;\\\n    var index = old.indexOf('p');\\\n    var size = parseInt(old.substring(0,index));\\\n    var newSize = size + 10+'px';\\\n    document.body.style.fontSize = newSize;\"});\n})</code></pre>\n<ul><li> 3、将插件上传到Chrome，插件开发完成，放大字体功能前后对比如下。</li></ul>\n<p><img alt=\"\" height=\"378\" src=\"image\\1b2a4023b2834abdadfcc8da30f77d34.png\" width=\"672\"/></p>\n<p><img alt=\"\" height=\"381\" src=\"image\\bc26b2c05272491dbec67ca868a02c14.png\" width=\"677\"/></p>\n<hr/>\n<h1 id=\"%C2%A0%E5%8D%81%E4%BA%94%E3%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BEweb_accessible_resources\">十五、设置背景图web_accessible_resources</h1>\n<ul><li><strong>目的：</strong>将页面的背景图设置成为其他图片</li><li>1、创建manifest.json文件，添加了web_accessible_resources标签；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"resources\",\n    \"version\":\"1.0\",\n    \"description\":\"设置背景图\",\n    \"icons\":{\n        \"128\":\"img/f.png\",\n        \"48\":\"img/f.png\",\n        \"16\":\"img/f.png\"\n    },\n    \"background\":{\n        \"scripts\":[\"js/increase.js\"],\n        \"persistent\":false\n    },\n    \"permissions\":[\n        \"contextMenus\",\n        \"tabs\",\n        \"&lt;all_urls&gt;\"\n    ],\n    \"web_accessible_resources\":[\n        \"img/*\"\n    ]\n}</code></pre>\n<ul><li> 2、创建resources.js文件；</li></ul>\n<pre><code class=\"language-javascript\">var menuItem = {\n    \"id\":\"resources\",\n    \"title\":\"设置背景图\",\n    \"contexts\":[\"all\"]\n}\nchrome.contextMenus.create(menuItem);\n\nchrome.contextMenus.onClicked.addListener(function(clickData){\n    var imgurl = chrome.extension.getURL(\"img/背景.png\");\n    chrome.tabs.executeScript(null,{code:\"document.body.style.backgroundImage = 'url(\\\"\"+imgurl+\"\\\")';\\\n    document.body.style.backgroundRepeat = 'repeat';\"});\n})</code></pre>\n<ul><li>3、上传插件到Chrome，插件开发完成，功能演示如下。</li></ul>\n<p><img alt=\"\" height=\"380\" src=\"image\\1fdabb21c8864608a46a8c6fa85949c3.png\" width=\"675\"/></p>\n<p><img alt=\"\" height=\"378\" src=\"image\\9c965071ecf14940b326c96c6e9aa19e.png\" width=\"672\"/></p>\n<hr/>\n<h1 id=\"%E5%8D%81%E4%B8%83%E3%80%81%E4%BF%AE%E6%94%B9%E9%A1%B5%E9%9D%A2%E6%A0%B7%E5%BC%8FinsertCSS\">十六、修改页面样式insertCSS</h1>\n<ul><li><strong>目的：</strong>将搜索结果块的背景设置成绿色</li><li>1、创建manifest.json文件；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"backcolor\",\n    \"version\":\"1.0\",\n    \"description\":\"设置背景块颜色\",\n    \"icons\":{\n        \"128\":\"img/f.png\",\n        \"48\":\"img/f.png\",\n        \"16\":\"img/f.png\"\n    },\n    \"background\":{\n        \"scripts\":[\"js/backcolor.js\"],\n        \"persistent\":false\n    },\n    \"permissions\":[\n        \"contextMenus\",\n        \"tabs\",\n        \"&lt;all_urls&gt;\"\n    ],\n    \"web_accessible_resources\":[\n        \"img/*\"\n    ]\n}</code></pre>\n<ul><li>2、创建backcolor.js文件；</li></ul>\n<pre><code class=\"language-javascript\">var menuItem = {\n    \"id\":\"backcolor\",\n    \"title\":\"设置背景颜色\",\n    \"contexts\":[\"all\"]\n}\nchrome.contextMenus.create(menuItem);\n\nchrome.contextMenus.onClicked.addListener(function(clickData){\n    var imgurl = chrome.extension.getURL(\"img/背景.png\");\n    chrome.tabs.insertCSS(null,{file:\"backcolor.css\"});\n})</code></pre>\n<ul><li> 3、进入chrome开发者模式，观看网络源码，确定需要修改css代码的部分；</li></ul>\n<p><img alt=\"\" height=\"381\" src=\"image\\88e26ff20f0f4c9ebed54fdb5ef0cd31.png\" width=\"677\"/></p>\n<ul><li>4、根据第3步确定需要更改css代码的部分，创建backcolor.css文件；</li></ul>\n<pre><code class=\"language-css\">.c-container{\n    background-color: green;\n}</code></pre>\n<ul><li> 5、上传插件到Chrome，完成插件开发。背景搜索块颜色更改功能如下。</li></ul>\n<p><img alt=\"\" height=\"376\" src=\"image\\cda03d82ac014c04ae4e04a42db981f8.png\" width=\"668\"/></p>\n<p><img alt=\"\" height=\"374\" src=\"image\\141cad01a47b48138b1736d1841e6314.png\" width=\"665\"/></p>\n<hr/>\n<h1 id=\"%E5%8D%81%E5%85%AB%E3%80%81%20%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%B6%88%E6%81%AFconnect\">十七、 长连接消息connect</h1>\n<ul><li>长连接消息，我们使用connect，消息发送后，会等待消息的回复，使对话一直持续下去。</li><li><strong>目的：</strong>在content.js文件和background.js文件之间进行一次长消息对话。</li><li>1、在第9节content_script的基础上，创建content.js；</li></ul>\n<pre><code class=\"language-javascript\">//创建一个长连接port，用于首先发送消息\nvar port = chrome.extension.connect({name:\"knock\"});\nport.postMessage({question:\"你好,有人吗\"});\n//console.log可以在控制台看到消息\nconsole.log(\"content_send:你好,有人吗\");\nport.onMessage.addListener(function(msg){\n    if(msg.answer == \"你好,我是CShadow7\"){\n        console.log(\"content_get\"+msg.answer);\n        port.postMessage({question:\"哪个CShadow7\"});\n        console.log(\"content_send:哪个CShadow7\");\n    }else if(msg.answer == \"写代码的CShadow7\"){\n        console.log(\"content_get\"+msg.answer);\n        port.postMessage({question:\"有你的快递\"});\n        console.log(\"content_send:有你的快递\");\n    }\n});</code></pre>\n<ul><li>2、创建background.js文件；</li></ul>\n<pre><code class=\"language-javascript\">chrome.extension.onConnect.addListener(function(port){\n    port.onMessage.addListener(function(msg){\n        if(msg.question == \"你好,有人吗\"){\n            port.postMessage({answer:\"你好,我是CShadow7\"});\n        }else if(msg.question == \"哪个CShadow7\"){\n            port.postMessage({answer:\"写代码的CShadow7\"})\n        }\n    })\n})</code></pre>\n<ul><li>3、将插件上传到Chrome，完成插件开发，控制台界面如下。</li></ul>\n<p><img alt=\"\" height=\"115\" src=\"image\\e8ab4d2dcce2454c8c26c374366164d3.png\" width=\"663\"/></p>\n<hr/>\n<h1 id=\"%E5%8D%81%E5%85%AB%E3%80%81%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E6%A1%88%E4%BE%8B\">十八、百度翻译案例</h1>\n<ul><li>目的：将网页中的中文通过谷歌翻译翻译成英文，但是在第11节中，我们使用的是打开新的浏览器窗口的方式，目前我们需要通过插件拿到翻译结果，这种需求在实际操作中更常见。</li><li>需求：通过选中需要翻译的中文，右键选择百度翻译，并且直接通过alert弹出窗口显示翻译内容。</li><li>基本思路：在background中创建右键菜单并监听，当菜单选项被点击后，获取选中的网页文字并调用百度翻译API进行翻译，翻译完成后将翻译结果通过消息传递机制传递给前台content_scripts，并由content_scripts调用alert弹窗显示。</li><li>1、首先需要申请百度翻译的API权限，最终可以得到一个文件夹，内含一个index.html文件及md5.js文件；</li></ul>\n<p><img alt=\"\" height=\"55\" src=\"image\\296dbd5bbab94ef0b6ed6d05e76b4e79.png\" width=\"559\"/></p>\n<ul><li>2、创建manifest.json文件；</li></ul>\n<pre><code>{\n    \"manifest_version\":2,\n    \"name\": \"bdtraslate\",\n    \"version\":\"1.0\",\n    \"description\":\"百度翻译插件\",\n    \"icons\":{\n        \"128\":\"img/f.png\",\n        \"48\":\"img/f.png\",\n        \"16\":\"img/f.png\"\n    },\n    \"background\":{\n        \"scripts\":[\"js/md5.js\",\"js/jquery-3.3.1.min.js\",\"js/translate.js\"],\n        \"persistent\":true\n    },\n    \"permissions\":[\n        \"contextMenus\",\n        \"tabs\",用于输出\n        \"http://api.fanyi.baidu.com/\",将api的网址加入权限\n    ],\n    \"content_scripts\":[\n        {\n            \"matches\":[\"&lt;all_urls&gt;\"],用于给所有网页进行代码注入\n            \"js\":[\"js/content.js\"]\n        }\n    ]\n}</code></pre>\n<ul><li> 3、创建translate.js文件，完成右键菜单设计、选中中文的翻译及信息发送功能；</li></ul>\n<pre><code class=\"language-javascript\">var menuItem = {\n    \"id\": \"bdtranslate\",\n    \"title\": \"百度翻译\",\n    \"contexts\": [\"selection\"]\n}\nchrome.contextMenus.create(menuItem);\n\nchrome.contextMenus.onClicked.addListener(function (clickData) {\n    if (clickData.menuItemId == 'bdtranslate' &amp;&amp; clickData.selectionText) {\n        //以下内容，从百度翻译API的index.html中复制粘贴\n        //需要将其中的appid,key,query修改为自己的id,key和查询内容\n        var appid = '20220327001144201';//自己的APPID,官网可查\n        var key = 'E_NCDdjbBUP8gqzFPdYJ';//自己的KEY,官网可查\n        var salt = (new Date).getTime();\n        var query = clickData.selectionText;//右键选中的内容\n        // 多个query可以用\\n连接  如 query='apple\\norange\\nbanana\\npear'\n        var from = 'zh';//中文\n        var to = 'en';//英文\n        var str1 = appid + query + salt + key;\n        var sign = MD5(str1);\n        //由于插件内的js内容不允许使用ajax，以下内容为从index.html中的ajax部分复制并修改得到\n        var url = 'http://api.fanyi.baidu.com/api/trans/vip/translate';\n        url += \"?q=\"+query;\n        url += \"&amp;appid=\"+appid;\n        url += \"&amp;salt=\"+salt;\n        url += \"&amp;from=\"+from;\n        url += \"&amp;to=\"+to;\n        url += \"&amp;sign=\"+sign;\n        //使用fetch获取的json结果需要先转换为string再转换为json\n        fetch(url)\n        .then(reponse =&gt; reponse.text())\n        .then(text =&gt;JSON.parse(text))\n        .then(translateRsult =&gt; {\n            chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n                //result通过查询浏览器的开发者模式得知\n                chrome.tabs.sendMessage(tabs[0].id, { todo: \"translate\", result: translateRsult.trans_result[0].dst })\n            })\n        })  \n    }\n})</code></pre>\n<p>其中，index.html需要复制的内容如下：</p>\n<pre><code class=\"language-html\">var appid = '20220327001144201';\nvar key = 'E_NCDdjbBUP8gqzFPdYJ';\nvar salt = (new Date).getTime();\nvar query = 'apple';\n// 多个query可以用\\n连接  如 query='apple\\norange\\nbanana\\npear'\nvar from = 'en';\nvar to = 'zh';\nvar str1 = appid + query + salt +key;\nvar sign = MD5(str1);\n$.ajax({\n    url: 'http://api.fanyi.baidu.com/api/trans/vip/translate',\n    type: 'get',\n    dataType: 'jsonp',\n    data: {\n        q: query,\n        appid: appid,\n        salt: salt,\n        from: from,\n        to: to,\n        sign: sign\n    },\n    success: function (data) {\n        console.log(data);\n    } \n});</code></pre>\n<p>chrome.tabs.sendMessage中的输出result可以根据index.html在浏览器开发者模式中的输出得知，如下所示；</p>\n<p><img alt=\"\" height=\"116\" src=\"image\\82066d2b798e41968b044b3e61eba561.png\" width=\"219\"/></p>\n<ul><li> 4、创建content.js，用于监听translate发送的信息并使用alert将翻译结果弹出；</li></ul>\n<pre><code class=\"language-javascript\">chrome.runtime.onMessage.addListener(function(request,sender,response){\n    if(request.todo==\"translate\"){\n        alert(request.result);\n    }\n})</code></pre>\n<ul><li>5、将index.html及md5.js加入插件文件夹；</li></ul>\n<p><img alt=\"\" height=\"240\" src=\"image\\172cad337f654bb894470047a001caee.png\" width=\"210\"/></p>\n<ul><li>6、将插件上传到Chrome，完成插件开发，翻译功能如下。</li></ul>\n<p><img alt=\"\" height=\"239\" src=\"image\\a3a353861e1b4d7d99e1546860c99eb6.png\" width=\"666\"/></p>\n<hr/>\n<h1 id=\"%E4%BA%8C%E5%8D%81%E3%80%81%20%E6%8F%92%E4%BB%B6%E8%B0%83%E8%AF%95Debug\">十九、 插件调试Debug</h1>\n<ul><li>1、popup：右键插件图标→审查弹出内容即可进入开发者页面</li><li>2、options：右键插件图标→选项→F12进入开发者页面</li><li>3、background：chrome://extension界面，选择查看视图：背景页进入开发者页面</li><li>4、content_scripts：F12进入开发者页面→Sourses→Content scripts→选择对应的插件</li></ul>\n<hr/>\n<h1 id=\"%E4%BA%8C%E5%8D%81%E4%B8%80%E3%80%81%E6%8F%92%E4%BB%B6%E6%89%93%E5%8C%85\">二十、插件打包</h1>\n<ul><li>进入chrome://extension界面→打包扩展程序→选择需要上传插件的根目录→得到插件的crx文件用于上传插件到谷歌，以及插件的密钥pem文件。</li><li><strong>后续学习的网站：</strong></li><li>1、Chrome官方开发文档</li><li>2、360安全浏览器应用开放平台</li><li>3、kkh86.com/it/chrome-extension-doc/extensions/tabs.html</li></ul>\n</div>\n</div>"}