{"blogid": "115948387", "writerAge": "码龄3年", "writerBlogNum": "9", "writerCollect": "35", "writerComment": "1", "writerFan": "18", "writerGrade": "2级", "writerIntegral": "114", "writerName": "Happy.Q", "writerProfileAdress": "writer_image\\profile_115948387.jpg", "writerRankTotal": "1720219", "writerRankWeekly": "704067", "writerThumb": "23", "writerVisitNum": "9889", "blog_read_count": "5424", "blog_time": "于 2021-04-21 14:25:23 发布", "blog_title": "C#对List中的数据排序的几种方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_8\">前言</a></li><li><a href=\"#Sort_14\">一、Sort()方法</a></li><li><a href=\"#_29\">二、对自定义类型进行排序</a></li><li><ul><li><a href=\"#1IComparable_50\">1.继承接口IComparable&lt;&gt;</a></li><li><a href=\"#2_79\">2.通过委托方法进行排序</a></li><li><a href=\"#3Lambda_100\">3.通过匿名函数、Lambda表达式排序</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_8\"></a>前言</h1>\n<p>在C#中List&lt;&gt;是一个很好用的容器，采用泛型避免了ArrayList中经常出现的拆箱装箱，List&lt;&gt;中还提供了很多操作数据集合的方法。我们往往要对集合中的数据进行排序操作，下面简单介绍几种方法。</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"Sort_14\"></a>一、Sort()方法</h1>\n<p>直接使用成员方法Sort()只能对C#本身的几种类型进行排序，比如int，float，double等，不能对我们自定义的类型进行排序。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//申明一个List容器</span>\nList<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> list <span class=\"token operator\">=</span> new List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//向list中添加数据</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//排序</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>此时输出list将是升序排列后结果，即：2 3 4 。</p>\n<h1><a id=\"_29\"></a>二、对自定义类型进行排序</h1>\n<p>首先声明一个自定义类型</p>\n<pre><code class=\"prism language-c\">class Item\n<span class=\"token punctuation\">{<!-- --></span>\n    public <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">;</span>\n    public <span class=\"token function\">Item</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    \tthis<span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>申明一个自定义类型的List</p>\n<pre><code class=\"prism language-c\">List<span class=\"token operator\">&lt;</span>Item<span class=\"token operator\">&gt;</span> itemList <span class=\"token operator\">=</span> new List<span class=\"token operator\">&lt;</span>Item<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nitemList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">Item</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nitemList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">Item</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nitemList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">Item</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这时候要是在Main中使用itemList.Sort()程序运行时会报错的,下面介绍几种解决方法实现对自定义类型的排序。</p>\n<h2><a id=\"1IComparable_50\"></a>1.继承接口IComparable&lt;&gt;</h2>\n<p>进入int等可以用Sort()进行排序的几种类型查看定义会发现，它们都继承了接口IComparable&lt;&gt;，实现其中的CompareTo()方法从而实现排序，因此我们也可以套在自定义类型上。</p>\n<p>代码如下：</p>\n<pre><code class=\"prism language-c\">class Item <span class=\"token punctuation\">:</span> IComparable<span class=\"token operator\">&lt;</span>Item<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    public <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">;</span>\n    public <span class=\"token keyword\">int</span> <span class=\"token function\">CompareTo</span><span class=\"token punctuation\">(</span>Item other<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//返回值含义：</span>\n        <span class=\"token comment\">//小于0：放在传入对象的前面</span>\n        <span class=\"token comment\">//等于0：保持当前的位置不变</span>\n        <span class=\"token comment\">//大于0：放在传入对象的后面</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>money <span class=\"token operator\">&gt;</span> other<span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样，调用itemList.Sort()就不会报错，并且排好序了。<br/> 注意，其实还有一个不带泛型的接口IComparable也可以实现，进去看过后会发现它的CompareTo()方法参数为object类型，就要多一步转换：</p>\n<pre><code>(other as Item).money\n</code></pre>\n<h2><a id=\"2_79\"></a>2.通过委托方法进行排序</h2>\n<p>进入到Sort()方法定义去看，其实是有四种重载的，其中有一种重载参数是一个返回值为int类型的委托类型，我们可以在外面声明一个用来排序的方法。</p>\n<p>代码如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">SortItem</span><span class=\"token punctuation\">(</span>Item item1<span class=\"token punctuation\">,</span>Item item2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token comment\">//传入的对象为列表中的对象</span>\n     <span class=\"token comment\">//进行两两比较，用左边的和右边的 按条件 比较</span>\n     <span class=\"token comment\">//返回值规则与接口方法相同</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item1<span class=\"token punctuation\">.</span>money <span class=\"token operator\">&gt;</span> item2<span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>将方法名作为参数传递，实现排序。</p>\n<pre><code>itemList.Sort(SortItem);\n</code></pre>\n<h2><a id=\"3Lambda_100\"></a>3.通过匿名函数、Lambda表达式排序</h2>\n<p>这种方法和第二种方法原理相同，熟悉委托的读者都知道，匿名函数和Lambda表达式可以说与委托的使用是相辅相成的，这里用一种较为简洁的方式实现排序方法：</p>\n<pre><code class=\"prism language-c\">itemList<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item1<span class=\"token punctuation\">,</span> item2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> item1<span class=\"token punctuation\">.</span>money <span class=\"token operator\">&gt;</span> item2<span class=\"token punctuation\">.</span>money <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如此一来，一行代码就可实现对List容器中的自定义类型进行排序。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}