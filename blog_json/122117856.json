{"blogid": "122117856", "writerAge": "码龄13年", "writerBlogNum": "122", "writerCollect": "891", "writerComment": "164", "writerFan": "5361", "writerGrade": "5级", "writerIntegral": "1783", "writerName": "爱看书的小沐", "writerProfileAdress": "writer_image\\profile_122117856.jpg", "writerRankTotal": "9681", "writerRankWeekly": "827", "writerThumb": "189", "writerVisitNum": "249291", "blog_read_count": "17382", "blog_time": "已于 2022-09-03 21:50:02 修改", "blog_title": "C#逆向反编译工具：JetBrains dotPeek", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\50a3ca7348d5423999720a9c77a433d5.png\" width=\"400\"/></p>\n<p><font color=\"BlueViolet\" face=\"楷体\" size=\"5\"><i>《论道篇》<br/> <font color=\"BlueViolet\" face=\"楷体\" size=\"4\"><i><br/> 一天，戈戈来到江边静坐凝思，一手放着风筝，一手钓着鱼。微风徐徐，水面粼粼，柳枝招摇。<br/> <font color=\"BlueViolet\" face=\"楷体\" size=\"4\"><i><br/> 戈戈：《论语》读了许多天可有心得?<br/> 狄狄：错误要么是“过了”，要么是“不及”，重要的就是把握住度。<br/> 戈戈：程朱理学常说格物致知。那些红绿线平时可格出了些什么?<br/> 狄狄：随机漫步的傻瓜，价值，习惯遗忘。<br/> 戈戈：你未看此花时，此花与汝心同归于寂。你来看此花时，则此花颜色一时明白起来。便知此花不在你的心外。<br/> 狄狄：修道了嚒，神神叨叨的…<br/> <font color=\"BlueViolet\" face=\"楷体\" size=\"4\"><i><br/> 戈戈：最近在研读稻盛大师的几本洗脑大作。<br/> 狄狄：人家怎么就洗脑了？<br/> 戈戈：专门给人灌鸡汤。<br/> 狄狄：适度鸡汤也可以的，不要刻意。<br/> 戈戈：稻盛心学教人一心一意磨炼心灵，到达真我，瞬间明白一切真理。可对?<br/> 狄狄：不知道是不是跟文化有点关系。<br/> 戈戈：周末来加班吧？<br/> 狄狄：加班费提前预知一下哈。<br/> 戈戈：稻盛大师可不是这样的！<br/> 狄狄：年轻人没有家人要养活吗？<br/> <font color=\"BlueViolet\" face=\"楷体\" size=\"4\"><i><br/> 狄狄：最近累死了。<br/> 戈戈：丁元英告诉年轻人不要轻易说这个词，说完就真的马上要倒下。想干成点事，别把别人看得太轻，别把自己看得太重。<br/> 戈戈：我想找个井沿扒着看看，哪有?<br/> 狄狄：农村！<br/> 狄狄：这盘菜不是人人都能吃得，扒上了饱了眼福，再掉下去可就跌入了地狱。<br/> 戈戈：你注意到书上那句“见路不走”吗？<br/> 狄狄：见路非路，即见因果。<br/> <font color=\"BlueViolet\" face=\"楷体\" size=\"4\"><i><br/> 狄狄：大佬您再写一篇经文大概需要几个时辰？<br/> 戈戈：佛曰: 不可说，不可说，一说就得背锅。<br/> 戈戈：放假前交代的功课做了没？<br/> 狄狄：说不清，道不明，杂事一堆。<br/> 戈戈：人不立志，天下无有可成之事。<br/> 狄狄：师父今天很闲啊。<br/> 戈戈：最近大家都在说躺平。<br/> 狄狄：其实我也想。<br/> 戈戈：有人说，孙悟空头上的有形紧箍最后内化为他心里的无形紧箍了。<br/> 狄狄：师父，我先回去了。<br/> <font color=\"BlueViolet\" face=\"楷体\" size=\"4\"><i><br/> 幕落。</i></font></i></font></i></font></i></font></i></font></i></font></i></font></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1dotPeek_46\">1、dotPeek</a></li><li><ul><li><a href=\"#11__52\">1.1 功能简介</a></li><li><a href=\"#12__77\">1.2 文件格式支持</a></li><li><a href=\"#13__87\">1.3 使用测试</a></li></ul>\n</li><li><a href=\"#2ILSpy_93\">2、ILSpy</a></li><li><a href=\"#3dnSpy_103\">3、dnSpy</a></li><li><a href=\"#4NET_Reflector_113\">4、.NET Reflector</a></li><li><a href=\"#5ildasm_130\">5、ildasm</a></li><li><a href=\"#6NetC_148\">6、获取.Net程序依赖项（C#代码实现）</a></li><li><a href=\"#_238\">后记</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1dotPeek_46\"></a>1、dotPeek</h1>\n<p>官网地址：<a href=\"https://www.jetbrains.com/decompiler/\">https://www.jetbrains.com/decompiler/</a><br/> dotPeek 是 JetBrains 开发的一款.Net反编译工具，是.Net工具套件中的一个，而且免费使用。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ee7dafa06e69433897a99bbc42e9278d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\0f40d8ea1cdb47cdb9d7da70ebb35c07.png\"/></p>\n<h2><a id=\"11__52\"></a>1.1 功能简介</h2>\n<p>To assist you in working with compiled assemblies, dotPeek provides lots of features for:</p>\n<ol><li>Exploring .NET assemblies</li><li>Working with decompiled code, original source code, and IL code</li><li>Navigation and search</li><li>Debugging compiled code</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\819cb810c21c4a9bbfe78552c320c7e2.png\"/></p>\n<ul><li>将 .NET 程序集反编译为 C#</li></ul>\n<p>dotPeek 是一款基于 ReSharper 捆绑反编译器的免费独立工具。 它可以可靠地将任意 .NET 程序集反编译为对等的 C# 或 IL 代码。</p>\n<p>这款反编译器支持包括库 (.dll)、可执行文件 (.exe) 和 Windows 元数据文件 (.winmd) 在内的多种格式。</p>\n<ul><li>将反编译代码导出至 Visual Studio 项目</li></ul>\n<p>在反编译完程序集后，您可以将其另存为 Visual Studio 项目 (.csproj)。 如果您需要从旧程序集恢复丢失的源代码，此举可以为您节省大量的时间。</p>\n<ul><li>下载源代码并调试第三方代码</li></ul>\n<p>dotPeek 可以根据 PDB 文件识别本地源代码，或者从 Microsoft Reference Source Center 或 SymbolSource 等源服务器中获取源代码。</p>\n<p>dotPeek 还可以作为符号服务器运行，为 Visual Studio 调试器提供调试程序集代码所需的信息。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d39433920189495dabbdc774621d8659.png\"/></p>\n<h2><a id=\"12__77\"></a>1.2 文件格式支持</h2>\n<p>dotPeek decompiles any .NET assemblies and presents them as C# or IL code. Supported file types include:</p>\n<ul><li>Libraries (.dll)</li><li>Executable files (.exe)</li><li>Windows 8 metadata files (.winmd)</li><li>Archives (.zip)</li><li>NuGet packages (.nupkg)</li><li>Microsoft Visual Studio Extensions packages (.vsix)</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0fc8c5de16574a94a2bbd061f88b6f71.png\"/></p>\n<h2><a id=\"13__87\"></a>1.3 使用测试</h2>\n<p><font color=\"blue\">以下是使用dotPeek反编译作者写的C#程序的.exe（ProjectManager.exe）:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2c96d025967d406397e55651cffb6fa0.png\"/><br/> 下面来一张动图来简单说明一下反编译的整个流程：<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/31f0ceb44b6c43e286f93721352c8f7d.gif\"/></font></p>\n<h1><a id=\"2ILSpy_93\"></a>2、ILSpy</h1>\n<p>官网地址：<a href=\"https://github.com/icsharpcode/ILSpy\">https://github.com/icsharpcode/ILSpy</a></p>\n<p>ILSpy is the open-source .NET assembly browser and decompiler.</p>\n<p>.NET Decompiler with support for PDB generation, ReadyToRun, Metadata (&amp;more) - cross-platform!<br/> <img alt=\"在这里插入图片描述\" src=\"image\\44522db51e9b4729936fb6325bb47ad1.png\"/><br/> <font color=\"blue\">以下是使用ILSpy反编译作者写的C#程序的.exe（ProjectManager.exe）:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0b4299c46cd744dfac3d58ae9ee2e1c4.png\"/></font></p>\n<h1><a id=\"3dnSpy_103\"></a>3、dnSpy</h1>\n<p>官网地址：<a href=\"https://github.com/dnSpy/dnSpy\">https://github.com/dnSpy/dnSpy</a></p>\n<p>dnSpy is a debugger and .NET assembly editor. You can use it to edit and debug assemblies even if you don’t have any source code available.</p>\n<p>dnSpy是一款开源的基于ILSpy发展而来的.net程序集的编辑，反编译，调试神器。<br/> 主要功能：1、程序集编辑;2、反编译器;3、调试工具;4、Tabs及tabs分组;5、提供多主题。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f334e2c027624bdb9565619fdc06ff6b.png\"/><br/> <font color=\"blue\">以下是使用dnSpy反编译作者写的C#程序的.exe（ProjectManager.exe）:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d2a0004daf3a4f8d9b3c6c992c6ccb51.png\"/></font></p>\n<h1><a id=\"4NET_Reflector_113\"></a>4、.NET Reflector</h1>\n<p>官网地址：<a href=\"https://www.red-gate.com/products/dotnet-development/reflector/\">https://www.red-gate.com/products/dotnet-development/reflector/</a></p>\n<p>Decompile, understand, and fix any .NET code, even if you don’t have the source.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\150c21e865804495a237aa2e23fd69e4.png\"/></p>\n<ul><li> <p>Look inside any .NET code<br/> Debug your application<br/> Follow bugs through your application to see where the problem is – your own code, third-party libraries, or components used by your application.</p> </li><li> <p>Understand how applications work<br/> Inherited an application with no documentation and no comments? Use .NET Reflector to understand how the code runs and avoid bugs.</p> </li><li> <p>Look inside APIs, SharePoint, and other third-party platforms<br/> Third-party platforms aren’t always well-documented. Use .NET Reflector to look inside their assemblies, and see how they work and which APIs you can call.</p> </li></ul>\n<p><font color=\"blue\">以下是使用Reflector反编译作者写的C#程序的.exe（ProjectManager.exe）:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b21c373e83bf4988a4b9b149c63d0b44.png\"/></font></p>\n<h1><a id=\"5ildasm_130\"></a>5、ildasm</h1>\n<p>官网地址：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/framework/tools/ildasm-exe-il-disassembler\">https://docs.microsoft.com/zh-cn/dotnet/framework/tools/ildasm-exe-il-disassembler</a></p>\n<p>IL 反汇编程序是 IL 汇编程序 (Ilasm.exe) 的配套工具。 Ildasm.exe 可利用包含中间语言 (IL) 代码的可移植可执行 (PE) 文件，并创建适合输入到 Ilasm.exe 的文本文件 。</p>\n<p>此工具会自动随 Visual Studio 一起安装。 若要运行该工具，请使用 Visual Studio 开发人员命令提示或 Visual Studio 开发人员 PowerShell。</p>\n<p><font color=\"blue\">以下是使用ildasm反编译作者写的C#程序的.exe（ProjectManager.exe）:</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\dfb66c58d26b4116a39fe9322d8af3ea.png\"/><br/> <font color=\"blue\">查看C#的dll或exe所依赖.Net版本。</font><br/> Microsoft SDK自带的ildasm.exe工具, 是一个反编译工具, 可以查看编译好后的dll的文件。<br/> 双击ildasm.exe, 把你要识别的.dll文件拖进来, 就会反编译了. 接着在ildasm里, 双击第一行的MANIFEST, 前面五行会类似如下显示, 注意一定要是mscorlib。<br/> 当你看到.ver 1:0:5000:0, 说明它是在.net1.1的版本下编译的;<br/> 如果看到的是.ver 2:0:0:0, 说明它是.net2.0版本下编译的。<br/> 这里看到的是.ver 4:0:0:0，说明它是.net4.0版本下编译的。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7c3ca01b93d04983a976b082e7e4dfa8.png\"/></p>\n<h1><a id=\"6NetC_148\"></a>6、获取.Net程序依赖项（C#代码实现）</h1>\n<p>这里提供一段测试代码片段如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">/*************************************************************************************\n *\n * 文 件 名:   Test_GetReferencedAssemblies.cs\n * 描    述:   获取当前程序引用的所有程序集\n * 版    本：  V1.0\n * 创 建 者：  爱看书的小沐\n * 创建时间：  2022-02-28\n*************************************************************************************/</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">///  加载指定路径上的程序集文件的内容。</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"filename\"&gt;要加载的文件的完全限定路径。&lt;/param&gt;  </span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Assembly</span> <span class=\"token function\">LoadAssemblyFromFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">LoadFile</span><span class=\"token punctuation\">(</span>@filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An exception occurred: {0}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">///  打印指定程序集的所有依赖项的信息。</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"filename\"&gt;要打印的指定程序集。&lt;/param&gt;  </span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintReferencedAssemblies</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Assembly</span> assemblyUser<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>assemblyUser <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">AssemblyName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> assemblies <span class=\"token operator\">=</span> assemblyUser<span class=\"token punctuation\">.</span><span class=\"token function\">GetReferencedAssemblies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>assemblies<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token keyword\">in</span> assemblies<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>assembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An exception occurred: {0}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAssembly.GetEntryAssembly:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">PrintReferencedAssemblies</span><span class=\"token punctuation\">(</span>Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetEntryAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAssembly.GetExecutingAssembly:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">PrintReferencedAssemblies</span><span class=\"token punctuation\">(</span>Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetExecutingAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAssembly.GetCallingAssembly:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">PrintReferencedAssemblies</span><span class=\"token punctuation\">(</span>Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetCallingAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nLoad .Net Dll:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">PrintReferencedAssemblies</span><span class=\"token punctuation\">(</span><span class=\"token function\">LoadAssemblyFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"d:\\\\DH.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nLoad .Net Exe:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">PrintReferencedAssemblies</span><span class=\"token punctuation\">(</span><span class=\"token function\">LoadAssemblyFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"d:\\\\ProjectManager.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nLoad Not .Net Dll:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">PrintReferencedAssemblies</span><span class=\"token punctuation\">(</span><span class=\"token function\">LoadAssemblyFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"d:\\\\glew.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\22f40076c20e4bc5a3eef21ec5e4a49f.png\"/></p>\n<h1><a id=\"_238\"></a>后记</h1>\n<blockquote>\n<p>如果你觉得该方法或代码有一点点用处，可以给作者点个赞、赏杯咖啡；╮(￣▽￣)╭<br/> 如果你感觉方法或代码不咋地//(ㄒoㄒ)//，就在评论处留言，作者继续改进。o_O???<br/> 谢谢各位童鞋们啦( ´ ▽´ )ﾉ ( ´ ▽´)っ！！！</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}