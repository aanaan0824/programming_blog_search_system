{"blogid": "118761423", "writerAge": "码龄11年", "writerBlogNum": "191", "writerCollect": "20829", "writerComment": "11342", "writerFan": "58092", "writerGrade": "8级", "writerIntegral": "30688", "writerName": "盼小辉丶", "writerProfileAdress": "writer_image\\profile_118761423.jpg", "writerRankTotal": "160", "writerRankWeekly": "131", "writerThumb": "12522", "writerVisitNum": "1299025", "blog_read_count": "49508", "blog_time": "于 2021-07-16 08:34:14 发布", "blog_title": "Python机器学习、深度学习库总结（内含大量示例，建议收藏）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Python机器学习、深度学习库总结（内含大量示例，建议收藏）</h3>\n<ul><li><ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#python_13\">python常用机器学习及深度学习库介绍</a></li><li><a href=\"#_798\">总结与分类</a></li><li><ul><li><a href=\"#python__799\">python 常用机器学习及深度学习库总结</a></li><li><a href=\"#_830\">分类</a></li></ul>\n</li><li><a href=\"#_842\">更多</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>前言</h2>\n<p>目前，随着人工智能的大热，吸引了诸多行业对于人工智能的关注，同时也迎来了一波又一波的人工智能学习的热潮，虽然人工智能背后的原理并不能通过短短一文给予详细介绍，但是像所有学科一样，我们并不需要从头开始”造轮子“，可以通过使用丰富的人工智能框架来快速构建人工智能模型，从而入门人工智能的潮流。<br/> 人工智能指的是一系列使机器能够像人类一样处理信息的技术；机器学习是利用计算机编程从历史数据中学习，对新数据进行预测的过程；神经网络是基于生物大脑结构和特征的机器学习的计算机模型；深度学习是机器学习的一个子集，它处理大量的非结构化数据，如人类的语音、文本和图像。因此，这些概念在层次上是相互依存的，人工智能是最广泛的术语，而深度学习是最具体的：</p>\n<p><img alt=\"人工智能\" src=\"image\\20210716080812874.png\"/></p>\n<p>为了大家能够对人工智能常用的 <code>Python</code> 库有一个初步的了解，以选择能够满足自己需求的库进行学习，对目前较为常见的人工智能库进行简要全面的介绍。</p>\n<p><img alt=\"思维导图\" src=\"image\\20210716081201655.png\"/></p>\n<h2><a id=\"python_13\"></a>python常用机器学习及深度学习库介绍</h2>\n<h3>1、 Numpy</h3>\n<p><code>NumPy(Numerical Python)</code>是 <code>Python</code>的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库，<code>Numpy</code>底层使用<code>C语言</code>编写，数组中直接存储对象，而不是存储对象指针，所以其运算效率远高于<code>纯Python代</code>码。<br/> 我们可以在示例中对比下<code>纯Python</code>与使用<code>Numpy库</code>在计算列表sin值的速度对比：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> time\n\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    list_1 <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        list_1<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用纯Python用时{}s\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    list_1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    list_1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用Numpy用时{}s\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>从如下运行结果，可以看到使用 <code>Numpy</code> 库的速度快于纯 Python 编写的代码：</p>\n<pre><code class=\"prism language-shell\">使用纯Python用时0.017444372177124023s\n使用Numpy用时0.001619577407836914s\n</code></pre>\n<h3>2、 OpenCV</h3>\n<p><code>OpenCV</code> 是一个的跨平台计算机视觉库，可以运行在 Linux、Windows 和 Mac OS 操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时也提供了 <code>Python</code> 接口，实现了图像处理和计算机视觉方面的很多通用算法。<br/> 下面代码尝试使用一些简单的滤镜，包括图片的平滑处理、高斯模糊等：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2 <span class=\"token keyword\">as</span> cv\n<span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\nimg <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'h89817032p0.png'</span><span class=\"token punctuation\">)</span>\nkernel <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">25</span>\ndst <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>filter2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>kernel<span class=\"token punctuation\">)</span>\nblur_1 <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>GaussianBlur<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nblur_2 <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>bilateralFilter<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">221</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Original'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Averaging'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>blur_1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Gaussian'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>blur_1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Bilateral'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"OpenCV\" src=\"image\\2021071602413947.png\"/></p>\n<p>可以参考<a href=\"https://blog.csdn.net/LOVEmy134611/article/details/108895077\">OpenCV图像处理基础（变换和去噪）</a>，了解更多 OpenCV 图像处理操作。</p>\n<h3>3、 Scikit-image</h3>\n<p><code>scikit-image</code>是基于<code>scipy</code>的图像处理库，它将图片作为<code>numpy</code>数组进行处理。<br/> 例如，可以利用<code>scikit-image</code>改变图片比例，<code>scikit-image</code>提供了<code>rescale</code>、<code>resize</code>以及<code>downscale_local_mean</code>等函数。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> skimage <span class=\"token keyword\">import</span> data<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> io\n<span class=\"token keyword\">from</span> skimage<span class=\"token punctuation\">.</span>transform <span class=\"token keyword\">import</span> rescale<span class=\"token punctuation\">,</span> resize<span class=\"token punctuation\">,</span> downscale_local_mean\n\nimage <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>rgb2gray<span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'h89817032p0.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nimage_rescaled <span class=\"token operator\">=</span> rescale<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> anti_aliasing<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nimage_resized <span class=\"token operator\">=</span> resize<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                       anti_aliasing<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nimage_downscaled <span class=\"token operator\">=</span> downscale_local_mean<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">221</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Original'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>image_rescaled<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Rescaled'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>image_resized<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Resized'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>image_downscaled<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Downscaled'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"Scikit-image\" src=\"image\\2021071602421987.png\"/></p>\n<h3>4、 Python Imaging Library(PIL)</h3>\n<p><code>Python Imaging Library(PIL)</code> 已经成为 <code>Python</code> 事实上的图像处理标准库了，这是由于，<code>PIL</code> 功能非常强大，但API却非常简单易用。<br/> 但是由于PIL仅支持到 <code>Python 2.7</code>，再加上年久失修，于是一群志愿者在 <code>PIL</code> 的基础上创建了兼容的版本，名字叫 <code>Pillow</code>，支持最新 <code>Python 3.x</code>，又加入了许多新特性，因此，我们可以跳过 <code>PIL</code>，直接安装使用 <code>Pillow</code>。</p>\n<h3>5、 Pillow</h3>\n<p>使用 <code>Pillow</code> 生成字母验证码图片：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageDraw<span class=\"token punctuation\">,</span> ImageFont<span class=\"token punctuation\">,</span> ImageFilter\n\n<span class=\"token keyword\">import</span> random\n\n<span class=\"token comment\"># 随机字母:</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">rndChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机颜色1:</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">rndColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机颜色2:</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">rndColor2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 240 x 60:</span>\nwidth <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span>\nheight <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span>\nimage <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">'RGB'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 创建Font对象:</span>\nfont <span class=\"token operator\">=</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">'/usr/share/fonts/wps-office/simhei.ttf'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 创建Draw对象:</span>\ndraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 填充每个像素:</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        draw<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>rndColor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出文字:</span>\n<span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    draw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rndChar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>rndColor2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 模糊:</span>\nimage <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>BLUR<span class=\"token punctuation\">)</span>\nimage<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'code.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpeg'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"验证码\" src=\"image\\20210715195749694.jpg\"/></p>\n<h3>6、 SimpleCV</h3>\n<p><code>SimpleCV</code> 是一个用于构建计算机视觉应用程序的开源框架。使用它，可以访问高性能的计算机视觉库，如 OpenCV，而不必首先了解位深度、文件格式、颜色空间、缓冲区管理、特征值或矩阵等术语。但其对于 Python3 的支持很差很差，在 Python3.7 中使用如下代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> SimpleCV <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">,</span> Display\n<span class=\"token comment\"># load an image from imgur</span>\nimg <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">(</span><span class=\"token string\">'http://i.imgur.com/lfAeZ4n.png'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># use a keypoint detector to find areas of interest</span>\nfeats <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>findKeypoints<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># draw the list of keypoints</span>\nfeats<span class=\"token punctuation\">.</span>draw<span class=\"token punctuation\">(</span>color<span class=\"token operator\">=</span>Color<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># show the  resulting image. </span>\nimg<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># apply the stuff we found to the image.</span>\noutput <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>applyLayers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># save the results.</span>\noutput<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'juniperfeats.png'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>会报如下错误，因此不建议在 <code>Python3</code> 中使用：</p>\n<pre><code class=\"prism language-shell\">SyntaxError: Missing parentheses <span class=\"token keyword\">in</span> call to <span class=\"token string\">'print'</span><span class=\"token builtin class-name\">.</span> Did you mean print<span class=\"token punctuation\">(</span><span class=\"token string\">'unit test'</span><span class=\"token punctuation\">)</span>?\n</code></pre>\n<h3>7、 Mahotas</h3>\n<p><code>Mahotas</code> 是一个快速计算机视觉算法库，其构建在 <code>Numpy</code> 之上，目前拥有超过100种图像处理和计算机视觉功能，并在不断增长。<br/> 使用 <code>Mahotas</code> 加载图像，并对像素进行操作：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> mahotas\n<span class=\"token keyword\">import</span> mahotas<span class=\"token punctuation\">.</span>demos\n\n<span class=\"token keyword\">from</span> mahotas<span class=\"token punctuation\">.</span>thresholding <span class=\"token keyword\">import</span> soft_threshold\n<span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> path\nf <span class=\"token operator\">=</span> mahotas<span class=\"token punctuation\">.</span>demos<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">'lena'</span><span class=\"token punctuation\">,</span> as_grey<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\nplt<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Show the data:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fraction of zeros in original image: {0}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>f<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"Mahotas\" src=\"image\\20210715203243682.png\"/></p>\n<h3>8、 Ilastik</h3>\n<p><code>Ilastik</code> 能够给用户提供良好的基于机器学习的生物信息图像分析服务，利用机器学习算法，轻松地分割，分类，跟踪和计数细胞或其他实验数据。大多数操作都是交互式的，并不需要机器学习专业知识。可以参考<a href=\"https://www.ilastik.org/documentation/basics/installation.html\">https://www.ilastik.org/documentation/basics/installation.html</a>进行安装使用。</p>\n<h3>9、 Scikit-learn</h3>\n<p><code>Scikit-learn</code> 是针对 <code>Python</code> 编程语言的免费软件机器学习库。它具有各种分类，回归和聚类算法，包括支持向量机，随机森林，梯度提升，k均值和 DBSCAN 等多种机器学习算法。<br/> 使用<code>Scikit-learn</code>实现<code>KMeans</code>算法：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>cluster <span class=\"token keyword\">import</span> MiniBatchKMeans<span class=\"token punctuation\">,</span> KMeans\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>pairwise <span class=\"token keyword\">import</span> pairwise_distances_argmin\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_blobs\n\n<span class=\"token comment\"># Generate sample data</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nbatch_size <span class=\"token operator\">=</span> <span class=\"token number\">45</span>\ncenters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nn_clusters <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>centers<span class=\"token punctuation\">)</span>\nX<span class=\"token punctuation\">,</span> labels_true <span class=\"token operator\">=</span> make_blobs<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> centers<span class=\"token operator\">=</span>centers<span class=\"token punctuation\">,</span> cluster_std<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Compute clustering with Means</span>\n\nk_means <span class=\"token operator\">=</span> KMeans<span class=\"token punctuation\">(</span>init<span class=\"token operator\">=</span><span class=\"token string\">'k-means++'</span><span class=\"token punctuation\">,</span> n_clusters<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> n_init<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nt0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nk_means<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\nt_batch <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t0\n\n<span class=\"token comment\"># Compute clustering with MiniBatchKMeans</span>\n\nmbk <span class=\"token operator\">=</span> MiniBatchKMeans<span class=\"token punctuation\">(</span>init<span class=\"token operator\">=</span><span class=\"token string\">'k-means++'</span><span class=\"token punctuation\">,</span> n_clusters<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>batch_size<span class=\"token punctuation\">,</span>\n                      n_init<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> max_no_improvement<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nt0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmbk<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\nt_mini_batch <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t0\n\n<span class=\"token comment\"># Plot result</span>\nfig <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfig<span class=\"token punctuation\">.</span>subplots_adjust<span class=\"token punctuation\">(</span>left<span class=\"token operator\">=</span><span class=\"token number\">0.02</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">=</span><span class=\"token number\">0.98</span><span class=\"token punctuation\">,</span> bottom<span class=\"token operator\">=</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">,</span> top<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span>\ncolors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#4EACC5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#FF9C34'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#4E9A06'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># We want to have the same colors for the same cluster from the</span>\n<span class=\"token comment\"># MiniBatchKMeans and the KMeans algorithm. Let's pair the cluster centers per</span>\n<span class=\"token comment\"># closest one.</span>\nk_means_cluster_centers <span class=\"token operator\">=</span> k_means<span class=\"token punctuation\">.</span>cluster_centers_\norder <span class=\"token operator\">=</span> pairwise_distances_argmin<span class=\"token punctuation\">(</span>k_means<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">,</span>\n                                  mbk<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">)</span>\nmbk_means_cluster_centers <span class=\"token operator\">=</span> mbk<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span>order<span class=\"token punctuation\">]</span>\n\nk_means_labels <span class=\"token operator\">=</span> pairwise_distances_argmin<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> k_means_cluster_centers<span class=\"token punctuation\">)</span>\nmbk_means_labels <span class=\"token operator\">=</span> pairwise_distances_argmin<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> mbk_means_cluster_centers<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># KMeans</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n_clusters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    my_members <span class=\"token operator\">=</span> k_means_labels <span class=\"token operator\">==</span> k\n    cluster_center <span class=\"token operator\">=</span> k_means_cluster_centers<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>my_members<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span>my_members<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span>\n            markerfacecolor<span class=\"token operator\">=</span>col<span class=\"token punctuation\">,</span> marker<span class=\"token operator\">=</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>cluster_center<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cluster_center<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> markerfacecolor<span class=\"token operator\">=</span>col<span class=\"token punctuation\">,</span>\n            markeredgecolor<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> markersize<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'KMeans'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"KMeans\" src=\"image\\20210715215902998.png\"/></p>\n<h3>10、 SciPy</h3>\n<p><code>SciPy</code> 库提供了许多用户友好和高效的数值计算，如数值积分、插值、优化、线性代数等。<br/> <code>SciPy</code> 库定义了许多数学物理的特殊函数，包括椭圆函数、贝塞尔函数、伽马函数、贝塔函数、超几何函数、抛物线圆柱函数等等。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> scipy <span class=\"token keyword\">import</span> special\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">drumhead_height</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> distance<span class=\"token punctuation\">,</span> angle<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    kth_zero <span class=\"token operator\">=</span> special<span class=\"token punctuation\">.</span>jn_zeros<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> special<span class=\"token punctuation\">.</span>jn<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> distance<span class=\"token operator\">*</span>kth_zero<span class=\"token punctuation\">)</span>\n\ntheta <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>r_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>pi<span class=\"token punctuation\">:</span><span class=\"token number\">50j</span><span class=\"token punctuation\">]</span>\nradius <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>r_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">50j</span><span class=\"token punctuation\">]</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>r <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> radius<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>r <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> radius<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nz <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>drumhead_height<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> theta<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> radius<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\nfig <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nax <span class=\"token operator\">=</span> fig<span class=\"token punctuation\">.</span>add_axes<span class=\"token punctuation\">(</span>rect<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> projection<span class=\"token operator\">=</span><span class=\"token string\">'3d'</span><span class=\"token punctuation\">)</span>\nax<span class=\"token punctuation\">.</span>plot_surface<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> rstride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cstride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'RdBu_r'</span><span class=\"token punctuation\">,</span> vmin<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> vmax<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\nax<span class=\"token punctuation\">.</span>set_xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span>\nax<span class=\"token punctuation\">.</span>set_ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span>\nax<span class=\"token punctuation\">.</span>set_xticks<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nax<span class=\"token punctuation\">.</span>set_yticks<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nax<span class=\"token punctuation\">.</span>set_zlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"SciPy\" src=\"image\\20210715220926438.png\"/></p>\n<h3>11、 NLTK</h3>\n<p><code>NLTK</code> 是构建Python程序以处理自然语言的库。它为50多个语料库和词汇资源(如 <code>WordNet</code> )提供了易于使用的接口，以及一套用于分类、分词、词干、标记、解析和语义推理的文本处理库、工业级自然语言处理 <code>(Natural Language Processing, NLP)</code> 库的包装器。<br/> NLTK被称为 <code>“a wonderful tool for teaching, and working in, computational linguistics using Python”</code>。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> nltk\n<span class=\"token keyword\">from</span> nltk<span class=\"token punctuation\">.</span>corpus <span class=\"token keyword\">import</span> treebank\n\n<span class=\"token comment\"># 首次使用需要下载</span>\nnltk<span class=\"token punctuation\">.</span>download<span class=\"token punctuation\">(</span><span class=\"token string\">'punkt'</span><span class=\"token punctuation\">)</span>\nnltk<span class=\"token punctuation\">.</span>download<span class=\"token punctuation\">(</span><span class=\"token string\">'averaged_perceptron_tagger'</span><span class=\"token punctuation\">)</span>\nnltk<span class=\"token punctuation\">.</span>download<span class=\"token punctuation\">(</span><span class=\"token string\">'maxent_ne_chunker'</span><span class=\"token punctuation\">)</span>\nnltk<span class=\"token punctuation\">.</span>download<span class=\"token punctuation\">(</span><span class=\"token string\">'words'</span><span class=\"token punctuation\">)</span>\nnltk<span class=\"token punctuation\">.</span>download<span class=\"token punctuation\">(</span><span class=\"token string\">'treebank'</span><span class=\"token punctuation\">)</span>\n\nsentence <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"At eight o'clock on Thursday morning Arthur didn't feel very good.\"\"\"</span>\n<span class=\"token comment\"># Tokenize</span>\ntokens <span class=\"token operator\">=</span> nltk<span class=\"token punctuation\">.</span>word_tokenize<span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">)</span>\ntagged <span class=\"token operator\">=</span> nltk<span class=\"token punctuation\">.</span>pos_tag<span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Identify named entities</span>\nentities <span class=\"token operator\">=</span> nltk<span class=\"token punctuation\">.</span>chunk<span class=\"token punctuation\">.</span>ne_chunk<span class=\"token punctuation\">(</span>tagged<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Display a parse tree</span>\nt <span class=\"token operator\">=</span> treebank<span class=\"token punctuation\">.</span>parsed_sents<span class=\"token punctuation\">(</span><span class=\"token string\">'wsj_0001.mrg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nt<span class=\"token punctuation\">.</span>draw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"NLTK\" src=\"https://img-blog.csdnimg.cn/20210715222611509.gif#pic_center\"/></p>\n<h3>12、 spaCy</h3>\n<p><code>spaCy</code> 是一个免费的开源库，用于 <code>Python</code> 中的高级 NLP。它可以用于构建处理大量文本的应用程序；也可以用来构建信息提取或自然语言理解系统，或者对文本进行预处理以进行深度学习。</p>\n<pre><code class=\"prism language-python\">  <span class=\"token keyword\">import</span> spacy\n\n  texts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"Net income was $9.4 million compared to the prior year of $2.7 million.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Revenue exceeded twelve billion dollars, with a loss of $1b.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  nlp <span class=\"token operator\">=</span> spacy<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"en_core_web_sm\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> doc <span class=\"token keyword\">in</span> nlp<span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>texts<span class=\"token punctuation\">,</span> disable<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"tok2vec\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tagger\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parser\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"attribute_ruler\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lemmatizer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># Do something with the doc here</span>\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>ent<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> ent<span class=\"token punctuation\">.</span>label_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> ent <span class=\"token keyword\">in</span> doc<span class=\"token punctuation\">.</span>ents<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>nlp.pipe</code> 生成 Doc 对象，因此我们可以对它们进行迭代并访问命名实体预测：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'<span class=\"token variable\">$9</span>.4 million'</span>, <span class=\"token string\">'MONEY'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'the prior year'</span>, <span class=\"token string\">'DATE'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'<span class=\"token variable\">$2</span>.7 million'</span>, <span class=\"token string\">'MONEY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'twelve billion dollars'</span>, <span class=\"token string\">'MONEY'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'1b'</span>, <span class=\"token string\">'MONEY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3>13、 LibROSA</h3>\n<p><code>librosa</code> 是一个用于音乐和音频分析的 Python 库，它提供了创建音乐信息检索系统所必需的功能和函数。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># Beat tracking example</span>\n<span class=\"token keyword\">import</span> librosa\n\n<span class=\"token comment\"># 1. Get the file path to an included audio example</span>\nfilename <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">(</span><span class=\"token string\">'nutcracker'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. Load the audio as a waveform `y`</span>\n<span class=\"token comment\">#    Store the sampling rate as `sr`</span>\ny<span class=\"token punctuation\">,</span> sr <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. Run the default beat tracker</span>\ntempo<span class=\"token punctuation\">,</span> beat_frames <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>beat<span class=\"token punctuation\">.</span>beat_track<span class=\"token punctuation\">(</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Estimated tempo: {:.2f} beats per minute'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4. Convert the frame indices of beat events into timestamps</span>\nbeat_times <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>frames_to_time<span class=\"token punctuation\">(</span>beat_frames<span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>14、 Pandas</h3>\n<p><code>Pandas</code> 是一个快速、强大、灵活且易于使用的开源数据分析和操作工具， <code>Pandas</code> 可以从各种文件格式比如 CSV、JSON、SQL、Microsoft Excel 导入数据，可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。<code>Pandas</code> 广泛应用在学术、金融、统计学等各个数据分析领域。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/2000\"</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>ts<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"Pandas\" src=\"image\\20210715232059924.png\"/></p>\n<h3>15、 Matplotlib</h3>\n<p><code>Matplotlib</code> 是Python的绘图库，它提供了一整套和 <code>matlab</code> 相似的命令 API，可以生成出版质量级别的精美图形，<code>Matplotlib</code> 使绘图变得非常简单，在易用性和性能间取得了优异的平衡。<br/> 使用 <code>Matplotlib</code> 绘制多曲线图：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># plot_multi_curve.py</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>pi<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ny_1 <span class=\"token operator\">=</span> x\ny_2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\ny_3 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\ny_4 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y_1<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y_2<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y_3<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y_4<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"Matplotlib\" src=\"image\\20210715233653331.png\"/>有关更多<code>Matplotlib</code>绘图的介绍可以参考此前博文———<a href=\"https://blog.csdn.net/LOVEmy134611/article/details/117301771\">Python-Matplotlib可视化</a>。</p>\n<h3>16、 Seaborn</h3>\n<p><code>Seaborn</code> 是在 <code>Matplotlib</code> 的基础上进行了更高级的API封装的Python数据可视化库，从而使得作图更加容易，应该把 <code>Seaborn</code> 视为 <code>Matplotlib</code> 的补充，而不是替代物。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\nsns<span class=\"token punctuation\">.</span>set_theme<span class=\"token punctuation\">(</span>style<span class=\"token operator\">=</span><span class=\"token string\">\"ticks\"</span><span class=\"token punctuation\">)</span>\n\ndf <span class=\"token operator\">=</span> sns<span class=\"token punctuation\">.</span>load_dataset<span class=\"token punctuation\">(</span><span class=\"token string\">\"penguins\"</span><span class=\"token punctuation\">)</span>\nsns<span class=\"token punctuation\">.</span>pairplot<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">,</span> hue<span class=\"token operator\">=</span><span class=\"token string\">\"species\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"seaborn\" src=\"image\\20210716000104154.png\"/></p>\n<h3>17、 Orange</h3>\n<p><code>Orange</code> 是一个开源的数据挖掘和机器学习软件，提供了一系列的数据探索、可视化、预处理以及建模组件。<code>Orange</code> 拥有漂亮直观的交互式用户界面，非常适合新手进行探索性数据分析和可视化展示；同时高级用户也可以将其作为 <code>Python</code> 的一个编程模块进行数据操作和组件开发。<br/> 使用 <code>pip</code> 即可安装 <code>Orange</code>，好评～</p>\n<pre><code class=\"prism language-shell\">$ pip <span class=\"token function\">install</span> orange3\n</code></pre>\n<p>安装完成后，在命令行输入 <code>orange-canvas</code> 命令即可启动 <code>Orange</code> 图形界面：</p>\n<pre><code class=\"prism language-shell\">$ orange-canvas\n</code></pre>\n<p>启动完成后，即可看到 <code>Orange</code> 图形界面，进行各种操作。</p>\n<p><img alt=\"Orange\" src=\"image\\20210716003315320.png\"/></p>\n<h3>18、 PyBrain</h3>\n<p><code>PyBrain</code> 是 <code>Python</code> 的模块化机器学习库。它的目标是为机器学习任务和各种预定义的环境提供灵活、易于使用且强大的算法来测试和比较算法。<code>PyBrain</code> 是 <code>Python-Based Reinforcement Learning, Artificial Intelligence and Neural Network Library</code> 的缩写。<br/> 我们将利用一个简单的例子来展示 <code>PyBrain</code> 的用法，构建一个多层感知器 (Multi Layer Perceptron, MLP)。<br/> 首先，我们创建一个新的前馈网络对象：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> pybrain<span class=\"token punctuation\">.</span>structure <span class=\"token keyword\">import</span> FeedForwardNetwork\n\nn <span class=\"token operator\">=</span> FeedForwardNetwork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>接下来，构建输入、隐藏和输出层：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> pybrain<span class=\"token punctuation\">.</span>structure <span class=\"token keyword\">import</span> LinearLayer<span class=\"token punctuation\">,</span> SigmoidLayer\n\ninLayer <span class=\"token operator\">=</span> LinearLayer<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nhiddenLayer <span class=\"token operator\">=</span> SigmoidLayer<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\noutLayer <span class=\"token operator\">=</span> LinearLayer<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>为了使用所构建的层，必须将它们添加到网络中：</p>\n<pre><code class=\"prism language-python\">n<span class=\"token punctuation\">.</span>addInputModule<span class=\"token punctuation\">(</span>inLayer<span class=\"token punctuation\">)</span>\nn<span class=\"token punctuation\">.</span>addModule<span class=\"token punctuation\">(</span>hiddenLayer<span class=\"token punctuation\">)</span>\nn<span class=\"token punctuation\">.</span>addOutputModule<span class=\"token punctuation\">(</span>outLayer<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以添加多个输入和输出模块。为了向前计算和反向误差传播，网络必须知道哪些层是输入、哪些层是输出。<br/> 这就需要明确确定它们应该如何连接。为此，我们使用最常见的连接类型，全连接层，由 FullConnection 类实现：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> pybrain<span class=\"token punctuation\">.</span>structure <span class=\"token keyword\">import</span> FullConnection\nin_to_hidden <span class=\"token operator\">=</span> FullConnection<span class=\"token punctuation\">(</span>inLayer<span class=\"token punctuation\">,</span> hiddenLayer<span class=\"token punctuation\">)</span>\nhidden_to_out <span class=\"token operator\">=</span> FullConnection<span class=\"token punctuation\">(</span>hiddenLayer<span class=\"token punctuation\">,</span> outLayer<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>与层一样，我们必须明确地将它们添加到网络中：</p>\n<pre><code class=\"prism language-python\">n<span class=\"token punctuation\">.</span>addConnection<span class=\"token punctuation\">(</span>in_to_hidden<span class=\"token punctuation\">)</span>\nn<span class=\"token punctuation\">.</span>addConnection<span class=\"token punctuation\">(</span>hidden_to_out<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>所有元素现在都已准备就位，最后，我们需要调用.sortModules()方法使MLP可用：</p>\n<pre><code class=\"prism language-python\">n<span class=\"token punctuation\">.</span>sortModules<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这个调用会执行一些内部初始化，这在使用网络之前是必要的。</p>\n<h3>19、 Milk</h3>\n<p><code>MILK(MACHINE LEARNING TOOLKIT)</code> 是 Python 语言的机器学习工具包。它主要是包含许多分类器比如 SVMS、K-NN、随机森林以及决策树中使用监督分类法，它还可执行特征选择，可以形成不同的例如无监督学习、密切关系传播和由 MILK 支持的 K-means 聚类等分类系统。<br/> 使用 <code>MILK</code> 训练一个分类器：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> milk\nfeatures <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nlabels <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">.5</span>\nlabels<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nlearner <span class=\"token operator\">=</span> milk<span class=\"token punctuation\">.</span>defaultclassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> learner<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Now you can use the model on new examples:</span>\nexample <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nexample2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nexample2 <span class=\"token operator\">+=</span> <span class=\"token number\">.5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>example2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>20、 TensorFlow</h3>\n<p><code>TensorFlow</code> 是一个端到端开源机器学习平台。它拥有一个全面而灵活的生态系统，一般可以将其分为 TensorFlow1.x 和 TensorFlow2.x，TensorFlow1.x 与 TensorFlow2.x 的主要区别在于 TF1.x 使用静态图而 TF2.x 使用Eager Mode动态图。<br/> 这里主要使用TensorFlow2.x作为示例，展示在 TensorFlow2.x 中构建卷积神经网络 (Convolutional Neural Network, CNN)。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras <span class=\"token keyword\">import</span> datasets<span class=\"token punctuation\">,</span> layers<span class=\"token punctuation\">,</span> models\n\n<span class=\"token comment\"># 数据加载</span>\n<span class=\"token punctuation\">(</span>train_images<span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>test_images<span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>cifar10<span class=\"token punctuation\">.</span>load_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 数据预处理</span>\ntrain_images<span class=\"token punctuation\">,</span> test_images <span class=\"token operator\">=</span> train_images <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span><span class=\"token punctuation\">,</span> test_images <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span>\n\n<span class=\"token comment\"># 模型构建</span>\nmodel <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 模型编译与训练</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>optimizer<span class=\"token operator\">=</span><span class=\"token string\">'adam'</span><span class=\"token punctuation\">,</span>\n              loss<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>SparseCategoricalCrossentropy<span class=\"token punctuation\">(</span>from_logits<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              metrics<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'accuracy'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nhistory <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_images<span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">,</span> epochs<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> \n                    validation_data<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>test_images<span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>想要了解更多Tensorflow2.x的示例，可以参考专栏 <a href=\"https://blog.csdn.net/lovemy134611/category_10162232.html\">Tensorflow</a>.</p>\n<h3>21、 PyTorch</h3>\n<p><code>PyTorch</code> 的前身是 Torch，其底层和 Torch 框架一样，但是使用 Python 重新写了很多内容，不仅更加灵活，支持动态图，而且提供了 Python 接口。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 导入库</span>\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader\n<span class=\"token keyword\">from</span> torchvision <span class=\"token keyword\">import</span> datasets\n<span class=\"token keyword\">from</span> torchvision<span class=\"token punctuation\">.</span>transforms <span class=\"token keyword\">import</span> ToTensor<span class=\"token punctuation\">,</span> Lambda<span class=\"token punctuation\">,</span> Compose\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\n<span class=\"token comment\"># 模型构建</span>\ndevice <span class=\"token operator\">=</span> <span class=\"token string\">\"cuda\"</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"cpu\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using {} device\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Define model</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NeuralNetwork</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>NeuralNetwork<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>flatten <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>linear_relu_stack <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token operator\">*</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        logits <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>linear_relu_stack<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> logits\n\nmodel <span class=\"token operator\">=</span> NeuralNetwork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 损失函数和优化器</span>\nloss_fn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noptimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 模型训练</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span>dataloader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> loss_fn<span class=\"token punctuation\">,</span> optimizer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dataloader<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> batch<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>dataloader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Compute prediction error</span>\n        pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n        loss <span class=\"token operator\">=</span> loss_fn<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Backpropagation</span>\n        optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> batch <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            loss<span class=\"token punctuation\">,</span> current <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> batch <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"loss: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>loss<span class=\"token punctuation\">:</span><span class=\"token format-spec\">&gt;7f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">  [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>current<span class=\"token punctuation\">:</span><span class=\"token format-spec\">&gt;5d</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>size<span class=\"token punctuation\">:</span><span class=\"token format-spec\">&gt;5d</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>22、 Theano</h3>\n<p><code>Theano</code> 是一个 Python 库，它允许定义、优化和有效地计算涉及多维数组的数学表达式，建在 NumPy 之上。<br/> 在 <code>Theano</code> 中实现计算雅可比矩阵：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> theano\n<span class=\"token keyword\">import</span> theano<span class=\"token punctuation\">.</span>tensor <span class=\"token keyword\">as</span> T\nx <span class=\"token operator\">=</span> T<span class=\"token punctuation\">.</span>dvector<span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\nJ<span class=\"token punctuation\">,</span> updates <span class=\"token operator\">=</span> theano<span class=\"token punctuation\">.</span>scan<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> i<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span>x <span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">.</span>grad<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sequences<span class=\"token operator\">=</span>T<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> non_sequences<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nf <span class=\"token operator\">=</span> theano<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> J<span class=\"token punctuation\">,</span> updates<span class=\"token operator\">=</span>updates<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>23、 Keras</h3>\n<p><code>Keras</code> 是一个用 Python 编写的高级神经网络 API，它能够以 TensorFlow, CNTK, 或者 Theano 作为后端运行。Keras 的开发重点是支持快速的实验，能够以最小的时延把想法转换为实验结果。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Sequential\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Dense\n\n<span class=\"token comment\"># 模型构建</span>\nmodel <span class=\"token operator\">=</span> Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span>units<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> input_dim<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span>units<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 模型编译与训练</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>loss<span class=\"token operator\">=</span><span class=\"token string\">'categorical_crossentropy'</span><span class=\"token punctuation\">,</span>\n              optimizer<span class=\"token operator\">=</span><span class=\"token string\">'sgd'</span><span class=\"token punctuation\">,</span>\n              metrics<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'accuracy'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> epochs<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>         \n</code></pre>\n<h3>24、 Caffe</h3>\n<p>在 <a href=\"https://caffe2.ai/\">Caffe2</a> 官方网站上，这样说道：<code>Caffe2</code> 现在是 <code>PyTorch</code> 的一部分。虽然这些 api 将继续工作，但鼓励使用 PyTorch api。</p>\n<h3>25、 MXNet</h3>\n<p><code>MXNet</code> 是一款设计为效率和灵活性的深度学习框架。它允许混合符号编程和命令式编程，从而最大限度提高效率和生产力。<br/> 使用 <code>MXNet</code> 构建手写数字识别模型：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> mxnet <span class=\"token keyword\">as</span> mx\n<span class=\"token keyword\">from</span> mxnet <span class=\"token keyword\">import</span> gluon\n<span class=\"token keyword\">from</span> mxnet<span class=\"token punctuation\">.</span>gluon <span class=\"token keyword\">import</span> nn\n<span class=\"token keyword\">from</span> mxnet <span class=\"token keyword\">import</span> autograd <span class=\"token keyword\">as</span> ag\n<span class=\"token keyword\">import</span> mxnet<span class=\"token punctuation\">.</span>ndarray <span class=\"token keyword\">as</span> F\n\n<span class=\"token comment\"># 数据加载</span>\nmnist <span class=\"token operator\">=</span> mx<span class=\"token punctuation\">.</span>test_utils<span class=\"token punctuation\">.</span>get_mnist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbatch_size <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\ntrain_data <span class=\"token operator\">=</span> mx<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>NDArrayIter<span class=\"token punctuation\">(</span>mnist<span class=\"token punctuation\">[</span><span class=\"token string\">'train_data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mnist<span class=\"token punctuation\">[</span><span class=\"token string\">'train_label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nval_data <span class=\"token operator\">=</span> mx<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>NDArrayIter<span class=\"token punctuation\">(</span>mnist<span class=\"token punctuation\">[</span><span class=\"token string\">'test_data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mnist<span class=\"token punctuation\">[</span><span class=\"token string\">'test_label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># CNN模型</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>gluon<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pool1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pool2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pool1<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>tanh<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pool2<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>tanh<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 0 means copy over size from corresponding dimension.</span>\n        <span class=\"token comment\"># -1 means infer size from the rest of dimensions.</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>tanh<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fc1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>tanh<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fc2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x\nnet <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 初始化与优化器定义</span>\n<span class=\"token comment\"># set the context on GPU is available otherwise CPU</span>\nctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>mx<span class=\"token punctuation\">.</span>gpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> mx<span class=\"token punctuation\">.</span>test_utils<span class=\"token punctuation\">.</span>list_gpus<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> mx<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nnet<span class=\"token punctuation\">.</span>initialize<span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>Xavier<span class=\"token punctuation\">(</span>magnitude<span class=\"token operator\">=</span><span class=\"token number\">2.24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">=</span>ctx<span class=\"token punctuation\">)</span>\ntrainer <span class=\"token operator\">=</span> gluon<span class=\"token punctuation\">.</span>Trainer<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>collect_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sgd'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'learning_rate'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 模型训练</span>\n<span class=\"token comment\"># Use Accuracy as the evaluation metric.</span>\nmetric <span class=\"token operator\">=</span> mx<span class=\"token punctuation\">.</span>metric<span class=\"token punctuation\">.</span>Accuracy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsoftmax_cross_entropy_loss <span class=\"token operator\">=</span> gluon<span class=\"token punctuation\">.</span>loss<span class=\"token punctuation\">.</span>SoftmaxCrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Reset the train data iterator.</span>\n    train_data<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> batch <span class=\"token keyword\">in</span> train_data<span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> gluon<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>split_and_load<span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ctx_list<span class=\"token operator\">=</span>ctx<span class=\"token punctuation\">,</span> batch_axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        label <span class=\"token operator\">=</span> gluon<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>split_and_load<span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ctx_list<span class=\"token operator\">=</span>ctx<span class=\"token punctuation\">,</span> batch_axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># Inside training scope</span>\n        <span class=\"token keyword\">with</span> ag<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                z <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># Computes softmax cross entropy loss.</span>\n                loss <span class=\"token operator\">=</span> softmax_cross_entropy_loss<span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># Backpropogate the error for one iteration.</span>\n                loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                outputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n        metric<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span>\n        trainer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Gets the evaluation result.</span>\n    name<span class=\"token punctuation\">,</span> acc <span class=\"token operator\">=</span> metric<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Reset evaluation result to initial state.</span>\n    metric<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'training acc at epoch %d: %s=%f'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>26、 PaddlePaddle</h3>\n<p>飞桨 <code>(PaddlePaddle)</code> 以百度多年的深度学习技术研究和业务应用为基础，集深度学习核心训练和推理框架、基础模型库、端到端开发套件、丰富的工具组件于一体。是中国首个自主研发、功能完备、开源开放的产业级深度学习平台。<br/> 使用 <code>PaddlePaddle</code> 实现 <code>LeNtet5</code>：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 导入需要的包</span>\n<span class=\"token keyword\">import</span> paddle\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> paddle<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">import</span> Conv2D<span class=\"token punctuation\">,</span> MaxPool2D<span class=\"token punctuation\">,</span> Linear\n\n<span class=\"token comment\">## 组网</span>\n<span class=\"token keyword\">import</span> paddle<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional <span class=\"token keyword\">as</span> F\n\n<span class=\"token comment\"># 定义 LeNet 网络结构</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LeNet</span><span class=\"token punctuation\">(</span>paddle<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>Layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num_classes<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>LeNet<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建卷积和池化层</span>\n        <span class=\"token comment\"># 创建第1个卷积层</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>in_channels<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> out_channels<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>max_pool1 <span class=\"token operator\">=</span> MaxPool2D<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 尺寸的逻辑：池化层未改变通道数；当前通道数为6</span>\n        <span class=\"token comment\"># 创建第2个卷积层</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>in_channels<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> out_channels<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>max_pool2 <span class=\"token operator\">=</span> MaxPool2D<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建第3个卷积层</span>\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>in_channels<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> out_channels<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span>\n        <span class=\"token comment\"># 输入size是[28,28]，经过三次卷积和两次池化之后，C*H*W等于120</span>\n        self<span class=\"token punctuation\">.</span>fc1 <span class=\"token operator\">=</span> Linear<span class=\"token punctuation\">(</span>in_features<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> out_features<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建全连接层，第一个全连接层的输出神经元个数为64， 第二个全连接层输出神经元个数为分类标签的类别数</span>\n        self<span class=\"token punctuation\">.</span>fc2 <span class=\"token operator\">=</span> Linear<span class=\"token punctuation\">(</span>in_features<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> out_features<span class=\"token operator\">=</span>num_classes<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 网络的前向计算过程</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 每个卷积层使用Sigmoid激活函数，后面跟着一个2x2的池化</span>\n        x <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>max_pool1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>max_pool2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span>\n        x <span class=\"token operator\">=</span> paddle<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<h3>27、 CNTK</h3>\n<p><code>CNTK(Cognitive Toolkit)</code> 是一个深度学习工具包，通过有向图将神经网络描述为一系列计算步骤。在这个有向图中，叶节点表示输入值或网络参数，而其他节点表示对其输入的矩阵运算。<code>CNTK</code> 可以轻松地实现和组合流行的模型类型，如 <code>CNN</code> 等。<br/> <code>CNTK</code> 用网络描述语言 <code>(network description language, NDL)</code> 描述一个神经网络。 简单的说，要描述输入的 feature，输入的 label，一些参数，参数和输入之间的计算关系，以及目标节点是什么。</p>\n<pre><code class=\"prism language-python\">NDLNetworkBuilder<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n    \n    run<span class=\"token operator\">=</span>ndlLR\n    \n    ndlLR<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n      <span class=\"token comment\"># sample and label dimensions</span>\n      SDim<span class=\"token operator\">=</span>$dimension$\n      LDim<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n    \n      features<span class=\"token operator\">=</span>Input<span class=\"token punctuation\">(</span>SDim<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      labels<span class=\"token operator\">=</span>Input<span class=\"token punctuation\">(</span>LDim<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n      <span class=\"token comment\"># parameters to learn</span>\n      B0 <span class=\"token operator\">=</span> Parameter<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> \n      W0 <span class=\"token operator\">=</span> Parameter<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> SDim<span class=\"token punctuation\">)</span>\n      \n      \n      B <span class=\"token operator\">=</span> Parameter<span class=\"token punctuation\">(</span>LDim<span class=\"token punctuation\">)</span>\n      W <span class=\"token operator\">=</span> Parameter<span class=\"token punctuation\">(</span>LDim<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    \n      <span class=\"token comment\"># operations</span>\n      t0 <span class=\"token operator\">=</span> Times<span class=\"token punctuation\">(</span>W0<span class=\"token punctuation\">,</span> features<span class=\"token punctuation\">)</span>\n      z0 <span class=\"token operator\">=</span> Plus<span class=\"token punctuation\">(</span>t0<span class=\"token punctuation\">,</span> B0<span class=\"token punctuation\">)</span>\n      s0 <span class=\"token operator\">=</span> Sigmoid<span class=\"token punctuation\">(</span>z0<span class=\"token punctuation\">)</span>   \n      \n      t <span class=\"token operator\">=</span> Times<span class=\"token punctuation\">(</span>W<span class=\"token punctuation\">,</span> s0<span class=\"token punctuation\">)</span>\n      z <span class=\"token operator\">=</span> Plus<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span>\n      s <span class=\"token operator\">=</span> Sigmoid<span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>    \n    \n      LR <span class=\"token operator\">=</span> Logistic<span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n      EP <span class=\"token operator\">=</span> SquareError<span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n    \n      <span class=\"token comment\"># root nodes</span>\n      FeatureNodes<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">)</span>\n      LabelNodes<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">)</span>\n      CriteriaNodes<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LR<span class=\"token punctuation\">)</span>\n      EvalNodes<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>EP<span class=\"token punctuation\">)</span>\n      OutputNodes<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>s0<span class=\"token punctuation\">,</span>W0<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>   \n  <span class=\"token punctuation\">]</span>\n</code></pre>\n<h2><a id=\"_798\"></a>总结与分类</h2>\n<h3><a id=\"python__799\"></a>python 常用机器学习及深度学习库总结</h3>\n<table><thead><tr><th>库名</th><th>官方网站</th><th>简介</th></tr></thead><tbody><tr><td>NumPy</td><td><a href=\"http://www.numpy.org/\">http://www.numpy.org/</a></td><td>提供对大型多维阵列的支持，NumPy是计算机视觉中的一个关键库，因为图像可以表示为多维数组，将图像表示为NumPy数组有许多优点</td></tr><tr><td>OpenCV</td><td><a href=\"https://opencv.org/\">https://opencv.org/</a></td><td>开源的计算机视觉库</td></tr><tr><td>Scikit-image</td><td><a href=\"https://scikit-image.org/\">https:// scikit-image.org/</a></td><td>图像处理算法的集合,由scikit-image操作的图像只能是NumPy数组</td></tr><tr><td>Python Imaging Library(PIL)</td><td><a href=\"http://www.pythonware.com/products/pil/\">http://www.pythonware.com/products/pil/</a></td><td>图像处理库，提供强大的图像处理和图形功能</td></tr><tr><td>Pillow</td><td><a href=\"https://pillow.readthedocs.io/\">https://pillow.readthedocs.io/</a></td><td>PIL的一个分支</td></tr><tr><td>SimpleCV</td><td><a href=\"http://simplecv.org/\">http://simplecv.org/</a></td><td>计算机视觉框架，提供了处理图像处理的关键功能</td></tr><tr><td>Mahotas</td><td><a href=\"https://mahotas.readthedocs.io/\">https://mahotas.readthedocs.io/</a></td><td>提供了用于图像处理和计算机视觉的一组函数，它最初是为生物图像信息学而设计的；但是，现在它在其他领域也发挥了重要作用，它完全基于numpy数组作为其数据类型</td></tr><tr><td>Ilastik</td><td><a href=\"http://ilastik.org/\">http://ilastik.org/</a></td><td>用户友好且简单的交互式图像分割、分类和分析工具</td></tr><tr><td>Scikit-learn</td><td><a href=\"http://scikit-learn.org/\">http://scikit-learn.org/</a></td><td>机器学习库，具有各种分类、回归和聚类算法</td></tr><tr><td>SciPy</td><td><a href=\"https://www.scipy.org/\">https://www.scipy.org/</a></td><td>科学和技术计算库</td></tr><tr><td>NLTK</td><td><a href=\"https://www.nltk.org/\">https://www.nltk.org/</a></td><td>处理自然语言数据的库和程序</td></tr><tr><td>spaCy</td><td><a href=\"https://spacy.io/\">https://spacy.io/</a></td><td>开源软件库，用于Python中的高级自然语言处理</td></tr><tr><td>LibROSA</td><td><a href=\"https://librosa.github.io/librosa/\">https://librosa.github.io/librosa/</a></td><td>用于音乐和音频处理的库</td></tr><tr><td>Pandas</td><td><a href=\"https://pandas.pydata.org/\">https://pandas.pydata.org/</a></td><td>构建在NumPy之上的库，提供高级数据计算工具和易于使用的数据结构</td></tr><tr><td>Matplotlib</td><td><a href=\"https://matplotlib.org\">https://matplotlib.org</a></td><td>绘图库，它提供了一整套和 matlab 相似的命令 API，可以生成所需的出版质量级别的图形</td></tr><tr><td>Seaborn</td><td><a href=\"https://seaborn.pydata.org/\">https://seaborn.pydata.org/</a></td><td>是建立在Matplotlib之上的绘图库</td></tr><tr><td>Orange</td><td><a href=\"https://orange.biolab.si/\">https://orange.biolab.si/</a></td><td>面向新手和专家的开源机器学习和数据可视化工具包</td></tr><tr><td>PyBrain</td><td><a href=\"http://pybrain.org/\">http://pybrain.org/</a></td><td>机器学习库，为机器学习提供易于使用的最新算法</td></tr><tr><td>Milk</td><td><a href=\"http://luispedro.org/software/milk/\">http://luispedro.org/software/milk/</a></td><td>机器学习工具箱，主要用于监督学习中的多分类问题</td></tr><tr><td>TensorFlow</td><td><a href=\"https://www.tensorflow.org/\">https://www.tensorflow.org/</a></td><td>开源的机器学习和深度学习库</td></tr><tr><td>PyTorch</td><td><a href=\"https://pytorch.org/\">https://pytorch.org/</a></td><td>开源的机器学习和深度学习库</td></tr><tr><td>Theano</td><td><a href=\"http://deeplearning.net/software/theano/\">http://deeplearning.net/software/theano/</a></td><td>用于快速数学表达式、求值和计算的库，已编译为可在CPU和GPU架构上运行</td></tr><tr><td>Keras</td><td><a href=\"https://keras.io/\">https://keras.io/</a></td><td>高级深度学习库，可以在 TensorFlow、CNTK、Theano 或 Microsoft Cognitive Toolkit 之上运行</td></tr><tr><td>Caffe2</td><td><a href=\"https://caffe2.ai/\">https://caffe2.ai/</a></td><td>Caffe2 是一个兼具表现力、速度和模块性的深度学习框架，是 Caffe 的实验性重构，能以更灵活的方式组织计算</td></tr><tr><td>MXNet</td><td><a href=\"https://mxnet.apache.org/\">https://mxnet.apache.org/</a></td><td>设计为效率和灵活性的深度学习框架，允许混合符号编程和命令式编程</td></tr><tr><td>PaddlePaddle</td><td><a href=\"https://www.paddlepaddle.org.cn\">https://www.paddlepaddle.org.cn</a></td><td>以百度多年的深度学习技术研究和业务应用为基础，集深度学习核心训练和推理框架、基础模型库、端到端开发套件、丰富的工具组件于一体</td></tr><tr><td>CNTK</td><td><a href=\"https://cntk.ai/\">https://cntk.ai/</a></td><td>深度学习工具包，通过有向图将神经网络描述为一系列计算步骤。在这个有向图中，叶节点表示输入值或网络参数，而其他节点表示对其输入的矩阵运算</td></tr></tbody></table>\n<h3><a id=\"_830\"></a>分类</h3>\n<p>可以根据其主要用途将这些库进行分类：</p>\n<table><thead><tr><th>类别</th><th>库</th></tr></thead><tbody><tr><td>图像处理</td><td>NumPy、OpenCV、scikit image、PIL、Pillow、SimpleCV、Mahotas、ilastik</td></tr><tr><td>文本处理</td><td>NLTK、spaCy、NumPy、scikit learn、PyTorch</td></tr><tr><td>音频处理</td><td>LibROSA</td></tr><tr><td>机器学习</td><td>pandas, scikit-learn, Orange, PyBrain, Milk</td></tr><tr><td>数据查看</td><td>Matplotlib、Seaborn、scikit-learn、Orange</td></tr><tr><td>深度学习</td><td>TensorFlow、Pytorch、Theano、Keras、Caffe2、MXNet、PaddlePaddle、CNTK</td></tr><tr><td>科学计算</td><td>SciPy</td></tr></tbody></table>\n<h2><a id=\"_842\"></a>更多</h2>\n<p>有关 AI 和机器学习的其他 Python 库和包，可以访问<a href=\"https://python.libhunt.com/packages/artificial-intelligence\">https://python.libhunt.com/packages/artificial-intelligence</a>.</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}