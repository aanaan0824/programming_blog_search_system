{"blogid": "119992844", "writerAge": "码龄8年", "writerBlogNum": "335", "writerCollect": "10530", "writerComment": "1087", "writerFan": "28194", "writerGrade": "7级", "writerIntegral": "16039", "writerName": "恬静的小魔龙", "writerProfileAdress": "writer_image\\profile_119992844.jpg", "writerRankTotal": "566", "writerRankWeekly": "1921", "writerThumb": "2587", "writerVisitNum": "1871820", "blog_read_count": "7391", "blog_time": "于 2021-08-30 11:20:29 发布", "blog_title": "【Unity3D-UGUI系列】（八）InputField 输入框组件详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>推荐阅读</p>\n<ul><li><a href=\"https://blog.csdn.net/q764424567/\">CSDN主页</a></li><li><a href=\"https://github.com/764424567\">GitHub开源地址</a></li><li><a href=\"https://github.com/764424567/Unity-plugin\">Unity3D插件分享</a></li><li><a href=\"https://www.jianshu.com/u/6475c7b88cd3\">简书地址</a></li><li><a href=\"https://www.qq764424567.top/\">我的个人博客</a></li><li><a href=\"https://jq.qq.com/?_wv=1027&amp;k=5sQDw5DN\">QQ群：1040082875</a></li></ul>\n</blockquote>\n<p>大家好，我是佛系工程师<font color=\"red\">☆恬静的小魔龙☆</font>，不定时更新Unity开发技巧，觉得有用记得一键三连哦。</p>\n<h2><a id=\"_11\"></a>一、前言</h2>\n<p>首先，介绍一个UGUI，NGUI是UGUI的前身，Unity开发团队将NGUI的开发团队收到自己开发团队下，并且由此开发了UGUI。<br/> UGUI系统是从Unity 4.6版本后才开始集成到Unity编辑器中。</p>\n<p>UGUI的特点：</p>\n<ul><li>灵活</li><li>快速</li><li>可视化</li></ul>\n<p>对于开发者来说有很多的优点，比如说：</p>\n<ul><li>效率高</li><li>实现效果好</li><li>易于使用和拓展</li><li>与Unity编辑器的兼容性高</li></ul>\n<p>这是本系列文章的第八篇：<br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119923544\">【Unity3D-UGUI系列】（一）Canvas 画布组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119928185\">【Unity3D-UGUI系列】（二）Text文本组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119989323\">【Unity3D-UGUI系列】（三）Button 按钮组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119989789\">【Unity3D-UGUI系列】（四）Image 图片组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119990307\">【Unity3D-UGUI系列】（五）RawImage 显示纹理组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119991894\">【Unity3D-UGUI系列】（六）Panel 容器组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119992141\">【Unity3D-UGUI系列】（七）Dropdown 下拉菜单组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119992844\">【Unity3D-UGUI系列】（八）InputField 输入框组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119997249\">【Unity3D-UGUI系列】（九）Scrollbar 滚动条组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/119997855\">【Unity3D-UGUI系列】（十）Slider 滑动条组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/120000966\">【Unity3D-UGUI系列】（十一）Toggle 开关组件详解</a><br/> <a href=\"https://blog.csdn.net/q764424567/article/details/120002172\">【Unity3D-UGUI系列】（十二）ScrollView 滚动视图组件详解</a></p>\n<h2><a id=\"InputField__41\"></a>二、InputField 输入框组件介绍</h2>\n<p>InputField 输入框组件是一个用来输入内容的组件。</p>\n<p>通常用来输入账号、密码、聊天信息，或者输入参数等情况。</p>\n<p>在Unity的Hierarchy视图中选择“Create→UI→Input Field”新建一个输入框组件：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f5d09636518347e79cf73d274ace7c96.png\"/><br/> 在Hierarchy视图中，可以看到InputField的层级结构：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\319d5094f17e40debc39791f8c1e12ae.png\"/><br/> InputField子对象有两个Text，Placeholder用来提示用户输入的占位符，Text用来输入内容。</p>\n<h2><a id=\"InputField__52\"></a>三、InputField 输入框组件属性</h2>\n<p>接下来详细的看一下InputField 输入框组件的属性：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a8bff13f1b964333999c822031da3991.png\"/><br/> Image组件已经介绍过了，可以忽略，主要了解Input Field组件：<br/> Interactable、Transition、Navigation跟Button组件是相似的，Button教程中有详细解释。</p>\n<table><thead><tr><th>属性</th><th>功能</th></tr></thead><tbody><tr><td>TextComponent</td><td>用来管理输入的文本组件</td></tr><tr><td>Text</td><td>输入的内容</td></tr><tr><td>Character Limit</td><td>字符限制类型，可以限制最大字符数的值。</td></tr><tr><td>Content Type</td><td>内容类型，定义输入内容接受/限制的字符类型</td></tr><tr><td>Line Type</td><td>行类型。单行、多行，多行回车换行</td></tr><tr><td>Placeholder</td><td>占位符，用来提示输入的内容，当点击输入框后会隐藏</td></tr><tr><td>Caret Blink Rate</td><td>输入框上的光标的闪烁频率</td></tr><tr><td>Caret Width</td><td>输入框上的光标的宽度</td></tr><tr><td>Custom Caret Color</td><td>自定义光标颜色</td></tr><tr><td>Selection Color</td><td>选中文本的背景颜色</td></tr><tr><td>Hide Mobile Input</td><td>隐藏移动输入内容</td></tr><tr><td>Read Only</td><td>是否只读</td></tr><tr><td>On Value Changed</td><td>监听事件</td></tr></tbody></table>\n<p>InputField 输入框组件主要就是为了管理输入内容的组件，可以控制输入的文本的长度，类型显示等。</p>\n<p>下面就详细介绍一下InputField组件的输入类型。</p>\n<h2><a id=\"InputField__78\"></a>四、InputField 输入框组件的字符类型</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20200818102614280.png\"/><br/> 一共有以下几种类型：</p>\n<table><thead><tr><th>类型</th><th>功能</th></tr></thead><tbody><tr><td>Standard</td><td>标准，可以输入任意字符</td></tr><tr><td>Auto corrected</td><td>自动更正，可以自动更正用户输入，并建议输入内容</td></tr><tr><td>Integer Number</td><td>整数，只允许输入整数</td></tr><tr><td>Decimal Number</td><td>小数，允许输入数字和小数点后一位</td></tr><tr><td>Alphanumeric</td><td>字母数字，允许字母和数字。无法输入符号</td></tr><tr><td>Name</td><td>名称(支持中文)自动将每个单词的首字母大写。</td></tr><tr><td>Email Address</td><td>电子邮件地址，允许您输入最多包含一个@符号的字母数字字符串</td></tr><tr><td>Password</td><td>密码：用 * 表示输入的字符，从而隐藏输入内容。允许输入任意字符</td></tr><tr><td>Pin</td><td>密码：用 * 号表示输入的字符，从而隐藏输入内容。仅允许输入整数</td></tr><tr><td>Custom</td><td>自定义：允许自定义行类型、输入类型、默认键盘类型、字符验证</td></tr></tbody></table>\n<p>这几个就没啥好说的，<img alt=\"在这里插入图片描述\" src=\"image\\202008181032550.png\"/></p>\n<p>主要讲一下自定义：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20200818103205565.png\"/><br/> Line Type：行类型，允许输入单行或者多行，或者Enter 键来新建行，继续输入<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20200818103523596.png\"/><br/> Input Type：输入类型，有三个选项，任何字符、自动修正、密码类型<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20200818103621898.png\"/><br/> Keyboard Type：它可以在用户选中输入框时，调出不同类型的键盘<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2020081810373437.png\"/></p>\n<table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>Default</td><td>目标平台的默认键盘</td></tr><tr><td>ASCLL Capable</td><td>带标准ASCII键的键盘。</td></tr><tr><td>Numbers And Punctuation</td><td>键盘与数字和标点符号键</td></tr><tr><td>URL</td><td>键盘与URL输入键</td></tr><tr><td>Number Pad</td><td>键盘与标准数字键</td></tr><tr><td>Phone Pad</td><td>键盘与适合键入电话号码的布局</td></tr><tr><td>NamePhone Pad</td><td>键盘与字母数字键</td></tr><tr><td>Email Address</td><td>带有适合键入电子邮件地址的其他键的键盘</td></tr><tr><td>Nintendo Network Account</td><td>带有网络账号键的键盘</td></tr><tr><td>Social</td><td>键盘与常用于社交媒体上的符号键，如Twitter</td></tr><tr><td>Search</td><td>键盘上带有“.” 空格键旁边的键，适合键入搜索词</td></tr></tbody></table>\n<p>Character Validatior：字符验证类型，有整数、小数、字母数字、名字、Email等</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20200818104017830.png\"/><br/> 按需设置咯</p>\n<p>如果上面还不满足你的设置，想要更加严格的限制，那么请往下看。</p>\n<h2><a id=\"_128\"></a>五、代码限制输入字符</h2>\n<p>比如说用正则表达式来判断输入的字符串是否符合格式，符合格式就不管，不符合格式就把赋值输入的字符串减一位的字符串，也就相当于删除掉最后一位</p>\n<p>关于正则表达式的应用可以看我另一篇文章：<a href=\"https://itmonon.blog.csdn.net/article/details/108072717\">文章链接</a></p>\n<h3><a id=\"5109_af_AF_133\"></a>5-1、限制输入的字符串0-9 a-f A-F</h3>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>RegularExpressions</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>UI</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Input_Test</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">InputField</span> m_InputField<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        m_InputField <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>InputField<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m_InputField<span class=\"token punctuation\">.</span>onValueChanged<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>OnInputFieldValueChang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnInputFieldValueChang</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> inputInfo<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Regex</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^[A-Fa-f0-9]+$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>inputInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            m_InputField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> inputInfo<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_InputField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                m_InputField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                m_InputField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> inputInfo<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inputInfo<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>    \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20200818115427282.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}