{"blogid": "125579649", "writerAge": "码龄2年", "writerBlogNum": "74", "writerCollect": "2262", "writerComment": "1775", "writerFan": "4012", "writerGrade": "6级", "writerIntegral": "6012", "writerName": "不苒", "writerProfileAdress": "writer_image\\profile_125579649.jpg", "writerRankTotal": "2728", "writerRankWeekly": "124", "writerThumb": "1988", "writerVisitNum": "89049", "blog_read_count": "1171", "blog_time": "于 2022-07-04 08:15:00 发布", "blog_title": "【JavaScript】ES6 中class定义类", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20f227712707475386d6fe857a37baec.jpeg\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_3\">🍋前言</a></li><li><a href=\"#_8\">🍉正文</a></li><li><ul><li><a href=\"#1_9\">1.声明类的两种方式：</a></li><li><a href=\"#2class__26\">2.class 类的构造函数</a></li><li><a href=\"#3class_58\">3.class中方法定义</a></li><li><ul><li><a href=\"#31_class__59\">3.1 class 中定义普通的实例方法</a></li><li><a href=\"#32_class__81\">3.2 class 类中定义访问器方法</a></li><li><a href=\"#33__108\">3.3 类的静态方法（类方法）</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_153\">🥭文末</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_3\"></a>🍋前言</h1>\n<blockquote>\n<p>我们会发现，按照之前学习过的构造函数形式创建 类 ，不仅仅和编写普通的函数过于相似，而且代码并不容易理解。</p>\n<ul><li>在 ES6（ECMAScript2015）新的标准中使用了class关键字来直接定义类；</li><li>但是类本质上依然是之前所学习过的构造函数、原型链的语法糖而已。所以学好之前的构造函数、原型链更有利于我们理解类的概念和继承关系。</li></ul>\n</blockquote>\n<h1><a id=\"_8\"></a>🍉正文</h1>\n<h2><a id=\"1_9\"></a>1.声明类的两种方式：</h2>\n<ul><li><strong>class 关键字 类的声明</strong></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><strong>类表达式(不常用)</strong></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> People <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>那么 Person类的原型是什么？如下展示了原型和typeof中Person的类型</p>\n</blockquote>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Person {}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [Function: Function]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Person<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function</span>\n</code></pre>\n<h2><a id=\"2class__26\"></a>2.class 类的构造函数</h2>\n<p><strong>如果我们希望在创建对象的时候给类传递一些参数，这个时候应该怎么做呢？</strong></p>\n<ul><li>每个类都可以有一个自己的构造函数（方法），这个方法的名称是固定的 <code>constructor</code>。</li><li>当我们通过new操作符，操作一个类的时候会调用这个类的构造函数<code>constructor</code>。</li><li>每个类只能有一个构造函数，如果包含多个构造函数，那么会抛出异常。</li></ul>\n<p>示例代码如下：</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 类的声明</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 类的构造方法</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token comment\">// Person { name: 'h', age: 19 }</span>\np1<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// h</span>\n</code></pre>\n<blockquote>\n<p>当我们通过new关键字操作类的时候，会调用这个 <code>constructor</code>函数，并执行如下操作(假设new关键字新创建的对象为p1):</p>\n<ol><li>在内存中创建一个对象</li><li>将类的原型prototype赋值给创建出来的对象<code> p1.__proto__ = Person.prototype</code></li><li>将对象赋值给函数的this：new绑定 <code>this = p1</code></li><li>执行函数体中的代码</li><li>自动返回创建出来的对象<br/> **</li></ol>\n</blockquote>\n<h2><a id=\"3class_58\"></a>3.class中方法定义</h2>\n<h3><a id=\"31_class__59\"></a>3.1 class 中定义普通的实例方法</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 类的构造方法</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_address <span class=\"token operator\">=</span> <span class=\"token string\">'北京市'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">eating</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' 正在eating~'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">running</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' 正在running~'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jam'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span>\np1<span class=\"token punctuation\">.</span><span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\np1<span class=\"token punctuation\">.</span><span class=\"token function\">running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"32_class__81\"></a>3.2 class 类中定义访问器方法</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 类的构造方法</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_address <span class=\"token operator\">=</span> <span class=\"token string\">'北京市'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 类的访问器方法</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">address</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 在这里可以设置拦截访问操作</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'获取呢'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_address\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">address</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 在这里可以设置拦截设置操作</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'修改呢'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_address <span class=\"token operator\">=</span> newValue\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jam'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span>\np1<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token string\">'天津市'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"33__108\"></a>3.3 类的静态方法（类方法）</h3>\n<blockquote>\n<p>类的静态方法就是在方法前加一个<code>static</code>关键字，该方法就成为了类的静态方法。<br/> 类的静态方法，不会被类的实例继承，而是直接通过类来调用。</p>\n</blockquote>\n<p><strong>小案例：使用类的静态方法完成随机生成Person实例</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 类的构造方法</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_address <span class=\"token operator\">=</span> <span class=\"token string\">'北京市'</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 类的静态方法（也称为类方法）  创建对象随机生成一个名字小案例</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">randomPerson</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 创建一个存储名字的数组</span>\n        <span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jam'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jak'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jag'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jao'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jno'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">// Math.random()生成一个0-1之间的数字，小数肯定是不对的</span>\n        <span class=\"token keyword\">let</span> nameIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> names<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> names<span class=\"token punctuation\">[</span>nameIndex<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">// 生成随机年龄</span>\n        <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// return随机生成的人物 姓名+ 年龄</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>这里直接调用类的静态方法就可以 不需要使用new操作符创建创建实例对象</p>\n</blockquote>\n<ul><li><strong>随机生成一个Person实例（附效果图）</strong></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 随机生成一个  </span>\n<span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">randomPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\34d25a2115db472894868970075583cf.png\"/></p>\n<ul><li><strong>随机生成多个Person实例（附带效果图）</strong></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 随机生成多个</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span><span class=\"token function\">randomPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\449890805a3a4eb4b28ae3daa0969085.png\"/></p>\n<h1><a id=\"_153\"></a>🥭文末</h1>\n<blockquote>\n<p>⏳ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          名\n         \n         \n          言\n         \n         \n          警\n         \n         \n          句\n         \n         \n          ：\n         \n         \n          说\n         \n         \n          能\n         \n         \n          做\n         \n         \n          的\n         \n         \n          ，\n         \n         \n          做\n         \n         \n          说\n         \n         \n          过\n         \n         \n          的\n         \n        \n       \n       \n        \\textcolor{red} {名言警句：说能做的，做说过的}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0em; vertical-align: 0em;\"></span><span class=\"mord cjk_fallback\" style=\"color: red;\">名</span><span class=\"mord cjk_fallback\" style=\"color: red;\">言</span><span class=\"mord cjk_fallback\" style=\"color: red;\">警</span><span class=\"mord cjk_fallback\" style=\"color: red;\">句</span><span class=\"mord cjk_fallback\" style=\"color: red;\">：</span><span class=\"mord cjk_fallback\" style=\"color: red;\">说</span><span class=\"mord cjk_fallback\" style=\"color: red;\">能</span><span class=\"mord cjk_fallback\" style=\"color: red;\">做</span><span class=\"mord cjk_fallback\" style=\"color: red;\">的</span><span class=\"mord cjk_fallback\" style=\"color: red;\">，</span><span class=\"mord cjk_fallback\" style=\"color: red;\">做</span><span class=\"mord cjk_fallback\" style=\"color: red;\">说</span><span class=\"mord cjk_fallback\" style=\"color: red;\">过</span><span class=\"mord cjk_fallback\" style=\"color: red;\">的</span></span></span></span></span> <br/><br/> ✨ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          原\n         \n         \n          创\n         \n         \n          不\n         \n         \n          易\n         \n         \n          ，\n         \n         \n          还\n         \n         \n          希\n         \n         \n          望\n         \n         \n          各\n         \n         \n          位\n         \n         \n          大\n         \n         \n          佬\n         \n         \n          支\n         \n         \n          持\n         \n         \n          一\n         \n         \n          下\n         \n        \n       \n       \n        \\textcolor{blue}{原创不易，还希望各位大佬支持一下}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0em; vertical-align: 0em;\"></span><span class=\"mord cjk_fallback\" style=\"color: blue;\">原</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">创</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">不</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">易</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">，</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">还</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">希</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">望</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">各</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">位</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">大</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">佬</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">支</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">持</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">一</span><span class=\"mord cjk_fallback\" style=\"color: blue;\">下</span></span></span></span></span> <br/><br/> 👍 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          点\n         \n         \n          赞\n         \n         \n          ，\n         \n         \n          你\n         \n         \n          的\n         \n         \n          认\n         \n         \n          可\n         \n         \n          是\n         \n         \n          我\n         \n         \n          创\n         \n         \n          作\n         \n         \n          的\n         \n         \n          动\n         \n         \n          力\n         \n         \n          ！\n         \n        \n       \n       \n        \\textcolor{green}{点赞，你的认可是我创作的动力！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0em; vertical-align: 0em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">点</span><span class=\"mord cjk_fallback\" style=\"color: green;\">赞</span><span class=\"mord cjk_fallback\" style=\"color: green;\">，</span><span class=\"mord cjk_fallback\" style=\"color: green;\">你</span><span class=\"mord cjk_fallback\" style=\"color: green;\">的</span><span class=\"mord cjk_fallback\" style=\"color: green;\">认</span><span class=\"mord cjk_fallback\" style=\"color: green;\">可</span><span class=\"mord cjk_fallback\" style=\"color: green;\">是</span><span class=\"mord cjk_fallback\" style=\"color: green;\">我</span><span class=\"mord cjk_fallback\" style=\"color: green;\">创</span><span class=\"mord cjk_fallback\" style=\"color: green;\">作</span><span class=\"mord cjk_fallback\" style=\"color: green;\">的</span><span class=\"mord cjk_fallback\" style=\"color: green;\">动</span><span class=\"mord cjk_fallback\" style=\"color: green;\">力</span><span class=\"mord cjk_fallback\" style=\"color: green;\">！</span></span></span></span></span> <br/><br/> ⭐️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          收\n         \n         \n          藏\n         \n         \n          ，\n         \n         \n          你\n         \n         \n          的\n         \n         \n          青\n         \n         \n          睐\n         \n         \n          是\n         \n         \n          我\n         \n         \n          努\n         \n         \n          力\n         \n         \n          的\n         \n         \n          方\n         \n         \n          向\n         \n         \n          ！\n         \n        \n       \n       \n        \\textcolor{green}{收藏，你的青睐是我努力的方向！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0em; vertical-align: 0em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">收</span><span class=\"mord cjk_fallback\" style=\"color: green;\">藏</span><span class=\"mord cjk_fallback\" style=\"color: green;\">，</span><span class=\"mord cjk_fallback\" style=\"color: green;\">你</span><span class=\"mord cjk_fallback\" style=\"color: green;\">的</span><span class=\"mord cjk_fallback\" style=\"color: green;\">青</span><span class=\"mord cjk_fallback\" style=\"color: green;\">睐</span><span class=\"mord cjk_fallback\" style=\"color: green;\">是</span><span class=\"mord cjk_fallback\" style=\"color: green;\">我</span><span class=\"mord cjk_fallback\" style=\"color: green;\">努</span><span class=\"mord cjk_fallback\" style=\"color: green;\">力</span><span class=\"mord cjk_fallback\" style=\"color: green;\">的</span><span class=\"mord cjk_fallback\" style=\"color: green;\">方</span><span class=\"mord cjk_fallback\" style=\"color: green;\">向</span><span class=\"mord cjk_fallback\" style=\"color: green;\">！</span></span></span></span></span> <br/><br/> ✏️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          评\n         \n         \n          论\n         \n         \n          ，\n         \n         \n          你\n         \n         \n          的\n         \n         \n          意\n         \n         \n          见\n         \n         \n          是\n         \n         \n          我\n         \n         \n          进\n         \n         \n          步\n         \n         \n          的\n         \n         \n          财\n         \n         \n          富\n         \n         \n          ！\n         \n        \n       \n       \n        \\textcolor{green}{评论，你的意见是我进步的财富！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0em; vertical-align: 0em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">评</span><span class=\"mord cjk_fallback\" style=\"color: green;\">论</span><span class=\"mord cjk_fallback\" style=\"color: green;\">，</span><span class=\"mord cjk_fallback\" style=\"color: green;\">你</span><span class=\"mord cjk_fallback\" style=\"color: green;\">的</span><span class=\"mord cjk_fallback\" style=\"color: green;\">意</span><span class=\"mord cjk_fallback\" style=\"color: green;\">见</span><span class=\"mord cjk_fallback\" style=\"color: green;\">是</span><span class=\"mord cjk_fallback\" style=\"color: green;\">我</span><span class=\"mord cjk_fallback\" style=\"color: green;\">进</span><span class=\"mord cjk_fallback\" style=\"color: green;\">步</span><span class=\"mord cjk_fallback\" style=\"color: green;\">的</span><span class=\"mord cjk_fallback\" style=\"color: green;\">财</span><span class=\"mord cjk_fallback\" style=\"color: green;\">富</span><span class=\"mord cjk_fallback\" style=\"color: green;\">！</span></span></span></span></span> <br/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}