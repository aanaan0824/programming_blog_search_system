{"blogid": "123233961", "writerAge": "码龄2年", "writerBlogNum": "44", "writerCollect": "110", "writerComment": "10", "writerFan": "10", "writerGrade": "3级", "writerIntegral": "503", "writerName": "月亮是被我吃弯的", "writerProfileAdress": "writer_image\\profile_123233961.jpg", "writerRankTotal": "55115", "writerRankWeekly": "102856", "writerThumb": "44", "writerVisitNum": "34839", "blog_read_count": "1256", "blog_time": "于 2022-03-02 20:32:49 发布", "blog_title": "string 的常见用法详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.string%20%E7%9A%84%E5%AE%9A%E4%B9%89-toc\" style=\"margin-left:40px;\"><a href=\"#1.string%20%E7%9A%84%E5%AE%9A%E4%B9%89\">1.string 的定义</a></p>\n<p id=\"2.string%20%E4%B8%AD%E5%86%85%E5%AE%B9%E7%9A%84%E8%AE%BF%E9%97%AE-toc\" style=\"margin-left:40px;\"><a href=\"#2.string%20%E4%B8%AD%E5%86%85%E5%AE%B9%E7%9A%84%E8%AE%BF%E9%97%AE\">2.string 中内容的访问</a></p>\n<p id=\"3.string%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%AE%9E%E4%BE%8B%E8%A7%A3%E6%9E%90-toc\" style=\"margin-left:40px;\"><a href=\"#3.string%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%AE%9E%E4%BE%8B%E8%A7%A3%E6%9E%90\">3.string 常用函数实例解析</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p>    在C语言中，一般使用字符数组 char str[]来存放字符串，但是使用字符串数组有时会显得操作麻烦，在C++中加入了string类型。</p>\n<p>    注意，如果要使用string，需要添加 string头文件，即# include&lt;string&gt;  (<strong>注意 string. h 和 string 是不一样的头文件</strong>)。除此之外，还需要在头文件下面加上一句：“ using namespace std\"。</p>\n<p>即：</p>\n<blockquote>\n<p>#include&lt;string&gt;</p>\n<p>using namespace std;</p>\n</blockquote>\n<h2 id=\"1.string%20%E7%9A%84%E5%AE%9A%E4%B9%89\">1.<strong>string </strong>的定义</h2>\n<p>定义和初始化和普通的数据类型一样：</p>\n<pre><code class=\"language-cpp\">string str;//定义变量\nstring str=\"abcd\";//初始化</code></pre>\n<h2 id=\"2.string%20%E4%B8%AD%E5%86%85%E5%AE%B9%E7%9A%84%E8%AE%BF%E9%97%AE\">2.string 中内容的访问</h2>\n<p><strong>（1）通过下标访问</strong></p>\n<p>一般来说，可以直接像字符数组那样去访问string。</p>\n<p>程序代码：</p>\n<pre><code class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;//万能头文件，里面包含头文件&lt;string&gt; \n#include&lt;string&gt;\nusing namespace std;\nint main(){\n\tstring str = \"hello\";\n\tfor(int i=0;i&lt;str.length();i++){\n\t\tprintf(\"%c \",str[i]);\n\t}\n\treturn 0;\n}</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"\" height=\"247\" src=\"image\\3ae624a3b50f4c0d95557a1e3f0243ae.png\" width=\"802\"/></p>\n<p></p>\n<p><strong> 如果要读入和输出整个字符串，则只能用<span style=\"color:#faa572;\">cin和cout</span>.</strong></p>\n<p>程序代码：</p>\n<pre><code class=\"language-cpp\">//#include&lt;bits/stdc++.h&gt;\n//万能头文件，里面包含头文件&lt;string&gt; 和 &lt;iostream&gt;\n#include&lt;iostream&gt;//cin和cout在iostream头文件中，而不是stdio.h \n#include&lt;string&gt;\nusing namespace std;\nint main(){\n\tstring str;\n\tcin&gt;&gt;str;\n\tcout&lt;&lt;str&lt;&lt;endl;\n\treturn 0;\n}</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"\" height=\"288\" src=\"image\\73b379658d1640d49b4a8f719d355a85.png\" width=\"796\"/></p>\n<p> </p>\n<p><strong>（2）通过迭代器访问</strong></p>\n<p>一般仅通过（1）就可以满足访问的要求，但是有些函数比如<strong>insert()和erase()则要求以迭代器为参数</strong>，所以还是学一下<a class=\"link-info\" href=\"https://blog.csdn.net/CSDN_564174144/article/details/76231626?\" title=\"迭代器\">迭代器</a>的用法。</p>\n<p><strong>  定义string迭代器</strong>：</p>\n<blockquote>\n<p>string::iterator it;</p>\n</blockquote>\n<p>这样就可以得到迭代器it，并且可以通过*it来访问string里的每一位：</p>\n<p>程序代码：</p>\n<pre><code class=\"language-cpp\">#include&lt;cstdio&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main(){\n\tstring str = \"abcd\"; \n\tfor(string::iterator it = str.begin();it !=str.end();it++) {\n\t\tprintf(\"%c\",*it); \n\t}\n\treturn 0;\n}</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"\" height=\"230\" src=\"image\\8182dc44a51549a588cc6f26df73cab0.png\" width=\"752\"/></p>\n<p></p>\n<h2 id=\"3.string%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%AE%9E%E4%BE%8B%E8%A7%A3%E6%9E%90\">3.string 常用函数实例解析</h2>\n<p><strong>（1）operator+=</strong></p>\n<p>这是string 的加法，可以将两个string直接拼接起来。</p>\n<p>示例如下：</p>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main(){\n\tstring str1= \"abcd\",str2=\"xyz\",str3;\n\tstr3=str1+str2;//将str1和str2拼接，赋值给str3\n\tstr1+=str2;//将str2直接拼接到str1上\n\tcout&lt;&lt;str1&lt;&lt;endl;\n\tcout&lt;&lt;str3&lt;&lt;endl;\n\treturn 0;\n}</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"\" height=\"273\" src=\"image\\3751d19016e84651b0cec1cd9fb15b57.png\" width=\"786\"/></p>\n<p> </p>\n<p><strong>(2) length()/size()</strong></p>\n<p>length()返回string的长度，即存放的字符数，时间复杂度为O(1)。size()与length()基本相同。</p>\n<p>示例如下：</p>\n<blockquote>\n<p>string str=\"abcxyz\";</p>\n<p>printf(\"%d %d\\n\"),str.length,str.size());</p>\n</blockquote>\n<p>输出结果：</p>\n<blockquote>\n<p>6 6</p>\n</blockquote>\n<p><strong>(3) insert()</strong></p>\n<p><span style=\"color:#956fe7;\">insert(pos,string)</span>,在pos号位置插入字符串string。</p>\n<p>示例如下：</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main(){\n\tstring str = \"nihaoshijie\"; \n\tstr.insert(2, \"**\");\n\tcout&lt;&lt;str&lt;&lt;endl;\n\treturn 0;\n}</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"\" height=\"278\" src=\"image\\c58e86fd97c546fe95d754fe3c6434ce.png\" width=\"791\"/></p>\n<p><strong>(4) erase()</strong></p>\n<ul><li>删除单个元素</li></ul>\n<p><span style=\"color:#956fe7;\">str.erase(it)</span>用于删除单个元素，it为需要删除元素的迭代器。</p>\n<p>示例如下：</p>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main(){\n\tstring str = \"abcdefg\";\n\tstr.erase(str.begin()+4);//删除4号位(即e)\n\tcout&lt;&lt;str&lt;&lt;endl; \n\treturn 0;\n}</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"\" height=\"285\" src=\"image\\a79af28bd297416ba5bd200aa463399b.png\" width=\"784\"/></p>\n<p> </p>\n<ul><li>删除一个区间内的所有元素有元素</li></ul>\n<p><span style=\"color:#956fe7;\">str.erase(pos,length)</span>,其中pos为需要开始删除的起始位置， length为删除的字符个数。</p>\n<p>示例如下：</p>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main(){\n\tstring str = \"abcdefg\";\n\tstr.erase(3,2);//删除从3号位开始的2个字符，即de \n\tcout&lt;&lt;str&lt;&lt;endl; \n\treturn 0;\n}</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"\" height=\"278\" src=\"image\\47291792872e48bf871c7154a8248b6e.png\" width=\"795\"/></p>\n<p> </p>\n<p><strong>(5) clear()</strong></p>\n<p>clear()用以清空string中的数据，时间复杂度一般为O(1)。</p>\n<p>代码示例：</p>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main(){\n\tstring str = \"youdianlei\"; \n\tstr.clear();\t//清空字符串 \n\tcout&lt;&lt;str.length()&lt;&lt;endl;\n\treturn 0;\n}</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"\" height=\"272\" src=\"image\\fde54e882e5b4e40bb81c00413be7ceb.png\" width=\"805\"/></p>\n<p> </p>\n<p><strong>(6) string::npos</strong></p>\n<p>    string:npos是一个常数，其本身的值为-1，但由于是 unsigned_int类型，因此实际上也可以认为是unsigned_int类型的最大值。string:npos用以作为find函数失配时的返回值。</p>\n<p><strong>(7) find()</strong></p>\n<p>       <span style=\"color:#956fe7;\">  str.find(str2)</span>，当str2是str的子串时，返回其在str中第一次出现的位置；如果str2不是str的子串，那么返回 string::npos。</p>\n<p>       <span style=\"color:#956fe7;\">  str.find(str2,pos)</span>，从str的pos号位开始匹配str2，返回值与上相同。时间复杂度为O(nm)，其中n和m分别为str和str2的长度。</p>\n<p>示例如下：</p>\n<p></p>\n<p>输出结果：</p>\n<p><img alt=\"\" height=\"329\" src=\"image\\191ec7bed9ef48f2aa14b9d75608ee9d.png\" width=\"803\"/></p>\n<p> 声明：本文内容摘自胡凡、曾磊老师主编的《算法笔记》书本内容。</p>\n<p></p>\n</div>\n</div>"}