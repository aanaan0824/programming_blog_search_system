{"blogid": "126447895", "writerAge": "码龄7年", "writerBlogNum": "32", "writerCollect": "199", "writerComment": "24", "writerFan": "3986", "writerGrade": "3级", "writerIntegral": "444", "writerName": "Fun肆编程", "writerProfileAdress": "writer_image\\profile_126447895.jpg", "writerRankTotal": "33937", "writerRankWeekly": "3277", "writerThumb": "48", "writerVisitNum": "51776", "blog_read_count": "15", "blog_time": "于 2022-09-07 13:33:15 发布", "blog_title": "【Java-webflux】Spring5新特性之webflux反应式编程-Project Reactor", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>文章已收录至<a href=\"https://lichong.work\">https://lichong.work</a>，转载请注明原文链接。<br/> ps：欢迎关注公众号“Fun肆编程”或添加我的私人微信交流经验🤝</p>\n</blockquote>\n<h1><a id=\"_4\"></a>概念</h1>\n<p>第一次接触反应式编程可以先看一下<a href=\"https://www.reactivemanifesto.org/zh-CN\">反应式宣言</a>，这里有一些名词和概念解释。<br/> 简单来说，反应式编程满足以下特质：</p>\n<ol><li><strong>即时响应性</strong>：只要建立连接， 系统就会及时地做出响应。</li><li><strong>回弹性</strong>：系统在出现失败时依然保持即时响应性。</li><li><strong>弹性</strong>：系统在不断变化的工作负载之下依然保持即时响应性，也就是说可以弹性伸缩。</li><li><strong>消息驱动</strong>：反应式系统依赖异步的消息传递，从而确保了松耦合、隔离、位置透明的组件之间有着明确边界。</li></ol>\n<p><img alt=\"反应式宣言\" src=\"image\\2e3538677c484dcea23018d091041db0.png\"/></p>\n<h1><a id=\"SpringMVC_14\"></a>一、现在-流行的SpringMVC所遇到的困境</h1>\n<p><strong>经典SpringMVC案例</strong>：<br/> <img alt=\"经典SpringMVC案例\" src=\"image\\845c657f6145436d9686ff896119192e.png\"/><br/> 如上图所示，在<code>controller</code>中会有一些外部资源调用过程阻塞线程，导致响应延迟，如果阻塞时间长就可能导致用户流失。</p>\n<h1><a id=\"Servlet30_19\"></a>二、过渡-Servlet3.0异步请求原理</h1>\n<h2><a id=\"1Servlet_20\"></a>1.Servlet同步请求问题</h2>\n<ul><li><strong>假设同步场景</strong>：<br/> 平均访问量：2000/s<br/> 请求耗时：250ms<br/> <code>tomcat</code>最大线程数配置：2000/s * 0.25s = 500</li></ul>\n<p>此时，500个线程就可以满足。但如果<strong>访问量突增</strong>，请求进来就只能<strong>排队</strong>，这样就会导致响应延迟，用户流失。</p>\n<h2><a id=\"2Servlet_28\"></a>2.Servlet异步如何解决</h2>\n<p><code>Filter</code>/<code>Servlet</code>在生成响应之前可能要<strong>等待一些资源的响应以完成请求处理</strong>，比如一个jdbc的查询，或者远程服务rpc嗲奥永。在<code>Servlet</code>中<strong>阻塞等待是一个低效的操作</strong>，这将导致受限系统资源的急剧紧张，比如线程，连接数。<br/> Servlet3.0引入了异步处理请求的能力，使得线程可以不用阻塞等待，提早返回到容器，从而执行更多的请求任务。<strong>把耗时的任务提交给另一个异步线程去执行，以及产生响应。</strong></p>\n<ul><li><strong>异步场景</strong>：<br/> 业务平均访问量：5000/s<br/> 同步请求的耗时：250ms<br/> 异步请求的耗时：20ms<br/> <strong>理论同步</strong>场景下tomcat最大线程数配置：5000/s * 0.25s = 1250<br/> 但异步时这里tomcat最大线程数我们可以使用100，此时我们使用Servlet异步线程，<strong>将业务逻辑放到一个其他线程池中的线程去执行，不阻塞tomcat处理请求</strong>。同时可以根据不同业务使用不同线程池，从而达到对指定业务限流的效果。</li></ul>\n<h1><a id=\"WebFlux_39\"></a>三、未来-WebFlux反应式模型</h1>\n<p>这里自然离不开经典的Spring反应式模型对比<br/> <img alt=\"Spring响应式模型对比\" src=\"image\\b8c0a1ff2e724a97843d9b032fba5609.png\"/></p>\n<ul><li>Spring MVC \n  <ul><li>构建于 Servlet API 之上</li><li>同步阻塞 I/O 模型, 认为应用汇阻塞当前线程，所以一个 Request 对应一个 Thread，需要有一个含有大量线程的线程池</li></ul> </li><li>Spring WebFlux \n  <ul><li>构建于 Reactive Streams Adapters 之上</li><li>异步非阻塞 I/O 模型，认为应用不会阻塞当前线程，所以只是需要一个包含少数固定线程数的线程池 (event loop workers) 来处理请求</li><li>Spring反应式模型中，完全支持了全链路的流式传输，从而实现【浏览器-中间件-程序-缓存/数据库】的反应式编程。</li></ul> </li></ul>\n<h1><a id=\"01Webflux_50\"></a>四、从0到1快速实战Webflux</h1>\n<p>一些Webflux的<strong>基础API科普</strong>：<br/> webflux中一般用到的api都是<code>Reactor</code>中的概念，符合<a href=\"https://github.com/reactive-streams/reactive-streams-jvm\">Reactive Streams规范</a></p>\n<ul><li><strong>Reactor 的主要模块</strong><br/> Reactor 框架主要有两个主要的模块：reactor-core 和 reactor-ipc。前者主要负责 Reactive Programming 相关的核心 API 的实现，后者负责高性能网络通信的实现，目前是基于 Netty 实现的。</li><li><strong>Reactor 的主要类</strong><br/> 在 Reactor 中，经常使用的类并不是很多，主要有以下两个： \n  <ul><li><strong>Mono</strong> 实现了 org.reactivestreams.Publisher 接口，代表0到1个元素的发布者。</li><li><strong>Flux</strong> 同样实现了 org.reactivestreams.Publisher 接口，代表0到N个元素的发布者。</li></ul> </li><li><strong>可能会使用到的类</strong>\n<ul><li><strong>Scheduler</strong> 表示背后驱动反应式流的调度器，通常由各种线程池实现。</li></ul> </li></ul>\n<blockquote>\n<p>当然想充分了解webflux还需要熟悉<a href=\"https://www.cnblogs.com/crazymakercircle/p/10225159.html\">NIO模型</a>、<a href=\"https://www.cnblogs.com/crazymakercircle/p/9833847.html\">Reactor模式</a>、lambda与函数式编程等知识，这里就不逐一详解了</p>\n</blockquote>\n<h2><a id=\"1webflux_64\"></a>1.接口实现webflux的两种方式</h2>\n<ul><li> <p>传统SpringMVC注解方式实现<br/> <img alt=\"传统SpringMVC注解方式实现\" src=\"image\\162eb361e326456da2ade23faf41cd0b.png\"/></p> </li><li> <p>基于函数式的的WebFlux开发<br/> 其中有两个核心接口：</p>\n<ul><li> <p><code>HandlerFunction</code>：相当于<code>Controller</code>中的具体处理方法，输入为请求，输出封装在<code>Mono</code>中的响应<br/> <img alt=\"HandlerFunction\" src=\"image\\34a9649bc3674e7c90ebe6627e0b2e0c.png\"/></p> </li><li> <p><code>RouterFunction</code>：相当于<code>RequestMapping</code>，将url映射到具体的<code>HandlerFunction</code>，输入为请求，输出封装在<code>Mono</code>中的<code>HandlerFunction</code><br/> <img alt=\"RouterFunction\" src=\"image\\3b22cc7a43a04d23acd8cf5aa4652c57.png\"/></p> </li></ul> </li></ul>\n<p>组合使用的话就是如下示例：<br/> <strong>先写接口实现</strong>：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServerResponse</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> userId <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">queryParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> userId<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">-&gt;</span>\n                        <span class=\"token class-name\">ServerResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthInfo</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lichong.work\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthInfo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span>\n                        <span class=\"token class-name\">ServerResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">badRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>TEXT_PLAIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId is empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>再写对应路由</strong>：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRouterCfg</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RouterFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServerResponse</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">userRouterFunctions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserHandler</span> userHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">RouterFunctions</span><span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">,</span> userHandler<span class=\"token operator\">::</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>官网文档有更多示例可供参考：<a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-fn-overview\">API文档</a>，在<code>RouterFunction</code>中还可以增加一些过滤器，都是函数式的流式编程实现，自己尝试一下就可以很快理解了，这里我简单写了一个示例参考：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRouterCfg</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RouterFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServerResponse</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">userRouterFunctions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserHandler</span> userHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">RouterFunctions</span><span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>serverRequest<span class=\"token punctuation\">,</span> handlerFunction<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">ServerRequest<span class=\"token punctuation\">.</span>Headers</span> headers <span class=\"token operator\">=</span> serverRequest<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> tokenHeader <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokenHeader<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">ServerResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>FORBIDDEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> handlerFunction<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>serverRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">,</span> userHandler<span class=\"token operator\">::</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_119\"></a>2.自定义全局异常</h2>\n<p><img alt=\"自定义全局异常\" src=\"image\\9485e3ebc6254d6b9ab180b5532595d3.png\"/></p>\n<h2><a id=\"3_webflux_122\"></a>3. webflux和关系型数据库整合</h2>\n<p>// TODO</p>\n<h1><a id=\"Project_Reactor_125\"></a>五、Project Reactor项目</h1>\n<p>// TODO</p>\n<blockquote>\n<p>文章已收录至<a href=\"https://lichong.work\">https://lichong.work</a>，转载请注明原文链接。<br/> ps：欢迎关注公众号“Fun肆编程”或添加我的私人微信交流经验🤝</p>\n</blockquote>\n<center>\n<font color=\"DeepSkyBlue\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<strong>往期精选🪶</strong>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</font>\n</center>\n<p><a href=\"https://lichong.blog.csdn.net/article/details/125332480\">【Docker】入门教程-基本概念解读</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/118756713\">【前端-开发环境】使用NVM实现不同nodejs版本的自由切换（NVM完整安装使用手册）</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/112506155\">【前端-NPM私服】内网使用verdaccio搭建私有npm服务器</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/122081257\">【前端-IE兼容】Win10和Win11使用Edge调试前端兼容IE6、IE7、IE8、IE9、IE10、IE11问题</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/125392468\">【前端-工程化】React项目工程化记录-内置项目活文档(老项目升级优化-集成Hosky/ESLint/Prettier-升级Webpack/Babel/NodeSass/React)</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/125064273\">【工具-TWRP-frp-Termux】旧手机暴改成免费云服务器-MIUI刷TWRP安装magisk获取root</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/121997601\">【工具-Shell脚本】java程序产品包模板-linux和windows通用shell启动停止脚本(无需系统安装Java运行环境)</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/123377293\">【工具-Nginx】从入门安装到高可用集群搭建</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/121453429\">【工具-Nginx】Nginx高性能通用配置文件-注释版-支持防刷限流、可控高并发、HTTP2、防XSS、Gzip、OCSP Stapling、负载、SSL</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/120820845\">【工具-WireShark】网络HTTP抓包使用教程</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/119141750\">【后端-maven打包】通过profile标签解决同时打jar包 war包需求</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/124594750\">【架构-DDD】使用领域驱动设计-互联网未来架构设计之道（一）</a><br/> <a href=\"https://blog.csdn.net/lc1025082182/article/details/122297793\">【后端-SpringCache】基于Spring Cache封装一个能够批量操作的Redis缓存记录下踩坑历程（pipeline或mget封装）</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/106214680\">【后端-SkyWalking】SkyWalking前后端开发环境搭建详细教程步骤-6.x/7.x/8.x版本通用-插件二次开发利器（一）</a><br/> <a href=\"https://lichong.blog.csdn.net/article/details/123656328\">【后端-Quartz】Springboot整合Quartz支持集群环境-设计业务与框架分离及实现定时任务调度</a></p>\n<p align=\"right\"><font color=\"red\"><strong>✨欢迎为耿直少年点赞、关注、收藏！！！</strong></font></p>\n<p align=\"right\"><font color=\"red\"><strong>👇👇👇</strong></font></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}