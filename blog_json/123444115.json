{"blogid": "123444115", "writerAge": "码龄3年", "writerBlogNum": "86", "writerCollect": "49", "writerComment": "1", "writerFan": "9", "writerGrade": "4级", "writerIntegral": "870", "writerName": "羊说没关系", "writerProfileAdress": "writer_image\\profile_123444115.jpg", "writerRankTotal": "86948", "writerRankWeekly": "61554", "writerThumb": "9", "writerVisitNum": "20272", "blog_read_count": "2236", "blog_time": "于 2022-03-12 15:06:00 发布", "blog_title": "c#基础（全）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"c_0\"></a>c#基础语法</h1>\n<h2><a id=\"0_2\"></a>0.语法基础</h2>\n<h3><a id=\"01__4\"></a>0.1 基础概念</h3>\n<p><strong>变量三要素</strong></p>\n<p>变量类型：规定变量的数据类型<br/> 变量名：有意义，好记忆<br/> 变量值：变量对应的内存数据</p>\n<p><strong>数据类型</strong></p>\n<p>int:整型</p>\n<p>double:浮点型</p>\n<p>string:用于存储一段字符</p>\n<p>bool：用于表示一个条件是否成立</p>\n<p>datetime:用于存储日期和时间</p>\n<p><strong>变量声明和赋值</strong></p>\n<pre><code>int age ;\nage=20;\n//声明的同时给变量赋值\nstring name =\"小红\"；\n//变量的使用\nConsole.WriteLine(\"我叫\"+name+\"今年\"+age+\"岁\");\n</code></pre>\n<p><strong>变量命名规范</strong></p>\n<ul><li>命名尽量用对应的英文命名，比如年龄使用age,除循环变量外尽量不用单个字符</li><li>严格区分大小写</li><li>驼峰命名法：当使用一个或者多个单词组成变量名时，要使用camel命名法，即第一个单词的首字母小写，其它单词的首字母大写，如stuName。</li></ul>\n<ol><li>常量的定义语法：<br/> const 数据类型 常量名称=值；<br/> const double PAI=3.14;</li><li>枚举<br/> 访问修饰符（一般public）enum 枚举名{值1，值2…}</li></ol>\n<ul><li>枚举中不能包含方法，一般在类的外部</li></ul>\n<p><strong>console类的使用</strong></p>\n<pre><code>Console.WriteLine()//换行\nConsole.WriteLine(\"内容\")//输出内容换行\nConsole.Write()//输出内容不换行\n</code></pre>\n<p><strong>字符串格式化</strong></p>\n<pre><code>Console.WriteLine(\"姓名：{0} 年龄：{1}\",stuName,stuAge);\n\n</code></pre>\n<h3><a id=\"02__61\"></a>0.2 强制转换</h3>\n<ol><li>字符串和值转换<br/> int stuAge =int.Parse(Console.ReadLine());<br/> double a=double.parse(“20.5”);<br/> float b=float.parse(“20.25”);<br/> int c =int.pase(“20”);</li><li>值类型强转换成字符串类型<br/> string aa=a.tostring();<br/> string bb=b.tostring();<br/> strign cc=c.tostring();</li><li>数值跟数值之间转换<br/> double a=2.31;<br/> int b=20;<br/> int result=(int)a+b;</li><li>使用万能转换器进行不同类型的转换<br/> double a=convert.todouble(“20.21”);<br/> float b=convert.tosingle(“20.55”);<br/> int c =convert.toint32(“20”);<br/> DateTime datetime=convert.toDateTime(“2023-02-02”);<br/> int d=convert.toint32(a);<br/> int e=convert.toint32(b);<br/> double f=convert.todouble©;</li><li>两次强制转换<br/> 从浮点类型的字符串到int需要两次强制转换<br/> int a=(int)double.parse(“35.34”);<br/> int b=(int)convert.todouble(“34.33”);</li></ol>\n<p><strong>快捷键</strong></p>\n<p>consol.writeline（）//cw按两个tab键</p>\n<h3><a id=\"03__94\"></a>0.3 选择结构</h3>\n<p>if<strong>选择结构</strong></p>\n<pre><code>int a= 10;\nint b=20;\nbool result;\nif(a&lt;b)\n\tresult=true;\nelse\n\tresult=false;\nconsole.writeline(\"a&gt;b的比较结果是\"+result);\n\n</code></pre>\n<p><strong>三元运算符</strong></p>\n<pre><code>int a=10;\nint b=20;\nbool result=a&gt;b?true:false;\nconsole.writeline (\"a&gt;b的比较结果是：\"+result);\n\n</code></pre>\n<p>if<strong>嵌套结构</strong></p>\n<pre><code>static void main(stirng []args)\n{\n\tconsole.writeline(\"请输入客户消费信息：\")；\n\tint totomaoney =int.parse(console.readline());\n\tif(totalMoney&gt;=1000)\n\t{\n\t\tconsole.writeline(\"需付款：\"+tottalmoney*0.8);\n\t\tconosle.wirte(\"您的会员类型：\")；\n\t\tstring customerType=console.readline();\n\t\tif(customerType==\"普通\")\n\t\t{\n\t\tconsole.write(同时送您100代金券)\n\t\t}\n\t\telse if(customerType==\"vip\"){\n\t\tconsole.wirteline(\"同时送您200代金券\")；\n\t\t}\n\t}\n\telse{\n\t\tconsole.wirteline(\"需付款：\"+totalmoney);\n\t}\n}\n</code></pre>\n<p><strong>switch 选择结构</strong></p>\n<pre><code>常用的语法结构\nswitch（表达式）\n{\n case 常量1：\n \t语句；\n \tbreak;\n case 常量2；\n \t语句；\n \tbreak;\n ......\n defalt://如果没有找到匹配结果\n \t语句；\n \tbreak;\n}\n</code></pre>\n<p>例子：</p>\n<pre><code>static viod main(stirng[]args)\n{\n\tconsole.writeline(\"请输入您购买的电器品牌：\")；\n\tstring band=console.readline();\n\tswitch (band)\n\t{\n\t\tcase\"A\":\n\t\t\tconsole.writeline(\"赠送您热水器一台\")；\n\t\t\tbreak;\n\t\tcase\"B\":\n\t\t\tconsle.wirteline(\"赠送手机一部\")；\n\t\t\tbreak;\n\t\tcase\"C\":\n\t\t\tconsole.wirteline(\"赠送音箱一个\")；\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.witeline(\"无赠品\")；\n\t\t\tbreak;\n\t}\n\tconsole.readline();\n}\n</code></pre>\n<p><strong>for循环</strong></p>\n<pre><code>class Program\n    {\n        static void Main(string[] args)\n        {\n            for (int a=1; a &lt;= 9; a++){\n                for (int b=1; b &lt;= a; b++){\n                    Console.Write(\"{0}*{1}={2}\\t\", a, b, a * b);\n                }\n                Console.WriteLine();\n            }\n            Console.ReadLine();\n        }\n    }\n</code></pre>\n<p><strong>while循环</strong></p>\n<p>break跳出整个循环<br/> continue跳出</p>\n<pre><code>  static void Main(string[] args)\n        {\n            int count = 0;\n            while (count &lt; 5)\n            {\n                Console.WriteLine(\"当前队员的成绩：\");\n                int score = int.Parse(Console.ReadLine());\n                if (score &lt; 60)\n                {\n                    continue;\n                }\n                count++;\n                Console.WriteLine(\"该队员姓名：\");\n                Console.ReadLine();\n            }\n            Console.WriteLine(\"队员已招满！\");\n            Console.ReadLine();\n        }\n</code></pre>\n<p><strong>调试</strong></p>\n<ol><li>插入断点（双击所在行的侧边）</li><li>单行运行：F11</li><li>逐过程运行：F10</li><li>停止调试：shift+F5</li></ol>\n<p><strong>程序调试的思路和详细步骤</strong></p>\n<ul><li>设置断点：：分析可能出现错误的位置，并设置断点</li><li>调试运行：启动调试，单步运行</li><li>观察变量：不断观察特定变量的值</li><li>分析问题：通过观察变量的值，发现问题</li><li>修改代码：重新运行</li></ul>\n<h3><a id=\"04__240\"></a>04. 字符串的处理</h3>\n<p><strong>length使用</strong><br/> 字符串的长度</p>\n<pre><code>static void Main(string[] args)\n        {\n            string usrName = \"123aga\";\n            int pwdLength = usrName.Length;\n            Console.WriteLine(pwdLength);\n            Console.ReadLine();\n\n        }\n</code></pre>\n<p><strong>比较字符串内容是否相等</strong><br/> 使用\"==\"或者\"equals()\"方法,优先使用equals()</p>\n<pre><code>static void Main(string[] args)\n        {\n            string name1 = \"iris\";\n            string name2 = \"iris\";\n            string name3 = \"tom\";\n            bool a = name1.Equals(name2);\n            bool b =name1.Equals(name3);\n            Console.WriteLine(a);\n            Console.WriteLine(b);\n            Console.ReadLine();\n        }\n\n</code></pre>\n<p><strong>字符串截取</strong><br/> substring</p>\n<pre><code>static void Main(string[] args)\n        {\n            string email = \"xiaoqiang@qq.com\";\n            string name = email.Substring(0,email.IndexOf(\"@\"));\n            Console.WriteLine(\"用户姓名： \"+name);\n            string emailType = email.Substring(email.IndexOf(\"@\")+1);\n            Console.WriteLine(\"邮箱类型是：\"+emailType);\n            Console.ReadLine();\n        }\n    }\n</code></pre>\n<p>** 字符格式化Format()方法与其类似**<br/> <code>string newstring =string.format(\"格式字符串\"，参数列表)</code></p>\n<pre><code> static void Main(string[] args)\n        {\n            string name = \"xiaohong\";\n            string emailtype = \"qq.com\";\n            string info = \"姓名是：{0},邮箱是：{1}\";\n            info = string.Format(info,name,emailtype);\n            Console.WriteLine(info);\n            Console.ReadLine();\n        }\n</code></pre>\n<p><strong>字符串为空</strong></p>\n<pre><code>1. name.Length==0;\n2. name== string.Empty;\n3. name==\"\";\n</code></pre>\n<p><strong>空字符串的使用方法</strong></p>\n<pre><code>if(name==\"\"){}\nif(name.Equals(string.Empty)){}\n</code></pre>\n<ul><li>注意null和”“的区别</li></ul>\n<p><strong>去掉前后多余空格</strong></p>\n<pre><code>string name =\"  name  \";\nname=name.Trim();\n</code></pre>\n<p><strong>转换成大小写</strong></p>\n<pre><code>string ToUpper();\nstring ToLower();\n</code></pre>\n<p><strong>找到最后一个匹配项所在的索引位置</strong></p>\n<pre><code>LastIndexOf(string value)\n</code></pre>\n<p><strong>字符串 拼接</strong></p>\n<pre><code>string a=\"我是\"；\nstring b=\"小强\"；\nstring c=\"的弟弟\"；\n//1. 直接+\nstring c=a+b;\n//. stringbuilder.append()\n\n</code></pre>\n<h2><a id=\"1__335\"></a>1. 类和对象</h2>\n<p>###　1. 1 字段和属性比较<br/> <strong>字段（成员变量）</strong><br/> －　字段主要是为类的内部做数据交互使用，字段一般都是private<br/> －　字段可以赋值，也可以取值<br/> －　当字段需要为外部提供数据的时候，请将字段封装为属性，而不是使用共有字段，这是面向对象提倡的。</p>\n<p><strong>属性</strong><br/> －　属性一般是向外提供数据，主要是描述对象的静态特征，所以，属性一般是public</p>\n<ul><li>属性可以根据需求设置只读、只写，提高数据安全性</li><li>属性内部可以添加我们需要的业务逻辑，从而避免非法数据。</li></ul>\n<pre><code>//属性\nprivate double salary ;//薪水\npublic double Salary{\n    get{return salary;}\n    set{salary==value;}\n}\n//标准属性的简化\npublic double Salary {get;set;}\n</code></pre>\n<h3><a id=\"1_2__360\"></a>1. 2 方法和方法的重载</h3>\n<h4><a id=\"121__362\"></a>1.2.1 什么是方法</h4>\n<p>【概念】：对象的动态特征就是方法，方法表示这个对象能够做什么<br/> 【类型】：实例方法、静态方法、（构造方法、抽象方法、虚方法）<br/> <strong>定义规范</strong></p>\n<pre><code>访问修饰符 返回值类型 方法名（参数1，参数2...）\n{\n//方法主题\nreturn 返回值；//如果没有返回值，则不需要该语句\n}\n//例\npublic string GetStudent(){\n\tstrign info=string.Format(\"姓名：{0} 学号：{1}\",studentName,studentId);\n\treturn info;\n\n}\n</code></pre>\n<p><strong>注意事项</strong></p>\n<ul><li>访问修饰符：可以省略，默认private,可以根据需要定义成public</li><li>方法名：一般是”动词“或者”动宾短语“，采用Pascal，首字母大写，不能以数字开头</li><li>参数列表：根据需求添加</li><li>有返回值的使用return 语句，return后不能再有其它语句</li><li>没有返回值的用void修饰</li></ul>\n<p><strong>变量的分类及作用域</strong></p>\n<ul><li>在方法内部的变量，称为“局部变量”，只能在该方法的内部使用</li><li>在方法外部，类的内部定义的变量，称为“成员变量”（也叫字段），可以在类的内部或外部使用（很少在外部使用）</li></ul>\n<h4><a id=\"122__393\"></a>1.2.2 方法的重载</h4>\n<p><strong>重载方法的调用特点</strong></p>\n<blockquote>\n<p>编译器将根据方法的参数个数和类型自动匹配对应方法</p>\n</blockquote>\n<p><strong>方法重载的好处</strong></p>\n<ol><li>减少类的对外接口（只显示一个方法）,降低类的复杂度。</li><li>便于用户的使用（相同功能的方法名称一样）和识别。</li></ol>\n<p><strong>方法重载的条件</strong></p>\n<ol><li>方法的名称必须一样</li><li>方法的参数个数或类型不一样</li></ol>\n<p><strong>方法重载的无关性</strong></p>\n<ol><li>方法重载和返回值无关</li></ol>\n<pre><code>public double Add(double a,double b)\n{return a+b;}\npublic double Add(int a,double b){\nreturn a+b;\n}\npublic int Add(int a,int b){\nreturn a+b;\n}\n//注意，如果\npublic double Add(int a, int b){\nreturn a+b；//不构成方法重载，与返回值无关\n}\n</code></pre>\n<p><strong>静态方法</strong></p>\n<ul><li> <p>关键字static的使用</p> <p>关键字可以修饰类、方法、成员变量，修饰后我们称之为：静态类、静态方法、静态字段</p> </li><li> <p>静态方法的调用：类名.方法名</p> </li><li> <p>使用示例</p> </li></ul>\n<pre><code class=\"prism language-c#\">public static int  Add(int a, int b, int c){\n  return a+b+c;\n}\n</code></pre>\n<ul><li>静态成员使用经验</li><li>\n<ul><li>静态成员在程序运行时被调入内存中，并且在系统未关闭之前不会被回收</li><li>类的成员使用非常频繁时候，可以使用static修饰，但是不能使用过多</li><li>静态成员不能直接调用实例成员（静态方法不能直接调用实例方法）</li><li>静态方法也可以重载</li></ul> </li></ul>\n<h3><a id=\"13__450\"></a>1.3 构造方法</h3>\n<p><strong>有参构造方法使用总结</strong></p>\n<ul><li> <p>参数的类型和顺序同样需要和定义规范一直</p> </li><li> <p>有参数的构造方法可以让用户轻松选择使用何种方式完成对象的初始化工作</p> </li><li> <p>使用有参构造方法能够有效避免用户单个初始化对象属性的麻烦</p> </li><li> <p>如果想约束用户对象时必须完成某些属性的初始化工作，则可以去掉无参构造方法。</p> <pre><code class=\"prism language-c#\">class Student{\n  //两个参数构造器\n  public Student(int stuId,string stuName){\n    this StudentId =stuId;\n    this.StudentName=stuName;\n  }\n  //无参构造器\n  public Student(){\n    \n  }\n  //三个参数构造器\n  public Student(int stuId,string stuName, int age){\n    this StudentId =stuId;\n    this.StudentName=stuName;\n    this.Age=age;\n  }\n}\n\n</code></pre> </li></ul>\n<p><strong>构造方法PK实例方法</strong></p>\n<ul><li>构造方法</li><li>\n<ul><li>用于对象的初始化，一个类中至少有一个构造方法</li><li>不能显示调用，只能在创建对象的时候，使用new来调用</li><li>构造方法不能有返回值</li><li>构造方法名称必须与类名一样</li></ul> </li><li>实例方法</li><li>\n<ul><li>用于表示对象能够干什么，一个类中可以没有任何实例方法</li><li>只能显示调用：对象名.方法名。</li><li>可以有返回值，没有时必须以void表示。</li><li>方法命名要有意义，一般是“动词+名词”形式，不能与类名相同，命名规范通常采用pascal命名法。</li></ul> </li></ul>\n<h3><a id=\"14__498\"></a>1.4 对象的销毁</h3>\n<p><strong>对象的生命周期</strong></p>\n<p>对象在内存中不断的“生生死死”，具有生命周期。</p>\n<p><strong>对象在内存中的状态</strong></p>\n<ul><li>正在引用：程序正在使用的对象</li><li>游离状态：没有引用的对象，已经使用完毕但是依然占据空间</li></ul>\n<p><strong>垃圾回收机制</strong></p>\n<ul><li>.NET虚拟机特有机制，自动运行，并检查对象的状态</li><li>发现对象不再引用时，会将其释放所占用的空间（销毁）</li></ul>\n<h3><a id=\"15__514\"></a>1.5 对象的数据类型</h3>\n<p><strong>值类型数据变量</strong>在传递的时候是将自己复制一份，</p>\n<pre><code class=\"prism language-c#\">static void Main (string[]args){\n  int a=50;\n  int b=a;\n  b+=5;\n}\n</code></pre>\n<p><strong>引用数据类型</strong>（对象类型）</p>\n<p>引用数据类型变量传递时，将自己内存地址赋给新变量</p>\n<pre><code class=\"prism language-c#\">static void Main(string[]args){\n  Student objStu1=new Student();\n  Student objStu2=objStu1;\n  objStu2.Age=25;\n}\n</code></pre>\n<h2><a id=\"2__540\"></a>2. 关键字</h2>\n<h3><a id=\"21_this_542\"></a>2.1 this关键字</h3>\n<ul><li>当成员变量和局部变量重名时使用this区分</li></ul>\n<pre><code class=\"prism language-c#\">\tpublic Student (int StudentId, string studentName)\n  {\n    this.studentId=studentId;\n    this.studentName=studentName;\n  }\n</code></pre>\n<ul><li>this表示当前类的对象，用于访问该类成员变量或方法</li></ul>\n<pre><code class=\"prism language-c#\">public strign GetStudent(){\n  return string.Format{\"姓名：{0} 学号：{1}\",this.studentName,this.studentId}\n}\n</code></pre>\n<h3><a id=\"22_ref_564\"></a>2.2 ref关键字</h3>\n<ul><li> <p>使用ref关键字可以将值类型按照引用方式传递</p>\n<blockquote>\n<p>平时不建议使用</p>\n</blockquote> </li></ul>\n<pre><code class=\"prism language-c#\">static void Main (string []args){\n  int a=10;\n  int result=Square(ref a);\n  Console.WriteLine(\"a的平方={0} a的值={1}\",result,a);\n  Console.ReadLine();\n}\nstatic int Square(ref int num1){\n  num1=num1*num1;\n  return num1;\n}\n</code></pre>\n<h3><a id=\"23_out_583\"></a>2.3 out关键字</h3>\n<ul><li>使用out关键字可以让方法有多个返回值</li></ul>\n<blockquote>\n<p>不建议使用，多参数返回时，主要使用字典集合</p>\n</blockquote>\n<pre><code class=\"prism language-c#\"> static void Main(string[] args)\n        {\n            int a = 10;\n            int square = 0;\n            int result = Operation(a, out square);\n            Console.WriteLine(\"a的平方={0 }a的立方={1}\",square,result);\n            Console.ReadLine();\n        }\n        static int Operation (int num1,out int square)\n        {\n            square = num1 * num1;\n            int result = num1 * num1 * num1;\n            return result;\n        }\n</code></pre>\n<h2><a id=\"3_606\"></a>3.集合</h2>\n<h3><a id=\"31List_608\"></a>3.1泛型集合List</h3>\n<p><strong>List泛型集合的特点</strong></p>\n<ul><li>表示泛型，T是Type的简写，表示当前不能确定的类型。</li><li>可以根据用户的实际需要，确定当前集合需要存放的数据类型，一旦确定就不可改变。</li></ul>\n<p><strong>泛型集合要求</strong></p>\n<ul><li>使用泛型集合只能添加一种类型的数据，数据取出后无需强制转换。</li></ul>\n<pre><code class=\"prism language-c#\">  static void Main(string[] args)\n        {   //创建几个学员对象\n            Student objStu1 = new Student(1001, \"小王\");\n            Student objStu3 = new Student(1003, \"小刘\");\n            Student objStu4 = new Student(1004, \"小李\");\n            //创建集合对象\n            List&lt;Student&gt; stuList = new List&lt;Student&gt;();\n            stuList.Add(objStu1);\n            stuList.Add(new Student(1002, \"小张\"));\n            stuList.Add(objStu3);\n            stuList.Add(objStu4);\n            //获取元素个数\n            Console.WriteLine(\"元素总数：{0}\",stuList.Count);\n            //删除一个元素\n            stuList.Remove(objStu3);\n            stuList.RemoveAt(2);\n            //插入一个对象\n            stuList.Insert(1, new Student(1006, \"小花\"));\n            List&lt;string&gt; nameList = new List&lt;string&gt; { \"小红\", \"小米\", \"小花\" };\n            //遍历集合\n            foreach (Student item in stuList)\n            {\n                Console.WriteLine(item.StudentId+\"\\t\"+item.StudentName);\n               \n            }\n            foreach(string item in nameList)\n            {\n                Console.WriteLine(item);\n            }\n            Console.ReadLine();\n        }\n</code></pre>\n<pre><code class=\"prism language-c#\">class Student\n    {\n        public int StudentId { get; set; }\n        public string StudentName { get; set; }\n        public Student(int StudentId,string StudentName) {\n            this.StudentId = StudentId;\n            this.StudentName = StudentName;\n        }\n        public Student() { }\n       \n        public string GetStudent()\n        {\n            string info = string.Format(\"姓名：{0}学号：{1}\",StudentName,StudentId);\n            return info;\n        }\n</code></pre>\n<h3><a id=\"32_DictionaryKV_675\"></a>3.2 泛型集合Dictionary&lt;K,V&gt;</h3>\n<blockquote>\n<p>关于Dictionary&lt;K,V&gt;泛型集合</p>\n<ul><li>Dictionary&lt;K,V&gt;通常称为字典，&lt;K,V&gt;约束集合中元素类型。</li><li>编译时检查类型约束，无需装箱拆箱操作，与哈希表操作类似。</li></ul>\n</blockquote>\n<pre><code class=\"prism language-c#\"> static void Main(string[] args)\n        {   //创建几个学员对象\n            Student objStu1 = new Student(1001, \"小王\");\n            Student objStu3 = new Student(1003, \"小刘\");\n            Student objStu4 = new Student(1004, \"小李\");\n\n            Dictionary &lt;string,Student&gt; stu = new Dictionary&lt;string,Student&gt;();\n\n            stu.Add(\"小王\", objStu1);\n            stu.Add(\"小刘\", objStu3);\n            stu.Add(\"小李\", objStu4);\n            foreach(string key in stu.Keys)\n            {\n                Console.WriteLine(key);\n            }\n            foreach(Student value in stu.Values)\n            {\n                Console.WriteLine(value.StudentId+\"\\t\"+value.StudentName);\n            }\n\n            Console.ReadLine();\n            \n\n        }\n</code></pre>\n<h3><a id=\"33__709\"></a>3.3 集合中对象的默认排序</h3>\n<p><strong>字符串和值类型排序</strong></p>\n<pre><code class=\"prism language-c#\"> static void Main(string[] args)\n        {   //字符串类型\n            List&lt;string&gt; nameList = new List&lt;string&gt;() { \"小红\",\"小白\",\"小米\"};\n            foreach(string item in nameList)\n            {\n                Console.WriteLine(item);\n            }\n            Console.WriteLine(\"---排序后\");\n            nameList.Sort();\n            foreach(string item in nameList)\n            {\n                Console.WriteLine(item);\n            }\n            Console.WriteLine(\"---反转\");\n            nameList.Reverse();\n            foreach(string item in nameList)\n            {\n                Console.WriteLine(item);\n            }\n            //值的类型\n            List&lt;int&gt; ageList = new List&lt;int&gt;() { 20, 10, 3 };\n            ageList.Sort();\n            foreach(int item in ageList)\n            {\n                Console.WriteLine(item);\n            }\n            Console.ReadLine();\n        }\n</code></pre>\n<p><strong>集合中对象的动态排序</strong></p>\n<pre><code class=\"prism language-c#\"> static void Main(string[] args)\n        {  \n   \t\t\t\t\t//对象类型\n            Student objStu1 = new Student(1001,\"小红\");\n            Student objStu2 = new Student(1003, \"小白\");\n            Student objStu3 = new Student(1002, \"小米\");\n            List&lt;Student&gt; stuList = new List&lt;Student&gt;() { objStu1, objStu2, objStu3 };\n            //默认排序\n            stuList.Sort();\n            Console.WriteLine(\"----------默认排序\");\n            foreach(Student item in stuList) {\n                Console.WriteLine(item.StudentId+\"\\t\" +item.StudentName);\n            }\n            Console.WriteLine(\"----------id升序排序\");\n            stuList.Sort(new StuIdASC());\n            foreach (Student item in stuList)\n            {\n                Console.WriteLine(item.StudentId + \"\\t\" + item.StudentName);\n            }\n            Console.WriteLine(\"----------id降序排序\");\n            stuList.Sort(new StuIdDESC());\n            foreach (Student item in stuList)\n            {\n                Console.WriteLine(item.StudentId + \"\\t\" + item.StudentName);\n            }\n            Console.WriteLine(\"----------name升序排序\");\n            stuList.Sort(new StuNameASC());\n            foreach (Student item in stuList)\n            {\n                Console.WriteLine(item.StudentId + \"\\t\" + item.StudentName);\n            }\n            Console.WriteLine(\"----------name降序排序\");\n            stuList.Sort(\tnew StuNameDESC());\n            foreach (Student item in stuList)\n            {\n                Console.WriteLine(item.StudentId + \"\\t\" + item.StudentName);\n            }\n            Console.ReadLine();\n        }\n\n</code></pre>\n<pre><code class=\"prism language-c#\"> class Student:IComparable&lt;Student&gt;//默认排序，只能一种\n    {\n        public int StudentId { get; set; }\n        public string StudentName { get; set; }\n        public Student() { }\n        public Student(int StudentId,string StudentName) {\n            this.StudentId = StudentId;\n            this.StudentName = StudentName;\n        }\n\n        public int CompareTo(Student other)\n        {\n            // throw new NotImplementedException();\n            return other.StudentId.CompareTo(this.StudentId);\n        }\n    }\n    #region 排序类\n\n    //添加4个排序类并且分别实现排序接口\n    class StuNameASC : IComparer&lt;Student&gt;\n    {\n        public int Compare(Student x, Student y)\n        {\n            return x.StudentName.CompareTo(y.StudentName);\n        }\n    }\n    class StuNameDESC : IComparer&lt;Student&gt;\n    {\n        public int Compare(Student x, Student y)\n        {\n            return y.StudentName.CompareTo(x.StudentName);\n\n        }\n    }\n    class StuIdASC : IComparer&lt;Student&gt;\n    {\n        public int Compare(Student x, Student y)\n        {\n            return x.StudentId.CompareTo(y.StudentId);\n        }\n    }\n    class StuIdDESC : IComparer&lt;Student&gt;\n    {\n        public int Compare(Student x, Student y)\n        {\n            return y.StudentId.CompareTo(x.StudentId);\n        }\n    }\n\n    #endregion\n</code></pre>\n<p><strong>集合排序总结</strong></p>\n<ul><li>如果是基本数据类型，可以直接排序</li><li>如果是对象类型元素</li><li>\n<ol><li>当排序只有一种的时候，可以使用默认比较器<code>IComparable &lt;T&gt;</code>在类中直接实现接口即可。</li><li>当需要多种排序的时候，需要添加对应排序类，并给每一个排序类实现比较器接口<code>ICompare&lt;T&gt;</code>来完成不同排序方法。</li></ol> </li></ul>\n<h2><a id=\"4_Winform_849\"></a>4. <code>Winform</code>开发环境的使用</h2>\n<h3><a id=\"41__851\"></a>4.1 事件驱动机制</h3>\n<p><strong>C/S架构应用程序</strong>（Windows、WinForm、桌面应用程序）：客户端/服务器（Client/Server）</p>\n<ul><li>客户端向服务器发出请求，服务器处理请求并将响应发送给客户端。</li><li>应用程序全部或部分部署在客户端，数据库或部分程序在服务器端。</li></ul>\n<p><strong>案例</strong></p>\n<pre><code class=\"prism language-c#\">//三个按钮关联一个方法\n            this.btnAndy.Click += new System.EventHandler(this.btnTeacher_Click);\n            this.btnJuly.Click += new System.EventHandler(this.btnTeacher_Click);\n            this.btnIris.Click += new System.EventHandler(this.btnTeacher_Click);\n//sensor表示事件源\n private void btnTeacher_Click(object sender,EventArgs e)\n        {\n            MessageBox.Show(((Button)sender).Text+\"你好！\");\n        }\n</code></pre>\n<p><strong>常用控件的事件</strong></p>\n<ul><li>窗体事件</li><li>\n<ul><li>load:窗体加载事件（应用较少）</li><li>FormClosing:窗体关闭之前发生的事件</li><li>FormClosed:窗体关闭之后发生的事件</li></ul> </li><li>文本框事件</li><li>\n<ul><li>TextChanged：文本框内容改变时间</li><li>KeyPress：用户按下某键并释放的时候发生的事件</li><li>MouseLeave：当鼠标离开文本框的时候发生</li></ul> </li><li>下拉框事件</li><li>\n<ul><li>SelectedIndexChanged：当用户选择的下拉项改变的时候发生</li><li>、</li></ul> </li></ul>\n<h3><a id=\"42__888\"></a>4.2 消息提示机制</h3>\n<p>消息提示框（不要经常使用）</p>\n<pre><code class=\"prism language-c#\">Message.Show(\"请输入学员姓名！\")；\nMessage.Show(\"请输入学员姓名！\",\"验证提示\")；\nMessage.Show(\"请输入学员姓名！\",\"验证提示\"，MessageBoxButtons.OKCancel)；\nMessage.Show(\"请输入学员姓名！\",\"验证提示\"，MessageBoxButtons.OKCancel,MessageBoxButtons.Information)；\n  \n  \n//用户判断的消息框\nDialogResult result = MessageBox.Show(\"请输入学员姓名\", \"验证提示\", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);\n            if (result == DialogResult.Cancel)\n            {\n                MessageBox.Show(((Button)sender).Text + \"用户取消操作\");\n            }\n            else\n            {\n                MessageBox.Show(\"用户继续操作\");\n            }\n  \n\n</code></pre>\n<h3><a id=\"43_915\"></a>4.3项目框架基础搭建与用户登录窗体设计</h3>\n<p><strong>窗体大小调节</strong>：<code>FormBorderStyle --FixedSingle</code>(固定不可调)</p>\n<p>**窗体最大化<code>**MaximizeBox:False</code>(不可最大化)</p>\n<p><strong>左上角图表</strong>icon ,选择图片</p>\n<p><strong>启动位置</strong>:startposition–centerscreen</p>\n<p>picturebox：窗体中添加图片</p>\n<p>image:按钮添加图片</p>\n<p>视图-tab键顺序：改变鼠标顺序</p>\n<h2><a id=\"5__931\"></a>5. 文件操作</h2>\n<h3><a id=\"51__933\"></a>5.1 文本文件操作</h3>\n<p><strong>文件写入</strong></p>\n<pre><code class=\"prism language-c#\">using System.IO;\n\nprivate void button1_Click(object sender, EventArgs e)\n        {\n            //创建文件流\n            FileStream fs = new FileStream(\"D:\\\\file.txt\", FileMode.Create);\n            //创建写入器\n            StreamWriter sw = new StreamWriter(fs);\n            //以流的方式写入数据\n            sw.Write(this.textBox1.Text.Trim());\n            //关闭写入器\n            sw.Close();\n            //关闭文件流\n            fs.Close();\n        }\n//文件逐行写入，模拟逐行写入系统日志\n\t\t\t\t\t\t//创建文件流\n FileStream fs = new FileStream(\"D:\\\\file.txt\", FileMode.Append);\n            //创建写入器\n            StreamWriter sw = new StreamWriter(fs);\n            //以流的方式逐行写入数据\n           sw.WriteLine(DateTime.Now.ToString()+\"文件操作正常！\");\n            //关闭写入器\n            sw.Close();\n            //关闭文件流\n            fs.Close();\n\n</code></pre>\n<p><strong>文件读取</strong></p>\n<pre><code class=\"prism language-c#\">using System.IO;\n\nprivate void button1_Click(object sender, EventArgs e)\n        {\n            //创建文件流\n            FileStream fs = new FileStream(\"D:\\\\file.txt\", FileMode.Open);\n            //创建读取器(encoding.default防止乱码)\n            StreamReader sr = new StreamReader(fs,Encoding.Default);\n            //以流的方式写入数据\n           this.textBox1.Text=sr.ReadToEnd();\n            //关闭读取器\n            sr.Close();\n            //关闭文件流\n            fs.Close();\n        }\n</code></pre>\n<p><strong>文件删除复制移动</strong></p>\n<pre><code class=\"prism language-c#\">\t\t\t //删除文件\n        private void btnAndy_Click(object sender, EventArgs e){\n            File.Delete(this.txtFrom.Text);\n\n        }\n        //复制文件\n        private void btnJuly_Click(object sender, EventArgs e)\n        {\n            if (File.Exists(this.txtTo.Text.Trim())) { \n                File.Delete(this.txtTo.Text);\n            }\n            File.Copy(this.txtFrom.Text.Trim(), this.txtTo.Text.Trim());\n        }\n        //移动文件\n        private void btnIris_Click(object sender, EventArgs e)\n        {\n            if (File.Exists(this.txtTo.Text.Trim()))\n            {\n                File.Delete(this.txtTo.Text.Trim());\n            }\n            if (File.Exists(this.txtFrom.Text.Trim()))\n            {\n                File.Move(this.txtFrom.Text.Trim(), this.txtTo.Text.Trim());\n            }\n            else\n            {\n                MessageBox.Show(\"文件不存在\");\n            }\n        }\n</code></pre>\n<pre><code class=\"prism language-c#\">\t\t\t\t\t\t//获取指定目录下的文件\n\t\t\t\t\t\tstring[] files = Directory.GetFiles(\"D:\\\\files\");\n            this.txtContent.Clear();\n            foreach (string item in files)\n            {\n                this.txtContent.Text += item + \"\\r\\n\";\n            }\n            //获取指定目录下的所有子目录\n            string[] dirs = Directory.GetDirectories(\"D:\\\\files\");\n            this.txtContent.Clear();\n            foreach(string item in dirs)\n            {\n                this.txtContent.Text += item + \"\\r\\n\";\n            }\n\t\t\t\t\t\t//删除指定目录下的所有子目录和文件\n            Directory.Delete(\"D:\\\\Myfiles0\");//要求目录必须为空\n            //使用DirectoryInfo对象，可以删除不为空的目录\n            DirectoryInfo dir = new DirectoryInfo(\"D:\\\\Myfiles0\");\n            dir.Delete(true);\n</code></pre>\n<p><strong>对象保存</strong></p>\n<pre><code class=\"prism language-c#\">Student objStudent = new Student()\n            {\n                StuName = this.txtFrom.Text.Trim(),\n                StuAge = Convert.ToInt32(this.txtTo.Text.Trim()),\n                StuGender = this.txtGender.Text.Trim(),\n                Birthday = Convert.ToDateTime(this.txtBirthday.Text.Trim())\n            };\n            //保存到文件里\n            FileStream fs = new FileStream(\"objStudent.obj\", FileMode.Create);\n            StreamWriter sw = new StreamWriter(fs);\n            //一行一行写入\n            sw.WriteLine(objStudent.StuName);\n            sw.WriteLine(objStudent.StuAge);\n            sw.WriteLine(objStudent.StuGender);\n            sw.WriteLine(objStudent.Birthday);\n            //关闭对象\n            sw.Close();\n            fs.Close();\n</code></pre>\n<pre><code class=\"prism language-c#\"> class Student\n    {\n        public string StuName{get;set;}\n        public int StuAge { get; set; }\n        public string StuGender { get; set; }\n\n        public DateTime Birthday { get; set; }\n\n    }\n</code></pre>\n<p><strong>读取并显示数据</strong></p>\n<pre><code class=\"prism language-c#\">FileStream fs = new FileStream(\"objStudent.obj\", FileMode.Open);\n            StreamReader sr = new StreamReader(fs);\n            Student objStudent = new Student() { \n            \n                StuName = sr.ReadLine(),\n                StuAge = Convert.ToInt32(sr.ReadLine()),\n                StuGender = sr.ReadLine(),\n                Birthday = Convert.ToDateTime(sr.ReadLine())\n            };\n            sr.Close();\n            fs.Close();\n\n            //一行一行写入\n            this.txtFrom.Text = objStudent.StuName;\n            this.txtTo.Text = objStudent.StuAge.ToString();\n            this.txtGender.Text = objStudent.StuGender ;\n            this.txtBirthday.Text = objStudent.Birthday.ToShortDateString();\n</code></pre>\n<h2><a id=\"5XML_1102\"></a>5.对象序列化和XML文件</h2>\n<h3><a id=\"51_1104\"></a>5.1对象序列化和反序列化</h3>\n<ul><li> <p>使用文本</p> </li><li>\n<ul><li>当对象属性发生变化是，需要增加或减少信息的写入或读取次数。</li><li>信息安全性较差</li></ul> <p><strong>序列化</strong></p> </li></ul>\n<blockquote>\n<p>开头需要添加<code>using System.Runtime.Serialization.Formatters.Binary;</code></p>\n</blockquote>\n<pre><code class=\"prism language-c#\">Student objStudent = new Student()\n            {\n                StuName = this.txtFrom.Text.Trim(),\n                StuAge = Convert.ToInt32(this.txtTo.Text.Trim()),\n                StuGender = this.txtGender.Text.Trim(),\n                Birthday = Convert.ToDateTime(this.txtBirthday.Text.Trim())\n            };\n            //创建文件流\n            FileStream fs = new FileStream(\"objStudent.stu\", FileMode.Create);\n            //创建二进制格式化器\n            BinaryFormatter formatter = new BinaryFormatter();\n            //调用序列化方法\n            formatter.Serialize(fs, objStudent);\n            //关闭文件流\n            fs.Close();\n        }\n</code></pre>\n<pre><code class=\"prism language-c#\">\n//声明该对象可序列化\n    [Serializable]\n    class Student\n    {\n        public string StuName{get;set;}\n        public int StuAge { get; set; }\n        public string StuGender { get; set; }\n        public DateTime Birthday { get; set; }\n    }\n    \n</code></pre>\n<p><strong>反序列化</strong></p>\n<pre><code class=\"prism language-c#\">//创建文件流\n            FileStream fs = new FileStream(\"objStudent.stu\", FileMode.Open);\n            //创建二进制格式化器\n            BinaryFormatter formatter = new BinaryFormatter();\n            //调用反序列化方法\n            Student objStudent = (Student)formatter.Deserialize(fs);\n            //关闭文件流\n            fs.Close();\n            //显示数据\n            this.txtFrom.Text = objStudent.StuName;\n            this.txtTo.Text = objStudent.StuAge.ToString();\n            this.txtGender.Text = objStudent.StuGender;\n            this.txtBirthday.Text = objStudent.Birthday.ToShortDateString();\n</code></pre>\n<h3><a id=\"52_XML_1170\"></a>5.2 XML文件操作</h3>\n<blockquote>\n<p>XML是eXtensible Markup Language的缩写，即可扩展语言。它是一种可以用来创建自定义的标记语言，由万维网协会（W3C）创建，用来客服HTML的局限。</p>\n<p>从使用功能上看，XML主要是用于数据的存储，而HTML主要用于数据的显示。</p>\n</blockquote>\n<ul><li>XML文档的格式要求</li><li>\n<ul><li>确定且唯一的根元素</li><li>开始标签和结束标签匹配</li><li>元素标签的正确嵌套</li><li>属性值要用引号括起来</li><li>同一个元素的属性不能重复</li></ul> </li><li>XML语法要求</li><li>\n<ul><li>元素：&lt;标签&gt;文本内容&lt;/标签&gt;</li><li>处理指令：&lt;?xml version=“1.0?”&gt;</li><li>注释：\n    </li><li>属性：25000</li></ul> </li><li>XML文件读取</li><li>\n<ol><li>创建文档文件</li><li>加载XML文档</li><li>获取根节点</li><li>遍历节点并封装数据</li></ol> </li><li></li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}