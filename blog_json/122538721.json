{"blogid": "122538721", "writerAge": "码龄1年", "writerBlogNum": "22", "writerCollect": "87", "writerComment": "59", "writerFan": "177", "writerGrade": "2级", "writerIntegral": "382", "writerName": "学习要精神饱满", "writerProfileAdress": "writer_image\\profile_122538721.jpg", "writerRankTotal": "55039", "writerRankWeekly": "690780", "writerThumb": "99", "writerVisitNum": "13218", "blog_read_count": "5627", "blog_time": "于 2022-01-17 20:00:48 发布", "blog_title": "C++基础入门知识学习（通俗详细讲解）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>目录</h2>\n<ul><li>命名空间</li><li>标注输入输出流</li><li>缺省参数</li><li>函数重载</li><li>引用</li><li>内联函数</li><li>C++11新特性auto关键字</li><li>C++11新特性基于范围的for循环</li><li>关键字nullptr</li></ul>\n<h2><a id=\"namespace_12\"></a>命名空间（关键字<mark>namespace</mark>）</h2>\n<p>在C++中我们会自己定义很多的变量、函数和类，这就同时要取各种变量名、函数名和类名。如果这些变量、函数和类的名称都存在与全局作用域中，就要刻意避免重复命名造成的麻烦，要避免命名冲突或名字污染，就要对这些定义的数据类型进行严格管理，namespace就是用来对各种标识符名称进行本地化管理，避免上述麻烦的关键字。<br/> 语法格式是 namespace 命名空间名称 {} 。大括号里面就是用来定义变量、函数和类的，这样的话，即使在其他作用域下有同样的标识符名称也不会造成冲突，要用到这些名称时只要注明相应的命名空间即可，当然是全局作用域下的名称，就不用注明了，这就把我们要用到的各种标识符名称很好地管理起来了。具体看一下代码实现。</p>\n<pre><code class=\"prism language-c++\">// 1.普通的命名空间方式\nnamespace N1\n{\n\tint add(int a, int b)     // 这里在N1里面定义add函数\n\t{\n\t\treturn a + b;\n\t}\n}\n//2.命名空间可以嵌套\nnamespace N2\n{\n\tint a = 5;\n\tnamespace N3\n\t{\n\t    int b=10;\n\t}\n}\n//3.命名空间名称相同，最后编译器会将相同名称的命名空间合成一个\nnamspace N1\n{\n   int sub(int a, int b)\n   {\n     return  a-b;\n   }\n}\n</code></pre>\n<pre><code class=\"prism language-c++\">//要用到命名空间中的内容，有以下3种方法\n//1 命名空间名称加作用域限定符\nint main()\n{\n\tstd::cout &lt;&lt; N2::a + N2::N3::b &lt;&lt; std::endl;   //cout 和endl就是C++的命名空间std中的对象名称\n\treturn 0;\n}\n</code></pre>\n<pre><code class=\"prism language-c++\">//2.用using加命名空间加作用域限定符将所需名称引入\nusing std::cout;\nusing std::endl;\nusing N1::sub;\nusing N2::a;\nusing N2::N3::b;\nint main()\n{\n\tcout &lt;&lt; sub(a, b) &lt;&lt; endl;       //引入后的名称就可以直接使用\n\treturn 0;\n}\n</code></pre>\n<pre><code class=\"prism language-c++\">//3.使用using namespace 命名空间名称  直接将整个命名空间展开\nusing namespace std;\nusing namespace N1;\nusing namespace N2;\nusing namespace N2::N3;\nint main()\n{\n\tcout &lt;&lt; add(a, b) &lt;&lt; endl;    //三种方式对比：第一种是每次使用名称都要加作用域限定符，第二种是       \n\treturn 0;                        //引入的名称可以直接使用，第三种引入整个命名空间后该命名空间所有成员都可以直接使用\n}\n</code></pre>\n<p>我们平常学习C++时为了方便地使用C++标准库中的函数或对象就常在代码前面加上<mark>using namespace std;</mark></p>\n<h2><a id=\"_79\"></a>标注输入输出流</h2>\n<p>C++中的标准输入(键盘)和标准输出(控制台)所用的关键字分别是<mark>cin</mark>和<mark>cout</mark>，需要包含头文件iostream以及标准命名空间std，与C语言的<mark>scanf</mark>和<mark>printf</mark>有很大的不同，使用cout不用增加数据格式控制如%d，%f等，它会进行自动类型推导并输出，使用cin时同样不用加数据格式控制符，在键盘上输入当类型不同也会发生隐式类型转换。</p>\n<pre><code class=\"prism language-C++\">int main()\n{\n\tint a;\n\tdouble b;\n\tcin &gt;&gt; a&gt;&gt;b;\n\tcout &lt;&lt; a &lt;&lt;\" \"&lt;&lt;b &lt;&lt; endl;\n\treturn 0;          //cin与&gt;&gt;配合使用 cout与&lt;&lt;配合使用 endl相当于换行符\\n\n}\n</code></pre>\n<h2><a id=\"_91\"></a>缺省参数</h2>\n<p>C++函数的参数列表中可以有缺省参数，就是默认参数的意思，在调用函数传参时给了具体的值就用具体值，没有传实参拷贝值时就用默认的值。</p>\n<pre><code class=\"prism language-c++\">//1.全缺省参数\nvoid myprint1(int a = 2, int b = 5, int c = 10)\n{\n\tcout &lt;&lt; a + b + c &lt;&lt; endl;\n}\n//2.半缺省参数\nvoid myprint2(int a, int b = 5, int c = 10)\n{\n\tcout &lt;&lt; a + b + c &lt;&lt; endl;\n}\nint main()\n{\n    myprint1() ;\n\tmyprint1(10);\n\t myprint2(5);\n\t myprint2(3, 4, 5);\n\treturn 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c290cfe7b6b44cd4b485677b2384440c.png\"/><br/> 注意：</p>\n<ul><li>\n<ol><li>半缺省参数必须从右往左依次来给出，不能间隔着给</li></ol> </li><li>\n<ol start=\"2\"><li>缺省参数不能在函数声明和定义中同时出现</li></ol> </li><li>\n<ol start=\"3\"><li>缺省值必须是常量或者全局变量</li></ol> </li><li> <pre><code>      4. C语言不支持这样的语法\n</code></pre> </li></ul>\n<h2><a id=\"_120\"></a>函数重载</h2>\n<p>C++中有函数重载的概念,简单地说就是允许定义函数名相同的函数，在调用函数时，根据函数传入参数类型不同、参数个数不同，参数顺序不同来区分是要调用同名函数中的哪一个函数。所用发生函数重载的情形相应的就有以下三种。</p>\n<pre><code class=\"prism language-C++\">\nvoid func(int a, double b)\n{\n   cout &lt;&lt; \"int和double\" &lt;&lt; endl;\n}\nvoid func(int a)                    //三个函数名都为func但两两比较有参数个数不同、参数类型不同、顺序不同\n{\n   cout &lt;&lt; \"int\" &lt;&lt; endl;         \n}\nvoid func(double a, int b) \n{\n   cout &lt;&lt; \"double int\" &lt;&lt; endl;\n}\nint main()\n{\n   func(1);                        //因此这里调用func会按照函数重载规则去调用相应的函数\n   func(1, 1.5);\n   func(2.5, 1);\n   return 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a6efae97e22847b887170f2ab206e148.png\"/></p>\n<h3><a id=\"_145\"></a>函数重载机制</h3>\n<p>程序运行要经历预处理、编译、汇编和链接。当我们调用函数时在链接阶段，连接器就要按照函数名到相应的符号表中去找对应函数的入口地址去执行哪里的代码，C语言不支持函数重载就是因为符号表中的函数名就为函数定义时的函数名，而C++符号表中函数名有特殊的函数名修饰规则，在原函数名的基础上，编译器将函数参数类型信息添加到修改后的名字中，最后生成的符号表中的函数名是唯一对应一个函数入口地址的。这也解释了函数返回类型不是产生重载的因素。</p>\n<h2><a id=\"_149\"></a>引用(关键字&amp;)</h2>\n<p>引用可以通俗地理解给变量取别名，当我们定义一个变量时会在内存中相应地申请一块空间，我们为使用这块空间取了个名字，方便我们操纵这块空间的值，使用引用就为这块空间取了另外一个名字，使用另外的名字也可以来操纵这块空间的值。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9dcf9b11344d40f38ef0373ffc484621.png\"/><br/> 引用的用法：类型 &amp; 别名=引用实体<br/> 要注意引用类型必须和引用实体是同种类型的</p>\n<pre><code class=\"prism language-c++\">//引用的特性\nint main()\n{\n\tint a = 10,t=5;\n\tint&amp; b = a;       //1.引用在定义时就要初始化\n\tint&amp; c = a;       //2.一个变量可以有多个引用，即可以取多个别名\n\t//int&amp; c = t;        //3.引用一旦引用一个实体，再不能引用其他实体\n\tcout &lt;&lt; &amp;a &lt;&lt; \" \" &lt;&lt; &amp;b &lt;&lt; \" \" &lt;&lt; &amp;c &lt;&lt; endl;\n\treturn 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cf41dc787323498ebfa41ff3a1176129.png\"/></p>\n<h3><a id=\"_167\"></a>常引用</h3>\n<pre><code class=\"prism language-C++\">int main()\n{\n\t//int&amp; a = 10;   //类型不同 a是变量，10是常量\n\tconst int&amp; a = 10;  \n\tconst int b = 5;\n\t//int&amp; c = b;  //类型不同  从b到c权限放大，不允许这样，\n\tint e = 8;\n\tconst int&amp; h = e;  //从e到h变量到常量是权限的缩小，循序这样\n\tdouble d = 3.14;\n\t//int&amp; f = d;   //类型不匹配\n\tconst int&amp; f = d;   //这里发生隐式类型转化d是double类型，产生临时拷贝值是int型具有常属性，f是临时拷贝值的引用\n   return 0;\n}\n</code></pre>\n<h3><a id=\"_183\"></a>引用的用法</h3>\n<p>1.作函数参数</p>\n<pre><code class=\"prism language-C++\">int add(int&amp; a,int&amp; b)\n{\n    return a+b;\n}\n</code></pre>\n<p>2.作返回类型</p>\n<pre><code class=\"prism language-C++\">int&amp; add(int a,int b)\n{\n   static int c=a+b;\n   return c;\n}\n</code></pre>\n<p>注意：如果函数返回时，出了函数作用域，如果返回对象还未还给系统，则可以使用引用返回，如果已经还给系统了，则必须使用传值返回。</p>\n<h3><a id=\"_202\"></a>引用与指针的区别</h3>\n<ol><li>引用在定义时必须初始化，指针没有要求</li><li>引用在初始化时引用一个实体后，就不能再引用其他实体，而指针可以在任何时候指向任何一个同类型实体</li><li>没有NULL引用，但有NULL指针</li><li>在sizeof中含义不同：引用结果为引用类型的大小，但指针始终是地址空间所占字节个数(32位平台下占4个字节)</li><li>引用自加即引用的实体增加1，指针自加即指针向后偏移一个类型的大小</li><li>有多级指针，但是没有多级引用</li><li>访问实体方式不同，指针需要显式解引用，引用编译器自己处理</li><li>引用比指针使用起来相对更安全</li></ol>\n<h3><a id=\"_212\"></a>引用传参和值传参以及引用返回和值返回效率对比</h3>\n<p>值传参和传值返回都是产生临时变量返回临时变量，中间有空间开辟和释放等操作，相比之下引用传参和返回就没有这些过程，所以使用引用可以提高运行效率。</p>\n<h2><a id=\"_inline_215\"></a>内联函数(关键字 inline)</h2>\n<p>用法就是在普通函数定义的开头加上修饰字inline,作用是编译时C++编译器会在调用内联函数的地方展开，没有函数压栈的开销，达到提升程序运行的效率。</p>\n<pre><code class=\"prism language-C++\">inline int maxnum(int a,int b)\n{\n   return (a&gt;b)?a:b;\n}\n</code></pre>\n<h3><a id=\"_223\"></a>内联函数特性</h3>\n<ol><li>inline是一种以空间换时间的做法，省去调用函数额开销。所以代码很长或者有循环/递归的函数不适宜使用作为内联函数</li><li>inline对于编译器而言只是一个建议，编译器会自动优化，如果定义为inline的函数体内有循环/递归等等，编译器优化时会忽略掉内联。</li><li>inline不建议声明和定义分离，分离会导致链接错误。因为inline被展开，就没有函数地址了，链接就会找不到。</li></ol>\n<h2><a id=\"C11auto_229\"></a>C++11新特性auto关键字</h2>\n<p>C++11开始auto是自动推导定义数据类型，用代码解释。</p>\n<pre><code class=\"prism language-C++\">#include&lt;vector&gt;\nint main()\n{\n\tint a=10;\n\tauto b = a;                 //定义变量b就能推导它是int型，值是10\n\tdouble c=3.14;\n\tauto d = c;                   // 同样d就是double型，值3.14\n\tcout &lt;&lt; typeid(b).name() &lt;&lt; endl;\n\tcout &lt;&lt; typeid(d).name() &lt;&lt; endl;\n\tcout &lt;&lt; b &lt;&lt; endl;\n\tcout &lt;&lt; d &lt;&lt; endl;  \n\tvector&lt;int&gt;v1;\n\tfor (int i = 1; i &lt; 5; i++)\n\t{\n\t\tv1.push_back(i);   //上述用auto来推导int ，double等类型并没有体现auto带来的实质性好处\n\t}            //在stl中有很多类型名非常长，就能体现auto带来的便利了，这里v1.begin()返回的类型即变量\n\tfor (auto it = v1.begin(); it != v1.end(); it++)//it的类型是vector&lt;int&gt;::iterator。auto it = v1.begin()和vector&lt;int&gt;::iterator it = v1.begin()是等价的\n\t{\n\t\tcout &lt;&lt; *it &lt;&lt; \" \";\n\t}\n\treturn 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\04f9e8e939724769be5c58215e254ad9.png\"/></p>\n<h3><a id=\"auto_256\"></a>auto使用细则</h3>\n<p>1.用auto来声明指针类型时，auto 和auto * 没有区别，但声明引用类型时一定要用 auto &amp;<br/> 2.当在同一行声明多个变量时，这些变量必须是相同的类型，否则编译器将会报错，因为编译器实际只对第一个类型进行推导，然后用推导出来的类型定义其他变量。</p>\n<pre><code class=\"prism language-C++\">int main()\n{\n\tint a = 10;\n\tdouble b = 3.14;\n\t//auto c = a, d = b;  // 这里已经默认auto 推导的类型时int, 但后面b是double不能赋值给d\n\treturn 0;\n}\n</code></pre>\n<p>注意auto不能用来作形参推导类型</p>\n<pre><code class=\"prism language-c++\">void func(auto a)   //这是不允许的\n</code></pre>\n<p>不能用来定义数组</p>\n<pre><code class=\"prism language-C++\">auto  arr[ ] ={3,5,7};  //不能这样定义数组\n</code></pre>\n<h2><a id=\"C11for_276\"></a>C++11新特性基于范围的for循环</h2>\n<p>范围for循环的用法</p>\n<pre><code class=\"prism language-C++\">int main()\n{\n\tint arr[] = { 1,2,3,4,5 };\n\tfor (auto e : arr)        //必须传入数组名，自动依据数组元素个数推导循坏次数，单趟把数组的一个元素\n\t{                         //赋值给e，通过这种形式遍历数组。\n\t\tcout &lt;&lt; e &lt;&lt; \" \";\n\t}\n\tfor (auto&amp; e : arr)  //加上引用符&amp; 每趟循环生成不同的e来引用数组的元素从而操纵数组内容，这里就实现了数组各个元素+1的操作\n\t{\n\t\te++;\n\t}\n\tcout &lt;&lt; endl;\n\tfor (auto e : arr)      \n\t{                        \n\t\tcout &lt;&lt; e &lt;&lt; \" \";\n\t}\n\treturn 0;\n}\n</code></pre>\n<p>注意</p>\n<pre><code class=\"prism language-C++\">void myprint(int arr[])\n{\nfor (auto e : arr)      //这里范围for的效果就会失效，应为arr一定要是数组名，而这里通过传参的方法时arr已经退化为指针了，范围不能确定了。\n\t{                        \n\t\tcout &lt;&lt; e &lt;&lt; \" \";\n\t}\n}\n</code></pre>\n<h3><a id=\"nullptr_309\"></a>关键字nullptr</h3>\n<p>在C++中关于null定义的代码如下</p>\n<pre><code class=\"prism language-c++\">#ifndef NULL\n#ifdef __cplusplus\n#define NULL 0        //所以null在C++中是等同与整形数字0\n#else\n#define NULL ((void *)0)\n#endif\n#endif\n</code></pre>\n<pre><code class=\"prism language-C++\">void func(int)             //\n{\n\tcout &lt;&lt; \"int\" &lt;&lt; endl;\n}\nvoid func(int*)\n{\n\tcout &lt;&lt; \"int*\" &lt;&lt; endl;\n}\nint main()\n{\n\tfunc(0);\n\tfunc(NULL);    // 我们本意是希望参数是空指针NULL走第二个函数但实际是走第一个函数\n\tfunc((int*)NULL);    //只用强制转换和参数是nullptr时才走第二个函数\n\t\tfunc(nullptr);\n\treturn 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ce7df739a2374119b60bf94b766e66dd.png\"/><br/> 引入nullptr就是希望避免NULL是指针还是整形0的混淆引起的特定情形下的错误。<br/> 注意</p>\n<ol><li>在使用nullptr表示指针空值时，不需要包含头文件，因为nullptr是C++11作为新关键字引入的。</li><li>在C++11中，sizeof(nullptr) 与 sizeof((void*)0)所占的字节数相同。</li><li>为了提高代码的健壮性，在后续表示指针空值时建议最好使用nullptr。</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}