{"blogid": "126617637", "writerAge": "码龄1年", "writerBlogNum": "333", "writerCollect": "229", "writerComment": "17", "writerFan": "14581", "writerGrade": "5级", "writerIntegral": "3464", "writerName": "奇怪的大象", "writerProfileAdress": "writer_image\\profile_126617637.jpg", "writerRankTotal": "5378", "writerRankWeekly": "353", "writerThumb": "56", "writerVisitNum": "211643", "blog_read_count": "94", "blog_time": "于 2022-08-31 09:48:47 发布", "blog_title": "跟着狂神学Shiro(SpringBoot整合Shiro)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Shiro_2\"></a>跟着狂神学Shiro</h1>\n<h2><a id=\"Shiro_5\"></a>Shiro</h2>\n<h3><a id=\"Shiro_8\"></a>什么是Shiro</h3>\n<p>●<code>Apache Shiro</code>是一个Java 的安全(权限)框架。<br/> ●<code>Shiro</code>可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。<br/> ●<code>Shiro</code>可以完成，认证，授权，加密，会话管理，Web集成，缓存等.<br/> ●下载地址: <a href=\"http://shiro.apache.org/\">http://shiro.apache.org/</a></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20201103221329444.png\"/></p>\n<h3><a id=\"_17\"></a>有哪些功能</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20201103223432234.png\"/><br/> ●<code>Authentication</code>: 身份认证、登录，验证用户是不是拥有相应的身份;<br/> ●<code>Authorization</code>:授权,即权限验证，验证某个已认证的用户是否拥有某个权限，即判断用户能否进行什么操作，如:验证某个用户是否拥有某个角色，或者细粒度的验证某个用户对某个资源是否具有某个权限!<br/> ●<code>Session Manager</code>: 会话管理，即用户登录后就是第-次会话，在没有退出之前，它的所有信息都在会话中;会话可以是普通的JavaSE环境，也可以是Web环境;<br/> ●<code>Cryptography</code>: 加密,保护数据的安全性，如密码加密存储到数据库中，而不是明文存储;<br/> ●<code>Web Support: Web</code>支持，可以非常容易的集成到Web环境;<br/> ●<code>Caching</code>: 缓存，比如用户登录后，其用户信息，拥有的角色、权限不必每次去查,这样可以提高效率<br/> ●<code>Concurrency</code>: Shiro支持多线程应用的并发验证，即，如在-个线程中开启另-一个线程,能把权限自动的传<br/> 播过去<br/> ●<code>Testing</code>:提供测试支持;<br/> ●<code>RunAs</code>:允许一个用户假装为另-一个用户(如果他们允许)的身份进行访问;<br/> ●<code>Remember Me</code>:记住我，这个是非常常见的功能，即一-次登录后， 下次再来的话不用登录了</p>\n<h3><a id=\"Shiro_32\"></a>Shiro架构(外部)</h3>\n<p>从外部来看<code>Shiro</code>,即从应用程序角度来观察如何使用<code>shiro</code>完成工作:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201103223750298.png\"/></p>\n<p>●<code>subject</code>: 应用代码直接交互的对象是<code>Subject</code>, 也就是说<code>Shiro</code>的对外API核心就是<code>Subject</code>, <code>Subject</code>代表了当前的用户，这个用户不-定是一个具体的人，与当前应用交互的任何东西都是<code>Subject</code>,如网络爬虫，机器人等，与<code>Subject</code>的所有交互都会委托给<code>SecurityManager</code>; <code>Subject</code>其实是一一个门面， <code>SecurityManageer</code> 才是<br/> 实际的执行者<br/> ●<code>SecurityManager</code>: 安全管理器，即所有与安全有关的操作都会与<code>SercurityManager</code>交互, 并且它管理着所有的<code>Subject</code>,可以看出它是<code>Shiro</code>的核心，它负责与<code>Shiro</code>的其他组件进行交互，它相当于<code>SpringMVC</code>的<code>DispatcherServlet</code>的角色<br/> ●<code>Realm</code>: <code>Shiro</code>从<code>Realm</code>获取安全数据 (如用户,角色，权限)，就是说<code>SecurityManager</code>要验证用户身份，那么它需要从Realm获取相应的用户进行比较，来确定用户的身份是否合法;也需要从<code>Realm</code>得到用户相应的角色、权限，进行验证用户的操作是否能够进行，可以把<code>Realm</code>看<code>DataSource</code>;</p>\n<h3><a id=\"Shiro_42\"></a>Shiro架构(内部)</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20201103224134417.png\"/></p>\n<p>●<code>Subject</code>: 任何可以与应用交互的用户;<br/> ●<code>Security Manager</code>:相当于<code>SpringMVC</code>中的<code>DispatcherSerlet</code>; 是<code>Shiro</code>的心脏， 所有具体的交互都通过<code>Security Manager</code>进行控制，它管理者所有的<code>Subject</code>, 且负责进行认证,授权，会话，及缓存的管理。<br/> ●<code>Authenticator</code>:负责<code>Subject</code>认证， 是-一个扩展点，可以自定义实现;可以使用认证策略(<code>Authentication Strategy</code>)，即什么情况下算用户认证通过了;<br/> ●<code>Authorizer</code>:授权器，即访问控制器，用来决定主体是否有权限进行相应的操作;即控制着用户能访问应用中<br/> 的那些功能;<br/> ●<code>Realm</code>: 可以有-一个或者多个的<code>realm</code>, 可以认为是安全实体数据源，即用于获取安全实体的，可以用<code>JDBC</code>实现，也可以是内存实现等等，由用户提供;所以- -般在应用中都需要实现自己的<code>realm</code><br/> ●<code>SessionManager</code>:管理<code>Session</code>生 命周期的组件,而<code>Shiro</code>并不仅仅可以用在Web环境，也可以用在普通的JavaSE环境中<br/> ●<code>CacheManager</code>: 缓存控制器，来管理如用户，角色，权限等缓存的;因为这些数据基本上很少改变,放到缓存中后可以提高访问的性能;<br/> ●<code>Cryptography</code>:密码模块，<code>Shiro</code> 提高了一些常见的加密组件用于密码加密， 解密等</p>\n<h3><a id=\"Shiro_56\"></a>Shiro快速开始</h3>\n<blockquote>\n<p>准备工作</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/apache/shiro\">GitHub资源</a></p>\n</blockquote>\n<ul><li> <p>创建一个普通maven项目<code>springboot-08-shiro</code>,然后删除<code>src</code>目录,这样的话就可以在这个项目里新建很多<code>model</code>.</p> </li><li> <p>在<code>springboot-08-shiro</code>里新建<code>model</code> <code>hello_shiro</code></p> </li><li> <p>找到文件<img alt=\"在这里插入图片描述\" src=\"image\\20201103233846303.png\"/><br/> 在<code>pom.xml</code>中复制</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\n        &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- configure logging --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n        &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;log4j&lt;/groupId&gt;\n        &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> </li></ul>\n<p>更改细节</p>\n<pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\n            &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;\n            &lt;version&gt;1.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- configure logging --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;\n            &lt;version&gt;1.7.21&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n            &lt;version&gt;1.7.21&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;log4j&lt;/groupId&gt;\n            &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n            &lt;version&gt;1.2.17&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre>\n<p>复制<img alt=\"在这里插入图片描述\" src=\"image\\20201103234457922.png\"/><br/> <code>log4j.properties</code></p>\n<pre><code>log4j.rootLogger=INFO, stdout\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m %n\n\n# General Apache libraries\nlog4j.logger.org.apache=WARN\n\n# Spring\nlog4j.logger.org.springframework=WARN\n\n# Default Shiro logging\nlog4j.logger.org.apache.shiro=INFO\n\n# Disable verbose logging\nlog4j.logger.org.apache.shiro.util.ThreadContext=WARN\nlog4j.logger.org.apache.shiro.cache.ehcache.EhCache=WARN\n</code></pre>\n<p><code>shiro.ini</code></p>\n<pre><code>[users]\n# user 'root' with password 'secret' and the 'admin' role\nroot = secret, admin\n# user 'guest' with the password 'guest' and the 'guest' role\nguest = guest, guest\n# user 'presidentskroob' with password '12345' (\"That's the same combination on\n# my luggage!!!\" ;)), and role 'president'\npresidentskroob = 12345, president\n# user 'darkhelmet' with password 'ludicrousspeed' and roles 'darklord' and 'schwartz'\ndarkhelmet = ludicrousspeed, darklord, schwartz\n# user 'lonestarr' with password 'vespa' and roles 'goodguy' and 'schwartz'\nlonestarr = vespa, goodguy, schwartz\n\n# -----------------------------------------------------------------------------\n# Roles with assigned permissions\n# \n# Each line conforms to the format defined in the\n# org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc\n# -----------------------------------------------------------------------------\n[roles]\n# 'admin' role has all permissions, indicated by the wildcard '*'\nadmin = *\n# The 'schwartz' role can do anything (*) with any lightsaber:\nschwartz = lightsaber:*\n# The 'goodguy' role is allowed to 'drive' (action) the winnebago (type) with\n# license plate 'eagle5' (instance specific id)\ngoodguy = winnebago:drive:eagle5\n</code></pre>\n<p>然后<img alt=\"在这里插入图片描述\" src=\"image\\20201103234955878.png\"/><br/> <code>Quickstart.java</code></p>\n<pre><code>import org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.*;\nimport org.apache.shiro.ini.IniSecurityManagerFactory;\nimport org.apache.shiro.mgt.SecurityManager;\nimport org.apache.shiro.session.Session;\nimport org.apache.shiro.subject.Subject;\nimport org.apache.shiro.lang.util.Factory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Simple Quickstart application showing how to use Shiro's API.\n *\n * @since 0.9 RC2\n */\npublic class Quickstart {\n\n    private static final transient Logger log = LoggerFactory.getLogger(Quickstart.class);\n\n\n    public static void main(String[] args) {\n\n        // The easiest way to create a Shiro SecurityManager with configured\n        // realms, users, roles and permissions is to use the simple INI config.\n        // We'll do that by using a factory that can ingest a .ini file and\n        // return a SecurityManager instance:\n\n        // Use the shiro.ini file at the root of the classpath\n        // (file: and url: prefixes load from files and urls respectively):\n        Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory(\"classpath:shiro.ini\");\n        SecurityManager securityManager = factory.getInstance();\n\n        // for this simple example quickstart, make the SecurityManager\n        // accessible as a JVM singleton.  Most applications wouldn't do this\n        // and instead rely on their container configuration or web.xml for\n        // webapps.  That is outside the scope of this simple quickstart, so\n        // we'll just do the bare minimum so you can continue to get a feel\n        // for things.\n        SecurityUtils.setSecurityManager(securityManager);\n\n        // Now that a simple Shiro environment is set up, let's see what you can do:\n\n        // get the currently executing user:\n        Subject currentUser = SecurityUtils.getSubject();\n\n        // Do some stuff with a Session (no need for a web or EJB container!!!)\n        Session session = currentUser.getSession();\n        session.setAttribute(\"someKey\", \"aValue\");\n        String value = (String) session.getAttribute(\"someKey\");\n        if (value.equals(\"aValue\")) {\n            log.info(\"Retrieved the correct value! [\" + value + \"]\");\n        }\n\n        // let's login the current user so we can check against roles and permissions:\n        if (!currentUser.isAuthenticated()) {\n            UsernamePasswordToken token = new UsernamePasswordToken(\"lonestarr\", \"vespa\");\n            token.setRememberMe(true);\n            try {\n                currentUser.login(token);\n            } catch (UnknownAccountException uae) {\n                log.info(\"There is no user with username of \" + token.getPrincipal());\n            } catch (IncorrectCredentialsException ice) {\n                log.info(\"Password for account \" + token.getPrincipal() + \" was incorrect!\");\n            } catch (LockedAccountException lae) {\n                log.info(\"The account for username \" + token.getPrincipal() + \" is locked.  \" +\n                        \"Please contact your administrator to unlock it.\");\n            }\n            // ... catch more exceptions here (maybe custom ones specific to your application?\n            catch (AuthenticationException ae) {\n                //unexpected condition?  error?\n            }\n        }\n\n        //say who they are:\n        //print their identifying principal (in this case, a username):\n        log.info(\"User [\" + currentUser.getPrincipal() + \"] logged in successfully.\");\n\n        //test a role:\n        if (currentUser.hasRole(\"schwartz\")) {\n            log.info(\"May the Schwartz be with you!\");\n        } else {\n            log.info(\"Hello, mere mortal.\");\n        }\n\n        //test a typed permission (not instance-level)\n        if (currentUser.isPermitted(\"lightsaber:wield\")) {\n            log.info(\"You may use a lightsaber ring.  Use it wisely.\");\n        } else {\n            log.info(\"Sorry, lightsaber rings are for schwartz masters only.\");\n        }\n\n        //a (very powerful) Instance Level permission:\n        if (currentUser.isPermitted(\"winnebago:drive:eagle5\")) {\n            log.info(\"You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  \" +\n                    \"Here are the keys - have fun!\");\n        } else {\n            log.info(\"Sorry, you aren't allowed to drive the 'eagle5' winnebago!\");\n        }\n\n        //all done - log out!\n        currentUser.logout();\n\n        System.exit(0);\n    }\n}\n</code></pre>\n<blockquote>\n<p>启动</p>\n</blockquote>\n<pre><code>2020-11-04 09:13:59,275 INFO [org.apache.shiro.session.mgt.AbstractValidatingSessionManager] - Enabling session validation scheduler... \n2020-11-04 09:14:00,629 INFO [Quickstart] - Retrieved the correct value! [aValue] \n2020-11-04 09:14:00,630 INFO [Quickstart] - User [lonestarr] logged in successfully. \n2020-11-04 09:14:00,631 INFO [Quickstart] - May the Schwartz be with you! \n2020-11-04 09:14:00,631 INFO [Quickstart] - You may use a lightsaber ring.  Use it wisely. \n2020-11-04 09:14:00,632 INFO [Quickstart] - You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  Here are the keys - have fun! \n</code></pre>\n<h3><a id=\"SpringBootShiro_302\"></a>SpringBoot整合Shiro环境搭建</h3>\n<ul><li> <p>新建SpringBoot项目,勾选<code>web</code>和<code>thymeleaf</code></p> </li><li> <p>保持项目清洁,删除<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201104092645780.png\"/></p> </li><li> <p><code>templates</code>下新建<code>index.html</code></p> <title>Title</title> <h1>首页</h1> <p></p> </li><li> <p><code>controller</code>包下新建<code>MyController</code></p> <p>package com.huang.controller;</p> <p>import org.apache.catalina.security.SecurityUtil;<br/> import org.apache.shiro.SecurityUtils;<br/> import org.apache.shiro.authc.IncorrectCredentialsException;<br/> import org.apache.shiro.authc.UnknownAccountException;<br/> import org.apache.shiro.authc.UsernamePasswordToken;<br/> import org.apache.shiro.subject.Subject;<br/> import org.springframework.stereotype.Controller;<br/> import org.springframework.ui.Model;<br/> import org.springframework.web.bind.annotation.RequestMapping;<br/> import org.springframework.web.bind.annotation.ResponseBody;</p> <p>import javax.servlet.http.HttpSession;</p> <p>@Controller<br/> public class MyController {<!-- --></p> <pre><code>@RequestMapping({\"/\",\"/index\"})\npublic String toIndex(Model model){\n    model.addAttribute(\"msg\",\"hello,shiro\");\n    return \"index\";\n}\n</code></pre> <p>}</p> </li><li> <p><strong>测试正常</strong></p> </li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20201104093253194.png\"/></p>\n<blockquote>\n<p>让我们继续</p>\n</blockquote>\n<p><strong>Subject</strong>用户<br/> <strong>SecurityManager</strong>管理所有用户<br/> <strong>Realm</strong>连接数据</p>\n<blockquote>\n<p><a href=\"https://github.com/apache/shiro\">GitHub资源</a></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2020110409373559.png\"/><br/> <code>pom.xml</code>复制</p>\n<pre><code>        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\n            &lt;artifactId&gt;shiro-spring-boot-web-starter&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>发现并不好使更换为</p>\n<pre><code>        &lt;!--shiro--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\n            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;\n            &lt;version&gt;1.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<h3><a id=\"shiromybatis_389\"></a>shiro整合mybatis</h3>\n<p>导入jar包</p>\n<pre><code>        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;8.0.19&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;log4j&lt;/groupId&gt;\n            &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n            &lt;version&gt;1.2.17&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid&lt;/artifactId&gt;\n            &lt;version&gt;1.1.12&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.1&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>编写<code>application.yml</code></p>\n<pre><code>spring:\n  datasource:\n    username: root\n    password: jia5211314\n    url: jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n\n    #Spring Boot 默认是不注入这些属性值的，需要自己绑定\n    #druid 数据源专有配置\n    initialSize: 5\n    minIdle: 5\n    maxActive: 20\n    maxWait: 60000\n    timeBetweenEvictionRunsMillis: 60000\n    minEvictableIdleTimeMillis: 300000\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n\n    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入\n    #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority\n    #则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j\n    filters: stat,wall,log4j\n    maxPoolPreparedStatementPerConnectionSize: 20\n    useGlobalDataSourceStat: true\n    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500\nmybatis:\n  type-aliases-package: com.huang.pojo\n  mapper-locations: classpath:mybatis/mapper/*.xml\n</code></pre>\n<p>编写实体类</p>\n<pre><code>        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.10&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p><code>User</code></p>\n<pre><code>package com.huang.pojo;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    private int id;\n    private String name;\n    private String pwd;\n    private String perms;\n\n\n}\n</code></pre>\n<p><code>mapper</code>包编写<code>UserMapper</code></p>\n<pre><code>package com.huang.mapper;\n\nimport com.huang.pojo.User;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Mapper//这个注解表示了这是一个mybatis的mapper类\n@Repository\npublic interface UserMapper {\n\n    List&lt;User&gt; queryUserList();\n\n    User queryUserById(int id);\n\n    int addUser(User user);\n\n    int updateUser(User user);\n\n    int deleteUser(int id);\n}\n</code></pre>\n<p><code>resource</code>包下新建<code>mybatis</code>包下健<code>mapper</code></p>\n<p><code>UserMapper.xml</code></p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n\n&lt;mapper namespace=\"com.huang.mapper.UserMapper\"&gt;\n\n    &lt;select id=\"queryUserList\" resultType=\"User\"&gt;\n       select * from user;\n    &lt;/select&gt;\n\n    &lt;select id=\"queryUserByName\" resultType=\"User\" parameterType=\"String\"&gt;\n        select * from user where name=#{name}\n    &lt;/select&gt;\n\n&lt;/mapper&gt;\n</code></pre>\n<p><code>service</code>层</p>\n<p><code>UserService</code>接口</p>\n<pre><code>package com.huang.service;\n\nimport com.huang.pojo.User;\n\npublic interface UserService {\n    User queryUserByName(String name);\n}\n</code></pre>\n<p><code>UserServiceImpl</code></p>\n<pre><code>package com.huang.service;\n\nimport com.huang.mapper.UserMapper;\nimport com.huang.pojo.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserServiceImpl implements UserService{\n    @Autowired\n    UserMapper userMapper;\n\n    @Override\n    public User queryUserByName(String name) {\n        return userMapper.queryUserByName(name);\n    }\n}\n</code></pre>\n<p><code>ShiroSpringbootApplicationTests</code>中进行测试</p>\n<pre><code>package com.huang;\n\nimport com.huang.service.UserServiceImpl;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass ShiroSpringbootApplicationTests {\n    @Autowired\n    UserServiceImpl userService;\n\n    @Test\n    void contextLoads() {\n        System.out.println(userService.queryUserByName(\"张三\"));\n    }\n\n}\n</code></pre>\n<ul><li>测试成功</li></ul>\n<h3><a id=\"ShiroThymeleaf_596\"></a>Shiro整合Thymeleaf</h3>\n<p>导入<code>jar</code>包</p>\n<pre><code>        &lt;!--shiro--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\n            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;\n            &lt;version&gt;1.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<h3><a id=\"_609\"></a>代码整理</h3>\n<ul><li>结构目录<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201104144405441.png\"/></li></ul>\n<h4><a id=\"config_614\"></a>config</h4>\n<p><code>ShiroConfig</code></p>\n<pre><code>package com.huang.config;\n\nimport at.pollux.thymeleaf.shiro.dialect.ShiroDialect;\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n@Configuration\npublic class ShiroConfig {\n\n    //ShiroFilterBean\n    @Bean\n    public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(\"getDefaultWebSecurityManager\") DefaultWebSecurityManager defaultWebSecurityManager){\n        ShiroFilterFactoryBean bean=new ShiroFilterFactoryBean();\n        //设置安全管理器\n        bean.setSecurityManager(defaultWebSecurityManager);\n\n        //添加shiro的内置过滤器\n        /*\n            anon:无需认证就能访问\n            authc:必须认证才能访问\n            user:必须拥有记住我功能才能访问\n            perms:拥有某个资源的权限才能访问\n            role:拥有某个角色权限才能访问\n         */\n        //拦截\n        Map&lt;String,String&gt; filterMap =new LinkedHashMap&lt;&gt;();\n\n        //授权\n        filterMap.put(\"/user/add\",\"perms[user:add]\");\n        filterMap.put(\"/user/update\",\"perms[user:update]\");\n\n        //filterMap.put(\"/user/add\",\"authc\");\n        //filterMap.put(\"/user/update\",\"authc\");\n\n        //设置登陆的请求\n        bean.setLoginUrl(\"/toLogin\");\n\n        //设置未授权的请求\n        bean.setUnauthorizedUrl(\"/noauth\");\n\n        bean.setFilterChainDefinitionMap(filterMap);\n\n        return bean;\n\n    }\n\n    //DefaultWebSecurityManager\n    @Bean\n    public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(\"userRealm\") UserRealm userRealm){\n        DefaultWebSecurityManager securityManager=new DefaultWebSecurityManager();\n\n        //关联UserRealm\n        securityManager.setRealm(userRealm);\n\n        return securityManager;\n    }\n\n\n    //创建realm对象\n    @Bean\n    public UserRealm userRealm(){\n        return new UserRealm();\n    }\n\n    //整合shiroDialect:用来整合shiro thymeleaf\n    @Bean\n    public ShiroDialect getShiroDialect(){\n        return new ShiroDialect();\n    }\n}\n</code></pre>\n<p><code>UserRealm</code></p>\n<pre><code>package com.huang.config;\n\nimport com.huang.pojo.User;\nimport com.huang.service.UserService;\nimport org.apache.catalina.security.SecurityUtil;\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.*;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.apache.shiro.subject.Subject;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class UserRealm extends AuthorizingRealm {\n    @Autowired\n    UserService userService;\n\n    //授权\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        System.out.println(\"执行了授权\");\n\n        SimpleAuthorizationInfo info=new SimpleAuthorizationInfo();\n\n        //info.addStringPermission(\"user:add\");\n        //拿到当前用户登陆对象\n        Subject subject= SecurityUtils.getSubject();\n        User currentUser= (User) subject.getPrincipal();//拿到User对象\n        info.addStringPermission(currentUser.getPerms());//设置当前用户对象\n\n        return info;\n    }\n\n    //认证\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        System.out.println(\"执行了认证\");\n\n        //用户名，密码，数据库中获取\n\n        UsernamePasswordToken userToken=(UsernamePasswordToken) authenticationToken;\n\n        User user=userService.queryUserByName(userToken.getUsername());//获取用户名\n\n        String name=user.getName();\n        String password=user.getPwd();\n        if(user==null){//说明查无此人\n            return null;\n        }\n\n        //密码认证,shiro做\n        return new SimpleAuthenticationInfo(user,password,\"\");//放入User对象\n\n    }\n\n\n}\n</code></pre>\n<h4><a id=\"controller_760\"></a>controller</h4>\n<p><code>MyController</code></p>\n<pre><code>package com.huang.controller;\n\nimport org.apache.catalina.security.SecurityUtil;\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.IncorrectCredentialsException;\nimport org.apache.shiro.authc.UnknownAccountException;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.subject.Subject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpSession;\n\n@Controller\npublic class MyController {\n\n    @RequestMapping({\"/\",\"/index\"})\n    public String toIndex(Model model){\n        model.addAttribute(\"msg\",\"hello,shiro\");\n        return \"index\";\n    }\n\n    @RequestMapping(\"/user/add\")\n    public String add(){\n        return \"user/add\";\n    }\n\n    @RequestMapping(\"/user/update\")\n    public String update(){\n        return \"user/update\";\n    }\n\n    @RequestMapping(\"/toLogin\")\n    public String toLogin(){\n        return \"login\";\n    }\n\n    @RequestMapping(\"/login\")\n    public String login(String username, String password, Model model, HttpSession session){\n\n        //获取当前用户\n        Subject subject= SecurityUtils.getSubject();\n        //封装用户的登陆数据\n        UsernamePasswordToken token=new UsernamePasswordToken(username,password);\n\n        try{\n            subject.login(token);//执行登陆的方法\n            session.setAttribute(\"loginUser\",username);//设置session\n            return \"index\";\n        }catch (UnknownAccountException e){//用户名不存在\n            model.addAttribute(\"msg\",\"用户名错误\");\n            return \"login\";\n        }catch (IncorrectCredentialsException e){//密码不存在\n            model.addAttribute(\"msg\",\"密码错误\");\n            return \"login\";\n        }\n\n    }\n\n    @RequestMapping(\"/noauth\")\n    @ResponseBody\n    public String unauthorized(){\n        return \"未经授权禁止访问\";\n\n    }\n\n}\n</code></pre>\n<h4><a id=\"mapper_836\"></a>mapper</h4>\n<p><code>UserMapper</code></p>\n<pre><code>package com.huang.mapper;\n\nimport com.huang.pojo.User;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Mapper\n@Repository\npublic interface UserMapper {\n\n    User queryUserByName(String name);\n\n    List&lt;User&gt; queryUserList();\n\n    User queryUserById(int id);\n\n    int addUser(User user);\n\n    int updateUser(User user);\n\n    int deleteUser(int id);\n}\n</code></pre>\n<h4><a id=\"pojo_867\"></a>pojo</h4>\n<p><code>User</code></p>\n<pre><code>package com.huang.pojo;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    private int id;\n    private String name;\n    private String pwd;\n    private String perms;\n\n\n}\n</code></pre>\n<h4><a id=\"service_891\"></a>service</h4>\n<p><code>UserService</code></p>\n<pre><code>在这里插入代码片package com.huang.service;\n\nimport com.huang.pojo.User;\n\npublic interface UserService {\n    User queryUserByName(String name);\n}\n</code></pre>\n<p><code>UserServiceImpl</code></p>\n<pre><code>package com.huang.service;\n\nimport com.huang.mapper.UserMapper;\nimport com.huang.pojo.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserServiceImpl implements UserService{\n    @Autowired\n    UserMapper userMapper;\n\n    @Override\n    public User queryUserByName(String name) {\n        return userMapper.queryUserByName(name);\n    }\n}\n</code></pre>\n<h4><a id=\"resource_927\"></a>resource</h4>\n<p><code>UserMapper.xml</code></p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n\n&lt;mapper namespace=\"com.huang.mapper.UserMapper\"&gt;\n\n    &lt;select id=\"queryUserList\" resultType=\"User\"&gt;\n       select * from user;\n    &lt;/select&gt;\n\n    &lt;select id=\"queryUserByName\" resultType=\"User\" parameterType=\"String\"&gt;\n        select * from user where name=#{name}\n    &lt;/select&gt;\n\n&lt;/mapper&gt;\n</code></pre>\n<p><code>add.html</code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;添加一个用户&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n-----------------------------------------------\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;修改一个用户&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n-----------------------------------------------\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"\n      xmlns:th=\"https://www.thymeleaf.org\"\n      xmlns:shiro=\"https://www.thymeleaf.org/thymeleaf-extras-shiro\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;首页&lt;/h1&gt;\n\n&lt;p th:text=\"${msg}\"&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n&lt;div th:if=\"${session.loginUser==null}\"&gt;\n    &lt;a th:href=\"@{/toLogin}\"&gt;登陆&lt;/a&gt;\n&lt;/div&gt;\n\n&lt;div shiro:hasPermission=\"user:add\"&gt;\n    &lt;a th:href=\"@{/user/add}\"&gt;add&lt;/a&gt;\n&lt;/div&gt;\n\n&lt;div shiro:hasPermission=\"user:update\"&gt;\n    &lt;a th:href=\"@{/user/update}\"&gt;update&lt;/a&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n-----------------------------------------------\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xmlns:th=\"https://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;登陆&lt;/h1&gt;\n&lt;hr&gt;\n&lt;p style=\"color: red\" th:text=\"${msg}\"&gt;&lt;/p&gt;\n&lt;form th:action=\"@{/login}\"&gt;\n    &lt;p&gt;用户名：&lt;input type=\"text\" name=\"username\"&gt;&lt;/p&gt;\n    &lt;p&gt;密码：&lt;input type=\"password\" name=\"password\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;input type=\"submit\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><code>application.yml</code></p>\n<pre><code>spring:\n  datasource:\n    username: root\n    password: jia5211314\n    url: jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n\n    #Spring Boot 默认是不注入这些属性值的，需要自己绑定\n    #druid 数据源专有配置\n    initialSize: 5\n    minIdle: 5\n    maxActive: 20\n    maxWait: 60000\n    timeBetweenEvictionRunsMillis: 60000\n    minEvictableIdleTimeMillis: 300000\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n\n    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入\n    #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority\n    #则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j\n    filters: stat,wall,log4j\n    maxPoolPreparedStatementPerConnectionSize: 20\n    useGlobalDataSourceStat: true\n    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500\nmybatis:\n  type-aliases-package: com.huang.pojo\n  mapper-locations: classpath:mybatis/mapper/*.xml\n</code></pre>\n<h4><a id=\"pomxml_1065\"></a>pom.xml</h4>\n<pre><code>    &lt;dependencies&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt;\n            &lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt;\n            &lt;version&gt;2.0.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;!--\n        Subject 用户\n        SecurityManager 管理所有用户\n        Realm 连接数据\n        --&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;8.0.19&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;log4j&lt;/groupId&gt;\n            &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n            &lt;version&gt;1.2.17&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid&lt;/artifactId&gt;\n            &lt;version&gt;1.1.12&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--lombok--&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.10&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;!--shiro--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\n            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;\n            &lt;version&gt;1.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--thymeleaf模板--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;\n            &lt;artifactId&gt;thymeleaf-spring5&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;\n            &lt;artifactId&gt;thymeleaf-extras-java8time&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;\n                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre>\n<h3><a id=\"_1156\"></a>小结</h3>\n<p>此部分比<code>Spring Security</code>较难,并未能很好的理解所以粘贴了大量代码,回头会再次理解,对笔记进行补充.</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}