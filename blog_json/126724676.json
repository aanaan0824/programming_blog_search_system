{"blogid": "126724676", "writerAge": "码龄5年", "writerBlogNum": "604", "writerCollect": "9960", "writerComment": "1223", "writerFan": "36072", "writerGrade": "8级", "writerIntegral": "29984", "writerName": "波波烤鸭", "writerProfileAdress": "writer_image\\profile_126724676.jpg", "writerRankTotal": "192", "writerRankWeekly": "368", "writerThumb": "4056", "writerVisitNum": "5229751", "blog_read_count": "38", "blog_time": "于 2022-09-06 14:32:36 发布", "blog_title": "【04】Spring源码-手写篇-手写AOP实现(下)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\afd9c6f565ff4f018916a56eaa812b15.png\"/></p>\n<p>接上一篇文章继续</p>\n<h1><a id=\"_3\"></a>四、织入实现</h1>\n<h2><a id=\"1__5\"></a>1. 织入的分析</h2>\n<p>  织入要完成的是什么？织入其实就是要把用户提供的增强功能加到指定的方法上。</p>\n<p><img alt=\"image.png\" src=\"image\\553fc8e2467b77e815d73cf2057803fd.png\"/></p>\n<p>思考1：在什么时候织入?</p>\n<p>  创建Bean实例的时候，在Bean初始化后，再对其进行增强。</p>\n<p>思考2：如何确定bean要增强?</p>\n<p>  对bean类及方法挨个匹配用户配置的切面，如果有切面匹配就是要增强</p>\n<p>思考3：如何实现织入？</p>\n<p>  代理方式</p>\n<h2><a id=\"2_23\"></a>2.织入的设计</h2>\n<p>  为了更好的去设计织入的实现，先整理下AOP的使用流程。</p>\n<p><img alt=\"image.png\" src=\"image\\6687ced6496c76b27084a62cc474e1e8.png\"/></p>\n<p>这里我们要考虑匹配、织入逻辑写到哪里？是写在BeanFactory中吗?</p>\n<p>这时我们要考虑如果我们直接在BeanFactory中来处理，后续如果还有其他的需求是不是也要在BeanFactory中处理呢？这样操作有什么不好的地方呢？</p>\n<ul><li>BeanFactory代码爆炸，不专情</li><li>不易扩展</li></ul>\n<p>那我们应该要怎么来设计呢？</p>\n<p>我们先来回顾下Bean的生产的过程</p>\n<p><img alt=\"image.png\" src=\"image\\0b02d5c83ae47154144354ca80c50f75.png\"/></p>\n<p>在这个过程中， 将来会有更多处理逻辑加入到Bean生产过程的不同阶段。我们现在最好是设计出能让我们后面不用再改BeanFactory的代码就能灵活的扩展。</p>\n<p>这时我们可以考虑用观察者模式，通过在各个节点加入扩展点，加入注册机制。</p>\n<p><img alt=\"image.png\" src=\"image\\7bd05603faa00d8ce331c0d29912c36e.png\"/></p>\n<p>那么在这块我们就应用观察者模式来加入一个Bean的后置处理器 BeanPostProcessor</p>\n<p><img alt=\"image.png\" src=\"image\\af3dc79906dfdbf9f6259064bf30902c.png\"/></p>\n<p>具体的我们在代码中来看看。</p>\n<h2><a id=\"3_54\"></a>3.织入的实现</h2>\n<h3><a id=\"31__56\"></a>3.1 分析</h3>\n<p>  我们先定义了 BeanPostProcessor 接口，在这个接口中我们定义了相关的行为，也就是初始化之前和初始化之后要执行的方法。</p>\n<p><img alt=\"image.png\" src=\"image\\1b12d1a96466e10440768f09e5ce620e.png\"/></p>\n<p>  那么在此处我们需要在BeanFactory对创建的Bean对象做初始化前后要校验是否需要做相关的增强操作。</p>\n<p><img alt=\"image.png\" src=\"image\\b243846ed40cc59e759df6314aa84e9a.png\"/></p>\n<p>  在BeanFactory中我们提供了BeanPostProcessor的注册方法。</p>\n<p><img alt=\"image.png\" src=\"image\\2a0bdbe5cd41177a831ed0c91c277bad.png\"/></p>\n<p><img alt=\"image.png\" src=\"image\\65fcb8de061fbe1383129a418456c6fd.png\"/></p>\n<p>那么结合BeanFactory要实现相关的Bean增强操作，我们要做的行为就是两方面</p>\n<ol><li>创建相关的BeanPostProcessor，并注册到BeanFactory中</li><li>BeanFactory在初始化Bean前后判断是否有相关BeanPostProcessor，如果有做相关的增强处理</li></ol>\n<p>  有了上面的分析，那么我们要实现具体的织入就需要来看看在对应前置和后置方法中我们要实现的功能</p>\n<p><img alt=\"image.png\" src=\"image\\b42d640b5498b07d67bb95c02f842101.png\"/></p>\n<h3><a id=\"32__81\"></a>3.2 判断是否需要增强</h3>\n<p>  我们如何判断Bean对象是否需要增强呢？其实就是需要判断该Bean是否满足用户定义的切入点表达式。也就是我们需要简单Bean所属的类和所有方法。然后遍历Advisor。取出advisor中的Pointcut来匹配类和方法。</p>\n<p><img alt=\"image.png\" src=\"image\\4519863552f3698fe38bc5e1cfba426a.png\"/></p>\n<p>代码层面</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t\t<span class=\"token comment\">/*逻辑\n\t\t1 判断Bean是否需要增强\n\t\t2 创建代理来实现增强\n\t\t*/</span>\n\n        <span class=\"token comment\">//1 判断Bean是否需要增强</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">&gt;</span></span> matchAdvisors <span class=\"token operator\">=</span> <span class=\"token function\">getMatchedAdvisors</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 2如有切面切中，创建代理来实现增强</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>matchAdvisors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tbean <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> matchAdvisors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image.png\" src=\"image\\d2cb24c4add97630fdb7be1998065205.png\"/></p>\n<h3><a id=\"33__112\"></a>3.3 代理对象</h3>\n<p>  通过上面的分析如果Bean需要被增强，那么我们就需要创建Bean对应的代理对象了。代理模式：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在调用者和目标对象之间起到中介的作用；</p>\n<p><img alt=\"image.png\" src=\"image\\7175563b2db6e83c53ec891be4b4057e.png\"/></p>\n<p>  动态代理的实现方法有哪些?</p>\n<p><img alt=\"image.png\" src=\"image\\3a1773df06101eac0a9fa04c198946b5.png\"/></p>\n<p>JDK动态代理：</p>\n<p>在运行时，对接口创建代理对象</p>\n<p><img alt=\"image.png\" src=\"image\\8aecf670675a08a229c0894fbb67609c.png\"/></p>\n<p>cglib动态代理：</p>\n<p><img alt=\"image.png\" src=\"image\\6aec49a292d13478c36ade69acf86c85.png\"/></p>\n<h3><a id=\"34__132\"></a>3.4 代理实现层设计</h3>\n<p>  动态代理的实现方式有很多种，如何能够做到灵活的扩展呢？在这里我们同样可以通过 <code>抽象</code>和 <code>面向接口编程</code>来设计一套支持不同代理实现的代码</p>\n<p><img alt=\"image.png\" src=\"image\\bcb5b7ae577ff54d669aa850c0d83339.png\"/></p>\n<p>  有了上面的设计，然后就是需要考虑代理对象的创建了。</p>\n<p><img alt=\"image.png\" src=\"image\\a97ee091e5a2e1d6e1a6886307753a4b.png\"/></p>\n<h3><a id=\"35__142\"></a>3.5 增强逻辑实现</h3>\n<p>  代理对象搞定后我们需要考虑核心的问题就是怎么来实现我们要增强的逻辑呢？首先不管你用哪种方式来生成代理对象最终增强的逻辑代码是一样的。所以我们可以把这部分内容提炼出来。</p>\n<p><img alt=\"image.png\" src=\"image\\046e812a9846ec917fc2f9df4ad24245.png\"/></p>\n<p>  然后具体的应用Advice增强实现的逻辑为：</p>\n<p><img alt=\"image.png\" src=\"image\\bcaceb7b1bab9518f9e9ae11f26581f4.png\"/></p>\n<p>注意此处用到了责任链模式</p>\n<pre><code class=\"prism language-java\">\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">applyAdvices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">&gt;</span></span> matchAdvisors<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// 这里要做什么？   需要获取相关案例代码的+V：boge3306 备注:手写Spring</span>\n\t\t<span class=\"token comment\">// 1、获取要对当前方法进行增强的advice</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> advices <span class=\"token operator\">=</span> <span class=\"token class-name\">AopProxyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShouldApplyAdvices</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> matchAdvisors<span class=\"token punctuation\">,</span>\n\t\t\t\tbeanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 2、如有增强的advice，责任链式增强执行</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>advices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// 责任链式执行增强</span>\n\t\t\t<span class=\"token class-name\">AopAdviceChainInvocation</span> chain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AopAdviceChainInvocation</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> advices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后我们前面的Creator要怎么使用AopProxy呢？这块我们可以通过工厂模式来处理</p>\n<p><img alt=\"image.png\" src=\"image\\df672efe87c60b271f410ce283d8228e.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AopProxyFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token class-name\">AopProxy</span> <span class=\"token function\">createAopProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">&gt;</span></span> matchAdvisors<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanFactory</span> beanFactory<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * 获得默认的AopProxyFactory实例\n\t *    需要获取相关案例代码的+V：boge3306 备注:手写Spring\n\t * @return AopProxyFactory\n\t */</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">AopProxyFactory</span> <span class=\"token function\">getDefaultAopProxyFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultAopProxyFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>到这儿，完整的增强逻辑就梳理通了</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}