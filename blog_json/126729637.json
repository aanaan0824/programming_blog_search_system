{"blogid": "126729637", "writerAge": "码龄4年", "writerBlogNum": "228", "writerCollect": "4834", "writerComment": "708", "writerFan": "18572", "writerGrade": "6级", "writerIntegral": "6000", "writerName": "所得皆惊喜", "writerProfileAdress": "writer_image\\profile_126729637.jpg", "writerRankTotal": "2249", "writerRankWeekly": "1642", "writerThumb": "1496", "writerVisitNum": "348025", "blog_read_count": "61", "blog_time": "于 2022-09-06 17:28:15 发布", "blog_title": "商城项目04_SpringCloud Alibaba概述、Nacos作为注册、配置中心、声明式远程调用Feign", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_SpringCloud_Alibaba_1\">①. SpringCloud Alibaba简介</a></li><li><a href=\"#_SpringCloud_AlibabaNacos_42\">②. SpringCloud Alibaba-Nacos作为注册中心</a></li><li><a href=\"#__Feign_119\">③. 声明式远程调用 Feign</a></li><li><a href=\"#_SpringCloud_AlibabaNacos_230\">④. SpringCloud Alibaba-Nacos作为配置中心</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_SpringCloud_Alibaba_1\"></a>①. SpringCloud Alibaba简介</h1>\n<ul><li> <p>①. Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件,方便开发者通过Spring Cloud编程模型轻松使用这些组件来开发分布式应用服务。依托Spring Cloud Alibaba,您只需要添加一些注解和少量配置,就可以将Spring Cloud应用接入阿里微服务解决方案,通过阿里中间件来迅速搭建分布式应用系统</p> </li><li> <p>②. 为什么使用<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1924200b32ef4889a1110720727e94f0.png\"/></p> </li><li> <p>③. SpringCloud的几大痛点</p> </li></ul>\n<ol><li>SpringCloud部分组件停止维护和更新,给开发带来不便；</li><li>SpringCloud部分环境搭建复杂,没有完善的可视化界面,我们需要大量的二次开发和定制</li><li>SpringCloud配置复杂,难以上手,部分配置差别难以区分和合理应用</li></ol>\n<ul><li> <p>④. SpringCloud Alibaba的优势<br/> 阿里使用过的组件经历了考验,性能强悍,设计合理,现在开源出来大家用 成套的产品搭配完善的可视化界面给开发运维带来极大的便利搭建简单,学习曲线低</p> </li><li> <p><font color=\"red\">⑤. 结合 SpringCloud Alibaba我们最终的技术搭配方案: </font> <br/> <font color=\"blue\">SpringCloud Alibaba - Nacos:注册中心(服务发现/注册) </font><br/> <font color=\"blue\">SpringCloud Alibaba - Nacos:配置中心(动态配置管理) </font><br/> <font color=\"blue\">SpringCloud - Ribbon:负载均衡</font><br/> <font color=\"blue\">SpringCloud - Feign:声明式 HTTP 客户端(调用远程服务) </font><br/> <font color=\"blue\">SpringCloud Alibaba - Sentinel:服务容错(限流、降级、熔断) </font><br/> <font color=\"blue\">SpringCloud - Gateway:API 网 关 (webflux编程模式 ) </font><br/> <font color=\"blue\">SpringCloud - Sleuth:调用链监控</font><br/> <font color=\"blue\">SpringCloud Alibaba - Seata:原Fescar,即分布式事务解决方案</font></p> </li><li> <p>⑥. 在common引入dependencyManagement依赖管理,相当于以后在dependencies里引spring cloud alibaba就不用写版本号。注意他和普通依赖的区别,他只是备注一下,并没有加入依赖</p> </li></ul>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-cloud-alibaba-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.2.0.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">&gt;</span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h1><a id=\"_SpringCloud_AlibabaNacos_42\"></a>②. SpringCloud Alibaba-Nacos作为注册中心</h1>\n<ul><li> <p>①. Nacos是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。他是使用java编写。需要依赖java环境</p> </li><li> <p><a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2.2.x/README-zh.md\">②. nacos官网地址</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a52998894b1b41849f94710868433ed6.png\"/></p> </li><li> <p><a href=\"https://github.com/alibaba/nacos/releases\">③. 下载 nacos-server</a>,启动 nacos-server</p> </li></ul>\n<ol><li>双击bin中的startup.cmd文件</li><li>访问http://localhost:8848/nacos/</li><li>使用默认的nacos/nacos进行登录<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e7729b0d0dda41b9a58dc87b42861375.png\"/></li></ol>\n<ul><li>④. 依赖:放到common里,不写版本是因为父项目或spring-cloud里面有了版本管理</li></ul>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<ul><li><font color=\"red\">⑤. 使用nacos:在某个项目里properties里写spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848 (yaml同理,指定nacos的地址)。再指定applicatin.name告诉注册到nacos中以什么命名</font></li></ul>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//192.168.56.10<span class=\"token punctuation\">:</span>3306/gulimall<span class=\"token punctuation\">-</span>sms<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span>\n    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gulimall<span class=\"token punctuation\">-</span>coupon\n\n\n<span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mapper-locations</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>/mapper/<span class=\"token important\">**/*.xml</span>\n  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">db-config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">id-type</span><span class=\"token punctuation\">:</span> auto\n      <span class=\"token key atrule\">logic-delete-value</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token key atrule\">logic-not-delete-value</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7000</span>\n</code></pre>\n<ul><li>⑥. 使用@EnableDiscoveryClient 注解开启服务注册与发现功能</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableDiscoveryClient</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProviderApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@RestController</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">EchoController</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/echo/{string}\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li> <p>⑦. 然后依次给member、配置上面的yaml,改下name就行。再给每个项目配置类上加上注解@EnableDiscoveryClient</p> </li><li> <p><font color=\"red\">⑧. nacos使用三步走:</font></p> </li></ul>\n<ol><li><font color=\"blue\">导包 nacos-discovery</font></li><li><font color=\"blue\">写配置,指定 nacos 地址,指定应用的名字</font></li><li><font color=\"blue\">开启服务注册发现功能@EnableDiscoveryClient</font></li></ol>\n<h1><a id=\"__Feign_119\"></a>③. 声明式远程调用 Feign</h1>\n<ul><li> <p><font color=\"red\">①. feign是一个声明式的HTTP客户端,他的目的就是让远程调用更加简单。给远程服务发的是HTTP请求</font><br/> <font color=\"blue\">会员服务想要远程调用优惠券服务,只需要给会员服务里引入openfeign依赖,他就有了远程调用其他服务的能力</font></p> </li><li> <p>②. 引入依赖pom.xml(我们之前在member的pom.xml已经引用过了(微服务))</p> </li></ul>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-cloud-starter-openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<ul><li>③. 在coupon中修改如下的内容,这样我们准备好了优惠券的调用内容</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupon/coupon\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CouponController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CouponService</span> couponService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/member/list\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span> <span class=\"token function\">membercoupons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//全系统的所有返回都返回R</span>\n        <span class=\"token comment\">// 应该去数据库查用户对于的优惠券,但这个我们简化了,不去数据库查了,构造了一个优惠券给他返回</span>\n        <span class=\"token class-name\">CouponEntity</span> couponEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CouponEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        couponEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setCouponName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"满100-10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//优惠券的名字</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupons\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>couponEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>④. 在member的配置类上加注解@EnableDiscoveryClient,告诉member是一个远程调用客户端,member要调用东西的</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n * 想要远程调用的步骤:\n * 1 引入openfeign\n * 2 编写一个接口,接口告诉springcloud这个接口需要调用远程服务\n * \t2.1 在接口里声明@FeignClient(\"gulimall-coupon\")他是一个远程调用客户端且要调用coupon服务\n * \t2.2 要调用coupon服务的/coupon/coupon/member/list方法\n * 3 开启远程调用功能 @EnableFeignClients,要指定远程调用功能放的基础包\n * */</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xiaozhi.gulimall.member.dao\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@EnableDiscoveryClient</span>\n<span class=\"token annotation punctuation\">@EnableFeignClients</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"com.xiaozhi.gulimall.member.feign\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GulimallMemberApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GulimallMemberApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>⑤. 那么要调用什么东西呢？就是我们刚才写的优惠券的功能,复制函数部分,在member的com.xiaozhi.gulimall.member.feign包下新建类:</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gulimall-coupon\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//告诉spring cloud这个接口是一个远程客户端,要调用coupon服务(nacos中找到),具体是调用coupon服务的/coupon/coupon/member/list对应的方法</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CouponFeignService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 远程服务的url</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/coupon/coupon/member/list\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//注意写全优惠券类上还有映射//注意我们这个地方不是控制层,所以这个请求映射请求的不是我们服务器上的东西,而是nacos注册中心的</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span> <span class=\"token function\">membercoupons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//得到一个R对象</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>⑥. 然后我们在member的控制层写一个测试请求</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member/member\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MemberService</span> memberService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">CouponFeignService</span> couponFeignService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/coupons\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MemberEntity</span> memberEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        memberEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setNickname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"会员昵称张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">R</span> membercoupons <span class=\"token operator\">=</span> couponFeignService<span class=\"token punctuation\">.</span><span class=\"token function\">membercoupons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//假设张三去数据库查了后返回了张三的优惠券信息</span>\n\n        <span class=\"token comment\">//打印会员和优惠券信息</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">,</span>memberEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupons\"</span><span class=\"token punctuation\">,</span>membercoupons<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupons\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li> <p>⑦. 测试:http://localhost:8000/member/member/coupons<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d16672388b104ec4982b919ddab92492.png\"/></p> </li><li> <p>⑧. 上面讲的内容很重要,我们停留5分钟体会一下调用逻辑(coupon里的R.ok()是什么,就是设置了个msg)</p> </li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//R继承了HashMap</span>\n    <span class=\"token comment\">// ok是个静态方法,new了一个R对象,并且</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">R</span> <span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">R</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用了super.put(key, value);,即hashmap的put</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><font color=\"red\">⑨. 总结Fiegn步骤:</font></li></ul>\n<ol><li><font color=\"blue\">引入openfeign依赖</font></li><li><font color=\"blue\">编写一个接口,接口告诉springcloud这个接口需要调用远程服务<br/> 在接口里声明@FeignClient(“gulimall-coupon”)他是一个远程调用客户端且要调用coupon服务<br/> 要调用coupon服务的/coupon/coupon/member/list方法</font></li><li><font color=\"blue\">开启远程调用功能@EnableFeignClients,要指定远程调用功能放的基础包</font></li></ol>\n<h1><a id=\"_SpringCloud_AlibabaNacos_230\"></a>④. SpringCloud Alibaba-Nacos作为配置中心</h1>\n<ul><li> <p>①. 配置中心的意思是不在application.properties等文件中配置了,而是放到nacos配置中心公用,这样无需每台机器都改</p> </li><li> <p><a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2.2.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md\">②. Nacos作为配置中心地址</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e44efc1103114ccd8c3db071f0ed3df9.png\"/></p> </li><li> <p>③. common中添加依赖nacos配置中心</p> </li></ul>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<ul><li><font color=\"red\">④. 在coupons项目中创建/src/main/resources/bootstrap.properties,这个文件是springboot里规定的,它的优先级别比application.properties高</font><br/> <font color=\"blue\">注意:这里一定要配置application.name和配置中心的地址</font></li></ul>\n<pre><code class=\"prism language-handlebars\"><span class=\"token punctuation\">#</span> <span class=\"token variable\">改名字</span><span class=\"token punctuation\">,</span><span class=\"token variable\">对应nacos里的配置文件名</span>\n<span class=\"token variable\">spring</span><span class=\"token punctuation\">.</span><span class=\"token variable\">application</span><span class=\"token punctuation\">.</span><span class=\"token variable\">name</span><span class=\"token punctuation\">=</span><span class=\"token variable\">gulimall-coupon</span>\n<span class=\"token variable\">spring</span><span class=\"token punctuation\">.</span><span class=\"token variable\">cloud</span><span class=\"token punctuation\">.</span><span class=\"token variable\">nacos</span><span class=\"token punctuation\">.</span><span class=\"token variable\">config</span><span class=\"token punctuation\">.</span><span class=\"token variable\">server-addr</span><span class=\"token punctuation\">=</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8848</span>\n</code></pre>\n<ul><li><font color=\"red\">⑤. 如果nacos和本地都配置了,会优先使用nacos中的配置</font><br/> <font color=\"blue\">Loading nacos data…启动项目info输出的信息,告诉我们gulimall-coupon.properties是nacos中默认的配置文件名字</font><br/> <img alt=\"在这里插入图片描述\" src=\"image\\612ff1b672eb45b0a5bf153dd1c995d7.png\"/></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7e760c9c43814eeba4bf8e608f3edc1a.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\d5ecee2479254e5190a44180f4f250c9.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupon/coupon\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RefreshScope</span> <span class=\"token comment\">//这个注解可以达到nacos配置中心的文件变了之后,可以进行动态的刷新</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CouponController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CouponService</span> couponService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${coupon.user.name}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${coupon.user.age}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/nacos/config/simple\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span> <span class=\"token function\">nacosConfigSimple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\982b00ada0b24e3da3060dee3ed39428.png\"/></p>\n<ul><li><font color=\"red\">⑥. 命名空间:用作配置隔离(一般每个微服务一个命名空间)</font></li></ul>\n<ol><li><font color=\"blue\">默认public。默认新增的配置都在public空间下</font></li><li><font color=\"blue\">开发、测试、开发可以用命名空间分割。properties每个空间有一份。也可以为每个微服务配置一个命名空间,微服务互相隔离</font></li><li><font color=\"blue\">在bootstrap.properties里配置(测试完去掉,学习不需要)</font></li></ol>\n<pre><code class=\"prism language-handlebars\"><span class=\"token punctuation\">#</span> <span class=\"token variable\">可以选择对应的命名空间</span> <span class=\"token punctuation\">#</span> <span class=\"token variable\">写上对应环境的命名空间ID</span>\n<span class=\"token variable\">spring</span><span class=\"token punctuation\">.</span><span class=\"token variable\">cloud</span><span class=\"token punctuation\">.</span><span class=\"token variable\">nacos</span><span class=\"token punctuation\">.</span><span class=\"token variable\">config</span><span class=\"token punctuation\">.</span><span class=\"token variable\">namespace</span><span class=\"token punctuation\">=</span><span class=\"token variable\">b176a68a-</span><span class=\"token number\">6800</span><span class=\"token variable\">-</span><span class=\"token number\">4648</span><span class=\"token variable\">-</span><span class=\"token number\">833</span><span class=\"token variable\">b-be10be8bab00</span>\n</code></pre>\n<ul><li> <p><font color=\"red\">⑦. 配置集:所有的配置的集合(比如application.yaml文件里面有很多配置,全部的配置组成了配置集)</font></p> </li><li> <p><font color=\"red\">⑧. 配置集ID:类似于配置文件名,即Data ID</font></p> </li><li> <p><font color=\"red\">⑨. 配置分组:默认所有的配置集都属于DEFAULT_GROUP。(双十一,618的优惠策略改分组即可)</font></p> </li></ul>\n<pre><code class=\"prism language-handlebars\"><span class=\"token punctuation\">#</span> <span class=\"token variable\">更改配置分组</span>\n<span class=\"token variable\">spring</span><span class=\"token punctuation\">.</span><span class=\"token variable\">cloud</span><span class=\"token punctuation\">.</span><span class=\"token variable\">nacos</span><span class=\"token punctuation\">.</span><span class=\"token variable\">config</span><span class=\"token punctuation\">.</span><span class=\"token variable\">group</span><span class=\"token punctuation\">=</span><span class=\"token variable\">DEFAULT_GROUP</span>\n</code></pre>\n<ul><li> <p><font color=\"red\"> ⑩. 最终方案:每个微服务创建自己的命名空间,然后使用配置分组区分环境(dev/test/prod)</font></p> </li><li> <p>⑩①. 加载多配置集<br/> 我们要把原来application.yml里的内容都分文件抽离出去。我们在nacos里创建好后,在coupons里指定要导入的配置即可(bootstrap.properties)</p> </li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 在其中用数组spring.cloud.nacos.config.extension-configs[]写明每个配置集</span>\nspring.application.name<span class=\"token operator\">=</span>gulimall-coupon\n\nspring.cloud.nacos.config.server-addr<span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1:8848\n<span class=\"token comment\"># 可以选择对应的命名空间 # 写上对应环境的命名空间ID</span>\nspring.cloud.nacos.config.namespace<span class=\"token operator\">=</span>b176a68a-6800-4648-833b-be10be8bab00\n<span class=\"token comment\"># 更改配置分组</span>\nspring.cloud.nacos.config.group<span class=\"token operator\">=</span>dev\n\n<span class=\"token comment\">#新版本不建议用下面的了</span>\n<span class=\"token comment\">#spring.cloud.nacos.config.ext-config[0].data-id=datasource.yml</span>\n<span class=\"token comment\">#spring.cloud.nacos.config.ext-config[0].group=dev</span>\n<span class=\"token comment\">#spring.cloud.nacos.config.ext-config[0].refresh=true</span>\n<span class=\"token comment\">#spring.cloud.nacos.config.ext-config[1].data-id=mybatis.yml</span>\n<span class=\"token comment\">#spring.cloud.nacos.config.ext-config[1].group=dev</span>\n<span class=\"token comment\">#spring.cloud.nacos.config.ext-config[1].refresh=true</span>\n<span class=\"token comment\">#spring.cloud.nacos.config.ext-config[2].data-id=other.yml</span>\n<span class=\"token comment\">#spring.cloud.nacos.config.ext-config[2].group=dev</span>\n<span class=\"token comment\">#spring.cloud.nacos.config.ext-config[2].refresh=true</span>\n\nspring.cloud.nacos.config.extension-configs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.data-id<span class=\"token operator\">=</span>datasource.yml\nspring.cloud.nacos.config.extension-configs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.group<span class=\"token operator\">=</span>dev\nspring.cloud.nacos.config.extension-configs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.refresh<span class=\"token operator\">=</span>true\n\nspring.cloud.nacos.config.extension-configs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>.data-id<span class=\"token operator\">=</span>mybatis.yml\nspring.cloud.nacos.config.extension-configs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>.group<span class=\"token operator\">=</span>dev\nspring.cloud.nacos.config.extension-configs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>.refresh<span class=\"token operator\">=</span>true\n\nspring.cloud.nacos.config.extension-configs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>.data-id<span class=\"token operator\">=</span>other.yml\nspring.cloud.nacos.config.extension-configs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>.group<span class=\"token operator\">=</span>dev\nspring.cloud.nacos.config.extension-configs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>.refresh<span class=\"token operator\">=</span>true\n</code></pre>\n<ul><li><font color=\"red\">⑩②. 总结:如何使用Nacos作为配置中心统一管理配置</font></li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>. 引入依赖\n\t <span class=\"token operator\">&lt;</span>dependency<span class=\"token operator\">&gt;</span>\n\t\t <span class=\"token operator\">&lt;</span>groupId<span class=\"token operator\">&gt;</span>com.alibaba.cloud<span class=\"token operator\">&lt;</span>/groupId<span class=\"token operator\">&gt;</span>\n\t\t <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class=\"token operator\">&lt;</span>/artifactId<span class=\"token operator\">&gt;</span>\n\t <span class=\"token operator\">&lt;</span>/dependency<span class=\"token operator\">&gt;</span>\n <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>. 创建一个bootstrap.properties。\n\t spring.application.name<span class=\"token operator\">=</span>gulimall-coupon\n\t spring.cloud.nacos.config.server-addr<span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1:8848\n <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>. 需要给配置中心默认添加一个叫数据集<span class=\"token punctuation\">(</span>Data Id<span class=\"token punctuation\">)</span>gulimall-coupon.properties。默认规则,应用名.properties\n <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>. 给应用名.properties 添加任何配置\n <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>. 动态获取配置。\n\t @RefreshScope:动态获取并刷新配置\n\t @Value<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token variable\">${配置项的名}</span>\"</span><span class=\"token punctuation\">)</span>:获取到配置。\n\t 如果配置中心和当前应用的配置文件中都配置了相同的项,优先使用配置中心的配置。\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}