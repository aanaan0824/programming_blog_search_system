{"blogid": "126610347", "writerAge": "码龄12年", "writerBlogNum": "17", "writerCollect": "48", "writerComment": "13", "writerFan": "9", "writerGrade": "3级", "writerIntegral": "781", "writerName": "Elwin Wong", "writerProfileAdress": "writer_image\\profile_126610347.jpg", "writerRankTotal": "24825", "writerRankWeekly": "17536", "writerThumb": "32", "writerVisitNum": "58663", "blog_read_count": "297", "blog_time": "于 2022-08-30 19:31:43 发布", "blog_title": "CentOS上安装Docker", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_2\">前期准备</a></li><li><ul><li><a href=\"#_4\">系统要求</a></li><li><a href=\"#docker_17\">卸载旧版本的docker</a></li></ul>\n</li><li><a href=\"#_35\">安装方法</a></li><li><ul><li><a href=\"#_45\">使用仓库安装</a></li><li><ul><li><a href=\"#_49\">设置仓库</a></li><li><a href=\"#Docker_71\">安装Docker引擎</a></li><li><a href=\"#Docker_124\">更新Docker引擎</a></li></ul>\n</li><li><a href=\"#_128\">从软件包安装</a></li><li><ul><li><a href=\"#Docker_132\">安装Docker引擎</a></li><li><a href=\"#Docker_145\">更新Docker引擎</a></li></ul>\n</li><li><a href=\"#_154\">使用便捷脚本安装</a></li></ul>\n</li><li><a href=\"#Docker_177\">Docker启动和停止</a></li><li><ul><li><a href=\"#_179\">启动和验证</a></li><li><ul><li><a href=\"#Docker_181\">启动Docker</a></li><li><a href=\"#Docker_Engine_192\">验证Docker Engine是否正确安装</a></li></ul>\n</li><li><a href=\"#_205\">停止</a></li></ul>\n</li><li><a href=\"#Docker_253\">卸载Docker引擎</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_2\"></a>前期准备</h2>\n<h3><a id=\"_4\"></a>系统要求</h3>\n<ul><li> <p>CentOS版本：CentOS 7、CentOS Stream 8或CentOS Stream 9，在这里我们用的是CentOS Stream 9</p> </li><li> <p><code>centos-extras</code>仓库必须是激活的。默认情况下，该仓库是激活的，可验证如下：</p> <p> 使用命令<code>vim /etc/yum.repos.d/centos-addons.repo</code>查看yum仓库的配置文件，查看<code>[extras-common]</code>仓库下面对应的<code>enabled</code>的值，如果是1，则该仓库是激活状态，如果是0，则该仓库是非激活状态，需要将0改为1，设置为激活状态，如下图所示：</p> <p><img alt=\"在这里插入图片描述\" src=\"image\\b4573fa72ce9429a8cd78f2b115c9d14.png\"/></p> </li><li> <p>推荐使用<code>overlay2</code>存储驱动，大部分的Linux系统都支持</p> </li></ul>\n<h3><a id=\"docker_17\"></a>卸载旧版本的docker</h3>\n<p>虽然我们目前用的虚拟机操作系统CentOS Stream 9没有安装过Docker，但是为了完整性，也有可能有些人是安装过旧版本的Docker，所以还是有必要加上这块内容。早期版本的Docker被称为<code>docker</code>或<code>docker-engine</code>，如果之前安装过，执行下面的命令将它们以及相关的依赖项卸载掉：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> yum remove <span class=\"token function\">docker</span> <span class=\"token punctuation\">\\</span>\n                  docker-client <span class=\"token punctuation\">\\</span>\n                  docker-client-latest <span class=\"token punctuation\">\\</span>\n                  docker-common <span class=\"token punctuation\">\\</span>\n                  docker-latest <span class=\"token punctuation\">\\</span>\n                  docker-latest-logrotate <span class=\"token punctuation\">\\</span>\n                  docker-logrotate <span class=\"token punctuation\">\\</span>\n                  docker-engine\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\61b346a7f16a43f8b33e73300a9224ed.png\"/></p>\n<h2><a id=\"_35\"></a>安装方法</h2>\n<p>根据不同的需求，安装Docker引擎有几种不同的方式：</p>\n<ul><li> <p>比较推荐的方法是设置Docker的仓库并从中获取安装包并安装，这是比较简单的，也便于后续的升级。</p> </li><li> <p>通过下载RPM包手动安装，并完全手动管理升级。这对于在无法联网的环境中安装Docker等情况非常有用。</p> </li><li> <p>在测试和开发环境，可以通过官方提供的安装脚本安装Docker</p> </li></ul>\n<h3><a id=\"_45\"></a>使用仓库安装</h3>\n<p>当你在新的主机上第一次安装Docker引擎之前，需要先设置好Docker仓库，之后就可以从这个仓库安装和升级Docker。</p>\n<h4><a id=\"_49\"></a>设置仓库</h4>\n<ol><li> <p>安装<code>yum-utils</code>包，它提供了<code>yum-config-manager</code>的功能，可以管理<code>yum</code>的配置</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y yum-utils\n</code></pre> <p><img alt=\"在这里插入图片描述\" src=\"image\\7b4e6c3c15134bdb9b201e7c313c2c15.png\"/></p> </li><li> <p>添加Docker仓库</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre> <p><img alt=\"在这里插入图片描述\" src=\"image\\f1b85e7892854a01ba6dbdb5453a54ed.png\"/></p> <p>可以看到yum仓库目录下多了一个docker仓库的配置文件</p> </li></ol>\n<h4><a id=\"Docker_71\"></a>安装Docker引擎</h4>\n<p>可以选择安装最新版本或指定版本的Dokcer：</p>\n<ul><li> <p>安装最新版本的Docker Engine、containerd（容器服务）、Docker Compose</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io docker-compose-plugin\n</code></pre> <p>直接执行上述命令可能会出现错误，该错误指出我们要安装的包跟系统中已经安装的包<code>buildah</code>有冲突，如下所示：</p> <p><img alt=\"在这里插入图片描述\" src=\"image\\39f27176a6754584bd2de03bb0ac214d.png\"/></p> <p>根据提示，在命令中添加<code>--allowerasing</code>参数，该参数指允许擦除已安装的软件包以解决依赖关系和包冲突问题：</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> --allowerasing docker-ce docker-ce-cli containerd.io docker-compose-plugin\n</code></pre> <p><img alt=\"在这里插入图片描述\" src=\"image\\1e137f759eda40ce814645a5d43c0b8a.png\"/></p> <p>接下来会提示是否接受GPG密钥，需要验证其指纹是否为<code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，如果是就可以。这里一般也不会有说明问题，直接输入y继续安装就可以</p> <p><img alt=\"在这里插入图片描述\" src=\"image\\cb97e5a5c7794e6aa4fd9f964d7ebef9.png\"/></p> <p>安装成功</p> <p><img alt=\"在这里插入图片描述\" src=\"image\\9634a73e81414a6aab3da397310d065c.png\"/></p> </li><li> <p>安装指定版本的Docker</p>\n<ol><li> <p>列出仓库中可用的Docker版本</p> <pre><code class=\"prism language-bash\">yum list docker-ce --showduplicates\n</code></pre> <p><img alt=\"在这里插入图片描述\" src=\"image\\4fb600a58c7b41e6ae16b03a78034e42.png\"/></p> </li><li> <p>安装指定版本</p> <p>通过完全限定包名（包名<code>docker-ce</code>加上版本号）可以安装指定版本的Docker，包名和版本号之间用<code>-</code>连接，版本号为上图红色框中的字符串，例如：<code>docker-ce-20.10.17</code>。安装命令如下：</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> docker-ce-<span class=\"token operator\">&lt;</span>VERSION_STRING<span class=\"token operator\">&gt;</span> docker-ce-cli-<span class=\"token operator\">&lt;</span>VERSION_STRING<span class=\"token operator\">&gt;</span> containerd.io docker-compose-plugin\n</code></pre> </li></ol> </li></ul>\n<h4><a id=\"Docker_124\"></a>更新Docker引擎</h4>\n<p>更新Docker Engine时，只需按照上面的安装说明，选择想要的版本进行安装就可以了。</p>\n<h3><a id=\"_128\"></a>从软件包安装</h3>\n<p>如果你无法使用Docker的存储库来安装Docker，你可以根据你的CentOS系统的发行版下载对应的<code>.rpm</code>文件并手动安装。以后每次需要升级Docker引擎时，都需要下载新文件进行安装升级。</p>\n<h4><a id=\"Docker_132\"></a>安装Docker引擎</h4>\n<ol><li> <p>访问<a href=\"https://download.docker.com/linux/centos/\" title=\"https://download.docker.com/linux/centos/\">https://download.docker.com/linux/centos/</a>，选择CentOS的版本（我这里是9），然后进入到<code>x86_64/stable/Packages/</code>目录下，下载你想要安装的Docker版本对应的<code>.rpm</code>文件。</p> <p><img alt=\"在这里插入图片描述\" src=\"image\\422fe85dc7c64c9b90fa60bd98dddcc1.png\"/></p> </li><li> <p>安装Docker Engine</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> /path/to/package.rpm\n</code></pre> </li></ol>\n<h4><a id=\"Docker_145\"></a>更新Docker引擎</h4>\n<p>更新Docker Engine时，需要下载新版本的软件包文件，将<code>yum install</code>替换为<code>yum upgrade</code>并使用新的软件包文件，其他步骤跟上面的一样</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> yum upgrade /path/to/new_package.rpm\n\n</code></pre>\n<h3><a id=\"_154\"></a>使用便捷脚本安装</h3>\n<p>Docker在<a href=\"http://get.docker.com\" title=\"get.docker.com\">get.docker.com</a>提供了一个方便的脚本，用于快速、非交互式地将Docker安装到开发环境，但是不建议在生产环境中使用这个脚本安装。</p>\n<p>你可以使用<code>DRY_RUN=1</code>选项运行这个脚本，这样可以在真正运行之前看看这个脚本在安装过程中会执行哪些步骤：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">curl</span> -fsSL https://get.docker.com -o get-docker.sh\n<span class=\"token assign-left variable\">DRY_RUN</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token function\">sh</span> ./get-docker.sh\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0437716ad21c4ec58b9b788a313127e7.png\"/></p>\n<p>因为我们已经安装了Docker，所以输出中会有相应的提示。根据这个提示信息，我们了解到，如果系统中已经安装了Docker，那么使用这个脚本安装或更新Docker会导致一些问题，除非系统中的Docker也是使用这个脚本安装的。也就是说如果当前系统已经安装了Docker并且是用这个脚本安装的，那么可以再次使用这个脚本更新，否则可能会出现无法预料的问题。</p>\n<p>下面的命令从<a href=\"http://get.docker.com\" title=\"get.docker.com\">get.docker.com</a>下载脚本并运行这个脚本，安装最新稳定版的Docker：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">curl</span> -fsSL https://get.docker.com -o get-docker.sh\n<span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> get-docker.sh\n</code></pre>\n<h2><a id=\"Docker_177\"></a>Docker启动和停止</h2>\n<h3><a id=\"_179\"></a>启动和验证</h3>\n<h4><a id=\"Docker_181\"></a>启动Docker</h4>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ed7dbc1a20974f3788e5358bbc3f9b1d.png\"/></p>\n<p>可以看到Docker服务已经启动运行了。</p>\n<h4><a id=\"Docker_Engine_192\"></a>验证Docker Engine是否正确安装</h4>\n<p>通过运行<code>hello-world</code>镜像验证Docker Engine是否正确安装：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> run hello-world\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d1f01ec2fe2f4723bb657d7db2de950d.png\"/></p>\n<p>输出上面的信息，说明我们正确安装了Docker，并且可以正常地运行和工作了。</p>\n<h3><a id=\"_205\"></a>停止</h3>\n<p>我们先用下面的命令尝试停止Docker看看：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> systemctl stop <span class=\"token function\">docker</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c41da1bde42a44dfac499929b1b817f0.png\"/></p>\n<p>可以看到输出一条警告信息：</p>\n<pre><code class=\"prism language-text\">Warning: Stopping docker.service, but it can still be activated by:\n  docker.socket\n</code></pre>\n<p>意思是说<code>docker.service</code>已经停止了，但是它仍然可以通过<code>docker.socket</code>被激活。查看docker的状态，确实是属于非活跃的状态。另外注意到下面有绿色圆点的那一行<code>TriggeredBy: ● docker.socket</code>，表示通过<code>docker.socket</code>触发，跟上面的警告信息其实是同一个意思。而<code>docker.socket</code>是用于和docker client进行通信的文件，所以推测当docker client重新发起请求，也就是我们再执行docker命令时，docker服务又会被激活，我们看看是不是这么回事。</p>\n<p>先执行一个docker命令：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 查看本机拉取的镜像，可以看到我们之前拉取过的hello-world的镜像</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> images\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3c989a8602024525aba9d8825f356d22.png\"/></p>\n<p>再查看docker的状态：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9e7e5172b40942d8b3ca626d0251050e.png\"/></p>\n<p>可以看到docker服务又变成活跃状态了，说明当客户端有请求时会连接<code>docker.socket</code>，这个时候docker就会被<code>docker.socket</code>触发激活来响应客户端的请求。</p>\n<p>那么如果要完全停止docker，不想它被重新激活应该怎么做，其实只要把<code>docker.service</code>、<code>docker.socket</code>都停掉就可以了：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> systemctl stop docker.service docker.socket\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\97ed81fabcb1400ebd7fd7562fddd8f8.png\"/></p>\n<p>从上图可以看到docker状态为非活跃状态，<code>docker.socket</code>前面的圆点也不是绿色的了，说明它也被停止了，执行命令<code>sudo docker images</code>后输出的信息也表明，docker已经停止运行无法连接了。</p>\n<h2><a id=\"Docker_253\"></a>卸载Docker引擎</h2>\n<ol><li> <p>卸载Docker Engine、CLI、Containerd和Docker Compose软件包：</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin\n</code></pre> </li><li> <p>在主机上的镜像、容器、卷和自定义的配置文件等不会自动删除，执行下面的命令删除所有的镜像、容器和卷，任何编辑过的配置文件也必须手动删除：</p> <pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf /var/lib/docker\n<span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf /var/lib/containerd\n</code></pre> </li></ol>\n<blockquote>\n<p>📌备注：本文主要参考<a href=\"https://docs.docker.com/engine/install/centos/\" title=\"官方的docker安装文档\">官方的docker安装文档</a></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}