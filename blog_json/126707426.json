{"blogid": "126707426", "writerAge": "码龄6年", "writerBlogNum": "285", "writerCollect": "683", "writerComment": "103", "writerFan": "398", "writerGrade": "6级", "writerIntegral": "4944", "writerName": "Kiopler", "writerProfileAdress": "writer_image\\profile_126707426.jpg", "writerRankTotal": "24802", "writerRankWeekly": "11151", "writerThumb": "193", "writerVisitNum": "271595", "blog_read_count": "68", "blog_time": "于 2022-09-05 16:12:09 发布", "blog_title": "KMP算法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>KMP算法中最核心的一个思想就是回溯。理解该算法的难点就在于回溯到哪个位置, 为什么要回溯到这个位置。</p>\n<p>首先, 来看一个例子, 这个例子中两串字符串, 上面的称为串A简称A, 下面的称串B简称B, 编程的目标是要从A中匹配B, 并返回A中匹配到的B位于A中的索引。</p>\n<p>可以看到A和B的前6个字母完全相同, 第7个字符不相同<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b2fa23ee9b534b44ac92f4d302aaf58f.png\"/><br/> 按照普通的匹配算法, 下面应该继续按照如下图所示:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0ed94965fcbe437ab10762f3898749a9.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\dedb85958be2405da21d1dc3f467b76b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a1fe9eef029d4c6f837aef93386067e8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\42cda0efa12d4547bdf9e84683ee329f.png\"/><br/> 来分析一下上面4个步骤，其是否有必要性。</p>\n<p>看下面这张图, 串B索引0与索引从1-3的字符完全不相等。也就是说前4个字符是完全不同的4个字母, 且串B的前4个字符与串A一一对应且相等。由于串B前4字符各不相同且与串A一一对应, 那上图步骤1-3中就没任何意义。就相当于串B索引0分别和自己的索引1-3进行对比, 显然都不可能相等的。可以直接省略<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1d90de4246e44292b3d7deb3cd931f4a.png\"/><br/> 按照上图所示, 前面4个字符不需要比较, 直接从A串的索引4即第5个字符开始匹配。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ddc687283ebb4a809e43bf3717cea9a1.png\"/><br/> 串B和串A的匹配为何从串B的索引0与串A的索引4开始呢? 下图中可以发现串B中索引0, 1与索引4, 5是对称的。而串B的索引4, 5与串A的索引4, 5又是相等的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1da2776d075b4d3190a1d51f34d86106.png\"/><br/> 但是串A的索引6与串B的索引2还没有进行对比，这是有可能相同的。看看下图红框中的两次匹配。这两次匹配是否有必要呢?这是没必要的, 因为B串中的索引0, 1和索引4, 5相同。而B串的索引4, 5又和A串的索引4, 5相同。这就可以推出B串的索引0, 1与A串的索引4, 5相同。所以可以直接从B串的索引2与A串的索引6开始匹配。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ddc687283ebb4a809e43bf3717cea9a1.png\"/><br/> 上面就是为什么回溯, 回溯到哪里的分析。所以可以知道B内必须要有对称的字符才行。通过这种规律, 可以找到一个对应于模式串的回溯数组, 称作next数组, 该数组内装着的都是B串该回溯到哪个位置, A串永远不会回溯只会往前走。</p>\n<p>实际上该回溯的本质就是由于有对称内容且之前的字符各不相等, 只要从对称的地方后面开始匹配即可。为了寻找这个next数组，我们需要找到其中对称的内容, 来看一下对称的极端情况:如果蓝线和绿线所覆盖的内容相同, 则这就是最极端的对称情况。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\30eb1650975c4199b47fef0a3bb3b501.png\"/><br/> 为了寻找对称情况, 我们可以这样来扫描, 首先可以知道索引0是无法回溯的, 因为它是第一个, 所以索引0回溯到的地方还是索引0, 在next数组中就体现在next[0] = 0<br/> <img alt=\"在这里插入图片描述\" src=\"image\\55be6afba4964aea994eda00e9109d41.png\"/><br/> 来看一下寻找next数组的cpp代码。<br/> 解释一下:</p>\n<ol><li>如果str[i]和str[j]相等代表至少有1个字符对称, 并且会继续匹配下去</li><li>看如下图, 由于ab两个字母是对称的而c和d不同, 如果该串和另一个串进行匹配, 假设那个串叫C, 索引0~5都相同, 但索引6不同时, 这就意味着可以让C直接和这个串的索引2开始比较。也就是说next[5] = 2, 一旦该串的索引6匹配失败, 可以直接回溯到next[6 - 1]即next[5]也就是2。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7893a25bc9094b0eade0fa486b02f844.png\"/></li></ol>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">vecNext</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tj <span class=\"token operator\">=</span> vecNext<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tvecNext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>  \n\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>vecNext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>有了next数组, KMP算法就很简单了, 只是把回溯值变成next数组内的值:</p>\n<pre><code class=\"prism language-cpp\">  <span class=\"token keyword\">int</span> <span class=\"token function\">KMP</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string t<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> next<span class=\"token punctuation\">;</span>\n    \n    \tnext <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    \t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">{<!-- --></span>\n    \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token punctuation\">{<!-- --></span>\n    \t\t\t<span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n    \t\t\t<span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token punctuation\">}</span>\n    \t\t<span class=\"token keyword\">else</span>\n    \t\t<span class=\"token punctuation\">{<!-- --></span>\n    \t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token punctuation\">{<!-- --></span>\n    \t\t\t\tj <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \t\t\t<span class=\"token punctuation\">}</span>\n    \t\t\t<span class=\"token keyword\">else</span>\n    \t\t\t<span class=\"token punctuation\">{<!-- --></span>\n    \t\t\t\t<span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n    \t\t\t<span class=\"token punctuation\">}</span>\n    \t\t<span class=\"token punctuation\">}</span>\n    \t<span class=\"token punctuation\">}</span>\n    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token punctuation\">{<!-- --></span>\n    \t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">}</span>\n    \t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}