{"blogid": "124318184", "writerAge": "码龄2年", "writerBlogNum": "17", "writerCollect": "401", "writerComment": "413", "writerFan": "1172", "writerGrade": "4级", "writerIntegral": "1469", "writerName": "白杨Cc", "writerProfileAdress": "writer_image\\profile_124318184.jpg", "writerRankTotal": "17790", "writerRankWeekly": "163820", "writerThumb": "492", "writerVisitNum": "13950", "blog_read_count": "2765", "blog_time": "于 2022-04-21 13:17:36 发布", "blog_title": "【C语言进阶】⑥函数指针详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>一、函数指针</h2>\n<h3><a id=\"1_1\"></a>1.概念</h3>\n<blockquote>\n<p><strong>函数指针</strong>：首先它是一个指针，一个指向函数的指针，在内存空间中存放的是函数的地址；</p>\n</blockquote>\n<p>请看示例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//取出数组的地址</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n｝\n</code></pre>\n<p>解析：parr是一个指向数组的指针，存放的是数组的地址；</p>\n<blockquote>\n<p>所以：</p>\n<ul><li><strong>数组指针 —存放数组地址的指针；</strong></li><li><strong>&amp;数组名 —得到的就是数组的地址；</strong></li></ul>\n</blockquote>\n<p>那么我们可以不可以这么认为：</p>\n<blockquote>\n<ul><li><strong>函数指针 —存放函数地址的指针；</strong></li><li><strong>&amp;函数名 —得到的就是一个函数的地址；</strong></li></ul>\n</blockquote>\n<p>是这样吗？我们来测试一下，请看下面事例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x，<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印一下函数Add()的地址</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span>Add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数组名等于数组首元素地址，那函数名是等于函数地址吗？</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>请看结果：</p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b351250d05fc4c04927355bd7123793a.png\"/><br/> 哦！原来，<strong>函数名是等于函数地址</strong>的！</p>\n</blockquote>\n<h3><a id=\"12_43\"></a>1.2函数指针的使用方法</h3>\n<blockquote>\n<p><strong>函数指针的定义</strong>： 函数的返回值类型（*指针名）（函数的参数列表类型）</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n \t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Add<span class=\"token punctuation\">;</span><span class=\"token comment\">//函数指针定义，返回值类型和参数类型与函数Add（）相同</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"13_57\"></a>1.3练习巩固</h3>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n①<span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span>pt <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>test<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n请问①语句应该怎么完善呢？\n</code></pre>\n<p>答案：void ( * pt)(char*) = &amp;test;</p>\n<p><strong>怎么使用函数指针去调用函数呢？</strong><br/> 还是上面的例子:</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>Add<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ret<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>解析：<br/> int ret=(*pf)(3,5)，此时就相当于通过函数名调用： int ret=Add(3,5);}，我们又知道：<strong>函数名是等于&amp;函数名</strong>的，所以int (*pf)(int,int)=&amp;Add，可改成：int (*pf)(int,int)=Add;此时Add等价于pf，所以：int ret=(*pf)(3,5);语句可改成：int ret=pf(3,5);等价于int ret=Add(3,5)，故我们知道了对于：int ret=(*pf)(3,5);语句来说，*是没有意义的，有一个或多个或者没有都不影响；</p>\n</blockquote>\n<h3><a id=\"14_79\"></a>1.4小结一下</h3>\n<blockquote>\n<ul><li><mark>数组名</mark> (arr) <strong>!=</strong> <mark>&amp;数组名</mark>(&amp;arr)</li><li><mark>函数名</mark>(Add) = <mark>&amp;函数名</mark>(&amp;Add)</li></ul>\n</blockquote>\n<h2><a id=\"_83\"></a>二、阅读两段有趣的代码</h2>\n<p>注：来源于《c陷阱和缺陷》；</p>\n<h3><a id=\"1_void__0___85\"></a>1.( *(void( *)( ))0 )( )</h3>\n<blockquote>\n<p>解析：<br/> 这段代码的含义是：</p>\n<ol><li>调用0地址处的函数</li><li>该函数无参数，返回值是void</li><li>拆分：<br/> ●void(<em>)() 表示函数指针类型<br/> ●( void(</em>)() )0 表示对0进行强制类型转换，把0强制类型转换成一个函数的地址；如（int）3.14<br/> ●* ( void(<em>)() )0 表示对0地址处的函数进行了解引用操作<br/> ●（</em> ( void(*)() )0)() 则表示调用0地址处的函数</li><li>请看图解：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c7325616c6384c52833de23a4c57c7db.png\"/></li></ol>\n</blockquote>\n<h3><a id=\"2void__signalintvoid___int___int_98\"></a>2.void (* signal(int,void( * )( int ) ) )(int)</h3>\n<blockquote>\n<p>解析：</p>\n<ol><li>signal和（）先结合，说明signal是一个函数名</li><li>signal函数第一个参数的类型为int，第二个参数的类型为函数指针，该函数指针指向一个参数为int，返回值为void的函数；</li><li>signal 函数的返回类型也是一个函数指针，该函数指针，指向一个参数为int，返回值为void函数<br/> 4.请看图解：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0315f3f3570f4a17bea7435baf05a749.png\"/></li></ol>\n</blockquote>\n<blockquote>\n<p><strong>综上，signal是一个函数声明</strong>；</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}