{"blogid": "124828868", "writerAge": "码龄6年", "writerBlogNum": "14", "writerCollect": "93", "writerComment": "134", "writerFan": "19", "writerGrade": "2级", "writerIntegral": "374", "writerName": "qq_34496674", "writerProfileAdress": "writer_image\\profile_124828868.jpg", "writerRankTotal": "71229", "writerRankWeekly": "237031", "writerThumb": "16", "writerVisitNum": "17905", "blog_read_count": "3032", "blog_time": "已于 2022-05-30 19:50:44 修改", "blog_title": "yolov5的head修改为decouple head", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"yolov5headdecouple_head_0\"></a>yolov5的head修改为decouple head</h1>\n<p>yolox的decoupled head结构</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a35278ef8c6940d284fc953bc097035f.png\"/><br/> 本来想将yolov5的head修改为decoupled head，与yolox的decouple head对齐，但是没注意，该成了如下结构：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e78eca2d10ba4684bd5b0e6cc0d4684c.png\"/></p>\n<p>感谢<strong>少年肩上杨柳依依</strong>的指出，如还有问题欢迎指出<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d2769894413c4403b598f52cfe25145e.png\"/></p>\n<p>1.修改models下的yolo.py文件中的Detect</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Detect</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stride <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># strides computed during build</span>\n    onnx_dynamic <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># ONNX export parameter</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nc<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> anchors<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ch<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># detection layer</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>nc <span class=\"token operator\">=</span> nc  <span class=\"token comment\"># number of classes</span>\n        self<span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> nc <span class=\"token operator\">+</span> <span class=\"token number\">5</span>  <span class=\"token comment\"># number of outputs per anchor</span>\n        self<span class=\"token punctuation\">.</span>nl <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>anchors<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of detection layers</span>\n        self<span class=\"token punctuation\">.</span>na <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>anchors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>  <span class=\"token comment\"># number of anchors</span>\n        self<span class=\"token punctuation\">.</span>grid <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>nl  <span class=\"token comment\"># init grid</span>\n        self<span class=\"token punctuation\">.</span>anchor_grid <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>nl  <span class=\"token comment\"># init anchor grid</span>\n        self<span class=\"token punctuation\">.</span>register_buffer<span class=\"token punctuation\">(</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>anchors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>nl<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># shape(nl,na,2)</span>\n        <span class=\"token comment\"># self.m = nn.ModuleList(nn.Conv2d(x, self.no * self.na, 1) for x in ch)  # output conv</span>\n        self<span class=\"token punctuation\">.</span>m_box <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>na<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> ch<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># output conv</span>\n        self<span class=\"token punctuation\">.</span>m_conf <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>na<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> ch<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># output conv</span>\n        self<span class=\"token punctuation\">.</span>m_labels <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>nc <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>na<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> ch<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># output conv</span>\n        self<span class=\"token punctuation\">.</span>base_conv <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span>BaseConv<span class=\"token punctuation\">(</span>in_channels <span class=\"token operator\">=</span> x<span class=\"token punctuation\">,</span> out_channels <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> ksize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> ch<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cls_convs <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span>BaseConv<span class=\"token punctuation\">(</span>in_channels <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> out_channels <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> ksize <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> ch<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>reg_convs <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span>BaseConv<span class=\"token punctuation\">(</span>in_channels <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> out_channels <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> ksize <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> ch<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># self.m = nn.ModuleList(nn.Conv2d(x, 4 * self.na, 1) for x in ch, nn.Conv2d(x, 1 * self.na, 1) for x in ch,nn.Conv2d(x, self.nc * self.na, 1) for x in ch)</span>\n        self<span class=\"token punctuation\">.</span>inplace <span class=\"token operator\">=</span> inplace  <span class=\"token comment\"># use in-place ops (e.g. slice assignment)self.ch = ch</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        z <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># inference output</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>nl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># # x[i] = self.m[i](x[i])  # convs</span>\n            <span class=\"token comment\"># print(\"&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;\", i)</span>\n            <span class=\"token comment\"># print(x[i].shape)</span>\n            <span class=\"token comment\"># print(self.base_conv[i])</span>\n            <span class=\"token comment\"># print(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")</span>\n            \n            \n            \n            x_feature <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>base_conv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># x_feature = x[i]</span>\n            \n            cls_feature <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cls_convs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>x_feature<span class=\"token punctuation\">)</span>\n            reg_feature <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>reg_convs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>x_feature<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># reg_feature = x_feature</span>\n            \n            m_box <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>m_box<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>reg_feature<span class=\"token punctuation\">)</span>\n            m_conf <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>m_conf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>reg_feature<span class=\"token punctuation\">)</span>\n            m_labels <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>m_labels<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>cls_feature<span class=\"token punctuation\">)</span>\n            x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m_box<span class=\"token punctuation\">,</span>m_conf<span class=\"token punctuation\">,</span> m_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            bs<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> nx <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape  <span class=\"token comment\"># x(bs,255,20,20) to x(bs,3,20,20,85)</span>\n            x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>na<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> nx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contiguous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>training<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># inference</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>onnx_dynamic <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>anchor_grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_make_grid<span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n                y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>inplace<span class=\"token punctuation\">:</span>\n                    y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># xy</span>\n                    y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>anchor_grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># wh</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># for YOLOv5 on AWS Inferentia https://github.com/ultralytics/yolov5/pull/2953</span>\n                    xy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># xy</span>\n                    wh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>anchor_grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># wh</span>\n                    y <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xy<span class=\"token punctuation\">,</span> wh<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                z<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> x <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>training <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>2.在yolo.py中添加</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_activation</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"silu\"</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"silu\"</span><span class=\"token punctuation\">:</span>\n        module <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>SiLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span>inplace<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"relu\"</span><span class=\"token punctuation\">:</span>\n        module <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span>inplace<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"lrelu\"</span><span class=\"token punctuation\">:</span>\n        module <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>LeakyReLU<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span>inplace<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> AttributeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Unsupported act type: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> module\n\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseConv</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"A Conv2d -&gt; Batchnorm -&gt; silu/leaky relu block\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>\n        self<span class=\"token punctuation\">,</span> in_channels<span class=\"token punctuation\">,</span> out_channels<span class=\"token punctuation\">,</span> ksize<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> groups<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> act<span class=\"token operator\">=</span><span class=\"token string\">\"silu\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># same padding</span>\n        pad <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ksize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        self<span class=\"token punctuation\">.</span>conv <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>\n            in_channels<span class=\"token punctuation\">,</span>\n            out_channels<span class=\"token punctuation\">,</span>\n            kernel_size<span class=\"token operator\">=</span>ksize<span class=\"token punctuation\">,</span>\n            stride<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span>\n            padding<span class=\"token operator\">=</span>pad<span class=\"token punctuation\">,</span>\n            groups<span class=\"token operator\">=</span>groups<span class=\"token punctuation\">,</span>\n            bias<span class=\"token operator\">=</span>bias<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>out_channels<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>act <span class=\"token operator\">=</span> get_activation<span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># print(self.bn(self.conv(x)).shape)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>act<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bn<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># return self.bn(self.conv(x))</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fuseforward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>act<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>decouple head的特点：<br/> <strong>由于训练模型时，应该是channels = 256的地方改成了channels = x(失误)，所以在decoupled head的部分参数量比yolox要大一些，以下的结果是在channels= x的情况下得出</strong><br/> 比yolov5s参数多，计算量大，在我自己的2.5万的数据量下map提升了3%多<br/> 1.模型给出的目标cls较高，需要将conf的阈值设置较大（0.5），不然准确率较低</p>\n<pre><code class=\"prism language-python\">parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--conf-thres'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'confidence threshold'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>2.对于少样本的检测效果较好，召回率的提升比准确率多<br/> 3.在conf设置为0.25时，召回率比yolov5s高，但是准确率低；在conf设置为0.5时，召回率与准确率比yolov5s高<br/> 4.比yolov5s参数多，计算量大，在2.5万的数据量下map提升了3%多</p>\n<h2><a id=\"decouple_head_146\"></a>对于decouple head的改进</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b1252b18687646a6901c263e60ea5581.png\"/><br/> 改进：<br/> 1.将红色框中的conv去掉，缩小参数量和计算量；<br/> 2.channels =256 ，512 ，1024是考虑不增加参数，不进行featuremap的信息压缩</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Detect</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stride <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># strides computed during build</span>\n    onnx_dynamic <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># ONNX export parameter</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nc<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> anchors<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ch<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># detection layer</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>nc <span class=\"token operator\">=</span> nc  <span class=\"token comment\"># number of classes</span>\n        self<span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> nc <span class=\"token operator\">+</span> <span class=\"token number\">5</span>  <span class=\"token comment\"># number of outputs per anchor</span>\n        self<span class=\"token punctuation\">.</span>nl <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>anchors<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># number of detection layers</span>\n        self<span class=\"token punctuation\">.</span>na <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>anchors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>  <span class=\"token comment\"># number of anchors</span>\n        self<span class=\"token punctuation\">.</span>grid <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>nl  <span class=\"token comment\"># init grid</span>\n        self<span class=\"token punctuation\">.</span>anchor_grid <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>nl  <span class=\"token comment\"># init anchor grid</span>\n        self<span class=\"token punctuation\">.</span>register_buffer<span class=\"token punctuation\">(</span><span class=\"token string\">'anchors'</span><span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>anchors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>nl<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># shape(nl,na,2)</span>\n        self<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>no <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>na<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> ch<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># output conv</span>\n        self<span class=\"token punctuation\">.</span>inplace <span class=\"token operator\">=</span> inplace  <span class=\"token comment\"># use in-place ops (e.g. slice assignment)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        z <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># inference output</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>nl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># conv</span>\n            bs<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> nx <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape  <span class=\"token comment\"># x(bs,255,20,20) to x(bs,3,20,20,85)</span>\n            x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>na<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> nx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contiguous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>training<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># inference</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>onnx_dynamic <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>anchor_grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_make_grid<span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n                y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>inplace<span class=\"token punctuation\">:</span>\n                    y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># xy</span>\n                    y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>anchor_grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># wh</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># for YOLOv5 on AWS Inferentia https://github.com/ultralytics/yolov5/pull/2953</span>\n                    xy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># xy</span>\n                    wh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>anchor_grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># wh</span>\n                    y <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xy<span class=\"token punctuation\">,</span> wh<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                z<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> x <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>training <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>特点<br/> 1.模型给出的目标cls较高，需要将conf的阈值设置较大（0.4），不然准确率较低<br/> 2.对于少样本的检测效果较好，准确率的提升比召回率多<br/> 3. 准确率的提升比召回率多，<br/> 该改进不如上面的模型提升多，但是参数量小，计算量小少9Gflop，占用显存少</p>\n<p>decoupled head指标提升的原因：由于yolov5s原本的head不能完全的提取featuremap中的信息，decoupled head能够较为充分的提取featuremap的信息；</p>\n<h2><a id=\"_202\"></a>疑问</h2>\n<p><strong>为什么decoupled head目标的cls会比较高，没想明白<br/> 为什么去掉base_conv，召回率要比准确率提升少</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}