{"blogid": "124102955", "writerAge": "码龄4年", "writerBlogNum": "34", "writerCollect": "259", "writerComment": "18", "writerFan": "2591", "writerGrade": "3级", "writerIntegral": "413", "writerName": "czy1219", "writerProfileAdress": "writer_image\\profile_124102955.jpg", "writerRankTotal": "52589", "writerRankWeekly": "7581", "writerThumb": "56", "writerVisitNum": "61271", "blog_read_count": "3716", "blog_time": "于 2022-04-11 16:47:41 发布", "blog_title": "C++之列表初始化详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>1、列表初始化的规则</strong></p>\n<p>在C++11中可以直接在变量名后面加上初始化列表来进行对象的初始化。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    A <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    A c <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">123</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    A d<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">123</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c++11</span>\n\n    <span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">123</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">123</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c++11</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>聚合类型可以进行直接列表初始化，那么什么是聚合类呢？</p>\n<p>（1）类型是一个普通数组，如int[5]，char[]，double[]等</p>\n<p>（2）类型是一个类，且满足以下条件：</p>\n<ul><li>没有用户声明的构造函数</li><li>没有用户提供的构造函数(允许显示预置或弃置的构造函数)</li><li>没有私有或保护的非静态数据成员</li><li>没有基类</li><li>没有虚函数</li><li>没有{}和=直接初始化的非静态数据成员</li><li>没有默认成员初始化器</li></ul>\n<p>文字难以琢磨可以看下面例子帮助理解：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 有自定义的构造函数，不能列表初始化</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 含有虚函数，不是聚合类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span> \n    \n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 有基类，不是聚合类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">{<!-- --></span> \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 有等号初始化，不是聚合类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    \n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 含有私有的非静态数据成员，不是聚合类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 含有默认成员初始化器，不是聚合类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span> \n    \n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2、列表初始化的优点</strong></p>\n<p>（1）高效，减少调用构造函数的次数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 无参构造函数</span>\n\t<span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"This is Data constructor1\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 拷贝构造函数</span>\n\t<span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"This is Data constructor2\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 拷贝赋值构造函数</span>\n\tData<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"This is Data constructor3\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 低效写法</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Test1</span><span class=\"token punctuation\">(</span>Data data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>m_data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tData m_data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 高效写法</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Test2</span><span class=\"token punctuation\">(</span>Data data<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tData m_data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 更高效的写法</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test3</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Test3</span><span class=\"token punctuation\">(</span>Data<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tData m_data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n    Data a<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"---------------THIS IS TEST1---------------\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    Test1 <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"---------------THIS IS TEST2---------------\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    Test2 <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"---------------THIS IS TEST3---------------\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    Test3 <span class=\"token function\">t3</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n\t输出结果：\n\tThis is Data constructor1\n\t---------------THIS IS TEST1---------------\n\tThis is Data constructor2\n\tThis is Data constructor1\n\tThis is Data constructor3\n\t---------------THIS IS TEST2---------------\n\tThis is Data constructor2\n\tThis is Data constructor2\n\t---------------THIS IS TEST3---------------\n\tThis is Data constructor2\n\t\n\t（1）对于TEST1，没有使用列表初始化，所以其私有变量m_data是通过调用Data()定义的，所以会出现“This \tis Data constructor1”，而“This is Data constructor2”是在发生在参数传递调用的拷贝构造，最\t\t后“m_data = data”会发生拷贝赋值，从而调用“This is Data constructor3”\n\t（2）对于TEST2，“This is Data constructor2”也是在发生在参数传递调用的拷贝构造，而另外一次调用是\t发生在列表初始化“Test2(Data data) : m_data(data){}”\n\t（3）对于TEST3，则是TEST3的构造函数中参数使用了引用，就避免了参数传递而调用的拷贝构造，所以只有一次\t\t调用拷贝构造是发生在列表初始化的时候\n*/</span>\n</code></pre>\n<p>（2） 防止类型窄化，避免精度丢失的隐式类型转化</p>\n<p>C++11可使用 explicit 关键字对单参数的构造函数进行声明，让编译器无法进行隐式类型转换，但仅限于单参数或者其他参数有默认值的情况下使用。而列表初始化是禁止避免精度丢失的隐式类型转化，不像 explicit 禁止所有的隐式类型转换</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 浮点型到整型的转换</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1.2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\n\t\n    <span class=\"token comment\">// 整型到浮点型的转换</span>\n    <span class=\"token keyword\">float</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1e70</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n    <span class=\"token keyword\">float</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1e70</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\n\t\n\t<span class=\"token comment\">// char的枚举类型</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n    <span class=\"token keyword\">char</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\n\n    <span class=\"token keyword\">char</span> m <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok，m为'A'</span>\n    <span class=\"token keyword\">char</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>j<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok，因为是const类型，这里如果去掉const属性，也会报错</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（3）可以使用初始化列表接受任意长度的参数</p>\n<p>std::initializer_list，它可以接收任意长度的初始化列表，但是里面必须是相同类型T，或者都可以转换为T</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    \n    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span> \n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> vec<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}