{"blogid": "120605415", "writerAge": "码龄4年", "writerBlogNum": "342", "writerCollect": "2588", "writerComment": "412", "writerFan": "732", "writerGrade": "7级", "writerIntegral": "15768", "writerName": "Hello Bug.", "writerProfileAdress": "writer_image\\profile_120605415.jpg", "writerRankTotal": "707", "writerRankWeekly": "6867", "writerThumb": "1862", "writerVisitNum": "1131498", "blog_read_count": "5476", "blog_time": "于 2021-10-09 17:44:05 发布", "blog_title": "C#中的LINQ", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3>一：什么是LINQ</h3>\n<p>LINQ代表语言集成查询，是.net框架的扩展，它允许我们用SQL查询数据库的方式来查询数据的集合</p>\n<hr/>\n<h3>二：LINQ延迟查询的特性</h3>\n<p>延迟查询是指查询操作并不是在定义的时候执行，而是在遍历集合中的数据时才执行<br/> 因为作为yield迭代器的主体，只有使用foreach遍历执行到MoveNext时才会真正执行方法</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.Where((p) =&gt; p.Age &lt; 30);\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n\n        personList.Add(new Person() { Id = 4, Name = \"小赵\", Age = 15, Score = 100 });\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<hr/>\n<h3>三：扩展方法用法</h3>\n<blockquote>\n<p>Linq有两种写法，查询表达式写法(from.....in.....)和扩展方法写法，两种方法都是相互兼容的，程序编译时会将查询表达式转换为扩展方法，<span style=\"color:#fe2c24;\">只要实现了IEnumerable的接口就可以使用Linq的扩展方法</span></p>\n</blockquote>\n<p>——Select：返回指定类型</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.Select(p =&gt; p.Name);\n        var list = personList.Select(p =&gt; new { id = p.Id, name = p.Name });\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——Where：查询特定条件</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.Where((p) =&gt; p.Score &gt;= 80 &amp;&amp; p.Age &lt; 50);\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——OfType：查询特定数据类型 </p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;object&gt; objList = new List&lt;object&gt;()\n    {\n        \"test1\",\n        1,\n        1.34f,\n        \"test2\",\n    };\n\n    static void Main(string[] args)\n    {\n        var list = objList.OfType&lt;string&gt;();\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——Join：将一个集合与另一个集合通过指定键合并，返回合并后的集合</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n    static List&lt;Reward&gt; rewardList = new List&lt;Reward&gt;()\n    {\n        new Reward(){ Id=1,Score=100,RewardName=\"奖励1\"},\n        new Reward(){ Id=2,Score=80,RewardName=\"奖励2\"},\n        new Reward(){ Id=3,Score=60,RewardName=\"奖励3\"},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.Join(rewardList, p =&gt; p.Score, r =&gt; r.Score, (p, r) =&gt; new { pList = p, rList = r });\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}\n\nclass Reward\n{\n    public int Id;\n    public int Score;\n    public string RewardName;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Score + \",\" + RewardName;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——GroupJoin： 将一个集合与另一个集合通过指定键分组</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n    static List&lt;Reward&gt; rewardList = new List&lt;Reward&gt;()\n    {\n        new Reward(){ Id=1,Score=101,RewardName=\"奖励1\"},\n        new Reward(){ Id=2,Score=80,RewardName=\"奖励2\"},\n        new Reward(){ Id=3,Score=60,RewardName=\"奖励3\"},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.GroupJoin(rewardList, p =&gt; p.Score, r =&gt; r.Score, (p, result) =&gt; new { pList = p, count = result.Count() });\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}\n\nclass Reward\n{\n    public int Id;\n    public int Score;\n    public string RewardName;\n\n    public override string ToString()\n    {\n        return Id + \",\" + RewardName;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——OrderBy：对集合排序，默认是从小到大排序</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=60,Score=60},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=80},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.OrderBy((p) =&gt; p.Age).ThenBy((p) =&gt; p.Score);\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——Reverse：反转集合中元素的顺序</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.AsEnumerable().Reverse();\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}</code></pre>\n<p> </p>\n<p></p>\n<p></p>\n<p>——GroupBy：自身分组查询</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n        new Person(){ Id=4,Name=\"小赵\",Age=30,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.GroupBy((p) =&gt; p.Score, (score, p) =&gt; new { score = score, count = p.Count() });\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——Any和All：判断集合中是否满足某个/条件</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        bool b1 = personList.Any((p) =&gt; p.Age &lt; 50);\n        bool b2 = personList.All((p) =&gt; p.Age &lt; 50);\n\n        Console.WriteLine(b1);\n        Console.WriteLine(b2);\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——Skip：跳过指定个元素查询</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.Skip(1);\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——Take：只查询指定个元素</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.Take(2);\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——Sum、Average、Max、Min：计算集合中指定数字类型数据的总和、平均值、最大值、最小值</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var sum = personList.Sum((p) =&gt; p.Age);\n        var avg = personList.Average((p) =&gt; p.Age);\n        var max = personList.Max((p) =&gt; p.Age);\n        var min = personList.Min((p) =&gt; p.Age);\n\n        Console.WriteLine(sum);\n        Console.WriteLine(avg);\n        Console.WriteLine(max);\n        Console.WriteLine(min);\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——Concat： 连接两个相同类型集合，合并为一个集合</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;int&gt; numList1 = new List&lt;int&gt;() { 1, 2, 3 };\n    static List&lt;int&gt; numList2= new List&lt;int&gt;() { 4, 5, 6 };\n\n    static void Main(string[] args)\n    {\n        var list = numList1.Concat(numList2);\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——Distinct：从集合中去除掉重复的元素</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;int&gt; numList = new List&lt;int&gt;() { 1, 2, 3, 1, 2, 3 };\n\n    static void Main(string[] args)\n    {\n        var list = numList.Distinct();\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}</code></pre>\n<blockquote>\n<p>使用Distinct去重类中某个字段需要实现IEqualityComparer接口</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.Distinct(new Person());\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person : IEqualityComparer&lt;Person&gt;\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public new bool Equals(Person x, Person y)\n    {\n        if (x == null || y == null)\n        {\n            return false;\n        }\n        if (x.Age == y.Age)\n        {\n            return true;\n        }\n        return false;\n    }\n\n    public int GetHashCode(Person obj)\n    {\n        return obj.Age.GetHashCode();\n    }\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n</blockquote>\n<p></p>\n<p></p>\n<p>——ElementAt：得到集合中指定索引的元素，与[]作用相同</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;int&gt; numList = new List&lt;int&gt;() { 1, 2, 3};\n\n    static void Main(string[] args)\n    {\n        var value = numList.ElementAt(2);\n\n        Console.WriteLine(value);\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p> ——Count：得到集合中满足指定条件的元素个数</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;int&gt; numList1 = new List&lt;int&gt;() { 1, 2, 3 };\n\n    static void Main(string[] args)\n    {\n        var count = numList1.Count((n) =&gt; n &gt;= 2);\n\n        Console.WriteLine(count);\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——First/Single和Last：得到集合中第一个/最后一个元素(如果集合中包含多个元素，使用Single会报错)</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;int&gt; numList1 = new List&lt;int&gt;() { 1, 2, 3 };\n\n    static void Main(string[] args)\n    {\n        var value1 = numList1.First((n) =&gt; n &gt;= 2);\n        var value2 = numList1.Last((n) =&gt; n &lt; 3);\n\n        Console.WriteLine(value1);\n        Console.WriteLine(value2);\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——ToDictionary：将集合转换为字典 </p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var list = personList.ToDictionary(p =&gt; p.Id);\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n<p></p>\n<p>——ToList： 将集合转换为list</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass MainClass\n{\n    static List&lt;Person&gt; personList = new List&lt;Person&gt;()\n    {\n        new Person(){ Id=1,Name=\"小明\",Age=20,Score=100},\n        new Person(){ Id=2,Name=\"小王\",Age=40,Score=80},\n        new Person(){ Id=3,Name=\"小刘\",Age=60,Score=60},\n    };\n\n    static void Main(string[] args)\n    {\n        var dict = personList.ToDictionary(p =&gt; p.Id);\n        List&lt;Person&gt; list = dict.Values.ToList();\n\n        foreach (var temp in list)\n        {\n            Console.WriteLine(temp);\n        }\n    }\n}\n\nclass Person\n{\n    public int Id;\n    public string Name;\n    public int Age;\n    public int Score;\n\n    public override string ToString()\n    {\n        return Id + \",\" + Name + \",\" + Age + \",\" + Score;\n    }\n}</code></pre>\n<p></p>\n</div>\n</div>"}