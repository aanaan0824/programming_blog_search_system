{"blogid": "126483788", "writerAge": "码龄1年", "writerBlogNum": "333", "writerCollect": "2147", "writerComment": "202", "writerFan": "841", "writerGrade": "5级", "writerIntegral": "4442", "writerName": "小熊猫爱恰饭", "writerProfileAdress": "writer_image\\profile_126483788.jpg", "writerRankTotal": "3894", "writerRankWeekly": "81", "writerThumb": "508", "writerVisitNum": "198030", "blog_read_count": "24092", "blog_time": "已于 2022-08-26 14:12:31 修改", "blog_title": "摸鱼也有效率——8个python自动化脚本提高打工人幸福感~", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>嗨害大家好鸭！我是小熊猫❤</h2>\n<p>最近有许多打工人都找我说<mark>打工好难</mark></p>\n<p><img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/0d51216e3cdf431f9f53218e3082e369.gif\"/></p>\n<p>每天都是执行许多<strong>重复的任务，</strong></p>\n<p>例如<mark>阅读新闻、发邮件、查看天气、打开书签、清理文件夹</mark>等等，</p>\n<p>使用自动化脚本，就无需手动一次又一次地完成这些任务，</p>\n<p>非常方便啊有木有？！</p>\n<p>而在某种程度上，<strong>Python 就是自动化的代名词。</strong></p>\n<p>今天就来和大家一起学习一下，</p>\n<p><strong>用8个python自动化脚本提高工作效率~ 快乐摸鱼~</strong></p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a57689b07113427690ef5f0775750d6a.jpeg\"/></p>\n<hr/>\n<h2><a id=\"1_27\"></a>1、自动化阅读网页新闻</h2>\n<p>这个脚本能够实现从网页中抓取文本，然后自动化语音朗读，当你想听新闻的时候，这是个不错的选择。</p>\n<p>代码分为两大部分，第一通过爬虫抓取网页文本呢，第二通过阅读工具来朗读文本。</p>\n<p><strong>需要的第三方库：</strong></p>\n<ul><li>Beautiful Soup - 经典的HTML/XML文本解析器，用来提取爬下来的网页信息</li><li>requests - 好用到逆天的HTTP工具，用来向网页发送请求获取数据</li><li>Pyttsx3 - 将文本转换为语音，并控制速率、频率和语音</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pyttsx3\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\nvoices <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span>getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">'voices'</span><span class=\"token punctuation\">)</span>\nnewVoiceRate <span class=\"token operator\">=</span> <span class=\"token number\">130</span>                       <span class=\"token comment\">## Reduce The Speech Rate</span>\nengine<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">'rate'</span><span class=\"token punctuation\">,</span>newVoiceRate<span class=\"token punctuation\">)</span>\nengine<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">'voice'</span><span class=\"token punctuation\">,</span> voices<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  engine<span class=\"token punctuation\">.</span>say<span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span>\n  engine<span class=\"token punctuation\">.</span>runAndWait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntext <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Paste article\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nres <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\narticles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">'.p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    article <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">'.p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>getText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    articles<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span>\ntext <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">)</span>\nspeak<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># engine.save_to_file(text, 'test.mp3') ## If you want to save the speech as a audio file</span>\nengine<span class=\"token punctuation\">.</span>runAndWait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\c30deac6821d49d4a508d8337efdc0c3.jpeg\"/></p>\n<hr/>\n<h2><a id=\"2_66\"></a>2、自动化数据探索</h2>\n<p>数据探索是数据科学项目的第一步，你需要了解数据的基本信息才能进一步分析更深的价值。</p>\n<p>一般我们会用pandas、matplotlib等工具来探索数据，但需要自己编写大量代码，如果想提高效率，Dtale是个不错的选择。</p>\n<p>Dtale特点是用一行代码生成自动化分析报告，它结合了Flask后端和React前端，为我们提供了一种查看和分析Pandas数据结构的简便方法。</p>\n<p>我们可以在Jupyter上实用Dtale。</p>\n<p><strong>需要的第三方库：</strong></p>\n<ul><li>Dtale - 自动生成分析报告</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">### Importing Seaborn Library For Some Datasets</span>\n<span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns\n\n<span class=\"token comment\">### Printing Inbuilt Datasets of Seaborn Library</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sns<span class=\"token punctuation\">.</span>get_dataset_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">### Loading Titanic Dataset</span>\ndf<span class=\"token operator\">=</span>sns<span class=\"token punctuation\">.</span>load_dataset<span class=\"token punctuation\">(</span><span class=\"token string\">'titanic'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### Importing The Library</span>\n<span class=\"token keyword\">import</span> dtale\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\9f1888fd14f94698ba4b0d745bac9665.png\"/></p>\n<hr/>\n<h2><a id=\"3_101\"></a>3、自动发送多封邮件</h2>\n<p>这个脚本可以帮助我们批量定时发送邮件，邮件内容、附件也可以自定义调整，非常的实用。</p>\n<p>相比较邮件客户端，Python脚本的优点在于可以智能、批量、高定制化地部署邮件服务。</p>\n<p>需要的第三方库：</p>\n<ul><li>Email - 用于管理电子邮件消息；</li><li>Smtlib - 向SMTP服务器发送电子邮件，它定义了一个 SMTP 客户端会话对象，该对象可将邮件发送到互联网上任何带有 SMTP<br/> 或ESMTP 监听程序的计算机；</li><li>Pandas - 用于数据分析清洗地工具；</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> smtplib \n<span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>message <span class=\"token keyword\">import</span> EmailMessage\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_email</span><span class=\"token punctuation\">(</span>remail<span class=\"token punctuation\">,</span> rsubject<span class=\"token punctuation\">,</span> rcontent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    email <span class=\"token operator\">=</span> EmailMessage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                          <span class=\"token comment\">## Creating a object for EmailMessage</span>\n    email<span class=\"token punctuation\">[</span><span class=\"token string\">'from'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'The Pythoneer Here'</span>            <span class=\"token comment\">## Person who is sending</span>\n    email<span class=\"token punctuation\">[</span><span class=\"token string\">'to'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> remail                            <span class=\"token comment\">## Whom we are sending</span>\n    email<span class=\"token punctuation\">[</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rsubject                     <span class=\"token comment\">## Subject of email</span>\n    email<span class=\"token punctuation\">.</span>set_content<span class=\"token punctuation\">(</span>rcontent<span class=\"token punctuation\">)</span>                     <span class=\"token comment\">## content of email</span>\n    <span class=\"token keyword\">with</span> smtplib<span class=\"token punctuation\">.</span>SMTP<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'smtp.gmail.com'</span><span class=\"token punctuation\">,</span>port<span class=\"token operator\">=</span><span class=\"token number\">587</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> smtp<span class=\"token punctuation\">:</span>     \n        smtp<span class=\"token punctuation\">.</span>ehlo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                 <span class=\"token comment\">## server object</span>\n        smtp<span class=\"token punctuation\">.</span>starttls<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                             <span class=\"token comment\">## used to send data between server and client</span>\n        smtp<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span><span class=\"token string\">\"deltadelta371@gmail.com\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"delta@371\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">## login id and password of gmail</span>\n        smtp<span class=\"token punctuation\">.</span>send_message<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">## Sending email</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email send to \"</span><span class=\"token punctuation\">,</span>remail<span class=\"token punctuation\">)</span>              <span class=\"token comment\">## Printing success message</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'list.xlsx'</span><span class=\"token punctuation\">)</span>\n    length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> item <span class=\"token keyword\">in</span> df<span class=\"token punctuation\">.</span>iterrows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        email <span class=\"token operator\">=</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        subject <span class=\"token operator\">=</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        content <span class=\"token operator\">=</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\4a4e188826914ba99e390bcd9713a43c.jpeg\"/></p>\n<hr/>\n<h2><a id=\"4_PDF__146\"></a>4、将 PDF 转换为音频文件</h2>\n<p>脚本可以将 pdf 转换为音频文件，</p>\n<p>原理也很简单，</p>\n<p>首先用 PyPDF 提取 pdf 中的文本，</p>\n<p>然后用 Pyttsx3 将文本转语音。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pyttsx3<span class=\"token punctuation\">,</span>PyPDF2 \npdfreader <span class=\"token operator\">=</span> PyPDF2<span class=\"token punctuation\">.</span>PdfFileReader<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'story.pdf'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \nspeaker <span class=\"token operator\">=</span> pyttsx3<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">for</span> page_num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>pdfreader<span class=\"token punctuation\">.</span>numPages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    \n    text <span class=\"token operator\">=</span> pdfreader<span class=\"token punctuation\">.</span>getPage<span class=\"token punctuation\">(</span>page_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>extractText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">## extracting text from the PDF </span>\n    cleaned_text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">## Removes unnecessary spaces and break lines </span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cleaned_text<span class=\"token punctuation\">)</span>                <span class=\"token comment\">## Print the text from PDF </span>\n    <span class=\"token comment\">#speaker.say(cleaned_text)        ## Let The Speaker Speak The Text </span>\n    speaker<span class=\"token punctuation\">.</span>save_to_file<span class=\"token punctuation\">(</span>cleaned_text<span class=\"token punctuation\">,</span><span class=\"token string\">'story.mp3'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">## Saving Text In a audio file 'story.mp3' </span>\n    speaker<span class=\"token punctuation\">.</span>runAndWait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \nspeaker<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\fe5e2791dd984909863c0d922351aa51.jpeg\"/></p>\n<hr/>\n<h2><a id=\"5_174\"></a>5、从列表中播放随机音乐</h2>\n<p>这个脚本会从歌曲文件夹中随机选择一首歌进行播放，</p>\n<p>需要注意的是 os.startfile 仅支持 Windows 系统。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> random<span class=\"token punctuation\">,</span> os \nmusic_dir <span class=\"token operator\">=</span> <span class=\"token string\">'G:\\\\new english songs'</span> \nsongs <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>music_dir<span class=\"token punctuation\">)</span> \nsong <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>songs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>songs<span class=\"token punctuation\">[</span>song<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">## Prints The Song Name </span>\nos<span class=\"token punctuation\">.</span>startfile<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>music_dir<span class=\"token punctuation\">,</span> songs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\c6a455263b0c43d5b290f9921a12c352.jpeg\"/></p>\n<hr/>\n<h2><a id=\"6_195\"></a>6、智能天气信息</h2>\n<p>国家气象局网站提供获取天气预报的 API，直接返回 json 格式的天气数据。所以只需要从 json 里取出对应的字段就可以了。</p>\n<p>下面是指定城市(县、区)天气的网址，直接打开网址，就会返回对应城市的天气数据。比如：</p>\n<p>http://www.weather.com.cn/data/cityinfo/101021200.html 上海徐汇区对应的天气网址。</p>\n<p>具体代码如下：</p>\n<pre><code class=\"prism language-python\">mport requests \n<span class=\"token keyword\">import</span> json \n<span class=\"token keyword\">import</span> logging <span class=\"token keyword\">as</span> log \n \n<span class=\"token keyword\">def</span> <span class=\"token function\">get_weather_wind</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span> \n        log<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't get weather data!\"</span><span class=\"token punctuation\">)</span> \n    info <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n \n    <span class=\"token comment\"># get wind data </span>\n    data <span class=\"token operator\">=</span> info<span class=\"token punctuation\">[</span><span class=\"token string\">'weatherinfo'</span><span class=\"token punctuation\">]</span> \n    WD <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'WD'</span><span class=\"token punctuation\">]</span> \n    WS <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'WS'</span><span class=\"token punctuation\">]</span> \n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"{}({})\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>WD<span class=\"token punctuation\">,</span> WS<span class=\"token punctuation\">)</span> \n \n \n<span class=\"token keyword\">def</span> <span class=\"token function\">get_weather_city</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token comment\"># open url and get return data </span>\n    r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span> \n        log<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't get weather data!\"</span><span class=\"token punctuation\">)</span> \n \n    <span class=\"token comment\"># convert string to json </span>\n    info <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n \n    <span class=\"token comment\"># get useful data </span>\n    data <span class=\"token operator\">=</span> info<span class=\"token punctuation\">[</span><span class=\"token string\">'weatherinfo'</span><span class=\"token punctuation\">]</span> \n    city <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">]</span> \n    temp1 <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'temp1'</span><span class=\"token punctuation\">]</span> \n    temp2 <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'temp2'</span><span class=\"token punctuation\">]</span> \n    weather <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'weather'</span><span class=\"token punctuation\">]</span> \n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"{} {} {}~{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> temp1<span class=\"token punctuation\">,</span> temp2<span class=\"token punctuation\">)</span> \n \n \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> \n    msg <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"**天气提醒**:   \n \n{} {}   \n{} {}   \n \n来源: 国家气象局 \n\"\"\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span> \n    get_weather_city<span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.weather.com.cn/data/cityinfo/101021200.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    get_weather_wind<span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.weather.com.cn/data/sk/101021200.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    get_weather_city<span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.weather.com.cn/data/cityinfo/101020900.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    get_weather_wind<span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.weather.com.cn/data/sk/101020900.html'</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> \n</code></pre>\n<p>运行结果如下所示：<br/> <img alt=\"请添加图片描述\" src=\"image\\08193dc120c04e43b44ce36f099d08db.png\"/></p>\n<hr/>\n<h2><a id=\"7_265\"></a>7、长网址变短网址</h2>\n<p>有时，那些大URL变得非常恼火，</p>\n<p>很难阅读和共享，此脚本可以将长网址变为短网址。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> contextlib \n<span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> urlencode \n<span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>request <span class=\"token keyword\">import</span> urlopen \n<span class=\"token keyword\">import</span> sys \n \n<span class=\"token keyword\">def</span> <span class=\"token function\">make_tiny</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n request_url <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'http://tinyurl.com/api-create.php?'</span> <span class=\"token operator\">+</span>  \n urlencode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'url'</span><span class=\"token punctuation\">:</span>url<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n <span class=\"token keyword\">with</span> contextlib<span class=\"token punctuation\">.</span>closing<span class=\"token punctuation\">(</span>urlopen<span class=\"token punctuation\">(</span>request_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> response<span class=\"token punctuation\">:</span> \n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> \n \n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n <span class=\"token keyword\">for</span> tinyurl <span class=\"token keyword\">in</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>make_tiny<span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tinyurl<span class=\"token punctuation\">)</span> \n \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> \n main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<p>这个脚本非常实用，</p>\n<p>比如说有内容平台是屏蔽公众号文章的，</p>\n<p>那么就可以把公众号文章的链接变为短链接，</p>\n<p>然后插入其中，就可以实现绕过。</p>\n<p><img alt=\"请添加图片描述\" src=\"image\\52ad864840244341943b92d33e426b4f.jpeg\"/></p>\n<hr/>\n<h2><a id=\"8_304\"></a>8、清理下载文件夹</h2>\n<p>世界上最混乱的事情之一是开发人员的下载文件夹，</p>\n<p>里面存放了很多杂乱无章的文件，</p>\n<p>此脚本将根据大小限制来清理您的下载文件夹，</p>\n<p>有限清理比较旧的文件。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> threading \n<span class=\"token keyword\">import</span> time \n  \n  \n<span class=\"token keyword\">def</span> <span class=\"token function\">get_file_list</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n<span class=\"token comment\">#文件按最后修改时间排序 </span>\n    dir_list <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> dir_list<span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">return</span> \n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> \n        dir_list <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>dir_list<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getmtime<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">return</span> dir_list \n  \n<span class=\"token keyword\">def</span> <span class=\"token function\">get_size</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token triple-quoted-string string\">\"\"\"[summary] \n    Args: \n        file_path ([type]): [目录] \n \n    Returns: \n        [type]: 返回目录大小，MB \n    \"\"\"</span> \n    totalsize<span class=\"token operator\">=</span><span class=\"token number\">0</span> \n    <span class=\"token keyword\">for</span> filename <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        totalsize<span class=\"token operator\">=</span>totalsize<span class=\"token operator\">+</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token comment\">#print(totalsize / 1024 / 1024) </span>\n    <span class=\"token keyword\">return</span> totalsize <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> \n  \n<span class=\"token keyword\">def</span> <span class=\"token function\">detect_file_size</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> size_Max<span class=\"token punctuation\">,</span> size_Del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token triple-quoted-string string\">\"\"\"[summary] \n    Args: \n        file_path ([type]): [文件目录] \n        size_Max ([type]): [文件夹最大大小] \n        size_Del ([type]): [超过size_Max时要删除的大小] \n    \"\"\"</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>get_size<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">if</span> get_size<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> size_Max<span class=\"token punctuation\">:</span> \n        fileList <span class=\"token operator\">=</span> get_file_list<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>fileList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">if</span> get_size<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>size_Max <span class=\"token operator\">-</span> size_Del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n                <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"del :%d %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fileList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n                <span class=\"token comment\">#os.remove(file_path + fileList[i]) </span>\n</code></pre>\n<h2><a id=\"_359\"></a>今天的文章就到这里啦~</h2>\n<h2><a id=\"_361\"></a>我是小熊猫，咱下篇文章再见啦(✿◡‿◡)</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4d272e7727b644e8b74c15f3367cfc1f.jpeg\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}