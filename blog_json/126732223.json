{"blogid": "126732223", "writerAge": "码龄1年", "writerBlogNum": "182", "writerCollect": "617", "writerComment": "653", "writerFan": "729", "writerGrade": "5级", "writerIntegral": "3760", "writerName": "一个风轻云淡", "writerProfileAdress": "writer_image\\profile_126732223.jpg", "writerRankTotal": "5524", "writerRankWeekly": "82", "writerThumb": "777", "writerVisitNum": "46655", "blog_read_count": "44", "blog_time": "于 2022-09-07 07:41:06 发布", "blog_title": "微服务项目：尚融宝（21）（后端搭建：OSS文件上传整合2）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<h1><span style=\"color:#fe2c24;\">认清现实，放弃幻想，准备斗争</span></h1>\n</blockquote>\n<h1>一、新建云存储微服务</h1>\n<h2>1、创建模块</h2>\n<p>service-oss</p>\n<h2>2、配置pom.xml</h2>\n<pre><code class=\"language-XML\">&lt;dependencies&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.atguigu&lt;/groupId&gt;\n        &lt;artifactId&gt;service-base&lt;/artifactId&gt;\n        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    \n    &lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--aliyunOSS--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;\n        &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- 日期工具栏依赖 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;joda-time&lt;/groupId&gt;\n        &lt;artifactId&gt;joda-time&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--让自定义的配置在application.yaml进行自动提示--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;</code></pre>\n<blockquote>\n<p><span style=\"color:#1c7331;\"><strong> &lt;!--aliyunOSS--&gt;<br/>     &lt;dependency&gt;<br/>         &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;<br/>         &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;<br/>     &lt;/dependency&gt; </strong></span></p>\n<p><span style=\"color:#1a439c;\"><strong>阿里云oss依赖</strong></span></p>\n</blockquote>\n<h2>3、配置application.yml </h2>\n<pre><code class=\"language-XML\">server:\n  port: 8130 # 服务端口\n\nspring:\n  profiles:\n    active: dev # 环境设置\n  application:\n    name: service-oss # 服务名\n\naliyun:\n  oss:\n    endpoint: 你的endponit\n    keyId: 你的阿里云keyid\n    keySecret: 你的阿里云keysecret\n    bucketName: srb-file</code></pre>\n<h2> <strong><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">4、logback-spring.xml</span></span></strong></h2>\n<div style=\"margin-left:0;\">\n<span style=\"color:#ad720d;\"><strong><span style=\"background-color:#ffffff;\">修改日志路径为 srb_log/oss</span></strong></span>\n</div>\n<h2><strong><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">5、创建启动类</span></span></strong></h2>\n<div style=\"margin-left:0;\">\n<span style=\"color:#1a439c;\"><strong><span style=\"background-color:#ffffff;\">创建ServiceOssApplication.java</span></strong></span>\n</div>\n<div style=\"margin-left:0;\">\n<pre><code class=\"language-java\">@SpringBootApplication\n@ComponentScan({\"com.atguigu.srb\", \"com.atguigu.common\"})\npublic class ServiceOssApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ServiceOssApplication.class, args);\n    }\n\n}</code></pre>\n<h2>6、启动项目</h2>\n<p></p>\n<h1>二、实现文件上传</h1>\n<h2>1、从配置文件读取常量</h2>\n<p><span style=\"color:#1c7892;\"><strong>创建常量读取工具类：OssProperties.java</strong></span></p>\n<pre><code class=\"language-java\">@Setter\n@Getter\n@Component\n@ConfigurationProperties(prefix = \"aliyun.oss\")\npublic class OssProperties implements InitializingBean {\n\n    private String endpoint;\n    private String keyId;\n    private String keySecret;\n    private String bucketName;\n\n    public static String ENDPOINT;\n    public static String KEY_ID;\n    public static String KEY_SECRET;\n    public static String BUCKET_NAME;\n\n    //当私有成员被赋值后，此方法自动被调用，从而初始化常量\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        ENDPOINT = endpoint;\n        KEY_ID = keyId;\n        KEY_SECRET = keySecret;\n        BUCKET_NAME = bucketName;\n    }\n}</code></pre>\n<h2>2、文件上传业务</h2>\n<p><span style=\"color:#1a439c;\"><strong>创建Service接口：FileService.java</strong></span></p>\n<pre><code class=\"language-java\">public interface FileService {\n\n    /**\n     * 文件上传至阿里云\n     */\n    String upload(InputStream inputStream, String module, String fileName);\n}</code></pre>\n<div style=\"margin-left:0;\">\n<span style=\"color:#be191c;\"><strong><span style=\"background-color:#ffffff;\">实现：FileServiceImpl.java</span></strong></span>\n</div>\n<div style=\"margin-left:0;\">\n<span style=\"color:#be191c;\"><strong><span style=\"background-color:#ffffff;\">参考SDK中的：Java-&gt;上传文件-&gt;简单上传-&gt;流式上传-&gt;上传文件流</span></strong></span>\n</div>\n<div style=\"margin-left:0;\">\n<img alt=\"\" height=\"560\" src=\"image\\dc836ece9a9a4b0b9c0fc04e8a6beab4.png\" width=\"1012\"/>\n</div>\n<pre><code class=\"language-java\">@Service\npublic class FileServiceImpl implements FileService {\n\n    /**\n     * 文件上传至阿里云\n     */\n    @Override\n    public String upload(InputStream inputStream, String module, String fileName) {\n\n        // 创建OSSClient实例。\n        OSS ossClient = new OSSClientBuilder().build(\n                OssProperties.ENDPOINT,\n                OssProperties.KEY_ID,\n                OssProperties.KEY_SECRET);\n        //判断oss实例是否存在：如果不存在则创建，如果存在则获取\n        if(!ossClient.doesBucketExist(OssProperties.BUCKET_NAME)){\n            //创建bucket\n            ossClient.createBucket(OssProperties.BUCKET_NAME);\n            //设置oss实例的访问权限：公共读\n            ossClient.setBucketAcl(OssProperties.BUCKET_NAME, CannedAccessControlList.PublicRead);\n        }\n\n        //构建日期路径：avatar/2019/02/26/文件名\n        String folder = new DateTime().toString(\"yyyy/MM/dd\");\n\n        //文件名：uuid.扩展名\n        fileName = UUID.randomUUID().toString() + fileName.substring(fileName.lastIndexOf(\".\"));\n        //文件根路径\n        String key = module + \"/\" + folder + \"/\" + fileName;\n\n        //文件上传至阿里云\n        ossClient.putObject(OssProperties.BUCKET_NAME, key, inputStream);\n\n        // 关闭OSSClient。\n        ossClient.shutdown();\n\n        //阿里云文件绝对路径\n        return \"https://\" + OssProperties.BUCKET_NAME + \".\" + OssProperties.ENDPOINT + \"/\" + key;\n    }\n}</code></pre>\n<p> 3、控制层</p>\n<p><span style=\"color:#1a439c;\"><strong>创建controller.admin：FileController.java</strong></span></p>\n<pre><code class=\"language-java\">@Api(tags = \"阿里云文件管理\")\n@CrossOrigin //跨域\n@RestController\n@RequestMapping(\"/api/oss/file\")\npublic class FileController {\n\n    @Resource\n    private FileService fileService;\n\n    /**\n     * 文件上传\n     */\n    @ApiOperation(\"文件上传\")\n    @PostMapping(\"/upload\")\n    public R upload(\n            @ApiParam(value = \"文件\", required = true)\n            @RequestParam(\"file\") MultipartFile file,\n\n            @ApiParam(value = \"模块\", required = true)\n            @RequestParam(\"module\") String module)  {\n\n        try {\n            InputStream inputStream = file.getInputStream();\n            String originalFilename = file.getOriginalFilename();\n            String uploadUrl = fileService.upload(inputStream, module, originalFilename);\n\n            //返回r对象\n            return R.ok().message(\"文件上传成功\").data(\"url\", uploadUrl);\n        } catch (IOException e) {\n            throw new BusinessException(ResponseEnum.UPLOAD_ERROR, e);\n        }\n    }\n}</code></pre>\n<h2>4、Swagger测试</h2>\n<p><img alt=\"\" height=\"271\" src=\"image\\76595966e9754c65affb872b5c148fc4.jpeg\" width=\"1200\"/></p>\n<h1>三、实现文件删除</h1>\n<h2>1、业务层</h2>\n<p><span style=\"color:#fe2c24;\"><strong>Service接口：FileService.java</strong></span></p>\n<pre><code class=\"language-java\">/**\n     * 根据路径删除文件\n     * @param url\n     */\nvoid removeFile(String url);</code></pre>\n<p><span style=\"color:#1c7331;\"><strong> 实现：FileServiceImpl.java</strong></span></p>\n<pre><code class=\"language-java\">/**\n     * 根据路径删除文件\n     * @param url\n     */\n@Override\npublic void removeFile(String url) {\n\n    // 创建OSSClient实例。\n    OSS ossClient = new OSSClientBuilder().build(\n        OssProperties.ENDPOINT,\n        OssProperties.KEY_ID,\n        OssProperties.KEY_SECRET);\n\n    //文件名（服务器上的文件路径）\n    String host = \"https://\" + OssProperties.BUCKET_NAME + \".\" + OssProperties.ENDPOINT + \"/\";\n    String objectName = url.substring(host.length());\n\n    // 删除文件。\n    ossClient.deleteObject(OssProperties.BUCKET_NAME, objectName);\n\n    // 关闭OSSClient。\n    ossClient.shutdown();\n}</code></pre>\n<h2>2、控制层</h2>\n<pre><code class=\"language-java\">@ApiOperation(\"删除OSS文件\")\n@DeleteMapping(\"/remove\")\npublic R remove(\n    @ApiParam(value = \"要删除的文件路径\", required = true)\n    @RequestParam(\"url\") String url) {\n    fileService.removeFile(url);\n    return R.ok().message(\"删除成功\");\n}</code></pre>\n<p></p>\n</div>\n</div>\n</div>"}