{"blogid": "122444412", "writerAge": "码龄4年", "writerBlogNum": "16", "writerCollect": "313", "writerComment": "4", "writerFan": "9", "writerGrade": "2级", "writerIntegral": "204", "writerName": "A person,A fool", "writerProfileAdress": "writer_image\\profile_122444412.jpg", "writerRankTotal": "57355", "writerRankWeekly": "102950", "writerThumb": "35", "writerVisitNum": "47562", "blog_read_count": "44140", "blog_time": "于 2022-01-12 00:42:47 发布", "blog_title": "SSM框架简单介绍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一. SSM框架简介及特征</h1>\n<h2>1.SpringMVC</h2>\n<p>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring 的SpringMVC框架或集成其他MVC开发框架，如Struts1，Struts2等。</p>\n<p>Spring MVC 分离了控制器、模型对象、过滤器以及处理程序对象的角色，这种分离让它们更容易进行定制</p>\n<p>易于同其它View框架（Tiles等）无缝集成，采用IOC便于测试。</p>\n<h2>2.Spring</h2>\n<p>Spring Framework是一个开源的Java／Java EE全功能栈的应用程序框架， 以Apache许可证形式发布，也有.NET平台上的移植版本。Spring Framework 提供了一个简易的开发方式，这种开发方式，将避免那些可能致使底层代码 变得繁杂混乱的大量的属性文件和帮助类。</p>\n<p><br/>  <span style=\"color:#fe2c24;\">轻量</span>—从大小与开销两方面而言Spring都是轻量的。Spring非侵入式的,应用中的对象不依赖于Spring特定类。</p>\n<p><span style=\"color:#fe2c24;\">控制反转</span>—Spring通过一种称作控制反转的技术促进了低耦合。不是对象从容器中查找依赖，而是容器在对象 初始化时不等对象请求就主动将依赖传递给它。</p>\n<p><span style=\"color:#fe2c24;\">面向切面</span>—Spring提供了面向切面编程的丰富支持，通过分离应用的业务逻辑与系统级服务进行内聚性的开发。</p>\n<p><span style=\"color:#fe2c24;\">容器</span>—Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器。</p>\n<h2>3.Mybatis</h2>\n<p>MyBatis是一个Java持久化框架，它通过XML描述符或注解把对象与存储过程或SQL语句关联起来。 MyBatis是在Apache许可证 2.0下分发的自由软件，是iBATIS 3.0的分支版本。其维护团队也包含iBATIS的初创成员</p>\n<p>1. 易于上手和掌握。</p>\n<p>2. sql写在xml里，便于统一管理和优化。</p>\n<p>3. 解除sql与程序代码的耦合。</p>\n<p>4. 提供xml标签，支持编写动态sql。</p>\n<h2>二、SpringMVC流程架构图</h2>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"333\" src=\"image\\ea5332b6c4a44dfea94ba080c73d1b3f.png\" width=\"739\"/></p>\n<p> </p>\n<h1>三、SSM框架原理</h1>\n<h2>Spring MVC运行原理</h2>\n<p>1.用户发送请求至 <span style=\"color:#fe2c24;\">前端控制器DispatcherServlet</span>。</p>\n<p>2.<span style=\"color:#fe2c24;\">前端控制器DispatcherServlet</span>收到请求后调用处理器映射器HandlerMapping。</p>\n<p>3.<span style=\"color:#956fe7;\">处理器映射器HandlerMapping</span>根据请求的Url找到具体的处理器，生成处理器对象Handler及处理器拦截器 HandlerIntercepter（如果有则生成）一并返回给前端控制器DispatcherServlet。</p>\n<p>4.<span style=\"color:#fe2c24;\">前端控制器DispatcherServlet</span>通过<span style=\"color:#ffd900;\">处理器适配器HandlerAdapter</span>调用<span style=\"color:#ff9900;\">处理器Controller</span>。</p>\n<p>5.执行<span style=\"color:#ff9900;\">处理器（Controller，也叫后端控制器）</span></p>\n<p>6.<span style=\"color:#ff9900;\">处理器Controller</span>执行完后返回<span style=\"color:#a2e043;\">ModelAnView</span>。</p>\n<p>7.<span style=\"color:#ffd900;\">处理器映射器HandlerAdapter</span>将<span style=\"color:#ff9900;\">处理器Controller</span>执行返回的结果<span style=\"color:#a2e043;\">ModelAndView</span>返回给 <span style=\"color:#fe2c24;\">前端控制器DispatcherServlet。</span></p>\n<p>8.<span style=\"color:#fe2c24;\">前端控制器DispatcherServlet</span>将<span style=\"color:#a2e043;\">ModelAnView</span>传给<span style=\"color:#4da8ee;\">视图解析器ViewResolver</span>。</p>\n<p>9.<span style=\"color:#4da8ee;\">视图解析器ViewResolver</span>解析后返回具体的<span style=\"color:#511b78;\">视图View</span>。</p>\n<p>10.<span style=\"color:#fe2c24;\">前端控制器DispatcherServlet</span>对<span style=\"color:#511b78;\">视图View</span>进行渲染视图（即：将模型数据填充至视图中）</p>\n<p>11.<span style=\"color:#fe2c24;\">前端控制器DispatcherServlet</span>响应用户。</p>\n<h2>Spring</h2>\n<p>Spring IOC容器,指的是控制反转，IOC容器负责实例化、定位、 配置应用程序中的对象及建立这些对象间的依赖。交由 Spring来管理这些，实现解耦</p>\n<h2>MyBatis的架构设计</h2>\n<p>1.使用传统的MyBatis提供的API       这是传统的传递Statement Id 和查询参数给 SqlSession 对象，使用 SqlSession对象完成和数据库的交互；然后根据Statement Id 和参数来操作数据库，这种方式固然很简单和实用，但是它不符合面向对象语言的概念和面向接口编程的编程习惯</p>\n<p>2. 使用Mapper接口       由于面向接口的编程是面向对象的大趋势，MyBatis 为了适应这一趋势，增加了第二种使用MyBatis 支持接口（Interface）调用方式</p>\n<h2>Mybatis运行原理</h2>\n<p>1. 加载配置文件    </p>\n<p>将SQL的配置信息加载成为一个个MappedStatement对象，包括了参数映射配置，执行的SQL语句、 结果映射配置，存储在内存中。</p>\n<p>2. SQL解析    </p>\n<p>当API接口层接收到调用请求时，会接收到传入SQL的ID和传入对象(可以是Map/JavaBean或者基本 数据类型)，Mybatis会根据SQL的ID找到对应的MappedStatement, 然后根据传入的参数对象 MappedStatement进行解析，解析后可以得到最终要执行的SQL语句和参数。</p>\n<p>3. SQL执行    </p>\n<p>将最终得到的SQL和参数拿到数据库执行，得到操作数据库的结果。</p>\n<p>4. 结果映射    </p>\n<p>将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap/JavaBean或者基本数据类型， 并将最终的结果返回。</p>\n<h1>四. SSM框架配置</h1>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\56282d53b9bf4b0395b31c78abbdfdd8.png\"/></p>\n<p><img alt=\"\" src=\"image\\82d044dceca34c42b80e14cbaa68ca45.png\"/></p>\n<h2>Web.xml基本信息配置</h2>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\a6daabf8bab642d9ae569be755213cc3.png\"/></p>\n<h2>SpringMVC基本信息配置 <img alt=\"\" src=\"image\\2ce3e88f077442faa446a7b6f30a94e7.png\"/></h2>\n<h2> 数据库基本信息配置</h2>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\86eac5d79e9b4ad390656afbc1a17548.png\"/></p>\n<h2>Mybatis配置文件</h2>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\c332fa5df2ee42a68cb37de0e1b6e6d8.png\"/></p>\n<h2>Spring基本信息配置--数据源</h2>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d9dc945f17454247a20b367705c93266.png\"/></p>\n<h2>Spring基本信息配置--SessionFactory和Mapper接口扫描器</h2>\n<h2><img alt=\"\" src=\"image\\59c240ada3424eef89e23476bca3ca21.png\"/>Spring基本信息配置--Service层Bean配置 <img alt=\"\" src=\"image\\13c3d73cb7c54b0791690b8e6cb9fef8.png\"/></h2>\n<h2> Spring基本信息配置--事务管理基础配置</h2>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\0ed2b3c7726f4bb3bab872cfca6abc5f.png\"/></p>\n<p> </p>\n<h2>五. SSM框架使用</h2>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\5ce2282fb77f4fb99809f223cbef1d8a.png\"/></p>\n<p> </p>\n<h1>六. 其他实用Jar包</h1>\n<p><strong><span style=\"color:#fe2c24;\">Jar包仓库地址：https://search.maven.org/classic/或http://mvnrepository.com/</span></strong></p>\n<p><span style=\"color:#0d0016;\">Jar包管理器：Maven或者Gradle(比如：compile group: 'com.baomidou', name: 'mybatis-plus', version: '2.3'，会自动的将相关依赖的包文件下载。)</span></p>\n<h2>其他实用Jar包</h2>\n<p>Apache Shiro</p>\n<p>Lombok</p>\n<p>Druid</p>\n<p>Mybatis-plus</p>\n<h2>eclipse自动提示+自动补全问题</h2>\n<p><span style=\"color:#fe2c24;\">自动提示</span>：</p>\n<p>1.首先，我们打开eclipse，选择菜单栏的window选项。</p>\n<p>2.点击Windows，选择下拉菜单里面的preferences选项，之后在打开的对话框的左侧找到Java选项。</p>\n<p>3.之后点击Java选项，选择展开后的子菜单editor选项，再点击editor选项，选择其展开后的子菜单content assist选项。</p>\n<p>4.在右侧的对话框中auto activation 下的子选项auto activation triggers for java后的文本框中输入.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ即可。</p>\n<p><span style=\"color:#fe2c24;\"> XML自动补全</span>：</p>\n<p>1.首先，我们打开eclipse，选择菜单栏的window选项。</p>\n<p>2.点击Windows，选择下拉菜单里面的preferences选项，之后在打开的对话框的左侧找到XML选项。</p>\n<p>3.之后点击XML选项，选择展开后的子菜单editor选项，再点击editor选项，选择其展开后的子菜单content assist选项。</p>\n<p>4.在右侧的对话框中auto activation 下的子选项Prompt when these characters are inserted后的文本框中输入&lt;=:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 即可。</p>\n</div>\n</div>"}