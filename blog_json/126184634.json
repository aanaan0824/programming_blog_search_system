{"blogid": "126184634", "writerAge": "码龄176天", "writerBlogNum": "78", "writerCollect": "1783", "writerComment": "1577", "writerFan": "3603", "writerGrade": "6级", "writerIntegral": "4818", "writerName": "小新爱学习.", "writerProfileAdress": "writer_image\\profile_126184634.jpg", "writerRankTotal": "3427", "writerRankWeekly": "71", "writerThumb": "1627", "writerVisitNum": "58583", "blog_read_count": "720", "blog_time": "已于 2022-08-05 20:50:48 修改", "blog_title": "【Java】每日小结(内含常见面试知识)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\38051ee198e84322bd29f5d555caaf31.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/e94b5773a6b84bfda02a1eeeef49e1a6.gif#pic_center\"/></p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7a8f6429a9a5447599432e14f538698c.jpeg\"/></p>\n<hr/>\n<p><strong>前言：</strong></p>\n<blockquote>\n<p><font color=\"dsdoooooorororsoosfkxfxzcvmcmcxmw\"><strong>“前些天发现了一个巨牛的人工智能学习网站，通俗易懂，风趣幽默</strong></font><br/> <strong>经过小新缜密的思考与亲身体验，忍不住分享一下给大家。有人工智能兴趣的朋友们，推荐大家一起学习</strong> 🎉<a href=\"https://www.captainai.net/hmmwx\">点击直接访问</a>🎉<br/> <font color=\"dkkw\"><strong>里面有丰富的人工智能学习资料，真正做到从入门到入土，还不快来一起学习</strong>🎏🎏🎏</font></p>\n</blockquote>\n<hr/>\n<p><strong>个人名片：</strong></p>\n<blockquote>\n<p>🐼作者简介：一名大一在校生<br/> 🐻‍❄️个人主页：<a href=\"https://blog.csdn.net/m0_68089732\">小新爱学习.</a><br/> 🐼个人WeChat：hmmwx53<br/> 🕊️系列专栏：<a href=\"https://blog.csdn.net/m0_68089732/category_11720513.html?spm=1001.2014.3001.5482\">零基础学java</a> ----- <a href=\"https://blog.csdn.net/m0_68089732/category_11783506.html?spm=1001.2014.3001.5482\">重识c语言</a><br/> 🐓每日一句：<font color=\"red\">等风来，不如追风去~</font></p>\n</blockquote>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_24\">今日学习总结🎐🎐🎐</a></li><li><ul><li><a href=\"#Java_StringBuffer__StringBuilder__25\">一、Java StringBuffer 和 StringBuilder 类🎋🎋🎋</a></li><li><a href=\"#Date_84\">二、日期工具类Date🎏🎏🎏</a></li><li><ul><li><ul><li><a href=\"#_100\">获取当前日期时间</a></li></ul>\n</li><li><a href=\"#SimpleDateFormat___116\">SimpleDateFormat 格式化日期 🎏🎏🎏</a></li></ul>\n</li><li><a href=\"#_147\">三、包装类：🎋🎋🎋</a></li><li><ul><li><ul><li><a href=\"#Integer_153\">包装类Integer🎋🎋🎋</a></li></ul>\n</li><li><a href=\"#_171\">自动拆箱，装箱🎋🎋🎋</a></li></ul>\n</li><li><a href=\"#equals_199\">四、==与equals的区别✨✨✨</a></li><li><a href=\"#_209\">五、精度缺失处理方法：🎊🎊🎊</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_24\"></a>今日学习总结🎐🎐🎐</h1>\n<h2><a id=\"Java_StringBuffer__StringBuilder__25\"></a>一、Java StringBuffer 和 StringBuilder 类🎋🎋🎋</h2>\n<p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p>\n<p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\33c635a2717040b3b4cf441c74e6c52f.png\"/><br/> <strong>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。</strong></p>\n<blockquote></blockquote>\n<ul><li>特点： 封装了char[]数组，是可变的字符序列，提供了一直可以对字符串进行修改的方法</li><li>StringBuilder非线程安全，同步处理，始于jdk1.5</li><li>StringBuffer：线程安全，并发处理，性能稍慢，始于jdk1.0</li><li>执行效率：StringBuilder&gt;StringBuffer&gt;String</li></ul>\n<blockquote></blockquote>\n<p><strong>常用方法：</strong></p>\n<table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuffer append(String s)</td><td>将指定的字符串追加到此字符序列。</td></tr><tr><td>public StringBuffer reverse()</td><td>将此字符序列用其反转形式取代。</td></tr><tr><td>public delete(int start, int end)</td><td>移除此序列的子字符串中的字符。</td></tr><tr><td>public insert(int offset, int i)</td><td>将 int 参数的字符串表示形式插入此序列中。</td></tr><tr><td>replace(int start, int end, String str)</td><td>使用给定 String 中的字符替换此序列的子字符串中的字符。</td></tr></tbody></table>\n<p>代码示例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>tedu<span class=\"token punctuation\">.</span>day17</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test_String2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"好好学习java\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**\n         * public StringBuilder(String var1) {\n         *         super(var1.length() + 16);\n         *         this.append(var1);\n         *         内部字符数组默认初识容量为16，if&gt;16扩容\n         */</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将str内容复制到StringBuilder里面，</span>\n\n        <span class=\"token comment\">//追加</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为了月薪过万\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//好好学习java为了月薪过万</span>\n\n        <span class=\"token comment\">//replace()替换部分内容</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"改变世界\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//好好学习java为了改变世界</span>\n\n        <span class=\"token comment\">//delete()删除部分内容</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//好好学习java   删除下标7-13，含头不含尾</span>\n\n        <span class=\"token comment\">//insert()插入操作</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"我要\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//我要好学习java</span>\n\n        <span class=\"token comment\">//reverse()</span>\n        <span class=\"token comment\">// 将此字符序列用其反转形式取代。</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//avaj习学好要我</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"Date_84\"></a>二、日期工具类Date🎏🎏🎏</h2>\n<p><strong>概述：类 Date 表示特定的瞬间，精确到毫秒。，java.util 包提供了 Date 类来封装当前的日期和时间。</strong></p>\n<hr/>\n<p><strong>常用方法摘要：</strong></p>\n<table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><font color=\"dfkfkd\">long getTime()</font></td><td><font color=\"dfkfkd\">返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</font></td></tr><tr><td>int getMonth()</td><td>获取当前月份(+1)</td></tr><tr><td>toLocaleString()</td><td>获取当前时间 yyyy-MM-dd hh:mm:ss</td></tr><tr><td>int getDay()</td><td>获取当前天</td></tr><tr><td>int getHours()</td><td>获取当前小时</td></tr><tr><td>int getMinutes()</td><td>获取当前分钟</td></tr><tr><td>int getSeconds()</td><td>获取当前秒数</td></tr><tr><td>String toString( )</td><td>把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</td></tr></tbody></table>\n<h4><a id=\"_100\"></a>获取当前日期时间</h4>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token comment\">// 初始化 Date 对象</span>\n       <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n       <span class=\"token comment\">// 使用 toString() 函数显示日期时间</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"SimpleDateFormat___116\"></a>SimpleDateFormat 格式化日期 🎏🎏🎏</h3>\n<pre><code>   SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n</code></pre>\n<p>把String类型的日期转化为Date类型，</p>\n<p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。</p>\n<blockquote>\n<p>Demo： 输入生日求活了多少天</p>\n</blockquote>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span>   <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你的生日\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">String</span> birthday <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//long start = d.getTime()+32*365*24*60*60*1000;//毫秒</span>\n        <span class=\"token comment\">//吧String类型的日期转化为Date类型</span>\n        <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n            <span class=\"token class-name\">Date</span> birthday1 <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>birthday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token comment\">//获取毫秒值</span>\n        <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> birthday1<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取出生时的毫秒数</span>\n\n        <span class=\"token keyword\">long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1970到现在的毫秒数</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">-</span> time<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">24</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//单位：天</span>\n\n\n\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_147\"></a>三、包装类：🎋🎋🎋</h2>\n<blockquote>\n<p><font color=\"djfsaaaajaa\"><strong>包装类：java中定义了8个包装类，目的是为了解决基本数据类型不能直接参与面向对象的开发问题<br/> Integer、Character、Byte、Short、Long、Float、Double、Boolean<br/> Character和Boolean继承自Object，其余六个都是继承自java.lang.Number<br/> Number：是数字包装类的抽象父类</strong></font></p>\n</blockquote>\n<h4><a id=\"Integer_153\"></a>包装类Integer🎋🎋🎋</h4>\n<blockquote>\n<p>int 的包装类 Integer<br/> Integer i0;//Integer以对象的形式存在，默认值null<br/> Integer i1 = new Integer(1);//Integer</p>\n</blockquote>\n<p><strong>底层逻辑：</strong></p>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>static Integer valueOf(int i)</td><td>返回一个表示指定的 int 值的 Integer 实例。</td></tr><tr><td>static int parseInt(String s)</td><td>将字符串参数作为有符号的十进制整数进行解析。</td></tr></tbody></table>\n<h3><a id=\"_171\"></a>自动拆箱，装箱🎋🎋🎋</h3>\n<ul><li><strong>装箱：把基本数据类型转换为对应包装类类型</strong></li><li><strong>拆箱：把包装类型转换为对应的基本数据类型</strong></li></ul>\n<p>自动装箱底层发生的代码：Integer.valueOf(127); int --&gt;Integer</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// - 装箱：把基本数据类型转换为对应包装类类型</span>\n        <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> ii <span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//自动装箱Integer.valueOf(100);</span>\n        <span class=\"token comment\">//- 拆箱：把包装类型转换为对应的基本数据类型</span>\n       <span class=\"token comment\">/* ii = ii.intValue()+200;\n        System.out.println(ii);*/</span>\n        ii<span class=\"token operator\">+=</span><span class=\"token number\">200</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//内部隐含ii.intValue()</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ii<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">Integer</span> iii <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iii<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            iii<span class=\"token operator\">+=</span><span class=\"token number\">300</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NullPointerException//内部隐含ii.intValue(),所以null掉对象，会触发空指针异常</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<ul><li>Integer iii = 5;//iii 是引用数据类型，5是基本数据类型，引用了包装类的地址</li><li>int a = iii;//编译器自动完成拆箱：从包装类型的值，自动变成基本数据类型的值</li></ul>\n<blockquote></blockquote>\n<h2><a id=\"equals_199\"></a>四、==与equals的区别✨✨✨</h2>\n<p><font color=\"sjdja\"><strong>1.当使用== 比较时，如果相比较的两个两个变量是引用数据类型，那么比较的是两者的物理地址（内存地址），</strong><br/> <strong>如果相比较的两个变量是基本数据类型，那么比较的是具体数值是否相等；</strong></font></p>\n<p><font color=\"sjdja\"><strong>2.当使用equals比较时，比较的结果实际上取决于equals方法的具体实现</strong></font></p>\n<p><font color=\"sjdja\"><strong>3. 任何类都是继承自Object类，因此所有类都具有Object类的特性，比如String，Integer等<br/> 它们在自己的类中重写了equals方法，此时它们比较的就是内容是否相同，而在Object了类的默认实现中，<br/> equals方法的底层是通过== 实现的</strong></font></p>\n<hr/>\n<h2><a id=\"_209\"></a>五、精度缺失处理方法：🎊🎊🎊</h2>\n<p><strong>BigDecimal：常用来解决精确的浮点数运算</strong></p>\n<table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>BigDecimal add(BigDecimal augend)</td><td>返回一个 BigDecimal，其值为 (this + augend)，其标度为 max(this.scale(), augend.scale())。</td></tr><tr><td>BigDecimal negate()</td><td>返回 BigDecimal，其值为 (-this)，其标度为 this.scale()。</td></tr><tr><td>BigDecimal multiply(BigDecimal multiplicand)</td><td>返回一个 BigDecimal，其值为 (this × multiplicand)，其标度为 (this.scale() + multiplicand.scale())。</td></tr><tr><td>BigDecimal divide(BigDecimal divisor, RoundingMode roundingMode)</td><td>返回一个 BigDecimal，其值为 (this / divisor)，其标度为 this.scale()。</td></tr></tbody></table>\n<blockquote>\n<p>在除法中：</p>\n<ul><li>divisor - 此 BigDecimal 要除以的值。</li><li>scale - 要返回的 BigDecimal 商的标度。</li><li>roundingMode - 要应用的舍入模式。</li></ul>\n</blockquote>\n<p>代码示例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>tedu<span class=\"token punctuation\">.</span>day17</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RoundingMode</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 本类用来测试浮点数运算时不精确的解决方案\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test_BigDecimal</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//method1();</span>\n        <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你要计算的两个小数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你要计算的两个小数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**\n         * 创建工具类对象\n         * 最好不要使用double类型作为构造函数参数，不然会产生精度丢失\n         * 最好使用重载，参数类型是String类型的构造函数，double 转换成String ，直接拼接一个空字符串\n         * BigDecimal(double val)不建议\n         * BigDecimal(String val)建议，将String类型的字符串转化为BigDecimal\n         */</span>\n        <span class=\"token class-name\">BigDecimal</span> bd1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BigDecimal</span> bd2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BigDecimal</span> bd3<span class=\"token punctuation\">;</span>\n        bd3 <span class=\"token operator\">=</span> bd1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bd2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//加法运算</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bd3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bd3 <span class=\"token operator\">=</span> bd1<span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>bd2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//减法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bd3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bd3 <span class=\"token operator\">=</span> bd1<span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>bd2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//乘法运算</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bd3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bd3 <span class=\"token operator\">=</span> bd1<span class=\"token punctuation\">.</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>bd2<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RoundingMode</span><span class=\"token punctuation\">.</span>UP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//除法</span>\n        <span class=\"token comment\">//第一个参数是要除以那个数，第二个是要保留的几位，第三个是舍入方式</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bd3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//divisor - 此 BigDecimal 要除以的值。</span>\n        <span class=\"token comment\">//scale - 要返回的 BigDecimal 商的标度。</span>\n        <span class=\"token comment\">//roundingMode - 要应用的舍入模式。</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}