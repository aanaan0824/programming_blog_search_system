{"blogid": "126734780", "writerAge": "码龄3年", "writerBlogNum": "20", "writerCollect": "110", "writerComment": "163", "writerFan": "177", "writerGrade": "3级", "writerIntegral": "666", "writerName": "编程贝多芬", "writerProfileAdress": "writer_image\\profile_126734780.jpg", "writerRankTotal": "39237", "writerRankWeekly": "2339", "writerThumb": "175", "writerVisitNum": "3535", "blog_read_count": "170", "blog_time": "于 2022-09-06 22:24:48 发布", "blog_title": "写完Numpy100道基础练习题后的错误总结和语法总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>前言：由于是看视频学习的缘故，在写这100道题目道中有很多视频中没有出现的语法，然而很多语法直接拿来用都是比较简单的，少了很多的循环语句。至此写下这篇错误总结和语法总结，希望可以给小伙伴们一些帮助，因为博主都帮你们踩雷了！！</strong></p>\n<p></p>\n<p><span style=\"color:#fe2c24;\"><strong>        1、Create a null vector of size 10 (★☆☆)')</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>                创建一个大小为10的空向量</strong></span></p>\n<p>对于这个问题有四种解法：所用到的语法如下</p>\n<p><strong>① np.empty 构造一个大小为 shape 的未初始化数组<br/> ②np.zeros 构造一个大小为 shape 的全0数组<br/> ③np.ones 构造一个大小为 shape 的全1数组<br/> ④np.full 构造一个大小为 shape 的用指定值填满的数组</strong></p>\n<pre><code class=\"hljs\">print(np.empty(10))\nprint(np.ones(10))\nprint(np.zeros(10))\nprint(np.full((2,5),5.0))</code></pre>\n<p><img alt=\"\" height=\"252\" src=\"image\\8fd39edec7504efeab709040789ef3a9.png\" width=\"1078\"/></p>\n<p> </p>\n<p>需要我们注意的是在用np.full语法进行填充后，在用np.empty 构造一个大小为 shape 的未初始化数组，会发现构造的函数还是用full语句创建后的内容，所以需要我们在创建完后进行初始化</p>\n<p><img alt=\"\" height=\"293\" src=\"image\\828e65221f93481c8af73aba739cbc40.png\" width=\"1097\"/></p>\n<p> </p>\n<p><span style=\"color:#fe2c24;\">    </span><span style=\"color:#0d0016;\">    </span><span style=\"color:#fe2c24;\">  <strong>2、Create a 3x3 matrix with values ranging from 0 to 8 (★☆☆)')</strong></span></p>\n<p><strong><span style=\"color:#fe2c24;\">                用0-8这9个数构造一个3x3大小的矩阵</span></strong></p>\n<p>对于这个问题有2种解法：所用到的语法如下</p>\n<p>①np.arange().reshape(3,3)</p>\n<p>②np.arange().reshape((3，-1))</p>\n<pre><code class=\"hljs\">x3=np.arange(0,9).reshape(3,3)\nprint(x3)\n\nsample3 = np.arange(9).reshape((3, -1))\nprint(sample3)</code></pre>\n<p><img alt=\"\" height=\"343\" src=\"image\\0f39c7041b9640478c3a61b38acb83b9.png\" width=\"1074\"/> 一开始看到第二个语法用时觉得很奇怪，对-1不是很了解，下面简单介绍一下reshape的性质：</p>\n<p>reshape函数是对narray的数据结构进行维度变换，由于变换遵循对象元素个数不变，在进行变换时，假设一个数据对象narray的总元素个数为N，<strong>如果我们给出一个维度为（m，-1）时，我们就理解为将对象变换为一个二维矩阵，矩阵的第一维度大小为m，第二维度大小为N/m</strong></p>\n<p>所以说当为（3，-1）时也是满足的！</p>\n<p></p>\n<p><span style=\"color:#fe2c24;\">        <strong>3、Find indices of non-zero elements from [1,2,0,0,4,0] (★☆☆)')</strong></span></p>\n<p><strong><span style=\"color:#fe2c24;\">                从数组[1,2,0,0,4,0]中找出非0元素的下标</span></strong></p>\n<p>对于这个问题有2种解法：所用到的语法如下</p>\n<p>①利用循环嵌套语句</p>\n<p>②直接利用自带语法</p>\n<pre><code class=\"hljs\">x3=np.array([1,2,0,0,4,0])\nprint(x3)\nfor i in range(len(x3)):\n    if x3[i]!=0:\n        print(i)\n        \nprint(np.nonzero([1,2,0,0,4,0]))</code></pre>\n<p><img alt=\"\" height=\"304\" src=\"image\\78ec496e1c2f4d208cae89e8541d0939.png\" width=\"1112\"/> </p>\n<p>在这里我犯了个大错，直接用惯性思维去使用循环嵌套语句去寻找非0元素。直接调用numpy中自带的语法就行了！！！希望小伙伴们不要犯和我一样的低级错误！！！</p>\n<p><span style=\"color:#fe2c24;\">     <strong>   4、Create a 3x3 identity matrix (★☆☆)')</strong></span></p>\n<p><strong><span style=\"color:#fe2c24;\">                创建3x3的对角矩阵</span></strong></p>\n<p>对于这个问题有3种解法：所用到的语法如下</p>\n<p>①np.identity</p>\n<p>②np.eye</p>\n<p>③np.diag</p>\n<pre><code class=\"hljs\">##“对角矩阵(diagonal matrix)是一个主对角线之外的元素皆为0的矩阵\n\n\n# identity 只能创建方阵，eye要灵活一些，可以创建NxM的矩阵，也可以控制对角线的位置\n\nprint(np.identity(3))\nprint('-----------------------------------')\nprint(np.eye(3,3,0)) #默认第一个和第二个参数相等，第三个参数为对角线位置\nnp.diag([1,1,1])</code></pre>\n<p><img alt=\"\" height=\"448\" src=\"image\\e2bbfcb62dc24bf8ac43a0d329d7904e.png\" width=\"1061\"/></p>\n<p> 考研过去这么长时间，我都忘了什么是对角矩阵，研究生白考了！！在这里也给大家科普一下：</p>\n<p>对角矩阵(diagonal matrix)是一个<a href=\"https://baike.baidu.com/item/%E4%B8%BB%E5%AF%B9%E8%A7%92%E7%BA%BF/4269887?fromModule=lemma_inlink\" title=\"主对角线\">主对角线</a>之外的元素皆为0的<a href=\"https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5/18069?fromModule=lemma_inlink\" title=\"矩阵\">矩阵</a>，常写为diag（a1，a2,...,an) 。对角矩阵可以认为是矩阵中最简单的一种，值得一提的是：<a href=\"https://baike.baidu.com/item/%E5%AF%B9%E8%A7%92%E7%BA%BF/9706033?fromModule=lemma_inlink\" title=\"对角线\">对角线</a>上的元素可以为 0 或其他值，对角线上元素相等的对角矩阵称为<a href=\"https://baike.baidu.com/item/%E6%95%B0%E9%87%8F%E7%9F%A9%E9%98%B5/11034374?fromModule=lemma_inlink\" title=\"数量矩阵\">数量矩阵</a>；对角线上元素全为1的对角矩阵称为<a href=\"https://baike.baidu.com/item/%E5%8D%95%E4%BD%8D%E7%9F%A9%E9%98%B5/8540268?fromModule=lemma_inlink\" title=\"单位矩阵\">单位矩阵</a>。对角矩阵的运算包括和、差运算、数乘运算、同阶对角阵的乘积运算，且结果仍为对角阵。</p>\n<p><img alt=\"\" height=\"639\" src=\"image\\ceea9d7c0a204d338e164625499b4a50.png\" width=\"950\"/></p>\n<p>  identity 只能创建方阵，eye要灵活一些，可以创建NxM的矩阵，也可以控制对角线的位置</p>\n<p>所以博主的建议是我们要多使用eye函数可以灵活创建矩阵！！</p>\n<p></p>\n<p><span style=\"color:#fe2c24;\">     <strong>   5、Create a 3x3x3 array with random values (★☆☆)')</strong></span></p>\n<p><strong><span style=\"color:#fe2c24;\">                用随机数创建一个3x3x3的矩阵</span></strong></p>\n<pre><code class=\"hljs\">x4=np.random.random((3,3,3))\nx4</code></pre>\n<p><img alt=\"\" height=\"323\" src=\"image\\cbfd37756a0841c08a537e9e36ef1693.png\" width=\"1058\"/></p>\n<p>我们需要注意的是，可以直接使用random函数去调用不同类型</p>\n<pre><code class=\"hljs\">X=np.random.randint((3,3,3))\nX</code></pre>\n<p><img alt=\"\" height=\"118\" src=\"image\\02efcd161fb942ae93431a78f8888c5d.png\" width=\"1069\"/></p>\n<p> 我一开始用双random创建的浮点数，看着不是很整洁，于是我想用random.randint去创建整型的数组，发现创建的是一维数组。这个时候我们想要去创建整型数组，可以用ceil,floor函数去向上，向下取整！！</p>\n</div>\n</div>"}