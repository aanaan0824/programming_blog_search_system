{"blogid": "122524446", "writerAge": "码龄7年", "writerBlogNum": "37", "writerCollect": "183", "writerComment": "11", "writerFan": "10", "writerGrade": "3级", "writerIntegral": "734", "writerName": "scarftree", "writerProfileAdress": "writer_image\\profile_122524446.jpg", "writerRankTotal": "36606", "writerRankWeekly": "184894", "writerThumb": "39", "writerVisitNum": "43287", "blog_read_count": "5754", "blog_time": "于 2022-01-16 17:02:24 发布", "blog_title": "C++ make_shared使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>C++内存分四大块</p>\n<ol><li> <p>全局 主函数运行前使用，初始化</p> </li><li> <p>静态 变量第一次使用前，初始化<br/> 以上两块内存都会在程序结束后自动释放</p> </li><li> <p>堆区 由程序员管理，C++管理方法有new delete等关键字</p> </li><li> <p>栈区 由编译器管理，存放程序的局部变量和参数</p> </li></ol>\n<p>因此我们需要关注堆区的内存管理。内存管理经常会碰到忘记释放造成的内存泄露。<br/> 在C++中引入了智能指针，有shared_ptr，unique_ptr和weak_ptr。</p>\n<h2><a id=\"shared_ptr_12\"></a>shared_ptr</h2>\n<p>工作中shared_ptr用得比较多，今天做个总结<br/> 使用智能指针，需要引入头文件，shared_ptr顾名思义是多个指针指向一块内存。<br/> 被管理对象有一个引用计数，这个计数记录在每个指针上，几个shared_ptr指向它，这个数字就是几，当没有任何shared_ptr指向它时，引用计数为0，这时，自动释放对象。<br/> <em><strong>其功能在于当所有指针都释放（或是不再指向对象）的时候，自动释放对象</strong></em></p>\n<p>即，<em>当一个所有指向这块内存的指针生命周期结束时，这块内存会被释放</em><br/> <em>智能指针的唯一作用，就是自动delete对象</em>，即C++11的新特性，内存管理机制。<br/> 智能指针既然会自动delete对象，我们就不能再去手动delete对象了，否则，也会发生多次释放的问题</p>\n<p>例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory&gt;</span></span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 无参构造函数</span>\n    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 有参数的构造函数</span>\n    <span class=\"token keyword\">explicit</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 析构函数</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token class-name\">Test</span><span class=\"token operator\">::</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"无参构造函数\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token class-name\">Test</span><span class=\"token operator\">::</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"有参构造函数，a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token class-name\">Test</span><span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构函数\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">auto</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Test<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 划分堆空间</span>\n    std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">&gt;</span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建智能指针</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印引用计数</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">&gt;</span> <span class=\"token function\">sp2</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建另一个智能指针</span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印引用计数</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// sp2生命周期结束，sp引用计数减1</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印引用计数</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\n</code></pre>\n<p>执行结果</p>\n<pre><code class=\"prism language-cpp\">无参构造函数\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">1</span>\n析构函数\n</code></pre>\n<h2><a id=\"make_shared_77\"></a>make_shared的引入</h2>\n<p>一个坑</p>\n<pre><code class=\"prism language-cpp\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">auto</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Test<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 划分堆空间</span>\n    std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">&gt;</span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建智能指针</span>\n    std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">&gt;</span> <span class=\"token function\">sp2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建另一个智能指针</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这段程序会抛出异常 <em>double free detected</em></p>\n<p>new关键字返回的是对应的指针类型。</p>\n<p>此处用了两个智能指针管理同一块内存，因为sp 和sp2不知道彼此的存在，所以也会重复释放。</p>\n<p>同一个对象只能用同一套内存管理体系，如果它已经有智能指针了，那么再创建智能指针时，需要通过原来已有的指针创建，而不能重复用原始空间来创建。</p>\n<p>STL库提供了make_shared函数，其原型为</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">&gt;</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> std<span class=\"token operator\">::</span><span class=\"token function\">make_shared</span><span class=\"token punctuation\">(</span>Args <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>官方鼓励用make_shared函数来创建对象，而不要手动去new，这样就可以防止我们去使用原始指针创建多个引用计数体系。</p>\n<p>例</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">auto</span> sp <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分配堆空间，创建智能指针</span>\n    <span class=\"token keyword\">auto</span> sp2 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建另一个智能指针</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>参考<br/> https://blog.csdn.net/fl2011sx/article/details/103941346</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}