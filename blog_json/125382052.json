{"blogid": "125382052", "writerAge": "码龄179天", "writerBlogNum": "16", "writerCollect": "22", "writerComment": "28", "writerFan": "296", "writerGrade": "3级", "writerIntegral": "529", "writerName": "崇令", "writerProfileAdress": "writer_image\\profile_125382052.jpg", "writerRankTotal": "31709", "writerRankWeekly": "6268", "writerThumb": "342", "writerVisitNum": "5484", "blog_read_count": "1886", "blog_time": "于 2022-06-21 23:16:34 发布", "blog_title": "Mybatis中如何实现一对一，一对多的关联查询？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>MyBatis实现一对一、一对多关联查询一般有两种方式：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"color:#ff0000;\">方式一：sqlMapper配置文件</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"color:#ff0000;\">一对一：在resultMap标签中使用 </span><span style=\"color:#ff0000;\">association </span><span style=\"color:#ff0000;\">标签</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"color:#ff0000;\">一对多：在</span><span style=\"color:#ff0000;\">resultMap </span><span style=\"color:#ff0000;\">标签中使用collection</span> <span style=\"color:#ff0000;\">标签</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"color:#ff0000;\">方式二：注解</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"color:#ff0000;\">一对一：在@Results</span> <span style=\"color:#ff0000;\">注解中的@Result注解中使用@One注解</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"color:#ff0000;\">一对多：在@Results</span> <span style=\"color:#ff0000;\">注解中的@Result</span> <span style=\"color:#ff0000;\">注解中使用@Many注解</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"color:#0d0016;\">接下来，我们一起来看看这两种方式分别是怎么用代码实现的？</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"color:#0d0016;\">这里需要用到学生student和班级class两张表，如下图所示:</span></p>\n<p style=\"margin-left:.0001pt;\"><img alt=\"\" class=\"left\" height=\"330\" src=\"image\\f5858096ea2844bc9c60baf86f7eb10e.png\" width=\"331\"/><img alt=\"\" height=\"189\" src=\"image\\a8083a84abfb41b8b51749ba762bfcd5.png\" width=\"327\"/></p>\n<p> </p>\n<h2> <span style=\"color:#0d0016;\">一、一对一查询（</span><span style=\"color:#ff0000;\">sqlMapper配置文件</span><span style=\"color:#0d0016;\">）</span></h2>\n<h3><strong><span style=\"color:#0d0016;\">1. 需求</span></strong></h3>\n<p><span style=\"color:#0d0016;\">一个学生相对应一个专属班级，所以<strong>学生</strong></span><strong><span style=\"color:#0d0016;\">Student</span></strong><span style=\"color:#0d0016;\">对<strong>班级</strong></span><strong><span style=\"color:#0d0016;\">Banji</span></strong><span style=\"color:#0d0016;\">是一对一的关系；</span></p>\n<p>查询需求：查询一个学生，与此同时查询出该学生所属的班级信息（用sqlMapper的方式）</p>\n<h3><strong><span style=\"color:#0d0016;\">2. 创建Student和Banji实体类</span></strong></h3>\n<p><strong><span style=\"color:#0d0016;\"><span style=\"background-color:#fef2f0;\">Student.java</span></span></strong></p>\n<pre><code>public class Student {\n\tprivate int sid;\n\tprivate String sname;\n\tprivate Date birthday;\n\tprivate String ssex;\n\tprivate int classid;\n\t// 外部属性\n\tprivate Banji bj;\n\n    // 省略无参、有参、get、set、toString方法\n\n}</code></pre>\n<p><strong><span style=\"background-color:#fef2f0;\">Banji.java </span></strong></p>\n<pre><code>public class Banji {\n\tprivate int classid;\n\tprivate String classname;\n\n    //  省略无参、有参、get、set、toString方法\n\n}</code></pre>\n<h3><strong><span style=\"color:#0d0016;\">3. 创建StudentMapper接口</span></strong></h3>\n<pre><code>public interface StudentMapper {\n\n\t//定义方法\n\tpublic List&lt;Student&gt; findAllStudent();\t\n\n}</code></pre>\n<h3>4. 配置 <strong><span style=\"color:#0d0016;\">StudentMapper.xml</span></strong></h3>\n<p><strong><span style=\"color:#0d0016;\">PS:</span></strong><span style=\"color:#0d0016;\">查询的</span>返回值类型使用的<span style=\"background-color:#fef2f0;\">resultMap</span>，和上面<span style=\"background-color:#fef2f0;\">resultMap</span>标签中的<span style=\"background-color:#fef2f0;\">id</span>名必须保持一致</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper\n PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com.ape.mapper.StudentMapper\"&gt;\n\t&lt;!-- 手动映射\n\t\tcolumn：数据表的字段名\n\t\tproperty：java中实体类的属性\n\t--&gt;\n\t&lt;resultMap type=\"Student\" id=\"Student_Class_Map\"&gt;\n\t\t&lt;result column=\"sid\"  property=\"sid\"/&gt;\n\t\t&lt;result column=\"sname\"  property=\"sname\"/&gt;\n\t\t&lt;result column=\"birthday\"  property=\"birthday\"/&gt;\n\t\t&lt;result column=\"ssex\"  property=\"ssex\"/&gt;\n\t\t&lt;result column=\"classid\"  property=\"classid\"/&gt;\n\t\t&lt;association property=\"bj\"&gt;\n\t\t\t&lt;result column=\"classid\"  property=\"classid\"/&gt;\n\t\t\t&lt;result column=\"classname\"  property=\"classname\"/&gt;\n\t\t&lt;/association&gt;\t\t\n\t&lt;/resultMap&gt;\n\t\n\t&lt;!--一对一查询--&gt;\n\t&lt;select id=\"findAllStudent\" resultMap=\"Student_Class_Map\"&gt;\n\t \tselect * from student\n\t \tinner join class on student.classid=class.classid\n\t&lt;/select&gt;\n\n&lt;/mapper&gt;</code></pre>\n<h3>5. 测试 Test</h3>\n<pre><code>public class Test01 {\n\tpublic static void main(String[] args) {\n\t\n\t\tSqlSession sqlSession = DaoUtil.getSqlSession();\n\t\tStudentMapper sm = sqlSession.getMapper(StudentMapper.class);\n\t\t\n\t\t//一对一查询\n\t\tList&lt;Student&gt; slist = sm.findAllStudent();\n\t\tfor (Student s:slist) {\n\t\t\tSystem.out.println(s);\n\t\t}\n\n\t\t//释放资源\n\t\tDaoUtil.closeSource(sqlSession);\n\n}</code></pre>\n<p>输出结果为：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\01c6d11b654d4677aefefd57688597b5.png\"/>  </p>\n<h2><span style=\"color:#0d0016;\">二、一对一查询（</span><span style=\"color:#ff0000;\">注解</span><span style=\"color:#0d0016;\">）</span></h2>\n<h3><strong><span style=\"color:#0d0016;\">1. 需求</span></strong></h3>\n<p><span style=\"color:#0d0016;\">一个学生相对应一个专属班级，所以<strong>学生</strong></span><strong><span style=\"color:#0d0016;\">Student</span></strong><span style=\"color:#0d0016;\">对<strong>班级</strong></span><strong><span style=\"color:#0d0016;\">Banji</span></strong><span style=\"color:#0d0016;\">是一对一的关系；</span></p>\n<p>查询需求：查询一个学生，与此同时查询出该学生所属的班级信息（用注解的方式）</p>\n<h3><strong><span style=\"color:#0d0016;\">2. 创建Student和Banji实体类</span></strong></h3>\n<p><strong><span style=\"color:#0d0016;\"><span style=\"background-color:#fef2f0;\">Student.java</span></span></strong></p>\n<pre><code>public class Student {\n\tprivate int sid;\n\tprivate String sname;\n\tprivate Date birthday;\n\tprivate String ssex;\n\tprivate int classid;\n\t// 外部属性\n\tprivate Banji bj;\n\n    // 省略无参、有参、get、set、toString方法\n\n}</code></pre>\n<p><strong><span style=\"background-color:#fef2f0;\">Banji.java </span></strong></p>\n<pre><code>public class Banji {\n\tprivate int classid;\n\tprivate String classname;\n\n    //  省略无参、有参、get、set、toString方法\n\n}</code></pre>\n<h3><strong><span style=\"color:#0d0016;\">3. 创建StudentMapper接口</span></strong></h3>\n<pre><code>public interface StudentMapper {\n\n//学生对班级一对一，做映射\n@Results({\n\t@Result(column = \"classid\",property = \"classid\"),\n\t@Result(column = \"classid\",property = \"bj\",\n\t\tone=@One(select =\"com.ape.mapper.BanjiMapper.findBanjiByClassid\" ))\t\n})\n\t\n\n@Select(\"select * from student\")\npublic List&lt;Student&gt; findAllStudent();\n\n}</code></pre>\n<h3><strong><span style=\"color:#0d0016;\">4. 创建BanjiMapper接口</span></strong></h3>\n<pre><code>public interface BanjiMapper {\n\n\t//学生对班级，找班级对象\n\t@Select(\"select * from class where classid=#{v}\")\n\tpublic Banji findBanjiByClassid(int classid);\n\n}</code></pre>\n<h3>5. 测试 Test</h3>\n<pre><code>public class Test01 {\n\tpublic static void main(String[] args) {\n\t\n\t\tSqlSession sqlSession = DaoUtil.getSqlSession();\n\t\tStudentMapper sm = sqlSession.getMapper(StudentMapper.class);\n\t\t\n\t\tList&lt;Student&gt; slist = sm.findAllStudent();\n\t\tfor(Student s:slist) {\n\t\t\tSystem.out.println(s);\n\t\t}\n        \n        DaoUtil.closeSource(sqlSession);\n\t}\n}</code></pre>\n<p>输出结果为： </p>\n<p><img alt=\"\" src=\"image\\4df15c61f6b048439825212cb79cb224.png\"/></p>\n<p> </p>\n<h2><span style=\"color:#0d0016;\">三、一对多查询（</span><span style=\"color:#ff0000;\">sqlMapper配置文件</span><span style=\"color:#0d0016;\">）</span></h2>\n<p></p>\n<h3><strong><span style=\"color:#0d0016;\">1. 需求</span></strong></h3>\n<p><span style=\"color:#0d0016;\">一个班级对应多个学生，所以<strong>班级</strong></span><strong><span style=\"color:#0d0016;\">Banji</span></strong><span style=\"color:#0d0016;\">对<strong>学生</strong></span><strong><span style=\"color:#0d0016;\">Student</span></strong><span style=\"color:#0d0016;\">是一对多的关系；</span></p>\n<p>查询需求：查询一个班级，与此同时查询出该班级所有的学生信息（用sqlMapper的方式）</p>\n<h3><strong><span style=\"color:#0d0016;\">2. 创建Banji和Student实体类</span></strong></h3>\n<p><strong><span style=\"background-color:#fef2f0;\">Banji.java </span></strong></p>\n<pre><code>public class Banji {\n\tprivate int classid;\n\tprivate String classname;\n    //外部属性\n\tprivate List&lt;Student&gt; slist;\n\n    //  省略无参、有参、get、set、toString方法\n\n}</code></pre>\n<p><strong><span style=\"color:#0d0016;\"><span style=\"background-color:#fef2f0;\">Student.java</span></span></strong></p>\n<pre><code>public class Student {\n\tprivate int sid;\n\tprivate String sname;\n\tprivate Date birthday;\n\tprivate String ssex;\n\tprivate int classid;\n\n    // 省略无参、有参、get、set、toString方法\n\n}</code></pre>\n<h3><strong><span style=\"color:#0d0016;\">3. 创建BanjiMapper接口</span></strong></h3>\n<pre><code>public interface BanjiMapper {\n\n\t//班级对学生，一对多\n\tpublic List&lt;Banji&gt; findAllBanji();\n\n}</code></pre>\n<h3><strong><span style=\"color:#0d0016;\">4. 配置BanjiMapper.xml</span></strong></h3>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper\n PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n \n&lt;mapper namespace=\"com.ape.mapper.BanjiMapper\"&gt;\n\n\t&lt;resultMap type=\"Banji\" id=\"Class_Student_Map\"&gt;\n\t\t&lt;result column=\"classid\"  property=\"classid\"/&gt;\n\t\t&lt;result column=\"classname\"  property=\"classname\"/&gt;\n\t\t&lt;collection property=\"slist\" ofType=\"Student\"&gt;\n\t\t\t&lt;result column=\"sid\"  property=\"sid\"/&gt;\n\t\t\t&lt;result column=\"sname\"  property=\"sname\"/&gt;\n\t\t\t&lt;result column=\"birthday\"  property=\"birthday\"/&gt;\n\t\t\t&lt;result column=\"ssex\"  property=\"ssex\"/&gt;\n\t\t\t&lt;result column=\"classid\"  property=\"classid\"/&gt;\n\t\t&lt;/collection&gt;\n\t&lt;/resultMap&gt;\n\n\t&lt;select id=\"findAllBanji\" resultMap=\"Class_Student_Map\"&gt;\n\t\tselect * from class\n\t\tleft join student on class.classid=student.classid\n\t\torder by class.classid\n\t&lt;/select&gt;\n\n&lt;/mapper&gt;\n</code></pre>\n<h3>5. 测试 Test</h3>\n<pre><code>public class Test01 {\n\tpublic static void main(String[] args) {\n\t\n\t\tSqlSession sqlSession = DaoUtil.getSqlSession();\n        BanjiMapper bm = sqlSession.getMapper(BanjiMapper.class);\n\n\t\tList&lt;Banji&gt; blist = bm.findAllBanji();\n\t\tfor (Banji b:blist) {\n\t\t\tSystem.out.println(\"班级编号\"+b.getClassid()+\",\"+\"班级名称\"+b.getClassname());\n\t\t\tfor(Student s:b.getSlist()) {\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\t\t\tSystem.out.println(\"====================================\");\n\t\t}\n\n\t\t//释放资源\n\t\tDaoUtil.closeSource(sqlSession);\n    }\n}</code></pre>\n<p>输出结果为：</p>\n<p><img alt=\"\" src=\"image\\d17a019de2b84f508c42b464de876da2.png\"/></p>\n<p> </p>\n<h2><span style=\"color:#0d0016;\">四、一对多查询（</span><span style=\"color:#ff0000;\">注解</span><span style=\"color:#0d0016;\">）</span></h2>\n<p></p>\n<h3><strong><span style=\"color:#0d0016;\">1. 需求</span></strong></h3>\n<p><span style=\"color:#0d0016;\">一个班级对应多个学生，所以<strong>班级</strong></span><strong><span style=\"color:#0d0016;\">Banji</span></strong><span style=\"color:#0d0016;\">对<strong>学生</strong></span><strong><span style=\"color:#0d0016;\">Student</span></strong><span style=\"color:#0d0016;\">是一对多的关系；</span></p>\n<p>查询需求：查询一个班级，与此同时查询出该班级所有的学生信息（用注解的方式）</p>\n<h3><strong><span style=\"color:#0d0016;\">2. 创建Banji和Student实体类</span></strong></h3>\n<p><strong><span style=\"background-color:#fef2f0;\">Banji.java </span></strong></p>\n<pre><code>public class Banji {\n\tprivate int classid;\n\tprivate String classname;\n    //外部属性\n\tprivate List&lt;Student&gt; slist;\n\n    //  省略无参、有参、get、set、toString方法\n\n}</code></pre>\n<p><strong><span style=\"color:#0d0016;\"><span style=\"background-color:#fef2f0;\">Student.java</span></span></strong></p>\n<pre><code>public class Student {\n\tprivate int sid;\n\tprivate String sname;\n\tprivate Date birthday;\n\tprivate String ssex;\n\tprivate int classid;\n\n    // 省略无参、有参、get、set、toString方法\n\n}</code></pre>\n<h3><strong><span style=\"color:#0d0016;\">3. 创建BanjiMapper接口</span></strong></h3>\n<pre><code>public interface BanjiMapper {\n\n    //班级对学生一对多，做映射\n\t@Results({\n\t\t@Result(column = \"classid\",property = \"classid\"),\n\t\t@Result(column = \"classid\",property = \"slist\",\n\t\t\t\tmany=@Many(select=\"com.ape.mapper.StudentMapper.findStudentByClassid\"))\t\t\n\t})\n\n\t\t\n\t@Select(\"select * from class\")\n\tpublic List&lt;Banji&gt; findAllBanji();\n}</code></pre>\n<h3><strong><span style=\"color:#0d0016;\">4. 创建StudentMapper接口</span></strong></h3>\n<pre><code>public interface StudentMapper {\n    \n    //班级对学生一对多，找学生对象\n\t@Select(\"select * from student where classid=#{v}\")\n\tpublic Student findStudentByClassid(int classid);\n\n}</code></pre>\n<h3>5. 测试 Test</h3>\n<pre><code>public class Test01 {\n\tpublic static void main(String[] args) {\n\t\n\t\tSqlSession sqlSession = DaoUtil.getSqlSession();\n        BanjiMapper bm = sqlSession.getMapper(BanjiMapper.class);\n\n\t\tList&lt;Banji&gt; blist = bm.findAllBanji();\n\t\tfor (Banji b:blist) {\n\t\t\tSystem.out.println(\"班级编号\"+b.getClassid()+\",\"+\"班级名称\"+b.getClassname());\n\t\t\tfor(Student s:b.getSlist()) {\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\t\t\tSystem.out.println(\"====================================\");\n\t\t}\n\n\t\t//释放资源\n\t\tDaoUtil.closeSource(sqlSession);\n    }\n}</code></pre>\n<p>输出结果为： </p>\n<p><img alt=\"\" src=\"image\\b3191c80a4ec4c9fb34ef3e8a4ab0160.png\"/></p>\n<p>其实，日常这样的例子也不少：</p>\n<p><span style=\"color:#fe2c24;\"><strong>一对一：</strong></span></p>\n<p>一个人对应一张身份证</p>\n<p>一张身份证对应一个人</p>\n<p>一个课程对应一个老师</p>\n<p>一个员工对应一个部门</p>\n<p>……</p>\n<p><strong><span style=\"color:#fe2c24;\">一对多：</span></strong></p>\n<p>一个用户可以有多个订单</p>\n<p>一个用户可以有账户</p>\n<p>一个学生可以学多个课程</p>\n<p>一个球队有多个球员</p>\n<p>……</p>\n<p><strong>以上就是Mybatis的多表关联查询（一对一、一对多）的全部内容。</strong></p>\n<p><strong>看完如果对你有帮助，点赞支持一下呀！</strong><br/>  </p>\n<p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"image\\6ef74f6c735b4c599319a449fdefa333.jpeg\" width=\"150\"/></p>\n<p> </p>\n<p> </p>\n<p></p>\n</div>\n</div>"}