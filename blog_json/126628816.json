{"blogid": "126628816", "writerAge": "码龄2年", "writerBlogNum": "54", "writerCollect": "279", "writerComment": "315", "writerFan": "905", "writerGrade": "5级", "writerIntegral": "1681", "writerName": "烫嘴的辛拉面", "writerProfileAdress": "writer_image\\profile_126628816.jpg", "writerRankTotal": "11501", "writerRankWeekly": "147", "writerThumb": "360", "writerVisitNum": "6927", "blog_read_count": "971", "blog_time": "于 2022-08-31 19:17:33 发布", "blog_title": "【Java】想进大厂？你应该知道的算法经典习题(一)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>✅作者简介：大家好我是烫嘴的辛拉面，大家可以叫我拉面。🐭🐭<br/> 📜个人主页: <a href=\"https://blog.csdn.net/weixin_49405762?spm=1011.2421.3001.5343\">weixin_49405762的博客</a><br/> 📕系列专栏： <a href=\"https://blog.csdn.net/weixin_49405762/category_11991236.html?spm=1001.2014.3001.5482\">经典算法习题集</a><br/> 🌞为大🔥推荐一款刷题神器哦 👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_tzdxlm_sf\">点击跳转进入网站</a></p>\n</blockquote>\n<p>☀️前言：从今天开始一个新的专栏 <a href=\"https://blog.csdn.net/weixin_49405762/category_11991236.html?spm=1001.2014.3001.5482\">经典算法习题集</a>，整理牛客网经典算法的习题练习，我将用java语言来解题。牛客网除了算法题单之外还有其他热门的各种提单，应有尽有，大家快刷起来吧<a href=\"https://www.nowcoder.com/link/pc_csdncpt_tzdxlm_sf\">点击跳转进入牛客网</a></p>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_9\">✏️数据结构</a></li><li><ul><li><a href=\"#AB1_10\">✒️AB1[模板]栈</a></li><li><ul><li><a href=\"#_11\">题目描述</a></li><li><a href=\"#_39\">解题思路</a></li><li><a href=\"#Java_42\">代码实现(Java)</a></li></ul>\n</li><li><a href=\"#AB2__100\">✒️AB2 栈的压入、弹出序列</a></li><li><ul><li><a href=\"#_101\">题目描述</a></li><li><a href=\"#_118\">解题思路</a></li><li><a href=\"#_120\">具体做法</a></li><li><a href=\"#_125\">图示</a></li><li><a href=\"#Java_127\">代码实现(Java)：</a></li></ul>\n</li><li><a href=\"#AB3__158\">✒️AB3 有效括号序列</a></li><li><ul><li><a href=\"#_159\">题目描述</a></li><li><a href=\"#_176\">题目主要信息</a></li><li><a href=\"#_180\">解题思路：</a></li><li><a href=\"#_182\">具体做法</a></li><li><a href=\"#_190\">图示</a></li><li><a href=\"#java_192\">代码实现(java)</a></li></ul>\n</li><li><a href=\"#AB4__225\">✒️AB4 逆波兰表达式求值</a></li><li><ul><li><a href=\"#_227\">题目描述</a></li><li><a href=\"#_238\">解题思路</a></li><li><a href=\"#_240\">图示</a></li><li><a href=\"#java_242\">代码实现(java)</a></li></ul>\n</li><li><a href=\"#AB5__301\">✒️AB5 点击消除</a></li><li><ul><li><a href=\"#_302\">题目描述</a></li><li><a href=\"#_322\">解题思路</a></li><li><a href=\"#java_339\">代码实现(java)</a></li></ul>\n</li><li><a href=\"#AB6__389\">✒️AB6 表达式求值</a></li><li><ul><li><a href=\"#_390\">题目描述</a></li><li><a href=\"#_406\">题目的主要信息</a></li><li><a href=\"#_412\">解题思路：</a></li><li><a href=\"#_422\">具体做法</a></li><li><a href=\"#_430\">图示</a></li><li><a href=\"#java_432\">代码实现(java)</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_9\"></a>✏️数据结构</h1>\n<h2><a id=\"AB1_10\"></a>✒️AB1[模板]栈</h2>\n<h3><a id=\"_11\"></a>题目描述</h3>\n<p>请你实现一个栈。<br/> 操作：<br/> push x：将 加x x\\ x 入栈，保证 x x\\ x 为 int 型整数。<br/> pop：输出栈顶，并让栈顶出栈<br/> top：输出栈顶，栈顶不出栈<br/> 输入描述：<br/> 第一行为一个正整数 n n\\ n ，代表操作次数。(1≤n≤100000)(1 \\leq n \\leq 100000)(1≤n≤100000)<br/> 接下来的 n n\\ n ，每行为一个字符串，代表一个操作。保证操作是题目描述中三种中的一种。</p>\n<p>输出描述：<br/> 如果操作为push，则不输出任何东西。<br/> 如果为另外两种，若栈为空，则输出 \"error“<br/> 否则按对应操作输出。<br/> <strong>示例1</strong></p>\n<blockquote>\n<p>输入： 6<br/> push 1<br/> pop<br/> top<br/> push 2<br/> push 3<br/> pop</p>\n</blockquote>\n<blockquote>\n<p>输出：1<br/> error<br/> 3</p>\n</blockquote>\n<h3><a id=\"_39\"></a>解题思路</h3>\n<p>首先看清题目要求，并且根据栈先进后出的特性解决题目 1.用到头文件include这样可以省去建栈等操作，除此之外包含有多种函数 2.将题目分为三种情况，可用if,else语句进行分类，继而进行更进一步划分 3.注意L.pop()用于栈顶的清除，并非用于输出,输出有L.top()函数。</p>\n<h3><a id=\"Java_42\"></a>代码实现(Java)</h3>\n<pre><code class=\"prism language-csharp\">import java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//自己做了个栈，不过没做太多校验</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> size <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack</span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Stack</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> tempStr<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> tempArr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            tempStr <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tempArr <span class=\"token operator\">=</span> tempStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tempArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"push\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>tempArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tempArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"top\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                 stack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n        \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> stackSpace<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        stackSpace <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        stackSpace<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stackSpace<span class=\"token punctuation\">[</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n     <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stackSpace<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"AB2__100\"></a>✒️AB2 栈的压入、弹出序列</h2>\n<h3><a id=\"_101\"></a>题目描述</h3>\n<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。</p>\n<ol><li>0&lt;=pushV.length == popV.length &lt;=1000</li><li>-1000&lt;=pushV[i]&lt;=1000</li><li>pushV 的所有数字均不相同</li></ol>\n<p><strong>示例1</strong></p>\n<blockquote>\n<p>输入：[1,2,3,4,5],[4,5,3,2,1]<br/> 返回值：true<br/> 说明：可以通过 push(1)=&gt;push(2)=&gt;push(3)=&gt;push(4)=&gt;pop()=&gt;push(5)=&gt;pop()=&gt;pop()=&gt;pop()=&gt;pop()<br/> 这样的顺序得到[4,5,3,2,1]这个序列，返回true</p>\n</blockquote>\n<p><strong>示例2</strong></p>\n<blockquote>\n<p>输入：[1,2,3,4,5],[4,3,5,1,2]<br/> 返回值：false<br/> 说明：由于是[1,2,3,4,5]的压入顺序，[4,3,5,1,2]的弹出顺序，要求4，3，5必须在1，2前压入，且1，2不能弹出，但是这样压入的顺序，1又不能在2之前弹出，所以无法形成的，返回false</p>\n</blockquote>\n<h3><a id=\"_118\"></a>解题思路</h3>\n<p>题目要我们判断两个序列是否符合入栈出栈的次序，我们就可以用一个栈来模拟。对于入栈序列，只要栈为空，序列肯定要依次入栈。那什么时候出来呢？自然是遇到一个元素等于当前的出栈序列的元素，那我们就放弃入栈，让它先出来。</p>\n<h3><a id=\"_120\"></a>具体做法</h3>\n<pre><code>step 1：准备一个辅助栈，两个下标分别访问两个序列。\nstep 2：辅助栈为空或者栈顶不等于出栈数组当前元素，就持续将入栈数组加入栈中。\nstep 3：栈顶等于出栈数组当前元素就出栈。\nstep 4：当入栈数组访问完，出栈数组无法依次弹出，就是不匹配的，否则两个序列都访问完就是匹配的。\n</code></pre>\n<h3><a id=\"_125\"></a>图示</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/abeac731c0ab430eaeb72fd318485b14.gif#pic_center\"/></p>\n<h3><a id=\"Java_127\"></a>代码实现(Java)：</h3>\n<pre><code class=\"prism language-csharp\">import java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Stack<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">boolean</span> <span class=\"token function\">IsPopOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> pushA<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> popA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n <span class=\"token operator\">=</span> pushA<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//辅助栈</span>\n        <span class=\"token class-name\">Stack<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Stack<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//遍历入栈的下标</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//遍历出栈的数组</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//入栈：栈为空或者栈顶不等于出栈数组</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> popA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pushA<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//栈顶等于出栈数组</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> popA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//不匹配序列</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\44cd0d022bed4bc3b1951c14791c519f.png\"/></p>\n<h2><a id=\"AB3__158\"></a>✒️AB3 有效括号序列</h2>\n<h3><a id=\"_159\"></a>题目描述</h3>\n<p>给出一个仅包含字符’(‘,’)‘,’{‘,’}‘,’[‘和’]',的字符串，判断给出的字符串是否是合法的括号序列<br/> 括号必须以正确的顺序关闭，\"()“和”()[]{}“都是合法的括号序列，但”(]“和”([)]\"不合法。</p>\n<p>数据范围：字符串长度 0≤n≤100000\\le n \\le 100000≤n≤10000<br/> 要求：空间复杂度 O(n)O(n)O(n)，时间复杂度 O(n)O(n)O(n)<br/> <strong>示例1</strong></p>\n<blockquote>\n<p>输入：“()[]{}”<br/> 返回值：true</p>\n</blockquote>\n<p><strong>示例2</strong></p>\n<blockquote>\n<p>输入：“[]”<br/> 返回值：true</p>\n</blockquote>\n<p><strong>示例3</strong></p>\n<blockquote>\n<p>输入：“([)]”<br/> 返回值：false</p>\n</blockquote>\n<h3><a id=\"_176\"></a>题目主要信息</h3>\n<pre><code>给定一个只包含大中小左右括号的字符串，判断其中括号是否合法\n中小括号的数学顺序与合法无关，只需要每种左括号在右边有相应匹配的右括号即可，不可交叉匹配，应该是括号嵌套\n</code></pre>\n<h3><a id=\"_180\"></a>解题思路：</h3>\n<p>括号的匹配规则应该符合先进后出原理：最外层的括号即最早出现的左括号，也对应最晚出现的右括号，即先进后出，因此可以使用同样先进后出的栈：遇到左括号就将相应匹配的右括号加入栈中，后续如果是合法的，右括号来的顺序就是栈中弹出的顺序。</p>\n<h3><a id=\"_182\"></a>具体做法</h3>\n<pre><code>step 1：创建辅助栈，遍历字符串。\nstep 2：每次遇到小括号的左括号、中括号的左括号、大括号的左括号，就将其对应的呦括号加入栈中，期待在后续遇到。\nstep 3：如果没有遇到左括号但是栈为空，说明直接遇到了右括号，不合法。\nstep 4：其他情况下，如果遇到右括号，刚好会与栈顶元素相同，弹出栈顶元素继续遍历。\nstep 5：理论上，只要括号是匹配的，栈中元素最后是为空的，因此检查栈是否为空即可最后判断是否合法。\n</code></pre>\n<h3><a id=\"_190\"></a>图示</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f5572158eecd4e53881172986073075f.gif#pic_center\"/></p>\n<h3><a id=\"java_192\"></a>代码实现(java)</h3>\n<pre><code class=\"prism language-csharp\">import java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">boolean</span> isValid <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//辅助栈</span>\n        <span class=\"token class-name\">Stack<span class=\"token punctuation\">&lt;</span>Character<span class=\"token punctuation\">&gt;</span></span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Stack<span class=\"token punctuation\">&lt;</span>Character<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">//遍历字符串</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n            <span class=\"token comment\">//遇到左小括号</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> \n                <span class=\"token comment\">//期待遇到右小括号</span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token comment\">//遇到左中括号</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'['</span><span class=\"token punctuation\">)</span> \n                <span class=\"token comment\">//期待遇到右中括号</span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token comment\">//遇到左打括号</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'{'</span><span class=\"token punctuation\">)</span> \n                <span class=\"token comment\">//期待遇到右打括号</span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token comment\">//必须有左括号的情况下才能遇到右括号</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//栈中是否还有元素</span>\n        <span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f6b9a668878a4f91b71f096f30814344.png\"/></p>\n<h2><a id=\"AB4__225\"></a>✒️AB4 逆波兰表达式求值</h2>\n<h3><a id=\"_227\"></a>题目描述</h3>\n<p>给定一个逆波兰表达式，求表达式的值。<br/> 数据范围：表达式长度满足 1≤n≤104 1 \\le n \\le 10^4 \\ 1≤n≤104 ，表达式中仅包含数字和 + ，- , * , / ，其中数字的大小满足 ∣val∣≤200 |val| \\le 200 \\ ∣val∣≤200 。<br/> <strong>示例1</strong></p>\n<blockquote>\n<p>输入：[“2”,“1”,“+”,“4”,“*”]<br/> 返回值：12</p>\n</blockquote>\n<p><strong>示例2</strong></p>\n<blockquote>\n<p>输入：[“2”,“0”,“+”]<br/> 返回值：2</p>\n</blockquote>\n<h3><a id=\"_238\"></a>解题思路</h3>\n<p>逆波兰表达式求值的过程可以借助栈来求解，在遍历数组的时候，判断当前是否是数字，如果是就压入栈中，不是说明遇到了运算符，从栈中弹出两个数字进行运算即可。</p>\n<h3><a id=\"_240\"></a>图示</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/9d014bc0a0f448caa82ec8e11d70da22.gif\"/></p>\n<h3><a id=\"java_242\"></a>代码实现(java)</h3>\n<pre><code class=\"prism language-csharp\">import java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param tokens string字符串一维数组 \n     * @return int整型\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> evalRPN <span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 栈</span>\n        <span class=\"token class-name\">Stack<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Stack<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 长度</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 遍历</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 说明是数字，则押入栈</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 说明遇到运算符</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 弹出两个元素</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num2 <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num1 <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//判断+ - * /</span>\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">:</span>\n                        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">:</span>\n                        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">:</span>\n                        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">:</span>\n                        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 用于判断token是数字还是运算符</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">boolean</span> <span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a203b76e55f24df29939f13cfef8869d.png\"/></p>\n<h2><a id=\"AB5__301\"></a>✒️AB5 点击消除</h2>\n<h3><a id=\"_302\"></a>题目描述</h3>\n<p>牛牛拿到了一个字符串。<br/> 他每次“点击”，可以把字符串中相邻两个相同字母消除，例如，字符串\"abbc\"点击后可以生成\"ac\"。<br/> 但相同而不相邻、不相同的相邻字母都是不可以被消除的。<br/> 牛牛想把字符串变得尽可能短。他想知道，当他点击了足够多次之后，字符串的最终形态是什么？<br/> 输入描述：<br/> 一个字符串，仅由小写字母组成。（字符串长度不大于300000）<br/> 输出描述：<br/> 一个字符串，为“点击消除”后的最终形态。若最终的字符串为空串，则输出0。<br/> <strong>示例1</strong></p>\n<blockquote>\n<p>输入：abbc<br/> 输出：ac</p>\n</blockquote>\n<p><strong>示例2</strong></p>\n<blockquote>\n<p>输入：abba<br/> 输出：0</p>\n</blockquote>\n<p><strong>示例3</strong></p>\n<blockquote>\n<p>输入：bbbbb<br/> 输出：b</p>\n</blockquote>\n<h3><a id=\"_322\"></a>解题思路</h3>\n<p>分为两步来解决：</p>\n<p>1.比较消除相同的字符</p>\n<p>2.顺序输出不同的字符</p>\n<p>步骤1：</p>\n<p>遍历字符，放入栈中。当栈为空栈时(也就是遍历第一次字符的时候，此时栈为空)和栈顶元素和当前遍历的字符不相等时，将该字符放入栈中。<br/> 反之说明当前遍历的字符和栈顶字符是相同的，那么消除(移除)</p>\n<p>步骤2：</p>\n<p>判断栈是否为空，为空说明全部消除，不为空则顺序输出，因为栈是先进后出，这里要保证顺序的话，可以把当前栈的字符放入另外一个栈，然后再输出即保证顺序输出。</p>\n<h3><a id=\"java_339\"></a>代码实现(java)</h3>\n<pre><code class=\"prism language-csharp\">import java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Stack<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">eliminate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tsirhvtujuzdnwprhoihkzvckc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">eliminate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abba\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     *\n     * @param s string字符串\n     * @return bool布尔型\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> eliminate <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> chars <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack<span class=\"token punctuation\">&lt;</span>Character<span class=\"token punctuation\">&gt;</span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Stack<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>chars<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> chars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 目的是为了顺序输出</span>\n            <span class=\"token class-name\">Stack<span class=\"token punctuation\">&lt;</span>Character<span class=\"token punctuation\">&gt;</span></span> stack2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Stack<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h2><a id=\"AB6__389\"></a>✒️AB6 表达式求值</h2>\n<h3><a id=\"_390\"></a>题目描述</h3>\n<p>请写一个整数计算器，支持加减乘三种运算和括号。<br/> 数据范围：0≤∣s∣≤1000\\le |s| \\le 1000≤∣s∣≤100，保证计算结果始终在整型范围内<br/> 要求：空间复杂度： O(n)O(n)O(n)，时间复杂度 O(n)O(n)O(n)<br/> <strong>示例1</strong></p>\n<blockquote>\n<p>输入：“1+2”<br/> 返回值：3</p>\n</blockquote>\n<p><strong>示例2</strong></p>\n<blockquote>\n<p>输入：“(2*(3-4))*5”<br/> 返回值：-10</p>\n</blockquote>\n<p><strong>示例3</strong></p>\n<blockquote>\n<p>输入：“3+2<em>3</em>4-1”<br/> 返回值：26</p>\n</blockquote>\n<h3><a id=\"_406\"></a>题目的主要信息</h3>\n<pre><code>写一个支持+ - *三种符号的运算器，其中优先级+ - 是一级，*更高一级\n支持括号运算\n</code></pre>\n<h3><a id=\"_412\"></a>解题思路：</h3>\n<p>对于上述两个要求，我们要考虑的是两点，一是处理运算优先级的问题，二是处理括号的问题。<br/> 处理优先级问题，那必定是乘号有着优先运算的权利，加号减号先一边看，我们甚至可以把减号看成加一个数的相反数，则这里只有乘法和加法，那我们优先处理乘法，遇到乘法，把前一个数和后一个数乘起来，遇到加法就把这些数字都暂时存起来，最后乘法处理完了，就剩余加法，把之前存起来的数字都相加就好了。<br/> 处理括号的问题，我们可以将括号中的部分看成一个新的表达式，即一个子问题，因此可以将新的表达式递归地求解，得到一个数字，再运算：</p>\n<pre><code>终止条件： 每次遇到左括号意味着进入括号子问题进行计算，那么遇到右括号代表这个递归结束。\n返回值： 将括号内部的计算结果值返回。\n本级任务： 遍历括号里面的字符，进行计算。\n</code></pre>\n<h3><a id=\"_422\"></a>具体做法</h3>\n<pre><code>step 1：使用栈辅助处理优先级，默认符号为加号。\nstep 2：遍历字符串，遇到数字，则将连续的数字字符部分转化为int型数字。\nstep 3：遇到左括号，则将括号后的部分送入递归，处理子问题；遇到右括号代表已经到了这个子问题的结尾，结束继续遍历字符串，将子问题的加法部分相加为一个数字，返回。\nstep 4：当遇到符号的时候如果是+，得到的数字正常入栈，如果是-，则将其相反数入栈，如果是*，则将栈中内容弹出与后一个元素相乘再入栈。\nstep 5：最后将栈中剩余的所有元素，进行一次全部相加。\n</code></pre>\n<h3><a id=\"_430\"></a>图示</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/b2cfbf1ff99246e1bd02d5cc9bc62821.gif\"/></p>\n<h3><a id=\"java_432\"></a>代码实现(java)</h3>\n<pre><code class=\"prism language-csharp\">import java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ArrayList<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Stack<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Stack<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">char</span></span> op <span class=\"token operator\">=</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//数字转换成int数字</span>\n            <span class=\"token comment\">//判断是否为数字</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n                num <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//碰到'('时，把整个括号内的当成一个数字处理</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//递归处理括号</span>\n                <span class=\"token class-name\">ArrayList<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> res <span class=\"token operator\">=</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                num <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                i <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>            \n            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//加减号先入栈</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">:</span> \n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\">//相反数</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//优先计算乘号</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">:</span>  \n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//右括号结束递归</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> \n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">else</span> \n                op <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//栈中元素相加</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            sum <span class=\"token operator\">+=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ArrayList<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArrayList<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span><span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span><span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> solve <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ArrayList<span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">&gt;</span></span> res <span class=\"token operator\">=</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4a609bf0b7f44331824dc38d392915f6.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}