{"blogid": "126717499", "writerAge": "码龄1年", "writerBlogNum": "55", "writerCollect": "534", "writerComment": "92", "writerFan": "83", "writerGrade": "3级", "writerIntegral": "712", "writerName": "薛定谔的猫咪死了", "writerProfileAdress": "writer_image\\profile_126717499.jpg", "writerRankTotal": "27594", "writerRankWeekly": "116653", "writerThumb": "86", "writerVisitNum": "58607", "blog_read_count": "69", "blog_time": "已于 2022-09-06 10:45:45 修改", "blog_title": "蓝桥杯嵌入式基础模块——定时器的基本作用（新板）STM32G431（HAL库开发）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1> STM32定时器资源介绍        </h1>\n<p>         STM32 的通用定时器是一个通过可编程预分频器（PSC）驱动的 16 位自动装载计数器（CNT）构成。 STM32 的通用定时器可以被用于：测量输入信号的脉冲长度(输入捕获)或者产生输出波形(输出比较和 PWM)等。 使用定时器预分频器和 RCC 时钟控制器预分频器，脉冲长度和波形周期可以在几个微秒到几个毫秒间调整。 STM32 的每个通用定时器都是完全独立的，没有互相共享的任何资源。</p>\n<h1>通用定时器的功能</h1>\n<p>STM32 的通用 TIMx (TIM2、 TIM3、 TIM4 和 TIM5)定时器功能包括：</p>\n<blockquote>\n<p>1)16 位向上、向下、向上/向下自动装载计数器（TIMx_CNT）。<br/> 2)16 位可编程(可以实时修改)预分频器(TIMx_PSC)，计数器时钟频率的分频系数为 1～<br/> 65535 之间的任意数值。<br/> 3） 4 个独立通道（TIMx_CH1~4），这些通道可以用来作为：<br/>         A．输入捕获<br/>         B．输出比较<br/>         C． PWM 生成(边缘或中间对齐模式)<br/>         D．单脉冲模式输出<br/> 4）可使用外部信号（TIMx_ETR）控制定时器和定时器互连（可以用 1 个定时器控制另外<br/> 一个定时器）的同步电路。<br/> 5）如下事件发生时产生中断/DMA：<br/>         A．更新：计数器向上溢出/向下溢出，计数器初始化(通过软件或者内部/外部触发)<br/>         B．触发事件(计数器启动、停止、初始化或者由内部/外部触发计数)<br/>         C．输入捕获<br/>         D．输出比较<br/>         E．支持针对定位的增量(正交)编码器和霍尔传感器电路<br/>         F．触发输入作为外部时钟或者按周期的电流管理</p>\n</blockquote>\n<h1> 实验内容</h1>\n<p>        初始化定时器定时100ms，使LED1闪烁，并且B1按键，可以改变定时器定时时间。按一次增加1000ms。</p>\n<h1>演示效果</h1>\n<p><img alt=\"696f2f499536494085cbf7873fd36c0b.gif\" src=\"https://img-blog.csdnimg.cn/696f2f499536494085cbf7873fd36c0b.gif\"/></p>\n<p> </p>\n<h1>硬件连接</h1>\n<p>LED</p>\n<p><img alt=\"0b8aa66b6d864055aa50172e3bf39433.png\" src=\"image\\0b8aa66b6d864055aa50172e3bf39433.png\"/></p>\n<p> 按键</p>\n<p><img alt=\"505e6ac7b409451a8368df7463977dc5.png\" src=\"image\\505e6ac7b409451a8368df7463977dc5.png\"/></p>\n<h1>STM32CubeMX配置</h1>\n<p><img alt=\"c30d028fe32e4950ad7259cc8283c342.png\" src=\"image\\c30d028fe32e4950ad7259cc8283c342.png\"/></p>\n<p> </p>\n<p> <img alt=\"4da005d7debb4a8881528ea1425f93d3.png\" src=\"image\\4da005d7debb4a8881528ea1425f93d3.png\"/></p>\n<h1>主程序</h1>\n<p>main.c</p>\n<pre><code>int main(void)\n{\n  HAL_Init();\n\n  /* USER CODE BEGIN Init */\n\n  /* USER CODE END Init */\n\n  /* Configure the system clock */\n  SystemClock_Config();\n\n  /* USER CODE BEGIN SysInit */\n\n  /* USER CODE END SysInit */\n\n  /* Initialize all configured peripherals */\n  MX_GPIO_Init();\n  MX_TIM2_Init();\n  /* USER CODE BEGIN 2 */\n\tHAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);//关闭锁存器\n\t\n\tLCD_Init();\n\tLCD_SetTextColor(White);\n\tLCD_SetBackColor(Black);\n\tLCD_Clear(Black);\n\t\n\tHAL_TIM_Base_Start_IT(&amp;htim2);//使能定时器\n\t\n\n  while (1)\n  {\n\t\tvKeyScan();\n  }\n}</code></pre>\n<p>tim.c</p>\n<pre><code>\n\nuint16_t flag=0;\nuint16_t B1=100;\n\n//定时器中断回调函数\nvoid HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)\n{\n\tif(htim-&gt;Instance=htim2.Instance)\n\t{\n\t\tflag++;\n\t\tif(flag==B1)\n\t\t{\n\t\t\tflag=0;\n\t\t\tHAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);//开锁存器\n\t\t\t HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15\n                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);\n\t\t\tHAL_GPIO_TogglePin(GPIOC,GPIO_PIN_8);//翻转电平\n\t\t\tHAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_RESET);//关锁存器\n\t\t}\n\t}\n}</code></pre>\n<p> </p>\n<p> </p>\n</div>\n</div>"}