{"blogid": "126687552", "writerAge": "码龄12年", "writerBlogNum": "372", "writerCollect": "612", "writerComment": "70", "writerFan": "1487", "writerGrade": "5级", "writerIntegral": "4321", "writerName": "biyezuopin", "writerProfileAdress": "writer_image\\profile_126687552.jpg", "writerRankTotal": "4589", "writerRankWeekly": "2785", "writerThumb": "396", "writerVisitNum": "98348", "blog_read_count": "190", "blog_time": "于 2022-09-04 11:52:47 发布", "blog_title": "基于python实现的猿眼电影订票系统", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>及模块划分。<br/> 目录<br/> 摘要 1<br/> 一、Front-End 1<br/> 二、Server 10<br/> 三.需求分析 18<br/> 1.引言 18<br/> 2、项目概述 19<br/> 3、具体需求 25<br/> 4、验收验证标准 26<br/> 四、项目运行 28<br/> 1.运行环境 28<br/> 2.使用方法 28<br/> 3.部署 40<br/> 4.运行 44<br/> 5.数据模型 44<br/> 6.API 45<br/> 3、模块划分<br/> 根据以上的设计和分析，服务端可分为管理系统模块，数据模型，API模块，其中API模块根据每个接口功能又分为用户模块，电影模块，场次模块，订单模块，评论模块，优惠券模块，会话模块，验证码模块，收藏模块，密码模块，模块划分非常清晰。<br/> 服务端的目录结构如下：<br/> ├─venv：虚拟环境<br/> ├─Flask-Server：服务端开发的源码<br/> │ ├─top：阿里大于短信SDK<br/> │ ├─instance：私密配置<br/> │ ├─app：服务端主要代码<br/> │ │ ├─admin：管理系统业务逻辑<br/> │ │ ├─static：静态文件<br/> │ │ ├─templates：管理系统界面<br/> │ │ └─api：各模块API<br/> │ │ ├─user.py：用户模块<br/> │ │ ├─movie.py：电影模块<br/> │ │ ├─screen.py：场次模块<br/> │ │ ├─order.py：订单模块<br/> │ │ ├─commetn.py：评论模块<br/> │ │ ├─coupon.py：优惠券模块<br/> │ │ ├─session.py：会话模块<br/> │ │ ├─smscode.py：验证码模块<br/> │ │ ├─favorite.py：收藏模块<br/> │ │ └─password.py：密码模块<br/> │ ├─config.py：普通配置文件<br/> │ ├─gunicornConf.py：Gunicorn配置文件<br/> │ └─server.py：入口文件<br/> └─requirements.txt：第三方包需求文件<br/> 4、设计模式<br/> 装饰器模式：装饰器模式能够实现动态的为对象添加功能，是从一个对象外部来给对象添加功能。装饰器模式通过把复杂的功能简单化，分散化，然后再运行期间，根据需要来动态组合的这样一个模式。在项目中使用了非常多的装饰器，如路由监听，如某些特定的API需要登录。<br/> 工厂模式：Flask-Server/app/<strong>init</strong>.py中实现了一个create_app的函数，完成了 db/config/route/admin 的初始化工作之后，再返回这个 app 对象。把应用的实例创建的过程交给工厂函数，通过工厂函数选择你所要使用的配置，来创建适用于不同环境下的应用。<br/> 面向对象编程：应用中使用了面向对象编程的封装思想，按照业务逻辑将代码的各个模块进行了封装，如管理系统模块与API模块，API模块又根据不同的功能分为10个小模块。<br/> 三.需求分析<br/> 1.引言<br/> 1.1、目的<br/> 本文档将描述项目的整体结构和功能结构概貌，从总体结构上给出整个系统的轮廓，并对整个应用的功能以及性能需求进行详细描述。便于用户和开发人员进行沟通交流。<br/> 1.2、背景<br/> 本次待开发软件为电影购票系统。用户使用该可以在本应用实现查看和搜索正在热映和即将上映的电影资讯，对感兴趣的电影可以进行收藏。想要观看某部电影，可以进行下单购票操作。对于已经放映的电影订单，用户可以对该订单对应的电影进行评分评价的操作。<br/> 1.3、参考文献<br/> [1] GB-T8567-2006，《计算机软件文档编制规范》[S]<br/> [2] &lt;教师报课系统&gt;需求规格说明书，本文转载自http://www.biyezuopin.vip/onews.asp?id=15593<br/> 2、项目概述<br/> 2.1、产品描述<br/> 开发基于Android平台和移动端web平台的应用程序，实现基础的电影购票功能，并提供电影资讯查询和评分。为互联网购票提供简便高效的平台。<br/> 2.2、产品功能<br/> 接下来通过用例图来辅助描述产品的功能。<br/> 用户可以通过查看资讯来查看电影，也可以通过直接搜索来查看电影。电影资讯包括两种类型：正在热映和即将上映。除了以上两种方式外，在应用首页也会推荐一些热门电影供用户查看。不管是以何种方式查看电影，都可以点击进入详情页面查看某部电影的详细信息。</p>\n<pre><code># -*- coding: utf-8 -*-\nfrom utils import time2stamp\nfrom flask_login import UserMixin\nfrom datetime import datetime, date\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\n\nclass User(UserMixin, db.Model):\n    \"\"\"用户\"\"\"\n    __tablename__ = 'users'\n    __table_args__ = {'mysql_engine': 'InnoDB'}  # 支持事务操作和外键\n\n    id = db.Column(db.String(11), doc='手机号码', primary_key=True)\n    password = db.Column(db.String(32), doc='密码', nullable=False)\n    payPassword = db.Column(db.String(32), doc='支付密码', nullable=False)\n    nickname = db.Column(db.String(20), doc='昵称', default='猿眼用户', nullable=False)\n    money = db.Column(db.Float, doc='账户余额', default=50, nullable=False)\n    description = db.Column(db.String(50), doc='个性签名', default='这个人很懒，什么也没留下', nullable=False)\n    avatar = db.Column(db.String(32), doc='头像路径', default='MonkeyEye.webp')\n    isAdmin = db.Column(db.Boolean, doc='是否管理员', default=False)\n\n    orders = db.relationship('Order', backref='users', cascade='all', lazy='dynamic')\n    coupons = db.relationship('Coupon', backref='users', cascade='all', lazy='dynamic')\n    favorites = db.relationship('Favorite', backref='users', cascade='all', lazy='dynamic')\n    comments = db.relationship('Comment', backref='users', cascade='all', lazy='dynamic')\n\n    def __repr__(self):\n        return '%s &lt;%s&gt;' % (self.nickname, self.id)\n\n    def __json__(self):\n        return {\n            'id': self.id,\n            'nickname': self.nickname,\n            'avatar': '/static/images/user/%s' % self.avatar,\n            'description': self.description,\n            'money': self.money\n        }\n\n\nclass Movie(db.Model):\n    \"\"\"电影\"\"\"\n    __tablename__ = 'movies'\n    __table_args__ = {'mysql_engine': 'InnoDB'}  # 支持事务操作和外键\n\n    id = db.Column(db.String(32), primary_key=True)\n    expired = db.Column(db.Boolean, doc='是否下架', default=False, nullable=False)\n    name = db.Column(db.String(25), doc='电影名称', nullable=False)\n    description = db.Column(db.Text, doc='电影介绍', default='暂无介绍', nullable=False)\n    playingTime = db.Column(db.Date, doc='上映时间', default=date.today(), nullable=False)\n    duration = db.Column(db.SmallInteger, doc='电影时长(分钟)', nullable=False)\n    movieType = db.Column(db.String(20), doc='电影类型', nullable=False)\n    playingType = db.Column(db.String(15), doc='放映类型', nullable=False)\n    rating = db.Column(db.Float, doc='电影评分', default=0)\n    ratingNum = db.Column(db.SmallInteger, doc='评分人数', default=0)\n    poster = db.Column(db.String(40), doc='海报路径')\n\n    screens = db.relationship('Screen', backref='movies', cascade='all', lazy='dynamic')\n    recommends = db.relationship('Recommend', backref='movies', cascade='all', lazy='dynamic')\n    comments = db.relationship('Comment', backref='movies', cascade='all', lazy='dynamic')\n    favorites = db.relationship('Favorite', backref='movies', cascade='all', lazy='dynamic')\n\n    def __repr__(self):\n        return '%s &lt;%s&gt;' % (self.name, self.id)\n\n    def __json__(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'poster': '/static/images/poster/%s' % self.poster,\n            'movieType': self.movieType,\n            'playingType': self.playingType,\n            'playingTime': time2stamp(self.playingTime),\n            'duration': self.duration,\n            'rating': self.rating,\n            'description': self.description,\n            'ratingNum': self.ratingNum\n        }\n\n\nclass Screen(db.Model):\n    \"\"\"场次\"\"\"\n    __tablename__ = 'screens'\n    __table_args__ = {'mysql_engine': 'InnoDB'}  # 支持事务操作和外键\n\n    id = db.Column(db.String(32), primary_key=True)\n    movieId = db.Column(db.String(32), db.ForeignKey('movies.id'), nullable=False)\n    time = db.Column(db.DateTime, doc='场次时间', default=datetime.now(), nullable=False)\n    hallNum = db.Column(db.String(1), doc='放映厅(1-5)', nullable=False)\n    price = db.Column(db.Float, doc='票价', default=30, nullable=False)\n    ticketNum = db.Column(db.SmallInteger, doc='电影总票数', default=120, nullable=False)\n\n    orders = db.relationship('Order', backref='screens', cascade='all', lazy='dynamic')\n\n    def __repr__(self):\n        res = {\n            'id': self.id,\n            'name': Movie.query.get(self.movieId).name,\n            'time': self.time.strftime('%Y-%m-%d %X')\n        }\n        return '{name} [{time}] &lt;{id}&gt;'.format(**res)\n\n    def __json__(self):\n        movie = Movie.query.get(self.movieId)\n        return {\n            'id': self.id,\n            'movie': movie.__json__(),\n            'time': time2stamp(self.time),\n            'price': self.price,\n            'ticketNum': self.ticketNum,\n            'hallNum': self.hallNum,\n            'playingType': movie.playingType\n        }\n\n\nclass Recommend(db.Model):\n    \"\"\"推荐\"\"\"\n    __tablename__ = 'recommends'\n    __table_args__ = {'mysql_engine': 'InnoDB'}  # 支持事务操作和外键\n\n    movieId = db.Column(db.String(32), db.ForeignKey('movies.id'), primary_key=True, nullable=False)\n\n    def __json__(self):\n        movie = Movie.query.get(self.movieId)\n        return {\n            'movieId': self.movieId,\n            'poster': '/static/images/poster/%s' % movie.poster,\n            'playingTime': time2stamp(movie.playingTime)\n        }\n\n\nclass Order(db.Model):\n    \"\"\"订单\"\"\"\n    __tablename__ = 'orders'\n    __table_args__ = {'mysql_engine': 'InnoDB'}  # 支持事务操作和外键\n\n    id = db.Column(db.String(32), primary_key=True)\n    screenId = db.Column(db.String(32), db.ForeignKey('screens.id'), nullable=False)\n    seat = db.Column(db.PickleType, doc='座位号(逗号分隔)', nullable=False)\n    username = db.Column(db.String(32), db.ForeignKey('users.id'), nullable=False)\n    createTime = db.Column(db.DateTime, doc='创建时间', nullable=False)\n    status = db.Column(db.Boolean, doc='订单状态(0:未支付,1:已支付)', default=0, nullable=False)\n    couponId = db.Column(db.String(32), db.ForeignKey('coupons.id'))\n    payPrice = db.Column(db.Float, doc='实际支付', nullable=False)\n    totalPrice = db.Column(db.Float, doc='原价', nullable=False)\n\n    def __repr__(self):\n        screen = Screen.query.get(self.screenId)\n        movie = Movie.query.get(screen.movieId)\n        res = {\n            'id': self.id,\n            'hallNum': screen.hallNum,\n            'seat': self.seat,\n            'name': movie.name,\n            'time': screen.time.strftime('%Y-%m-%d %X')\n        }\n        return '{name} {time}放映 {hallNum}号厅{seat}座 订单{id}'.format(**res)\n\n    def __json__(self):\n        screen = Screen.query.get(self.screenId)\n        movie = Movie.query.get(screen.movieId)\n        return {\n            'id': self.id,\n            'screenId': self.screenId,\n            'movieId': movie.id,\n            'duration': movie.duration,\n            'name': movie.name,\n            'screenTime': time2stamp(screen.time),\n            'createTime': time2stamp(self.createTime),\n            'username': self.username,\n            'seat': self.seat,\n            'status': self.status,\n            'couponId': self.couponId,\n            'payPrice': self.payPrice,\n            'totalPrice': self.totalPrice\n        }\n\n\nclass Coupon(db.Model):\n    \"\"\"优惠券\"\"\"\n    __tablename__ = 'coupons'\n    __table_args__ = {'mysql_engine': 'InnoDB'}  # 支持事务操作和外键\n\n    id = db.Column(db.String(32), primary_key=True)\n    discount = db.Column(db.SmallInteger, doc='折扣', nullable=False, default=5)\n    condition = db.Column(db.SmallInteger, doc='满多少元可用', default=30, nullable=False)\n    username = db.Column(db.String(32), db.ForeignKey('users.id'), nullable=False, doc='手机号码')\n    expiredTime = db.Column(db.Date, doc='过期时间', nullable=False)\n    status = db.Column(db.Boolean, doc='状态(0:未使用,1:已使用)', default=0, nullable=False)\n\n    def __json__(self):\n        return {\n            'id': self.id,\n            'discount': self.discount,\n            'condition': self.condition,\n            'expiredTime': time2stamp(self.expiredTime),\n            'status': self.status\n        }\n\n\nclass Favorite(db.Model):\n    \"\"\"收藏\"\"\"\n    __tablename__ = 'favorites'\n    __table_args__ = {'mysql_engine': 'InnoDB'}  # 支持事务操作和外键\n\n    id = db.Column(db.String(32), primary_key=True)\n    username = db.Column(db.String(32), db.ForeignKey('users.id'), nullable=False, doc='手机号码')\n    movieId = db.Column(db.String(32), db.ForeignKey('movies.id'), nullable=False)\n\n    def __json__(self):\n        return {\n            'id': self.id,\n            'username': self.username,\n            'movie': Movie.query.get(self.movieId).__json__()\n        }\n\n\nclass Comment(db.Model):\n    \"\"\"评论\"\"\"\n    __tablename__ = 'comments'\n    __table_args__ = {'mysql_engine': 'InnoDB'}  # 支持事务操作和外键\n\n    id = db.Column(db.String(32), primary_key=True)\n    username = db.Column(db.String(32), db.ForeignKey('users.id'), nullable=False, doc='手机号码')\n    movieId = db.Column(db.String(32), db.ForeignKey('movies.id'), nullable=False)\n    content = db.Column(db.Text, nullable=False, doc='评论内容')\n    rating = db.Column(db.SmallInteger, nullable=False, doc='电影评分')\n\n    def __repr__(self):\n        return self.id\n\n    def __json__(self):\n        user = User.query.get(self.username)\n        avatar = '/static/images/user/%s' % user.avatar\n        return {\n            'id': self.id,\n            'username': self.username,\n            'avatar': avatar,\n            'content': self.content,\n            'rating': self.rating,\n            'nickname': user.nickname\n        }\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bd6269cb0a374d57a43abcccb613d91d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\5159a7368f67461f9d9dc7bd936233f2.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c37c96711cbf4f4b815bffbf2f072290.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\6d5d57153a3943f18e59f1cdad2718bc.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3265fadfa5bc47418af722bd644b6dfe.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\ef1fb063ab144c7aac094149755052f4.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3132068aff204a8aa9eab5c50d6a48cb.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a7b2bff5b6c14390a462f88bae346c11.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\7c1bc96217794b228532564be39d2661.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\0a620a7b0e4244a199ca73552dc55a1c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\59d2ebbad5b3433d86e76ca6d4119aa9.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c91bc7003e6a4c49bd7e4c4ce725d677.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\1587c7db29754d5986b9e2180928d2a3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\771d7371e8984c99babcc9938b41faf3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\0cb43ff25a274dfbb52f7343a5278154.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\ba2a1657970045aab27923009158347a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\fe78e98067164cc9827731f875a1f590.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\353d18e1b17a4fd69cce96c5259daf4b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3148fd1c17a1478a8adbd73152faae19.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c1227a48c051439f8af92c2c5342dbc3.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}