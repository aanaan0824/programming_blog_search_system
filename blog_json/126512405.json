{"blogid": "126512405", "writerAge": "码龄15年", "writerBlogNum": "95", "writerCollect": "197", "writerComment": "37", "writerFan": "33", "writerGrade": "4级", "writerIntegral": "1173", "writerName": "Alexabc3000", "writerProfileAdress": "writer_image\\profile_126512405.jpg", "writerRankTotal": "16403", "writerRankWeekly": "6376", "writerThumb": "49", "writerVisitNum": "102813", "blog_read_count": "3865", "blog_time": "于 2022-08-24 20:42:43 发布", "blog_title": "仿真鸟群-Python实现（Win11）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">参考书籍《Python极客项目编程》。</span></span></p>\n<h2 style=\"text-align:justify;\"><strong>运行环境</strong></h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">操作系统Win11。</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">Python</span></span> <span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">3.10.</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">5</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">。</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">电脑连接互联网。</span></span></p>\n<h2 style=\"text-align:justify;\"><strong>安装相关包</strong></h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">在命令行窗口使用pip命令（我的电脑上，“pip.exe”文件所在目录是“D:\\Programs\\Python\\Python310\\Scripts”）安装numpy、</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">matplotlib、scipy</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">等相关包，命令如下：</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">pip install numpy</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">pip install </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">matplotlib</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">pip install </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">scipy</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">并根据提示使用如下命令升级：</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">D:\\Programs\\Python\\Python310\\python.exe -m pip install --upgrade pip</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"415\" src=\"image\\5cce13ca413441deaeb0b5668e947803.png\" width=\"554\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">安装包相关信息的查看（以numpy为例）</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">启动python，</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">进入python提示符，依次键入</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">import numpy、</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">print(numpy)、dir(numpy)；或者</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">help()</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">、</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">numpy</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">，显示该模块的相关信息。</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">（</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">help(numpy)也可以</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#222222;\">）。</span></span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"270\" src=\"image\\f2f5a6c1987a49298b4d1ee894172e7f.png\" width=\"554\"/></p>\n<p><img alt=\"\" height=\"487\" src=\"image\\3fbc16c86ff84a96ad0253a30fceb26b.png\" width=\"554\"/> </p>\n<h2 style=\"text-align:justify;\"><strong>源代码</strong></h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">源代码网址： <a href=\"https://github.com/electronut/pp/blob/master/boids/boids.py\" title=\"pp/boids.py at master · electronut/pp · GitHub\">pp/boids.py at master · electronut/pp · GitHub</a> </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">源代码如下：</p>\n<pre><code class=\"language-python\">\"\"\"\n\nboids.py\n\nImplementation of Craig Reynold's BOIDs\n\nAuthor: Mahesh Venkitachalam\n\n\"\"\"\n\n\n\nimport sys, argparse\n\nimport math\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nimport matplotlib.animation as animation\n\nfrom scipy.spatial.distance import squareform, pdist, cdist\n\nfrom numpy.linalg import norm\n\n\n\nwidth, height = 640, 480\n\n\n\nclass Boids:\n\n    \"\"\"Class that represents Boids simulation\"\"\"\n\n    def __init__(self, N):\n\n        \"\"\" initialize the Boid simulation\"\"\"\n\n        # init position &amp; velocities\n\n        self.pos = [width/2.0, height/2.0] + 10*np.random.rand(2*N).reshape(N, 2)\n\n        # normalized random velocities\n\n        angles = 2*math.pi*np.random.rand(N)\n\n        self.vel = np.array(list(zip(np.sin(angles), np.cos(angles))))\n\n        self.N = N\n\n        # min dist of approach\n\n        self.minDist = 25.0\n\n        # max magnitude of velocities calculated by \"rules\"\n\n        self.maxRuleVel = 0.03\n\n        # max maginitude of final velocity\n\n        self.maxVel = 2.0\n\n\n\n    def tick(self, frameNum, pts, beak):\n\n        \"\"\"Update the simulation by one time step.\"\"\"\n\n        # get pairwise distances\n\n        self.distMatrix = squareform(pdist(self.pos))\n\n        # apply rules:\n\n        self.vel += self.applyRules()\n\n        self.limit(self.vel, self.maxVel)\n\n        self.pos += self.vel\n\n        self.applyBC()\n\n        # update data\n\n        pts.set_data(self.pos.reshape(2*self.N)[::2],\n\n                     self.pos.reshape(2*self.N)[1::2])\n\n        vec = self.pos + 10*self.vel/self.maxVel\n\n        beak.set_data(vec.reshape(2*self.N)[::2],\n\n                      vec.reshape(2*self.N)[1::2])\n\n\n\n    def limitVec(self, vec, maxVal):\n\n        \"\"\"limit magnitide of 2D vector\"\"\"\n\n        mag = norm(vec)\n\n        if mag &gt; maxVal:\n\n            vec[0], vec[1] = vec[0]*maxVal/mag, vec[1]*maxVal/mag\n\n    \n\n    def limit(self, X, maxVal):\n\n        \"\"\"limit magnitide of 2D vectors in array X to maxValue\"\"\"\n\n        for vec in X:\n\n            self.limitVec(vec, maxVal)\n\n            \n\n    def applyBC(self):\n\n        \"\"\"apply boundary conditions\"\"\"\n\n        deltaR = 2.0\n\n        for coord in self.pos:\n\n            if coord[0] &gt; width + deltaR:\n\n                coord[0] = - deltaR\n\n            if coord[0] &lt; - deltaR:\n\n                coord[0] = width + deltaR    \n\n            if coord[1] &gt; height + deltaR:\n\n                coord[1] = - deltaR\n\n            if coord[1] &lt; - deltaR:\n\n                coord[1] = height + deltaR\n\n    \n\n    def applyRules(self):\n\n        # apply rule #1 - Separation\n\n        D = self.distMatrix &lt; 25.0\n\n        vel = self.pos*D.sum(axis=1).reshape(self.N, 1) - D.dot(self.pos)\n\n        self.limit(vel, self.maxRuleVel)\n\n\n\n        # different distance threshold\n\n        D = self.distMatrix &lt; 50.0\n\n\n\n        # apply rule #2 - Alignment\n\n        vel2 = D.dot(self.vel)\n\n        self.limit(vel2, self.maxRuleVel)\n\n        vel += vel2;\n\n\n\n        # apply rule #1 - Cohesion\n\n        vel3 = D.dot(self.pos) - self.pos\n\n        self.limit(vel3, self.maxRuleVel)\n\n        vel += vel3\n\n\n\n        return vel\n\n\n\n    def buttonPress(self, event):\n\n        \"\"\"event handler for matplotlib button presses\"\"\"\n\n        # left click - add a boid\n\n        if event.button is 1:\n\n            self.pos = np.concatenate((self.pos,\n\n                                       np.array([[event.xdata, event.ydata]])),\n\n                                      axis=0)\n\n            # random velocity\n\n            angles = 2*math.pi*np.random.rand(1)\n\n            v = np.array(list(zip(np.sin(angles), np.cos(angles))))\n\n            self.vel = np.concatenate((self.vel, v), axis=0)\n\n            self.N += 1\n\n        # right click - scatter\n\n        elif event.button is 3:\n\n            # add scattering velocity\n\n            self.vel += 0.1*(self.pos - np.array([[event.xdata, event.ydata]]))\n\n        \n\ndef tick(frameNum, pts, beak, boids):\n\n    #print frameNum\n\n    \"\"\"update function for animation\"\"\"\n\n    boids.tick(frameNum, pts, beak)\n\n    return pts, beak\n\n\n\n# main() function\n\ndef main():\n\n  # use sys.argv if needed\n\n  print('starting boids...')\n\n\n\n  parser = argparse.ArgumentParser(description=\"Implementing Craig Reynold's Boids...\")\n\n  # add arguments\n\n  parser.add_argument('--num-boids', dest='N', required=False)\n\n  args = parser.parse_args()\n\n\n\n  # number of boids\n\n  N = 100\n\n  if args.N:\n\n      N = int(args.N)\n\n\n\n  # create boids\n\n  boids = Boids(N)\n\n\n\n  # setup plot\n\n  fig = plt.figure()\n\n  ax = plt.axes(xlim=(0, width), ylim=(0, height))\n\n\n\n  pts, = ax.plot([], [], markersize=10,\n\n                  c='k', marker='o', ls='None')\n\n  beak, = ax.plot([], [], markersize=4,\n\n                  c='r', marker='o', ls='None')\n\n  anim = animation.FuncAnimation(fig, tick, fargs=(pts, beak, boids),\n\n                                 interval=50)\n\n\n\n  # add a \"button press\" event handler\n\n  cid = fig.canvas.mpl_connect('button_press_event', boids.buttonPress)\n\n\n\n  plt.show()\n\n\n\n# call main\n\nif __name__ == '__main__':\n\n  main()</code></pre>\n<h2 style=\"text-align:justify;\"><strong>运行结果</strong></h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">将上述代码保存为文件“d:\\temp\\boids.py”。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">在命令行窗口执行命令 “python d:\\temp\\boids.py”，运行结果如下：</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/c1c1f3d31aa84b73bbe28caba2831c94.gif\"/></p>\n<p> </p>\n<p> </p>\n<p> </p>\n</div>\n</div>"}