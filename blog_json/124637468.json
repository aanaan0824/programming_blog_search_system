{"blogid": "124637468", "writerAge": "码龄4年", "writerBlogNum": "68", "writerCollect": "1028", "writerComment": "130", "writerFan": "136", "writerGrade": "5级", "writerIntegral": "1782", "writerName": "tutu-hu", "writerProfileAdress": "writer_image\\profile_124637468.jpg", "writerRankTotal": "10994", "writerRankWeekly": "14639", "writerThumb": "169", "writerVisitNum": "142454", "blog_read_count": "1917", "blog_time": "已于 2022-05-08 12:58:11 修改", "blog_title": "c++中nlohmann json的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#jsonhpp_1\">一.json.hpp库下载及安装</a></li><li><ul><li><a href=\"#11__2\">1.1 开源地址及引入方法</a></li><li><a href=\"#12_demo_15\">1.2 demo程序测试</a></li></ul>\n</li><li><a href=\"#nlohmann_json_39\">二.nlohmann json基本操作</a></li><li><ul><li><a href=\"#21_basic_valuejson_40\">2.1 由basic value创建json</a></li><li><a href=\"#22_jsonbasic_value_84\">2.2 由json对象得到basic value</a></li><li><a href=\"#23_stl_containerjson_value_129\">2.3 像操作stl container一样操作json value</a></li></ul>\n</li><li><a href=\"#json_213\">三.json序列化与反序列化</a></li><li><ul><li><a href=\"#31_json_valuestring_214\">3.1 json value和string</a></li><li><a href=\"#32_json_257\">3.2 json对象和文件输入输出转换</a></li><li><a href=\"#33_json_value_310\">3.3 json value和自定义对象</a></li></ul>\n</li><li><a href=\"#NLOHMANN_DEFINE_TYPE_INTRUSIVE_404\">四.NLOHMANN_DEFINE_TYPE_INTRUSIVE宏的使用</a></li><li><ul><li><a href=\"#41__405\">4.1 宏的定义</a></li><li><a href=\"#42__432\">4.2 宏的使用</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"jsonhpp_1\"></a>一.json.hpp库下载及安装</h1>\n<h2><a id=\"11__2\"></a>1.1 开源地址及引入方法</h2>\n<p>  nlohmann json的开源项目地址，其中有对json使用方法的详细说明：</p>\n<blockquote>\n<p>https://github.com/nlohmann/json#serialization–deserialization</p>\n</blockquote>\n<p>  对于我们项目中要使用nlohmann json工具，<font color=\"#dd0000\">只需要引入json.hpp这一个文件</font>，其中包含所有接口函数，正如其文档中所述json.hpp文件在single_include/nlohmann目录下，我们只需要下载该文件即可：</p>\n<blockquote>\n<p>git clone https://github.com/nlohmann/json/blob/develop/single_include/nlohmann/json.hpp</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8ba2ad5df46146a8922e828acb519110.png\"/>如上图片所示，使用json.hpp文件需要关注两点：<br/>   一是：#include &lt;nlohmann/json.hpp&gt;头文件路径的引入，这里将json.hpp文件放到linux系统中的<font color=\"#dd0000\">/usr/local/include</font>路径下，这是系统默认头文件路径，在编译时系统会自动查找该路径。我们在/usr/local/include路径下创建/nlohmann/json.hpp，如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5ba6857c432c4c97b5cce24e2212bd8d.png\"/>  二是：在编译时需要指定c++11标准，-std=c++11。</p>\n<h2><a id=\"12_demo_15\"></a>1.2 demo程序测试</h2>\n<p>jsontest.cpp：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;nlohmann/json.hpp&gt;</span>   <span class=\"token comment\">//引入json.hpp，该文件已经放在系统默认路径：/usr/local/include/nlohmann/json.hpp</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// for convenience</span>\n<span class=\"token keyword\">using</span> json <span class=\"token operator\">=</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">auto</span> config_json <span class=\"token operator\">=</span> json<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">R\"({\"happy\": true, \"pi\": 3.141})\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//构建json对象</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> config_json <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//输出json对象值</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译：</p>\n<blockquote>\n<p>g++ jsontest.cpp -std=c++11</p>\n</blockquote>\n<p>输出结果：</p>\n<blockquote>\n<p>{“happy”:true,“pi”:3.141}</p>\n</blockquote>\n<h1><a id=\"nlohmann_json_39\"></a>二.nlohmann json基本操作</h1>\n<h2><a id=\"21_basic_valuejson_40\"></a>2.1 由basic value创建json</h2>\n<p>两种方式创建json对象：赋值构造+直接构造</p>\n<p>jsontest.cpp：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;nlohmann/json.hpp&gt;</span>   <span class=\"token comment\">//引入json.hpp，该文件已经放在系统默认路径：/usr/local/include/nlohmann/json.hpp</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> json <span class=\"token operator\">=</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// for convenience </span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//方式一：赋值构造</span>\n  json j1<span class=\"token punctuation\">;</span>\n  j1<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"LeBorn Jame\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字符串  </span>\n  j1<span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">23</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//整数</span>\n  j1<span class=\"token punctuation\">[</span><span class=\"token string\">\"man\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//布尔值</span>\n  j1<span class=\"token punctuation\">[</span><span class=\"token string\">\"children\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"LeBorn Jr\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Bryce Maximus\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Zhuri\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数组</span>\n  j1<span class=\"token punctuation\">[</span><span class=\"token string\">\"behavior\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"funny\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"gigigigigigi\"</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">//对象中元素值</span>\n  j1<span class=\"token punctuation\">[</span><span class=\"token string\">\"wife\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Savannah Brinson\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"man\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//对象</span>\n  \n  <span class=\"token comment\">//方式二：直接构造</span>\n  json j2<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"LeBorn Jame\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"man\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"children\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"LeBorn Jr\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Bryce Maximus\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Zhuri\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"behavior\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"funny\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"gigigigigigi\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"wife\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Savannah Brinson\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"man\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"j1: \"</span><span class=\"token operator\">&lt;&lt;</span>j1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//输出json对象值</span>\n  cout <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token string\">\"j2: \"</span><span class=\"token operator\">&lt;&lt;</span>j2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//输出json对象值</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译：</p>\n<blockquote>\n<p>g++ jsontest.cpp -std=c++11</p>\n</blockquote>\n<p>输出结果：</p>\n<blockquote>\n<p>j1: {“behavior”:{“funny”:“gigigigigigi”},“children”:[“LeBorn Jr”,“Bryce Maximus”,“Zhuri”],“man”:true,“name”:“LeBorn Jame”,“number”:23,“wife”:{“man”:false,“name”:“Savannah Brinson”}}<br/> j2: {“behavior”:{“funny”:“gigigigigigi”},“children”:[“LeBorn Jr”,“Bryce Maximus”,“Zhuri”],“man”:true,“name”:“LeBorn Jame”,“number”:23,“wife”:{“man”:false,“name”:“Savannah Brinson”}}</p>\n</blockquote>\n<h2><a id=\"22_jsonbasic_value_84\"></a>2.2 由json对象得到basic value</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;nlohmann/json.hpp&gt;</span>   <span class=\"token comment\">//引入json.hpp，该文件已经放在系统默认路径：/usr/local/include/nlohmann/json.hpp</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> json <span class=\"token operator\">=</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// for convenience </span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//构建一个json对象hututu</span>\n  json hututu <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hututu\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">,</span><span class=\"token char\">'m'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">88.99</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"location\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//方式一</span>\n  <span class=\"token keyword\">auto</span> name <span class=\"token operator\">=</span> hututu<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//获取“name”对应的value值，并转为string类型</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"name = \"</span><span class=\"token operator\">&lt;&lt;</span>name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"type name = \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"----------------------\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//方式二</span>\n  <span class=\"token keyword\">auto</span> location0 <span class=\"token operator\">=</span> hututu<span class=\"token punctuation\">[</span><span class=\"token string\">\"location\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">auto</span> location1 <span class=\"token operator\">=</span> hututu<span class=\"token punctuation\">[</span><span class=\"token string\">\"location\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">auto</span> location2 <span class=\"token operator\">=</span> hututu<span class=\"token punctuation\">[</span><span class=\"token string\">\"location\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"location0 = \"</span><span class=\"token operator\">&lt;&lt;</span>location0<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"location1 = \"</span><span class=\"token operator\">&lt;&lt;</span>location1<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"location2 = \"</span><span class=\"token operator\">&lt;&lt;</span>location2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<blockquote>\n<p>name = hututu<br/> type name = Ss<br/> location0 = aaa<br/> location1 = bbb<br/> location2 = ccc</p>\n</blockquote>\n<h2><a id=\"23_stl_containerjson_value_129\"></a>2.3 像操作stl container一样操作json value</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;nlohmann/json.hpp&gt;</span>   <span class=\"token comment\">//引入json.hpp，该文件已经放在系统默认路径：/usr/local/include/nlohmann/json.hpp</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> json <span class=\"token operator\">=</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// for convenience </span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//构建一个json对象animalArray</span>\n  json animalArray<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个数组类型的json对象</span>\n  animalArray<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//添加元素</span>\n  animalArray<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"duck\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//C++11新方式添加元素，减少申请内存</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"animalArray: \"</span><span class=\"token operator\">&lt;&lt;</span>animalArray<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//使用is_array()函数判断对象类型，使用empty函数判断数量是否为空</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>animalArray<span class=\"token punctuation\">.</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>animalArray<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">auto</span> size<span class=\"token operator\">=</span>animalArray<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//使用size函数获取元素数量</span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"animalArray size: \"</span><span class=\"token operator\">&lt;&lt;</span>size<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">auto</span> animalLast<span class=\"token operator\">=</span>animalArray<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"animalArray[size-1]: \"</span><span class=\"token operator\">&lt;&lt;</span>animalLast<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/--------------------/\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  json animalObject<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"kind\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个对象类型的json对象</span>\n  animalObject<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素</span>\n  animalObject<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除键值</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"animalObject: \"</span><span class=\"token operator\">&lt;&lt;</span>animalObject<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  animalObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//通过key修改value值</span>\n  <span class=\"token comment\">//判断是否含有某个键值方式一</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>animalObject<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//通过contains函数判断是否包含某个key</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">auto</span> height<span class=\"token operator\">=</span>animalObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"方式一:height: \"</span><span class=\"token operator\">&lt;&lt;</span>height<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//判断是否含有某个键值方式二</span>\n  <span class=\"token keyword\">auto</span> size<span class=\"token operator\">=</span>animalObject<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过count函数计算某一个键的数量</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"方式二:存在height键值\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//判断是否含有某个键值方式三</span>\n  <span class=\"token keyword\">auto</span> iter<span class=\"token operator\">=</span>animalObject<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过find函数查找某个键的迭代器</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">!=</span>animalObject<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"方式三:存在height键值\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//遍历输出键值方式1</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"遍历输出键值方式1:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> item<span class=\"token operator\">:</span>animalObject<span class=\"token punctuation\">.</span><span class=\"token function\">items</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//遍历输出键值方式2</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"遍历输出键值方式2:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> iter<span class=\"token operator\">=</span>animalObject<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>iter<span class=\"token operator\">!=</span>animalObject<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      cout<span class=\"token operator\">&lt;&lt;</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<blockquote>\n<p>animalArray: [“cat”,“dog”,“pig”,“duck”]<br/> animalArray size: 4<br/> animalArray[size-1]: duck<br/> /--------------------/<br/> animalObject: {“color”:“red”,“height”:50}<br/> 方式一:height: 99<br/> 方式二:存在height键值<br/> 方式三:存在height键值<br/> 遍历输出键值方式1:<br/> color “red”<br/> height 99<br/> 遍历输出键值方式2:<br/> color “red”<br/> height 99</p>\n</blockquote>\n<h1><a id=\"json_213\"></a>三.json序列化与反序列化</h1>\n<h2><a id=\"31_json_valuestring_214\"></a>3.1 json value和string</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;nlohmann/json.hpp&gt;</span>   <span class=\"token comment\">//引入json.hpp，该文件已经放在系统默认路径：/usr/local/include/nlohmann/json.hpp</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> json <span class=\"token operator\">=</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// for convenience </span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//反序列化构建json对象，两种方式</span>\n  json hututu1 <span class=\"token operator\">=</span> <span class=\"token string\">\"{\\\"name\\\":\\\"hututu\\\",\\\"age\\\":18,\\\"score\\\":88.99}\"</span>_json<span class=\"token punctuation\">;</span><span class=\"token comment\">//方式1，通过\"_json\"实现反序列化</span>\n  <span class=\"token keyword\">auto</span> temp <span class=\"token operator\">=</span> <span class=\"token raw-string string\">R\"({\"name\":\"hututu\",\"age\":18,\"score\":88.99})\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用原生字符串关键字R来避免转移字符，但这一句并没有序列化，hututu2只保存字符串而已，需要结合方式3实现反序列化</span>\n  json hututu2 <span class=\"token operator\">=</span> json<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//方式2，通过静态函数\"parse\"实现反序列化</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/----------反序列化-----------/\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hututu1 = \"</span><span class=\"token operator\">&lt;&lt;</span>hututu1<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hututu2 = \"</span><span class=\"token operator\">&lt;&lt;</span>hututu2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/----------序列化-----------/\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//序列化(Serialization)：dump(number)，number为打印出的空格数</span>\n  std<span class=\"token double-colon punctuation\">::</span>string hututu1_string<span class=\"token operator\">=</span>hututu1<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//animal1值为{\"kind\":\"dog\",\"height\":50}</span>\n  std<span class=\"token double-colon punctuation\">::</span>string hututu2_string<span class=\"token operator\">=</span>hututu2<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hututu1_string = \"</span><span class=\"token operator\">&lt;&lt;</span>hututu1_string<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hututu2_string = \"</span><span class=\"token operator\">&lt;&lt;</span>hututu2_string<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<blockquote>\n<p>/----------反序列化-----------/<br/> hututu1 = {“age”:18,“name”:“hututu”,“score”:88.99}<br/> hututu2 = {“age”:18,“name”:“hututu”,“score”:88.99}<br/> /----------序列化-----------/<br/> hututu1_string = {“age”:18,“name”:“hututu”,“score”:88.99}<br/> hututu2_string = {<!-- --><br/> “age”: 18,<br/> “name”: “hututu”,<br/> “score”: 88.99<br/> }</p>\n</blockquote>\n<h2><a id=\"32_json_257\"></a>3.2 json对象和文件输入输出转换</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span>        <span class=\"token comment\">//文件操作头文件</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;nlohmann/json.hpp&gt;</span>   <span class=\"token comment\">//引入json.hpp，该文件已经放在系统默认路径：/usr/local/include/nlohmann/json.hpp</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> json <span class=\"token operator\">=</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// for convenience </span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//上述操作适用于istream和ostream的子类，比如我们经常会用到的ifstream和ofstream</span>\n  <span class=\"token comment\">//从.json文件中读取内容到json对象中</span>\n  std<span class=\"token double-colon punctuation\">::</span>ifstream <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./person.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打开文件，关联到流in</span>\n  json hututu<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"222\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//定义一个json对象为hututu,有初始内容，但是会被覆盖</span>\n  in<span class=\"token operator\">&gt;&gt;</span>hututu<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//从流in中(也就是./person.json文件)读取内容到json对象中，会覆盖之前内容</span>\n  in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//关闭文件流in</span>\n  hututu<span class=\"token punctuation\">[</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//添加json对象内容</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> hututu <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//输出json对象值</span>\n\n  <span class=\"token comment\">//输出json对象内容到文件中，并生成新的文件</span>\n  std<span class=\"token double-colon punctuation\">::</span>ofstream <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./new.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//创建文件./new.json，并关联到流out</span>\n  hututu<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"new name\"</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//更改hututu对象的内容</span>\n  out<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>hututu<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//输出json对象hututu信息到文件./new.json中，std::setw(4)用于设置增加打印空格</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//关闭文件流out</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>./person.json文件内容</p>\n<blockquote>\n<p>{<!-- --><br/> “name”:“hututu”,<br/> “age”:18,<br/> “gender”:“m”,<br/> “score”:88.99<br/> }</p>\n</blockquote>\n<p>执行程序后，输出的json对象内容如下，也就是从./person.json文件中读取的信息：</p>\n<blockquote>\n<p>{“aaa”:“bbb”,“age”:18,“gender”:“m”,“name”:“hututu”,“score”:88.99}</p>\n</blockquote>\n<p>同时在当前目录下生成新的文件./new.json，内容如下所示：</p>\n<blockquote>\n<p>{<!-- --><br/> “aaa”: “bbb”,<br/> “age”: 18,<br/> “gender”: “m”,<br/> “name”: “new name”,<br/> “score”: 88.99<br/> }</p>\n</blockquote>\n<h2><a id=\"33_json_value_310\"></a>3.3 json value和自定义对象</h2>\n<p>  在自定义对象命名空间中定义两个函数即可像basic value一样进行反序列化和序列化：from_json(const json&amp; j,T&amp; value)、to_json(json&amp; j,const T&amp; value)</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span>        <span class=\"token comment\">//文件操作头文件</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;nlohmann/json.hpp&gt;</span>   <span class=\"token comment\">//引入json.hpp，该文件已经放在系统默认路径：/usr/local/include/nlohmann/json.hpp</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> json <span class=\"token operator\">=</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>       <span class=\"token comment\">//默认构造函数</span>\n        <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>string m_name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> m_score<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>m_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">age</span><span class=\"token punctuation\">(</span>m_age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">score</span><span class=\"token punctuation\">(</span>m_score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n      string name<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person name = \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person age = \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>age<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n      cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person score = \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>score<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//定义from_json(const json&amp; j,T&amp; value)函数，用于序列化</span>\n<span class=\"token comment\">//json对象-----&gt;class对象</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">from_json</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> json<span class=\"token operator\">&amp;</span> j<span class=\"token punctuation\">,</span>person<span class=\"token operator\">&amp;</span> hututu<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    hututu<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>j<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hututu<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>j<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hututu<span class=\"token punctuation\">.</span>score<span class=\"token operator\">=</span>j<span class=\"token punctuation\">[</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//定义to_json(json&amp; j,const T&amp; value)函数，用于反序列化</span>\n<span class=\"token comment\">//class对象-----&gt;json对象</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">to_json</span><span class=\"token punctuation\">(</span>json<span class=\"token operator\">&amp;</span> j<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> person<span class=\"token operator\">&amp;</span> hututu<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    j<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>hututu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    j<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>hututu<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n    j<span class=\"token punctuation\">[</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>hututu<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// void to_json(json&amp; j, const person&amp; p) </span>\n<span class=\"token comment\">// {<!-- --></span>\n<span class=\"token comment\">// \tj = json{ {\"name\", p.name}, {\"address\", p.address}, {\"age\", p.age} };</span>\n<span class=\"token comment\">// }</span>\n \n<span class=\"token comment\">// void from_json(const json&amp; j, person&amp; p) {<!-- --></span>\n<span class=\"token comment\">// \tj.at(\"name\").get_to(p.name);</span>\n<span class=\"token comment\">// \tj.at(\"address\").get_to(p.address);</span>\n<span class=\"token comment\">// \tj.at(\"age\").get_to(p.age);</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">//main.cpp文件</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    person hututu<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"hututu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">88.99</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个person对象为hututu</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/----------to json,方式1:json=class隐式转换-----------/\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    json j1<span class=\"token operator\">=</span>hututu<span class=\"token punctuation\">;</span>                <span class=\"token comment\">//class to json,隐式调用to_json函数 </span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"j1 = \"</span><span class=\"token operator\">&lt;&lt;</span>j1<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//输出json对象值</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/----------to json,方式2:调用to_json函数-----------/\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    json j2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">to_json</span><span class=\"token punctuation\">(</span>j2<span class=\"token punctuation\">,</span>hututu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//to json,调用to_json函数</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"j2 = \"</span><span class=\"token operator\">&lt;&lt;</span>j2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//输出json对象值</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/----------from json,方式1:调用from_json函数-----------/\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n    j1<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"new name\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//修改json对象数据</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"new j1 = \"</span><span class=\"token operator\">&lt;&lt;</span>j1<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//输出json对象值</span>\n    person hututu_new<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">from_json</span><span class=\"token punctuation\">(</span>j1<span class=\"token punctuation\">,</span>hututu_new<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//json----&gt;class</span>\n    hututu_new<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//输出person对象内容</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/----------from json,方式2:调用.get函数-----------/\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n    person hututuNew <span class=\"token operator\">=</span> j2<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>person<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//像basic value一样通过get函数获取值，将其值直接赋值给自定义对象</span>\n    hututuNew<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行结果：</p>\n<blockquote>\n<p>/----------to json,方式1:json=class隐式转换-----------/<br/> j1 = {“age”:18,“name”:“hututu”,“score”:88.99}<br/> /----------to json,方式2:调用to_json函数-----------/<br/> j2 = {“age”:18,“name”:“hututu”,“score”:88.99}<br/> /----------from json,方式1:调用from_json函数-----------/<br/> new j1 = {“age”:18,“name”:“new name”,“score”:88.99}<br/> person name = new name<br/> person age = 18<br/> person score = 88.99<br/> /----------from json,方式2:调用.get函数-----------/<br/> person name = hututu<br/> person age = 18<br/> person score = 88.99</p>\n</blockquote>\n<h1><a id=\"NLOHMANN_DEFINE_TYPE_INTRUSIVE_404\"></a>四.NLOHMANN_DEFINE_TYPE_INTRUSIVE宏的使用</h1>\n<h2><a id=\"41__405\"></a>4.1 宏的定义</h2>\n<p>JSON for Modern C++ 中为方便序列化和反序列化定义了两宏，如下</p>\n<blockquote>\n<ul><li>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(name, member1, member2, …) 将在要为其创建代码的类/结构的命名空间内定义。</li><li>NLOHMANN_DEFINE_TYPE_INTRUSIVE(name, member1, member2, …) 将在要为其创建代码的类/结构中定义。 该宏还可以访问私有成员。</li></ul>\n</blockquote>\n<p>进一步查看代码:</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">/*!\n@brief macro\n@def NLOHMANN_DEFINE_TYPE_INTRUSIVE\n@since version 3.9.0\n*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">NLOHMANN_DEFINE_TYPE_INTRUSIVE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>Type<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>  </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">to_json</span><span class=\"token punctuation\">(</span>nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token operator\">&amp;</span> nlohmann_json_j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> nlohmann_json_t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">NLOHMANN_JSON_EXPAND</span><span class=\"token punctuation\">(</span><span class=\"token function\">NLOHMANN_JSON_PASTE</span><span class=\"token punctuation\">(</span>NLOHMANN_JSON_TO<span class=\"token punctuation\">,</span> __VA_ARGS__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">from_json</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token operator\">&amp;</span> nlohmann_json_j<span class=\"token punctuation\">,</span> Type<span class=\"token operator\">&amp;</span> nlohmann_json_t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">NLOHMANN_JSON_EXPAND</span><span class=\"token punctuation\">(</span><span class=\"token function\">NLOHMANN_JSON_PASTE</span><span class=\"token punctuation\">(</span>NLOHMANN_JSON_FROM<span class=\"token punctuation\">,</span> __VA_ARGS__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span></span>\n\n<span class=\"token comment\">/*!\n@brief macro\n@def NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE\n@since version 3.9.0\n*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>Type<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>  </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">to_json</span><span class=\"token punctuation\">(</span>nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token operator\">&amp;</span> nlohmann_json_j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> nlohmann_json_t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">NLOHMANN_JSON_EXPAND</span><span class=\"token punctuation\">(</span><span class=\"token function\">NLOHMANN_JSON_PASTE</span><span class=\"token punctuation\">(</span>NLOHMANN_JSON_TO<span class=\"token punctuation\">,</span> __VA_ARGS__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">from_json</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token operator\">&amp;</span> nlohmann_json_j<span class=\"token punctuation\">,</span> Type<span class=\"token operator\">&amp;</span> nlohmann_json_t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">NLOHMANN_JSON_EXPAND</span><span class=\"token punctuation\">(</span><span class=\"token function\">NLOHMANN_JSON_PASTE</span><span class=\"token punctuation\">(</span>NLOHMANN_JSON_FROM<span class=\"token punctuation\">,</span> __VA_ARGS__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span></span>\n\n</code></pre>\n<h2><a id=\"42__432\"></a>4.2 宏的使用</h2>\n<p>  可以看出上述的宏主要实现了from_json和to_json两个函数的功能，使用时需要在一个类中调用该宏，并传入(类名，参数1，参数2，参数3…)使用，这样在json对象和class对象之间之间直接赋值可以完成相互转换，具体用法如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span>        <span class=\"token comment\">//文件操作头文件</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;nlohmann/json.hpp&gt;</span>   <span class=\"token comment\">//引入json.hpp，该文件已经放在系统默认路径：/usr/local/include/nlohmann/json.hpp</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> json <span class=\"token operator\">=</span> nlohmann<span class=\"token double-colon punctuation\">::</span>json<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n      string name<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person name = \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person age = \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>age<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person score = \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>score<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 类名，成员1，成员2，成员3</span>\n      <span class=\"token function\">NLOHMANN_DEFINE_TYPE_INTRUSIVE</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//main.cpp文件</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    person hututu<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"hututu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">88.99</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个person对象为hututu</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/----------调用宏实现:to json-----------/\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    json j1 <span class=\"token operator\">=</span> hututu<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> j1<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> j1<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/----------调用宏实现:from json-----------/\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    j1<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"new name\"</span><span class=\"token punctuation\">;</span>\n    person hututu_new <span class=\"token operator\">=</span> j1<span class=\"token punctuation\">;</span>\n    hututu_new<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<blockquote>\n<p>/----------调用宏实现:to json-----------/<br/> {“age”:18,“name”:“hututu”,“score”:88.99}<br/> {“age”:18,“name”:“hututu”,“score”:88.99}<br/> /----------调用宏实现:from json-----------/<br/> person name = new name<br/> person age = 18<br/> person score = 88.99</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}