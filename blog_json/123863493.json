{"blogid": "123863493", "writerAge": "码龄2年", "writerBlogNum": "117", "writerCollect": "486", "writerComment": "79", "writerFan": "1853", "writerGrade": "4级", "writerIntegral": "1456", "writerName": "ohana！", "writerProfileAdress": "writer_image\\profile_123863493.jpg", "writerRankTotal": "29449", "writerRankWeekly": "213572", "writerThumb": "196", "writerVisitNum": "105064", "blog_read_count": "53154", "blog_time": "于 2022-03-31 11:30:13 发布", "blog_title": "WebSocket", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AFwebsocket-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AFwebsocket\">一，什么是websocket</a></p>\n<p id=\"%E4%BA%8C%EF%BC%8Cwebsocket%E7%9A%84%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%8C%EF%BC%8Cwebsocket%E7%9A%84%E5%8E%9F%E7%90%86\">二，websocket的原理</a></p>\n<p id=\"%E4%B8%89%EF%BC%8Cwebsocket%E4%B8%8Ehttp%E7%9A%84%E5%85%B3%E7%B3%BB-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%89%EF%BC%8Cwebsocket%E4%B8%8Ehttp%E7%9A%84%E5%85%B3%E7%B3%BB\">三，websocket与http的关系</a></p>\n<p id=\"%E5%9B%9B%EF%BC%8Cwebsocket%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%9B%EF%BC%8Cwebsocket%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\">四，websocket解决的问题</a></p>\n<p id=\"1.http%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:80px;\"><a href=\"#1.http%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98\">1.http存在的问题</a></p>\n<p id=\"2.long%20poll(%E9%95%BF%E8%BD%AE%E8%AF%A2)-toc\" style=\"margin-left:80px;\"><a href=\"#2.long%20poll%28%E9%95%BF%E8%BD%AE%E8%AF%A2%29\">2.long poll(长轮询)</a></p>\n<p id=\"3.Ajax%E8%BD%AE%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#3.Ajax%E8%BD%AE%E8%AF%A2\">3.Ajax轮询</a></p>\n<p id=\"4.websocket%E7%9A%84%E6%94%B9%E8%BF%9B-toc\" style=\"margin-left:80px;\"><a href=\"#4.websocket%E7%9A%84%E6%94%B9%E8%BF%9B\">4.websocket的改进</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2>一，什么是websocket</h2>\n<ul><li>WebSocket是HTML5下一种新的协议（websocket协议本质上是一个基于tcp的协议）</li><li>它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的</li><li>Websocket是一个<strong>持久化</strong>的协议</li></ul>\n<h2 id=\"%E4%BA%8C%EF%BC%8Cwebsocket%E7%9A%84%E5%8E%9F%E7%90%86\">二，websocket的原理</h2>\n<ol><li>websocket约定了一个通信的规范，通过一个握手的机制，客户端和服务器之间能建立一个类似tcp的连接，从而方便它们之间的通信</li><li>在websocket出现之前，web交互一般是基于http协议的短连接或者长连接</li><li>websocket是一种全新的协议，不属于http无状态协议，协议名为\"ws\"</li></ol>\n<h2 id=\"%E4%B8%89%EF%BC%8Cwebsocket%E4%B8%8Ehttp%E7%9A%84%E5%85%B3%E7%B3%BB\">三，websocket与http的关系</h2>\n<p><img alt=\"\" height=\"499\" src=\"image\\45259e81df6b4455bdcfcad460a3a8bf.png\" width=\"668\"/></p>\n<blockquote>\n<p><strong> 相同点：</strong></p>\n<ol><li><strong>都是基于tcp的，都是可靠性传输协议</strong></li><li><strong>都是应用层协议</strong></li></ol>\n</blockquote>\n<blockquote>\n<p><strong>不同点：</strong></p>\n<ol><li><strong>WebSocket是双向通信协议，模拟Socket协议，可以双向发送或接受信息</strong></li><li><strong>HTTP是单向的</strong></li><li><strong>WebSocket是需要浏览器和服务器握手进行建立连接的</strong></li><li><strong>而http是浏览器发起向服务器的连接，服务器预先并不知道这个连接</strong></li></ol>\n</blockquote>\n<blockquote>\n<p><strong> 联系：</strong></p>\n<ul><li><strong>WebSocket在建立握手时，数据是通过HTTP传输的。但是建立之后，在真正传输时候是不需要HTTP协议的</strong></li></ul>\n</blockquote>\n<blockquote>\n<p><strong>总结（总体过程）：</strong></p>\n<ol><li><strong>首先，客户端发起http请求，经过3次握手后，建立起TCP连接；http请求里存放WebSocket支持的版本号等信息，如：Upgrade、Connection、WebSocket-Version等；</strong></li><li><strong>然后，服务器收到客户端的握手请求后，同样采用HTTP协议回馈数据；</strong></li><li><strong>最后，客户端收到连接成功的消息后，开始借助于TCP传输信道进行全双工通信。</strong></li></ol>\n</blockquote>\n<h2 id=\"%E5%9B%9B%EF%BC%8Cwebsocket%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\">四，websocket解决的问题</h2>\n<h3 id=\"1.http%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98\">1.http存在的问题</h3>\n<ul><li>http是一种无状态协议，每当一次会话完成后，服务端都不知道下一次的客户端是谁，需要每次知道对方是谁，才进行相应的响应，因此本身对于实时通讯就是一种极大的障碍</li><li>http协议采用一次请求，一次响应，每次请求和响应就携带有大量的header头，对于实时通讯来说，解析请求头也是需要一定的时间，因此，效率也更低下</li><li>最重要的是，需要客户端主动发，服务端被动发，也就是一次请求，一次响应，不能实现主动发送</li></ul>\n<h3 id=\"2.long%20poll(%E9%95%BF%E8%BD%AE%E8%AF%A2)\">2.long poll(长轮询)</h3>\n<ul><li>对于以上情况就出现了http解决的第一个方法——长轮询</li><li>基于http的特性，简单点说，就是客户端发起长轮询，如果服务端的数据没有发生变更，会 hold 住请求，直到服务端的数据发生变化，或者等待一定时间超时才会返回。返回后，客户端又会立即再次发起下一次长轮询</li><li>优点是解决了http不能实时更新的弊端，因为这个时间很短，发起请求即处理请求返回响应，实现了“伪·长连接”</li><li>张三取快递的例子，张三今天一定要取到快递，他就一直站在快递点，等待快递一到，立马取走</li></ul>\n<blockquote>\n<p> 从例子上来看有个问题：</p>\n<ol><li>假如有好多人一起在快递站等快递，那么这个地方是否足够大，（抽象解释：需要有很高的并发，同时有很多请求等待在这里）</li></ol>\n</blockquote>\n<ul><li>总的来看：</li><li> <p>推送延迟。服务端数据发生变更后，长轮询结束，立刻返回响应给客户端。</p> </li><li> <p>服务端压力。长轮询的间隔期一般很长，例如 30s、60s，并且服务端 hold 住连接不会消耗太多服务端资源。</p> </li></ul>\n<h3 id=\"3.Ajax%E8%BD%AE%E8%AF%A2\">3.Ajax轮询</h3>\n<ul><li>基于http的特性，简单点说，就是规定每隔一段时间就由客户端发起一次请求，查询有没有新消息，如果有，就返回，如果没有等待相同的时间间隔再次询问</li><li>优点是解决了http不能实时更新的弊端，因为这个时间很短，发起请求即处理请求返回响应，把这个过程放大n倍，本质上还是request = response</li><li>举个形象的例子（假设张三今天有个快递快到了，但是张三忍耐不住，就每隔十分钟给快递员或者快递站打电话，询问快递到了没，每次快递员就说还没到，等到下午张三的快递到了，but，快递员不知道哪个电话是张三的，（可不是只有张三打电话，还有李四，王五），所以只能等张三打电话，才能通知他，你的快递到了）</li></ul>\n<blockquote>\n<p> 从例子上来看有两个问题：</p>\n<ol><li>假如说，张三打电话的时间间隔为10分钟，当他收到快递前最后一次打电话，快递员说没到，他刚挂掉电话，快递入库了（就是到了），那么等下一次时间到了，张三打电话知道快递到了，那么这样的通讯算不算实时通讯？很显然，不算，中间有十分钟的时间差，还不算给快递员打电话的等待时间（抽象的解释：每次request的请求时间间隔等同于十分钟，请求解析相当于等待）</li><li>假如说张三所在的小区每天要收很多快递，每个人都采取主动给快递员打电话的方式，那么快递员需要以多快的速度接到，其他人打电话占线也是问题（抽象解释：请求过多，服务端响应也会变慢）</li></ol>\n</blockquote>\n<ul><li>总的来看，Ajax轮询存在的问题：</li></ul>\n<ol><li> <p>推送延迟。</p> </li><li> <p>服务端压力。配置一般不会发生变化，频繁的轮询会给服务端造成很大的压力。</p> </li><li> <p>推送延迟和服务端压力无法中和。降低轮询的间隔，延迟降低，压力增加；增加轮询的间隔，压力降低，延迟增高</p> </li></ol>\n<h3 id=\"4.websocket%E7%9A%84%E6%94%B9%E8%BF%9B\">4.websocket的改进</h3>\n<p>一旦WebSocket连接建立后，后续数据都以帧序列的形式传输。在客户端断开WebSocket连接或Server端中断连接前，不需要客户端和服务端重新发起连接请求。在海量并发及客户端与服务器交互负载流量大的情况下，极大的节省了网络带宽资源的消耗，有明显的性能优势，且客户端发送和接受消息是在同一个持久连接上发起，实现了“真·长链接”，实时性优势明显。</p>\n<p><img alt=\"\" height=\"780\" src=\"image\\b4f3c4efafd24359be26dc3166569f76.png\" width=\"1200\"/></p>\n<p> </p>\n<p>WebSocket有以下特点：</p>\n<ul><li>是真正的全双工方式，建立连接后客户端与服务器端是完全平等的，可以互相主动请求。而HTTP长连接基于HTTP，是传统的客户端对服务器发起请求的模式。</li><li>HTTP长连接中，每次数据交换除了真正的数据部分外，服务器和客户端还要大量交换HTTP header，信息交换效率很低。Websocket协议通过第一个request建立了TCP连接之后，之后交换的数据都不需要发送 HTTP header就能交换数据，这显然和原有的HTTP协议有区别所以它需要对服务器和客户端都进行升级才能实现（主流浏览器都已支持HTML5）</li></ul>\n</div>\n</div>"}