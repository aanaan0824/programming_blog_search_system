{"blogid": "125730175", "writerAge": "码龄2年", "writerBlogNum": "48", "writerCollect": "669", "writerComment": "1135", "writerFan": "1942", "writerGrade": "5级", "writerIntegral": "2353", "writerName": "广龙宇", "writerProfileAdress": "writer_image\\profile_125730175.jpg", "writerRankTotal": "8128", "writerRankWeekly": "115", "writerThumb": "618", "writerVisitNum": "1805836", "blog_read_count": "753", "blog_time": "于 2022-09-05 08:35:43 发布", "blog_title": "【一起学Rust · 项目实战】命令行IO项目minigrep——重构优化模块和错误处理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"\" src=\"image\\1e9067c2a8114a7a8acc4bcd42fab072.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">前言</a></li><li><a href=\"#_14\">一、任务目的</a></li><li><a href=\"#_24\">二、项目拆分</a></li><li><a href=\"#_40\">三、重构项目</a></li><li><ul><li><a href=\"#_42\">提取参数解析器</a></li><li><a href=\"#_67\">导出独立配置</a></li><li><a href=\"#_112\">优化错误处理</a></li><li><a href=\"#_165\">抽离读取文件</a></li><li><a href=\"#crate_206\">将代码拆分到crate</a></li></ul>\n</li><li><a href=\"#_258\">总结</a></li><li><a href=\"#_261\">完整代码</a></li><li><ul><li><a href=\"#mainrs_262\">main.rs</a></li><li><a href=\"#librs_282\">lib.rs</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<p>经过前两节，我们的minigrep已经可以成功的打开指定的文本文件，并且读取其中的内容。</p>\n<p>考虑到我们的程序后面会增加更多的功能，一些程序上的问题就出现了，如我们一直用expect输出错误信息，但是无法知道错误是如何出错的，出错会有很多原因，比如文件不存在，或者没有权限，等等其他问题，我们要重构项目，以达到优化项目的模块和对错误的处理。</p>\n<hr/>\n<h1><a id=\"_14\"></a>一、任务目的</h1>\n<p>目前来说，项目可能存在一下四个问题，影响后续的程序，</p>\n<ol><li>main现在只是做解析了参数并打开了文件，这对于一个小的函数来说是没有问题的，但是随着软件功能不断壮大，函数就变得复杂起来，变得难以调试和修改，更不利于阅读，因此要分理出多个函数，每个函数负责一个功能。</li><li>query 和 filename 是程序中的配置变量， contents 用来执行程序逻辑。随着main函数变得复杂，会有更多的变量，就会导致难以清楚每个变量的意义。因此将配置变量组织进一个结构，明确变量的目的。</li><li>如果文件打开失败，总是提示Something went wrong reading the file，但是文件打开失败会有多种情况，就比如文件不存在，没有文件的权限等。因此我们要尽量给出详细的错误信息。</li><li>我们自己是知道程序有两个参数的，但是如果别人不知道要传两个参数，Rust就会报错，我们的程序就不够健壮。考虑将错误处理放在一块，优化错误提示。</li></ol>\n<p>为此，我们需要重构我们的项目。</p>\n<h1><a id=\"_24\"></a>二、项目拆分</h1>\n<p>Rust 社区中大型的项目拆分有着共同的原则，</p>\n<ol><li>将程序拆分成 main.rs 和 lib.rs 并将程序的逻辑放入 lib.rs 中。</li><li>当命令行解析逻辑比较小时，可以保留在 main.rs 中。</li><li>当命令行解析开始变得复杂时，也同样将其从 main.rs 提取到 lib.rs 中。</li></ol>\n<p>经过以上步骤，main的功能就应该是，</p>\n<ul><li>使用参数值调用命令行解析逻辑</li><li>设置任何其他的配置</li><li>调用 lib.rs 中的 run 函数</li><li>如果 run 返回错误，则处理这个错误</li></ul>\n<p>以上的目的就是为了实现，main,rs专门处理程序运行，lib.rs处理功能的逻辑。</p>\n<h1><a id=\"_40\"></a>三、重构项目</h1>\n<p>接下来我们就遵循以上原则对项目进行拆分。</p>\n<h2><a id=\"_42\"></a>提取参数解析器</h2>\n<p>新建个函数parse_config，专门用来拆分获取到的参数，并且返回query和filename</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">parse_config</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>接下来我们在main函数中使用parse_config来获取程序所需要的参数，下面注释了的两行代码是之前用来获取query 和filename 的，我们把它注释了，然后加入上面的<code>let (query, filename) = parse_config(&amp;args);</code>来获取参数。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:#?}\"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">parse_config</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// let query = &amp;args[1];</span>\n    <span class=\"token comment\">// let filename = &amp;args[2];</span>\n<span class=\"token comment\">// 其他代码</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这个方法现在看起来是有点大材小用的，然而并不是，这个会在定位问题的时候给予你极大的方便。</p>\n<h2><a id=\"_67\"></a>导出独立配置</h2>\n<p>接下来继续对parse_config进行改进，这个函数返回了一个元组类型的数据，为了正确抽象参数，给维护带来方便，我们对参数的返回值进行抽离，让其有可见的意义。</p>\n<p>新建一个结构体Config，里面的字段就是我们的参数，</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    query<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后修改parse_config函数，</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">parse_config</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span> query<span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里我们采用clone方法来复制参数的完整数据，这样Config实例就是独立得了，使得代码显得更加直白因为无需管理引用的生命周期，但是会比储存字符串数据的引用消耗更多的时间和内存。在这种情况下牺牲一小部分性能来换取简洁性的取舍是值得的。</p>\n<p>接下来我们再次对Config 进行改造，我们使用标准库时，都会使用new来创造实例，为了符合我们的编程习惯，我们为其写一个构造函数，首先将parse_config函数改名成new，然后移入impl中，</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span> query<span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后修改在main中的调用，这样我们以后就可以使用config加点来调用了。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 其他代码</span>\n\t<span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// let query = &amp;args[1];</span>\n    <span class=\"token comment\">// let filename = &amp;args[2];</span>\n<span class=\"token comment\">// 其他代码</span>\n</code></pre>\n<h2><a id=\"_112\"></a>优化错误处理</h2>\n<p>当程序接收参数个数不等于2时，我们的程序就会报错，错误信息为</p>\n<pre><code class=\"prism language-rust\">index out of bounds<span class=\"token punctuation\">:</span> the len is <span class=\"token number\">1</span> but the index is <span class=\"token number\">1</span>\n</code></pre>\n<p>这种错误是程序的错误，作为一个用户是难以理解的。为此我们在读取参数时判断参数个数，优化这里的错误，使得人可以直观的看到是什么错误。</p>\n<p>在Config的new中进行判断参数个数，</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token comment\">// 其他代码</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数个数不足\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 其他代码</span>\n</code></pre>\n<p>在这里返回了panic，程序就会直接退出，这样的错误提示确实很明显了，但不是最好的，因为他还会输出一些调试信息，导致对于用户来讲是不够友好的，因此我们考虑使用Result ，我们对impl做以下更改</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not enough arguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span> query<span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>现在修改main函数</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>process<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>err<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数拆分错误: {}\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 其他代码</span>\n</code></pre>\n<p>现在我们测试错误，这个错误提示就很具体了。<br/> <img alt=\"\" src=\"image\\7070908eae1a41a18b4c3eeb391585d5.png\"/></p>\n<blockquote>\n<p>unwrap_or_else，它定义于标准库的 Result&lt;T, E&gt; 上。使用 unwrap_or_else 可以进行一些自定义的非 panic! 的错误处理。当 Result 是 Ok 时，这个方法的行为类似于 unwrap：它返回 Ok 内部封装的值。然而，当其值是 Err 时，该方法会调用一个 闭包（closure），也就是一个我们定义的作为参数传递给 unwrap_or_else 的匿名函数。</p>\n</blockquote>\n<p>我们使用了标准库中的process来处理程序的退出，导入了std::process，然后调用process::exit，并且传入状态码会立即停止程序并将传递给它的数字作为退出状态码。</p>\n<h2><a id=\"_165\"></a>抽离读取文件</h2>\n<p>我们将读取文件部分抽离出来，成为一个函数run，传入对应的config，进行文件读取</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取文件失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件内容:\\n{}\"</span><span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>为了使错误提示变得更加友好，对run继续进行修改，让其返回Result。</p>\n<p>这里我们做了三个明显的修改。首先，将 run 函数的返回类型变为 <code>Result&lt;(), Box&lt;dyn Error&gt;&gt;</code>。之前这个函数返回 unit 类型 ()，现在它仍然保持作为 Ok 时的返回值。</p>\n<p>对于错误类型，使用了 trait 对象 <code>Box&lt;dyn Error&gt;</code>，这部分内容会在以后说明。你只需知道 <code>Box&lt;dyn Error&gt;</code> 意味着函数会返回实现了 Error trait 的类型，不过无需指定具体将会返回的值的类型。</p>\n<p>第二个改变是去掉了 expect 调用并替换为 ?。不同于遇到错误就 panic!，? 会从函数中返回错误值并让调用者来处理它。</p>\n<p>第三个修改是现在成功时这个函数会返回一个 Ok 值。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件内容:\\n{}\"</span><span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后在main中处理这个错误，因为这里是只关心出错的情况，所以使用 if let来处理。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 其他代码</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序运行出错: {}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"crate_206\"></a>将代码拆分到crate</h2>\n<p>新建文件lib.rs，将main中的 Config 和 run 移动到 src/lib.rs，</p>\n<blockquote>\n<p><code>注意</code> lib.rs 里面的函数和结构体都要用pub关键字修饰</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件内容:\\n{}\"</span><span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    query<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数个数不足\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span> query<span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后修改main.rs，主要是添加了<code>use minigrep::Config</code>，这样使用的时候就可以使用minigrep来调用lib.rs中的run了，同时也可以直接调用其中的Config。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>env<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">minigrep<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:#?}\"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>err<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数拆分错误: {}\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">minigrep<span class=\"token punctuation\">::</span></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序运行出错: {}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_258\"></a>总结</h1>\n<p>通过本小节，你已经了解了如何对项目进行拆分，如何优雅的输出错误，并且将项目拆分到crate。虽然本节工作量大，但是对后续开发的好处也是非常大的，为将来的成功打下了基础。</p>\n<h1><a id=\"_261\"></a>完整代码</h1>\n<h2><a id=\"mainrs_262\"></a>main.rs</h2>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>env<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">minigrep<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:#?}\"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>err<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数拆分错误: {}\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">minigrep<span class=\"token punctuation\">::</span></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序运行出错: {}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"librs_282\"></a>lib.rs</h2>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件内容:\\n{}\"</span><span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    query<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数个数不足\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span> query<span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}