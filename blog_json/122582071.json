{"blogid": "122582071", "writerAge": "码龄5年", "writerBlogNum": "82", "writerCollect": "612", "writerComment": "73", "writerFan": "5307", "writerGrade": "5级", "writerIntegral": "1830", "writerName": "熊思宇", "writerProfileAdress": "writer_image\\profile_122582071.jpg", "writerRankTotal": "9706", "writerRankWeekly": "1170", "writerThumb": "149", "writerVisitNum": "238968", "blog_read_count": "4179", "blog_time": "已于 2022-07-22 20:32:15 修改", "blog_title": "C# 操作SQLite 增、删、改、查、创建", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<h1 id=\"main-toc\">一、简介</h1>\n<p>SQLite是一个轻量级、跨平台的关系型数据库，在小型项目中，方便，易用，同时支持多种开发语言，下面是我用C#语言对SQLite 的一个封装。</p>\n<p>Winfrom界面如下：</p>\n<p><img alt=\"\" height=\"449\" src=\"image\\e7c4c8b8eb7d4988aac04ee105b1edd8.png\" width=\"464\"/></p>\n<p></p>\n<p></p>\n<h1 id=\"%E4%BB%A3%E7%A0%81%E9%83%A8%E5%88%86\">二、代码部分</h1>\n<h2 id=\"SQLiteHelper.cs\">1.SQLiteHelper.cs</h2>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.Common;\nusing System.Data.SQLite;\nusing System.IO;\nusing System.Text;\n\nnamespace MySQLiteHelper\n{\n    public class SQLiteHelper\n    {\n        #region 字段\n        \n        /// &lt;summary&gt;\n        /// 事务的基类\n        /// &lt;/summary&gt;\n        private DbTransaction DBtrans;\n        /// &lt;summary&gt;\n        /// 使用静态变量字典解决多线程实例本类，实现一个数据库对应一个clslock\n        /// &lt;/summary&gt;\n        private static readonly Dictionary&lt;string, ClsLock&gt; RWL = new Dictionary&lt;string, ClsLock&gt;();\n        /// &lt;summary&gt;\n        /// 数据库地址\n        /// &lt;/summary&gt;\n        private readonly string mdataFile;\n        /// &lt;summary&gt;\n        /// 数据库密码\n        /// &lt;/summary&gt;\n        private readonly string mPassWord;\n        private readonly string LockName = null;\n        /// &lt;summary&gt;\n        /// 数据库连接定义\n        /// &lt;/summary&gt;\n        private SQLiteConnection mConn;\n\n        #endregion\n\n        #region 构造函数\n\n        /// &lt;summary&gt;\n        /// 根据数据库地址初始化\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"dataFile\"&gt;数据库地址&lt;/param&gt;\n        public SQLiteHelper(string dataFile)\n        {\n            this.mdataFile = dataFile ?? throw new ArgumentNullException(\"dataFile=null\");\n            //this.mdataFile = AppDomain.CurrentDomain.BaseDirectory + dataFile;\n            this.mdataFile = dataFile;\n            if (!RWL.ContainsKey(dataFile))\n            {\n                LockName = dataFile;\n                RWL.Add(dataFile, new ClsLock());\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 使用密码打开数据库\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"dataFile\"&gt;数据库地址&lt;/param&gt;\n        /// &lt;param name=\"PassWord\"&gt;数据库密码&lt;/param&gt;\n        public SQLiteHelper(string dataFile, string PassWord)\n        {\n            this.mdataFile = dataFile ?? throw new ArgumentNullException(\"dataFile is null\");\n            this.mPassWord = PassWord ?? throw new ArgumentNullException(\"PassWord is null\");\n            //this.mdataFile = AppDomain.CurrentDomain.BaseDirectory + dataFile;\n            this.mdataFile = dataFile;\n            if (!RWL.ContainsKey(dataFile))\n            {\n                LockName = dataFile;\n                RWL.Add(dataFile, new ClsLock());\n            }\n        }\n\n        #endregion\n\n        #region 打开/关闭 数据库\n\n        /// &lt;summary&gt;  \n        /// 打开 SQLiteManager 使用的数据库连接  \n        /// &lt;/summary&gt;  \n        public void Open()\n        {\n            if (string.IsNullOrWhiteSpace(mPassWord))\n            {\n                mConn = OpenConnection(this.mdataFile);\n            }\n            else\n            {\n                mConn = OpenConnection(this.mdataFile, mPassWord);\n            }\n            Console.WriteLine(\"打开数据库成功\");\n        }\n\n        /// &lt;summary&gt;\n        /// 关闭连接\n        /// &lt;/summary&gt;\n        public void Close()\n        {\n            if (this.mConn != null)\n            {\n                try\n                {\n                    this.mConn.Close();\n                    if (RWL.ContainsKey(LockName))\n                    {\n                        RWL.Remove(LockName);\n                    }\n                }\n                catch\n                {\n                    Console.WriteLine(\"关闭失败\");\n                }\n            }\n            Console.WriteLine(\"关闭数据库成功\");\n        }\n\n        #endregion\n\n        #region 事务\n\n        /// &lt;summary&gt;\n        /// 开始事务\n        /// &lt;/summary&gt;\n        public void BeginTrain()\n        {\n            EnsureConnection();\n            DBtrans = mConn.BeginTransaction();\n        }\n\n        /// &lt;summary&gt;\n        /// 提交事务\n        /// &lt;/summary&gt;\n        public void DBCommit()\n        {\n            try\n            {\n                DBtrans.Commit();\n            }\n            catch (Exception)\n            {\n                DBtrans.Rollback();\n            }\n        }\n\n        #endregion\n\n        #region 工具\n\n        /// &lt;summary&gt;  \n        /// 打开一个SQLite数据库文件，如果文件不存在，则创建（无密码）\n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"dataFile\"&gt;&lt;/param&gt;  \n        /// &lt;returns&gt;SQLiteConnection 类&lt;/returns&gt;  \n        private SQLiteConnection OpenConnection(string dataFile)\n        {\n            if (dataFile == null)\n            {\n                throw new ArgumentNullException(\"dataFiledataFile=null\");\n            }\n            if (!File.Exists(dataFile))\n            {\n                SQLiteConnection.CreateFile(dataFile);\n            }\n            SQLiteConnection conn = new SQLiteConnection();\n            SQLiteConnectionStringBuilder conStr = new SQLiteConnectionStringBuilder\n            {\n                DataSource = dataFile\n            };\n            conn.ConnectionString = conStr.ToString();\n            conn.Open();\n            return conn;\n        }\n\n        /// &lt;summary&gt;  \n        /// 打开一个SQLite数据库文件，如果文件不存在，则创建（有密码）\n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"dataFile\"&gt;&lt;/param&gt;  \n        /// &lt;param name=\"Password\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;SQLiteConnection 类&lt;/returns&gt;  \n        private SQLiteConnection OpenConnection(string dataFile, string Password)\n        {\n            if (dataFile == null)\n            {\n                throw new ArgumentNullException(\"dataFile=null\");\n            }\n            if (!File.Exists(Convert.ToString(dataFile)))\n            {\n                SQLiteConnection.CreateFile(dataFile);\n            }\n            try\n            {\n                SQLiteConnection conn = new SQLiteConnection();\n                SQLiteConnectionStringBuilder conStr = new SQLiteConnectionStringBuilder\n                {\n                    DataSource = dataFile,\n                    Password = Password\n                };\n                conn.ConnectionString = conStr.ToString();\n                conn.Open();\n                return conn;\n            }\n            catch (Exception)\n            {\n                return null;\n            }\n        }\n\n        /// &lt;summary&gt;  \n        /// 读取 或 设置 SQLiteManager 使用的数据库连接  \n        /// &lt;/summary&gt;  \n        public SQLiteConnection Connection\n        {\n            get\n            {\n                return mConn;\n            }\n            private set\n            {\n                mConn = value ?? throw new ArgumentNullException();\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 确保数据库是连接状态\n        /// &lt;/summary&gt;\n        /// &lt;exception cref=\"Exception\"&gt;&lt;/exception&gt;\n        protected void EnsureConnection()\n        {\n            if (this.mConn == null)\n            {\n                throw new Exception(\"SQLiteManager.Connection=null\");\n            }\n            if (mConn.State != ConnectionState.Open)\n            {\n                mConn.Open();\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 获取数据库文件的路径\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public string GetDataFile()\n        {\n            return this.mdataFile;\n        }\n\n        /// &lt;summary&gt;  \n        /// 判断表 table 是否存在  \n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"table\"&gt;&lt;/param&gt;  \n        /// &lt;returns&gt;存在返回true，否则返回false&lt;/returns&gt;  \n        public bool TableExists(string table)\n        {\n            if (table == null)\n            {\n                throw new ArgumentNullException(\"table=null\");\n            }\n            EnsureConnection();\n            SQLiteDataReader reader = ExecuteReader(\"SELECT count(*) as c FROM sqlite_master WHERE type='table' AND name=@tableName \", new SQLiteParameter[] { new SQLiteParameter(\"tableName\", table) });\n            if (reader == null)\n            {\n                return false;\n            }\n            reader.Read();\n            int c = reader.GetInt32(0);\n            reader.Close();\n            reader.Dispose();\n            //return false;  \n            return c == 1;\n        }\n\n        /// &lt;summary&gt;\n        /// VACUUM 命令（通过复制主数据库中的内容到一个临时数据库文件，然后清空主数据库，并从副本中重新载入原始的数据库文件）\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool Vacuum()\n        {\n            try\n            {\n                using (SQLiteCommand Command = new SQLiteCommand(\"VACUUM\", Connection))\n                {\n                    Command.ExecuteNonQuery();\n                }\n                return true;\n            }\n            catch (System.Data.SQLite.SQLiteException)\n            {\n                return false;\n            }\n        } \n\n        #endregion\n\n        #region 执行SQL\n\n        /// &lt;summary&gt;\n        /// 执行SQL, 并返回 SQLiteDataReader 对象结果 \n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"sql\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"paramArr\"&gt;null 表示无参数&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;  \n        public SQLiteDataReader ExecuteReader(string sql, SQLiteParameter[] paramArr)\n        {\n            if (sql == null)\n            {\n                throw new ArgumentNullException(\"sql=null\");\n            }\n            EnsureConnection();\n            using (RWL[LockName].Read())\n            {\n                using (SQLiteCommand cmd = new SQLiteCommand(sql, Connection))\n                {\n                    if (paramArr != null)\n                    {\n                        cmd.Parameters.AddRange(paramArr);\n                    }\n                    try\n                    {\n                        SQLiteDataReader reader = cmd.ExecuteReader();\n                        cmd.Parameters.Clear();\n                        return reader;\n                    }\n                    catch (Exception)\n                    {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 执行查询，并返回dataset对象\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sql\"&gt;SQL查询语句&lt;/param&gt;\n        /// &lt;param name=\"paramArr\"&gt;参数数组&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public DataSet ExecuteDataSet(string sql, SQLiteParameter[] paramArr)\n        {\n            if (sql == null)\n            {\n                throw new ArgumentNullException(\"sql=null\");\n            }\n            this.EnsureConnection();\n            using (RWL[LockName].Read())\n            {\n                using (SQLiteCommand cmd = new SQLiteCommand(sql, this.Connection))\n                {\n                    if (paramArr != null)\n                    {\n                        cmd.Parameters.AddRange(paramArr);\n                    }\n                    try\n                    {\n                        SQLiteDataAdapter da = new SQLiteDataAdapter();\n                        DataSet ds = new DataSet();\n                        da.SelectCommand = cmd;\n                        da.Fill(ds);\n                        cmd.Parameters.Clear();\n                        da.Dispose();\n                        return ds;\n                    }\n                    catch (Exception)\n                    {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 执行SQL查询，并返回dataset对象。\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"strTable\"&gt;映射源表的名称&lt;/param&gt;\n        /// &lt;param name=\"sql\"&gt;SQL语句&lt;/param&gt;\n        /// &lt;param name=\"paramArr\"&gt;SQL参数数组&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public DataSet ExecuteDataSet(string strTable, string sql, SQLiteParameter[] paramArr)\n        {\n            if (sql == null)\n            {\n                throw new ArgumentNullException(\"sql=null\");\n            }\n            this.EnsureConnection();\n            using (RWL[LockName].Read())\n            {\n                using (SQLiteCommand cmd = new SQLiteCommand(sql, this.Connection))\n                {\n                    if (paramArr != null)\n                    {\n                        cmd.Parameters.AddRange(paramArr);\n                    }\n                    try\n                    {\n                        SQLiteDataAdapter da = new SQLiteDataAdapter();\n                        DataSet ds = new DataSet();\n                        da.SelectCommand = cmd;\n                        da.Fill(ds, strTable);\n                        cmd.Parameters.Clear();\n                        da.Dispose();\n                        return ds;\n                    }\n                    catch (Exception)\n                    {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        /// &lt;summary&gt;  \n        /// 执行SQL，返回受影响的行数，可用于执行表创建语句，paramArr == null 表示无参数\n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"sql\"&gt;&lt;/param&gt;  \n        /// &lt;returns&gt;&lt;/returns&gt;  \n        public int ExecuteNonQuery(string sql, SQLiteParameter[] paramArr)\n        {\n            if (sql == null)\n            {\n                throw new ArgumentNullException(\"sql=null\");\n            }\n            this.EnsureConnection();\n            using (RWL[LockName].Read())\n            {\n                try\n                {\n                    using (SQLiteCommand cmd = new SQLiteCommand(sql, Connection))\n                    {\n                        if (paramArr != null)\n                        {\n                            foreach (SQLiteParameter p in paramArr)\n                            {\n                                cmd.Parameters.Add(p);\n                            }\n                        }\n                        int c = cmd.ExecuteNonQuery();\n                        cmd.Parameters.Clear();\n                        return c;\n                    }\n                }\n                catch (SQLiteException)\n                {\n                    return 0;\n                }\n            }\n        }\n\n        /// &lt;summary&gt;  \n        /// 执行SQL，返回结果集第一行，如果结果集为空，那么返回空 List(List.Count=0)， \n        /// rowWrapper = null 时，使用 WrapRowToDictionary  \n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"sql\"&gt;&lt;/param&gt;  \n        /// &lt;param name=\"paramArr\"&gt;&lt;/param&gt;  \n        /// &lt;returns&gt;&lt;/returns&gt;  \n        public object ExecuteScalar(string sql, SQLiteParameter[] paramArr)\n        {\n            if (sql == null)\n            {\n                throw new ArgumentNullException(\"sql=null\");\n            }\n            this.EnsureConnection();\n            using (RWL[LockName].Read())\n            {\n                using (SQLiteCommand cmd = new SQLiteCommand(sql, Connection))\n                {\n                    if (paramArr != null)\n                    {\n                        cmd.Parameters.AddRange(paramArr);\n                    }\n                    try\n                    {\n                        object reader = cmd.ExecuteScalar();\n                        cmd.Parameters.Clear();\n                        cmd.Dispose();\n                        return reader;\n                    }\n                    catch (Exception)\n                    {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        /// &lt;summary&gt;  \n        /// 查询一行记录，无结果时返回 null，conditionCol = null 时将忽略条件，直接执行 select * from table   \n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"table\"&gt;表名&lt;/param&gt;  \n        /// &lt;param name=\"conditionCol\"&gt;&lt;/param&gt;  \n        /// &lt;param name=\"conditionVal\"&gt;&lt;/param&gt;  \n        /// &lt;returns&gt;&lt;/returns&gt;  \n        public object QueryOne(string table, string conditionCol, object conditionVal)\n        {\n            if (table == null)\n            {\n                throw new ArgumentNullException(\"table=null\");\n            }\n            this.EnsureConnection();\n            string sql = \"select * from \" + table;\n            if (conditionCol != null)\n            {\n                sql += \" where \" + conditionCol + \"=@\" + conditionCol;\n            }\n            object result = ExecuteScalar(sql, new SQLiteParameter[] { new SQLiteParameter(conditionCol, conditionVal) });\n            return result;\n        }\n\n        #endregion\n\n        #region 增 删 改\n\n        /// &lt;summary&gt;  \n        /// 执行 insert into 语句 \n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"table\"&gt;&lt;/param&gt;  \n        /// &lt;param name=\"entity\"&gt;&lt;/param&gt;  \n        /// &lt;returns&gt;&lt;/returns&gt;  \n        public int InsertData(string table, Dictionary&lt;string, object&gt; entity)\n        {\n            if (table == null)\n            {\n                throw new ArgumentNullException(\"table=null\");\n            }\n            this.EnsureConnection();\n            string sql = BuildInsert(table, entity);\n            return this.ExecuteNonQuery(sql, BuildParamArray(entity));\n        }\n\n        /// &lt;summary&gt;  \n        /// 执行 update 语句，注意：如果 where = null，那么 whereParams 也为 null，\n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"table\"&gt;表名&lt;/param&gt;  \n        /// &lt;param name=\"entity\"&gt;要修改的列名和列名的值&lt;/param&gt;  \n        /// &lt;param name=\"where\"&gt;查找符合条件的列&lt;/param&gt;  \n        /// &lt;param name=\"whereParams\"&gt;where条件中参数的值&lt;/param&gt;  \n        /// &lt;returns&gt;&lt;/returns&gt;  \n        public int Update(string table, Dictionary&lt;string, object&gt; entity, string where, SQLiteParameter[] whereParams)\n        {\n            if (table == null)\n            {\n                throw new ArgumentNullException(\"table=null\");\n            }\n            this.EnsureConnection();\n            string sql = BuildUpdate(table, entity);\n            SQLiteParameter[] parameter = BuildParamArray(entity);\n            if (where != null)\n            {\n                sql += \" where \" + where;\n                if (whereParams != null)\n                {\n                    SQLiteParameter[] newArr = new SQLiteParameter[(parameter.Length + whereParams.Length)];\n                    Array.Copy(parameter, newArr, parameter.Length);\n                    Array.Copy(whereParams, 0, newArr, parameter.Length, whereParams.Length);\n                    parameter = newArr;\n                }\n            }\n            return this.ExecuteNonQuery(sql, parameter);\n        }\n\n        /// &lt;summary&gt;  \n        /// 执行 delete from table 语句，where不必包含'where'关键字，where = null 时将忽略 whereParams  \n        /// &lt;/summary&gt;  \n        /// &lt;param name=\"table\"&gt;&lt;/param&gt;  \n        /// &lt;param name=\"where\"&gt;&lt;/param&gt;  \n        /// &lt;param name=\"whereParams\"&gt;&lt;/param&gt;  \n        /// &lt;returns&gt;&lt;/returns&gt;  \n        public int Delete(string table, string where, SQLiteParameter[] whereParams)\n        {\n            if (table == null)\n            {\n                throw new ArgumentNullException(\"table=null\");\n            }\n            this.EnsureConnection();\n            string sql = \"delete from \" + table + \" \";\n            if (where != null)\n            {\n                sql += \"where \" + where;\n            }\n            return ExecuteNonQuery(sql, whereParams);\n        }\n\n        /// &lt;summary&gt;\n        /// 将 Dictionary 类型数据 转换为 SQLiteParameter[] 类型\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"entity\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private SQLiteParameter[] BuildParamArray(Dictionary&lt;string, object&gt; entity)\n        {\n            List&lt;SQLiteParameter&gt; list = new List&lt;SQLiteParameter&gt;();\n            foreach (string key in entity.Keys)\n            {\n                list.Add(new SQLiteParameter(key, entity[key]));\n            }\n            if (list.Count == 0)\n            {\n                return null;\n            }\n            return list.ToArray();\n        }\n\n        /// &lt;summary&gt;\n        /// 将 Dictionary 类型数据 转换为 插入数据 的 SQL语句\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"table\"&gt;表名&lt;/param&gt;\n        /// &lt;param name=\"entity\"&gt;字典&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private string BuildInsert(string table, Dictionary&lt;string, object&gt; entity)\n        {\n            StringBuilder buf = new StringBuilder();\n            buf.Append(\"insert into \").Append(table);\n            buf.Append(\" (\");\n            foreach (string key in entity.Keys)\n            {\n                buf.Append(key).Append(\",\");\n            }\n            buf.Remove(buf.Length - 1, 1); // 移除最后一个,\n            buf.Append(\") \");\n            buf.Append(\"values(\");\n            foreach (string key in entity.Keys)\n            {\n                buf.Append(\"@\").Append(key).Append(\",\"); // 创建一个参数\n            }\n            buf.Remove(buf.Length - 1, 1);\n            buf.Append(\") \");\n\n            return buf.ToString();\n        }\n\n        /// &lt;summary&gt;\n        /// 将 Dictionary 类型数据 转换为 修改数据 的 SQL语句\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"table\"&gt;表名&lt;/param&gt;\n        /// &lt;param name=\"entity\"&gt;字典&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private string BuildUpdate(string table, Dictionary&lt;string, object&gt; entity)\n        {\n            StringBuilder buf = new StringBuilder();\n            buf.Append(\"update \").Append(table).Append(\" set \");\n            foreach (string key in entity.Keys)\n            {\n                buf.Append(key).Append(\"=\").Append(\"@\").Append(key).Append(\",\");\n            }\n            buf.Remove(buf.Length - 1, 1);\n            buf.Append(\" \");\n            return buf.ToString();\n        }\n\n        #endregion\n    }\n}\n</code></pre>\n<h2 id=\"UsingLock.cs\">2.UsingLock.cs</h2>\n<p>采用多线程方式，在这里，如果不是频繁的使用，其实可以不用</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Threading;\n\nnamespace MySQLiteHelper\n{\n    /// &lt;summary&gt;\n    /// 使用using代替lock操作的对象，可指定写入和读取锁定模式\n    /// &lt;/summary&gt;\n    public sealed class ClsLock\n    {\n        #region 内部类\n\n        /// &lt;summary&gt;\n        /// 利用IDisposable的using语法糖方便的释放锁定操作内部类\n        /// &lt;/summary&gt;\n        private struct Lock : IDisposable\n        {\n            /// &lt;summary&gt;\n            /// 读写锁对象\n            /// &lt;/summary&gt;\n            private readonly ReaderWriterLockSlim _Lock;\n            /// &lt;summary&gt;\n            /// 是否为写入模式\n            /// &lt;/summary&gt;\n            private bool _IsWrite;\n            /// &lt;summary&gt;\n            /// 利用IDisposable的using语法糖方便的释放锁定操作构造函数\n            /// &lt;/summary&gt;\n            /// &lt;param name=\"rwl\"&gt;读写锁&lt;/param&gt;\n            /// &lt;param name=\"isWrite\"&gt;写入模式为true，读取模式为false&lt;/param&gt;\n            public Lock(ReaderWriterLockSlim rwl, bool isWrite)\n            {\n                _Lock = rwl;\n                _IsWrite = isWrite;\n            }\n            /// &lt;summary&gt;\n            /// 释放对象时退出指定锁定模式\n            /// &lt;/summary&gt;\n            public void Dispose()\n            {\n                if (_IsWrite)\n                {\n                    if (_Lock.IsWriteLockHeld)\n                    {\n                        _Lock.ExitWriteLock();\n                    }\n                }\n                else\n                {\n                    if (_Lock.IsReadLockHeld)\n                    {\n                        _Lock.ExitReadLock();\n                    }\n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 空的可释放对象，免去了调用时需要判断是否为null的问题内部类\n        /// &lt;/summary&gt;\n        private class Disposable : IDisposable\n        {\n            /// &lt;summary&gt;\n            /// 空的可释放对象\n            /// &lt;/summary&gt;\n            public static readonly Disposable Empty = new Disposable();\n            /// &lt;summary&gt;\n            /// 空的释放方法\n            /// &lt;/summary&gt;\n            public void Dispose() { }\n        }\n\n        #endregion\n\n        /// &lt;summary&gt;\n        /// 读写锁\n        /// &lt;/summary&gt;\n        private readonly ReaderWriterLockSlim _LockSlim = new ReaderWriterLockSlim();\n        /// &lt;summary&gt;\n        /// 使用using代替lock操作的对象，可指定写入和读取锁定模式构造函数\n        /// &lt;/summary&gt;\n        public ClsLock()\n        {\n            Enabled = true;\n        }\n        /// &lt;summary&gt;\n        /// 是否启用，当该值为false时，Read()和Write()方法将返回 Disposable.Empty\n        /// &lt;/summary&gt;\n        public bool Enabled { get; set; }\n\n        /// &lt;summary&gt; \n        /// 进入读取锁定模式，该模式下允许多个读操作同时进行，\n        /// 退出读锁请将返回对象释放，建议使用using语块,\n        /// Enabled为false时，返回Disposable.Empty，\n        /// 在读取或写入锁定模式下重复执行，返回Disposable.Empty;\n        /// &lt;/summary&gt;\n        public IDisposable Read()\n        {\n            if (Enabled == false || _LockSlim.IsReadLockHeld || _LockSlim.IsWriteLockHeld)\n            {\n                return Disposable.Empty;\n            }\n            else\n            {\n                _LockSlim.EnterReadLock();\n                return new Lock(_LockSlim, false);\n            }\n        }\n\n        /// &lt;summary&gt; \n        /// 进入写入锁定模式,该模式下只允许同时执行一个读操作，\n        /// 退出读锁请将返回对象释放，建议使用using语块，\n        /// Enabled为false时，返回Disposable.Empty，\n        /// 在写入锁定模式下重复执行，返回Disposable.Empty\n        /// &lt;/summary&gt;\n        /// &lt;exception cref=\"NotImplementedException\"&gt;读取模式下不能进入写入锁定状态&lt;/exception&gt;\n        public IDisposable Write()\n        {\n            if (Enabled == false || _LockSlim.IsWriteLockHeld)\n            {\n                return Disposable.Empty;\n            }\n            else if (_LockSlim.IsReadLockHeld)\n            {\n                throw new NotImplementedException(\"读取模式下不能进入写入锁定状态\");\n            }\n            else\n            {\n                _LockSlim.EnterWriteLock();\n                return new Lock(_LockSlim, true);\n            }\n        }\n    }\n\n}\n</code></pre>\n<h2 id=\"Form1.cs\">3.Form1.cs</h2>\n<p>窗体部分，界面如下</p>\n<p><img alt=\"\" height=\"449\" src=\"image\\e7c4c8b8eb7d4988aac04ee105b1edd8.png\" width=\"464\"/></p>\n<p>代码：</p>\n<pre><code class=\"language-cs\">using MySQLiteHelper;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SQLite;\nusing System.Windows.Forms;\n\nnamespace SQLiteDemo\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private SQLiteHelper SQLiteHelpers = null;\n        private const string DBAddress = \"D:\\\\SQLiteData\\\\test_record.db3\";\n\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            SQLiteHelpers = new SQLiteHelper(DBAddress,\"123456\");\n        }\n\n        /// &lt;summary&gt;\n        /// 打开数据库\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void Button_OpenDB_Click(object sender, EventArgs e)\n        {\n            SQLiteHelpers.Open();\n            Label_DBOpenState.Text = \"打开\";\n        }\n\n        /// &lt;summary&gt;\n        /// 关闭数据库\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void Button_CloseDB_Click(object sender, EventArgs e)\n        {\n            SQLiteHelpers.Close();\n            Label_DBOpenState.Text = \"关闭\";\n        }\n\n        /// &lt;summary&gt;\n        /// 查询\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void Button_Query_Click(object sender, EventArgs e)\n        {\n            SQLiteParameter[] parameter = new SQLiteParameter[]\n            {\n                new SQLiteParameter(\"address\", \"济南\")\n            };\n            string sql = \"SELECT * FROM student WHERE address = @address\";\n            DataSet dataSet = SQLiteHelpers.ExecuteDataSet(sql, parameter);\n            if (dataSet != null)\n            {\n                dataGridView1.DataSource = dataSet.Tables[0];\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 插入数据\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void Button_Add_Click(object sender, EventArgs e)\n        {\n            Dictionary&lt;string, object&gt; dic = new Dictionary&lt;string, object&gt;();\n            dic.Add(\"ID\", 6);\n            dic.Add(\"name\", \"王二麻子\");\n            dic.Add(\"age\", 44);\n            dic.Add(\"address\", \"陕西\");\n\n            int result = SQLiteHelpers.InsertData(\"student\", dic);\n            Console.WriteLine(\"插入结果，受影响的行数：\" + result);\n        }\n\n        /// &lt;summary&gt;\n        /// 修改数据\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void Button_Modify_Click(object sender, EventArgs e)\n        {\n            Dictionary&lt;string, object&gt; dic = new Dictionary&lt;string, object&gt;();\n            //将列名 name 的值改为 “猴子”\n            dic.Add(\"name\", \"猴子\");\n            //将列名 address 的值改为 花果山\n            dic.Add(\"address\", \"花果山\");\n            //where条件\n            string where = \"ID = @ID AND age = @Age\";\n            //where条件中对应的参数\n            SQLiteParameter[] parameter = new SQLiteParameter[]\n            {\n                new SQLiteParameter(\"ID\", 4),\n                new SQLiteParameter(\"Age\",23)\n            };\n            \n            int result = SQLiteHelpers.Update(\"student\", dic, where, parameter);\n            Console.WriteLine(\"修改结果，受影响的行数：\" + result);\n        }\n\n        /// &lt;summary&gt;\n        /// 删除数据\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void Button_Delete_Click(object sender, EventArgs e)\n        {\n            //where条件\n            string where = \"ID = @ID\";\n            //where条件中对应的参数\n            SQLiteParameter[] parameter = new SQLiteParameter[]\n            {\n                new SQLiteParameter(\"ID\", 6),\n            };\n\n            int result = SQLiteHelpers.Delete(\"student\", where, parameter);\n            Console.WriteLine(\"删除结果，受影响的行数：\" + result);\n        }\n\n        /// &lt;summary&gt;\n        /// 判断表是否存在\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void Button_TableExists_Click(object sender, EventArgs e)\n        {\n            string title = \"dddd\";\n            bool result = SQLiteHelpers.TableExists(title);\n            Console.WriteLine(string.Format(\"{0} 表是否存在，结果：{1}\", title, result));\n        }\n\n        //输出各表中的数据\n        //public static void PrintValues(DataSet ds)\n        //{\n        //    foreach (DataTable table in ds.Tables)\n        //    {\n        //        Console.WriteLine(\"表名称：\" + table.TableName);\n        //        foreach (DataRow row in table.Rows)\n        //        {\n        //            foreach (DataColumn column in table.Columns)\n        //            {\n        //                Console.Write(row[column] + \"\");\n        //            }\n        //            Console.WriteLine();\n        //        }\n        //    }\n        //}\n\n    }\n}\n</code></pre>\n<p>上面就是所有的源码，代码比较长，你忍一下，其实也没有很复杂的部分，下面是项目的源码，有兴趣的可以支持一下我了，嘿嘿~</p>\n<p>项目源码：<a class=\"link-info\" href=\"https://download.csdn.net/download/qq_38693757/76685983\" title=\"点击下载\">点击下载</a></p>\n<p></p>\n<h1 id=\"%E4%BB%A3%E7%A0%81%E8%BF%98%E9%9C%80%E8%A6%81%E6%94%B9%E8%BF%9B%E9%83%A8%E5%88%86\"><strong>三、代码还需要改进部分</strong></h1>\n<p>上面的代码我不觉得是完美的，由于时间关系，读者可以自己去实现这些功能：</p>\n<p id=\"1.%E5%8E%BB%E6%8E%89%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><strong>1.去掉多线程</strong></p>\n<p>如果不想用多线程可以去掉UsingLock.cs ，在SQLiteHelper.cs中删除对应的引用即可。</p>\n<p></p>\n<p id=\"2.%E5%B0%81%E8%A3%85%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E9%83%A8%E5%88%86\"><strong>2.封装创建数据库部分</strong></p>\n<p>创建数据库文件，可以从代码中分离成单独的方法。比如创建有密码的数据库文件。</p>\n<p>创建数据库文件方式有多种，不一定要用上述代码中的写法，也可以参考下面方式：</p>\n<p>1）编辑器，如：SQLiteStudio，Navicat 15 for SQLite 等，参考帖子：<a class=\"link-info\" href=\"https://blog.csdn.net/qq_38693757/article/details/122366390?spm=1001.2014.3001.5502\" title=\"点击跳转\">点击跳转</a></p>\n<p>2）在SQLiteHelper.cs中创建数据库文件使用的是 SQLiteConnection.CreateFile(DataFile) 这句代码创建的数据库文件，其实不用这句一样可以创建数据库文件，如下：</p>\n<pre><code class=\"language-cs\">/// &lt;summary&gt;\n/// 创建数据库\n/// &lt;/summary&gt;\n/// &lt;param name=\"fileName\"&gt;数据库文件路径&lt;/param&gt;\n/// &lt;param name=\"password\"&gt;数据库密码&lt;/param&gt;\n/// &lt;returns&gt;返回结果字符串，不为空则为错误信息&lt;/returns&gt;\npublic static string CreateDB(string fileName, string password)\n{\n    try\n    {\n        string[] parmArr = new string[] { \"Data Source=\", fileName, \";Version=3;\" };\n        string connStr = string.Concat(parmArr);\n        SQLiteConnection conn = new SQLiteConnection(connStr);\n        conn.Open();\n        // 为数据库设置密码\n        conn.ChangePassword(password);\n        conn.Close();\n        return string.Empty;\n    }\n    catch (Exception ex)\n    {\n        return ex.Message;\n    }\n}</code></pre>\n<p>运行 SQLiteConnection.open 就会创建一个空的指定名字的数据库文件。</p>\n<p></p>\n<p id=\"3.%E5%BD%B1%E5%93%8D%E8%A1%8C%E6%95%B0%E4%B8%BA0%E7%9A%84SQL%E8%AF%AD%E5%8F%A5\"><strong>3.影响行数为0的SQL语句</strong></p>\n<p>在执行SQL语句时，有些语句执行成功，也不会有影响行数。比如，创建表，删除表，此时执行SQL语句返回的影响行数就为0。执行完后，你不知道是否执行成功</p>\n<p></p>\n<p id=\"4.%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E6%94%B9%E8%BF%9B\"><strong>4.返回值的改进</strong></p>\n<p>只要SQL语句不报错就是执行成功的，在方法的返回值可以改为多个，比如用 ：</p>\n<p><span style=\"color:#38d8f0;\">Tuple</span>&lt;<span style=\"color:#1a439c;\">bool</span>, <span style=\"color:#1a439c;\">string</span>, <span style=\"color:#1a439c;\">int</span>&gt; 第一个参数 bool 代表执行结果，第二个参数 string 代表错误信息，第三个参数 int 代表影响的行数。</p>\n<p><span style=\"color:#38d8f0;\">Tuple</span>&lt;<span style=\"color:#1a439c;\">bool</span>, <span style=\"color:#1a439c;\">string</span>, <span style=\"color:#38d8f0;\">DataSet</span>&gt; 第一个参数 bool 代表执行结果，第二个参数 string 代表错误信息，第三个参数 DataSet 代表返回的表单数据。</p>\n<p></p>\n<p></p>\n<p>----------------------------------------</p>\n<p>2022.06.13</p>\n<p>由于时间问题，当时代码并没有那么完善，于是我根据上面所描述的特点进行了改进行，并增加了一些新的功能，比如创建有密码的数据库等，现在改进版本现在已经完成了，界面如下</p>\n<p><img alt=\"\" src=\"image\\475852a75c3744ea83ce77f9925add69.png\"/></p>\n<p>有兴趣的大佬可以支持我一下，在此先行谢过了。</p>\n<p>源码：<a class=\"link-info\" href=\"https://download.csdn.net/download/qq_38693757/85623654\" title=\"点击下载\">点击下载</a></p>\n<p></p>\n<p>end</p>\n</div>\n</div>"}