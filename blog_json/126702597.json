{"blogid": "126702597", "writerAge": "码龄1年", "writerBlogNum": "76", "writerCollect": "13", "writerComment": "1", "writerFan": "4", "writerGrade": "3级", "writerIntegral": "763", "writerName": "Ashen_0nee", "writerProfileAdress": "writer_image\\profile_126702597.jpg", "writerRankTotal": "27657", "writerRankWeekly": "7521", "writerThumb": "2", "writerVisitNum": "7152", "blog_read_count": "100", "blog_time": "于 2022-09-05 19:04:52 发布", "blog_title": "9月5日关键点检测学习笔记——人体骨骼点检测：自底向上", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">前言</a></li><li><a href=\"#_Stacked_Hourglass_Networks_18\">一、堆叠沙漏网络 Stacked Hourglass Networks</a></li><li><ul><li><a href=\"#1Hourglass_Module_23\">1、Hourglass Module</a></li><li><a href=\"#2Heat_map_25\">2、Heat map</a></li></ul>\n</li><li><a href=\"#_30\">二、自顶向下的问题</a></li><li><a href=\"#_36\">三、自底向上</a></li><li><ul><li><a href=\"#1OpenPose_38\">1、OpenPose</a></li></ul>\n</li><li><a href=\"#OpenPose__66\">四、OpenPose 实战</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<p>本文为9月5日关键点检测学习笔记——人体骨骼点检测：自底向上，分为四个章节：</p>\n<ul><li>堆叠沙漏网络 Stacked Hourglass Networks；</li><li>自顶向下的问题；</li><li>自底向上；</li><li>OpenPose 实战。</li></ul>\n<hr/>\n<h1><a id=\"_Stacked_Hourglass_Networks_18\"></a>一、堆叠沙漏网络 Stacked Hourglass Networks</h1>\n<p><img alt=\"1\" src=\"image\\fc17c963e86d4ed699b2a7f7cafefa29.png\"/></p>\n<p><img alt=\"2\" src=\"image\\db83e6bc29d34471877f60fc6451df29.png\"/></p>\n<h2><a id=\"1Hourglass_Module_23\"></a>1、Hourglass Module</h2>\n<p><img alt=\"2\" src=\"image\\1a65640ec7fb4cef83ca5fc682ff1df4.png\"/></p>\n<h2><a id=\"2Heat_map_25\"></a>2、Heat map</h2>\n<p><img alt=\"3\" src=\"image\\e07ef4846fca4d9ba8f0fe1071044932.png\"/></p>\n<hr/>\n<h1><a id=\"_30\"></a>二、自顶向下的问题</h1>\n<ol><li>速度慢；</li><li>Temporal occlusion 目标遮挡。</li></ol>\n<hr/>\n<h1><a id=\"_36\"></a>三、自底向上</h1>\n<h2><a id=\"1OpenPose_38\"></a>1、OpenPose</h2>\n<p><img alt=\"4\" src=\"image\\fe28713b352b43839a1244c3189024bf.png\"/><br/> <img alt=\"5\" src=\"image\\f40e2c97ccb54674b8a0696f6c5f1ead.png\"/><br/> 每个 confidence map 是一个灰度图，其最大值的位置坐标即为对应人体某个概率最高的关键点。</p>\n<p><img alt=\"6\" src=\"image\\0b8847a68b31491b8400b31616e2e239.png\"/><br/> 另一个分支预测 part affinities 的 2D 向量场，表示两个关键点间的关联度。</p>\n<ul><li><strong>Parts detection：</strong></li></ul>\n<p><img alt=\"7\" src=\"image\\32063de8c8d64df795ff3b97aaba5dd3.png\"/></p>\n<ul><li><strong>Parts association：</strong><br/> <img alt=\"8\" src=\"image\\799c61f6d37e4131884bbd4b1101e4ab.png\"/><br/> <img alt=\"9\" src=\"image\\887af7b67e3643ea8da1d170643c2ac4.png\"/><br/> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          \n           L\n          \n          \n           \n            c\n           \n           \n            ,\n           \n           \n            k\n           \n          \n          \n           ∗\n          \n         \n         \n          (\n         \n         \n          p\n         \n         \n          )\n         \n         \n          =\n         \n         \n          \n           {\n          \n          \n           \n            \n             \n              \n               \n                v\n               \n               \n               \n                i\n               \n               \n                f\n               \n               \n                 \n               \n               \n                p\n               \n               \n                 \n               \n               \n                o\n               \n               \n                n\n               \n               \n                 \n               \n               \n                l\n               \n               \n                i\n               \n               \n                m\n               \n               \n                b\n               \n               \n                 \n               \n               \n                c\n               \n               \n                ,\n               \n               \n                k\n               \n              \n             \n            \n           \n           \n            \n             \n              \n               \n                0\n               \n               \n               \n                o\n               \n               \n                t\n               \n               \n                h\n               \n               \n                e\n               \n               \n                r\n               \n               \n                w\n               \n               \n                i\n               \n               \n                s\n               \n               \n                e\n               \n              \n             \n            \n           \n          \n         \n         \n         \n          v\n         \n         \n          =\n         \n         \n          \n           \n            (\n           \n           \n            \n             x\n            \n            \n             \n              \n               j\n              \n              \n               2\n              \n             \n             \n              ,\n             \n             \n              k\n             \n            \n           \n           \n            −\n           \n           \n            \n             x\n            \n            \n             \n              \n               j\n              \n              \n               1\n              \n             \n             \n              ,\n             \n             \n              k\n             \n            \n           \n           \n            )\n           \n          \n          \n           \n            ∣\n           \n           \n            ∣\n           \n           \n            \n             x\n            \n            \n             \n              \n               j\n              \n              \n               2\n              \n             \n             \n              ,\n             \n             \n              k\n             \n            \n           \n           \n            −\n           \n           \n            \n             x\n            \n            \n             \n              \n               j\n              \n              \n               1\n              \n             \n             \n              ,\n             \n             \n              k\n             \n            \n           \n           \n            ∣\n           \n           \n            \n             ∣\n            \n            \n             2\n            \n           \n          \n         \n         \n         \n          0\n         \n         \n          ≤\n         \n         \n          v\n         \n         \n          ⋅\n         \n         \n          (\n         \n         \n          p\n         \n         \n          −\n         \n         \n          \n           x\n          \n          \n           \n            \n             j\n            \n            \n             i\n            \n           \n           \n            ,\n           \n           \n            k\n           \n          \n         \n         \n          )\n         \n         \n          ≤\n         \n         \n          \n           l\n          \n          \n           \n            c\n           \n           \n            ,\n           \n           \n            k\n           \n          \n         \n         \n         \n          a\n         \n         \n          n\n         \n         \n          d\n         \n         \n         \n          ∣\n         \n         \n          \n           v\n          \n          \n           ⊥\n          \n         \n         \n          ⋅\n         \n         \n          (\n         \n         \n          p\n         \n         \n          −\n         \n         \n          \n           x\n          \n          \n           \n            \n             j\n            \n            \n             i\n            \n           \n           \n            ,\n           \n           \n            k\n           \n          \n         \n         \n          )\n         \n         \n          ∣\n         \n         \n          ≤\n         \n         \n          \n           σ\n          \n          \n           l\n          \n         \n        \n        \n          \\textbf{L}^*_{c, k}(p) = \\left\\{\\begin{matrix} \\textbf{v} \\quad if\\ \\textbf{p}\\ on\\ limb\\ c, k \\\\ \\textbf{0} \\quad otherwise \\end{matrix}\\right. \\\\ \\textbf{v} = \\frac{(\\textbf{x}_{j_2, k} - \\textbf{x}_{j_1, k})}{||\\textbf{x}_{j_2, k} - \\textbf{x}_{j_1, k}||_2}\\\\ 0 \\le \\textbf{v}\\cdot (\\textbf{p} - \\textbf{x}_{j_i, k} ) \\le l_{c, k} \\quad and \\quad |\\textbf{v}_\\perp \\cdot (\\textbf{p} - \\textbf{x}_{j_i, k}) | \\le \\sigma _l \n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.1478em; vertical-align: -0.3831em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">L</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.7647em;\"><span class=\"\" style=\"top: -2.453em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span><span class=\"\" style=\"top: -3.139em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3831em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 2.4em; vertical-align: -0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top: 0em;\"><span class=\"delimsizing size3\">{<!-- --></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.45em;\"><span class=\"\" style=\"top: -3.61em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">v</span></span><span class=\"mspace\" style=\"margin-right: 1em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right: 0.1076em;\">f</span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord textbf\">p</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right: 0.0197em;\">l</span><span class=\"mord mathnormal\">imb</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0315em;\">k</span></span></span><span class=\"\" style=\"top: -2.41em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">0</span></span><span class=\"mspace\" style=\"margin-right: 1em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">er</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0269em;\">w</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">se</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.95em;\"><span class=\"\"></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.4444em;\"></span><span class=\"mord text\"><span class=\"mord textbf\">v</span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 2.3991em; vertical-align: -0.9721em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.427em;\"><span class=\"\" style=\"top: -2.314em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mord\">∣∣</span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3173em;\"><span class=\"\" style=\"top: -2.357em; margin-left: -0.0572em; margin-right: 0.0714em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.143em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3173em;\"><span class=\"\" style=\"top: -2.357em; margin-left: -0.0572em; margin-right: 0.0714em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.143em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.677em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3173em;\"><span class=\"\" style=\"top: -2.357em; margin-left: -0.0572em; margin-right: 0.0714em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.143em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3173em;\"><span class=\"\" style=\"top: -2.357em; margin-left: -0.0572em; margin-right: 0.0714em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.143em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.9721em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.7804em; vertical-align: -0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.4445em;\"></span><span class=\"mord text\"><span class=\"mord textbf\">v</span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord textbf\">p</span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.0361em; vertical-align: -0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3281em;\"><span class=\"\" style=\"top: -2.357em; margin-left: -0.0572em; margin-right: 0.0714em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.143em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.0361em; vertical-align: -0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0197em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0197em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 1em;\"></span><span class=\"mord mathnormal\">an</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right: 1em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">v</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mrel mtight\">⊥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord textbf\">p</span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.0361em; vertical-align: -0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3281em;\"><span class=\"\" style=\"top: -2.357em; margin-left: -0.0572em; margin-right: 0.0714em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.143em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.5806em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0197em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span></span><br/> 其中，四肢宽度 limb width <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          σ\n         \n         \n          l\n         \n        \n       \n       \n        \\sigma_l\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.5806em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0197em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 为像素宽度，四肢长度：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          l\n         \n         \n          \n           c\n          \n          \n           ,\n          \n          \n           k\n          \n         \n        \n        \n         =\n        \n        \n         ∣\n        \n        \n         ∣\n        \n        \n         \n          x\n         \n         \n          \n           \n            j\n           \n           \n            2\n           \n          \n          \n           ,\n          \n          \n           k\n          \n         \n        \n        \n         −\n        \n        \n         \n          x\n         \n         \n          \n           \n            j\n           \n           \n            1\n           \n          \n          \n           ,\n          \n          \n           k\n          \n         \n        \n        \n         ∣\n        \n        \n         \n          ∣\n         \n         \n          2\n         \n        \n       \n       \n        l_{c, k} = ||\\textbf{x}_{j_2, k} - \\textbf{x}_{j_1, k}||_2\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.9805em; vertical-align: -0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0197em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0197em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.0361em; vertical-align: -0.2861em;\"></span><span class=\"mord\">∣∣</span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3173em;\"><span class=\"\" style=\"top: -2.357em; margin-left: -0.0572em; margin-right: 0.0714em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.143em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.0361em; vertical-align: -0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3173em;\"><span class=\"\" style=\"top: -2.357em; margin-left: -0.0572em; margin-right: 0.0714em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.143em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3011em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>；<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          v\n         \n         \n          ⊥\n         \n        \n       \n       \n        \\textbf{v}_{\\perp}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.5944em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textbf\">v</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">⊥</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 是 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         v\n        \n       \n       \n        \\textbf{v}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.4444em;\"></span><span class=\"mord text\"><span class=\"mord textbf\">v</span></span></span></span></span></span> 的垂直向量。</li></ul>\n<hr/>\n<h1><a id=\"OpenPose__66\"></a>四、OpenPose 实战</h1>\n<p><code>train_VGG19.py 代码如下：</code></p>\n<pre><code class=\"prism language-py\"><span class=\"token keyword\">import</span> argparse\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict\n\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">as</span> nn\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>lr_scheduler <span class=\"token keyword\">import</span> ReduceLROnPlateau\n\n<span class=\"token keyword\">from</span> lib<span class=\"token punctuation\">.</span>network<span class=\"token punctuation\">.</span>rtpose_vgg <span class=\"token keyword\">import</span> get_model<span class=\"token punctuation\">,</span> use_vgg\n<span class=\"token keyword\">from</span> lib<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> coco<span class=\"token punctuation\">,</span> transforms<span class=\"token punctuation\">,</span> datasets\n<span class=\"token keyword\">from</span> lib<span class=\"token punctuation\">.</span>config <span class=\"token keyword\">import</span> update_config\n\nDATA_DIR <span class=\"token operator\">=</span> <span class=\"token string\">'/data/coco'</span>\n\nANNOTATIONS_TRAIN <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>DATA_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'annotations'</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'person_keypoints_train2017.json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nANNOTATIONS_VAL <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>DATA_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'annotations'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'person_keypoints_val2017.json'</span><span class=\"token punctuation\">)</span>\nIMAGE_DIR_TRAIN <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>DATA_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'images/train2017'</span><span class=\"token punctuation\">)</span>\nIMAGE_DIR_VAL <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>DATA_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'images/val2017'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">train_cli</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    group <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>add_argument_group<span class=\"token punctuation\">(</span><span class=\"token string\">'dataset and loader'</span><span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--train-annotations'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ANNOTATIONS_TRAIN<span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--train-image-dir'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>IMAGE_DIR_TRAIN<span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--val-annotations'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ANNOTATIONS_VAL<span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--val-image-dir'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>IMAGE_DIR_VAL<span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--pre-n-images'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n                       <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'number of images to sampe for pretraining'</span><span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--n-images'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n                       <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'number of images to sample'</span><span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--duplicate-data'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n                       <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'duplicate data'</span><span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--loader-workers'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n                       <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'number of workers for data loading'</span><span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--batch-size'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">72</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n                       <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'batch size'</span><span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--lr'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--learning-rate'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span>\n                    metavar<span class=\"token operator\">=</span><span class=\"token string\">'LR'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'initial learning rate'</span><span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--momentum'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> metavar<span class=\"token operator\">=</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'momentum'</span><span class=\"token punctuation\">)</span>\n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--weight-decay'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--wd'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">0.000</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span>\n                    metavar<span class=\"token operator\">=</span><span class=\"token string\">'W'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'weight decay (default: 1e-4)'</span><span class=\"token punctuation\">)</span> \n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--nesterov'</span><span class=\"token punctuation\">,</span> dest<span class=\"token operator\">=</span><span class=\"token string\">'nesterov'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>     \n    group<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--print_freq'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> metavar<span class=\"token operator\">=</span><span class=\"token string\">'N'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'number of iterations to print the training statistics'</span><span class=\"token punctuation\">)</span>    \n                   \n                                         \n<span class=\"token keyword\">def</span> <span class=\"token function\">train_factory</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> preprocess<span class=\"token punctuation\">,</span> target_transforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    train_datas <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>datasets<span class=\"token punctuation\">.</span>CocoKeypoints<span class=\"token punctuation\">(</span>\n        root<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>train_image_dir<span class=\"token punctuation\">,</span>\n        annFile<span class=\"token operator\">=</span>item<span class=\"token punctuation\">,</span>\n        preprocess<span class=\"token operator\">=</span>preprocess<span class=\"token punctuation\">,</span>\n        image_transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>image_transform_train<span class=\"token punctuation\">,</span>\n        target_transforms<span class=\"token operator\">=</span>target_transforms<span class=\"token punctuation\">,</span>\n        n_images<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>n_images<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">.</span>train_annotations<span class=\"token punctuation\">]</span>\n\n    train_data <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>ConcatDataset<span class=\"token punctuation\">(</span>train_datas<span class=\"token punctuation\">)</span>\n    \n    train_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>\n        train_data<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        pin_memory<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>pin_memory<span class=\"token punctuation\">,</span> num_workers<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>loader_workers<span class=\"token punctuation\">,</span> drop_last<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    val_data <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>CocoKeypoints<span class=\"token punctuation\">(</span>\n        root<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>val_image_dir<span class=\"token punctuation\">,</span>\n        annFile<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>val_annotations<span class=\"token punctuation\">,</span>\n        preprocess<span class=\"token operator\">=</span>preprocess<span class=\"token punctuation\">,</span>\n        image_transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>image_transform_train<span class=\"token punctuation\">,</span>\n        target_transforms<span class=\"token operator\">=</span>target_transforms<span class=\"token punctuation\">,</span>\n        n_images<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>n_images<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    val_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>\n        val_data<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        pin_memory<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>pin_memory<span class=\"token punctuation\">,</span> num_workers<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>loader_workers<span class=\"token punctuation\">,</span> drop_last<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> train_loader<span class=\"token punctuation\">,</span> val_loader<span class=\"token punctuation\">,</span> train_data<span class=\"token punctuation\">,</span> val_data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span>\n        description<span class=\"token operator\">=</span>__doc__<span class=\"token punctuation\">,</span>\n        formatter_class<span class=\"token operator\">=</span>argparse<span class=\"token punctuation\">.</span>ArgumentDefaultsHelpFormatter<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    train_cli<span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'-o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--output'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'output file'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--stride-apply'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'apply and reset gradients every n batches'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--epochs'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'number of epochs to train'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--freeze-base'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'number of epochs to train with frozen base'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--pre-lr'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">1e-4</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'pre learning rate'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--update-batchnorm-runningstatistics'</span><span class=\"token punctuation\">,</span>\n                        default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'update batch norm running statistics'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--square-edge'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">368</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'square edge of input images'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--ema'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">1e-3</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'ema decay constant'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--debug-without-plots'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'enable debug but dont plot'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-cuda'</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">'store_true'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'disable CUDA'</span><span class=\"token punctuation\">)</span>                        \n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--model_path'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'./network/weight/'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> metavar<span class=\"token operator\">=</span><span class=\"token string\">'DIR'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'path to where the model saved'</span><span class=\"token punctuation\">)</span>                         \n    args <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># add args.device</span>\n    args<span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span>\n    args<span class=\"token punctuation\">.</span>pin_memory <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> args<span class=\"token punctuation\">.</span>disable_cuda <span class=\"token keyword\">and</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        args<span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cuda'</span><span class=\"token punctuation\">)</span>\n        args<span class=\"token punctuation\">.</span>pin_memory <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        \n    <span class=\"token keyword\">return</span> args\n\nargs <span class=\"token operator\">=</span> cli<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loading dataset...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># load train data</span>\npreprocess <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        transforms<span class=\"token punctuation\">.</span>RandomApply<span class=\"token punctuation\">(</span>transforms<span class=\"token punctuation\">.</span>HFlip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        transforms<span class=\"token punctuation\">.</span>RescaleRelative<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        transforms<span class=\"token punctuation\">.</span>Crop<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>square_edge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        transforms<span class=\"token punctuation\">.</span>CenterPad<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>square_edge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntrain_loader<span class=\"token punctuation\">,</span> val_loader<span class=\"token punctuation\">,</span> train_data<span class=\"token punctuation\">,</span> val_data <span class=\"token operator\">=</span> train_factory<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> preprocess<span class=\"token punctuation\">,</span> target_transforms<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">build_names</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            names<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'loss_stage%d_L%d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> names\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_loss</span><span class=\"token punctuation\">(</span>saved_for_loss<span class=\"token punctuation\">,</span> heat_temp<span class=\"token punctuation\">,</span> vec_temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    names <span class=\"token operator\">=</span> build_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    saved_for_log <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    criterion <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MSELoss<span class=\"token punctuation\">(</span>reduction<span class=\"token operator\">=</span><span class=\"token string\">'mean'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    total_loss <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        pred1 <span class=\"token operator\">=</span> saved_for_loss<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> j<span class=\"token punctuation\">]</span>\n        pred2 <span class=\"token operator\">=</span> saved_for_loss<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> \n\n\n        <span class=\"token comment\"># Compute losses</span>\n        loss1 <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>pred1<span class=\"token punctuation\">,</span> vec_temp<span class=\"token punctuation\">)</span>\n        loss2 <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>pred2<span class=\"token punctuation\">,</span> heat_temp<span class=\"token punctuation\">)</span> \n\n        total_loss <span class=\"token operator\">+=</span> loss1\n        total_loss <span class=\"token operator\">+=</span> loss2\n        <span class=\"token comment\"># print(total_loss)</span>\n\n        <span class=\"token comment\"># Get value from Variable and save for log</span>\n        saved_for_log<span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loss1<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        saved_for_log<span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loss2<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    saved_for_log<span class=\"token punctuation\">[</span><span class=\"token string\">'max_ht'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>\n        saved_for_loss<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    saved_for_log<span class=\"token punctuation\">[</span><span class=\"token string\">'min_ht'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>\n        saved_for_loss<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    saved_for_log<span class=\"token punctuation\">[</span><span class=\"token string\">'max_paf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>saved_for_loss<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    saved_for_log<span class=\"token punctuation\">[</span><span class=\"token string\">'min_paf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>saved_for_loss<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> total_loss<span class=\"token punctuation\">,</span> saved_for_log\n         \n\n<span class=\"token keyword\">def</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> optimizer<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    batch_time <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    data_time <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    losses <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    meter_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> build_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        meter_dict<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    meter_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'max_ht'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    meter_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'min_ht'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n    meter_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'max_paf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n    meter_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'min_paf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># switch to train mode</span>\n    model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> heatmap_target<span class=\"token punctuation\">,</span> paf_target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># measure data loading time</span>\n        <span class=\"token comment\">#writer.add_text('Text', 'text logged at step:' + str(i), i)</span>\n        \n        <span class=\"token comment\">#for name, param in model.named_parameters():</span>\n        <span class=\"token comment\">#    writer.add_histogram(name, param.clone().cpu().data.numpy(),i)        </span>\n        data_time<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> end<span class=\"token punctuation\">)</span>\n\n        img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        heatmap_target <span class=\"token operator\">=</span> heatmap_target<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        paf_target <span class=\"token operator\">=</span> paf_target<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># compute output</span>\n        _<span class=\"token punctuation\">,</span>saved_for_loss <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n        \n        total_loss<span class=\"token punctuation\">,</span> saved_for_log <span class=\"token operator\">=</span> get_loss<span class=\"token punctuation\">(</span>saved_for_loss<span class=\"token punctuation\">,</span> heatmap_target<span class=\"token punctuation\">,</span> paf_target<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span>_ <span class=\"token keyword\">in</span> meter_dict<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            meter_dict<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>saved_for_log<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        losses<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>total_loss<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># compute gradient and do SGD step</span>\n        optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        total_loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># measure elapsed time</span>\n        batch_time<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> end<span class=\"token punctuation\">)</span>\n        end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> args<span class=\"token punctuation\">.</span>print_freq <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            print_string <span class=\"token operator\">=</span> <span class=\"token string\">'Epoch: [{0}][{1}/{2}]\\t'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            print_string <span class=\"token operator\">+=</span><span class=\"token string\">'Data time {data_time.val:.3f} ({data_time.avg:.3f})\\t'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span> data_time<span class=\"token operator\">=</span>data_time<span class=\"token punctuation\">)</span>\n            print_string <span class=\"token operator\">+=</span> <span class=\"token string\">'Loss {loss.val:.4f} ({loss.avg:.4f})'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>loss<span class=\"token operator\">=</span>losses<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> meter_dict<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                print_string<span class=\"token operator\">+=</span><span class=\"token string\">'{name}: {loss.val:.4f} ({loss.avg:.4f})\\t'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">,</span> loss<span class=\"token operator\">=</span>value<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>print_string<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> losses<span class=\"token punctuation\">.</span>avg  \n        \n        \n<span class=\"token keyword\">def</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>val_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    batch_time <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    data_time <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    losses <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    meter_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> build_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        meter_dict<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    meter_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'max_ht'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    meter_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'min_ht'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n    meter_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'max_paf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n    meter_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'min_paf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AverageMeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># switch to train mode</span>\n    model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> heatmap_target<span class=\"token punctuation\">,</span> paf_target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>val_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># measure data loading time</span>\n        data_time<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> end<span class=\"token punctuation\">)</span>\n        img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        heatmap_target <span class=\"token operator\">=</span> heatmap_target<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        paf_target <span class=\"token operator\">=</span> paf_target<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># compute output</span>\n        _<span class=\"token punctuation\">,</span>saved_for_loss <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n        \n        total_loss<span class=\"token punctuation\">,</span> saved_for_log <span class=\"token operator\">=</span> get_loss<span class=\"token punctuation\">(</span>saved_for_loss<span class=\"token punctuation\">,</span> heatmap_target<span class=\"token punctuation\">,</span> paf_target<span class=\"token punctuation\">)</span>\n               \n        <span class=\"token comment\">#for name,_ in meter_dict.items():</span>\n        <span class=\"token comment\">#    meter_dict[name].update(saved_for_log[name], img.size(0))</span>\n            \n        losses<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>total_loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># measure elapsed time</span>\n        batch_time<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> end<span class=\"token punctuation\">)</span>\n        end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> args<span class=\"token punctuation\">.</span>print_freq <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            print_string <span class=\"token operator\">=</span> <span class=\"token string\">'Epoch: [{0}][{1}/{2}]\\t'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>val_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            print_string <span class=\"token operator\">+=</span><span class=\"token string\">'Data time {data_time.val:.3f} ({data_time.avg:.3f})\\t'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span> data_time<span class=\"token operator\">=</span>data_time<span class=\"token punctuation\">)</span>\n            print_string <span class=\"token operator\">+=</span> <span class=\"token string\">'Loss {loss.val:.4f} ({loss.avg:.4f})'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>loss<span class=\"token operator\">=</span>losses<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> meter_dict<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                print_string<span class=\"token operator\">+=</span><span class=\"token string\">'{name}: {loss.val:.4f} ({loss.avg:.4f})\\t'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">,</span> loss<span class=\"token operator\">=</span>value<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>print_string<span class=\"token punctuation\">)</span>\n                \n    <span class=\"token keyword\">return</span> losses<span class=\"token punctuation\">.</span>avg\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AverageMeter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Computes and stores the average and current value\"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>avg <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span> <span class=\"token operator\">+=</span> val <span class=\"token operator\">*</span> n\n        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> n\n        self<span class=\"token punctuation\">.</span>avg <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>count\n\n<span class=\"token comment\"># model</span>\nmodel <span class=\"token operator\">=</span> get_model<span class=\"token punctuation\">(</span>trunk<span class=\"token operator\">=</span><span class=\"token string\">'vgg19'</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>DataParallel<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># load pretrained</span>\nuse_vgg<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># Fix the VGG weights first, and then the weights will be released</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>model0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        param<span class=\"token punctuation\">.</span>requires_grad <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\ntrainable_vars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>param <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> param<span class=\"token punctuation\">.</span>requires_grad<span class=\"token punctuation\">]</span>\noptimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>trainable_vars<span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>lr<span class=\"token punctuation\">,</span>\n                           momentum<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>momentum<span class=\"token punctuation\">,</span>\n                           weight_decay<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>weight_decay<span class=\"token punctuation\">,</span>\n                           nesterov<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>nesterov<span class=\"token punctuation\">)</span>     \n                                                                                          \n<span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># train for one epoch</span>\n    train_loss <span class=\"token operator\">=</span> train<span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> optimizer<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># evaluate on validation set</span>\n    val_loss <span class=\"token operator\">=</span> validate<span class=\"token punctuation\">(</span>val_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">)</span>  \n                                            \n<span class=\"token comment\"># Release all weights                                   </span>\n<span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    param<span class=\"token punctuation\">.</span>requires_grad <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\ntrainable_vars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>param <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> param<span class=\"token punctuation\">.</span>requires_grad<span class=\"token punctuation\">]</span>\noptimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>trainable_vars<span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>lr<span class=\"token punctuation\">,</span>\n                           momentum<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>momentum<span class=\"token punctuation\">,</span>\n                           weight_decay<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>weight_decay<span class=\"token punctuation\">,</span>\n                           nesterov<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>nesterov<span class=\"token punctuation\">)</span>          \n                                                    \nlr_scheduler <span class=\"token operator\">=</span> ReduceLROnPlateau<span class=\"token punctuation\">(</span>optimizer<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'min'</span><span class=\"token punctuation\">,</span> factor<span class=\"token operator\">=</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> patience<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> threshold<span class=\"token operator\">=</span><span class=\"token number\">0.0001</span><span class=\"token punctuation\">,</span> threshold_mode<span class=\"token operator\">=</span><span class=\"token string\">'rel'</span><span class=\"token punctuation\">,</span> cooldown<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> min_lr<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> eps<span class=\"token operator\">=</span><span class=\"token number\">1e-08</span><span class=\"token punctuation\">)</span>\n\nbest_val_loss <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>inf\n\n\nmodel_save_filename <span class=\"token operator\">=</span> <span class=\"token string\">'./network/weight/best_pose.pth'</span>\n<span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>epochs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># train for one epoch</span>\n    train_loss <span class=\"token operator\">=</span> train<span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> optimizer<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># evaluate on validation set</span>\n    val_loss <span class=\"token operator\">=</span> validate<span class=\"token punctuation\">(</span>val_loader<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">)</span>   \n    \n    lr_scheduler<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span>val_loss<span class=\"token punctuation\">)</span>                        \n    \n    is_best <span class=\"token operator\">=</span> val_loss<span class=\"token operator\">&lt;</span>best_val_loss\n    best_val_loss <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>val_loss<span class=\"token punctuation\">,</span> best_val_loss<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> is_best<span class=\"token punctuation\">:</span>\n        torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> model_save_filename<span class=\"token punctuation\">)</span>      \n</code></pre>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}