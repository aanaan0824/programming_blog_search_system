{"blogid": "125884549", "writerAge": "码龄12年", "writerBlogNum": "77", "writerCollect": "1946", "writerComment": "1836", "writerFan": "9264", "writerGrade": "6级", "writerIntegral": "4918", "writerName": "老王随聊", "writerProfileAdress": "writer_image\\profile_125884549.jpg", "writerRankTotal": "5287", "writerRankWeekly": "3107", "writerThumb": "1923", "writerVisitNum": "69275", "blog_read_count": "702", "blog_time": "于 2022-07-20 08:07:00 发布", "blog_title": "云原生—Rust编程语言能与C/C++媲美", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p class=\"img-center\"><img alt=\"\" src=\"image\\504e8b2ec12441e09a3959a4a28903ae.png\"/></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1%E3%80%81Rust%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81Rust%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9\">1、Rust语言特点</a></p>\n<p id=\"2%E3%80%81Rust%E8%AF%AD%E8%A8%80%E4%BC%98%E5%8A%BF-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81Rust%E8%AF%AD%E8%A8%80%E4%BC%98%E5%8A%BF\">2、Rust语言优势</a></p>\n<p id=\"3%E3%80%81Rust%E6%8E%A8%E5%B9%BF%E5%8A%9B%E5%BA%A6-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81Rust%E6%8E%A8%E5%B9%BF%E5%8A%9B%E5%BA%A6\">3、Rust推广力度</a></p>\n<p id=\"Linux%E5%86%85%E6%A0%B8-toc\" style=\"margin-left:40px;\"><a href=\"#Linux%E5%86%85%E6%A0%B8\">Linux内核</a></p>\n<p id=\"Android%E7%B3%BB%E7%BB%9F-toc\" style=\"margin-left:40px;\"><a href=\"#Android%E7%B3%BB%E7%BB%9F\">Android系统</a></p>\n<p id=\"%E5%BE%AE%E8%BD%AFWindows-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BE%AE%E8%BD%AFWindows\">微软Windows</a></p>\n<p id=\"%E5%85%B6%E4%BB%96-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%85%B6%E4%BB%96\">其他</a></p>\n<p id=\"4%E3%80%81Rust%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81Rust%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98\">4、Rust如何解决内存问题</a></p>\n<p id=\"%E7%BC%96%E8%AF%91%E6%97%B6%E5%86%85%E5%AD%98%E6%A3%80%E6%9F%A5%E5%99%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%BC%96%E8%AF%91%E6%97%B6%E5%86%85%E5%AD%98%E6%A3%80%E6%9F%A5%E5%99%A8\">编译时内存检查器</a></p>\n<p id=\"%E5%BC%95%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%98%8E%E7%A1%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BC%95%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%98%8E%E7%A1%AE\">引用生命周期明确</a></p>\n<p id=\"%E6%B8%85%E6%99%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%B8%85%E6%99%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F\">清晰的编程模式</a></p>\n<p id=\"5%E3%80%81Rust%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81Rust%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B\">5、Rust如何做到并发编程</a></p>\n<p id=\"%E4%BC%A0%E7%BB%9F%E6%A8%A1%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BC%A0%E7%BB%9F%E6%A8%A1%E5%BC%8F\">传统模式</a></p>\n<p id=\"Rust%E6%A8%A1%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#Rust%E6%A8%A1%E5%BC%8F\">Rust模式</a></p>\n<p id=\"%E7%BC%96%E8%AF%91%E6%97%B6%E5%8F%91%E7%8E%B0-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%BC%96%E8%AF%91%E6%97%B6%E5%8F%91%E7%8E%B0\">编译时发现</a></p>\n<p id=\"6%E3%80%81Rust%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%8F%91%E5%8A%9B%E7%82%B9-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81Rust%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%8F%91%E5%8A%9B%E7%82%B9\">6、Rust未来的发力点</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"1%E3%80%81Rust%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9\">1、Rust语言特点</h1>\n<p>Rust 是一种静态类型的编程语言，专为性能和安全而设计，尤其是安全并发和内存管理。它的语法类似于 C++ 的语法。它是一个最初由 Mozilla Research 开发的开源项目。2021 年，Rust 基金会已接过火炬，正在推动该语言的发展。</p>\n<p></p>\n<h1 id=\"2%E3%80%81Rust%E8%AF%AD%E8%A8%80%E4%BC%98%E5%8A%BF\">2、Rust语言优势</h1>\n<p>Rust 的创建着眼于确保高性能，可与 C 和 C++ 提供的性能相媲美，同时强调代码的安全性，这是其他两种语言的致命弱点。它的效果非常好，以至于 Rust 编程语言现在被包括 Firefox、Dropbox 和 Cloudflare 在内的知名软件巨头所使用，而且从初创公司到大公司，许多公司都在生产中使用这种技术。</p>\n<p><span style=\"color:#fe2c24;\">Rust 解决了 C/C++ 开发人员长期以来一直在努力解决的问题：内存错误和并发编程。这被视为其主要好处。</span></p>\n<p></p>\n<h1 id=\"3%E3%80%81Rust%E6%8E%A8%E5%B9%BF%E5%8A%9B%E5%BA%A6\">3、Rust推广力度</h1>\n<p>根据Stack Overflow 开发人员调查 2020，Rust 是最受欢迎的编程语言，连续第五年获得冠军。</p>\n<h2 id=\"Linux%E5%86%85%E6%A0%B8\">Linux内核</h2>\n<p>在 2020 年，Linux 内核开发人员提议用 Rust 编写新的 Linux 内核代码。需要明确的是，他们不想重写最初用 C 编写的整个内核，而是想在 Rust 中添加可与现有基础架构一起使用的新代码。不亚于开源操作系统 Linux 之父 Linus Thorvalds 的人物对这个想法表示欢迎，并渴望看到该项目的结果。</p>\n<h2 id=\"Android%E7%B3%BB%E7%BB%9F\">Android系统</h2>\n<p>谷歌还计划在将系统编程语言 Rust 支持到 Android 之后，在 Linux 内核中使用 Rust。整个操作旨在减少安全漏洞。</p>\n<h2 id=\"%E5%BE%AE%E8%BD%AFWindows\">微软Windows</h2>\n<p>微软已经转向 Rust 以减少 Windows 组件中与内存相关的错误。</p>\n<h2 id=\"%E5%85%B6%E4%BB%96\">其他</h2>\n<p>Facebook 还与 Rust 建立了更密切的联系，加入了 Rust 基金会，该组织成立于 2021 年，旨在推动 Rust 的发展，使其成为“系统编程及其他领域的主流语言选择”。Facebook 与亚马逊网络服务、谷歌、华为、微软和 Mozilla 一起在某些方面使用 Rust。</p>\n<p></p>\n<h1 id=\"4%E3%80%81Rust%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98\">4、Rust如何解决内存问题</h1>\n<h2 id=\"%E7%BC%96%E8%AF%91%E6%97%B6%E5%86%85%E5%AD%98%E6%A3%80%E6%9F%A5%E5%99%A8\">编译时内存检查器</h2>\n<p>在 Rust 中，你有借用检查器——编译器的一部分，确保引用不会超过它们所引用的数据。此功能可帮助您消除内存违规错误。此类问题是在编译时检测到的，不需要垃圾回收。 </p>\n<h2 id=\"%E5%BC%95%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%98%8E%E7%A1%AE\">引用生命周期明确</h2>\n<p>在 Rust 中，每个引用都有一个生命周期，你可以在其中设置该引用有效的范围。这个特性解决了引用不再有效的问题，也将 Rust 与 C 和 C++ 区分开来。 </p>\n<h2 id=\"%E6%B8%85%E6%99%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F\">清晰的编程模式</h2>\n<p>在 Rust 中有两种编写代码的模式：安全 Rust 和不安全 Rust。</p>\n<p>安全的Rust， 对程序员施加了额外的限制（例如对象所有权管理），从而确保代码正常工作。</p>\n<p>不安全的 Rust ，给了程序员更多的自主权（例如，它可以操作原始的类似 C 的指针），但代码可能会崩溃。 </p>\n<p>Rust 的双模式模型是其最大的优势之一。另一方面，在 C++ 中，您永远不会知道您编写了不安全的代码，直到您的软件崩溃或安全​​漏洞出现。</p>\n<p></p>\n<h1 id=\"5%E3%80%81Rust%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B\">5、Rust如何做到并发编程</h1>\n<p>Rust 通过在编译时防止数据竞争使编写并发程序变得更容易。</p>\n<h2 id=\"%E4%BC%A0%E7%BB%9F%E6%A8%A1%E5%BC%8F\">传统模式</h2>\n<p>当来自不同线程的至少两条不同的指令试图同时访问同一内存位置时，就会发生数据竞争。</p>\n<p>而其中至少有一条正在尝试写入内容，并且没有同步可以在各种访问之间设置任何特定顺序。未定义对没有同步的内存的访问。</p>\n<h2 id=\"Rust%E6%A8%A1%E5%BC%8F\">Rust模式</h2>\n<p>在 Rust 中，检测到数据竞争。如果给定的对象访问不支持多线程，则需要通过互斥锁进行同步，该互斥锁将为其他线程锁定对该特定对象的访问。</p>\n<p>为了确保对对象执行的操作不会破坏它，只有一个线程可以访问它。 </p>\n<p>从其他线程的角度来看，对该对象的操作是原子的，这意味着观察到的对象状态始终是正确的，你无法观察到其他线程对该对象执行的操作产生的任何中间状态。</p>\n<p>Rust 可以检查我们是否对这些对象执行了任何不正确的操作，并在编译时通知我们。</p>\n<p>而其他语言采用同步方法，但它们与它们所引用的对象无关。</p>\n<p>在使用对象之前需要注意锁定对象的是开发人员。例如，在 C 中，编译器允许开发人员编写有缺陷的代码。结果，当程序已经在生产中运行时，才会检测到相应的错误。 </p>\n<h2 id=\"%E7%BC%96%E8%AF%91%E6%97%B6%E5%8F%91%E7%8E%B0\">编译时发现</h2>\n<p>在 Rust lang 中，许多与并发编程相关的问题（不是全部）都得到了解决，因为它们在编译时立即被发现。</p>\n<p></p>\n<h1 id=\"6%E3%80%81Rust%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%8F%91%E5%8A%9B%E7%82%B9\">6、Rust未来的发力点</h1>\n<p>根据Rust语言的特色：高性能的同时确保内存安全、支持并发编程，另外社区也在加速推动语言的发展，更重要的一点是rust确保向后兼容性和稳定性，Rust 是为未来 40 年设计的。当然Rust语言的学习门槛也比较高！</p>\n<p>所以，未来的Rust语言的主要发力点在偏计算密集型方向，比如人工智能领域、高性能服务器、嵌入式等。</p>\n</div>\n</div>"}