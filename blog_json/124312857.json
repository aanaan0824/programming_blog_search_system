{"blogid": "124312857", "writerAge": "码龄155天", "writerBlogNum": "4", "writerCollect": "25", "writerComment": "1", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "48", "writerName": "Mr_Werner", "writerProfileAdress": "writer_image\\profile_124312857.jpg", "writerRankTotal": "175015", "writerRankWeekly": "288649", "writerThumb": "7", "writerVisitNum": "8365", "blog_read_count": "7802", "blog_time": "于 2022-04-23 10:59:25 发布", "blog_title": "JAVA——链表", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一、链表概念及结构</h1>\n<p><strong>链表：</strong><span style=\"color:#333333;\">链表是一种</span><span style=\"color:#333333;\"><strong>物理存储结构上非连续</strong></span><span style=\"color:#333333;\">存储结构，数据元素的</span><span style=\"color:#333333;\"><strong>逻辑顺序</strong></span><span style=\"color:#333333;\">是通过链表中的</span><span style=\"color:#333333;\"><strong>引用链接</strong></span><span style=\"color:#333333;\">次序实现的。如下图：（通俗的说：就是由一个个节点组成，这些节点逻辑上连续，物理上不连续）</span></p>\n<p><img alt=\"\" height=\"344\" src=\"image\\a7ece0d8b8934224b7e12cb91cc72b1a.png\" width=\"672\"/></p>\n<p>类比火车：</p>\n<p>singleLinkedList ——火车车次（一整个火车or哪趟火车）</p>\n<p>Node——车厢，具体储存元素的类，每个单链表的节点就是Node的一个对象</p>\n<p>Node.head ；——当前链表的头节点（只要知道头节点就可以此访问链表中的所有节点）</p>\n<p>int  size ；——当前链表的长度（节点个数），保存有效数据的个数</p>\n<p><strong>画图理解：</strong></p>\n<p><img alt=\"\" height=\"112\" src=\"image\\78d4aa8efe684e63b4f2b42ca55b94bc.png\" width=\"383\"/></p>\n<pre><code class=\"language-java\">class  Node {\n       int  val ;  //储存节点的值\n       Node next ;  //表示下一个节点的地址\n       //这里为什么使用Node引用，单链表的所有节点都是Node类的对象\n       \n}\n      Node node = new Node（）;//创建一个新节点\n      node.val =1 ;//值为1，地址为空，就没写\n      //与其他节点进行连接\n      Node node1 = new Node（）; //创建名为node1的新节点\n      node1.val = 2 ; //值为2\n      node.next = node1 ；//让第一个结点的next储存下一个结点的地址</code></pre>\n<h1>二、链表的实现方法 </h1>\n<p><strong>※注意事项：</strong></p>\n<p><strong>①单链表中头节点很烦人，不论是插入还是删除均需考虑头节点，因为其没有前驱。</strong></p>\n<p><strong>②所有的点操作（\".\"）均需注意空指针情况</strong></p>\n<h2>2.1头插法</h2>\n<p><img alt=\"\" height=\"371\" src=\"image\\463be9c5f91b43b89b8fe066c19ae148.png\" width=\"441\"/></p>\n<p><strong>利用虚拟头节点的办法：</strong></p>\n<p><strong>虚拟头节点</strong>：——dummyHead，只作为链表的头节点使用，不储存有效数据即size的长度没变，这样链表中的其他有效节点我们可以一视同仁，都有头节点</p>\n<p><img alt=\"\" height=\"395\" src=\"image\\b0937cc8e9ce4998a650af3ee18eacef.png\" width=\"403\"/></p>\n<p><img alt=\"\" height=\"113\" src=\"image\\0cdd8e0d1f1d41c6a5159d1e3d0410e7.png\" width=\"404\"/></p>\n<p><img alt=\"\" height=\"86\" src=\"image\\c5de29c327524e12b109698f3f10ba37.png\" width=\"407\"/> </p>\n<h2>2.2在任意位置插入</h2>\n<p><img alt=\"\" height=\"365\" src=\"image\\9de66ddfbd434b4ab5225dc4ab78361c.png\" width=\"442\"/></p>\n<p><strong>利用虚拟头节点的办法：</strong></p>\n<p><img alt=\"\" height=\"329\" src=\"image\\287395a844694c7796532610c902ad45.png\" width=\"433\"/></p>\n<p><img alt=\"\" height=\"114\" src=\"image\\73b2f2c206fd43ec966957b4cfd9c8a9.png\" width=\"437\"/></p>\n<h2>2.3在链表尾部插入</h2>\n<p><img alt=\"\" height=\"166\" src=\"image\\6ca87355a5934b1cb6f560e6b12ae541.png\" width=\"441\"/></p>\n<h2>2.4查找第一个值为val的值的索引</h2>\n<p><img alt=\"\" height=\"247\" src=\"image\\3eb8b695fca84515891daca8913f0bcd.png\" width=\"443\"/></p>\n<h2>2.5查找是否包含val值</h2>\n<p><img alt=\"\" height=\"352\" src=\"image\\ebf7395b329e4bdca12a9c0e97577961.png\" width=\"447\"/></p>\n<h2>2.6查找索引为index位置的节点值</h2>\n<p><img alt=\"\" height=\"369\" src=\"image\\9044491b9fd244cbbbe264a27d7d6906.png\" width=\"439\"/></p>\n<h2>2.7将index位置的元素节点值修改为newVal</h2>\n<p><img alt=\"\" height=\"424\" src=\"image\\0342848e92df4c9c8121504b0f3f0196.png\" width=\"439\"/></p>\n<h2> 2.8删除链表中第一个值为val的元素</h2>\n<p><img alt=\"\" height=\"461\" src=\"image\\b6f2dcde56de455dba3c1c1af7794b1d.png\" width=\"513\"/></p>\n<p><img alt=\"\" height=\"179\" src=\"image\\b65d67a5d2c24fb6bb6f9a48a02f3775.png\" width=\"516\"/></p>\n<h2>2.9 删除链表中所有值为val的节点</h2>\n<p> <img alt=\"\" height=\"438\" src=\"image\\85f7b0e1cfc84fbd804833d449cda1e1.png\" width=\"468\"/></p>\n<p><img alt=\"\" height=\"149\" src=\"image\\c677422aa5434e079a1f14e87a7b5260.png\" width=\"471\"/></p>\n<p>利用虚拟头节点的方法：</p>\n<p><img alt=\"\" height=\"401\" src=\"image\\225c28c3c127412db69e6aa628a1eec4.png\" width=\"465\"/></p>\n<h2>2.10删除index位置的节点并返回该节点删除前的值</h2>\n<p><img alt=\"\" height=\"419\" src=\"image\\d32ca287c60c410fac055099165a2c00.png\" width=\"470\"/></p>\n<p><img alt=\"\" height=\"340\" src=\"image\\cf6b4c085b7c463e8a06e5234953b96f.png\" width=\"466\"/></p>\n<p>利用虚拟头节点的方法： </p>\n<p><img alt=\"\" height=\"430\" src=\"image\\d1609eefe50e4645aaf8d672b84e78c6.png\" width=\"470\"/></p>\n<h2> 2.11删除头节点和尾节点</h2>\n<p> <img alt=\"\" height=\"375\" src=\"image\\e43312a511ac463bb446fefa611f439c.png\" width=\"467\"/></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}