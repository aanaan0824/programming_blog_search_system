{"blogid": "122530010", "writerAge": "码龄2年", "writerBlogNum": "96", "writerCollect": "619", "writerComment": "18", "writerFan": "440", "writerGrade": "4级", "writerIntegral": "1052", "writerName": "疯狂的斯图卡", "writerProfileAdress": "writer_image\\profile_122530010.jpg", "writerRankTotal": "59008", "writerRankWeekly": "277914", "writerThumb": "68", "writerVisitNum": "126720", "blog_read_count": "43594", "blog_time": "于 2022-01-16 22:20:25 发布", "blog_title": "Tomcat介绍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Tomcat_2\">Tomcat介绍</a></li><li><a href=\"#Container__56\">Container 结构分析</a></li><li><a href=\"#Tomcat_72\">Tomcat请求过程</a></li><li><a href=\"#Tomcat_85\">安装Tomcat</a></li><li><a href=\"#tomcat_163\">优化tomcat启动速度</a></li><li><a href=\"#Tomcat_185\">Tomcat主要目录说明</a></li><li><a href=\"#Tomcat__213\">Tomcat 虚拟主机配置</a></li><li><a href=\"#HTTP__273\">HTTP 请求过程</a></li><li><a href=\"#Tomcat_282\">Tomcat优化</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"Tomcat_2\"></a>Tomcat介绍</h1>\n<p>tomcat是一个免费的，开放源代码的Web应用服务器，是Apache软件基金会项目中的一个核心项目，由Apache ，Sun和一些公司以及个人共同开发而成，深受Java爱好者的喜爱，是一款比较流行的web应用服务器。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0ae98a3d8a7140068d9bed457f06ab31.png\"/></p>\n<p>Tomcat由一系列的组件构成，其中核心的组件有三个:</p>\n<p>(1) web容器:完成web服务器的功能。</p>\n<p>(2) servlet容器:名字为catalina，用于处理Servlet代码。</p>\n<p>(3 ） JSP容器:用于将JSP动态网页翻译成Servlet代码。</p>\n<p>因此Tomcat是web应用服务器，也是一个Servlet/JSP容器。Tomcat作为 Servlet容器，负责处理客户请求，把请求传送给servlet，并将servlet的响应传送回给客户。</p>\n<p>什么是servlet ?<br/> Servlet 是 Java Servlet 的简称，可以理解为是一个服务连接器，是用Java编写的服务器端程序，具有独立于平台和协议的特性，简单的理解: servlet就是一个中间件，包含了接口和方法，将客户端和数据库连接，从而实现动态网页的创建。</p>\n<p>什么是JSP?<br/> JSP 全称 Java Server Pages，是一种动态网页开发技术。它使用JSP 标签在HTML,网页中插入Java代码。标签通常以 &lt;% 开头，以 %&gt; 结束。<br/> JSP是一种Java servlet，主要用于实现Java web 应用程序的用户界面部分。<br/> JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p>\n<p>Tomcat 功能组件结构:<br/> Tomcat的核心功能有两个，分别是负责接收和反馈外部请求的连接器Connector，和负责处理请求的容器Container:其中连接器和容器相辅相成，一起构成了基本的 web服务Service。每个Tomcat服务器可以管理多个Service。</p>\n<p>Conector: 负责对外接收和响应请求。它是Tomcat与外界的交通枢纽，监听端口接收外界请求，并将请求处理后传递给容器做业务处理，最后将容器处理后的结果响应给外界。</p>\n<p>Container: 负责对内处理业务逻辑。其内部由 Engine、Host、Context和wrapper 四个容器组成，用于管理和调用Servlet相关逻辑。</p>\n<p>Service:对外提供的web服务。主要包含Connector和 Container两个核心组件，以及其他功能组件。Tomcat可以管理多个</p>\n<p>Service，且各Service 之间相互独立</p>\n<hr/>\n<h1><a id=\"Container__56\"></a>Container 结构分析</h1>\n<p>每个Service 会包含一个Container容器。在Container内部包含了4个子容器:4个子容器的作用分别是:<br/> (1) Engine:引擎，用来管理多个虚拟主机，一个Service最多只能有一个Engine:</p>\n<p>( 2） Host:代表一个虚拟主机，也可以叫站点，通过配置 Host 就可以添加站点;</p>\n<p>( 3） Context:代表一个 web 应用，包含多个Servlet封装器;</p>\n<p>(4) wrapper:封装器，容器的最底层。每一Wrapper封装着一个Servlet，负责对象实例的创建、执行和销毁功能。</p>\n<p>Engine、Host、Context和 wrapper，这四个容器之间属于父子关系。<br/> 容器由一个引擎可以管理多个虚拟主机。每个虚拟主机可以管理多个web应用。每个web应用会有多个Servlet封装器</p>\n<hr/>\n<h1><a id=\"Tomcat_72\"></a>Tomcat请求过程</h1>\n<p>:<br/> 1、用户在浏览器中输入网址，请求被发送到本机端口8080，被在那里监听的 Connector获得;</p>\n<p>2、Connector 把该请求交给它所在的Service 的 Engine (Container）来处理，并等待Engine的回应;</p>\n<p>3、请求在Engine、Host、Context和Wwrapper 这四个容器之间层层调用，最后在Servlet 中执行对应的业务逻辑、数据存储等。</p>\n<p>4、执行完之后的请求响应在Context、Host、Engine容器之间层层返回，最后返回给Connector，并通过Connector 返回给客户端。</p>\n<hr/>\n<h1><a id=\"Tomcat_85\"></a>安装Tomcat</h1>\n<p>1.rpm安装</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6791f70c9e2e410a8738c0b3e0e2d27b.png\"/></p>\n<p>2.设置JDk环境变量</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e103e5568f084bc0b4b7d13007b61788.png\"/></p>\n<pre><code>vim java.sh\nexport JAVA_HOME=/usr/java/jdk1.8.0_201-amd64\nexport JRE_HOME=$JAVA HOME/jre\nexport CLASSPATH=.:\n$JAVA_HOME/lib:$JRE_HOME/lib\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\n\n</code></pre>\n<p>3.安装tomcat</p>\n<pre><code>[root@localhost profile.d]# cd /opt\n[root@localhost opt]# ls\napache-tomcat-8.5.16.tar.gz  jdk-8u201-linux-x64.rpm  rh\n[root@localhost opt]# tar zxvf apache-tomcat-8.5.16.tar.gz \n</code></pre>\n<pre><code>[root@localhost opt]# mv apache-tomcat-8.5.16 /usr/local/tomcat\n[root@localhost opt]# cd /usr/local/tomcat/\n[root@localhost tomcat]# cd bin/\n</code></pre>\n<p>启动服务</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8eeb4a0994ed4399870619d23d371c7c.png\"/></p>\n<p>查看端口是否打开</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\675de3caff7f4f7c910cca6b94573f05.png\"/></p>\n<p>开网页验证</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\46fbc72a6c1f4adeb3a1f0e90227ae30.png\"/></p>\n<p>关闭服务</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\983210ecd35c48b2a1807eb5d94d6fbb.png\"/></p>\n<p>重新开启服务</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1d4a008bac0f400cb6e005406b2efcfc.png\"/></p>\n<p>如果说不想以绝对或者相对路径启动的话 ，那就做软链接搞定</p>\n<pre><code>[root@localhost bin]# ln -s /usr/local/tomcat/bin/* .sh /usr/local/bin/\n</code></pre>\n<hr/>\n<h1><a id=\"tomcat_163\"></a>优化tomcat启动速度</h1>\n<p>如果你的电脑配置比较低的话，第一次启动tomcat可能会发现Tomcat启动很慢，默认情况下可能会需要几十秒，可以修改 jdk 参数进行改。</p>\n<pre><code>[root@localhost lib]# cd /usr/java/jdk1.8.0_201-amd64/jre/lib/security/\n[root@localhost security]# vim java.security \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\aa026bebf0fc4d3ea7c185dbacaa3195.png\"/></p>\n<p>然后重启服务，会发现速度会有所提高</p>\n<pre><code>/dev/urandom是/dev/random的非阻塞版本，/dev/random的random pool依赖于系统中断，因此在系统的中断数不足时，/dev/random设备会一直封锁，尝试读取的进程就会进入等待状态，直到系统的中断数充分够用，/dev/random设备可以保证数据的随机性。\n\n/dev/urandom不依赖系统的中断，也就不会造成进程忙等待，但是数据的随机性也不高，所以该随机数的安全性理论上不高。如果应用对安全性要求很高，那么应该使用/dev/random。\n</code></pre>\n<hr/>\n<h1><a id=\"Tomcat_185\"></a>Tomcat主要目录说明</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\29fb0937679a4b5082da01d43295987b.png\"/></p>\n<pre><code>bin:存放启动和关闭 Tomcat 的脚本文件，如 catalina.sh、                             startup.sh、shutdown.sh\n\nconf:存放Tomcat服务器的各种配置文件，如主配置文件 \n\nserver.xml和应用默认的部署描述文件 web.xml\n\nlib : 存放Tomcat运行需要的库文件的jar包，一般不作任何改动\n\nlogs : 存放Tomcat执行时的日志\n\ntemp : 存放Tomcat运行时产生的文件\n\nwebapps:存放Tomcat默认的web应用部署目录\n\nwork:存放web应用代码生成和编译文件的临时目录\n\n</code></pre>\n<hr/>\n<h1><a id=\"Tomcat__213\"></a>Tomcat 虚拟主机配置</h1>\n<p>很多时候公司会有多个项目需要运行，一般不会是在一台服务器上运行多个Tomcat 服务，这样会消耗太多的系统资源。此时，就需要使用到Tomcat虚拟主机。</p>\n<p>例如现在新增两个域名 www.kgc.com 和 www.benet.com 希望通过这两个域名访问到不同的项目内容。</p>\n<ol><li>vim /usr/local/tomcat/conf/server.xml</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\41d5a5db5c6e444b8575713993fef399.png\"/></p>\n<pre><code>      &lt;/Host&gt;\n&lt;Host name=\"www.accp.com\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\" xmlValidation=\"false\" xmlNamespaceAware=\"false\"&gt;\n        &lt;Context docBase=\"/usr/local/tomcat/webapps/accp\" path=\"\" reloadable=\"true\"&gt;\n       &lt;/Context&gt;\n&lt;/Host&gt;\n\n&lt;Host name=\"www.benet.com\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\" xmlValidation=\"false\" xmlNamespaceAware=\"false\"&gt;\n        &lt;Context docBase=\"/usr/local/tomcat/webapps/benet\" path=\"\" reloadable=\"true\" &gt;\n     &lt;/Context&gt;\n  &lt;/Host&gt;\n  &lt;/Engine&gt;\n&lt;/Service&gt;\n&lt;/Server&gt;\n\n\nHost \nname：主机名\nappBase：Tomcat程序工作目录，即存放web应用程序的目录；相对路径为webapps，绝对路径为 /usr/local/tomcat/webapps\nunpackWARs：在启用此webapps时是否对WAR格式的归档文件先进行展开；默认为true\nautoDeploy：在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行deploy；默认为true\nxmlValidation：是否验证xml文件执行有效性检验的标志\nxmlNamespaceAware：是否启用xml命名空间，设置该值与xmlValidation为true，表示对web.xml文件执行有效性检验\n\nContext\ndocBase：相应的Web应用程序的存放位置；也可以使用相对路径，起始路径为此Context所属Host中appBase定义的路径；\npath：相对于Web服务器根路径而言的URI；如果为空\"\"，则表示为此webapp的根路径 / ；\nreloadable：是否允许重新加载此context相关的Web应用程序的类；默认为false\n\n</code></pre>\n<p>准备网页文件</p>\n<pre><code>[root@localhost conf]# cd ..\n[root@localhost tomcat]# cd webapps/\n[root@localhost webapps]# mkdir accp benet\n[root@localhost webapps]# echo '&lt;h1&gt;this is accp web page!&lt;/h1&gt;' &gt; accp/index.jsp\n[root@localhost webapps]# echo '&lt;h1&gt;this is benet web page!&lt;/h1&gt;' &gt; accp/index.jsp\n\n</code></pre>\n<p>开浏览器验证</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\77713b904a9b483a8a92dff0bf0a25f3.png\"/></p>\n<hr/>\n<h1><a id=\"HTTP__273\"></a>HTTP 请求过程</h1>\n<p>：<br/> （1）Connector 连接器监听的端口是 8080。由于请求的端口和监听的端口一致，连接器接受了该请求。<br/> （2）因为引擎的默认虚拟主机是 www.kgc.com，并且虚拟主机的目录是webapps。所以请求找到了 tomcat/webapps 目录。<br/> （3）访问的路径为根路径，URI 为空，即空是 Web 程序的应用名，也就是 context。此时请求找到 /usr/local/tomcat/webapps/kgc 目录，解析 index.jsp 并返回。</p>\n<hr/>\n<h1><a id=\"Tomcat_282\"></a>Tomcat优化</h1>\n<p>Tomcat默认安装下的缺省配置并不适合生产环境，它可能会频繁出现假死现象需要重启，只有通过不断压测优化才能让它最高效</p>\n<p>常用的优化相关参数如下：<br/> 【redirectPort】如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口。</p>\n<p>【maxThreads】Tomcat使用线程来处理接收的每个请求，这个值表示Tomcat可创建的最大的线程数，即支持的最大并发连接数，默认值是 200。</p>\n<p>【minSpareThreads】最小空闲线程数，Tomcat 启动时的初始化的线程数，表示即使没有人使用也开这么多空线程等待，默认值是 10。</p>\n<p>【maxSpareThreads】最大备用线程数，一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。默认值是-1（无限制）。一般不需要指定。</p>\n<p>【URIEncoding】指定 Tomcat 容器的 URL 编码格式，语言编码格式这块倒不如其它 Web服务器软件配置方便，需要分别指定。</p>\n<p>【connnectionTimeout】网络连接超时，单位：毫秒，设置为 0 表示永不超时，这样设置有隐患的。通常默认 20000 毫秒就可以。</p>\n<p>【enableLookups】是否反查域名，以返回远程主机的主机名，取值为：true 或 false，如果设置为 false，则直接返回 IP 地址，为了提高处理能力，应设置为 false。</p>\n<p>【disableUploadTimeout】上传时是否使用超时机制。应设置为 true。</p>\n<p>【connectionUploadTimeout】上传超时时间，毕竟文件上传可能需要消耗更多的时间，这个根据你自己的业务需要自己调，以使Servlet有较长的时间来完成它的执行，需要与上一个参数一起配合使用才会生效。</p>\n<p>【acceptCount】指定当所有可以使用的处理请求的线程数都被使用时，可传入连接请求的最大队列长度，超过这个数的请求将不予处理，默认为 100 个。</p>\n<p>【compression】是否对响应的数据进行GZIP压缩，off：表示禁止压缩；on：表示允许压缩（文本将被压缩）、force：表示所有情况下都进行压缩，默认值为 off，压缩数据后可以有效的减少页面的大小，一般可以减小 1/3 左右，节省带宽。</p>\n<p>【compressionMinSize】表示压缩响应的最小值，只有当响应报文大小大于这个值的时候才会对报文进行压缩，如果开启了压缩功能，默认值就是 2048。</p>\n<p>【compressableMimeType】压缩类型，指定对哪些类型的文件进行数据压缩。</p>\n<p>【noCompressionUserAgents=“gozilla, traviata”】对于以下的浏览器，不启用压缩</p>\n<pre><code>[root@localhost security]# vim/usr/local/tomcat/conf/server.xml\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b7ea9043187844138be22cbfd804fbe4.png\"/></p>\n<pre><code>  minSpareThreads=\"50\" \n  enableLookups=\"false\" \n  disableUploadTimeout=\"true\" \n  acceptCount=\"300\" \n  maxThreads=\"500\" \n  processorCache=\"500\"\n  URIEncoding=\"UTF-8\" \n  compression=\"on\" \n  compressionMinSize=\"2048\" \n  compressableMimeType=\"text/html,text/xml,text/javascript,text/css,text/plain,image    /gif,image /jpg,image/png\"/&gt;\n\n</code></pre>\n<pre><code>top -H\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\30db585154424ae793e2cb944e7e3b14.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}