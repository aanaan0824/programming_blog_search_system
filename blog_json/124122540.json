{"blogid": "124122540", "writerAge": "码龄2年", "writerBlogNum": "15", "writerCollect": "50", "writerComment": "1", "writerFan": "16", "writerGrade": "2级", "writerIntegral": "175", "writerName": "admin_zlj", "writerProfileAdress": "writer_image\\profile_124122540.jpg", "writerRankTotal": "117373", "writerRankWeekly": "117739", "writerThumb": "23", "writerVisitNum": "17471", "blog_read_count": "2826", "blog_time": "已于 2022-04-22 13:51:07 修改", "blog_title": "最全的—— ES6有哪些新特性？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#ES6_5\">ES6新特性</a></li><li><ul><li><a href=\"#1letconst_6\">1、let和const</a></li><li><a href=\"#2symbol_8\">2、symbol</a></li><li><a href=\"#3_26\">3、模板字符串</a></li><li><ul><li><a href=\"#31__46\">3.1 字符串新方法（补充）</a></li></ul>\n</li><li><a href=\"#4_70\">4、解构表达式</a></li><li><ul><li><a href=\"#41__73\">4.1 数组解构</a></li><li><a href=\"#42__87\">4.2 对象解构</a></li></ul>\n</li><li><a href=\"#5_105\">5、对象方面</a></li><li><ul><li><a href=\"#51_MapSet_106\">5.1 Map和Set</a></li><li><ul><li><a href=\"#511_Map_108\">5.1.1 Map</a></li><li><a href=\"#512_Set_127\">5.1.2 Set</a></li></ul>\n</li><li><a href=\"#53__153\">5.3 数组的新方法</a></li><li><ul><li><a href=\"#531__Arrayfrom_162\">5.3.1 Array.from()方法</a></li><li><a href=\"#532_includes_181\">5.3.2 includes()方法</a></li><li><a href=\"#533__mapfilter__189\">5.3.3 map()、filter() 方法</a></li><li><a href=\"#534_forEach_205\">5.3.4 forEach()方法</a></li><li><a href=\"#534__find_225\">5.3.4 find()方法</a></li><li><a href=\"#536_someevery__235\">5.3.6 some()、every() 方法</a></li></ul>\n</li><li><a href=\"#54_object_253\">5.4 object的新方法</a></li><li><ul><li><a href=\"#541_Objectis_255\">5.4.1 Object.is()</a></li><li><a href=\"#542_Objectassign_268\">5.4.2 Object.assign()</a></li><li><a href=\"#543_ObjectkeysObjectvaluesObjectentries_279\">5.4.3 Object.keys()、Object.values()、Object.entries()</a></li></ul>\n</li><li><a href=\"#55__302\">5.5 对象声明简写</a></li><li><a href=\"#56__322\">5.6 ...(对象扩展符)</a></li></ul>\n</li><li><a href=\"#6_351\">6、函数方面</a></li><li><ul><li><a href=\"#61__352\">6.1 参数默认值</a></li><li><a href=\"#62__373\">6.2 箭头函数</a></li><li><a href=\"#63_thisthis_385\">6.3 箭头函数和普通函数最大的区别在于其内部this永远指向其父级对象的this。(重点)</a></li></ul>\n</li><li><a href=\"#7class_398\">7、class（类）</a></li><li><a href=\"#8promiseproxy_444\">8、promise和proxy</a></li><li><a href=\"#9_446\">9、模块化</a></li><li><a href=\"#10_470\">10、运算符</a></li></ul>\n</li><li><a href=\"#ES6_479\">总结——ES6思维导图</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"ES6_5\"></a>ES6新特性</h1>\n<h2><a id=\"1letconst_6\"></a>1、let和const</h2>\n<p>前面讲过：<a href=\"https://blog.csdn.net/ZLJ_999/article/details/123960186\">https://blog.csdn.net/ZLJ_999/article/details/123960186</a></p>\n<h2><a id=\"2symbol_8\"></a>2、symbol</h2>\n<p>Symbol是ES6中引入的一种新的基本数据类型，用于表示一个独一无二的值，不能与其他数据类型进行运算。它是JavaScript中的第七种数据类型，与undefined、null、Number（数值）、String（字符串）、Boolean（布尔值）、Object（对象）并列。</p>\n<p>你可以这样创建一个Symbol值：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Symbol()</span>\n\n<span class=\"token comment\">//因为Symbol是基本数据类型，而不是对象，不能 new 。</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//报错，Symbol is not a constructor</span>\n</code></pre>\n<p>使用Symbol()创建一个Symbol类型的值并赋值给a变量后，你就得到了一个在内存中独一无二的值。现在除了通过变量a，任何人在任何作用域内都无法重新创建出这个值</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>内存解构图<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b6619bbd2c6a476ab9f3b7c20141358b.png\"/></p>\n<h2><a id=\"3_26\"></a>3、模板字符串</h2>\n<ul><li>在ES6之前，处理模板字符串：<br/> 通过“\\”和“+”来构建模板</li><li>对ES6来说:<br/> 用<code>${}</code>来界定；<br/> 反引号<code>(``)</code>直接搞定；</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n      url<span class=\"token operator\">=</span><span class=\"token string\">\"xxxxxx\"</span>\n       <span class=\"token comment\">// es6之前</span>\n       <span class=\"token keyword\">let</span> html<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;div&gt;\"</span><span class=\"token operator\">+</span>\n                  <span class=\"token string\">\" &lt;a&gt;\"</span><span class=\"token operator\">+</span>url<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;/a&gt;\"</span><span class=\"token operator\">+</span>\n               <span class=\"token string\">\"&lt;/div&gt;\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//es6</span>\n       <span class=\"token keyword\">let</span> eshtml<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n                   &lt;a&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/a&gt;\n               &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>非常好用</p>\n<h3><a id=\"31__46\"></a>3.1 字符串新方法（补充）</h3>\n<ul><li><code>includes()</code>判断字符串是否包含参数字符串，返回boolean值。</li><li><code>startsWith() / endsWith()</code>，判断字符串是否以参数字符串开头或结尾。返回boolean值。这两个方法可以有第二个参数，一个数字，表示开始查找的位置。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'blue,red,orange,white'</span><span class=\"token punctuation\">;</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n</code></pre>\n<ul><li><code>repeat()</code>方法按指定次数返回一个新的字符串。</li></ul>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//'hellohello'</span>\n</code></pre>\n<ul><li><code>padStart()/padEnd()</code>，用参数字符串按给定长度从前面或后面补全字符串，返回新字符串。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token string\">'hell'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//'hello'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//'helloo'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//'hell  ',如果没有指定将用空格代替</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//'ohell'</span>\n</code></pre>\n<h2><a id=\"4_70\"></a>4、解构表达式</h2>\n<p>解构赋值是对赋值运算符的扩展。它是一种针对<strong>数组</strong>或者<strong>对象</strong>进行模式匹配，然后对其中的变量进行赋值。<br/> <strong>字符串</strong>、以及ES6新增的<strong>Map</strong>和<strong>Set</strong> 都可以使用解构表达式</p>\n<h3><a id=\"41__73\"></a>4.1 数组解构</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//1,2,3</span>\n \n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//1,undefined,3</span>\n \n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,3</span>\n \n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//...是剩余运算符，表示赋值运算符右边除第一个值外剩余的都赋值给b</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,[2,3]</span>\n</code></pre>\n<h3><a id=\"42__87\"></a>4.2 对象解构</h3>\n<p>对象的解构赋值和数组类似，不过左边的变量名需要使用对象的属性名，并且用大括号{}而非中括号[]</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ren\"</span><span class=\"token punctuation\">,</span> \n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> \n\t<span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{<!-- --></span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'ren' 12 'male'</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> myName<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> myAge<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> mySex <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">//自定义变量名</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">,</span> myAge<span class=\"token punctuation\">,</span> mySex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'ren' 12 'male'</span>\n\n</code></pre>\n<h2><a id=\"5_105\"></a>5、对象方面</h2>\n<h3><a id=\"51_MapSet_106\"></a>5.1 Map和Set</h3>\n<p>Map和Set属于es6新增加的对象</p>\n<h4><a id=\"511_Map_108\"></a>5.1.1 Map</h4>\n<p>Map对象用于保存键值对，任何值JavaScript支持的值都可以作为一个键（key）或者一个值（value）。<br/> 与对象不同的是</p>\n<ol><li>object的键只能是<strong>字符串</strong>或ES6的<strong>symbol</strong>值，而Map可以是任何值。</li><li>Map对象有一个<strong>size属性</strong>，存储了键值对的个数，而object对象没有类似属性。</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ren'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{'name'=&gt;'ren','age'=&gt;12}</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{'name'=&gt;'ren','age'=&gt;12,'sex'=&gt;'male'}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//'ren'</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//false</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//undefined</span>\n</code></pre>\n<h4><a id=\"512_Set_127\"></a>5.1.2 Set</h4>\n<p>可以理解为后端的Set集合对象<br/> Set对象和Map对象类似，但它存储不是键值对。类似数组，但它的<strong>每个元素都是唯一的</strong>。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//里面要传一个数组，否则会报错</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{1,2,3}</span>\n\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{1,2,3,4}</span>\n\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{2,3,4}</span>\n\n</code></pre>\n<p>利用Set对象<strong>唯一性</strong>的特点，可以轻松<strong>实现数组的去重</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>mySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//[1,2,3,4]</span>\n</code></pre>\n<h3><a id=\"53__153\"></a>5.3 数组的新方法</h3>\n<ul><li>新增的方法有：</li></ul>\n<ol><li><code>Array.from()</code><strong>是内置对象Array的方法，实例数组不能调用</strong></li><li><code>includes()</code> 参数：数值 -------- 返回值：<code>true/false</code></li><li><code>map()</code>、<code>filter()</code> 参数：函数-------- 返回值：数组</li><li><code>forEach()</code> 参数：函数-------- 返回值：<code>undefined</code></li><li><code>find()</code> 参数：函数-------- 返回值：数值</li><li><code>some()</code>、<code>every()</code> 参数：函数-------- 返回值：<code>true/false</code></li></ol>\n<hr/>\n<h4><a id=\"531__Arrayfrom_162\"></a>5.3.1 Array.from()方法</h4>\n<p><code>Array.from()</code>方法可以将可迭代对象转换为新的数组。</p>\n<ul><li>函数可接受3个参数（后两个参数可以没有）： \n  <ul><li>第一个表示将被转换的可迭代对象(如果只有一个参数就是把形参转变成数组)</li><li>第二个是回调函数，将对每个数组元素应用该回调函数，然后返回新的值到新数组，</li><li>第三个是回调函数内this的指向。</li></ul> </li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">double</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 4, 6]</span>\n</code></pre>\n<h4><a id=\"532_includes_181\"></a>5.3.2 includes()方法</h4>\n<p>参数：数值 -------- 返回值：<code>true/false</code><br/> <code>includes()</code>方法------是查看数组中是否存在这个元素，存在就返回true,不存在就返回false</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> ary <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ary<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"533__mapfilter__189\"></a>5.3.3 map()、filter() 方法</h4>\n<p>参数：函数-------- 返回值：数组<br/> <code>map()</code>方法-----要利用原数组经过运算后的数组，或者从对象数组中拿某个属性<br/> <code>filter()</code>方法------是将符合挑选的筛选出来成为一个新数组，新数组不会影响旧数组。</p>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> newarr1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//newarr1-------[33, 44]</span>\n\t<span class=\"token keyword\">let</span> newarr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//newarr2-------[1, 33, 44, 2, 6, 9]</span>\n\n\t<span class=\"token keyword\">let</span> newarr3 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//newarr3-------[false, true, true, false, false, false]</span>\n\t<span class=\"token keyword\">let</span> newarr4 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//newarr4-------  [2, 66, 88, 4, 12, 18]</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h4><a id=\"534_forEach_205\"></a>5.3.4 forEach()方法</h4>\n<p>参数：函数-------- 返回值：undefined</p>\n<p><code>forEach()</code> 方法------是循环遍历数组中的每一项，没有返回值</p>\n<p><code>find()</code>方法---------是查找数组中符合条件的第一个元素，直接将这个元素返回出来</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> a1<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    a1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> a2<span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h4><a id=\"534__find_225\"></a>5.3.4 find()方法</h4>\n<p>参数：函数-------- 返回值：数值</p>\n<p><code>find()</code>方法----------是查找数组中符合条件的第一个元素，直接将这个元素返回出来</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 33</span>\n</code></pre>\n<h4><a id=\"536_someevery__235\"></a>5.3.6 some()、every() 方法</h4>\n<p>参数：函数-------- 返回值：<code>true/false</code></p>\n<p><code>some()</code>方法------找到<strong>一个符合</strong>条件的就返回<code>true</code>,<strong>所有都不符合</strong>返回<code>false</code>。<br/> <code>every()</code>方法------数组<strong>所有值都符合</strong>条件才会返回<code>true</code>,<strong>有一个不符合</strong>返回<code>false</code>。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> newarr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> v <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newarr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span>\n\n<span class=\"token keyword\">let</span> newarr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> v <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newarr2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\n</code></pre>\n<h3><a id=\"54_object_253\"></a>5.4 object的新方法</h3>\n<p>在 ES6 中，添加了<code>Object.is()</code>、<code>Object.assign()</code>、<code>Object.keys()</code>、<code>Object.values()</code>、<code>Object.entries()</code>等方法。</p>\n<h4><a id=\"541_Objectis_255\"></a>5.4.1 Object.is()</h4>\n<ul><li><code>Object.is()</code>方法用来判断两个值是否为同一个值，返回一个布尔类型的值。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> value1 <span class=\"token operator\">=</span> obj3<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> value2 <span class=\"token operator\">=</span> obj4<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<h4><a id=\"542_Objectassign_268\"></a>5.4.2 Object.assign()</h4>\n<ul><li><code>Object.assign()</code>方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象，并返回目标对象。------难理解看实例<br/> <strong>对象合并</strong></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//对象合并，把后面对像合并到第一个对象，对象里相同的属性会覆盖</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">,</span> obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 5, b: 2 , c:3}</span>\n</code></pre>\n<h4><a id=\"543_ObjectkeysObjectvaluesObjectentries_279\"></a>5.4.3 Object.keys()、Object.values()、Object.entries()</h4>\n<ul><li>Object.keys() 返回对象所有属性</li><li>Object.values() 返回对象所有属性值</li><li>Object.entries() 返回多个数组，每个数组是 key–value<br/> 不解释直接看例子</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">language</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 'name', 'age', 'language' ]</span>\n\t\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 'admin', 12, [ 'java', 'js', 'css' ] ]</span>\n\t\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* [\n\t                                                     [\"name\", \"admin\"],\n\t                                                     [\"age\", 12],\n\t                                                     [\"language\", [\"java\", \"js\", \"css\"]],\n\t                                                 ]; */</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"55__302\"></a>5.5 对象声明简写</h3>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n\t\t\t\n      <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span><span class=\"token string\">'admin'</span>\n      <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n      <span class=\"token comment\">//es6之前</span>\n      <span class=\"token comment\">// let person={<!-- --></span>\n      <span class=\"token comment\">//     name:name,</span>\n      <span class=\"token comment\">//     age:age</span>\n      <span class=\"token comment\">// }</span>\n\n      <span class=\"token comment\">//es6  声明对象时的属性名与引用的变量名相同就可以省略</span>\n      <span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>\n          name<span class=\"token punctuation\">,</span>\n          age\n      <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"56__322\"></a>5.6 …(对象扩展符)</h3>\n<ol><li>拷贝对象（深拷贝）</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">wife</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"迪丽热巴\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">...</span>person<span class=\"token punctuation\">}</span>\n\t\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token operator\">===</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//{name: 'admin', age: 12, wife: {…}}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<ol start=\"2\"><li>合并对象</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">...</span>obj1<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>obj2<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>obj3<span class=\"token punctuation\">}</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 5, b: 2 , c:3}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"6_351\"></a>6、函数方面</h2>\n<h3><a id=\"61__352\"></a>6.1 参数默认值</h3>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n\n\t<span class=\"token comment\">// es6之前</span>\n\t<span class=\"token comment\">// function add(a, b) {<!-- --></span>\n\t<span class=\"token comment\">//     if(!a) a=0</span>\n\t<span class=\"token comment\">//     if(!b) b=0</span>\n\t<span class=\"token comment\">// \treturn a + b;</span>\n\t<span class=\"token comment\">// }</span>\n\t\n\t<span class=\"token comment\">//es6</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">let</span> z<span class=\"token operator\">=</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//x=0, y=2, z=7</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"62__373\"></a>6.2 箭头函数</h3>\n<p>箭头函数实现了一种更加简洁的书写方式。箭头函数内部没有<code>arguments</code>，也没有<code>prototype</code>属性，所以不能用<code>new</code>关键字调用箭头函数。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//当只有一个参数时，括号可以省略，函数体只有单行return语句时，大括号也可以省略。</span>\n</code></pre>\n<h3><a id=\"63_thisthis_385\"></a>6.3 箭头函数和普通函数最大的区别在于其内部this永远指向其父级对象的this。(重点)</h3>\n<pre><code class=\"prism language-js\"> <span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">456</span><span class=\"token punctuation\">,</span>\n     <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//this指向window</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//123</span>\n\n</code></pre>\n<h2><a id=\"7class_398\"></a>7、class（类）</h2>\n<p><code>class</code> 作为对象的模板被引入ES6，你可以通过 <code>class </code>关键字定义类。<code>class </code>的本质依然是一个函数。</p>\n<ol><li>创建类</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">person</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//关键字声明方式</span>\n\t\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n              <span class=\"token punctuation\">}</span>           \n\t\t<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'hello'</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<ol start=\"2\"><li>类的继承<br/> 类的继承通过<code>extends</code>关键字实现。<br/> 子类必须在<code>constructor</code>中调用<code>super()</code></li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstudent<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//'admin'</span>\n\tstudent<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//'male'</span>\n\tstudent<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'ren:12'</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"8promiseproxy_444\"></a>8、promise和proxy</h2>\n<p>讲不清楚，等我学会了，后面在讲</p>\n<h2><a id=\"9_446\"></a>9、模块化</h2>\n<ol><li>导入</li></ol>\n<ul><li>ES6使用关键字 <code>import </code>导入模块（文件），有两种常用的方式：</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> ‘模块名称’  from  ‘路径’；\n<span class=\"token keyword\">import</span>  ‘路径’；\n</code></pre>\n<ol start=\"2\"><li>导出</li></ol>\n<ul><li>ES6 通过 export 和export default 导出模块。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ren'</span><span class=\"token punctuation\">,</span>age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//注意：变量需要用大括号包裹，然后才能向外输出</span>\n</code></pre>\n<ul><li>模块化优点</li><li> <pre><code>  1.防止命名冲突\n</code></pre> </li><li> <pre><code>  2.复用性强\n</code></pre> </li></ul>\n<h2><a id=\"10_470\"></a>10、运算符</h2>\n<p><code>... </code>扩展运算符<br/> 可选链 <code> ?.</code><br/> 函数绑定运算符<code>::</code></p>\n<hr/>\n<p><font color=\"red\" size=\"4\"><strong>若本文对你有帮助 点个赞 点个关注</strong></font></p>\n<hr/>\n<h1><a id=\"ES6_479\"></a>总结——ES6思维导图</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\96e0abb18d3e446db28f686f2d00a017.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}