{"blogid": "126590863", "writerAge": "码龄6年", "writerBlogNum": "762", "writerCollect": "3164", "writerComment": "102", "writerFan": "1000", "writerGrade": "7级", "writerIntegral": "14899", "writerName": "wespten", "writerProfileAdress": "writer_image\\profile_126590863.jpg", "writerRankTotal": "734", "writerRankWeekly": "503", "writerThumb": "655", "writerVisitNum": "1134811", "blog_read_count": "79", "blog_time": "于 2022-08-30 08:25:11 发布", "blog_title": "LAMP和LNMP架构详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>一、LAMP架构</h2>\n<h3>1、web服务概述</h3>\n<p>WEB服务器也称为WWW(WORLD WIDE WEB，万维网)服务器，主要功能是提供网上信息浏览服务。 </p>\n<p>常见web服务器（web）：httpd（apache）、nginx+PHP。</p>\n<p>tomcat：jsp + html。</p>\n<p>win：IIS。</p>\n<p>客户端：IE 、firefox、chrome、手机（浏览器）Browser。</p>\n<p>Web 服务器的工作模式和端口：</p>\n<p>工作模式是：B/S 模式。</p>\n<p>工作端口是：80/http 正常端口443/https SSL 端口。</p>\n<h3>2、什么是LAMP</h3>\n<p>LAMP=Linux Apache Mysql/MariaDB PHP/Perl/Python 这些软件都是开源免费的软件，几个程序各自是独立的，经常为了达到我们需要的效果而协同工作，组成了我们常见的LAMP架构平台!LAMP是世界上最流行的组合，当然同时也有Nginx，也就是LNMP。</p>\n<p>LAMP 相对于 NGINX 来说较为安全，但是Nginx处理高并发比Apache要强，NGINX 相对于 LAMP 来说安全较为差一点，同样的配制环境负载远远高于 LAMP 向国内的一些大公司，淘宝、新浪都在用这一些 NGINX，向那么大的公司网站需要用到服务器群用LAMP搭建环境成本远远大于NGINX。打个比方本来1000000W访问量需要 10台LAMP环境服务器才能完成，但是使用NGINX也许只需要5、6台这样一来对于这样的公司来说就大大的节约了成本。</p>\n<p>从网站的流量上来说，70%以上的访问流量是LAMP来提供的，LAMP是最强大的网站解决方案，在以前这句话没有错，但是在现在，这句话有待证实！！！因为在以后的过程中，会发现我们会使用的架构是Nginx和Apache结合使用：使用Nginx可以做集群等相关配置，可以和apache一起使用，有的会用apache去跑php，然后用nginx做反向代理，比如apache运行在8080端口，nginx在80端口，访问php文件时，反向代理到apache，静态页通过nginx处理。nginx支持高并发，apache对php的运行比较稳定。</p>\n<p>常见的网页类型：htm,html,shtml,stm.php,asp,aspx,shtm,jsp等等Apache本事只处理静态页面，处理动态页面需要使用libphp5.so这个模块去工作，编译php也其实是将一个至关重要的模块打入到apache内部，然后apache收到php请求，将请求交给这个模块来处理！</p>\n<p>LAMP工作原理：</p>\n<p><img alt=\"\" height=\"239\" src=\"image\\d90204db4caa47539bfba4431693492c.png\" width=\"873\"/></p>\n<h3>3、Apache工作原理</h3>\n<p>Apache HTTPD Server 简称 Apache，是 Apache 软件基金会的一个开源的网页服务器， 可以在大多数计算机操作系统中运行，由于其多平台和安全性被广泛使用，是最流行的 Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩展，将 Perl/Python 等解释器编译到服务器中。Apache HTTP 服务器是一个模块化的服务器,各个功能使用模块化进行插拔！支持 Windows，Linux，Unix 等平台！</p>\n<p>Apache 软件基金会（也就是 Apache Software Foundation，简称为 ASF），是专门为运 作一个开源软件项目的 Apache 的团体提供支持的非盈利性组织，这个开源软件项目就是 Apache 项目！那么我们的 HTTPD 也只是 Apache 的开源项目之一！</p>\n<p>主要的开源项目：HTTP Server、Ant、DB、iBATIS、Jakarta、Logging、Maven、Struts、Tomcat、Tapestry、Hadoop等等。只是最有名的是 HTTP Server，所以现在所说的 Apache 已经就是 HTTPD Server 的代号了，还见的比较多的是Tomcat，Hadoop 等项目。</p>\n<p>官方网站：<a href=\"https://httpd.apache.org/\" title=\"Welcome! - The Apache HTTP Server Project\">Welcome! - The Apache HTTP Server Project</a></p>\n<p>Apache本身只处理html静态语言页面，当客户端需要访问php页面的时候，Apache会调用libphp5.so这个模块去工作，这个模块会把php页面转换成html静态页面，让Apache处理，Apache处理过，会返回给客户端。</p>\n<h3>4、PHP工作原理</h3>\n<p>PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通 用开源脚本语言。语法吸收了 C 语言、Java 和 Perl 的特点，利于学习，使用广泛，主要适 用于 Web 开发领域。</p>\n<p>PHP 独特的语法混合了 C、Java、Perl 以及 PHP 自创的语法。它可以 比 CGI 或者 Perl 更快速地执行动态网页。用 PHP 做出的动态页面与其他的编程语言相比， PHP 是将程序嵌入到 HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比 完全生成 HTML 标记的 CGI 要高许多。PHP 还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。</p>\n<p>简单的说，PHP 就是一个脚本解释器！ </p>\n<p>官方网站：<a href=\"https://www.php.net/\" title=\"PHP: Hypertext Preprocessor\">PHP: Hypertext Preprocessor</a></p>\n<p>PHP 服务器安装好之后，升级切记注意，不要盲目升级！因为它会废弃很多废弃低效的语法!</p>\n<h3>3、LAMP相关网站</h3>\n<p>Apache=http://httpd.apache.org/                                               #httpd主程序</p>\n<p>MySQL=http://dev.mysql.com/downloads/mysql/                      #mysql主程序包</p>\n<p>PHP=http://php.net/downloads.php                                           #php主程序包</p>\n<p>apr=http://apr.apache.org/                                                          #apr是httpd的依赖包</p>\n<p>apr-util=http://apr.apache.org/                                                    #apr-util是httpd的第二个依赖包</p>\n<p>apr和apr-util这个两个软件是对后端服务软件进行优化的，apr-util只是在apr的基础上提供了更多的数据结构和操作系统封装接口而已。</p>\n<p>pcre是httpd的第三个依赖包http://pcre.org/ 。</p>\n<p>PCRE(Perl Compatible Regular Expressions）中文含义是 perl语言兼容正则表达式，是一个用C语言编写的正则表达式函数库，PCRE被广泛使用在许多开源软件之中，最著名的莫过于Apache HTTP服务器和PHP脚本语言、R脚本语言，此外，正如从其名字所能看到的，PCRE也是perl语言的缺省正则库。</p>\n<h2>二、RPM方式快速搭建博客系统</h2>\n<h3><strong>1、安装LAMP</strong></h3>\n<pre><code>[root@localhost ~]#yum -y install httpd mariadb-server mariadb php php-mysql\n</code></pre>\n<p>centos6.5执行以下：</p>\n<pre><code>[root@localhost ~]# yum install httpd mysql-server mysql php php-mysql -y </code></pre>\n<p>说明：</p>\n<pre><code>httpd    # web服务器 \nmariadb-server  #mysql数据库 \nmariadb     # mysql服务器linux下客户端 \nphp    #php相关文件 \nphp-mysql  #          #php程序连接mysql使用的模块</code></pre>\n<p>查看php-mysql包作用：</p>\n<pre><code>[root@localhost Packages]# rpm -pqi php-mysql-5.4.16-42.el7.x86_64.rpm\nName        : php-mysql\nVersion     : 5.4.16\nRelease     : 42.el7\nArchitecture: x86_64\nInstall Date: (not installed)\nGroup       : Development/Languages\nSize        : 237331\nLicense     : PHP\nSignature   : RSA/SHA256, 2016年11月21日 星期一 04时04分05秒, Key ID 24c6a8a7f4a80eb5\nSource RPM  : php-5.4.16-42.el7.src.rpm\nBuild Date  : 2016年11月06日 星期日 08时38分25秒\nBuild Host  : worker1.bsys.centos.org\nRelocations : (not relocatable)\nPackager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;\nVendor      : CentOS\nURL         : http://www.php.net/\nSummary : A module for PHP applications that use MySQL databases</code></pre>\n<p>查看某个命令由哪个包安装：</p>\n<pre><code>[root@localhost ~]# rpm -qf `which mysql`</code></pre>\n<p>查看apache版本： </p>\n<pre><code>[root@localhost ~]# httpd -v </code></pre>\n<p>查看mysql数据版客户端版本：</p>\n<pre><code>[root@localhost ~]# mysql –V</code></pre>\n<h3><strong>2、启动服务LAMP相关服务</strong></h3>\n<pre><code>[root@localhost ~]# systemctl start  httpd\n[root@localhost ~]# systemctl enable  httpd\n\n[root@localhost ~]# systemctl start  mariadb \n[root@localhost ~]# systemctl enable  mariadb \n[root@localhost ~]#systemctl status  mariadb</code></pre>\n<h3><strong>3、测试数据库连接</strong></h3>\n<pre><code>连接mysql数据库，连接本机可以去掉-h \n#mysql \n或：\n# mysql -h IP -u USER -pPASS \nMysql的超级管理员是root拥有最mysql数据库的最高权限。 \n例： \n# mysql -u root –p123456 –h 10.10.10.68\nmysql&gt; exit;   #退出mysql</code></pre>\n<h3><strong>4、MySQL安全配置向导</strong></h3>\n<p>安装完mysql-server 会提示可以运行mysql_secure_installation。运行mysql_secure_installation会执行几个设置：</p>\n<p>a) 为root用户设置密码；</p>\n<p>b) 删除匿名账号；</p>\n<p>c) 取消root用户远程登录；</p>\n<p>d) 删除test库和对test库的访问权限；</p>\n<p>e) 刷新授权表使修改生效；</p>\n<p>通过这几项的设置能够提高mysql库的安全。建议生产环境中mysql安装这完成后一定要运行一次mysql_secure_installation。</p>\n<p>详细步骤请参看下面的命令：</p>\n<pre><code>[root@localhost ~]# mysql_secure_installation\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL\nSERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!\nIn order to log into MySQL to secure it, we'll need the current\npassword for the root user. If you've just installed MySQL, and\nyou haven't set the root password yet, the password will be blank,\nso you should just press enter here.\nEnter current password for root (enter for none):&lt;–初次运行直接回车\nOK, successfully used password, moving on…\nSetting the root password ensures that nobody can log into the MySQL\nroot user without the proper authorisation.\nSet root password? [Y/n] &lt;– 是否设置root用户密码, 刚才我已设置密码，我们输n\n... skipping\nBy default, a MySQL installation has an anonymous user, allowing anyone\nto log into MySQL without having to have a user account created for\nthem. This is intended only for testing, and to make the installation\ngo a bit smoother. You should remove them before moving into a\nproduction environment.\nRemove anonymous users? [Y/n] &lt;– 是否删除匿名用户,生产环境建议删除，所以直接回车或Y\n… Success!\nNormally, root should only be allowed to connect from 'localhost'. This\nensures that someone cannot guess at the root password from the network.\nDisallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,根据自己的需求选择Y/n并回车,建议禁止\n… Success!\nBy default, MySQL comes with a database named 'test' that anyone can\naccess. This is also intended only for testing, and should be removed\nbefore moving into a production environment.\nRemove test database and access to it? [Y/n] &lt;– 是否删除test数据库,直接回车或Y\n- Dropping test database…\n… Success!\n- Removing privileges on test database…\n… Success!\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\nReload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，直接回车\n… Success!\nCleaning up…\nAll done! If you've completed all of the above steps, your MySQL\ninstallation should now be secure.\nThanks for using MySQL!</code></pre>\n<p>如果不做安全配置root密码： </p>\n<pre><code>[root@localhost ~]# mysqladmin -u root password \"654321\" </code></pre>\n<h3><strong>5、登录mysql </strong></h3>\n<pre><code>[root@localhost kaixin]# mysql -u root -p \n或： \n[root@localhost kaixin]# mysql -u root -p123456\nmysql&gt; show databases; #没有test数据库 #执行时，所有命令以；号结尾 \n Database | \n+--------------------+ \n| information_schema | \n| mysql | \n| ucenter | \n+--------------------+ \n3 rows in set (0.00 sec) \nmysql&gt; exit #退出命令可以加分号，也可以不加分号。</code></pre>\n<h3><strong>6、测试网站是否支持PHP </strong></h3>\n<pre><code># cd /var/www/html/ \n[root@localhost  html]# vim index.php \n[root@localhost  html]# vim index.php \n&lt;?php \nphpinfo(); \n?&gt; \n[root@localhost html]# systemctl restart httpd 重启web</code></pre>\n<p>访问：</p>\n<p><a href=\"http://10.10.10.68/index.php\" title=\"http://10.10.10.68/index.php\">http://10.10.10.68/index.php</a></p>\n<p><img alt=\"\" height=\"534\" src=\"image\\7990200b7c574039bf55eb673a88d6ca.png\" width=\"764\"/>​</p>\n<h3><strong>7、搭建LAMP环境部署Ucenter和Ucenter-home网站，搭建一个类人人网的社交网站</strong></h3>\n<p> www.renren.com</p>\n<p><img alt=\"\" height=\"482\" src=\"image\\5ab151fecd7942e79415ae479fd3d61b.png\" width=\"994\"/>​</p>\n<p>UCenter 用户中心，实现用户的统一登录登出，积分的兑换，TAG的互通等，在安装UCenter Home、Discuz!、SupeSite、X-Space 等应用前必须先安装UCenter。<br/><br/> Discuz! 论坛，百万站长的选择，定会给您带来非凡的论坛体验。Discuz! 7.0.0 的推出使Discuz! 的用户体验又上升到了一个新的高度。</p>\n<p>官网地址：<a href=\"https://www.discuz.net/\" title=\"Discuz免费开源建站系统_Discuz开源社交系统_PHP开源论坛_社区网站搭建_搭建Discuz社交网站_小程序开发_APP软件开发_论坛开发_社交系统源码_开源SNS系统_为您提供全方位建站服务!\">Discuz免费开源建站系统_Discuz开源社交系统_PHP开源论坛_社区网站搭建_搭建Discuz社交网站_小程序开发_APP软件开发_论坛开发_社交系统源码_开源SNS系统_为您提供全方位建站服务!</a></p>\n<p>UCenter Home 个人家园，给社区中的会员一个可以安家的地方，在这里会员可以交朋友，写记录，发日志，贴照片，玩游戏...使会员可以牢牢的黏在你的社区里。</p>\n<p>SupeSite 社区门户，实现CMS 的功能，拥有强大的模型功能，对Discuz! 和 UCenter Home 的完美聚合，是您将社区中所有信息进行整合展示的最佳平台。 </p>\n<p>上传：</p>\n<p><img alt=\"\" height=\"101\" src=\"image\\17baf5c796234b61b4e8c2f9a04c804c.png\" width=\"466\"/>​</p>\n<p>到服务器上/root目录下： </p>\n<div>\n<pre><code>[root@localhost ~]# unzip -d ./ucenter UCenter_1.5.0_SC_UTF8.zip # 解压缩到./ucenter \n[root@localhost ~]# cd ./ucenter \n[root@localhost ucenter]# ls \nadvanced readme upload utilities \n[root@localhost ~]#mkdir /var/www/html/ucadmin   #创建目录\n[root@localhost ucenter]# mv upload/ /var/www/html/ucadmin \n[root@localhost ucenter]# cd /var/www/html/ucadmin \n[root@localhost ucadmin]# ls \nadmin.php control images js plugin upgrade \napi crossdomain.xml index.php lib release view \navatar.php data install model robots.txt \n# robots.txt 网站根目录下，robots.txt 文件作用。 \n</code></pre>\n</div>\n<p>Robots协议（也称为爬虫协议、机器人协议等）全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。 <br/> robots.txt文件是一个文本文件，使用任何一个常见的文本编辑器，比如Windows系统自带的Notepad，就可以创建和编辑它。</p>\n<p>robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件，robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的，但无法阻止窃贼等恶意闯入者。</p>\n<p>修改文件权限： </p>\n<div>\n<pre><code>[root@localhost ucadmin]# ls -ld data \ndrwxrwxrwx 8 root root 4096 2009-01-22 data \n[root@localhost html]# ps -aux | grep httpd \nWarning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ \nroot 3736 0.0 0.7 260340 9040 ? Ss 20:06 0:00 /usr/sbin/httpd \napache 3741 0.0 0.6 260492 7412 ? S 20:06 0:00 /usr/sbin/httpd \napache 3742 0.0 0.5 260340 6296 ? S 20:06 0:00 /usr/sbin/httpd\n\n[root@localhost html]# id apache \nuid=48(apache) gid=48(apache) groups=48(apache) \n[root@localhost ucadmin]# chown apache:apache data/ -R \n或： \n[root@localhost ucadmin]# chmod -R 777 data # \n#为安全正确做法应该是chown -R apache:apache data 后面安装好后测试。</code></pre>\n</div>\n<p>安装网站模版： </p>\n<p>打开：http://10.10.10.68/ucadmin/install/</p>\n<p><img alt=\"\" height=\"354\" src=\"image\\ab60534253834dc4bc85aa2ebaef0130.png\" width=\"995\"/>​</p>\n<p>要按这个打开：  </p>\n<div>\n<pre><code>[root@localhost ~]# vim /etc/php.ini #php运用程序的配置文件 \n改：229 short_open_tag = Off\n为：230 short_open_tag = On\n开启PHP短标签功能。\n决定是否允许使用，代码开始标志的缩写形式（&lt;? 。。。?&gt;）\nPHP 代码开始标志的完整形式为：&lt;?php。。。?&gt;\n#重新加载配置文件 \n[root@localhost ~]# service httpd restart \nStopping httpd: [ OK ] \nStarting httpd: [ OK ]</code></pre>\n</div>\n<p>测试：http:// 10.10.10.68/ucadmin/install/</p>\n<p><img alt=\"\" height=\"550\" src=\"image\\0423e3e0577e40c9add436a4ef6e25b2.png\" width=\"987\"/>​</p>\n<p>需要这个data目录可写： </p>\n<p><img alt=\"\" height=\"635\" src=\"image\\fcdaaa372a984447bbd9597ad11f43ce.png\" width=\"991\"/>​</p>\n<p><img alt=\"\" height=\"742\" src=\"image\\bd1ccb82e3f54d889f2ff842ed99fdf5.png\" width=\"978\"/>​</p>\n<p><img alt=\"\" height=\"600\" src=\"image\\98dac7a08335464eb41e6977e787100d.png\" width=\"988\"/>​</p>\n<p><img alt=\"\" height=\"302\" src=\"image\\0a707701ad4b469e905871bc693b5c26.png\" width=\"975\"/>​</p>\n<p>创建一个用户和密码，用于管理UCenter Home。</p>\n<p>创建一个用户和密码：</p>\n<p><img alt=\"\" height=\"373\" src=\"image\\df3b43458e6e4e718a494d65c760b76f.png\" width=\"995\"/>​</p>\n<p>安装UCenter_Home_ ：</p>\n<div>\n<pre><code>[root@localhost ~]# unzip -d ./ucenter_home UCenter_Home_2.0_SC_UTF8.zip \n[root@localhost ~]# cd ucenter_home \n[root@localhost uchome]# ls \n2.0_changelog.txt readme.txt update upload \n[root@localhost uchome]# mv upload/* /var/www/html/   #拷贝过去也行\n[root@localhost uchome]# cd /var/www/html/\n[root@localhost html]# ls \nadmin cp.php index.php network.php userapp.php \nadmincp.php crossdomain.xml install rss.php ver.php \napi data invite.php source xmlrpc.php \napp.php do.php js.php space.php \nattachment editor.php language template \ncommon.php help.php link.php theme \nconfig.new.php image magic.php uc_client \n[root@localhost html]# cp config.new.php config.php \n[root@localhost html]# chown apache:apache config.php \n[root@localhost html]# chown apache:apache  attachment/  data/  uc_client/ -R</code></pre>\n</div>\n<p>然后打开连接 安装http://10.10.10.68/install</p>\n<p>UCenter 的URL：http:// 10.10.10.68/ucadmin</p>\n<p>UCenter创始人密码：123456</p>\n<p><img alt=\"\" height=\"582\" src=\"image\\bb0915ae1800427abcbf84df0a2046cd.png\" width=\"977\"/>​</p>\n<p><img alt=\"\" height=\"520\" src=\"image\\5b66b01817f04ed2afbc439786cd7435.png\" width=\"948\"/>​</p>\n<p>配置httpd虚拟主机：</p>\n<div>\n<pre><code>vim /etc/httpd/conf.d/vhost.conf 添加两个基于域名的虚拟主机。 \n添加两个虚拟主机\n第一个：\n&lt;VirtualHost *:80&gt;\nServerAdmin webmaster@dummy-host.example.com\nDocumentRoot /var/www/html/ucadmin\nServerName admin.yyds.cn\n&lt;/VirtualHost&gt;\n第二个：\n&lt;VirtualHost *:80&gt;\nServerAdmin webmaster@dummy-host.example.com\nDocumentRoot /var/www/html/\nServerName www.yyds.cn\n&lt;/VirtualHost&gt;</code></pre>\n</div>\n<p>修改windows主机的host文件指向域名：</p>\n<div>\n<pre><code># localhost name resolution is handled within DNS itself.\n#\t127.0.0.1       localhost\n#\t::1             localhost\n10.10.10.68\twww.yyds.cn\n10.10.10.68\tadmin.yyds.cn</code></pre>\n</div>\n<h2>三、源码编译安装LAMP</h2>\n<h3>1、为什么要源码编译</h3>\n<p>一般来说，我们软件的安装方式有yum（rpm），和源码编译两种方式，那么为什么我们需要源码编译安装一部分软件？选择源码编译安装软件有以下几个原因：</p>\n<p>1）满足不同的运行平台，我们Linux发型版本众多，但是每个版本采用的软件或者内核版本都不一样，而我们的二进制包所依赖的环境不一定能够正常运行，所以大部分软件直接提供源码！</p>\n<p>2）方便定制，满足不同的需求，很多时候我们所需要的软件都是可以定制的，我需要什么就安装什么，大多数二进制代码都是一键装全，所以自由度并不高！</p>\n<p>3）方便运维、开发人员维护，我们的源码是可以打包二进制的，但是对于这个软件的打包都会有一份代价不小的额外工作，包括维护，所以如果是源码的话，软件产商会直接维护，但是如果是二进制的话，一般都是Linux发行商提供！</p>\n<h3>2、编译安装LAMP所需</h3>\n<p>1）httpd version：httpd-2.4.16</p>\n<p>2）apr version：apr-1.5.2</p>\n<p>3）pcre version：pcre-8.37</p>\n<p>4）apr-util version：apr-util-1.5.4</p>\n<p>5）mysql version：mysql-5.6.26</p>\n<p>6）php version：php-5.6.13</p>\n<p>安装之前需要注意：</p>\n<p>1. LAMP源码编译的基础环境：</p>\n<div>\n<pre><code>[root@localhost ~]# lsb_release -a\n……\nDescription:        Red Hat Enterprise Linux Server release 6.5(Santiago)\n……\n[root@localhost ~]# uname -a\nLinux XueGod63.cn 2.6.32-431.el6.x86_64 …</code></pre>\n</div>\n<p>2. 确保系统的干净的系统，不要和现在源码编译安装的软件冲突：</p>\n<p>不要在一个系统上同时存在 RPM-Apache+源码-Apache。</p>\n<p>建议在编译之前，把开发包组\"Development Tools\"和 \"Development Libraries\"<br/> 安装：</p>\n<div>\n<pre><code>[root@localhost ~]# yum groupinstall \"Development Tools\" \"Development Libraries\" -y\n[root@localhost ~]# yum install gcc gcc-c++ openssl-devel -y   </code></pre>\n</div>\n<p>所有软件：</p>\n<div>\n<pre><code>[root@localhost ~]# ls\napr-1.5.2.tar.gz            httpd-2.4.16.tar.bz2    pcre-8.37.tar.bz2\napr-util-1.5.4.tar.bz2      mysql-5.6.26.tar.gz     php-5.6.13.tar.bz2</code></pre>\n</div>\n<p>3. apr和apr-util依赖，<span style=\"background-color:#ffffff;\"><span style=\"color:#000000;\">独立编译：</span></span></p>\n<div>\n<pre><code>[root@localhost ~]# tar xf apr-1.5.2.tar.gz -C /usr/local/src/ &amp;&amp;tar xf apr-util-1.5.4.tar.bz2 -C /usr/local/src/\n[root@localhost ~]# cd /usr/local/src/apr-1.5.2/ &amp;&amp; ./configure --prefix=/usr/local/apr &amp;&amp; make -j 2 &amp;&amp; make install\n[root@localhost apr-1.5.2]# cd ../apr-util-1.5.4/ &amp;&amp; ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr &amp;&amp; make -j 2 &amp;&amp; make install\n[root@localhost apr-util-1.5.4]# cd &amp;&amp; tar xf pcre-8.37.tar.bz2 -C /usr/local/src/\n[root@localhost ~]# cd /usr/local/src/pcre-8.37/ &amp;&amp; ./configure --prefix=/usr/local/pcre &amp;&amp; make -j 2 &amp;&amp; make install &amp;&amp; cd</code></pre>\n</div>\n<h3>3、Apache源码编译</h3>\n<p>依赖环境安装完成，开始编译安装apache：</p>\n<div>\n<pre><code>[root@localhost ~]# tar xvf httpd-2.4.16.tar.bz2 -C /usr/local/src/ &amp;&amp; cd /usr/local/src/httpd-2.4.16\n[root@localhost httpd-2.4.16]# ./configure --prefix=/usr/local/apache2.4 --enable-so --enable-rewrite --enable-ssl --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util --enable-modules=most --enable-mpms-shared=all --with-mpm=event &amp;&amp; make -j 2 &amp;&amp; make install \n--prefix=/usr/local/apache2.4                       #安装路径\n--enable-so                                         #支持动态加载模块\n--enable-rewrite                                    #支持网站地址重写\n--enable-ssl                                        #支持SSL加密\n--with-pcre=/usr/local/pcre                         #pcre路径\n--with-apr=/usr/local/apr                           #apr路径\n--with-apr-util=/usr/local/apr-util                 #apr-util路径</code></pre>\n</div>\n<p>一共有三种稳定的MPM（Multi-Processing Module，多进程处理模块）模式。它们分别是prefork，worker和event，它们同时也代表这Apache的演变和发展。</p>\n<p style=\"margin-left:.0001pt;text-align:left;\">配置Apache的启动脚本：</p>\n<div>\n<pre><code>[root@localhost ~]# cp /usr/local/apache2.4/bin/apachectl  /etc/init.d/apache2.4\n#若是你按照我们实验环境安装了桌面，那么需要停掉httpd服务，若不是，则不需要\n[root@localhost ~]# /etc/init.d/httpd stop\n[root@localhost ~]# chkconfig httpd off\n#编辑启动脚本文件\n[root@localhost ~]# vim /etc/init.d/apache2.4\n#!/bin/sh\n# chkconfig: 2345 64 36            \n#这个是启动级别的服务，2345是指那些级别启动，64是开启顺序，应该在network服务的后面，36是关闭顺序，应该在network的前面，这里并不是注释\n#默认network的是：2345 10 90\n# description: Apache2.4.16 start script            #描述字段，有了这两个字段，就可以用#chkconfig命令控制\n[root@localhost ~]# service apache2.4 start\n[root@localhost ~]# chkconfig apache2.4 on</code></pre>\n</div>\n<p style=\"margin-left:.0001pt;text-align:left;\">Apache安装完成需要注意的地方：</p>\n<div>\n<pre><code>[root@localhost ~]# ps -aux | grep apache     //源码编译apache，运行用户为deamon\nWarning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ\nroot        43191  0.0  0.0  70632  2184?  Ss   16:54   0:00/usr/local/apache2.4/bin/httpd -k start\ndaemon      43192  0.0  0.1663500  4820?  Sl   16:54   0:00/usr/local/apache2.4/bin/httpd -k start\ndaemon      43193  0.0  0.1414892  4184?  Sl   16:54   0:00/usr/local/apache2.4/bin/httpd -k start\ndaemon      43194  0.0  0.1414892  4188?  Sl   16:54   0:00/usr/local/apache2.4/bin/httpd -k start\nroot        43344  0.0  0.0103244  864 pts/0 S+ 17:12   0:00 grep apache\n[root@localhost ~]# id daemon                                   //编译安装运行用户身份是daemon\nuid=2(daemon) gid=2(daemon) groups=2(daemon),1(bin),4(adm),7(lp)\n[root@localhost ~]# useradd -M -s /sbin/nologin apache                           //创建一个用户用来运行apache\n[root@localhost ~]# vim /usr/local/apache2.4/conf/httpd.conf           //修改配置文件改变apache运行身份\nUser apache                     #运行用户\nGroup apache                    #运行组，创建apache的时候已经即时创建了apache这个组\n[root@localhost ~]# id apache\nuid=500(apache) gid=500(apache) groups=500(apache)\n更改目录权限\n[root@localhost ~]# chown -R apache:apache /usr/local/apache2.4/       //默认是root，改为apache</code></pre>\n</div>\n<h3 style=\"margin-left:.0001pt;text-align:left;\">4、MYSQL源码编译</h3>\n<p style=\"margin-left:.0001pt;text-align:left;\">Mysql 5.5.15 以后，使用了新的 cmake 编译方式，所以先安装 cmake。 以前的版本直接 configure然后make ，make install ，对于5.5.16的后续版本，将需要先使用cmake之后再make，然后make install。</p>\n<p style=\"margin-left:.0001pt;text-align:left;\">CMake 是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的 makefile 或者 project 文件，能测试编译器所支持的 C++特性,类似 UNIX 下的automake。 只是 CMake 的建构档取名为 CmakeLists.txt。</p>\n<p style=\"margin-left:.0001pt;text-align:left;\">Cmake 并不直接建构出最终的软件，而是产生标准的建构档（如 Unix 的 Makefile 或Windows Visual C++ 的 projects/workspaces），然后再依一般的建构方式使用。这使得熟悉某个集成开发环境（IDE）的开发者可以用标准的方式建构他的软件，这种可以使用各平台的原生建构系统的能力是 CMake 和 SCons 等其他类似系统的区别之处。</p>\n<p style=\"margin-left:.0001pt;text-align:left;\">解决依赖：</p>\n<div>\n<pre><code>[root@localhost ~]# yum install -y cmake  ncurses-devel   //gcc等相关在编译apache已安装</code></pre>\n</div>\n<p>编译安装MySql：</p>\n<p>安装之前使用 yum remove mysql  确保没有安装MySQL。</p>\n<div>\n<pre><code>[root@localhost ~]# tar xf mysql-5.6.26.tar.gz -C /usr/local/src/ ; cd /usr/local/src/mysql-5.6.26\n[root@localhost mysql-5.6.26]# useradd -M -s /sbin/nologin mysql                            //创建mysql运行用户\n[root@localhost mysql-5.6.26]# cmake \\\n -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\n -DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\n -DDEFAULT_CHARSET=utf8 \\\n -DDEFAULT_COLLATION=utf8_general_ci \\\n -DWITH_EXTRA_CHARSETS=all \\\n -DWITH_MYISAM_STORAGE_ENGINE=1\\\n -DWITH_INNOBASE_STORAGE_ENGINE=1\\\n -DWITH_MEMORY_STORAGE_ENGINE=1\\\n -DWITH_READLINE=1\\\n -DENABLED_LOCAL_INFILE=1\\\n -DMYSQL_DATADIR=/usr/local/mysql/data \\\n -DMYSQL-USER=mysql\n***********************************参数解释******************************************************************************\nDCMAKE_INSTALL_PREFIX                                      #制定mysql的安装根目录，目录在安装的时候会自动创建，这个值也可以在服务器启动时，用--basedir来设置\nDMYSQL_UNIX_ADDR                                           #服务器与本地客户端进行通信的Unix套接字文件，必须是绝对路径，默认位置/tmp/mysql.sock，可以在服务器启动时，用--socket改变\nDDEFAULT_CHARSET                        #mysql默认使用的字符集，不指定将默认使用Latin1西欧字符集\nDDEFAULT_COLLATION                           #默认字符校对\nDWITH_EXTRA_CHARSETS                  #制定mysql拓展字符集，默认值也是all支持所有的字符集\nDWITH_MYISAM_STORAGE_ENGINE \nDWITH_INNOBASE_STORAGE_ENGINE\nDWITH_MEMORY_STORAGE_ENGINE\n#静态编译MYISAM，INNOBASE，MEMORY存储引擎到MYSQL服务 器，这样MYSQL就支持这三种存储引擎\nDWITH_READLINE                    #支持readline库\nDENABLED_LOCAL_INFILE                    #允许本地倒入数据，启用加载本地数据\nDMYSQL_DATADIR                                #mysql数据库存放路径\nDMYSQL-USER                                    #运行mysql的用户\n[root@localhost mysql-5.6.26]# make -j 4 &amp;&amp; make install</code></pre>\n</div>\n<p>这些编译参数的帮助寻找方法：</p>\n<p><a href=\"https://www.mysql.com/\" title=\"MySQL\">MySQL</a><strong>→→Documentation→→选择对应的版本（5.6）→→HTML Online→→View→→Installation &amp; Upgrades→→Installing MySQL from Source →→MySQL Source-Configuration Options→→</strong><a href=\"https://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html\" title=\"MySQL :: MySQL 5.6 Reference Manual :: 2.9.7 MySQL Source-Configuration Options\">MySQL :: MySQL 5.6 Reference Manual :: 2.9.7 MySQL Source-Configuration Options</a></p>\n<h3>5、配置mysql</h3>\n<pre><code>[root@localhost mysql-5.6.26]# cd &amp;&amp; chown -R mysql:mysql /usr/local/mysql/  //属主属组更改\n[root@localhost ~]# cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf //覆盖原配置文件\n[root@localhost ~]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld  //启动脚本\n[root@localhost ~]# vim /etc/init.d/mysqld   //更改启动脚本中指定mysql位置\nbasedir=\ndatadir=\n#修改为\nbasedir=/usr/local/mysql\ndatadir=/usr/local/mysql/data\n[root@localhost ~]# chkconfig mysqld  on                //开机启动</code></pre>\n<p>初始化数据库：</p>\n<pre><code>[root@localhost ~]# /usr/local/mysql/scripts/mysql_install_db \\\n--defaults-file=/etc/my.cnf  \\\n--basedir=/usr/local/mysql/\\\n--datadir=/usr/local/mysql/data/\\\n--user=mysql\n#类似于在rpm安装的时候启动数据库弹出的初始化消息\n[root@localhost ~]# ls /usr/local/mysql/data/     //初始化看这个下面有无mysql和test等数据库\nibdata1  ib_logfile0  ib_logfile1  mysql  performance_schema  test\n[root@localhost ~]# ln -s /usr/local/mysql/bin/* /bin/ //这个里面是部分命令，让系统直接调用\n[root@localhost ~]# servie mysqld  start          //启动数据库\n[root@localhost ~]# mysql_secure_installation     //初始安全设置（设置root密码，123456）\n[root@localhost ~]# mysql -uroot -p123456        //测试登录（OK）</code></pre>\n<h3>6、编译安装配置PHP</h3>\n<p>PHP原始为Personal Home Page的缩写，已经正式更名为 \"PHP: Hypertext Preprocessor\"。<br/> Apache对于php的解析，就是通过众多Module中的php Module来完成的，把php最终集成到Apache系统中，还需要对Apache进行一些必要的设置！</p>\n<p>解决依赖：</p>\n<pre><code>[root@localhost php-5.6.13]# yum install -y libxml2-devel\n[root@localhost ~]# tar xf php-5.6.13.tar.bz2 -C  /usr/local/src/ ; cd /usr/local/src/php-5.6.13</code></pre>\n<p>正式安装：</p>\n<pre><code>[root@localhost php-5.6.13]# ./configure --prefix=/usr/local/php --with-mysql=/usr/local/mysql/ --with-apxs2=/usr/local/apache2.4/bin/apxs --with-config-file-path=/usr/local/php\n--prefix                        #指定安装路径\n--with-apxs2                    #用apache的apxs工具将php编译成apache的一个模块\n--with-mysql                    #与mysql结合，如果不跟路径，编译出来的版本将是低版本\n--with-config-file-path         #php的主配置文件php.ini路径\n#看到下面一段内容，表示configure成功\nThank you for using PHP.\nconfig.status: creating php5.spec\nconfig.status: creating main/build-defs.h\nconfig.status: creating scripts/phpize\nconfig.status: creating scripts/man1/phpize.1\nconfig.status: creating scripts/php-config\nconfig.status: creating scripts/man1/php-config.1\nconfig.status: creating sapi/cli/php.1\nconfig.status: creating sapi/cgi/php-cgi.1\nconfig.status: creating ext/phar/phar.1\nconfig.status: creating ext/phar/phar.phar.1\nconfig.status: creating main/php_config.h\nconfig.status: executing default commands\n[root@localhost php-5.6.13]# make –j 3 ; make install ; cd /usr/local/src/php-5.6.13\n[root@localhost php-5.6.13]# cp php.ini-production /usr/local/php/php.ini ; cd //php配置文件</code></pre>\n<p>检测编译安装结果：</p>\n<p>只有有下面这两个文件（模块），代表我们的apache就可以支持php了。</p>\n<pre><code>[root@localhost ~]#ls /usr/local/apache2.4/modules/httpd.exp \n/usr/local/apache2.4/modules/httpd.exp\n[root@localhost ~]# ls /usr/local/apache2.4/modules/libphp5.so\n/usr/local/apache2.4/modules/libphp5.so</code></pre>\n<h3>7、配置Apache支持PHP</h3>\n<pre><code>[root@localhost ~]# vim /usr/local/apache2.4/conf/httpd.conf\n……\n248    &lt;IfModule dir_module&gt;\n249       DirectoryIndex index.html index.php           #添加index.php\n250    &lt;/IfModule&gt;\n……\n376     AddType application/x-compress .Z\n377     AddType application/x-gzip .gz .tgz       #上面两行是以前有的\n378     AddType application/x-httpd-php .php      #下面两行是添加的，需要添加以支持PHP\n379     AddType application/x-httpd-php-source .phps\n修改完，重启下Apache服务。</code></pre>\n<p>测试：</p>\n<pre><code>[root@localhost ~]# vim /usr/local/apache2.4/htdocs/index.php               \n&lt;?php\n        phpinfo();\n?&gt;</code></pre>\n<p>然后使用客户端浏览此页面：</p>\n<p><img alt=\"\" height=\"351\" src=\"image\\cbb84384531e488e9f8127272407fd23.png\" width=\"995\"/></p>\n<h2>四、yum方式安装LAMP</h2>\n<h3>1、安装httpd</h3>\n<pre><code>yum -y install httpd # Apache 服务的主程序包，服务器端必须安装该软件包\nOr\nyum install httpd-devel #Apache 开发程序包</code></pre>\n<p>安装字符界面的下浏览器客户端：</p>\n<pre><code>[root@localhost Packages]# yum install elinks</code></pre>\n<p>测试：</p>\n<pre><code>[root@localhost ~]# elinks 192.168.0.63</code></pre>\n<p><img alt=\"\" height=\"633\" src=\"image\\d034f9776a8b40fdbd587f895a2fb174.png\" width=\"990\"/></p>\n<p>apache主配置文件：</p>\n<pre><code>[root@localhost Packages]# ll  /etc/httpd/conf/httpd.conf</code></pre>\n<p>启动服务：</p>\n<pre><code>[root@localhost ~]# systemctl start httpd.service\n[root@localhost ~]# systemctl enable httpd.service</code></pre>\n<p>查看端口：</p>\n<pre><code>[root@localhost Packages]# netstat -anutp | grep 80\ntcp        0      0 :::80                       :::*                        LISTEN      3854/httpd</code></pre>\n<h3>2、apache主配置文件介绍</h3>\n<pre><code>vim /etc/httpd/conf/httpd.conf\nServerName 192.168.1.235:80\t#服务器主机名\nPidFile run/httpd.pid\t\t\t #运行进程 ID 存放\nTimeout 60\t\t\t\t\t#超时时间，多少 s 没有反应就超时\nKeepAlive Off\t\t\t\t\t#是否允许一个永久的链接，设置为 OFF 的时候，不 能保持连接功能，传输效率比较低，设置为 ON 时，可以提高服务器传输文件的效率，建议开启\nMaxKeepAliveRequests 100\t\t#设置 KeepAlive 为 ON 时，设置客户端每次连接允许 请求相应最大文件数，默认 100 个\nKeepAliveTimeout 15\t\t\t#超时时间，同一个客户端下一个请求 15s 没收到就 超时\nListen 80\t\t\t\t\t\t#监听端口，默认本地 IP，如果指定 ip 写上 IP:80\n&lt;IfModule prefork.c&gt;\nStartServers8\t\t\t\t\t#服务开始起启动 8 个进程\nMinSpareServers5\t\t\t\t#最小空闲 5 个进程\nMaxSpareServers20\t\t\t#最多空闲 20 个进程\nServerLimit256\t\t\t\t#服务器允许配置进程数上线\nMaxClients256\t\t\t\t#最大连接数 256，超过要进入等候队列 \nMaxRequestsPerChild4000\t\t#每个进程生存期内服务最大的请求数量，0 表示用不 结束\n&lt;/IfModule&gt;\n&lt;Directory /&gt;\nOptions FollowSymLinks\t\t#Options Indexes 目录浏览FollowSymLinks 用连接\n浏览\nAllowOverride None\t\t\t#设置为 none，忽略.htaccess\n&lt;/Directory&gt;\nLoadModule auth_basic_module modules/mod_auth_basic.so\t\t#载入的库，模块\n● ● ● ● ● ●\nInclude conf.d/*.conf\t\t\t#conf.d 里面的 conf 文件也属有效配置文件\nUser apache\t\t\t\t\t#运行以哪个身份运行\nGroup apache\t\t\t\t#运行以哪个组的身份运行\nServerAdmin root@localhost\t#管理员邮箱\nDocumentRoot \"/var/www/html\"\t\t#默认的主目录，如果改动要改动两处，Directory\n&lt;Directory \"/var/www/html\"&gt; \nOptions Indexes FollowSymLinks AllowOverride None\nOrder allow,deny\t\t\t\t#这里默认后者生效，也就是 deny 生效\nAllow from all\t\t\t\t#这里说允许所有\n&lt;/Directory&gt;\nLogLevel warn\t\t\t\t#日志等级\nDirectoryIndex index.html index.html.var\t\t\t#首页 \nAccessFileName .htaccess\t\t#access 文件名，也可以在这里定义伪静态、防盗链等，不建议在这个文件定义\nAddDefaultCharset UTF-8\t\t#支持的语言，默认编码\n#配置文件的最后是虚拟主机的字段，其中你大部分字段做个了解即可，用到的时候去查 即可</code></pre>\n<h3>3、yum 的方式搭建LAMP 环境</h3>\n<p style=\"margin-left:.0001pt;text-align:left;\">centos6：</p>\n<pre><code>[root@localhost ~]# yum -y install httpd mysql mysql-server php php-mysql</code></pre>\n<p>centos7：</p>\n<pre><code>[root@localhost ~]#yum -y install httpd mariadb mariadb-server php php-mysql</code></pre>\n<p>测试数据库：</p>\n<pre><code>[root@localhost ~]# systemctl start mariadb.service\n[root@localhost ~]# systemctl enable mariadb.service\n[root@localhost ~]# mysql_secure_installation         初始化数据库\n[root@localhost ~]# mysql -uroot -p   登陆测试\nmysql&gt; show databases;\nmysql&gt;exit;</code></pre>\n<p>测试apache是否支持php：</p>\n<pre><code>[root@localhost html]# cd /var/www/html/\n[root@localhost html]# vim index.php \n&lt;?php \nphpinfo(); \n?&gt;\n[root@localhost html]# systemctl restart httpd</code></pre>\n<p>类似于PHP 探针：</p>\n<p>一个PHP编写的文件，可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息，定时刷新一次。以及包括服务器IP地址，Web服务器环境监测，php等信息。 </p>\n<h3>4、搭建一台测试web服务器</h3>\n<p>要求：</p>\n<p>部门内部搭建一台WEB服务器，采用的IP地址和端口为192.168.0.63:80，首页采用index.html<br/> 文件。网页的编码类型采用UTF-8，所有网站资源都存放在/var/www/html目录下，并将Apache的配置文件根目录设置为/etc/httpd目录。</p>\n<p>修改配置文件：</p>\n<p>改配置文件之前，记得先备份一份，以便恢复。</p>\n<pre><code>[root@localhost chroot]# vim /etc/httpd/conf/httpd.conf   #以下参数需要我们掌握\nServerRoot \"/etc/httpd\"  #apache配置文件的根目录\nTimeout 60  #超时时间  \nListen 80   监听的端口\nServerAdmin cat@163.com #设置管理员，e-mail 地址\nServerName 192.168.0.63:80   #服务器主机名\nDocumentRoot \"/var/www/html\"   #网站页面根目录\nOptions Indexes FollowSymLinks   #当一个目录没有默认首页时，允许显示此目录列表\nDirectoryIndex index.html index.php   #指定默认首页\nAddDefaultCharset UTF-8   # 设置服务器的默认编码为UTF-8</code></pre>\n<p>取消apache默认欢迎页：</p>\n<pre><code>[root@localhost ~]#  vim /etc/httpd/conf.d/welcome.conf\n# \n# This configuration file enables the default \"Welcome\"\n# page if there is no default index page present for\n# the root URL.  To disable the Welcome page, comment\n# out all the lines below.\n#\n#&lt;LocationMatch \"^/+$\"&gt;   #把红色内容注释\n#    Options -Indexes\n#    ErrorDocument 403 /error/noindex.html\n#&lt;/LocationMatch&gt;</code></pre>\n<p>重启：</p>\n<pre><code>[root@localhost ~]# service httpd restart</code></pre>\n<p>创建首页：</p>\n<pre><code># echo 'welcome to www.yyds.cn!'  &gt; /var/www/html/index.html</code></pre>\n<h3>5、LAMP安全访问机制的实现 </h3>\n<p><strong>1. 修改网站目录对应参数及权限</strong></p>\n<p>修改网站默认根目录，并且设置访问权限，只有在我允许的范围之内可以访问。</p>\n<p>修改网站默认根目录，设置文档目录为/var/www/html/bbs。</p>\n<p>修改 DocumentRoot 路径为指定的目录。</p>\n<p></p>\n<p><img alt=\"\" height=\"177\" src=\"image\\5796342446f34602884aea0274e2dac3.png\" width=\"840\"/></p>\n<p>允许所有人访问/var/www/html/bbs 目录。 </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">目录与访问控制：</p>\n<pre><code>&lt;Directory \"/var/www/html/bbs\"&gt;      #子目录会继承这个目录的属性\n    Options  FollowSymLinks            #Options:Indexes:目录浏览  \n    AllowOverride None                 #Followsymlinks:可以用连接\n    Order allow,deny\n    Allow from 192.168.18.0/24                     #从哪里来的允许  \nDeny from 192.168.16.0/24                      #从哪里来的拒绝\nAllow from  .baidu.com\n#Allow,Deny都会读取，如果有冲突和未说明的时候按照Order选项逗号后面的那个为准。\n#谁写到后面，谁的优先级高。\n&lt;/Directory&gt;</code></pre>\n<p>创建目录，创建测试首页：</p>\n<pre><code> [root@localhost ~]# mkdir /var/www/html/bbs\n [root@localhost ~]# cp /var/www/html/index.html /var/www/html/bbs/</code></pre>\n<p><img alt=\"\" height=\"404\" src=\"image\\bd25f5af98624126b96e6a8b1beadbdd.png\" width=\"983\"/></p>\n<p>注意:上面的访问控制的方法是Apache2.2版本中的写法,在2.4中是不支持的。 </p>\n<p>Apache2.4的访问控制：</p>\n<pre><code>Require all granted #允许所有\nRequire all denied #拒绝所有\nRequire method http-method [http-method] ... #允许，特定的HTTP方法\nRequire user userid [ userid ] ... #允许，特定用户\nRequire group group-name [group-name] ... #允许，特定用户组\nRequire valid-user # #允许，有效用户\nRequire ip 10 172.20 192.168.2 #允许 特定IP和网段</code></pre>\n<p><strong>2. 使用别名，引用网站根目录以外的路径</strong></p>\n<p>将/usr/local/phpdata 目录通过虚拟目录功能添加到网站根目录。当访问http://192.168.0.63/ phpdata/ 时，就可以访问目录/usr/local/phpdata中的内容。</p>\n<p>注：apache的别名也叫虚拟目录</p>\n<p>语法：</p>\n<pre><code>AliasURL路径   PATH物理路径</code></pre>\n<p>创建测试数据：</p>\n<pre><code>[root@localhost conf]# mkdir /usr/local/phpdata\n[root@localhost conf]# echo \"This Alias PHPdata\" &gt; /usr/local/phpdata/index.html</code></pre>\n<p>修改配置文件：</p>\n<pre><code>[root@localhost conf]# vim /etc/httpd/conf/httpd.conf# 添加红框中的内容</code></pre>\n<p><img alt=\"\" height=\"391\" src=\"image\\cb24d6e981b04c529e690e89c8822ea4.png\" width=\"988\"/></p>\n<pre><code>Alias /phpdata/ \"/usr/local/phpdata/\"\n&lt;Directory \"/usr/local/phpdata/\"&gt;\n    Options Indexes FollowSymLinks  \n    AllowOverride None \n    Require all granted\n&lt;/Directory&gt;\n注：Alias /phpdata/ \"/usr/local/phpdata/\"     \n#/phpdata/ 可以随意起。比如改/phpdata/ 为/php/  则访问链接： http://192.168.0.63/php/</code></pre>\n<p>测试：</p>\n<pre><code>[root@localhost conf]# service httpd restart\nhttp://192.168.0.63/phpdata/\nOr\nhttp://192.168.0.63/phpdata/a.html</code></pre>\n<p><img alt=\"\" height=\"382\" src=\"image\\110ef3ef227240eba411542921069810.png\" width=\"846\"/></p>\n<p><strong>3. 当一个目录下没有默认首页时，访问http://192.168.0.63/phpdata/禁止显示目录列表</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">显示目录的效果：</p>\n<p><img alt=\"\" height=\"305\" src=\"image\\3c852dade07c4a1e9a004cca7610df9f.png\" width=\"987\"/></p>\n<p>当网站没有默认的首页的时候，直接访问显示网站更目录下的文件夹资源： </p>\n<p><img alt=\"\" height=\"614\" src=\"image\\78f016d2bd9e4d42a00279e62d7f6111.png\" width=\"972\"/></p>\n<p>修改配置文件： </p>\n<pre><code>[root@localhost conf]# vim /etc/httpd/conf/httpd.conf  # 修改红色标记内容\n328 # The Options directive is both complicated and important.  Please see\n329 # http://httpd.apache.org/docs/2.2/mod/core.html#options\n330 # for more information.\n331 #\n332     Options -Indexes FollowSymLink      #注释index这行即可\n334 #</code></pre>\n<p><strong>4. 通过用户认证的方式，对网站下/usr/local/phpdata/目录进行保护。 设置/usr/local/phpdata/目录，只能通过用户名密码方式访问</strong></p>\n<pre><code>[root@localhost conf]# vim /etc/httpd/conf/httpd.conf   \nAlias /phpdata/ \"/usr/local/phpdata /\"\n&lt;Directory \"/usr/local/phpdata /\"&gt;\n    Options Indexes FollowSymLinks\n    AllowOverride None \n    authtype basic   #添加以下内容\n    authname \"my web site\"\n    authuserfile /etc/httpd/conf/passwd.secret\n    require valid-user\n&lt;/Directory&gt;</code></pre>\n<p><img alt=\"\" height=\"424\" src=\"image\\155c30a63c8542259184efff44c90f90.png\" width=\"935\"/></p>\n<p>参数说明： </p>\n<pre><code>authtype basic         #authtype命令：指定认证类型为：basic。\nauthname \"my web site\" #AuthName命令：指定认证区域名称。区域名称是在提示要求认证的对话框中显示给用户的。\nauthuserfile /etc/httpd/conf/passwd.secret #AuthUserFile命令：指定一个包含用户名和密码的文本文件，每行一对。\nrequire命令  #指定哪些用户或组才能被授权访问。如：\nrequire user user1 user2\t(只有用户user1和user2可以访问)\nrequire valid-user\t\t (在AuthUserFile指定的文件中任何用户都可以访问)</code></pre>\n<p>利用Apache附带的程序htpasswd，生成包含用户名和密码的文本文：</p>\n<pre><code>[root@localhost conf]# htpasswd -cm 存放用户名和密码的文件名用户名\n[root@localhost conf]# htpasswd -cm /etc/httpd/conf/passwd.secret tom\nNew password: 123456\nRe-type new password: 123456\nAdding password for user tom\n#第一个生成用户名和密码，需要创建文件，因此需要加-c参数\n[root@localhost phpdata]# htpasswd -h   #查看参数\n-c  Create a new file.\n-m  Force MD5 encryption of the password.\n[root@localhost conf]# htpasswd -m /etc/httpd/conf/passwd.secret bob\nNew password: 123456\nRe-type new password: 123456\nAdding password for user bob\n[root@localhost conf]# cat /etc/httpd/conf/passwd.secret   #查看内容\ntom:$apr1$WJicnaIz$ejqYMmcqukEMsAVEjLcKf.\nbob:$apr1$S8pXfxJh$tletPNMKd33WZXqdkSLFy0</code></pre>\n<p>测试：</p>\n<pre><code>[root@localhost conf]# service httpd restart\nhttp://192.168.0.63/phpdata/</code></pre>\n<p><img alt=\"\" height=\"542\" src=\"image\\7a04a9fe2b6d4f53b65ff2521b100a9a.png\" width=\"779\"/></p>\n<h3>6、 配置apache虚拟主机，实现在一台服务器上运行多个网站</h3>\n<p>apache虚拟主机实现有三种方法：</p>\n<p>1、通过不同的IP地址<br/> 2、通过不同的域名<br/> 3、通过不同的端口号</p>\n<p>三种都需要把虚拟主机功能打开：</p>\n<p>方法一：</p>\n<p>通过不同的IP地址，解析不同域名，给服务器增加IP（另一个域名解析出来的那个IP）。</p>\n<pre><code>[root@localhost ~]##ifconfig eth0:1 192.168.0.56 netmask 255.255.255.0\n[root@localhost ~]## mkdir  /var/www/html/bbs/\n[root@localhost ~]# echo \"bbs.xuegod.cn\"&gt; /var/www/html/bbs/index.html\n[root@localhost conf.d]# pwd\n/etc/httpd/conf.d</code></pre>\n<p>创建虚拟主机的配置文件：</p>\n<pre><code>[root@localhost conf.d]# vim bbs.conf\n&lt;VirtualHost 192.168.0.63:80&gt;\n    ServerAdmin webmaster@dummy-host.example.com\n    DocumentRoot /var/www/html/\n    ServerName dummy-host.example.com\n    ErrorLog logs/dummy-host.example.com-error_log\n    CustomLog logs/dummy-host.example.com-access_log common\n&lt;/VirtualHost&gt;\n&lt;VirtualHost 192.168.0.56:80&gt;\n    ServerAdmin webmaster@dummy-host.example.com\n    DocumentRoot /var/www/html/bbs/\n    ServerName dummy-host.example.com\n    ErrorLog logs/dummy-host.example.com-error_log\n    CustomLog logs/dummy-host.example.com-access_log common\n&lt;/VirtualHost&gt;</code></pre>\n<p>测试：</p>\n<pre><code>[root@localhost conf]# service httpd restart\nhttp://192.168.0.56/\nhttp://192.168.0.63/</code></pre>\n<p>方法二：</p>\n<p>通过不同域名，在域名管理后台，修改DNS配置，www.xuegod.com与bbs.xuegod.com解析成相同的IP。</p>\n<pre><code>&lt;VirtualHost *:80&gt;\n    ServerAdmin webmaster@dummy-host.example.com\n    DocumentRoot /var/www/html/\n    ServerName www.xuegod.com\n    ErrorLog logs/www.xuegod.com-error_log\n    CustomLog logs/www.xuegod.com-access_log common\n&lt;/VirtualHost&gt;\n&lt;VirtualHost *:80&gt;\n    ServerAdmin webmaster@dummy-host.example.com\n    DocumentRoot /var/www/html/bbs/\nServerName bbs.xuegod.com\nErrorLog logs/bbs.xuegod.com-error_log\n    CustomLog logs/bbs.xuegod.com-access_log common\n&lt;/VirtualHost&gt;\n\n[root@localhost ~]# vim /etc/hosts\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.0.63   xuegod63.cn\n192.168.0.63   www.xuegod.com\n192.168.0.63   bbs.xuegod.com\n192.168.1.64   xuegod64.cn</code></pre>\n<p>测试：</p>\n<pre><code>[root@localhost conf]# service  httpd  restart\n[root@localhost ~]# elinks www.xuegod.com\n[root@localhost ~]# elinks bbs.xuegod.com</code></pre>\n<p>方法三：</p>\n<p>基于端口配置虚拟主机。</p>\n<pre><code>[root@localhost conf]# vim /etc/httpd/conf.d/bbs.conf \n改： \nListen   80  \n为：\nListen   80  \nListen   81  \n# 更改为你要添加的多个端口</code></pre>\n<h2>五、LNMP源码编译</h2>\n<h3>1、LNMP架构</h3>\n<p>LNMP=Linux Nginx Mysql PHP</p>\n<p>Nginx (\"engine x\") 是一个高性能的 HTTP 和 反向代理 服务器。Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。</p>\n<p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度BWS、新浪、网易、腾讯等</p>\n<p>Nginx官网：<a href=\"http://nginx.org/\" title=\"nginx news\">nginx news</a></p>\n<p>Nginx旧版本：<a href=\"http://mirrors.sohu.com/nginx/\" title=\"Index of /nginx/\">Index of /nginx/</a> </p>\n<p><strong>了解Tengine：</strong></p>\n<p>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。（可以这样理解：淘宝拿到了Nginx源代码之后，进行了功能的填充，优化等等，然后提交给Nginx官方，但是由于Nginx官方相应慢或者不响应，加上语言沟通的不顺畅，于是淘宝公司就自己打包，在遵循GPL的原则上进行二次开发，于是就出了现在的Tengine这个版本）。</p>\n<p>Tengine官网：<a href=\"http://tengine.taobao.org/\" title=\"The Tengine Web Server\">The Tengine Web Server</a></p>\n<h3>2、Nginx的工作原理</h3>\n<p>Nginx 本身只支持静态页面的处理，当客户端访问php页面的时候，nginx会将php转到php-fpm也处理，php-fpm服务会把php页面解析成html文件给nginx处理，nginx返回给客户端处理这里需要结合Apache的工作，对PHP文件处理过程的区别：</p>\n<p>1：Nginx是通过php-fpm这个服务来处理php文件；</p>\n<p>2：Apache是通过libphp5.so这个模块来处理php文件；</p>\n<p>Apache：</p>\n<p><img alt=\"\" height=\"210\" src=\"image\\d6df5af5edec4c33903b8fdd1bfba346.png\" width=\"767\"/></p>\n<p>Nginx： </p>\n<p><img alt=\"\" height=\"272\" src=\"image\\4c36c63046ec472f94cbe6d6844b27bc.png\" width=\"989\"/></p>\n<p>Apache的libphp5.so随着apache服务器一起运行，而Nginx和php-fpm是各自独立运行，所以在服务的运行过程中，Nginx和php-fpm都需要分别启动！</p>\n<p>修改Nginx配置文件，启动nginx服务，修改php配置文件，启动php-fpm服务。</p>\n<h3>3、LNMP软件所需要的软件包</h3>\n<p>MySQL=http://dev.mysql.com/downloads/mysql/      #mysql主程序包</p>\n<p>PHP=http://php.net/downloads.php                          #php主程序包</p>\n<p>Nginx=http://nginx.org/en/download.html                 #Nginx主程序包</p>\n<p>libmcrypt=http://mcrypt.hellug.gr/index.html             #libmcrypt加密算法扩展库，支持3DES等加密</p>\n<p>或者：http://mcrypt.sourceforge.net/     #MCrypt/Libmcrypt development site (secure access)</p>\n<p>pcre=http://pcre.org/                              #pcre是php的依赖包</p>\n<p>软件版本：</p>\n<p>libmcrypt-2.5.8</p>\n<p>mysql-5.6.26</p>\n<p>nginx-1.8.0</p>\n<p>pcre-8.37</p>\n<p>php-5.6.13</p>\n<h3>4、编译安装Nginx</h3>\n<p>如果我们在安装了开发工具之后，那么像gcc，gcc-c++，autoconf，automake 这些工具都会默认安装，如果没有安装开发工具（如最小安装的系统），那么这些东西我们必须手动安装。</p>\n<p><strong>解决依赖</strong></p>\n<p>建议在编译之前，把开发包组\"Development Tools\"和 \"Development Libraries\"安装：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# yum groupinstall \"Development Tools\" \"Development Libraries\" -y\n[root@localhost ~]# yum install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre* pcre-devel  -y</code></pre>\n<p>说明：</p>\n<p>Zlib：Nginx提供gzip模块，需要zlib的支持<br/> Openssl：Nginx提供SSL的功能</p>\n<pre><code class=\"hljs\">root@localhost ~]# tar xf pcre-8.37.tar.bz2 -C /usr/local/src/  //解压此安装包即可，不需要安装，Nginx需要指定pcre的源码不是安装后的路径，此包的功能是支持地址重写rewrite功能  pcre的依赖可以yum安装pcre和pcre-devel解决！</code></pre>\n<p>解压编译安装：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# tar xvf nginx-1.8.0.tar.gz -C /usr/local/src/ ; cd /usr/local/src/nginx-1.8.0\n[root@localhost nginx-1.8.0]# ./configure --prefix=/usr/local/nginx --with-http_dav_module --with-http_stub_status_module --with-http_addition_module --with-http_sub_module --with-http_flv_module --with-http_mp4_module --with-pcre=/usr/local/src/pcre-8.37\n*****************************************************************************************************************\n--with-http_dav_module  #启用支持（增加PUT,DELETE,MKCOL：创建集合，COPY和MOVE方法）默认关闭，需要编译开启\n--with-http_stub_status_module #启用支持（获取Nginx上次启动以来的工作状态）\n--with-http_addition_module #启用支持（作为一个输出过滤器，支持不完全缓冲，分部分相应请求）\n--with-http_sub_module        #启用支持（允许一些其他文本替换Nginx相应中的一些文本）\n--with-http_flv_module        #启用支持（提供支持flv视频文件支持）\n--with-http_mp4_module        #启用支持（提供支持mp4视频文件支持，提供伪流媒体服务端支持）\n--with-pcre=/usr/local/src/pcre-8.37   #需要注意，这里指的是源码,用#./configure --help |grep pcre查看帮助\n[root@localhost nginx-1.8.0]# make –j 3 ; make install ; cd\n[root@localhost ~]# useradd -M -u 8001 -s /sbin/nologin nginx   //用于运行Nginx的用户</code></pre>\n<p>Nginx目录结构：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# ll /usr/local/nginx/\ndrwxr-xr-x 2 root root 4096 Sep 1513:44 conf           #Nginx相关配置文件\ndrwxr-xr-x 2 root root 4096 Sep 1513:44 html           #网站根目录\ndrwxr-xr-x 2 root root 4096 Sep 1513:44 logs           #日志文件\ndrwxr-xr-x 2 root root 4096 Sep 1513:44 sbin           #Nginx启动脚本</code></pre>\n<p>配置Nginx支持php文件：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# vim /usr/local/nginx/conf/nginx.conf    //Nginx主文件\n#user  nobody;                 \nuser nginx nginx;                   #添加此行\n……\n并在所支持的主页面格式中添加php格式的主页，类似如下：\nlocation / {\n            root   html;\n            index  index.php index.html index.htm;\n        }\n\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}                      #找到上面这段内容，将这段内容复制，去掉#且修改为如下\nlocation ~ \\.php$ {\n    root           html;\n    fastcgi_pass   127.0.0.1:9000;\n    fastcgi_index  index.php;\n    fastcgi_param  SCRIPT_FILENAME  /usr/local/nginx/html$fastcgi_script_name; #将scripts修改为nginx的html，即Nginx页面目录，因为要处理的php文件也在这个目录下\n    include        fastcgi_params;\n}</code></pre>\n<p>启动Nginx：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# /usr/local/nginx/sbin/nginx\n[root@localhost ~]# netstat -tlnp | grep nginx\ntcp        0      00.0.0.0:80                  0.0.0.0:*                   LISTEN      7083/nginx         </code></pre>\n<p>使用浏览器测试 http://192.168.1.63</p>\n<p><img alt=\"\" height=\"506\" src=\"image\\6cf213ccf7344b91b9ccc72e40d359b5.png\" width=\"1124\"/></p>\n<p>Nginx维护命令：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# /usr/local/nginx/sbin/nginx -t    //检查配置文件语法是否有错误\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n[root@localhost ~]# /usr/local/nginx/sbin/nginx -s reload //重新加载配置文而建（平滑重启）\n[root@localhost ~]# /usr/local/nginx/sbin/nginx -s stop  //停止Nginx，注意：启动没有任何参数\n[root@localhost ~]# echo \"/usr/local/nginx/sbin/nginx &amp;\" &gt;&gt; /etc/rc.local  //开机启动\n平滑重启（保持了C-S链接，不断开，服务器只是重新加载了配置文件，没有开启和关闭的服务器的一个动作）</code></pre>\n<h3>5、编译安装Mysql</h3>\n<p>安装之前使用 yum remove mysql  确保没有安装MySQL。</p>\n<p>解决依赖：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# yum install -y cmake ncurses-devel //gcc等相关在编译apache已安装</code></pre>\n<p>编译安装MySQL：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# tar xf mysql-5.6.26.tar.gz -C /usr/local/src/ ; cd /usr/local/src/mysql-5.6.26\n[root@localhost mysql-5.6.26]# useradd -M -s /sbin/nologin mysql  //创建mysql运行用户\n[root@localhost mysql-5.6.26]# cmake \\\n -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\n -DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\n -DDEFAULT_CHARSET=utf8 \\\n -DDEFAULT_COLLATION=utf8_general_ci \\\n -DWITH_EXTRA_CHARSETS=all \\\n -DWITH_MYISAM_STORAGE_ENGINE=1\\\n -DWITH_INNOBASE_STORAGE_ENGINE=1\\\n -DWITH_MEMORY_STORAGE_ENGINE=1\\\n -DWITH_READLINE=1\\\n -DENABLED_LOCAL_INFILE=1\\\n -DMYSQL_DATADIR=/usr/local/mysql/data \\\n -DMYSQL-USER=mysql\n*****************************************************************************************************************\nDCMAKE_INSTALL_PREFIX  #制定mysql的安装根目录，目录在安装的时候会自动创建，这个值也可以在服务器启动时，用--basedir来设置\nDMYSQL_UNIX_ADDR       #服务器与本地客户端进行通信的Unix套接字文件，必须是绝对路径，默认位置/tmp/mysql.sock，可以在服务器启动时，用--socket改变\nDDEFAULT_CHARSET        #mysql默认使用的字符集，不指定将默认使用Latin1西欧字符集\nDDEFAULT_COLLATION      #默认字符校对\nDWITH_EXTRA_CHARSETS    #制定mysql拓展字符集，默认值也是all支持所有的字符集\nDWITH_MYISAM_STORAGE_ENGINE #静态编译MYISAM，INNOBASE，MEMORY存储引擎到MYSQL服务器，这样MYSQL就支持这三种存储引擎\nDWITH_INNOBASE_STORAGE_ENGINE\nDWITH_MEMORY_STORAGE_ENGINE\nDWITH_READLINE             #支持readline库\nDENABLED_LOCAL_INFILE      #允许本地倒入数据，启用加载本地数据\nDMYSQL_DATADIR             #mysql数据库存放路径\nDMYSQL-USER                #运行mysql的用户</code></pre>\n<p>这些编译参数的帮助寻找方法：</p>\n<p><a href=\"https://www.mysql.com/\" title=\"MySQL\">MySQL</a>→→Documentation→→选择对应的版本（5.6）→→HTML Online→→View→→Installation &amp; Upgrades→→Installing MySQL from Source →→MySQL Source-Configuration Options→→<br/><a href=\"https://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html\" title=\"MySQL :: MySQL 5.6 Reference Manual :: 2.9.7 MySQL Source-Configuration Options\">MySQL :: MySQL 5.6 Reference Manual :: 2.9.7 MySQL Source-Configuration Options</a> //最终的URL</p>\n<pre><code class=\"hljs\">[root@localhost mysql-5.6.26]# ccmake /usr/local/src/mysql-5.6.26/ //除开在线，可以使用本地帮助\n[root@localhost mysql-5.6.26]# make -j 2 ; make install //以2个进程来编译，不要超过CPU核心数上面的make过程比较漫长，我们使用了-j 2来增加编译速度</code></pre>\n<p>配置mysql：</p>\n<pre><code class=\"hljs\">[root@localhost mysql-5.6.26]# cd &amp;&amp; chown -R mysql:mysql /usr/local/mysql/                //属主属组更改\n[root@localhost ~]# cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf  //覆盖原配置文件\n[root@localhost ~]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld //启动脚本\n[root@localhost ~]# vim /etc/init.d/ mysqld  //更改启动脚本中指定mysql位置\nbasedir=\ndatadir=\n#修改为\nbasedir=/usr/local/mysql\ndatadir=/usr/local/mysql/data\n[root@localhost ~]# chkconfig mysqld  on     //开机启动</code></pre>\n<p>初始化数据库：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# /usr/local/mysql/scripts/mysql_install_db \\\n--defaults-file=/etc/my.cnf  \\\n--basedir=/usr/local/mysql/\\\n--datadir=/usr/local/mysql/data/\\\n--user=mysql\n#类似于在rpm安装的时候启动数据库弹出的初始化消息\n[root@localhost ~]# ls /usr/local/mysql/data/  //初始化看这个下面有无mysql和test等数据库\nibdata1  ib_logfile0  ib_logfile1  mysql  performance_schema  test\n[root@localhost ~]# ln -s /usr/local/mysql/bin/* /bin/ //这个里面是部分命令让系统直接调用\n[root@localhost ~]# servie mysqld  start                //启动数据库\n[root@localhost ~]# mysql_secure_installation           //初始安全设置（设置root密码，123456）[记住，编译安装之前，记得除去mysql mysql-devel mysql-libs三个软件]\n[root@localhost ~]# mysql -uroot -p123456               //测试登录（OK）</code></pre>\n<p>mysql脚本安装：</p>\n<pre><code class=\"hljs\">#!/bin/bash\nyum remove  -y mysql mysql-server\nclear\necho 'This shell will Auto Install Mysql5.6'\nyum install -y cmake ncurses-devel\ntar -xf mysql-5.6.26.tar.gz  -C  /usr/local/src &amp;&amp; cd /usr/local/src/mysql-5.6.26\nuseradd -M -s /sbin/nologin mysql\nmkdir /usr/local/mysql\ncmake \\\n -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\n -DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\n -DDEFAULT_CHARSET=utf8 \\\n -DDEFAULT_COLLATION=utf8_general_ci \\\n -DWITH_EXTRA_CHARSETS=all \\\n -DWITH_MYISAM_STORAGE_ENGINE=1\\\n -DWITH_INNOBASE_STORAGE_ENGINE=1\\\n -DWITH_MEMORY_STORAGE_ENGINE=1\\\n -DWITH_READLINE=1\\\n -DENABLED_LOCAL_INFILE=1\\\n -DMYSQL_DATADIR=/usr/local/mysql/data \\\n -DMYSQL-USER=mysql\nmake -j 3 &amp;&amp; make  install\nchown -R mysql:mysql  /usr/local/mysql\n/usr/local/mysql/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\nmv /etc/my.cnf  /etc/my.cnf.bak\ncp -r /usr/local/mysql/support-file/my-default.cnf  /etc/my.cnf\nsed -i '/^\\[mysqld\\]/adatadir = /usr/local/mysql/data' /etc/my.cnf\nsed -i '/^\\[mysqld\\]/abasedir = /usr/local/mysql' /etc/my.cnf\ncp -r /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld\nchmod  +x /etc/init.d/mysqld\necho \"PATH=/usr/local/mysql/bin:$PATH\" &gt;&gt;/etc/profile\nservice mysqld restart\necho\necho \"install success\"\nsource /etc/profile\necho \"source /etc/profile\" &gt;&gt;/etc/rc.local\nservice mysqld restart\necho \"If you now running mysql and others commands,Please running: source /etc/profile\"</code></pre>\n<p>脚本执行完，记得mysql_secure_installation  初始化数据库。</p>\n<h3>6、编译安装PHP</h3>\n<p>在Nginx中，我们使用的是php-fpm来对php页面解析，PHP-FPM其实是PHP源代码的一个补丁，指在将FastCGI进程管理整合进PHP包中。必须将它patch到你的PHP源代码中，再编译安装PHP后才可以使用<br/> 从PHP5.3.3开始，PHP中直接整合了PHP-FPM，所以从PHP5.3.3版本以后，不需要下载PHP-FPM补丁包了，下面是PHP-FPM官方发出来的通知：<a href=\"https://php-fpm.org/download/\" title=\"Download - PHP-FPM\">Download - PHP-FPM</a></p>\n<p><img alt=\"\" height=\"128\" src=\"image\\b9a8a9167c98486ea23d5f0faa40f7bd.png\" width=\"625\"/></p>\n<p>解决依赖：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# yum install php-pear -y                     \n//pear按照一定的分类来管理pear应用代码库，你的pear代码可以组织到其中适当的目录中，其他人可以方便的检索并分享到你的成果；pear不仅仅是一个代码仓库，它同时也是一个标准，使用这个标准来书写你的php代码，将会增强你的程序的可读性，复用性，减少出错的几率；Pear通过两个类为你搭建了一个框架，实现了诸如析构函数，错误捕获功能，你通过继承就可以使用这些功能</code></pre>\n<p>PHP添加libmcrypt拓展：</p>\n<p>libmcrypt加密算法扩展库，支持DES, 3DES, RIJNDAEL, Twofish, IDEA, GOST, CAST-256, ARCFOUR, SERPENT, SAFER+等算法。</p>\n<p>官方网站：<a href=\"http://mcrypt.hellug.gr/index.html\" title=\"Mcrypt\">Mcrypt</a>  或者 <a href=\"http://mcrypt.sourceforge.net/\" title=\"MCrypt\">MCrypt</a></p>\n<p>在页面上点击下图连接，可以下载最新的2.5.8版本（页面上有个Browse All Files→→Libmcrypt）</p>\n<p><img alt=\"\" height=\"351\" src=\"image\\cad08a81542e42a3a4e8280097bd6c22.png\" width=\"943\"/></p>\n<p><span style=\"background-color:#ffffff;\"><span style=\"color:#000000;\">安装加密算法扩展库：</span></span> </p>\n<pre><code class=\"hljs\">[root@localhost ~]# tar xf libmcrypt-2.5.8.tar.bz2 -C /usr/local/src/ ; cd /usr/local/src/libmcrypt-2.5.8/\n[root@localhost libmcrypt-2.5.8]# ./configure --prefix=/usr/local/libmcrypt ; make ; make install ; cd</code></pre>\n<p>除开上面的依赖解决之外，还需要安装图片，xml，字体支持基本库，使用yum去安装，安装的时候，这些软件包自身也有依赖：</p>\n<pre><code class=\"hljs\">[root@localhost  ~]# yum install -y libxml2-devel libcurl-devel libjpeg-devel libpng-devel freetype freetype-devel libzip libzip-devel</code></pre>\n<p>需要添加到库文件路径：</p>\n<p>由于系统默认规定只在/lib、/lib64、/lib/lib64下面找库文件，所以我们需要手动添加进去。</p>\n<pre><code class=\"hljs\">[root@localhost ~]# vim /etc/ld.so.conf\ninclude ld.so.conf.d/*.conf                    #此行原有\n/usr/local/libmcrypt/lib                       #此行添加\n/usr/local/mysql/lib                           #此行添加\n[root@localhost ~]# ldconfig\n[root@localhost ~]# echo 'ldconfig' &gt;&gt; /etc/rc.local</code></pre>\n<p>编译安装php：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# tar xf php-5.6.13.tar.bz2 -C /usr/local/src/ ; cd /usr/local/src/php-5.6.13      \n[root@localhost php-5.6.13]# ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex  --enable-fpm --enable-mbstring --with-gd --enable-mysqlnd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --with-gettext --with-mcrypt=/usr/local/libmcrypt   \n*****************************************************************************************************************\n--with-config-file-path                         #设置 php.ini 的搜索路径。默认为 PREFIX/lib\n--with-mysql                        #mysql安装目录，对mysql的支持\n--with-mysqli                         #mysqli扩展技术不仅可以调用MySQL的存储过程、处理MySQL事务，而且还可以使访问数据库工作变得更加稳定。是一个数据库驱动\n--with-iconv-dir                      #种字符集间的转换\n--with-freetype-dir                  #打开对freetype字体库的支持\n--with-jpeg-dir                      #打开对jpeg图片的支持\n--with-png-dir                          #打开对png图片的支持\n--with-zlib                        #打开zlib库的支持,实现GZIP压缩输出     \n--with-libxml-dir=/usr                     #打开libxml2库的支持,libxml是一个用来解析XML文档的函数库\n--enable-xml                        #支持xml文档\n--disable-rpath                         #关闭额外的运行库文件\n--enable-bcmath                      #打开图片大小调整,用到zabbix监控的时候用到了这个模块\n--enable-shmop                       #shmop共享内存操作函数，可以与c/c++通讯\n--enable-sysvsem  #加上上面shmop，这样就使得你的PHP系统可以处理相关的IPC函数（活动在内核级别）。\n--enable-inline-optimization       #优化线程\n--with-curl                            #打开curl浏览工具的支持 \n--with-curlwrappers                    #运用curl工具打开url流 ，新版PHP5.6已弃用\n--enable-mbregex                    #支持多字节正则表达式\n--enable-fpm                       #CGI方式安装的启动程序，PHP-FPM服务\n--enable-mbstring                     #多字节，字符串的支持\n--with-gd                             #打开gd库的支持，是php处理图形的扩展库，GD库提供了一系列用来处理图片的API，使用GD库可以处理图片，或者生成图片。\n--enable-gd-native-ttf                    #支持TrueType字符串函数库\n--with-openssl                          #打开ssl支持\n--with-mhash                       #支持mhash算法扩展\n--enable-pcntl                          #freeTDS需要用到的，pcntl扩展可以支持php的多线程操作\n--enable-sockets                       #打开 sockets 支持\n--with-xmlrpc                       #打开xml-rpc的c语言\n--enable-zip                         #打开对zip的支持\n--enable-soap                          #扩展库通过soap协议实现了客服端与服务器端的数据交互操作\n--with-mcrypt                       #mcrypt算法扩展\n--with-zlib-dir=/usr/local/libzip   ##指定zip库路径\n[root@localhost php-5.6.13]# make -j 3 &amp;&amp; make install ; cd</code></pre>\n<p>如果上面在make的时候 提示libzip相关的报错，可以安装下面的方法来解决：</p>\n<p>先执行 make clean，然后安装压缩支持库。</p>\n<pre><code class=\"hljs\">[root@localhost ~]# tar xf libzip-1.1.2.tar.gz -C /usr/local/src/\n[root@localhost src]# cd /usr/local/src/libzip-1.1.2/\n[root@localhost libzip-1.1.2]# ./configure --prefix=/usr/local/libzip &amp;&amp; make &amp;&amp; make install\n在重新编译：./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex  --enable-fpm --enable-mbstring --with-gd --enable-mysqlnd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --with-gettext --with-mcrypt=/usr/local/libmcrypt   --with-pcre-dir=/usr/local/src/pcre-8.37/ --with-zlib-dir=/usr/local/libzip</code></pre>\n<h3>7、配置php和php-fpm</h3>\n<p style=\"margin-left:.0001pt;text-align:left;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#000000;\">PHP配置文件：</span></span></p>\n<pre><code class=\"hljs\">[root@localhost ~]# cp /usr/local/src/php-5.6.13/php.ini-production /usr/local/php/php.ini</code></pre>\n<p>PHP-FPM配置文件：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\n修改 /usr/local/php/etc/php-fpm.conf 运行用户和组改为nginx</code></pre>\n<p style=\"margin-left:.0001pt;text-align:left;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#000000;\">PHP-FPM启动脚本：</span></span></p>\n<pre><code class=\"hljs\">[root@localhost ~]# cp /usr/local/src/php-5.6.13/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\n[root@localhost ~]# chmod +x /etc/init.d/php-fpm\n[root@localhost ~]# chkconfig php-fpm on\n[root@localhost ~]# /etc/init.d/php-fpm start</code></pre>\n<p>测试LNMP的PHP支持：</p>\n<pre><code class=\"hljs\">[root@localhost ~]# echo \"&lt;?php phpinfo(); ?&gt;\" &gt; /usr/local/nginx/html/index.php</code></pre>\n<p>浏览器访问：http://192.168.1.63</p>\n<p><img alt=\"\" height=\"211\" src=\"image\\d83a2457408342ebac6f0d1485373730.png\" width=\"989\"/></p>\n</div>\n</div>"}