{"blogid": "125677295", "writerAge": "码龄15年", "writerBlogNum": "275", "writerCollect": "2727", "writerComment": "293", "writerFan": "2312", "writerGrade": "6级", "writerIntegral": "7525", "writerName": "CodingPioneer", "writerProfileAdress": "writer_image\\profile_125677295.jpg", "writerRankTotal": "3403", "writerRankWeekly": "3840", "writerThumb": "598", "writerVisitNum": "665469", "blog_read_count": "792", "blog_time": "已于 2022-07-08 17:08:31 修改", "blog_title": "C# net6微服务架构之服务注册与发现工具Consul的下载与安装（for windows）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C# net6微服务架构之服务注册与发现工具Consul的下载与安装（for windows）</h3>\n<ul><li><a href=\"#0_1\">0、背景</a></li><li><a href=\"#1Consul_3\">1、Consul简介</a></li><li><a href=\"#2Consul_5\">2、Consul的主要功能</a></li><li><a href=\"#3Consul_11\">3、Consul下载与安装</a></li><li><a href=\"#4Consul_19\">4、Consul使用</a></li><li><ul><li><a href=\"#41_Consul_20\">4.1 Consul中用到的概念和参数</a></li><li><a href=\"#42_consulexe_167\">4.2 以开发者模式启动consul.exe</a></li><li><a href=\"#43_consulexe_178\">4.3 consul.exe启用远程访问控制台</a></li><li><a href=\"#44_Consul_188\">4.4 用于生产的集群模式的Consul高可用架构</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"0_1\"></a>0、背景</h1>\n<p>之前一直在学习和使用基于Spring Cloud的微服务架构，但项目团队成员有部分还在使用C#技术体系，因此就动了想使用C#搭建一个微服务架构案例的念头，C#开发微服务一般使用net core或最新的net6。那么首先就是对之前Spring Cloud中用到的中间件和微服务支撑和治理的相关工具在C#中肯定也是要用到的，经过简单的分析查阅发现有些是通用的（比如redis、数据库），有些不是（比如Nacos、Eureka）。本文就以服务注册与发现为例来介绍一下，在C#中服务注册与发现的中间件工具Consul。</p>\n<h1><a id=\"1Consul_3\"></a>1、Consul简介</h1>\n<p>Consul 是一套开源的分布式服务发现和配置管理系统，由 HashiCorp 公司用 Go 语言开发。提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。它具有很多优点。包括： 基于 raft 协议，比较简洁； 支持健康检查, 同时支持 HTTP 和 DNS 协议 支持跨数据中心的 WAN 集群 提供图形界面 跨平台，支持 Linux、Mac、Windows。</p>\n<h1><a id=\"2Consul_5\"></a>2、Consul的主要功能</h1>\n<ol><li>服务发现（提供HTTP和DNS两种发现方式。）</li><li>健康监测（支持多种方式，HTTP、TCP、Docker、Shell脚本定制化监控）</li><li>KV存储（Key、Value的存储方式）</li><li>多数据中心支持（Consul支持多数据中心）</li><li>具有可视化Web控制台界面，方便服务监控管理</li></ol>\n<h1><a id=\"3Consul_11\"></a>3、Consul下载与安装</h1>\n<p>官网下载地址：<a href=\"https://www.consul.io/downloads\">https://www.consul.io/downloads</a><br/> 1、在浏览器中输入官网下载地址，打开Consul官网，如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1b5fa6c763a44865947bceb3ead23208.png\"/><br/> 2、因为我的电脑是Windows的，因此下载的是Amd64的，下载后是一个压缩包，如下图<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5911a8d379eb4e74bb2700def26527d8.png\"/><br/> 3、把压缩包consul_1.12.2_windows_amd64.zip解压到指定位置（具体根据你自己的需要），这里我解压到d:\\consul目录下，如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\61c86aea06d74cb493c7dd5401d4c00f.png\"/></p>\n<h1><a id=\"4Consul_19\"></a>4、Consul使用</h1>\n<h2><a id=\"41_Consul_20\"></a>4.1 Consul中用到的概念和参数</h2>\n<p>1、在使用Consul之前，先了解一些Consul涉及到的一些概念</p>\n<blockquote>\n<p><strong>agent</strong>： 组成 consul 集群的每个成员上都要运行一个 agent，可以通过 consul agent 命令来启动。agent 可以运行在 server 状态或者 client 状态。自然的，运行在 server 状态的节点被称为 server 节点；运行在 client 状态的节点被称为 client 节点。<br/> <strong>Client</strong>： Consul 的 Client模式，就是客户端模式。是 Consul 节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到 Server，本身是不持久化这些信息。<br/> <strong>Server</strong>：Consul 的 Server 模式，表明这个 Consul 是个 Server ，这种模式下，功能和 Client 都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。<br/> <strong>Server-Leader</strong>：Server 是它们的老大，它和其它 Server 不一样的一点是，它需要负责同步注册的信息给其它的 Server ，同时也要负责各个节点的健康监测。<br/> <strong>raft</strong>：Server 节点之间的数据一致性保证协议使用的是 raft，而 zookeeper 用的 paxos，etcd采用的也是raft<br/> <strong>服务发现协议</strong>：Consul 采用 http 和 DNS 协议，etcd 只支持 http 。<br/> <strong>服务注册</strong>：Consul 支持两种方式实现服务注册，一种是通过 Consul 的服务注册 Http API，由服务自己调用 API 实现注册，另一种方式是通过 json 格式的配置文件实现注册，将需要注册的服务以 json 格式的配置文件给出。Consul 官方建议使用第二种方式。</p>\n</blockquote>\n<p>2、再了解一下consul.exe命令的一些参数</p>\n<pre><code class=\"prism language-cmd\">  -advertise value\n        Sets the advertise address to use.\n  -advertise-wan value\n        Sets address to advertise on WAN instead of -advertise address.\n  -allow-write-http-from value\n        Only allow write endpoint calls from given network. CIDR format, can be specified multiple times.\n  -alt-domain value\n        Alternate domain to use for DNS interface.\n  -auto-reload-config\n        Watches config files for changes and auto reloads the files when modified.\n  -bind value\n        Sets the bind address for cluster communication.\n  -bootstrap\n        Sets server to bootstrap mode.\n  -bootstrap-expect value\n        Sets server to expect bootstrap mode.\n  -check_output_max_size value\n        Sets the maximum output size for checks on this agent\n  -client value\n        Sets the address to bind for client access. This includes RPC, DNS, HTTP, HTTPS and gRPC (if configured).\n  -config-dir value\n        Path to a directory to read configuration files from. This will read every file ending in '.json' as configuration in this directory in alphabetical order. Can be specified multiple times.\n  -config-file value\n        Path to a file in JSON or HCL format with a matching file extension. Can be specified multiple times.\n  -config-format string\n        Config files are in this format irrespective of their extension. Must be 'hcl' or 'json'\n  -data-dir value\n        Path to a data directory to store agent state.\n  -datacenter value\n        Datacenter of the agent.\n  -default-query-time value\n        the amount of time a blocking query will wait before Consul will force a response. This value can be overridden by the 'wait' query parameter.\n  -dev\n        Starts the agent in development mode.\n  -disable-host-node-id\n        Setting this to true will prevent Consul from using information from the host to generate a node ID, and will cause Consul to generate a random node ID instead.\n  -disable-keyring-file\n        Disables the backing up of the keyring to a file.\n  -dns-port value\n        DNS port to use.\n  -domain value\n        Domain to use for DNS interface.\n  -enable-local-script-checks\n        Enables health check scripts from configuration file.\n  -enable-script-checks\n        Enables health check scripts.\n  -encrypt value\n        Provides the gossip encryption key.\n  -grpc-port value\n        Sets the gRPC API port to listen on (currently needed for Envoy xDS only).\n  -hcl value\n        hcl config fragment. Can be specified multiple times.\n  -http-port value\n        Sets the HTTP API port to listen on.\n  -https-port value\n        Sets the HTTPS API port to listen on.\n  -join value\n        Address of an agent to join at start time. Can be specified multiple times.\n  -join-wan value\n        Address of an agent to join -wan at start time. Can be specified multiple times.\n  -log-file value\n        Path to the file the logs get written to\n  -log-json\n        Output logs in JSON format.\n  -log-level value\n        Log level of the agent.\n  -log-rotate-bytes value\n        Maximum number of bytes that should be written to a log file\n  -log-rotate-duration value\n        Time after which log rotation needs to be performed\n  -log-rotate-max-files value\n        Maximum number of log file archives to keep\n  -max-query-time value\n        the maximum amount of time a blocking query can wait before Consul will force a response. Consul applies jitter to the wait time. The jittered time will be capped to MaxQueryTime.\n  -node value\n        Name of this node. Must be unique in the cluster.\n  -node-id value\n        A unique ID for this node across space and time. Defaults to a randomly-generated ID that persists in the data-dir.\n  -node-meta key:value\n        An arbitrary metadata key/value pair for this node, of the format key:value. Can be specified multiple times.\n  -non-voting-server\n        (Enterprise-only) DEPRECATED: -read-replica should be used instead\n  -pid-file value\n        Path to file to store agent PID.\n  -primary-gateway value\n        Address of a mesh gateway in the primary datacenter to use to bootstrap WAN federation at start time with retries enabled. Can be specified multiple times.\n  -protocol value\n        Sets the protocol version. Defaults to latest.\n  -raft-protocol value\n        Sets the Raft protocol version. Defaults to latest.\n  -read-replica\n        (Enterprise-only) This flag is used to make the server not participate in the Raft quorum, and have it only receive the data replication stream. This can be used to add read scalability to a cluster in cases where a high volume of reads to servers are needed.\n  -recursor value\n        Address of an upstream DNS server. Can be specified multiple times.\n  -rejoin\n        Ignores a previous leave and attempts to rejoin the cluster.\n  -retry-interval value\n        Time to wait between join attempts.\n  -retry-interval-wan value\n        Time to wait between join -wan attempts.\n  -retry-join value\n        Address of an agent to join at start time with retries enabled. Can be specified multiple times.\n  -retry-join-wan value\n        Address of an agent to join -wan at start time with retries enabled. Can be specified multiple times.\n  -retry-max value\n        Maximum number of join attempts. Defaults to 0, which will retry indefinitely.\n  -retry-max-wan value\n        Maximum number of join -wan attempts. Defaults to 0, which will retry indefinitely.\n  -segment value\n        (Enterprise-only) Sets the network segment to join.\n  -serf-lan-allowed-cidrs value\n        Networks (eg: 192.168.1.0/24) allowed for Serf LAN. Can be specified multiple times.\n  -serf-lan-bind value\n        Address to bind Serf LAN listeners to.\n  -serf-lan-port value\n        Sets the Serf LAN port to listen on.\n  -serf-wan-allowed-cidrs value\n        Networks (eg: 192.168.1.0/24) allowed for Serf WAN (other datacenters). Can be specified multiple times.\n  -serf-wan-bind value\n        Address to bind Serf WAN listeners to.\n  -serf-wan-port value\n        Sets the Serf WAN port to listen on.\n  -server\n        Switches agent to server mode.\n  -server-port value\n        Sets the server port to listen on.\n  -syslog\n        Enables logging to syslog.\n  -ui\n        Enables the built-in static web UI server.\n  -ui-content-path value\n        Sets the external UI path to a string. Defaults to: /ui/\n  -ui-dir value\n        Path to directory containing the web UI resources.\n</code></pre>\n<h2><a id=\"42_consulexe_167\"></a>4.2 以开发者模式启动consul.exe</h2>\n<p>1、以开发模式启动consul.exe，如下：</p>\n<pre><code class=\"prism language-cmd\">consul.exe agent -dev -bind 192.168.0.2 -data-dir=\"D:\\consul\\consuldata\"\n</code></pre>\n<p>执行过程如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2bdd9260abe545709f0fe33c6f907228.png\"/></p>\n<blockquote>\n<p>-bind表示在在多网卡的计算机上用于在consul集群中标识节点的ip地址。</p>\n</blockquote>\n<p>2、在浏览器中输入http://127.0.0.1:8500进入consul控制台，如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\203fccfd57e347a28c7a2ffe41b3e87f.png\"/></p>\n<h2><a id=\"43_consulexe_178\"></a>4.3 consul.exe启用远程访问控制台</h2>\n<p>上面的命令是不能在另一台电脑的浏览器上访问consul控制台的，要想启用远程访问需要用到-client参数。</p>\n<blockquote>\n<p>-client，Sets the address to bind for client access. This includes RPC, DNS, HTTP, HTTPS and gRPC (if configured).</p>\n</blockquote>\n<p>使用如下命令从新启动consul.exe：</p>\n<pre><code class=\"prism language-cmd\">consul.exe agent -dev -server -client 0.0.0.0 -bind 192.168.0.2 -data-dir=\"d:\\consul\\consuldata\"\n</code></pre>\n<p>这是就可以在另一台电脑（要与192.168.0.2在同一网段，或者是能ping通192.168.0.2）通过http://192.168.0.2:8500访问控制台，如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a9a768297a224117baa3b17b648812ff.png\"/></p>\n<h2><a id=\"44_Consul_188\"></a>4.4 用于生产的集群模式的Consul高可用架构</h2>\n<p>以上介绍的事开发者服务模式，具体用于生产环境据需要以集群模式部署（一般部署3~5个节点），架构如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\23bab2f0d7b24efeb3a2598a1dab8c72.png\"/></p>\n<blockquote>\n<p>Server1,Server2,Server3 构成了一个Consul集群，通过Raft选举算法选举出来一个Leader，然后，通过ClientN来取找到这个Leader,不论它们之间谁挂掉，总有一个是Leader的，那么这个ClientN就可以去找到这个Leader，从而实现了高可用。</p>\n</blockquote>\n<p>具体部署环境需要4台服务器</p>\n<table><thead><tr><th>序号</th><th>节点名称</th><th>节点说明</th><th>分配的IP</th></tr></thead><tbody><tr><td>1</td><td>Server1</td><td>Leader</td><td>192.168.0.2</td></tr><tr><td>2</td><td>Server2</td><td>Follower</td><td>192.168.0.3</td></tr><tr><td>3</td><td>Server3</td><td>Follower</td><td>192.168.0.4</td></tr><tr><td>4</td><td>Client1</td><td>Client</td><td>192.168.0.5</td></tr></tbody></table>\n<p>启动命令如下：<br/> Consul Server1</p>\n<pre><code class=\"prism language-cmd\">consul.exe agent -server -bootstrap-expect 3 -data-dir \"d:\\consul\\consuldata\" -node=Server2 -bind=192.168.0.2 -ui -client 0.0.0.0\n</code></pre>\n<p>Consul Server2</p>\n<pre><code class=\"prism language-cmd\">consul.exe agent -server -bootstrap-expect 3 -data-dir \"d:\\consul\\consuldata\" -node=Server2 -bind=192.168.0.3 -ui -client 0.0.0.0 -join=192.168.0.2\n</code></pre>\n<p>Consul Server3</p>\n<pre><code class=\"prism language-cmd\">consul.exe agent -server -bootstrap-expect 3 -data-dir \"d:\\consul\\consuldata\" -node=Server2 -bind=192.168.0.4 -ui -client 0.0.0.0 -join=192.168.0.2\n</code></pre>\n<p>Consul Client1</p>\n<pre><code class=\"prism language-cmd\">consul.exe agent -node=Client1 -bind 0.0.0.0 -client=0.0.0.0 -data-dir=\"d:\\consul\\consuldata\"  -join 192.168.0.2\n</code></pre>\n<p>大部分集群节点都是绑定自身的IP地址，除了第一个服务其他的服务都要 join 这个参数来实现加入集群。然后再浏览器中打开你客户端的IP的端口 8500 默认是这个地址进入管理控制台。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}