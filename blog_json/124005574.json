{"blogid": "124005574", "writerAge": "码龄1年", "writerBlogNum": "126", "writerCollect": "3888", "writerComment": "3714", "writerFan": "16288", "writerGrade": "7级", "writerIntegral": "14538", "writerName": "可口也可樂、", "writerProfileAdress": "writer_image\\profile_124005574.jpg", "writerRankTotal": "701", "writerRankWeekly": "203", "writerThumb": "5359", "writerVisitNum": "97096", "blog_read_count": "966", "blog_time": "已于 2022-05-30 22:16:01 修改", "blog_title": "C++哈希-使用/模拟/封装", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C++哈希-使用/模拟/封装</h3>\n<ul><li><a href=\"#_2\">零、前言</a></li><li><a href=\"#unordered_6\">一、unordered系列关联式容器</a></li><li><ul><li><a href=\"#1unordered_map_16\">1、unordered_map介绍及使用</a></li><li><a href=\"#2unordered_set_108\">2、unordered_set的介绍及使用</a></li><li><a href=\"#3_168\">3、性能比较</a></li></ul>\n</li><li><a href=\"#_245\">二、哈希表/哈希桶</a></li><li><ul><li><a href=\"#1_249\">1、哈希介绍及概念</a></li><li><a href=\"#2_275\">2、哈希冲突及解决</a></li><li><a href=\"#3_315\">3、闭散列/哈希表的实现</a></li><li><a href=\"#4_584\">4、开散列/哈希桶的实现</a></li></ul>\n</li><li><a href=\"#unordered_mapunordered_set_913\">三、哈希封装实现unordered_map/unordered_set</a></li><li><ul><li><a href=\"#1_919\">1、哈希桶的改装</a></li><li><a href=\"#2unordered_map_1384\">2、unordered_map的上层封装</a></li><li><a href=\"#3unordered_set_1471\">3、unordered_set的上层封装</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>零、前言</h1>\n<blockquote>\n<p>本章主要讲解unordered系列关联式容器及其底层结构和模拟实现，还有哈希的相关应用等</p>\n</blockquote>\n<h1><a id=\"unordered_6\"></a>一、unordered系列关联式容器</h1>\n<ul><li>概念：</li></ul>\n<blockquote>\n<ol><li>在C++98中，STL提供了底层为红黑树结构的一系列关联式容器，在查询时效率可达到 ，即最差情况下需要比较红黑树的高度次，当树中的节点非常多时，查询效率也不理想</li><li>最好的查询是，进行很少的比较次数就能够将元素找到，因此在C++11中，STL又提供了4个unordered系列的关联式容器，这四个容器与红黑树结构的关联式容器使用方式基本类似，只是其底层结构不同</li><li>unordered_map/unordered_set与map/set基本上只有底层实现上的区别，前者是哈希，后者是红黑树</li><li>unordered_map/unordered_set与unordered_multimap/unordered_multiset的区别是是否允许键值冗余</li><li>unordered系列关联式容器因为底层不是红黑树了，所以遍历的结果不是排序好的序列</li></ol>\n</blockquote>\n<h2><a id=\"1unordered_map_16\"></a>1、unordered_map介绍及使用</h2>\n<ul><li>概念：</li></ul>\n<blockquote>\n<ol><li>unordered_map是存储&lt;key, value&gt;键值对的关联式容器，其允许通过key值快速的索引到与其对应是value</li><li>在unordered_map中，键值通常用于唯一地标识元素，而映射值是一个对象，其内容与此键关联。键和映射值的类型可能不同</li><li>在内部，unordered_map没有对&lt;key, value&gt;按照任何特定的顺序排序，为了能在常数范围内找到key所对应的value，unordered_map将相同哈希值的键值对放在相同的桶中</li><li>unordered_map容器通过key访问单个元素要比map快，但它通常在遍历元素子集的范围迭代方面效率较低</li><li>unordered_map实现了直接访问操作符（operator[]），它允许使用key作为参数直接访问value</li><li>它的迭代器是单向正向迭代器</li></ol>\n</blockquote>\n<ul><li>接口介绍：</li></ul>\n<ol><li>unordered_map的构造</li></ol>\n<table><thead><tr><th>函数声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>unordered_map</td><td>构造不同格式的unordered_map对象</td></tr></tbody></table>\n<ol start=\"2\"><li>unordered_map的容量</li></ol>\n<table><thead><tr><th>函数声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>bool empty() const</td><td>检测unordered_map是否为空</td></tr><tr><td>size_t size() const</td><td>获取unordered_map的有效元素个数</td></tr></tbody></table>\n<ol start=\"3\"><li>unordered_map的迭代器</li></ol>\n<table><thead><tr><th>函数声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>begin</td><td>返回unordered_map第一个元素的迭代器</td></tr><tr><td>end</td><td>返回unordered_map最后一个元素下一个位置的迭代器</td></tr><tr><td>cbegin</td><td>返回unordered_map第一个元素的const迭代器</td></tr><tr><td>cend</td><td>返回unordered_map最后一个元素下一个位置的const迭代器</td></tr></tbody></table>\n<ol start=\"4\"><li>unordered_map的元素访问</li></ol>\n<table><thead><tr><th>函数声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>operator[]</td><td>返回与key对应的value，没有一个默认值</td></tr></tbody></table>\n<blockquote>\n<p>注意：该函数中实际调用哈希桶的插入操作，用参数key与V()构造一个默认值往底层哈希桶中插入，如果key不在哈希桶中，插入成功，返回V()，插入失败，说明key已经在哈希桶中，将key对应的value返回</p>\n</blockquote>\n<ol start=\"5\"><li>unordered_map的查询</li></ol>\n<table><thead><tr><th>函数声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>iterator find(const K&amp; key)</td><td>返回key在哈希桶中的位置</td></tr><tr><td>size_t count(const K&amp; key)</td><td>返回哈希桶中关键码为key的键值对的个数</td></tr></tbody></table>\n<blockquote>\n<p>注意：unordered_map中key是不能重复的，因此count函数的返回值最大为 1，对于unordered_multimap才是允许键值冗余的</p>\n</blockquote>\n<ol start=\"6\"><li>unordered_map的修改操作</li></ol>\n<table><thead><tr><th>函数声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>insert</td><td>向容器中插入键值对</td></tr><tr><td>erase</td><td>删除容器中的键值对</td></tr><tr><td>void clear()</td><td>清空容器中有效元素个数</td></tr><tr><td>void swap(unordered_map&amp;)</td><td>交换两个容器中的元素</td></tr></tbody></table>\n<ol start=\"7\"><li>unordered_map的桶操作</li></ol>\n<table><thead><tr><th>函数声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>size_t bucket_count()const</td><td>返回哈希桶中桶的总个数</td></tr><tr><td>size_t bucket_size(size_t n)const</td><td>返回n号桶中有效元素的总个数</td></tr><tr><td>size_t bucket(const K&amp; key)</td><td>返回元素key所在的桶号</td></tr></tbody></table>\n<ul><li>使用示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_unordered_map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tunordered_map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> dict<span class=\"token punctuation\">;</span>\n\tdict<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdict<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-&gt;</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-&gt;</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>结果：</li></ul>\n<img alt=\"image-20220314194301710\" src=\"image\\202203141943789.png\"/>\n<h2><a id=\"2unordered_set_108\"></a>2、unordered_set的介绍及使用</h2>\n<ul><li>概念：</li></ul>\n<blockquote>\n<ol><li>unordered_set是不按特定顺序存储键值的关联式容器，其允许通过键值快速的索引到对应的元素</li><li>在unordered_set中，元素的值同时也是唯一地标识它的key</li><li>在内部，unordered_set中的元素没有按照任何特定的顺序排序，为了能在常数范围内找到指定的key，unordered_set将相同哈希值的键值放在相同的桶中</li><li>unordered_set容器通过key访问单个元素要比set快，但它通常在遍历元素子集的范围迭代方面效率较低</li><li>它的迭代器是单向前向迭代器</li></ol>\n</blockquote>\n<ul><li>接口介绍：</li></ul>\n<ol><li>unordered_set当中常用的成员函数</li></ol>\n<table><thead><tr><th>成员函数</th><th>功能</th></tr></thead><tbody><tr><td>insert</td><td>插入指定元素</td></tr><tr><td>erase</td><td>删除指定元素</td></tr><tr><td>find</td><td>查找指定元素</td></tr><tr><td>size</td><td>获取容器中元素的个数</td></tr><tr><td>empty</td><td>判断容器是否为空</td></tr><tr><td>clear</td><td>清空容器</td></tr><tr><td>swap</td><td>交换两个容器中的数据</td></tr><tr><td>count</td><td>获取容器中指定元素值的元素个数</td></tr></tbody></table>\n<ol start=\"2\"><li>迭代器相关函数</li></ol>\n<table><thead><tr><th>成员函数</th><th>功能</th></tr></thead><tbody><tr><td>begin</td><td>获取容器中第一个元素的正向迭代器</td></tr><tr><td>end</td><td>获取容器中最后一个元素下一个位置的正向迭代器</td></tr></tbody></table>\n<ul><li>使用示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_unordered_set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>结果：</li></ul>\n<img alt=\"image-20220314193842262\" src=\"image\\202203141938355.png\"/>\n<h2><a id=\"3_168\"></a>3、性能比较</h2>\n<ul><li>测试代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span>\n\tunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> us<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tsize_t begin1 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t end1 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tsize_t begin2 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tus<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t end2 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"set insert:\"</span> <span class=\"token operator\">&lt;&lt;</span> end1 <span class=\"token operator\">-</span> begin1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"unordered_set insert:\"</span> <span class=\"token operator\">&lt;&lt;</span> end2 <span class=\"token operator\">-</span> begin2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=====================\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tsize_t begin3 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t end3 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tsize_t begin4 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tus<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t end4 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"set find:\"</span> <span class=\"token operator\">&lt;&lt;</span> end3 <span class=\"token operator\">-</span> begin3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"unordered_set find:\"</span> <span class=\"token operator\">&lt;&lt;</span> end4 <span class=\"token operator\">-</span> begin4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=====================\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tsize_t begin5 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t end5 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tsize_t begin6 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tus<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t end6 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"set erase:\"</span> <span class=\"token operator\">&lt;&lt;</span> end5 <span class=\"token operator\">-</span> begin5 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"unordered_set erase:\"</span> <span class=\"token operator\">&lt;&lt;</span> end6 <span class=\"token operator\">-</span> begin6 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>结果：</li></ul>\n<img alt=\"image-20220314194909177\" src=\"image\\202203141949282.png\"/>\n<blockquote>\n<p>总结：使用底层为哈希的容器总体的效率是非常高的，对于关联式set/map的复杂度能达到O(logN)，而unordered系列关联式容器可以达到接近O(1)的水平</p>\n</blockquote>\n<h1><a id=\"_245\"></a>二、哈希表/哈希桶</h1>\n<blockquote>\n<p>unordered系列的关联式容器之所以效率比较高，是因为其底层使用了哈希结构</p>\n</blockquote>\n<h2><a id=\"1_249\"></a>1、哈希介绍及概念</h2>\n<ul><li>概念：</li></ul>\n<blockquote>\n<ol><li> <p>顺序结构以及平衡树中，元素关键码与其存储位置之间没有对应的关系，因此在查找一个元素时，必须要经过关键码的多次比较。顺序查找时间复杂度为O(N)，平衡树中为树的高度，即O(N)，搜索的效率取决于搜索过程中元素的比较次数</p> </li><li> <p>理想的搜索方法是可以不经过任何比较，一次直接从表中得到要搜索的元素。如果构造一种存储结构，通过某种函数(hashFunc)使元素的存储位置与它的关键码之间能够建立一一映射的关系，那么在查找时通过该函数可以很快找到该元素，则复杂度为O(1)非常的高效，而计数排序用的即是这种思想</p> </li></ol>\n</blockquote>\n<ul><li>大体步骤：</li></ul>\n<blockquote>\n<ol><li> <p>插入元素：根据待插入元素的关键码，以此函数计算出该元素的存储位置并按此位置进行存放</p> </li><li> <p>搜索元素：对元素的关键码进行同样的计算，把求得的函数值当做元素的存储位置，在结构中按此位置取元素比较，若关键码相等，则搜索成功</p> </li></ol>\n</blockquote>\n<blockquote>\n<p>该方式即为哈希(散列)方法，哈希方法中使用的转换函数称为哈希(散列)函数，构造出来的结构称为哈希表(Hash Table)(或者称散列表)</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<blockquote>\n<p>哈希函数设置为：hash(key) = key % capacity; capacity为存储元素底层空间总的大小</p>\n</blockquote>\n<ul><li>示图：</li></ul>\n<img alt=\"image-20220314104958215\" src=\"image\\202203141049492.png\"/>\n<blockquote>\n<p>注：该方法进行搜索不必进行多次关键码的比较，因此搜索的速度比较快，但是这样的搜索存在哈希冲突</p>\n</blockquote>\n<h2><a id=\"2_275\"></a>2、哈希冲突及解决</h2>\n<ul><li>概念：</li></ul>\n<blockquote>\n<ol><li> <p>对于不同关键字通过相同哈希哈数可能会计算出相同的哈希地址，该种现象称为哈希冲突或哈希碰撞，而具有不同关键码而具有相同哈希地址的数据元素称为“同义词”</p> </li><li> <p>引起哈希冲突的一个原因可能是：哈希函数设计不够合理，但是好的哈希函数只能是减小冲突的概率，并非能杜绝</p> </li></ol>\n</blockquote>\n<ul><li>哈希函数设计原则：</li></ul>\n<blockquote>\n<p>哈希函数的定义域必须包括需要存储的全部关键码，而如果散列表允许有m个地址时，其值域必须在0到m-1之间哈希函数计算出来的地址能均匀分布在整个空间中</p>\n</blockquote>\n<ul><li>常见哈希函数:</li></ul>\n<ol><li>直接定制法–(常用)</li></ol>\n<blockquote>\n<p>取关键字的某个线性函数为散列地址：<strong>Hash</strong>（<strong>Key</strong>）<strong>= A*Key + B</strong></p>\n</blockquote>\n<blockquote>\n<p>优点：简单、均匀 缺点：需要事先知道关键字的分布情况 使用场景适合查找比较小且连续的情况</p>\n</blockquote>\n<ol start=\"2\"><li>除留余数法–(常用)</li></ol>\n<blockquote>\n<p>设散列表中允许的地址数为<strong>m</strong>，取一个不大于<strong>m</strong>，但最接近或者等于<strong>m</strong>的质数<strong>p</strong>作为除数，按照哈希函数：<strong>Hash(key) = key% p(p&lt;=m)</strong>，将关键码转换成哈希地址</p>\n</blockquote>\n<ol start=\"3\"><li>平方取中法–(了解)</li></ol>\n<blockquote>\n<p>假设关键字为1234，对它平方就是1522756，抽取中间的3位227作为哈希地址； 再比如关键字为4321，对它平方就是18671041，抽取中间的3位671(或710)作为哈希地址</p>\n</blockquote>\n<blockquote>\n<p>平方取中法比较适合：不知道关键字的分布，而位数又不是很大的情况</p>\n</blockquote>\n<ul><li>注意：</li></ul>\n<blockquote>\n<ol><li> <p>哈希函数设计的越精妙，产生哈希冲突的可能性就越低，但是无法避免哈希冲突</p> </li><li> <p>对于像使用计数排序的方式开辟足够大的空间来用下标建立映射关系的方式具有局限性，仅适用于数据集中的正数</p> </li></ol>\n</blockquote>\n<ul><li>解决哈希冲突两种常见的方法是：</li></ul>\n<blockquote>\n<p>闭散列和开散列</p>\n</blockquote>\n<h2><a id=\"3_315\"></a>3、闭散列/哈希表的实现</h2>\n<ul><li>概念：</li></ul>\n<blockquote>\n<p>闭散列也叫开放定址法，当发生哈希冲突时，如果哈希表未被装满，说明在哈希表中必然还有空位置，那么可以把key存放到冲突位置中的“下一个” 空位置中去</p>\n</blockquote>\n<ul><li>寻找下一个空位置方式：</li></ul>\n<ol><li>线性探测</li></ol>\n<blockquote>\n<p>从发生冲突的位置开始，依次向后探测，直到寻找到下一个空位置为止，即newindexi=（index+i)%capacity</p>\n<p>线性探测实现非常简单，但是一旦发生哈希冲突，所有的冲突连在一起，容易产生数据**“**堆积”，即：不同关键码占据了可利用的空位置，使得寻找某关键码的位置需要许多次比较，导致搜索效率降低</p>\n</blockquote>\n<ol start=\"2\"><li>二次探测</li></ol>\n<blockquote>\n<p>从发生的冲突的位置开始，不逐个往后找，而是以平方个位置找，即计算位置为newindexi=（index+i^2)%capacity</p>\n<p>二次探测可以较为有效的方式减小哈希冲突的概率</p>\n</blockquote>\n<ul><li>闭散列实现步骤：</li></ul>\n<ol><li>插入</li></ol>\n<blockquote>\n<p>通过哈希函数获取待插入元素在哈希表中的位置，如果该位置中没有元素则直接插入新元素，如果该位置中有元素发生哈希冲突，使用线性探测找到下一个空位置，插入新元素</p>\n</blockquote>\n<ul><li>示图：线性探测：依次往后找</li></ul>\n<img alt=\"image-20220314111349232\" src=\"image\\202203141113402.png\"/>\n<ol start=\"2\"><li>删除</li></ol>\n<blockquote>\n<p>采用闭散列处理哈希冲突时，不能随便物理删除哈希表中已有的元素，若直接删除元素会影响其他元素的搜索，比如删除元素4，如果直接删除掉，44查找起来可能会受影响</p>\n<p>因此线性探测采用标记的伪删除法来删除一个元素，即每个位置都有一个表示当前状态的变量，存在数据为EXIST，不存在为EMPTY，删除为DELETE</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 哈希表每个空间给个标记</span>\n<span class=\"token comment\">// EMPTY此位置空， EXIST此位置已经有元素， DELETE元素已经删除</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    EMPTY<span class=\"token punctuation\">,</span> EXIST<span class=\"token punctuation\">,</span> DELETE\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"3\"><li>查找</li></ol>\n<blockquote>\n<p>对于查找的话先利用哈希函数获取对应的哈希映射位置，再根据具体情况而进行下一步行为</p>\n<p>如果探测的位置状态为空，那么不必比较数据且不用再往后查找</p>\n<p>如果探测的位置状态为存在，那么则进行比较数据值，相等则查找到了；不相等则往后根据对应的探测方式继续查找</p>\n<p>如果探测的位置状态为删除，那么同样需要继续往后查找，直到找到对应存在的数据或者探测到状态为空的位置就不用再查找了</p>\n</blockquote>\n<ol start=\"4\"><li>闭散列扩容</li></ol>\n<ul><li>哈希表什么时候扩容：</li></ul>\n<img alt=\"image-20220314114032425\" src=\"image\\202203141140641.png\"/>\n<ul><li>哈希表扩容的实现：</li></ul>\n<blockquote>\n<p>使用除留余数定制法时，对于扩容后的哈希表对应的哈希函数的除数的值会发生相应的改变，导致下一次查找定制的位置可能不同，所以需要对原来的数据进行再次映射到新的位置上</p>\n</blockquote>\n<ol start=\"5\"><li>哈希类型取值映射的问题：</li></ol>\n<blockquote>\n<ol><li> <p>由于哈希函数我们旋转的是除留余数法，但是只有整形才能进行取余，所以对于整形，浮点型数据我们可以直接进行强转取值，但是面对字符串类型或者其他自定义的类型的话，我们就需要进行取值特化，实现其对应类型的函数来取其中特定的数据当做取余的值</p> </li><li> <p>为了遍历取值，我们选择使用仿函数的方式进行实现，并将该取值类型设置为模板类型，便于特化类型的传入和使用</p> </li></ol>\n</blockquote>\n<ul><li>代码实现：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//比较仿函数-取出类型中的数值</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashFunc</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsize_t <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//对string类型特化</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashFunc</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsize_t <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tsize_t hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\thash <span class=\"token operator\">=</span> hash <span class=\"token operator\">*</span> <span class=\"token number\">131</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这种方式的冲突概率小</span>\n\t\t<span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>闭散列代码实现：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tEXIST<span class=\"token punctuation\">,</span>\n\tDELETE<span class=\"token punctuation\">,</span>\n\tEMPTY\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//哈希储存的数据类型</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashData</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tpair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span> _kv<span class=\"token punctuation\">;</span>\n\tState _state <span class=\"token operator\">=</span> EMPTY<span class=\"token punctuation\">;</span><span class=\"token comment\">//缺省值</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//比较仿函数-取出类型中的数值</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashFunc</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsize_t <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//对string类型特化</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashFunc</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsize_t <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tsize_t hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\thash <span class=\"token operator\">=</span> hash <span class=\"token operator\">*</span> <span class=\"token number\">131</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这种方式的冲突概率小</span>\n\t\t<span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span> <span class=\"token operator\">=</span> HashFunc<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">&gt;&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tHashData<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//避免取模0</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\tHash  hf<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tsize_t start <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取模size()，使用capacity()可能存到一定位置的空间会使得vector进行自动扩容，不便于控制</span>\n\t\tsize_t index <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">!=</span> EMPTY<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> key <span class=\"token operator\">&amp;&amp;</span>\n\t\t\t\t_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">==</span> EXIST<span class=\"token punctuation\">)</span><span class=\"token comment\">//存在且key相等</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tindex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//二次探测+取模避免越界</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//避免冗余</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> _size <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//空哈希或者哈希因子达到一定程序则扩容</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsize_t newsize <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">10</span> <span class=\"token operator\">:</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\tHashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> Hash<span class=\"token operator\">&gt;</span> newHT<span class=\"token punctuation\">;</span>\n\t\t\tnewHT<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>newsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//重新开辟足够空间</span>\n\t\t\t<span class=\"token comment\">//重新构建映射</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">==</span> EXIST<span class=\"token punctuation\">)</span>\n\t\t\t\t\tnewHT<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_table<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>newHT<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交换地址</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tHash  hf<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tsize_t start <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取模size()</span>\n\t\tsize_t index <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">==</span> EXIST<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tindex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//找到空或者删除则插入</span>\n\t\t_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_kv <span class=\"token operator\">=</span> kv<span class=\"token punctuation\">;</span>\n\t\t_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">=</span> EXIST<span class=\"token punctuation\">;</span>\n\t\t_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tret<span class=\"token operator\">-&gt;</span>_state <span class=\"token operator\">=</span> DELETE<span class=\"token punctuation\">;</span><span class=\"token comment\">//伪删除</span>\n\t\t\t_size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _size<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tvector<span class=\"token operator\">&lt;</span>HashData<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;&gt;</span> _table<span class=\"token punctuation\">;</span>\n\tsize_t _size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//记录有效数据个数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>测试代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestHashTable1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">,</span> <span class=\"token number\">333</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//int a[] = { 5, 15, 25, 35, 45 };</span>\n\tHashTable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ht<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> ht<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestHashTable2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//HashTable&lt;string, string, HashFuncString&gt; dict;</span>\n\tHashTable<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> dict<span class=\"token punctuation\">;</span>\n\tdict<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"排序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdict<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"插入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestHashTable3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tHashTable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ht1<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tht1<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tht1<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tHashTable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">ht2</span><span class=\"token punctuation\">(</span>ht1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tHashTable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ht<span class=\"token punctuation\">;</span>\n\tht <span class=\"token operator\">=</span> ht2<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">53</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>结果：</li></ul>\n<p><img alt=\"image-20220314213626754\" src=\"image\\c60533c748486a51d782f3c2c628a0a4.png\"/></p>\n<h2><a id=\"4_584\"></a>4、开散列/哈希桶的实现</h2>\n<ul><li>概念：</li></ul>\n<blockquote>\n<p>开散列法又叫链地址法(开链法)，首先对关键码集合用散列函数计算散列地址，具有相同地址的关键码归于同一子集合，每一个子集合称为一个桶，各个桶中的元素通过一个单链表链接起来，各链表的头结点存储在哈希表中</p>\n</blockquote>\n<ul><li>示图：</li></ul>\n<img alt=\"image-20220314203154356\" src=\"image\\202203142031406.png\"/>\n<img alt=\"image-20220314203203492\" src=\"image\\202203142032546.png\"/>\n<blockquote>\n<p>注：开散列中每个桶中放的都是发生哈希冲突的元素</p>\n</blockquote>\n<ul><li>开散列实现步骤：</li></ul>\n<ol><li>插入</li></ol>\n<blockquote>\n<p>通过哈希函数进行映射到对应的位置，我们的哈希桶选择存的元素是节点地址，那么直接选择头插就好，并不用担心哈希冲突，但是在插入之前需要进行遍历桶节点查看是否存在与插入的值相同的节点，没有才进行头插</p>\n</blockquote>\n<ol start=\"2\"><li>删除/查找</li></ol>\n<blockquote>\n<p>通过哈希函数映射到对应的位置，进行对该位置通的遍历再进行删除或查找</p>\n</blockquote>\n<ol start=\"3\"><li>开散列增容</li></ol>\n<blockquote>\n<p>桶的个数是一定的，随着元素的不断插入，每个桶中元素的个数不断增多，极端情况下，可能会导致一个桶中链表节点非常多，会影响的哈希表的性能，因此在一定条件下需要对哈希表进行增容</p>\n<p>开散列最好的情况是：每个哈希桶中刚好挂一个节点，再继续插入元素时，每一次都会发生哈希冲突，因此，在元素个数刚好等于桶的个数时，可以给哈希表增容</p>\n<p>科学增容：除留余数法，最好模一个素数</p>\n</blockquote>\n<ul><li>代码实现：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//获取下一个质数（接近二倍开辟）,比较科学减少冲突的取扩容大小的方式</span>\nsize_t <span class=\"token function\">GetNextPrime</span><span class=\"token punctuation\">(</span>size_t prime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> PRIMECOUNT <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> size_t primeList<span class=\"token punctuation\">[</span>PRIMECOUNT<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token number\">53ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">193ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">389ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">769ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1543ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3079ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6151ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12289ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24593ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">49157ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98317ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">196613ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">393241ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">786433ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1572869ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3145739ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6291469ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12582917ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25165843ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">50331653ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100663319ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201326611ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">402653189ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">805306457ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1610612741ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3221225473ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4294967291ul</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tsize_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> PRIMECOUNT<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>primeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> prime<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> primeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> primeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>开散列实现代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//哈希储存的数据类型</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tpair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span> _kv<span class=\"token punctuation\">;</span>\n\tHashNode<span class=\"token operator\">*</span> _next<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">HashNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_kv</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//取值比较仿函数及其特化</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashFunc</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsize_t <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashFunc</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsize_t <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tsize_t hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\thash <span class=\"token operator\">=</span> hash <span class=\"token operator\">*</span> <span class=\"token number\">131</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取下一个质数（接近二倍开辟）,比较科学减少冲突的取扩容大小的方式</span>\nsize_t <span class=\"token function\">GetNextPrime</span><span class=\"token punctuation\">(</span>size_t prime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> PRIMECOUNT <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> size_t primeList<span class=\"token punctuation\">[</span>PRIMECOUNT<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token number\">53ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">193ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">389ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">769ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1543ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3079ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6151ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12289ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24593ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">49157ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98317ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">196613ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">393241ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">786433ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1572869ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3145739ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6291469ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12582917ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25165843ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">50331653ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100663319ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201326611ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">402653189ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">805306457ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1610612741ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3221225473ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4294967291ul</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tsize_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> PRIMECOUNT<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>primeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> prime<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> primeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> primeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token operator\">=</span>HashFunc<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">&gt;&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> Hash<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_n</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HT<span class=\"token operator\">&amp;</span> ht<span class=\"token punctuation\">)</span><span class=\"token comment\">//拷贝构造</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_n</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">.</span>_n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//空栈</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\t_table<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开辟空间并初始化</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ht<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//遍历深拷贝</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token comment\">//遍历桶</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tnewnode<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//头插</span>\n\t\t\t\t_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tHT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HT<span class=\"token operator\">&amp;</span> ht<span class=\"token punctuation\">)</span><span class=\"token comment\">//赋值重载（现代式）</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ht <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tHT <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//拷贝构造</span>\n\t\t\t_table<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_n <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">.</span>_n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//析构-释放资源</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">delete</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//置空</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t_n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tHash hf<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//空哈希或者负载因子达到1时进行扩容</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> _n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//size_t newsize = _table.size() == 0 ? 10 : _table.size() * 2;</span>\n\t\t\tsize_t newsize <span class=\"token operator\">=</span> <span class=\"token function\">GetNextPrime</span><span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取新的扩容大小</span>\n\t\t\tvector<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> newdata<span class=\"token punctuation\">;</span>\n\t\t\tnewdata<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>newsize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开新的数组并扩容</span>\n\t\t\t<span class=\"token comment\">//将原数组中的节点重新映射插入到新数组</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token comment\">//挂有节点</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录下一个节点</span>\n\t\t\t\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> newsize<span class=\"token punctuation\">;</span><span class=\"token comment\">//重新计算下标</span>\n\t\t\t\t\t\n\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//头插</span>\n\t\t\t\t\tnewdata<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">//移动</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//原数组置空</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_table<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>newdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//遍历查看桶数据知否相等</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token comment\">//相等</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//头插</span>\n\t\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnewnode<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>_n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tNode<span class=\"token operator\">*</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//空哈希</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\tHash hf<span class=\"token punctuation\">;</span>\n\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//空哈希</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tHash hf<span class=\"token punctuation\">;</span>\n\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//头结点进行头删</span>\n\t\t\t\t\t_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">delete</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">--</span>_n<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tvector<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> _table<span class=\"token punctuation\">;</span>\n\tsize_t _n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>测试代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestHashTable1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tHashTable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ht<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> ht<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> ht<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestHashTable2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//HashTable&lt;string, string, HashFuncString&gt; dict;</span>\n\tHashTable<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> dict<span class=\"token punctuation\">;</span>\n\tdict<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"排序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdict<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"插入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdict<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"erase\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"删除\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestHashTable3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tHashTable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ht1<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tht1<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tht1<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tHashTable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">ht2</span><span class=\"token punctuation\">(</span>ht1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tHashTable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ht<span class=\"token punctuation\">;</span>\n\tht <span class=\"token operator\">=</span> ht2<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">53</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>结果：</li></ul>\n<p><img alt=\"image-20220314213356207\" src=\"image\\74f4f599fe23222f869357e0baad8b94.png\"/></p>\n<ul><li>开散列与闭散列比较：</li></ul>\n<blockquote>\n<p>应用链地址法处理溢出，需要增设链接指针，似乎增加了存储开销。事实上： 由于开地址法必须保持大量的空闲空间以确保搜索效率，如二次探查法要求装载因子a &lt;= 0.7，而表项所占空间又比指针大的多，所以使用链地址法反而比开地址法节省存储空间</p>\n</blockquote>\n<h1><a id=\"unordered_mapunordered_set_913\"></a>三、哈希封装实现unordered_map/unordered_set</h1>\n<blockquote>\n<p>这里使用哈希桶来封装实现map和set，哈希桶相对于哈希表来说没有哈希冲突，并且效率也十分好</p>\n</blockquote>\n<blockquote>\n<p>使用哈希封装map/set和使用红黑树来封装的思维具有很多相似的地方</p>\n</blockquote>\n<h2><a id=\"1_919\"></a>1、哈希桶的改装</h2>\n<ul><li>注意：</li></ul>\n<ol><li>存储节点的数据类型对于set的K模型以及map的KV模型的兼容</li></ol>\n<ul><li>示例代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//哈希储存的数据类型</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tT _data<span class=\"token punctuation\">;</span><span class=\"token comment\">//对于不同的上层可以存对应的K类型以及pair&lt;K,V&gt;</span>\n\tHashNode<span class=\"token operator\">*</span> _next<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">HashNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>解释：</li></ul>\n<blockquote>\n<ol><li> <p>封装上层是set的话，则给底层哈希桶传入K类型，通过哈希桶再给底层的节点储存类型传入K类型</p> </li><li> <p>封装上层是map的话，则给底层哈希桶传入pair&lt;K,V&gt;，通过哈希桶再给底层的节点储存类型传入pair&lt;K,V&gt;</p> </li></ol>\n</blockquote>\n<ol start=\"2\"><li>储存节点在不同封装的使用下进行对应的取出数据的key进行比较</li></ol>\n<ul><li>示例代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//set上层</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">SetOfKey</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> SetOfKey<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//map上层</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MapOfKey</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;&gt;</span> Node<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> MapOfKey<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>解释：</li></ul>\n<blockquote>\n<p>上层封装中实现仿函数，给对应底层哈希传入对应使用的仿函数，便于进行使用对应的函数将储存数据的key继续取出比较</p>\n</blockquote>\n<ol start=\"3\"><li>哈希桶的迭代器如何实现，对于当前位置的迭代器怎么找到下个位置</li></ol>\n<ul><li>示例代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HTIterator</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> HTIterator<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> Self<span class=\"token punctuation\">;</span>\n\n\tHT<span class=\"token operator\">*</span> _ht<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> _node<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">HTIterator</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> HT<span class=\"token operator\">*</span> ht<span class=\"token punctuation\">)</span><span class=\"token comment\">//不能加const，与成员变量不匹配</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_ht</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_node</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSelf<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_node<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">)</span><span class=\"token comment\">//存在下个节点</span>\n\t\t\t_node <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token comment\">//找下一个桶</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tHash hf<span class=\"token punctuation\">;</span>\n\t\t\tKeyOfT kot<span class=\"token punctuation\">;</span>\n\t\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>_node<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//kot仿函数为了取出储存类型数据的key，hf仿函数是实现对key类型的取整值，便于进行取模</span>\n\t\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t_node <span class=\"token operator\">=</span> _ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> _ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//走到最后*</span>\n\t\t\t\t_node <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">HTIterator</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//*</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> HTIterator<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> Iterator<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注：对于哈希桶来说只有正向迭代器（单向），主要是底层是一个单向的链表，找上个节点地址比较麻烦，对于反向并不是很强求</p>\n</blockquote>\n<ul><li>解释：</li></ul>\n<blockquote>\n<ol><li> <p>迭代器底层为哈希桶节点地址，同时还需要指向该哈希桶的指针，用来进行查找对应桶的下个节点地址，这里需要使用哈希的私有成员，所以我们需要让迭代器成为哈希桶的友元类，便于访问成员</p> </li><li> <p>在实现的时候，我们发现，实现的迭代器包含了哈希桶类型，而哈希桶也包含了迭代器类型，两个类型互相去查找对方类型，这里就需要进行前置声明，避免有一方找不到对方类型</p> </li></ol>\n</blockquote>\n<ul><li>示例代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//前置声明</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HTIterator</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> HTIterator<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> Self<span class=\"token punctuation\">;</span>\n\tHT<span class=\"token operator\">*</span> _ht<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> _node<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//...</span>\n\tSelf<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">HTIterator</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//*</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> HTIterator<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> Iterator<span class=\"token punctuation\">;</span>\n\tIterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Iterator</span><span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Iterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tIterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Iterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>哈希桶改装后完整代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//哈希储存的数据类型</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tT _data<span class=\"token punctuation\">;</span><span class=\"token comment\">//对于不同的上层可以存对应的K类型以及pair&lt;K,V&gt;</span>\n\tHashNode<span class=\"token operator\">*</span> _next<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">HashNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//取值比较仿函数及其特化</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashFunc</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsize_t <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashFunc</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsize_t <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tsize_t hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\thash <span class=\"token operator\">=</span> hash <span class=\"token operator\">*</span> <span class=\"token number\">131</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取下一个质数（接近二倍开辟）</span>\nsize_t <span class=\"token function\">GetNextPrime</span><span class=\"token punctuation\">(</span>size_t prime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> PRIMECOUNT <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> size_t primeList<span class=\"token punctuation\">[</span>PRIMECOUNT<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token number\">53ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">193ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">389ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">769ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1543ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3079ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6151ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12289ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24593ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">49157ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98317ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">196613ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">393241ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">786433ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1572869ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3145739ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6291469ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12582917ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25165843ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">50331653ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100663319ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201326611ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">402653189ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">805306457ul</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1610612741ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3221225473ul</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4294967291ul</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tsize_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> PRIMECOUNT<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>primeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> prime<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> primeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> primeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//前置声明</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HTIterator</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> HTIterator<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> Self<span class=\"token punctuation\">;</span>\n\n\tHT<span class=\"token operator\">*</span> _ht<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> _node<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">HTIterator</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> HT<span class=\"token operator\">*</span> ht<span class=\"token punctuation\">)</span><span class=\"token comment\">//不能加const，与成员变量不匹配</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_ht</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_node</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _node <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>_node<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _node <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span>_node<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _node<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_node<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tSelf<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_node<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">)</span>\n\t\t\t_node <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token comment\">//找下一个桶</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tHash hf<span class=\"token punctuation\">;</span>\n\t\t\tKeyOfT kot<span class=\"token punctuation\">;</span>\n\t\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>_node<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t_node <span class=\"token operator\">=</span> _ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> _ht<span class=\"token operator\">-&gt;</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//走到最后*</span>\n\t\t\t\t_node <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">HTIterator</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//*</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> HTIterator<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> KeyOfT<span class=\"token operator\">&gt;</span> Iterator<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_n</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\tIterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Iterator</span><span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Iterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tIterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Iterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HT<span class=\"token operator\">&amp;</span> ht<span class=\"token punctuation\">)</span><span class=\"token comment\">//拷贝构造</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_n</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">.</span>_n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\tKeyOfT kot<span class=\"token punctuation\">;</span>\n\t\t_table<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ht<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tnewnode<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tHT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> HT<span class=\"token operator\">&amp;</span> ht<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ht <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tHT <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_table<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_n <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">.</span>_n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">delete</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//置空</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t_n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tpair<span class=\"token operator\">&lt;</span>Iterator<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tHash hf<span class=\"token punctuation\">;</span>\n\t\tKeyOfT kot<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//空哈希或者负载因子达到1</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> _n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsize_t newsize <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">10</span> <span class=\"token operator\">:</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//size_t newsize = GetNextPrime(_table.size());//获取新大小</span>\n\t\t\tvector<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> newdata<span class=\"token punctuation\">;</span>\n\t\t\tnewdata<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>newsize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开新的数组并扩容</span>\n\t\t\t<span class=\"token comment\">//将原数组中的节点重新插入到新数组</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//遍历数组</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token comment\">//挂有节点</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录下一个节点</span>\n\t\t\t\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> newsize<span class=\"token punctuation\">;</span><span class=\"token comment\">//重新计算下标</span>\n\t\t\t\t\t<span class=\"token comment\">//头插到新位置</span>\n\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tnewdata<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">//移动</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_table<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>newdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//遍历查找</span>\n\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">Iterator</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//头插</span>\n\t\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnewnode<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>_n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">Iterator</span><span class=\"token punctuation\">(</span>newnode<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tNode<span class=\"token operator\">*</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//空哈希</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\tHash hf<span class=\"token punctuation\">;</span>\n\t\tKeyOfT kot<span class=\"token punctuation\">;</span>\n\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//空哈希</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tHash hf<span class=\"token punctuation\">;</span>\n\t\tKeyOfT kot<span class=\"token punctuation\">;</span>\n\t\tsize_t index <span class=\"token operator\">=</span> <span class=\"token function\">hf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _table<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//头结点</span>\n\t\t\t\t\t_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">delete</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">--</span>_n<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tvector<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> _table<span class=\"token punctuation\">;</span>\n\tsize_t _n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2unordered_map_1384\"></a>2、unordered_map的上层封装</h2>\n<blockquote>\n<p>只需要在底层哈希桶的接口以及迭代器的接口，进行进一步的封装接口，便于外部进行调用</p>\n</blockquote>\n<ul><li>实现代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> cole\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token operator\">=</span>HashFunc<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">&gt;&gt;</span> \n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">unordered_map</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MapOfKey</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> MapOfKey<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">HT</span><span class=\"token double-colon punctuation\">::</span>Iterator iterator<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取类型中的类型需要加typename进行修饰，告诉编译器在实例化后进行查找对应的类型</span>\n\t\titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tpair<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tV<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token function\">V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span>first<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tNode<span class=\"token operator\">*</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">Erase</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tHT _ht<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">test_unordered_map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tunordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> map<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">156</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">153</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">151</span><span class=\"token punctuation\">,</span><span class=\"token number\">84894</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> map<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tmap<span class=\"token punctuation\">[</span><span class=\"token number\">56</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> map<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> map<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> map<span class=\"token punctuation\">[</span><span class=\"token number\">56</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> map<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>测试结果：</li></ul>\n<img alt=\"image-20220316163129501\" src=\"image\\202203161631728.png\"/>\n<h2><a id=\"3unordered_set_1471\"></a>3、unordered_set的上层封装</h2>\n<blockquote>\n<p>同样的对于set来说，也只需要在底层哈希桶的接口以及迭代器的接口，进行进一步的封装接口，便于外部进行调用</p>\n</blockquote>\n<ul><li>实现代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> cole\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span> <span class=\"token operator\">=</span> HashFunc<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">&gt;&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">unordered_set</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">SetOfKey</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> SetOfKey<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">HT</span><span class=\"token double-colon punctuation\">::</span>Iterator iterator<span class=\"token punctuation\">;</span>\n\t\titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tpair<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">/*V&amp; operator[](const K&amp; key)\n\t\t{\n\t\t\tauto ret = insert(make_pair(key, V()));\n\t\t\treturn ret.first-&gt;second;\n\t\t}*/</span>\n\t\tNode<span class=\"token operator\">*</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">Erase</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tHT _ht<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">test_unordered_set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> set<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">156</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">153</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">151</span><span class=\"token punctuation\">,</span><span class=\"token number\">84894</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>测试结果：</li></ul>\n<img alt=\"image-20220316163403730\" src=\"image\\202203161634049.png\"/>\n<ul><li>实现代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> cole\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span> <span class=\"token operator\">=</span> HashFunc<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">&gt;&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">unordered_set</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">SetOfKey</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> HashNode<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">typedef</span> HashTable<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> Hash<span class=\"token punctuation\">,</span> SetOfKey<span class=\"token operator\">&gt;</span> HT<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">HT</span><span class=\"token double-colon punctuation\">::</span>Iterator iterator<span class=\"token punctuation\">;</span>\n\t\titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tpair<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">/*V&amp; operator[](const K&amp; key)\n\t\t{\n\t\t\tauto ret = insert(make_pair(key, V()));\n\t\t\treturn ret.first-&gt;second;\n\t\t}*/</span>\n\t\tNode<span class=\"token operator\">*</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _ht<span class=\"token punctuation\">.</span><span class=\"token function\">Erase</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tHT _ht<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">test_unordered_set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> set<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">156</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">153</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">151</span><span class=\"token punctuation\">,</span><span class=\"token number\">84894</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>测试结果：</li></ul>\n<img alt=\"image-20220316163403730\" src=\"image\\202203161634049.png\"/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}