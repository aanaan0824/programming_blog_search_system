{"blogid": "124541435", "writerAge": "码龄3年", "writerBlogNum": "44", "writerCollect": "247", "writerComment": "20", "writerFan": "26", "writerGrade": "3级", "writerIntegral": "545", "writerName": "不情不愿", "writerProfileAdress": "writer_image\\profile_124541435.jpg", "writerRankTotal": "59190", "writerRankWeekly": "375425", "writerThumb": "83", "writerVisitNum": "60074", "blog_read_count": "27069", "blog_time": "已于 2022-05-03 09:58:41 修改", "blog_title": "Vuex ——详细介绍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>Vuex 是一个专门为 Vue.js 应用程序开发的<strong>状态管理模式</strong>，它采用<strong>集中式存储管理</strong>应用的所有组件状态，并以相应的规则保证状态以一种可预测的方式发生变化。可以理解为：将多个组件共享的变量全部存储在一个对象里面，然后将这个对象放在顶层的 Vue 实例中，让其他组件可以使用，它最大的特点是<strong>响应式。</strong></p>\n<p>一般情况下，我们会在 Vuex 中存放一些需要在多个界面中进行共享的信息。比如用户的登录状态、用户名称、头像、地理位置信息、商品的收藏、购物车中的物品等，这些状态信息，我们可以放在统一的地方，对它进行保存和管理。</p>\n<h3>Vuex 插件的安装</h3>\n<pre><code>npm install --save vuex@3.6.2</code></pre>\n<p>注意版本问题：<strong>vue 的 2.x 版本对应 vuex 的 3.x 版本，vue 的 3.x 版本对应 vuex 的 4.x 版本</strong></p>\n<p>在 src 目录下新建 store 文件夹，创建 index.js文件引入、安装、创建并导出Vuex对象。</p>\n<pre><code class=\"language-javascript\">import Vue from 'vue'\nimport Vuex from 'vuex'\n\n//1.安装插件\nVue.use(Vuex)\n\n//2.创建对象\nconst store = new Vuex.Store({\n  state:{\n    counter:1000\n  },\n  mutations:{\n\n  },\n  actions:{\n\n  },\n  getters:{\n\n  },\n  modules:{\n    \n  }\n})\n//3.导出使用\nexport default store</code></pre>\n<p>和 vue-router 的使用方式一样，在 main.js 文件中挂载使用</p>\n<pre><code class=\"language-javascript\">import Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport store from './store'\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  store,\n  render: h =&gt; h(App)\n})\n</code></pre>\n<p>store 对象中存放的东西是固定的，主要有：state、mutations、actions、getters、modules</p>\n<p>下图是官方给出的vuex状态管理图例</p>\n<h3><img alt=\"\" height=\"1125\" src=\"image\\ff008b0cc83f4fa6ad69529a61de739d.png\" width=\"1200\"/></h3>\n<h3>Vuex的基本使用</h3>\n<p>安装浏览器插件：devtools 方便调试 </p>\n<p>state：存放需要共享的状态信息，使用时通过<strong> $store.state.counter </strong>即可拿到状态信息。</p>\n<p><img alt=\"\" height=\"313\" src=\"image\\6c729e218cd24dcbaedcf58c4f9ea624.png\" width=\"489\"/></p>\n<p>对 state 的状态信息进行修改：先拿到 store 对象，然后通过 <strong>commit </strong>提交 <strong>mutations </strong>中的方法。</p>\n<p><img alt=\"\" height=\"190\" src=\"image\\05f8fe7faa7948f7ba73c8ae58c65b62.png\" width=\"535\"/></p>\n<p>使用 <strong>devtools </strong>调试界面，可以跟踪查看每一次事件操作。 </p>\n<h3><img alt=\"\" height=\"835\" src=\"image\\7a730d5c3779433fa4c3abd259f359a6.png\" width=\"1134\"/> Vuex 核心概念</h3>\n<p><strong>State:</strong></p>\n<p>单一状态树即单一数据源，在一个项目中只使用一个store对象，来存储所有共享的状态信息。</p>\n<p><strong>Getters:</strong></p>\n<p>类似于计算属性，在数据展示前进行一些变化处理，具有缓存功能，能够提高运行效率。eg：</p>\n<pre><code class=\"language-javascript\">  getters:{\n    powerCounter(state){\n      return state.counter * state.counter\n    },\n    more20stu(state){\n      return state.students.filter(s =&gt; s.age &gt; 20)\n    },\n    more20stuLength(state,getters){\n      return getters.more20stu.length\n    },\n    moreAgeStu(state){\n      return function(age){\n        return state.students.filter(s =&gt; s.age &gt; age)\n      }\n    }\n  }</code></pre>\n<p>使用时，通过：$store.getters.powerCounter 获取：</p>\n<pre><code class=\"language-html\">    &lt;h2&gt;{<!-- -->{$store.getters.powerCounter}}&lt;/h2&gt;\n    &lt;h2&gt;{<!-- -->{$store.getters.more20stu}}&lt;/h2&gt;\n    &lt;h2&gt;{<!-- -->{$store.getters.more20stuLength}}&lt;/h2&gt;\n    &lt;h2&gt;{<!-- -->{$store.getters.moreAgeStu(18)}}&lt;/h2&gt;</code></pre>\n<p>需要手动传参数时，可以在 getters 中返回一个 function：eg</p>\n<pre><code class=\"language-javascript\">    moreAgeStu(state){\n      return function(age){\n        return state.students.filter(s =&gt; s.age &gt; age)\n      }\n    }</code></pre>\n<p>调用时传入参数即可： </p>\n<pre><code class=\"language-html\">&lt;h2&gt;{<!-- -->{$store.getters.moreAgeStu(18)}}&lt;/h2&gt;</code></pre>\n<h3>Mutations:</h3>\n<p>store/index.js</p>\n<pre><code class=\"language-javascript\">  mutations:{//定义一些方法\n    increment(state){\n      state.counter++\n    },\n    decrement(state){\n      state.counter--\n    },\n    incrementCount(state, payload){\n      //1.普通提交方式\n      //state.counter += count\n      //2.特殊提交方式\n      state.counter += payload.count\n    },\n    addStudent(state, obj){\n      state.students.push(obj)\n    }\n  }</code></pre>\n<p>组件调用 ：传递的参数（payload）可以是一个对象</p>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"addCount(5)\"&gt;+5&lt;/button&gt;\n    &lt;button @click=\"addCount(10)\"&gt;+10&lt;/button&gt;\n    &lt;button @click=\"addStudent({id:105, name:'name6', age:29})\"&gt;添加学生&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name:\"HelloVuex\",\n  methods:{\n    addCount(count){\n      //1.普通的提交风格\n      // this.$store.commit('incrementCount',count)\n      //2.特殊的提交风格\n      this.$store.commit({\n        type:'incrementCount',\n        count:count\n      })\n    },\n    addStudent(stu){\n      this.$store.commit('addStudent',stu)\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n\n&lt;/style&gt;</code></pre>\n<p> mutations在处理异步操作时，能够引起页面的响应式变化，但是 devtools 无法进行监听。</p>\n<p> 比如：在 mutations 中执行以下代码</p>\n<pre><code class=\"language-javascript\">    updateInfo(state){\n      setTimeout(() =&gt; {\n        state.info.name = 'James'\n      }, 1000);\n    }</code></pre>\n<p><img alt=\"\" height=\"895\" src=\"image\\401e971afe7f48dcbbb18580706a649a.png\" width=\"1200\"/></p>\n<h3>Actions:</h3>\n<p>如果确实需要进行一些异步操作，比如网络请求，建议在 Actions 中进行处理，这样 devtools 就能够进行跟踪，由 Actions 处理异步操作，具体的函数部分仍交由 Mutations 进行处理。</p>\n<pre><code class=\"language-javascript\">  actions:{\n    //context:上下文 === store\n    aUpdateInfo(context,payload){\n      setTimeout(() =&gt; {\n        context.commit('updateInfo',payload)\n        console.log(payload);\n      }, 5000);\n    }\n  }</code></pre>\n<p>组件中使用时，调用：this.$store.dispatch('aUpdateInfo') </p>\n<pre><code class=\"language-javascript\">    updateInfo(){\n      // this.$store.commit('updateInfo')\n      this.$store.dispatch('aUpdateInfo','参数')\n    }</code></pre>\n<p><img alt=\"\" height=\"903\" src=\"image\\56fe164e49d54d6eb9254736d7b0becb.png\" width=\"1200\"/> 结合Promise使用：</p>\n<pre><code class=\"language-javascript\">  actions:{\n    //context:上下文 === store\n    aUpdateInfo(context, payload){\n      return new Promise((resolve, reject)=&gt;{\n        setTimeout(() =&gt; {\n          context.commit('updateInfo');\n          console.log(payload);\n          resolve('11111')\n        }, 1000);\n      })\n    }\n  }</code></pre>\n<pre><code class=\"language-javascript\">    updateInfo(){\n      // this.$store.commit('updateInfo')\n      this.$store\n      .dispatch('aUpdateInfo','参数')\n      .then(res =&gt;{\n        console.log('里面完成了提交');\n        console.log(res);\n      })\n    }</code></pre>\n<p><img alt=\"\" height=\"692\" src=\"image\\2adf0e51e6a044ae85282ea5b928cd4d.png\" width=\"1200\"/></p>\n<h3>Modules:</h3>\n<p>分模块管理数据</p>\n<pre><code class=\"language-javascript\">const moduleA = {\n  state:{\n    name: 'moduleA'\n  },\n  mutations:{\n    updateName(state,payload){\n      state.name = payload\n    }\n  },\n  getters:{\n    fullname(state){\n      return state.name + '1111'\n    },\n    fullname2(state, getters){\n      return getters.fullname + '2222'\n    },\n    fullname3(state, getters, rootState){\n      //传入第三个参数：rootState为上一个store对象中的state\n      return getters.fullname2 +rootState.counter\n    }\n  },\n  actions:{\n    aUpdateName(context){//context 中 的commit只指向该模块中的mutations\n      setTimeout(() =&gt; {\n        context.commit('updateName','xiaowang')\n        console.log(context)\n      },\n\nconst store = new Vuex.Store({\n  state:{\n    counter:1000,\n    students:[\n      {id:110, name: 'name1', age: 12},\n      {id:111, name: 'name2', age: 21},\n      {id:112, name: 'name3', age: 22},\n      {id:113, name: 'name4', age: 20},\n      {id:114, name: 'name5', age: 18}\n    ],\n    info:{\n      name: 'kobe',\n      age: 40,\n      height: 1.89\n    }\n  },\n  mutations:{//定义一些方法\n    increment(state){\n      state.counter++\n    },\n    decrement(state){\n      state.counter--\n    },\n    incrementCount(state, payload){\n      //1.普通提交方式\n      //state.counter += count\n      //2.特殊提交方式\n      state.counter += payload.count\n    },\n    addStudent(state, obj){\n      state.students.push(obj)\n    },\n    updateInfo(state){\n      state.info.name = 'Jams'//响应式：事先定义过的为响应式\n      // state.info['address'] = 'chengdu'//响应式\n      // Vue.set(state.info,'address1','Asgin')//响应式\n      // delete state.info.age//响应式\n      // Vue.delete(state.info,'height')//响应式\n    }\n  },\n  getters:{\n    powerCounter(state){\n      return state.counter * state.counter\n    },\n    more20stu(state){\n      return state.students.filter(s =&gt; s.age &gt; 20)\n    },\n    more20stuLength(state,getters){\n      return getters.more20stu.length\n    },\n    moreAgeStu(state){\n      return function(age){\n        return state.students.filter(s =&gt; s.age &gt; age)\n      }\n    }\n  },\n  actions:{\n    //context:上下文 === store\n    aUpdateInfo(context, payload){\n      return new Promise((resolve, reject)=&gt;{\n        setTimeout(() =&gt; {\n          context.commit('updateInfo');\n          console.log(payload);\n          resolve('11111')\n        }, 1000);\n      })\n    }\n  },\n  modules:{\n    a: moduleA\n  }\n})</code></pre>\n<p>组件中使用 ：$store.state.a</p>\n<pre><code class=\"language-html\">    &lt;h2&gt;Modules中的内容&lt;/h2&gt;\n    &lt;h2&gt;{<!-- -->{$store.state.a.name}}&lt;/h2&gt;\n    &lt;button @click=\"updateName\"&gt;修改模块ModuleA中的名字&lt;/button&gt;\n    &lt;h2&gt;{<!-- -->{$store.getters.fullname3}}&lt;/h2&gt;\n    &lt;button @click=\"aupdateName\"&gt;actions修改name&lt;/button&gt;</code></pre>\n<p>执行模块中的方法 ：直接 $store.commit 提交，故 mutations 之间定义的方法名不能重复。</p>\n<pre><code class=\"language-javascript\">    updateName(){\n      this.$store.commit('updateName','lisa')\n    },\n    aupdateName(){\n      this.$store.dispatch('aUpdateName')\n    }</code></pre>\n<p>打印出的 context 信息如下：</p>\n<p><img alt=\"\" height=\"802\" src=\"image\\d0c8311659af47c3851fc9400ca9d624.png\" width=\"976\"/> 包含根状态下的一些 state (rootState) 和 mutations (rootMutations)。 </p>\n</div>\n</div>"}