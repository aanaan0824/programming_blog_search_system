{"blogid": "126167139", "writerAge": "码龄2年", "writerBlogNum": "99", "writerCollect": "2167", "writerComment": "2490", "writerFan": "4216", "writerGrade": "6级", "writerIntegral": "6114", "writerName": "亦世凡华、", "writerProfileAdress": "writer_image\\profile_126167139.jpg", "writerRankTotal": "2478", "writerRankWeekly": "30", "writerThumb": "2161", "writerVisitNum": "46336", "blog_read_count": "473", "blog_time": "于 2022-08-21 13:26:12 发布", "blog_title": "【JavaScript】一文了解JS原型与原型链", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>🍈作者简介：大家好，我是亦世凡华、渴望知识储备自己的一名在校大学生</p>\n<p>🍇个人主页：<a class=\"link-info\" href=\"https://blog.csdn.net/qq_53123067?spm=1000.2115.3001.5343\" title=\"亦世凡华、的博客\">亦世凡华、的博客</a></p>\n<p>🍓系列专栏：<a class=\"link-info\" href=\"https://blog.csdn.net/qq_53123067/category_11818587.html?spm=1001.2014.3001.5482\" title=\"JavaScript专栏\">JavaScript专栏</a></p>\n<p>🥝推荐一款模拟面试刷题神器🔥：<a class=\"link-info\" href=\"https://www.nowcoder.com/link/pc_csdncpt_ysfh_qianduan\" title=\"点击跳转进入网站\">点击跳转进入网站</a></p>\n</blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%F0%9F%8D%87%E5%8E%9F%E5%9E%8B(prototype)-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%8D%87%E5%8E%9F%E5%9E%8B%28prototype%29\">🍇原型(prototype)</a></p>\n<p id=\"%F0%9F%8D%88%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%88%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B\">🍈显示原型与隐式原型</a></p>\n<p id=\"%F0%9F%8D%87%E5%8E%9F%E5%9E%8B%E9%93%BE-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%8D%87%E5%8E%9F%E5%9E%8B%E9%93%BE\">🍇原型链</a></p>\n<p id=\"%F0%9F%8D%88%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%B1%9E%E6%80%A7%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%88%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%B1%9E%E6%80%A7%E9%97%AE%E9%A2%98\">🍈原型链属性问题</a></p>\n<p id=\"%F0%9F%8D%89%E5%8E%9F%E5%9E%8B%E9%93%BE%20instanceof%20%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%89%E5%8E%9F%E5%9E%8B%E9%93%BE%20instanceof%20%E4%BD%BF%E7%94%A8\">🍉原型链 instanceof 使用</a></p>\n<p id=\"%F0%9F%8D%8A%E7%BB%83%E4%B9%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%8A%E7%BB%83%E4%B9%A0\">🍊练习</a></p>\n<hr id=\"hr-toc\"/>\n<h2 id=\"%F0%9F%8D%87%E5%8E%9F%E5%9E%8B(prototype)\">🍇原型(prototype)</h2>\n<p>每一个函数都有一个 <span style=\"color:#be191c;\"><strong>prototype</strong></span> 属性，它默认指向一个Object空对象(即称为：原型对象)。</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    console.log(Date.prototype, typeof Date.prototype);\n    \n    function fun(){\n    }\n    fun.prototype.test = function(){ //给原型对象添加一个方法\n        console.log('test()');\n    }\n    console.log(fun.prototype); // 默认指向一个Object空对象(没有我们的属性)\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"216\" src=\"image\\5f4ba7fe2d96410584ef97f930782c11.png\" width=\"1076\"/></p>\n<p>原型对象中有一个属性 <span style=\"color:#be191c;\"><strong>constructor</strong></span> ，它指向函数对象。</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function fun(){\n    }\n    console.log(Date.prototype.constructor === Date);\n    console.log(fun.prototype.constructor === fun);\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"148\" src=\"image\\088747f38e364b7195d2233dfeab3ea0.png\" width=\"839\"/></p>\n<p>给<span style=\"color:#be191c;\"><strong>原型对象添加属性</strong></span>(一般是方法) ===&gt; 实例对象可以访问。</p>\n<blockquote>\n<p>有的时候我们想要在所有已经存在的对象添加新的属性或方法。</p>\n<p>另外，有时候我们想要在对象的构造函数中添加属性或方法。</p>\n<p>使用 prototype 属性就可以给对象的构造函数添加新的属性：</p>\n</blockquote>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function fun(){\n    }\n    fun.prototype.test = function(){//给原型对象添加方法(属性)\n        console.log('test()');\n    }\n    var fn = new fun()//函数的所有实例对象自动拥有原型中的方法(属性)\n    fn.test()\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"119\" src=\"image\\3371075bc3ce42419686ac06d9487919.png\" width=\"826\"/></p>\n<h3 id=\"%F0%9F%8D%88%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B\">🍈显示原型与隐式原型</h3>\n<p>每一个函数 function 都有一个 <span style=\"color:#be191c;\"><strong>prototype</strong></span>，即显示原型。默认指向一个空的 <span style=\"color:#494949;\">Object</span><span style=\"color:#be191c;\"> </span>对象。</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function fun(){\n    }\n    console.log(fun.prototype);\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"159\" src=\"image\\ffc5adcd19fa4a099a853ca363ec5504.png\" width=\"829\"/></p>\n<p>每个实例对象都有一个 <span style=\"color:#be191c;\"><strong>__proto__ </strong></span>，可称为隐式原型。</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function fun(){\n    }\n    var fn = new fun()\n    console.log(fn.__proto__);\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"159\" src=\"image\\ffc5adcd19fa4a099a853ca363ec5504.png\" width=\"829\"/></p>\n<p>对象的隐式原型的值 为其对应 构造函数的显示原型的值。</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function fun(){\n    }\n    // console.log(fun.prototype);\n    var fn = new fun()\n    // console.log(fn.__proto__);\n    console.log(fun.prototype === fn.__proto__); //结果是 true\n&lt;/script&gt;</code></pre>\n<blockquote>\n<p>总结：</p>\n<p>函数的 <span style=\"color:#be191c;\"><strong>prototype</strong></span> 属性：在定义函数时自动添加的，默认值是一个空的 Object 对象。</p>\n<p>对象的 <span style=\"color:#be191c;\"><strong>__proto__</strong></span> 属性：创建对象时自动添加的，默认值为构造函数的 prototype 属性值。</p>\n<p>程序员能直接操作显示原型，但不能直接操作隐式原型(ES6之前)。</p>\n</blockquote>\n<h2 id=\"%F0%9F%8D%87%E5%8E%9F%E5%9E%8B%E9%93%BE\">🍇原型链</h2>\n<p><span style=\"color:#be191c;\"><strong>原型链</strong></span>(本质为：<span style=\"color:#b95514;\"><strong>隐式原型链</strong></span>，作用：<span style=\"color:#1c7331;\"><strong>查找对象的属性或方法</strong></span>)，访问一个对象的属性时，先在自身属性中查找，找到返回；如果没有，再沿着 __proto__ 这条链向上查找，找到返回；如果最终没找到，返回 undefined。</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    console.log(Object.prototype.__proto__);\n    function Fun(){\n        this.test1 = function(){\n            console.log('test1()');\n        }\n    }\n    console.log(Fun.prototype);\n    Fun.prototype.test2 = function(){\n        console.log('test2()');\n    }\n    var fun = new Fun()\n    fun.test1()\n    fun.test2()\n    console.log(fun.toString())\n    fun.test3()\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"263\" src=\"image\\5832daacc4de48e1b88f72ce671d7399.png\" width=\"899\"/></p>\n<p><img alt=\"\" height=\"635\" src=\"image\\d14d681d396347779c455f896669c40f.png\" width=\"1121\"/></p>\n<p><span style=\"color:#be191c;\"><strong>总结</strong></span>：</p>\n<blockquote>\n<p>        JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p>\n</blockquote>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function Fun(){\n    }\n    //函数的显示原型指向的对象默认是空 Object 实例对象(但 Object 不满足)\n    console.log(Fun.prototype instanceof Object); \n    console.log(Object.prototype instanceof Object); \n    console.log(Function.prototype instanceof Object); \n\n    //所有函数都是 Function 的实例(包括 Function)\n    console.log(Function.__proto__ === Function.prototype); \n\n    // Object 的原型对象是原型链的尽头\n    console.log(Object.prototype.__proto__); \n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"214\" src=\"image\\33a9a4e727d44f5997641be7c780e1e8.png\" width=\"903\"/></p>\n<h3 id=\"%F0%9F%8D%88%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%B1%9E%E6%80%A7%E9%97%AE%E9%A2%98\">🍈原型链属性问题</h3>\n<p><span style=\"color:#be191c;\"><strong>读取对象的属性值时</strong></span>：会自动查找到原型链中查找；<span style=\"color:#be191c;\"><strong>设置对象属性时</strong></span>：不会查找原型链，如果当前对象中没有此属性，直接添加此属性值并设置其值；方法一般定义在原型中，属性一般通过构造函数定义在对象本身上。</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function Fun(){\n\n    }\n    Fun.prototype.a = 'xxx'\n    var fun = new Fun()\n    console.log(fun.a,fun);\n    var fun1 = new Fun()\n    fun1.a = 'yyy'\n    console.log(fun.a,fun1.a,fun1);\n\n    function Person(name,age){\n        this.name = name\n        this.age = age\n    }\n    Person.prototype.setName = function(name){\n        this.name = name\n    }\n    var p1 = new Person('Tom',12)\n    p1.setName('Bob')\n    console.log(p1);\n\n    var p2 = new Person('Jack',12)\n    p2.setName('andy')\n    console.log(p2);\n\n    console.log(p1.__proto__ === p2.__proto__);\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"582\" src=\"image\\704d1c2891054267b10ecc249e04c78c.png\" width=\"1196\"/></p>\n<h3 id=\"%F0%9F%8D%89%E5%8E%9F%E5%9E%8B%E9%93%BE%20instanceof%20%E4%BD%BF%E7%94%A8\">🍉原型链 instanceof 使用</h3>\n<p><span style=\"color:#be191c;\"><strong>表达式</strong></span>：A instanceof B ；如果B函数的显示原型对象在A对象的原型链中，返回true，否则返回false；Function是通过new自己产生的实例。</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function Fun(){}\n    var fn = new Fun()\n    console.log(fn instanceof Fun); \n    console.log(fn instanceof Object);\n\n    console.log(Object instanceof Function);\n    console.log(Object instanceof Object);\n    console.log(Function instanceof Function);\n    console.log(Function instanceof Object);\n\n    function Foo(){}\n    console.log(Object instanceof Foo);\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"263\" src=\"image\\05c85a55d55c4be78efdc50150cf8215.png\" width=\"842\"/></p>\n<h3 id=\"%F0%9F%8D%8A%E7%BB%83%E4%B9%A0\">🍊练习</h3>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function A(){}\n    A.prototype.n = 1\n    var b = new A()\n    A.prototype = {\n        n:2,\n        m:3\n    }\n    var c = new A()\n    console.log(b.n, b.m, c.n, c.m);\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"117\" src=\"image\\a170e3c99ed64255a16ac8d8e7ccc53e.png\" width=\"872\"/></p>\n<p>其实现原理如下图所示（图有点草，凑合看吧哈哈）</p>\n<p><img alt=\"\" height=\"507\" src=\"image\\fbda0f6649fc4c3ba39fc0aa377225a4.png\" width=\"844\"/></p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    function F(){}\n    Object.prototype.a = function(){\n        console.log('a()');\n    }\n    Function.prototype.b = function(){\n        console.log('b()');\n    }\n    var f = new F()\n    f.a()\n    F.a()\n    F.b()\n    console.log(f);\n    console.log(Object.prototype);\n    console.log(Function.prototype);\n&lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"613\" src=\"image\\e9a43f8118d5480db778cf9ccdc06363.png\" width=\"1151\"/></p>\n<blockquote>\n<p>🍃JavaScript的学习还是要以多练习为主，想要练习JavaScript的朋友，推荐可以去牛客网看一看，链接：<a class=\"link-info\" href=\"https://www.nowcoder.com/link/pc_csdncpt_ysfh_qianduan\" title=\"牛客网\">牛客网</a> 里面的IT题库内容很丰富，属于国内做的很好的了，最重要的是里面的资源是免费的，是课程+刷题+面经+求职+讨论区分享，一站式求职学习网站，感兴趣的可以去看看。</p>\n</blockquote>\n<p><img alt=\"\" height=\"487\" src=\"image\\a16d980e94b740e68576774ae81f6241.png\" width=\"1177\"/></p>\n</div>\n</div>"}