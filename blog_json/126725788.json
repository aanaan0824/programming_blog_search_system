{"blogid": "126725788", "writerAge": "码龄1年", "writerBlogNum": "465", "writerCollect": "601", "writerComment": "40", "writerFan": "9674", "writerGrade": "6级", "writerIntegral": "5149", "writerName": "bhegi_seg", "writerProfileAdress": "writer_image\\profile_126725788.jpg", "writerRankTotal": "3426", "writerRankWeekly": "837", "writerThumb": "101", "writerVisitNum": "222550", "blog_read_count": "52", "blog_time": "于 2022-09-06 15:12:07 发布", "blog_title": "JAVACORE与HEAPDUMP生成大法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>目录</strong></p>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p><a href=\"#JAVACORE%E7%AF%87%EF%BC%9A\">JAVACORE篇：</a></p>\n<p><a href=\"#Windows%E5%B9%B3%E5%8F%B0%EF%BC%9A\">Windows平台：</a></p>\n<p><a href=\"#ORACLE%20JDK%EF%BC%9AHOTSPOT\">ORACLE JDK：HOTSPOT</a></p>\n<p><a href=\"#IBM%20JDK%EF%BC%9AV9\">IBM JDK：V9</a></p>\n<p><a href=\"#LINUX%E5%B9%B3%E5%8F%B0%EF%BC%9A%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80%E3%80%80\">LINUX平台：　　　　　　　　　　　　　　　　　?</a></p>\n<p><a href=\"#HEAPDUMP%E7%AF%87%EF%BC%9A\">HEAPDUMP篇：</a></p>\n<p><a href=\"#Windows%E5%B9%B3%E5%8F%B0%EF%BC%9A\">Windows平台：</a></p>\n<p><a href=\"#ORACLE%20JDK%EF%BC%9AHOTSPOT\">ORACLE JDK：HOTSPOT</a></p>\n<p><a href=\"#IBM%20JDK%EF%BC%9AV9\">IBM JDK：V9</a></p>\n<p><a href=\"#LINUX%E5%B9%B3%E5%8F%B0%3A\">LINUX平台:</a></p>\n<hr/>\n<h1><a id=\"_28\"></a>前言</h1>\n<blockquote>\n<p>在项目上我们经常要生成javacore和heapdump来进行分析。这里总结一下我自己在项目上生成这两个文件的方法。</p>\n</blockquote>\n<h1><a id=\"JAVACORE_33\"></a><strong>JAVACORE篇：</strong></h1>\n<blockquote>\n<p>JavaCore文件主要保存的是Java应用各线程在某一时刻的运行的位置，即JVM执行到哪一个类、哪一个方法、哪一个行上。它是一个文本文件，打开后可以看到每一个线程的执行栈，以stack trace的显示。</p>\n<p>通过对JavaCore文件的分析可以得到应用是否“卡”在某一点上，即在某一点运行的时间太长，例如数据库查询，长期得不到响应，最终导致系统崩溃等情况。</p>\n</blockquote>\n<h2><a id=\"Windows_40\"></a><strong>Windows平台：</strong></h2>\n<h3><a id=\"ORACLE_JDKHOTSPOT_43\"></a><strong>ORACLE JDK：HOTSPOT</strong></h3>\n<p><strong>1.jvisualvm工具</strong></p>\n<blockquote>\n<p>jvisualvm是sun的JDK中自带的工具，在java_home/bin/jvisualvm.exe中就可以打开。</p>\n</blockquote>\n<blockquote>\n<p>挂在到对应的java进程后，可以直接生javacore。</p>\n</blockquote>\n<p><img alt=\"\" src=\"image\\20190426152659935.png\"/></p>\n<p><strong>2.jstack工具</strong></p>\n<blockquote>\n<p>jstack为JDK自带的命令行工具。</p>\n</blockquote>\n<pre><code>可以通过jstack -l -r -pid的方式生成对应的javacore。\n</code></pre>\n<blockquote>\n<p>其中-l -r 可以显示出详细信息，锁信息等。</p>\n</blockquote>\n<p><strong>3.sendsignal工具</strong></p>\n<blockquote>\n<p>sendsignal工具是老外开发的一个小工具，用来生成已知进程号的java进程的javacore。</p>\n<p>附件中有具体工具。通过sendsignal.exe pid即可生成。</p>\n</blockquote>\n<p><strong>4.ctrl+break按键</strong></p>\n<blockquote>\n<p>在Windows上启动程序的时候，可以直接在启动进程的窗口按组合键生成javacore。</p>\n<p>然而由于NC涉及到两个java进程，一个小的导程序，一个是正式的程序。</p>\n<p>所以用该方法只能生成引导程序的javacore。看不到生产环境的实际快照。</p>\n</blockquote>\n<h3><a id=\"IBM_JDKV9_75\"></a><strong>IBM JDK：V9</strong></h3>\n<p><strong>1.系统宕机自动生成。</strong></p>\n<blockquote>\n<p>IBM的JDK在系统宕机的时候会自动生成javacore，这也是我们经常用该JDK替换默认的缘故。</p>\n</blockquote>\n<p><strong>2.sendsignal工具。</strong></p>\n<p><strong>3.ctrl+break组合键。</strong></p>\n<p><strong>4.NMC控制台。（内部监控工具）</strong></p>\n<blockquote>\n<p>某产品自带的监控工具NMC可以直接点击对应server，右键直接生成javacore。</p>\n<p>该工具只针对于Websphere集群生效。对于单机 websphere或者NC中间件不生效。</p>\n</blockquote>\n<p><img alt=\"\" src=\"image\\20190426153248468.png\"/></p>\n<p><strong>5</strong>**.Websphere控制台**。</p>\n<blockquote>\n<p>有的时候我们发现，系统卡死，或者需要同时生成多个Server的javacore的时候，</p>\n<p>我们就需要在websphere的控制台中直接生成。</p>\n</blockquote>\n<pre><code>生成方式为Troubleshooting-&gt;Java dumps and cores。\n</code></pre>\n<p><img alt=\"\" src=\"image\\20190426153341232.png\"/><strong>6.JSP小补丁程序。</strong></p>\n<blockquote>\n<p>使用方式为，将javacore.jsp放置到<strong>nchome/webapps/nc_web</strong>下即可，重启生效。</p>\n<p>访问的时候，通过ip地址+端口+javacore.jsp即可在JAVA_HOME中生成。</p>\n</blockquote>\n<blockquote>\n<p>如127.0.0.1:9081/javacore.jsp。代码如下</p>\n</blockquote>\n<pre><code>&lt;%\ncom.ibm.jvm.Dump.JavaDump();\n%&gt;\n</code></pre>\n<blockquote>\n<p>主要调用IBM的JDK内部方法com.ibm.jvm.Dump.JavaDump();</p>\n</blockquote>\n<h2><a id=\"LINUX_115\"></a><strong>LINUX平台：</strong></h2>\n<p><strong>1.kill -3 -pid</strong></p>\n<blockquote>\n<p>在linux平台上，除了之前的各种方法之外，可以直接调用系统的kill -3方法。</p>\n</blockquote>\n<h1><a id=\"HEAPDUMP_122\"></a>HEAPDUMP篇：</h1>\n<blockquote>\n<p>HeapDump文件是一个二进制文件，它保存了某一时刻JVM堆中对象使用情况。</p>\n<p>这种文件需要相应的工具进行分析，如IBM Heap Analyzer这类工具。这类文件最重要的作用就是分析系统中是否存在内存溢出的情况。</p>\n</blockquote>\n<h2><a id=\"Windows_129\"></a>Windows平台：</h2>\n<h3><a id=\"ORACLE_JDKHOTSPOT_132\"></a>ORACLE JDK：HOTSPOT</h3>\n<p><strong>1.jvisualvm工具。</strong></p>\n<blockquote>\n<p>和之前生成javacore的方法类似。</p>\n</blockquote>\n<p><img alt=\"\" src=\"image\\20190426153943586.png\"/></p>\n<p><strong>2.jmap方法。</strong></p>\n<blockquote>\n<p>map方法为JDK自带的方法。通过命令行的方式生成。</p>\n</blockquote>\n<pre><code>?jmap -dump:file=path_to_file pid 如jmap -dump:file=d: 2234。\n</code></pre>\n<p><strong>3.系统宕机自动生成。</strong></p>\n<blockquote>\n<p>由于oracle的JDK在宕机的时候，不会自动生成heapdump文件。需要我们通过添加JVM参数的方式来显示申明。</p>\n</blockquote>\n<pre><code>在JVM参数中 加-XX:+HeapDumpOnOutOfMemoryError。\n</code></pre>\n<p><strong>4.通过windows任务管理器。</strong></p>\n<blockquote>\n<p>windows的任务管理器可以直接将java的堆对象全部转储出来。</p>\n<p>只需要点击右键进行保存即可。保存后的文件需要通过类似IBM的MAT分析工具打开。</p>\n</blockquote>\n<p><img alt=\"\" src=\"image\\2019042615411570.png\"/></p>\n<h3><a id=\"IBM_JDKV9_160\"></a>IBM JDK：V9</h3>\n<p><strong>1.系统宕机自动生成。</strong></p>\n<p><strong>2.利用coredump功能。</strong></p>\n<blockquote>\n<p>利用websphere自带的coredump功能，可以将所有宕机时的堆栈信息全部输出。</p>\n<p>包含堆中对象的具体信息，如hashmap中的键值都可以看到具体的值。</p>\n<p>是跟踪宕机问题的终极法宝。</p>\n</blockquote>\n<pre><code>具体方法为，在JVM中添加参数\n\n-Xdump:system:events=user,request=exclusive+prewalk+compact\n</code></pre>\n<p><strong>3.JSP小补丁程序。</strong></p>\n<blockquote>\n<p>使用方式为，将heapdump.jsp放置到<strong>nchome/webapps/nc_web</strong>下即可，重启生效。</p>\n<p>访问的时候，通过ip地址+端口+heapdump.jsp即可在JAVA_HOME中生成。</p>\n</blockquote>\n<blockquote>\n<p>如127.0.0.1:9081/heapdump.jsp。代码如下</p>\n</blockquote>\n<pre><code>&lt;%\ncom.ibm.jvm.Dump.HeapDump();\n%&gt;\n</code></pre>\n<blockquote>\n<p>主要调用IBM的JDK内部方法com.ibm.jvm.Dump.HeapDump();</p>\n</blockquote>\n<h2><a id=\"LINUX_190\"></a>LINUX平台:</h2>\n<blockquote>\n<p>和上面的生成方法没有太大区别。</p>\n<p>以上为目前我总结的所有关于javacore和heapdump的收集方法。</p>\n<p>在搜集项目报错信息以及定位问题的时候非常关键。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}