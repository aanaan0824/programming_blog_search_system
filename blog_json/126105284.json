{"blogid": "126105284", "writerAge": "码龄13年", "writerBlogNum": "685", "writerCollect": "3366", "writerComment": "3240", "writerFan": "11506", "writerGrade": "7级", "writerIntegral": "20082", "writerName": "二当家的白帽子", "writerProfileAdress": "writer_image\\profile_126105284.jpg", "writerRankTotal": "451", "writerRankWeekly": "281", "writerThumb": "4102", "writerVisitNum": "762178", "blog_read_count": "77", "blog_time": "于 2022-09-05 10:22:58 发布", "blog_title": "【算法leetcode】1442. 形成两个异或相等数组的三元组数目（rust真是好用）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1442__8\">1442. 形成两个异或相等数组的三元组数目：</a></li><li><a href=\"#_1_23\">样例 1：</a></li><li><a href=\"#_2_34\">样例 2：</a></li><li><a href=\"#_3_42\">样例 3：</a></li><li><a href=\"#_4_50\">样例 4：</a></li><li><a href=\"#_5_58\">样例 5：</a></li><li><a href=\"#_66\">提示：</a></li><li><a href=\"#_73\">分析</a></li><li><a href=\"#_85\">题解</a></li><li><ul><li><a href=\"#rust_87\">rust</a></li><li><a href=\"#go_115\">go</a></li><li><a href=\"#c_138\">c++</a></li><li><a href=\"#java_165\">java</a></li><li><a href=\"#python_192\">python</a></li></ul>\n</li><li><a href=\"#httpsleetcodecnproblemscounttripletsthatcanformtwoarraysofequalxorhttpsleetcodecnproblemscounttripletsthatcanformtwoarraysofequalxor_215\">原题传送门：https://leetcode.cn/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"1442__8\"></a>1442. 形成两个异或相等数组的三元组数目：</h1>\n<p>给你一个整数数组 <code>arr</code> 。</p>\n<p>现需要从数组中取三个下标 <code>i</code>、<code>j</code> 和 <code>k</code> ，其中 <code>(0 &lt;= i &lt; j &lt;= k &lt; arr.length)</code> 。</p>\n<p><code>a</code> 和 <code>b</code> 定义如下：</p>\n<ul><li><code>a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]</code></li><li><code>b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]</code></li></ul>\n<p>注意：<strong>^</strong> 表示 <strong>按位异或</strong> 操作。</p>\n<p>请返回能够令 <code>a == b</code> 成立的三元组 <code>(i, j , k)</code> 的数目。</p>\n<h1><a id=\"_1_23\"></a>样例 1：</h1>\n<pre><code>输入：\n\tarr = [2,3,1,6,7]\n\t\n输出：\n\t4\n\t\n解释：\n\t满足题意的三元组分别是 (0,1,2), (0,2,2), (2,3,4) 以及 (2,4,4)\n</code></pre>\n<h1><a id=\"_2_34\"></a>样例 2：</h1>\n<pre><code>输入：\n\tarr = [1,1,1,1,1]\n\t\n输出：\n\t10\n</code></pre>\n<h1><a id=\"_3_42\"></a>样例 3：</h1>\n<pre><code>输入：\n\tarr = [2,3]\n\t\n输出：\n\t0\n</code></pre>\n<h1><a id=\"_4_50\"></a>样例 4：</h1>\n<pre><code>输入：\n\tarr = [1,3,5,7,9]\n\t\n输出：\n\t3\n</code></pre>\n<h1><a id=\"_5_58\"></a>样例 5：</h1>\n<pre><code>输入：\n\tarr = [7,11,12,9,5,2,7,17,22]\n\t\n输出：\n\t8\n</code></pre>\n<h1><a id=\"_66\"></a>提示：</h1>\n<ul><li>1 &lt;= arr.length &lt;= 300</li><li>1 &lt;= arr[i] &lt;= 10<sup>8</sup></li></ul>\n<hr/>\n<h1><a id=\"_73\"></a>分析</h1>\n<ul><li>面对这道算法题目，二当家的陷入了沉思。</li><li>根据题意和<code>x ^ x = 0</code>，满足条件的i，j，k一定满足一个特点：<code>arr[i] ^ ... ^ arr[k]=0</code>，而这时候<code>j</code>取<code>(i,k]</code>中的任何值都可以满足条件。</li><li>设<code>s[i] = arr[0] ^ ... ^ arr[i-1]</code>，当<code>s[i]==s[k+1]</code>相等时，展开可得<code>arr[0] ^ ... ^ arr[i-1]==arr[0] ^ ... ^ arr[k]</code>，根据<code>x ^ 0 = x</code>可以推测出<code>arr[i] ^ ... ^ arr[k]=0</code>。</li><li>对于下标 k，若下标 i=i<sub>1</sub>,i<sub>2</sub>,⋯ ,i<sub>m</sub>时均满足 S<sub>i</sub>=S<sub>k+1</sub>，根据前面的推论可得答案数为(k−i<sub>1​</sub>)+(k−i<sub>2</sub>​)+⋯+(k−i<sub>m​</sub>)=m⋅k−(i<sub>1</sub>​+i<sub>2​</sub>+⋯+i<sub>m</sub>​)</li><li>也就是说，当遍历下标 k 时，我们需要知道所有满足 S<sub>i</sub>=S<sub>k+1</sub>​ 的 \n  <ol><li>下标 i 的出现次数 m</li><li>下标 i 之和</li></ol> </li></ul>\n<hr/>\n<h1><a id=\"_85\"></a>题解</h1>\n<h2><a id=\"rust_87\"></a>rust</h2>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">count_triplets</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 前缀和</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cnt<span class=\"token punctuation\">:</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> total<span class=\"token punctuation\">:</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> s <span class=\"token operator\">^</span> v<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> cnt<span class=\"token punctuation\">.</span><span class=\"token function\">contains_key</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                ans <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> k <span class=\"token keyword\">as</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">-</span> total<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> total<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>counter <span class=\"token operator\">+=</span> k <span class=\"token keyword\">as</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n            s <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"go_115\"></a>go</h2>\n<pre><code class=\"prism language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">countTriplets</span><span class=\"token punctuation\">(</span>arr <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ans <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 前缀和</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\tcnt <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\ttotal <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> arr <span class=\"token punctuation\">{<!-- --></span>\n\t\tt <span class=\"token operator\">:=</span> s <span class=\"token operator\">^</span> v\n\t\t<span class=\"token keyword\">if</span> m<span class=\"token punctuation\">,</span> has <span class=\"token operator\">:=</span> cnt<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> has <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tans <span class=\"token operator\">+=</span> m<span class=\"token operator\">*</span>k <span class=\"token operator\">-</span> total<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcnt<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t\ttotal<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> k\n\t\ts <span class=\"token operator\">=</span> t\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"c_138\"></a>c++</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">countTriplets</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 前缀和</span>\n        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> cnt<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> s <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                ans <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> k <span class=\"token operator\">-</span> total<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            total<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> k<span class=\"token punctuation\">;</span>\n            s <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h2><a id=\"java_165\"></a>java</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">countTriplets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 前缀和</span>\n\t\t<span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> cnt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> total <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> s <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tans <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> k <span class=\"token operator\">-</span> total<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tcnt<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ttotal<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ts <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"python_192\"></a>python</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">countTriplets</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># 前缀和</span>\n        s <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        cnt<span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">:=</span> s <span class=\"token operator\">^</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> cnt<span class=\"token punctuation\">:</span>\n                ans <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> k <span class=\"token operator\">-</span> total<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span>\n            cnt<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            total<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> k\n            s <span class=\"token operator\">=</span> t\n\n        <span class=\"token keyword\">return</span> ans\n\n</code></pre>\n<hr/>\n<h1><a id=\"httpsleetcodecnproblemscounttripletsthatcanformtwoarraysofequalxorhttpsleetcodecnproblemscounttripletsthatcanformtwoarraysofequalxor_215\"></a><a href=\"https://leetcode.cn/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/\">原题传送门：https://leetcode.cn/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/</a></h1>\n<hr/>\n<blockquote>\n<p>非常感谢你阅读本文~<br/> 欢迎【点赞】【收藏】【评论】~<br/> 放弃不难，但坚持一定很酷~<br/> 希望我们大家都能每天进步一点点~<br/> 本文由 <a href=\"https://le-yi.blog.csdn.net/\">二当家的白帽子：https://le-yi.blog.csdn.net/</a> 博客原创~</p>\n</blockquote>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}