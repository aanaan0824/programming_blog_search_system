{"blogid": "125079607", "writerAge": "码龄2年", "writerBlogNum": "14", "writerCollect": "5", "writerComment": "0", "writerFan": "2", "writerGrade": "2级", "writerIntegral": "156", "writerName": "�kid", "writerProfileAdress": "writer_image\\profile_125079607.jpg", "writerRankTotal": "84090", "writerRankWeekly": "575229", "writerThumb": "12", "writerVisitNum": "6550", "blog_read_count": "2613", "blog_time": "于 2022-06-01 11:06:55 发布", "blog_title": "TSX常见简单用法（入门） Vue3+Vite", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>1.安装tsx</h1>\n<h2>1.安装tsx插件</h2>\n<pre><code>npm install @vitejs/plugin-vue-jsx -D</code></pre>\n<h2>2.vite.config.ts里的配置</h2>\n<pre><code>import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport vueJsx from '@vitejs/plugin-vue-jsx'\n\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue(),vueJsx()],\n})</code></pre>\n<h2>3.tsconfig.json里的配置</h2>\n<pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\",\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"esnext\", \"dom\"],\n    \"skipLibCheck\": true,\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.d.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n</code></pre>\n<h3>这三条为配置项 </h3>\n<pre><code>    \"jsx\": \"preserve\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\",</code></pre>\n<h1>2.使用TSX</h1>\n<h2>app.vue里的代码</h2>\n<pre><code>&lt;template&gt;\n  &lt;renderDom title=\"我是标题\" @on-click=\"getNum\"&gt;&lt;/renderDom&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\"&gt;\n\nimport renderDom from \"./App\";\nimport { provide, ref } from \"vue\";\n\nconst data = ref(false);\nprovide(\"flag\", data);\nconst getNum = (num: number) =&gt; {\n  console.log(\"我接受到了\", num);\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n&lt;/style&gt;\n</code></pre>\n<h2>2.app.tsx的代码</h2>\n<pre><code>import { ref } from \"vue\";\n\nlet v = ref&lt;string&gt;(\"\");\nlet flag = ref(false);\nlet arr = ref([0, 1, 2, 3, 4, 5]);\n//  tsx不会自动结构所以该用.value还是要使用\ntype Props = {\n  title: string;\n};\nconst renderDom = (props: Props, ctx: any) =&gt; {\n  return (\n    &lt;div&gt;\n        &lt;button onClick={clickEmit.bind(this,ctx)}&gt;点击emit&lt;/button&gt;\n      &lt;h1&gt;{props.title}&lt;/h1&gt;\n      &lt;div&gt;\n        &lt;input v-model={v.value} type=\"text\" /&gt;\n        &lt;div&gt;\n          &lt;h1&gt;{v.value}&lt;/h1&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div v-show={flag.value}&gt;正确的&lt;/div&gt;\n        &lt;div v-show={!flag.value}&gt;错误的&lt;/div&gt;\n      &lt;/div&gt;\n      {/* &lt;div&gt;\n        &lt;div v-if={flag.value}&gt;正确的&lt;/div&gt;\n        &lt;div v-if={!flag.value}&gt;错误的&lt;/div&gt;\n        &lt;/div&gt; */}\n      {/* 不支持v-if 可用三元表达式去代替 */}\n      &lt;div&gt;{flag.value ? &lt;div&gt;正确的&lt;/div&gt; : &lt;div&gt;错误的&lt;/div&gt;}&lt;/div&gt;\n      {/* 不支持v-for 但可以用map循环去代替 */}\n      {/*不支持v-bind，可以直接绑定数值 */}\n      &lt;div&gt;\n        {arr.value.map((item, i: any) =&gt; {\n          return (\n            &lt;div data-inext={i} onClick={clickIndex.bind(this, i)}&gt;\n              {item}\n            &lt;/div&gt;\n          );\n        })}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst clickIndex = (i: any) =&gt; {\n  alert(i);\n};\n\nconst clickEmit=(ctx:any)=&gt;{\n    ctx.emit('on-click',123)\n}\nexport default renderDom;\n</code></pre>\n<h1>注意:</h1>\n<h3>1.tsx里面写的标签内容是不会自动解构的，所以ref里面的.value还是要加上值才会出来2.tsx里面支持v-show,v-model,但不支持v-bind,v-for,v-if，所以再写这些的时候要更改写法</h3>\n<p><strong>v-if使用三元表达式</strong></p>\n<pre><code>  &lt;div&gt;{flag.value ? &lt;div&gt;正确的&lt;/div&gt; : &lt;div&gt;错误的&lt;/div&gt;}&lt;/div&gt;</code></pre>\n<p> <strong>v-for通过map函数遍历数组来实现</strong></p>\n<pre><code> &lt;div&gt;\n        {arr.value.map((item, i: any) =&gt; {\n          return (\n            &lt;div data-inext={i} onClick={clickIndex.bind(this, i)}&gt;\n              {item}\n            &lt;/div&gt;\n          );\n        })}\n  &lt;/div&gt;</code></pre>\n<p><strong>v-bind可以直接绑值</strong></p>\n<pre><code> &lt;div data-inext={i} onClick={clickIndex.bind(this, i)}&gt;</code></pre>\n<p><strong>props和emit使用</strong></p>\n<p><strong>1.props</strong></p>\n<pre><code>&lt;renderDom title=\"我是标题\" @on-click=\"getNum\"&gt;&lt;/renderDom&gt;</code></pre>\n<p>（app.vue里传值title）</p>\n<pre><code>type Props = {\n  title: string;\n};\nconst renderDom = (props: Props, ctx: any) </code></pre>\n<p>（renderDom里面接收后可以使用，和以前一样）</p>\n<p><strong>2.emit</strong></p>\n<pre><code>const renderDom = (props: Props, ctx: any)</code></pre>\n<p>(拿到上下文)</p>\n<pre><code> &lt;button onClick={clickEmit.bind(this,ctx)}&gt;点击emit&lt;/button&gt;</code></pre>\n<p>(绑定方法)</p>\n<pre><code>const clickEmit=(ctx:any)=&gt;{\n    ctx.emit('on-click',123)\n}</code></pre>\n<p> (通过emit传值)</p>\n<p>（以上为app.tsx文件里面）</p>\n<pre><code>  &lt;renderDom title=\"我是标题\" @on-click=\"getNum\"&gt;&lt;/renderDom&gt;\n</code></pre>\n<p>(绑定自定义事件) </p>\n<pre><code>const getNum = (num: number) =&gt; {\n  console.log(\"我收到了\", num);\n};</code></pre>\n<p>(拿到值去使用)</p>\n<p>(以上为父组件收到并使用)</p>\n<p> </p>\n<p></p>\n</div>\n</div>"}