{"blogid": "119836004", "writerAge": "码龄5年", "writerBlogNum": "31", "writerCollect": "42", "writerComment": "2", "writerFan": "7", "writerGrade": "2级", "writerIntegral": "318", "writerName": "码建工", "writerProfileAdress": "writer_image\\profile_119836004.jpg", "writerRankTotal": "115716", "writerRankWeekly": "170157", "writerThumb": "6", "writerVisitNum": "30100", "blog_read_count": "4361", "blog_time": "于 2021-08-22 12:37:06 发布", "blog_title": "Visual Studio扩展开发(VS插件)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<font color=\"#999AAA\"> </font>\n<p></p>\n<div class=\"toc\">\n<h3>Visual Studio扩展开发</h3>\n<ul><li><a href=\"#_11\">前言</a></li><li><a href=\"#_20\">一、工具</a></li><li><a href=\"#VS_33\">二、VS插件目标功能</a></li><li><a href=\"#_40\">二、研发步骤</a></li><li><ul><li><a href=\"#1VSIX_Project_41\">1.创建VSIX Project</a></li><li><a href=\"#2VSIX_50\">2.自定义生成VSIX描述、版本、及作者</a></li><li><a href=\"#3command_58\">3.创建第一个command命令</a></li><li><a href=\"#4_62\">4.创建一个对话框类</a></li><li><a href=\"#4_70\">4.设置命令名称</a></li><li><a href=\"#5_78\">5.执行命令过程</a></li><li><a href=\"#6txt_86\">6.设计对话框、获取解决方案路径及保存路径到解决方案下的txt中</a></li></ul>\n</li><li><a href=\"#_146\">总结</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_11\"></a>前言</h1>\n<p><font color=\"#999AAA\">随着安装程序的日渐增大、版本的不断增多，调试程序需要以安装目录为底，把生成带调试信息的dl拷贝到调试环境，变得越来越混乱，同时研发人员对Visual Studio的个性化需求也不断增加，因此有必要开发一些VS插件(*.vsix)，用于解决这些问题，以提高研发效率。</font></p>\n<hr color=\"#000000\" size='1\"'/>\n<font color=\"#999AAA\"> </font>\n<h1><a id=\"_20\"></a>一、工具</h1>\n<p>1、VS2019</p>\n<p>2、工具负荷两个(SDK)<br/> a、Visual Studio 扩展开发<br/> b、.NET桌面开发</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8c86dffbdd874c609862ac1dd587ad25.png\"/></p>\n<h1><a id=\"VS_33\"></a>二、VS插件目标功能</h1>\n<p>使用VS快捷键，直接调出一个对话框，对话框可完成保持一个路径到解决方案下的txt文件中。</p>\n<font color=\"#999AAA\"> </font>\n<h1><a id=\"_40\"></a>二、研发步骤</h1>\n<h2><a id=\"1VSIX_Project_41\"></a>1.创建VSIX Project</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fff78513e1ae4b21bae16f0d9b322e9c.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\36fcb04de0594e5ebd0a83b6f9f3fb53.png\"/><br/> 根据需要创建自己的项目名称、项目路径以及解决方案。<br/> 注意：此处的项目名与最后插件上的命令按钮名称无关。</p>\n<h2><a id=\"2VSIX_50\"></a>2.自定义生成VSIX描述、版本、及作者</h2>\n<p>选择.Vsixmanifest清单文件，自行修改<br/> <img alt=\"在这里插入图片描述\" src=\"image\\854e9cd45cb04440a84ee4a219c7653d.png\"/></p>\n<h2><a id=\"3command_58\"></a>3.创建第一个command命令</h2>\n<p>右键单击项目（而非解决方案）。 在上下文菜单上，选择“添加”，然后选择“新建项”<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a128b56852f341d58eec10e0c336f922.png\"/>根据图中1、2、3、4步骤自定义名称。</p>\n<h2><a id=\"4_62\"></a>4.创建一个对话框类</h2>\n<p>创建对话类方式与C#桌面开发程序一样，此处不再细述。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ec2cbe98da164479b0ff01f1bb7ce2f7.png\"/></p>\n<h2><a id=\"4_70\"></a>4.设置命令名称</h2>\n<p>解决方案中找到.VSCT文件<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1923f43933de44fc8ac346f1721c30ff.png\"/>设置好后，可以直接启动调试程序，VS将会模拟启动一个VS，在工具中将可以看到自己创建的命令按钮如图</p>\n<h2><a id=\"5_78\"></a>5.执行命令过程</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6b2fae0cba4442758018adeed7b964af.png\"/>如果所示，调试程序过程中，将在模拟vs\"工具\"中看到命令按钮，执行按钮后即进入步骤3创建的.cs中，如果3处</p>\n<h2><a id=\"6txt_86\"></a>6.设计对话框、获取解决方案路径及保存路径到解决方案下的txt中</h2>\n<p>对话框<br/> a.启动时,解决方案中显示解决方案路径<br/> b.点击保存,解决方案路径保存到解决方案路径下的Sln.txt中<br/> <img alt=\"在这里插入图片描述\" src=\"image\\91eee6cc67f34ab0b0340a462feae5d5.png\"/></p>\n<p>获得解决方案路径</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">using</span> <span class=\"token namespace\">EnvDTE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token namespace\">EnvDTE80</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>VisualStudio<span class=\"token punctuation\">.</span>Shell</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetSlnPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//ThreadHelper.ThrowIfNotOnUIThread();</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dte2 <span class=\"token operator\">=</span> Package<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobalService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">DTE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">DTE2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> solution <span class=\"token operator\">=</span> dte2<span class=\"token punctuation\">.</span>Solution<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> SolutionPath <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectoryName</span><span class=\"token punctuation\">(</span>solution<span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//解决方案路径</span>\n            <span class=\"token keyword\">return</span> SolutionPath<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在对话框中显示</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Form1_Load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token operator\">=</span> <span class=\"token function\">GetSlnPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n                \n</code></pre>\n<p>点击确定保存解决方案路径到解决方案路径下的Sln.txt中</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sSlnPath <span class=\"token operator\">=</span> <span class=\"token function\">GetSlnPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">//解决方案路径</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sSlnPath<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>sSlnPath<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\\\\\"</span><span class=\"token punctuation\">)</span> \n                sSlnPath<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>sSlnPath<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">//如果最后一位是\\，则删除</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sFileName <span class=\"token operator\">=</span> sSlnPath <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\\Sln.txt\"</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">//拼出文件全路径</span>\n\n            <span class=\"token class-name\">StreamWriter</span> streamWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamWriter</span><span class=\"token punctuation\">(</span>sFileName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            streamWriter<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetSlnPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            streamWriter<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后启动程序看执行功能查看<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c0c1dca95b0648929230b9b923a9836f.png\"/></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_146\"></a>总结</h1>\n<p><font color=\"#999AAA\">本文主要讲述创建VS插件的一般过程.<br/> 创建一个启动命令--------执行命令----------<br/> 本文接口仅涉及到获取解决方案路径办法.想了解其他接口,可查阅后续文章.</font></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}