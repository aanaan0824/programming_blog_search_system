{"blogid": "123460829", "writerAge": "码龄3年", "writerBlogNum": "33", "writerCollect": "1506", "writerComment": "1529", "writerFan": "4255", "writerGrade": "6级", "writerIntegral": "4924", "writerName": "寄一片海给你", "writerProfileAdress": "writer_image\\profile_123460829.jpg", "writerRankTotal": "14747", "writerRankWeekly": "42965", "writerThumb": "1619", "writerVisitNum": "82111", "blog_read_count": "1809", "blog_time": "已于 2022-04-21 10:06:55 修改", "blog_title": "【C++】STL中string类的模拟实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">⚽前言</a></li><li><a href=\"#_72\">⚽模拟实现</a></li><li><ul><li><a href=\"#_76\">⭐构造函数</a></li><li><a href=\"#_109\">⭐拷贝构造</a></li><li><a href=\"#_134\">⭐赋值运算符重载</a></li><li><a href=\"#_153\">⭐析构函数</a></li><li><a href=\"#sizecapacity_166\">⭐计算size和capacity</a></li><li><a href=\"#_190\">⭐重载[]</a></li><li><a href=\"#c_str_211\">⭐c_str</a></li><li><a href=\"#clear_222\">⭐clear</a></li><li><a href=\"#_237\">⭐迭代器区间</a></li><li><a href=\"#_270\">⭐增</a></li><li><ul><li><a href=\"#reserve_272\">⚡reserve函数</a></li><li><a href=\"#resize_294\">⚡resize函数</a></li><li><a href=\"#push_back_345\">⚡push_back尾插</a></li><li><a href=\"#append_360\">⚡append字符串追加</a></li><li><a href=\"#operator_375\">⚡operator+=</a></li><li><a href=\"#insert_394\">⚡insert函数</a></li></ul>\n</li><li><a href=\"#_439\">⭐删</a></li><li><a href=\"#_479\">⭐查</a></li><li><a href=\"#_509\">⭐改</a></li><li><a href=\"#_513\">⭐重载&lt;&lt;和&gt;&gt;</a></li></ul>\n</li><li><a href=\"#_550\">⚽源码</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>⚽前言</h1>\n<p>C标准库中也提供了一系列的str库函数，但不符合oop思想（核心：封装、继承、多态），所以C++引入了string类，在OJ中很多有关字符串的题目都是以string类形式出现的，下面我们来深入了解一下</p>\n<blockquote>\n<p><font color=\"#37cfd8\" size=\"3\">string类是由STL中类模板basic_string实例化的具体的类</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6eb80874aebe49b5acbd2933f94beaa7.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\4d2d489aae8d47538819c9220e346fcb.png\"/></p>\n<p>因为字符类型不只是有<code>char</code>，还有<code>char16_t</code>，<code>wchar_t</code>等<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ae00f162d74945faa64f049eeb487785.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\3789d04c7b654a6b8958116186a766c3.png\"/><br/></p>\n<blockquote>\n<p><font color=\"#00BFFF\" size=\"3\">string类可以理解为一个动态增长的顺序表，底层是一块连续的数组，当<code>字符串长度小于16</code>时在栈上申请空间，之后才在堆上申请空间</font></p>\n</blockquote>\n<p>我们可以通过一个简单的测试证明</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//s1的字符串长度小于16</span>\n\tstring <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2222222222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//s2的字符串长度大于16</span>\n\tstring <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"222222222222222222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>s1的字符串是存在数组_Buf中的<br/> <img alt=\"在这里插入图片描述\" src=\"image\\01a3987d29d844319408e17e231567ac.png\"/>s2的字符串是在堆上开辟空间由_Ptr指针维护的<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c4d79f9c6d694a538d47e5ec202ca2f7.png\"/>且我们计算两个对象的大小都是28<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7c866669d53044e8bd87709aa372a906.png\"/>所以string类的大致框架如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">string</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//四个成员变量大小刚好是28</span>\n\t<span class=\"token keyword\">char</span> _Buffer<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//长度小于16直接存在buffer数组中</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _Ptr<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//长度大于16再从堆上申请空间</span>\n\tsize_t _Mysize<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//存储的有效字符个数</span>\n\tsize_t _Myres<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//存储有效字符的容量</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><font color=\"#00BFFF\" size=\"4\">同时string也不是直接从堆上申请空间的，避免频繁从堆上申请空间，底层是通过内存池申请的，我们简易模拟实现直接在堆上申请，模拟实现的大致框架如下：</font></p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">basic_string</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//去掉了buffer，统一在堆上申请空间</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _str<span class=\"token punctuation\">;</span>\n    size_t size<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//有效字符个数</span>\n    size_t capacity<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//存储有效字符容量</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> basic_string<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span> string<span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_72\"></a>⚽模拟实现</h1>\n<p>由于库中有的函数会重载很多版本，所以模拟实现时只会重载一些常用的版本</p>\n<h2><a id=\"_76\"></a>⭐构造函数</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5dff4d2ac19f4c89a59e0764d21d0619.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> king\t<span class=\"token comment\">//由于会和std中的string冲突，所以我们在自己的命名空间实现</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">string</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//采用缺省参数，模拟实现上面的1和4</span>\n\t\t\t<span class=\"token operator\">:</span><span class=\"token function\">_size</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_capacity</span><span class=\"token punctuation\">(</span>_size<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>_size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>_str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _str<span class=\"token punctuation\">;</span>\n\t\tsize_t _size<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//有效字符个数</span>\n\t\tsize_t _capacity<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//只算存储有效字符的容量，不计入'\\0',new的时候直接+1</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_109\"></a>⭐拷贝构造</h2>\n<p>拷贝构造肯定是深拷贝</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/846b402f4ed84433a98d7773ed49183a.gif#pic_center\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//复用构造函数初始化tmp，然后交换*this与tmp，由于tmp只在当前作用域，出了作用域会调用析构函数，所以将_str先初始化为nullptr</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n \tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_str<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_size<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_capacity<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>_capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//s1(s2)</span>\n<span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n <span class=\"token operator\">:</span><span class=\"token function\">_str</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   string <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_134\"></a>⭐赋值运算符重载</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//s1=s2</span>\nstring<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n         <span class=\"token comment\">//同样玩的是拷贝构造的套路，复用拷贝构造初始化tmp</span>\n        <span class=\"token comment\">//然后交换*this与tmp，tmp同样会调用析构函数释放原来*this维护的空间</span>\n\t\tstring <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_153\"></a>⭐析构函数</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token operator\">~</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _str<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//释放空间</span>\n\t_str <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//置空</span>\n\t_size <span class=\"token operator\">=</span> _capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//置0</span>\n<span class=\"token punctuation\">}</span>\t\t\n</code></pre>\n<h2><a id=\"sizecapacity_166\"></a>⭐计算size和capacity</h2>\n<p>这里size和capacity肯定是不可以直接改动的，所以成员函数要用const修饰</p>\n<ul><li> <p>size：返回字符串有效字符长度（个数）</p> </li><li> <p>capacity：返回可存储有效字符的空间总大小</p> </li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">const</span> size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> size_t <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><font size=\"3\">其实在STL出来之前就已经有string类了，所以最开始使用的是<code>lenth()</code>而不是<code>size()</code>， size()与length()方法底层实现原理完全相同，引入size()的原因是为了与其他容器像vector、list的接口保持一 致，一般情况下基本都是用size()。</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8aa14d690c664a08997e269ba8afb90f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\111bc61e9ec044698ef1e273960b1fe2.png\"/></p>\n<h2><a id=\"_190\"></a>⭐重载[]</h2>\n<ul><li>功能：返回pos位置的字符</li></ul>\n<p>重载了两个版本，const对象不可被修改，而非const对象可以通过[]修改对应的字符</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"c_str_211\"></a>⭐c_str</h2>\n<ul><li>功能：返回指向字符数组的指针</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"clear_222\"></a>⭐clear</h2>\n<ul><li>功能：清空有效字符</li></ul>\n<pre><code class=\"prism language-c++\">//这里不会讲capacity置空，以空间换时间\nvoid clear()\n{\n\t_size = 0;\n\t_str[0] = '\\0';\n}\n</code></pre>\n<h2><a id=\"_237\"></a>⭐迭代器区间</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> iterator<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> const_iterator<span class=\"token punctuation\">;</span>\niterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\niterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _str <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconst_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconst_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _str <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>写到这里我们就可以验证范围for的底层就是一个迭代器</p>\n<p>在没有修改begin和end之前，范围for是可以跑起来的</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\abf190e50d02438fb0eaf480799f1d61.png\"/></p>\n<p>将bengin和end修改后，范围for就失效了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7245bd1ff2074a529413343e53a6bece.png\"/></p>\n<h2><a id=\"_270\"></a>⭐增</h2>\n<h3><a id=\"reserve_272\"></a>⚡reserve函数</h3>\n<ul><li>功能：为字符串预留空间，如果给的n小于等于capacity则不处理，n大于*capacity，就改变capacity的大小</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n    <span class=\"token comment\">//只处理大于size的</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> _capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//为'\\0'预留空间</span>\n\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> _str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _str<span class=\"token punctuation\">;</span>\n\t\t_str <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这里是将capacity直接换成了给定的n，与库中的有所区别，大家下去可以验证一下库中是如何处理的</span>\n\t\t_capacity <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"resize_294\"></a>⚡resize函数</h3>\n<ul><li>功能：将有效字符的个数该成n个，多出的空间用字符c填充，默认填充’\\0’</li></ul>\n<p>情况一：n&lt;=_size，将_size变为n</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d629bbe0bcc048438277b67a56a04675.png\"/></p>\n<br/>\n<br/> 情况二：_size &lt; n &lt;= _capaicty，将n-_size个空间填充为ch \n<p><img alt=\"在这里插入图片描述\" src=\"image\\28f925fa3e2d4706a39ecef91624cfb6.png\"/></p>\n<br/>\n<br/>\n<p>情况三：n &gt; _capacity 扩容</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4287665e401d42c9a37eb39558636cd4.png\"/></p>\n<br/>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n   <span class=\"token comment\">// n小于等于size时，只保留n个字符</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> _size<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_size <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//n大于size时</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n        <span class=\"token comment\">//大于capacity就要扩容</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> _capacity<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//复用reserve函数</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_size <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t_str<span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//最后添加'\\0'结尾</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"push_back_345\"></a>⚡push_back尾插</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_capacity <span class=\"token operator\">==</span> _size<span class=\"token punctuation\">)</span><span class=\"token comment\">//判断是否需要扩容</span>\n\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>_capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> _capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//还需要判断_capacity是否为0</span>\n\t_str<span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">++</span>_size<span class=\"token punctuation\">;</span>\n\t_str<span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"append_360\"></a>⚡append字符串追加</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsize_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//计算需要追加的字符串长度</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_capacity <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//扩容指定长度，因为len的长度不确定，所以无法直接扩2倍</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t_size <span class=\"token operator\">=</span> len <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">;</span>\t\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"operator_375\"></a>⚡operator+=</h3>\n<p>我们一般+=用 的比较多，不管是字符还是字符串都可以用</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//直接复用上面的push_back和append函数即可</span>\nstring<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstring<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">append</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"insert_394\"></a>⚡insert函数</h3>\n<ul><li>功能：指定位置插入</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9f7a78f261174ed59706909994ac2c97.png\"/><br/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//从pos位置插入n个字符ch</span>\nstring<span class=\"token operator\">&amp;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;=</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//断言pos最多只能在\\0位置插入</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_size <span class=\"token operator\">+</span> n <span class=\"token operator\">&gt;</span> _capacity<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>_size <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//新的有效字符个数</span>\n\tsize_t end <span class=\"token operator\">=</span> _size <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> pos <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_str<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _str<span class=\"token punctuation\">[</span>end  <span class=\"token operator\">-</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">--</span>end<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_size <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//\t更新_size</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//从pos位置插入字符串str</span>\nstring<span class=\"token operator\">&amp;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;=</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsize_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_size <span class=\"token operator\">+</span> len <span class=\"token operator\">&gt;</span> _capacity<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>_size <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsize_t end <span class=\"token operator\">=</span> _size <span class=\"token operator\">+</span> len<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> pos <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_str<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _str<span class=\"token punctuation\">[</span>end <span class=\"token operator\">-</span> len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">--</span>end<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_size <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_439\"></a>⭐删</h2>\n<p>功能：从pos位置删除len个字符</p>\n<p>这里的npos是一个静态的成员常量，npos为42亿9千万，是_size的最大值，C++不认为一个字符串会超过这么大，而len默认是npos，意为删除string对象从pos位置开始的所有字符</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\04470cbbbf454870a80e21b1a1dc4d18.png\"/><br/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> king\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">string</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\tstring<span class=\"token operator\">&amp;</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size_t len <span class=\"token operator\">=</span> npos<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//断言pos必须要小于_size</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> npos <span class=\"token operator\">||</span> len <span class=\"token operator\">+</span> pos <span class=\"token operator\">&gt;=</span> _size<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t_size <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\t\t\t\t_str<span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> _str <span class=\"token operator\">+</span> pos <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _str<span class=\"token punctuation\">;</span>\n\t\tsize_t size<span class=\"token punctuation\">;</span>\n\t\tsize_t capacity<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> size_t npos<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> size_t string<span class=\"token double-colon punctuation\">::</span>npos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//将npos初始化为-1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_479\"></a>⭐查</h2>\n<p>查找不到时返回npos</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//从字符串pos位置开始往后找字符c，返回该字符在字符串中的位置</span>\nsize_t <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">,</span> size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> _str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> npos<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//从字符串pos位置开始往后找匹配的字符串str，返回匹配的字符串的首位置</span>\nsize_t <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> npos<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> p <span class=\"token operator\">-</span> _str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>还有rfind函数从字符串pos位置从后往前找，大家有兴趣也可以实现一下</p>\n<h2><a id=\"_509\"></a>⭐改</h2>\n<p>修改的话，上面重载[]或是用迭代器就可以修改指定字符</p>\n<h2><a id=\"_513\"></a>⭐重载&lt;&lt;和&gt;&gt;</h2>\n<p>如果重载成成员函数，隐藏的this指针要是左操作数，调用时只能这样调用，看起来非常别扭，所以将这里的两个重载函数定义为全局的</p>\n<pre><code class=\"prism language-cpp\">string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns <span class=\"token operator\">&gt;&gt;</span> cin<span class=\"token punctuation\">;</span>\ns <span class=\"token operator\">&lt;&lt;</span> cout<span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//out &lt;&lt; s.c_str() &lt;&lt; endl;\t\t</span>\n\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nistream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//先清空s的有效字符</span>\n\t<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//每次读取一个字符</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">!=</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ts <span class=\"token operator\">+=</span> ch<span class=\"token punctuation\">;</span>\n\t\tch <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_550\"></a>⚽源码</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> king\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">string</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> iterator<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> const_iterator<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">:</span><span class=\"token function\">_size</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_capacity</span><span class=\"token punctuation\">(</span>_size<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>_size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>_str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_str<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_size<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_capacity<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>_capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//s1(s2)</span>\n\t\t<span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">:</span><span class=\"token function\">_str</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstring <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//s1=s2</span>\n\t\tstring<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tstring <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _size<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> size_t <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _capacity<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t_str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _str <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tconst_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tconst_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _str <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> _capacity<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> _str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _str<span class=\"token punctuation\">;</span>\n\t\t\t\t_str <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t\t\t\t_capacity <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> _size<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t_size <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> _capacity<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t_size <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_str<span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_capacity <span class=\"token operator\">==</span> _size<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>_capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> _capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_str<span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>_size<span class=\"token punctuation\">;</span>\n\t\t\t_str<span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsize_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_capacity <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_size <span class=\"token operator\">=</span> len <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tstring<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tstring<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">append</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tsize_t <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">,</span> size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> _str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> npos<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tsize_t <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> npos<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token keyword\">return</span> p <span class=\"token operator\">-</span> _str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tstring<span class=\"token operator\">&amp;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;=</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_size <span class=\"token operator\">+</span> n <span class=\"token operator\">&gt;</span> _capacity<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>_size <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//新的有效字符个数</span>\n\t\t\tsize_t end <span class=\"token operator\">=</span> _size <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> pos <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t_str<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _str<span class=\"token punctuation\">[</span>end  <span class=\"token operator\">-</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">--</span>end<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_size <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//\t更新_size</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tstring<span class=\"token operator\">&amp;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;=</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tsize_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_size <span class=\"token operator\">+</span> len <span class=\"token operator\">&gt;</span> _capacity<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>_size <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tsize_t end <span class=\"token operator\">=</span> _size <span class=\"token operator\">+</span> len<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> pos <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t_str<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _str<span class=\"token punctuation\">[</span>end <span class=\"token operator\">-</span> len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">--</span>end<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_size <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tstring<span class=\"token operator\">&amp;</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size_t len <span class=\"token operator\">=</span> npos<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> npos <span class=\"token operator\">||</span> len <span class=\"token operator\">+</span> pos <span class=\"token operator\">&gt;=</span> _size<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t_size <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\t\t\t\t_str<span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>_str <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> _str <span class=\"token operator\">+</span> pos <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">~</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _str<span class=\"token punctuation\">;</span>\n\t\t\t_str <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t\t_size <span class=\"token operator\">=</span> _capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\t\t\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _str<span class=\"token punctuation\">;</span>\n\t\tsize_t _size<span class=\"token punctuation\">;</span>\n\t\tsize_t _capacity<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//只算有效字符个数，不计入'\\0',new的时候直接+1</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> size_t npos<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> size_t string<span class=\"token double-colon punctuation\">::</span>npos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//cout &lt;&lt; s1 &lt;&lt; s2;</span>\n\tostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//out &lt;&lt; s.c_str() &lt;&lt; endl;\t\t当对象中有空白字符时无法捕获如string s(\"he \\l),所以要逐字符输出</span>\n\t\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tistream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">!=</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ts <span class=\"token operator\">+=</span> ch<span class=\"token punctuation\">;</span>\n\t\t\tch <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tstring <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstring <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstring <span class=\"token function\">s3</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t\tstring<span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tit <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">*</span>it <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tit <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tstring <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdefg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"** **\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> s1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tstring s2<span class=\"token punctuation\">;</span>\n\t\tcin <span class=\"token operator\">&gt;&gt;</span> s2<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> s2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts1 <span class=\"token operator\">+=</span> <span class=\"token char\">'#'</span><span class=\"token punctuation\">;</span>\n\t\ts1 <span class=\"token operator\">+=</span> <span class=\"token string\">\"$$$\"</span><span class=\"token punctuation\">;</span>\n \t\tsize_t ret<span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tstring <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdefg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsize_t ret <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cde\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ddd#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ssss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\tstring <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstring<span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> s1<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\n\tking<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong><font color=\"#37cfd8\" size=\"4\">以上就是string类的模拟实现了，我们模拟了一些常用的函数，模拟实现有利于我们了解string类，同时在学习其他容器时会方便很多，希望我的文章对你有所帮助，欢迎👍点赞 ，📝评论，🌟关注，⭐️收藏</font></strong></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/892575a7f02d45eb86d2fad798270778.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}