{"blogid": "126189224", "writerAge": "码龄1年", "writerBlogNum": "43", "writerCollect": "874", "writerComment": "1078", "writerFan": "3152", "writerGrade": "5级", "writerIntegral": "3456", "writerName": "二球悬铃木丶", "writerProfileAdress": "writer_image\\profile_126189224.jpg", "writerRankTotal": "6788", "writerRankWeekly": "2604", "writerThumb": "1256", "writerVisitNum": "40146", "blog_read_count": "405", "blog_time": "于 2022-08-07 08:44:55 发布", "blog_title": "C++入门（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#C_7\">一、C++关键字</a></li><li><a href=\"#_12\">二、命名空间</a></li><li><a href=\"#1_14\">1、命名空间的定义</a></li><li><a href=\"#2_58\">2、命名空间的使用</a></li><li><ul><li><a href=\"#1_77\">1、加命名空间名称及作用域限定符</a></li><li><a href=\"#2using_94\">2、使用using将命名空间中成员引入</a></li><li><a href=\"#3using_namespace__111\">3、使用using namespace 命名空间名称引入</a></li></ul>\n</li><li><a href=\"#C_128\">三、C++输入、输出</a></li><li><a href=\"#_146\">四、缺省参数</a></li><li><ul><li><a href=\"#1_147\">1、缺省参数的概念</a></li><li><a href=\"#2_168\">2、全缺省参数、半缺省参数</a></li></ul>\n</li><li><a href=\"#_190\">五、函数重载</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<p>`</p>\n<h1><a id=\"C_7\"></a>一、C++关键字</h1>\n<p>C++中有下图中的关键字，我们先了解一下。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\915a9bae704746a5b4c0f6b1b4105d06.png\"/></p>\n<h1><a id=\"_12\"></a>二、命名空间</h1>\n<p>在C/C++中，变量、函数和后面要学到的类都是大量存在的，这些变量、函数和类的名称将都存在于全局作用域中，可能会导致很多冲突。使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突或名字污染，namespace关键字的出现就是针对这种问题的。</p>\n<h1><a id=\"1_14\"></a>1、命名空间的定义</h1>\n<p>定义命名空间，需要使用到namespace关键字，后面跟命名空间的名字，然后接一对{}即可，{}中即为命名空间的成员。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//1. 普通的命名空间</span>\n<span class=\"token keyword\">namespace</span> N1 <span class=\"token comment\">// N1为命名空间的名称</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token comment\">// 命名空间中的内容，既可以定义变量，也可以定义函数</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">return</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//2. 命名空间可以嵌套</span>\n<span class=\"token keyword\">namespace</span> N2\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">return</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token keyword\">namespace</span> N3\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">return</span> left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//3. 同一个工程中允许存在多个相同名称的命名空间,编译器最后会合成同一个命名空间中。</span>\n<span class=\"token keyword\">namespace</span> N1\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> <span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">return</span> left <span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"2_58\"></a>2、命名空间的使用</h1>\n<p>下列代码会报错，是因为a是属于命名空间Test的，因此访问不了。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">namespace</span> Test\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>命名空间的使用有三种方式：</p>\n<h2><a id=\"1_77\"></a>1、加命名空间名称及作用域限定符</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> Test\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>Test<span class=\"token double-colon punctuation\">::</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//加命名空间名称及作用域限定符</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2using_94\"></a>2、使用using将命名空间中成员引入</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> Test\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">using</span> Test<span class=\"token double-colon punctuation\">::</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//使用usin将命名空间中成员引入</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3using_namespace__111\"></a>3、使用using namespace 命名空间名称引入</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> Test\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Test<span class=\"token punctuation\">;</span><span class=\"token comment\">//使用using namespace 命名空间名称引入</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"C_128\"></a>三、C++输入、输出</h1>\n<ol><li>使用cout标准输出(控制台)和cin标准输入(键盘)时，必须包含&lt; iostream &gt;头文件以及std标准命名空<br/> 间。注意：早期标准库将所有功能在全局域中实现，声明在.h后缀的头文件中，使用时只需包含对应头文件即可，后来将其实现在std命名空间下，为了和C头文件区分，也为了正确使用命名空间，规定C++头文件不带.h；旧编译器(vc 6.0)中还支持&lt;iostream.h&gt;格式，后续编译器已不支持，因此推荐使用+std的方式。</li><li>使用C++输入输出更方便，不需增加数据格式控制，比如：整形–%d，字符–%c</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> a <span class=\"token operator\">&gt;&gt;</span> b<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_146\"></a>四、缺省参数</h1>\n<h2><a id=\"1_147\"></a>1、缺省参数的概念</h2>\n<p>缺省参数是声明或定义函数时为函数的参数指定一个默认值。在调用该函数时，如果没有指定实参则采用该默认值，否则使用指定的实参。<br/> 例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有传参时，使用参数的默认值</span>\n\t<span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传参时，使用指定的实参</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2b39f27780454cf096044fe9f1512483.png\"/></p>\n<h2><a id=\"2_168\"></a>2、全缺省参数、半缺省参数</h2>\n<p>1.全缺省参数：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>所有参数都有默认值。<br/> 2.半缺省参数：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>.半缺省参数必须从右往左依次来给出，不能间隔着给；<br/> 缺省值必须为常量或者全局变量</p>\n<h1><a id=\"_190\"></a>五、函数重载</h1>\n<p><strong>函数重载</strong>：是函数的一种特殊情况，C++允许在同一作用域中声明几个功能类似的同名函数，这些同名函数的形参列表(参数个数 或 类型 或 顺序)必须不同，常用来处理实现功能类似数据类型不同的问题。<br/> 这也就是说，只要同名、参数不同，就是函数重载。<br/> 来看这题：</p>\n<p>0.下面关于函数重载描述错误的是( )【多选择】<br/> A.构成函数重载的条件是函数名相同就可以<br/> B.重载的函数参数可以相同<br/> C.重载的函数返回值可以相同<br/> D.C和C++都支持函数重载</p>\n<p>题解：<br/> A.函数名相同只是函数重载的条件之一</p>\n<p>B.重载函数必须参数列表有所不同（包括参数类型和参数个数）</p>\n<p>C.重载函数不依靠返回值来区分，所以返回值可以相同</p>\n<p>D.C不支持函数重载</p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bb7bf566230e401f97cbccfbb71df062.png\"/></p>\n<p>朋友们，下回再见。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}