{"blogid": "125229857", "writerAge": "码龄4年", "writerBlogNum": "473", "writerCollect": "6881", "writerComment": "11736", "writerFan": "24965", "writerGrade": "7级", "writerIntegral": "23733", "writerName": "不渴望力量的哈士奇", "writerProfileAdress": "writer_image\\profile_125229857.jpg", "writerRankTotal": "307", "writerRankWeekly": "33", "writerThumb": "7931", "writerVisitNum": "1020238", "blog_read_count": "4529", "blog_time": "已于 2022-06-14 07:33:56 修改", "blog_title": "〖Python WEB 自动化测试实战篇⑫〗- 实战 - PageObject框架设计（亦叫做 “页面对象” 模式）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<table><thead><tr><th align=\"center\"><font color=\"red\">万叶集</font></th></tr></thead><tbody><tr><td align=\"center\"><font color=\"red\">🎉 隐约雷鸣，阴霾天空。 🎉</font></td></tr><tr><td align=\"center\"><font color=\"red\">🎉 但盼风雨来，能留你在此。 🎉</font></td></tr></tbody></table>\n<p><a href=\"https://bbs.csdn.net/topics/606826583\"><img src=\"image\\baf2832b240e45e38a8b4c116f6c94e7.png\"/></a></p>\n<hr/>\n<blockquote>\n<p><strong>前言</strong>：<br/> ✌ 作者简介：<a href=\"https://blog.csdn.net/weixin_42250835?type=blog\">渴望力量的哈士奇</a> ✌，大家可以叫我 🐶哈士奇🐶 ，一位致力于 <font color=\"red\">TFS</font> 赋能的博主 ✌<br/> 🏆 <font color=\"red\" size=\"3\">CSDN博客专家认证、新星计划第三季全栈赛道 top_1 、华为云享专家、阿里云专家博主 🏆 </font><br/> 📫 如果文章知识点有错误的地方，请指正！和大家一起学习，一起进步👀<br/> 💬 人生格言：优于别人,并不高贵,真正的高贵应该是优于过去的自己。💬<br/> <font color=\"red\" size=\"3\">🔥 如果感觉博主的文章还不错的话，还请👍关注、点赞、收藏三连支持👍一下博主哦</font></p>\n<hr/>\n<table><tbody><tr align=\"center\"><th>专栏系列（点击解锁）</th><th>学习路线指引</th><th>知识定位</th></tr><tr><td align=\"center\" rowspan=\"10\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631906.html\"> <font color=\"red\" size=\"4.5\">🔥Python全栈白皮书🔥</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631913.html\"> <font color=\"#ff6984\" size=\"3\"> 零基础入门篇 </font> </a> </td><td>以浅显易懂的方式轻松入门，让你彻底爱上Python的魅力。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631928.html\"> <font color=\"#ff6984\" size=\"3\"> 语法进阶篇 </font> </a> </td><td>主要围绕多线程编程、正则表达式学习、含贴近实战的项目练习 。 </td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11798104.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化办公篇 </font> </a> </td><td>实现日常办公软件的自动化操作，节省时间、提高办公效率。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11834532.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化测试实战篇 </font> </a> </td><td>从实战的角度出发，先人一步，快速转型测试开发工程师。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840815.html\"> <font color=\"#ff6984\" size=\"3\"> 数据库开发实战篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840958.html\"> <font color=\"#ff6984\" size=\"3\"> 爬虫入门与实战</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841010.html\"> <font color=\"#ff6984\" size=\"3\">数据分析篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841028.html\"> <font color=\"#ff6984\" size=\"3\">前端入门+flask 全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841035.html\"> <font color=\"#ff6984\" size=\"3\">django+vue全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841157.html\"> <font color=\"#ff6984\" size=\"3\">拓展-人工智能入门</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123904.html\"> <font color=\"red\" size=\"4.5\">网络安全之路</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11170008.html\"> <font color=\"#ff6984\" size=\"3\"> 踩坑篇 </font> </a> </td><td>记录学习及演练过程中遇到的坑，便于后来居上者</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123907.html\"> <font color=\"#ff6984\" size=\"3\"> 网安知识扫盲篇 </font> </a> </td><td>三天打鱼，不深入了解原理，只会让你成为脚本小子。 </td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366695.html\"> <font color=\"#ff6984\" size=\"3\"> vulhub靶场漏洞复现 </font> </a> </td><td>让漏洞复现变得简单，让安全研究者更加专注于漏洞原理本身。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11324653.html\"> <font color=\"#ff6984\" size=\"3\"> shell编程篇 </font> </a> </td><td>不涉及linux基础，最终案例会偏向于安全加固方向。 <font color=\"red\">[待完结]</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11134620.html\"> <font color=\"#ff6984\" size=\"3\"> WEB漏洞攻防篇</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_10675569.html\"> <font color=\"#ff6984\" size=\"3\"> 渗透工具使用集锦</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366983.html\"> <font color=\"red\" size=\"4.5\">点点点工程师</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11563688.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Charles </font> </a> </td><td>软件测试数据包抓包分析神器</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393389.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Fiddler </font> </a> </td><td>一文学会 fiddle ，学不会倒立吃翔，<font color=\"red\">稀得！</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393395.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Jmeter </font> </a> </td><td>不仅是性能测试神器，更可用于搭建轻量级接口自动化测试框架。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11462996.html\"> <font color=\"#ff6984\" size=\"3\"> RobotFrameWork</font> </a> </td><td><font color=\"blue\">Python实现的自动化测试利器，该篇章仅介绍UI自动化部分。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11411882.html\"> <font color=\"#ff6984\" size=\"3\"> Java实现UI自动化</font> </a> </td><td><font color=\"blue\">文档写于2016年，Java实现的UI自动化，仍有借鉴意义。</font></td></tr><tr><td align=\"center\"> <a href=\"#\"> <font color=\"#ff6984\" size=\"3\"> MonkeyRunner</font> </a> </td><td><font color=\"blue\">该工具目前的应用场景已不多，文档已删，为了排版好看才留着。</font></td></tr></tbody></table>\n</blockquote>\n<hr/>\n<div align=\"center\">\n<img src=\"https://img-blog.csdnimg.cn/1c11651055dc45f58606951689560969.gif#pic_center\" width=\"1000\"/>\n</div>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#__PO__248\">🐳 什么是〖 PO模式 〗</a></li><li><ul><li><a href=\"#_PO__258\">🐬 PO 三层模式</a></li><li><a href=\"#_PO__282\">🐬 PO 设计模式的优点</a></li></ul>\n</li><li><a href=\"#__PO__294\">🐳 将改写的脚本转为 PO 设计模式</a></li><li><ul><li><a href=\"#__BasePage__316\">🐬 构建基础的 BasePage 层</a></li><li><a href=\"#__Page_HomePage_370\">🐬 构建首页的 Page 层（HomePage）</a></li><li><a href=\"#__Page_LoginPage_406\">🐬 构建登录页的 Page 层（LoginPage）</a></li><li><a href=\"#________Page_OrderPage_444\">🐬 构建 首页 - 订单 - 支付 流程的 Page 层（OrderPage）</a></li></ul>\n</li><li><a href=\"#_PO_Case_504\">🐳 PO 设计模式下测试Case的改造</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<p>在使用 Python 进行编码的时候，会使用自身自带的编码设计格式，比如说最常见的单例模式，稍微抽象一些的抽象工厂模式等等… 在利用 Python 做自动化测试的时候，是不是也有自己的设计模式呢？所以在今天这个小章节里，需要续了解的就是 python 作为自动化测试里面的一种设计模式，尤其是 <code>UI自动化</code> 的专属模式 —&gt; “PageObject” 自动化设计模式，简称 “PO模式” 。</p>\n<p>了解并实现 “PageObject” 自动化设计模式</p>\n<h2><a id=\"__PO__248\"></a>🐳 什么是〖 PO模式 〗</h2>\n<blockquote>\n<ul><li>一种在测试自动化中变得流行的设计模式，使得自动化测试脚本的代码量减少，避免代码重复，更加易读，减少维护的成本。</li><li>其实简单来说就是将页面的操作、脚本的Case、通用的页面元素分开的这样一个模式。</li><li>一般 <code>PO</code> 设计模式多数分为三层</li></ul>\n</blockquote>\n<h3><a id=\"_PO__258\"></a>🐬 PO 三层模式</h3>\n<blockquote>\n<ul><li>第一层：（核心、BasePage层） \n   <ul><li>对 <code>Selenium</code> 的底层进行二次封装，定义一个所有页面都继承的基础属性页面 —&gt; <code>BasePage</code> 。</li><li>封装 <code>Selenium</code> 的基本方法，例如：<code>元素定位、元素等待、导航页面、页面跳转等等...</code></li><li><code>PS：其实在使用的过程中不需要全部封装，用到多少方法就封装多少方法即可。（之前接触过其他大佬的自动化框架，他把所有的 selenium 的底层的方法做了一层封装，这样做很好，能够做很多的事情，但是比较繁重。实际上在真实使用的时候用不到那么多，所以不建议全部封装）。</code></li></ul> </li></ul>\n<hr/>\n<ul><li>第二层：（页面层、也叫配置层） \n   <ul><li>页面元素进行分离，每个元素只定位一次，隔离定位。如果页面改变，只需要改变相应的元素定位。</li><li>如果存在一些业务的属性、方法，需要将其通过业务方法的方式将业务与操作元素的动作分离开来。</li></ul> </li></ul>\n<hr/>\n<ul><li>第三层：（封装测试层） \n   <ul><li>使用单元测试框架对业务逻辑进行封装测试</li></ul> </li></ul>\n</blockquote>\n<h3><a id=\"_PO__282\"></a>🐬 PO 设计模式的优点</h3>\n<blockquote>\n<ul><li>UI 页面的频繁变化，导致页面 UI 元素频繁的变动，PO设计模式便于元素定位改变的维护。</li><li>传统线性自动化，多个用例脚本中需要反复的定位同一个元素，PO设计模式可以减少这部分频繁定位元素的代码量</li><li>小节：减少重复代码的冗余，便于UI页面频繁变更下的元素定位维护。</li></ul>\n</blockquote>\n<h2><a id=\"__PO__294\"></a>🐳 将改写的脚本转为 PO 设计模式</h2>\n<p>首先在项目里创建一个 <code>python package</code> 命名为 <code>pages</code> ，然后在 <code>pages</code> 创建一个模块 <code>base_page.py</code> 用来作为第一层的 <code>base_page核心层</code> 。</p>\n<p>如下图：</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\73fea793bcbc421591feb6dc24c48b04.png\" width=\"1000\"/>\n</div>\n<hr/>\n<h3><a id=\"__BasePage__316\"></a>🐬 构建基础的 BasePage 层</h3>\n<p>尝试构建最基础的 base_page 层，代码示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BasePage</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    1、第一层 - 核心层-BasePage层，定义一个所有页面都继承的page层\n    2、对将要使用的 selenium 的底层方法进行二次封装\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> driver<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># 构造函数，类的初始化</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        为了方便编写将 driver 初始化，\n        先使用 \"self.driver = webdriver.Chrome()\" 后续改为 self.driver = driver\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># self.driver = driver</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 定义全局的默认加载时间</span>\n        self<span class=\"token punctuation\">.</span>load_page<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>            <span class=\"token comment\"># 访问并加载网页</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">load_page</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># 访问并加载网页，如果 path 不为空的话，直接传给 driver.get() 访问</span>\n        <span class=\"token keyword\">if</span> path <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">by_xpath</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> xpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>          <span class=\"token comment\"># 二次封装 selenium 的 xpath 元素定位</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span>xpath<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">js_click</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> xpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>          <span class=\"token comment\"># JavaScript 定位元素，并执行 click</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>execute_script<span class=\"token punctuation\">(</span><span class=\"token string\">'arguments[0].click()'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span>xpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>到这里，base_page 层算是写完了，这就是一个最底层、最基础的类，这个类让我们实现了 selenium 底层的 Xpath 定位方法 与 JavaScript 定位元素方法，这些方法能够帮助我们更好的去完成后续的定位处理操作。 </code></p>\n<p>ok，接下我们再去编写各个页面层的东西。</p>\n<h3><a id=\"__Page_HomePage_370\"></a>🐬 构建首页的 Page 层（HomePage）</h3>\n<p>代码示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> pages<span class=\"token punctuation\">.</span>base_page <span class=\"token keyword\">import</span> BasePage    <span class=\"token comment\"># 导入 base_page 层</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HomePage</span><span class=\"token punctuation\">(</span>BasePage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 定义 FirstPage（继承 BasePage ）</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    1、第二层 - 各个页面单独封装成层，页面的元素、操作、流程\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">direct_to_login</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 首页跳转至登录页</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/div[5]/div[3]\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">direct_to_product</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 登陆成功后，跳转至首页</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/div[5]/div[1]\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 方法流程</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cross_to_login</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>direct_to_login<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 点击 \"登录\" 按钮进行登录</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cross_to_product</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>direct_to_product<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 点击 \"首页\" 跳转至首页</span>\n</code></pre>\n<h3><a id=\"__Page_LoginPage_406\"></a>🐬 构建登录页的 Page 层（LoginPage）</h3>\n<p>代码示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> pages<span class=\"token punctuation\">.</span>base_page <span class=\"token keyword\">import</span> BasePage    <span class=\"token comment\"># 导入 base_page 层</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginPage</span><span class=\"token punctuation\">(</span>BasePage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 定义 FirstPage（继承 BasePage ）</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    1、页面层(登录页) - 各个页面单独封装成层，页面的元素、操作、流程\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">login_username</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 登录页 - 用户名输入框</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/form/div[1]/div[2]/div/input\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">login_password</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 登录页 - 密码输入框</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/form/div[2]/div[2]/div/input\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">login_button</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 登录页 - 登录按钮</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/form/div[3]/button\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 登录Case</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 登录方法，传入 username 与 password</span>\n        self<span class=\"token punctuation\">.</span>login_username<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>login_password<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>login_button<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"________Page_OrderPage_444\"></a>🐬 构建 首页 - 订单 - 支付 流程的 Page 层（OrderPage）</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n<span class=\"token keyword\">from</span> pages<span class=\"token punctuation\">.</span>base_page <span class=\"token keyword\">import</span> BasePage    <span class=\"token comment\"># 导入 base_page 层</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderPage</span><span class=\"token punctuation\">(</span>BasePage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 定义 FirstPage（继承 BasePage ）</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    1、页面层(登录页) - 各个页面单独封装成层，页面的元素、操作、流程\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 下单 - 第一个产品</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/div[4]/div[2]/a[1]\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">ticket_book</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 门票 - 预定（按钮）</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/div[5]/div[2]/div[2]/a\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">book_date</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 门票 - 选择日期</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/form/div[1]/div[1]/div[2]/div/input\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">to_order</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># 门票下单</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/form/div[4]/div/button\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay_off</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 门票下单 - 支付</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id='app']/div[1]/form/div/div/button\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 门票下单 - 确认支付</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"/html/body/div[5]/div[3]/button[2]\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 下单成功Case</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">place_order</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>ticket_book<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>book_date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span><span class=\"token string\">\"2022-06-16\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>to_order<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        element <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pay_off<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>execute_script<span class=\"token punctuation\">(</span><span class=\"token string\">'arguments[0].click()'</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span>\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<p>以上，我们准备的所有页面需要准备的元素定位、基线流程算是写完了，但是具体的用例，应该如何实现呢？继续往下看。</p>\n<h2><a id=\"_PO_Case_504\"></a>🐳 PO 设计模式下测试Case的改造</h2>\n<p>代码示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> pages<span class=\"token punctuation\">.</span>home_page <span class=\"token keyword\">import</span> HomePage\n<span class=\"token keyword\">from</span> pages<span class=\"token punctuation\">.</span>login_page <span class=\"token keyword\">import</span> LoginPage\n<span class=\"token keyword\">from</span> pages<span class=\"token punctuation\">.</span>order_page <span class=\"token keyword\">import</span> OrderPage\n\n\n<span class=\"token triple-quoted-string string\">'''\n1、初始化 - 打开浏览器，设置浏览器大小\n2、最终操作 - 关闭浏览器\n3、用例部分 - 登录 与 购买操作、下订单、支付\n'''</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestTravel</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUpClass</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                    <span class=\"token comment\"># 每个测试类在加载之前执行一次 setUpClass ，初始化方法</span>\n        cls<span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        cls<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>maximize_window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_a_order</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#初始化参数</span>\n        username <span class=\"token operator\">=</span> <span class=\"token string\">'13500000001'</span>\n        password <span class=\"token operator\">=</span> <span class=\"token string\">'Success@2020'</span>\n\n        <span class=\"token comment\">#初始化界面</span>\n        home_page <span class=\"token operator\">=</span> HomePage<span class=\"token punctuation\">(</span>driver<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token string\">\"http://django.t.mukewang.com/#/\"</span><span class=\"token punctuation\">)</span>\n        login_page <span class=\"token operator\">=</span> LoginPage<span class=\"token punctuation\">(</span>driver<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">)</span>\n        order_page <span class=\"token operator\">=</span> OrderPage<span class=\"token punctuation\">(</span>driver<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#跳转登录</span>\n        home_page<span class=\"token punctuation\">.</span>cross_to_login<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#登录</span>\n        login_page<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 跳转至订单页</span>\n        home_page<span class=\"token punctuation\">.</span>cross_to_product<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#下单</span>\n        order_page<span class=\"token punctuation\">.</span>place_order<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDownClass</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cls<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 彻底退出浏览器</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><code>这里改造完成之后，记得将 \"BasePage 层\" 的 '# self.driver = driver' 取消注释，并将 'self.driver = webdriver.Chrome()' 注释掉 。</code></p>\n<hr/>\n<p>以上就是一个比较完整的通过 <code>PO</code> 的方式来连接三个页面与基础的 <code>base_page</code> 来写出的更简洁一些的测试用例。</p>\n<p>运行结果如下：（速度可能过快，担待一下，gif 只有15秒的时间）</p>\n<hr/>\n<div align=\"center\">\n<img src=\"https://img-blog.csdnimg.cn/40e3cf7a47a34ccc9fddfb24b83af320.gif#pic_center\" width=\"1000\"/>\n</div>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}