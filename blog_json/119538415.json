{"blogid": "119538415", "writerAge": "码龄14年", "writerBlogNum": "1104", "writerCollect": "4346", "writerComment": "520", "writerFan": "30879", "writerGrade": "10级", "writerIntegral": "122604", "writerName": "跨链技术践行者", "writerProfileAdress": "writer_image\\profile_119538415.jpg", "writerRankTotal": "1495800", "writerRankWeekly": "1158", "writerThumb": "4843", "writerVisitNum": "12403639", "blog_read_count": "2319", "blog_time": "于 2021-08-09 15:06:50 发布", "blog_title": "idea搭建rust开发环境，解决不识别Rust工程的解决办法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><code>Rust</code> 是一个由Mozilla主导开发的通用编译型编译语言。它的设计准则为\"安全,并发,实用\"，支持函数式，并发式，过程式以及面向对象的编程风格。</p>\n<p>Rust插件的主要特性如下:</p>\n<ol><li>导航特性：Go to Class、Go to Symbol、Go to Super Module、Structure、Go to Definition。</li><li>编辑器特性：代码自动完成、格式化（计划支持rustfmt）、合并行、智能按键（如自动插入匹配的符号）、自动填充后缀、基本的Intention和重构（如引入变量、重命名等）。</li><li>支持Cargo，提供了一个UI用于运行测试用例和应用程序，不过这要求在Cargo端进行一些配置</li></ol>\n<p>IntelliJ 是最好的使用的Java IDE之一 ，它支持各种插件，其中<a href=\"https://github.com/intellij-rust/intellij-rust\">intellij-rust</a>就是<code>Rust</code>在IntelliJ上的插件，可以使用该插件在IntelliJ上面进行Rust开发，下面就简单介绍下如何安装Rust并使用IntelliJ做为其IDE。</p>\n<p><strong>安装Rust</strong></p>\n<p>安装Rust不要直接Rust语言本身，例如使用<code>brew install rust</code>就只是安装了rust语言本身而已，应该安装的是<code>rustup</code>,<code>rustup</code>是rust官方版本的管理工具，是安装rust的首选。它的主要特点是：</p>\n<ul><li>管理Rust二进制文件</li><li>配置Rust工具链</li><li>管理Rust相关组件</li><li>只依赖bash，curl和常见的unix工具</li><li>支持多平台</li></ul>\n<p>在使用Rust开发过程中常常是用到的工具有<code>rustc</code>,<code>rust-src</code>,<code>cargo</code>，这些都可以使用rustup进行管理。<br/> 其中<code>cargo</code>是Rust项目管理的工具，提供了一系列的工具，从项目的建立，构建到测试，运行到部署，都为Rust项目的管理提供尽可能完成的手段。<br/><code>rustc</code>是rust语言的编译器。<br/><code>rust-src</code>是rust标准库。</p>\n<p><strong>安装rustup:</strong></p>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td> <p>1</p> </td><td> <p><code>curl https:</code><code>//sh</code><code>.rustup.rs -sSf | sh</code></p> </td></tr></tbody></table>\n<p>安装过程中会让选择安装方式，使用默认方式安装即可，默认安装<code>cargo</code>。安装之后需要设置两个目录到PATH变量中:</p>\n<ul><li>$HOME/.cargo/bin，cargo的bin目录</li><li>$HOME/.cargo/env，为shell配置的目录</li></ul>\n<p>通过<code>rustup help</code>可以看到rustup的相关命令，上述的默认按照并不包含组件<code>rust-src</code>的安装，需要单独安装组件<code>rust-src</code>:</p>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td> <p>1</p> </td><td> <p><code>rustup component add rust-src</code></p> </td></tr></tbody></table>\n<p>这样Rust的环境安装都已经完成，在使用IntelliJ做为Rust的IDE中要用的组件包括:<code>rustc</code>,<code>cargo</code>和<code>rust-src</code>。</p>\n<p><strong>安装IntelliJ插件</strong></p>\n<p>需要安装两个插件 <code>intellij-rust</code>和<code>intellij-toml</code>, <code>intellij-rust</code>是Rust语言插件，<code>intellij-toml</code>是为Toml语言的插件，是为cargo的配置文件cargo.toml使用。</p>\n<p>安装方式：<code>Perferences.. -&gt; Plugins </code>在Marketplact中直接搜索Rust</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\a8debf1cff77ff9a1b5611e5237a8477.png\"/></p>\n<p>同样方式搜索<code>toml</code>并安装。</p>\n<p>安装完插件之后就可以新建一个项目选择Rust：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\eced92dcfc1a14244c0ea7e67260321b.png\"/></p>\n<p>可以看到 Toolchain location 是配置的$HOME/.cargo/bin,而Standard library是之前安装的<code>rust-src</code>的目录。</p>\n<p>创建项目成功可以看到一个完整的rust项目:</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\964c51dc3a8f8ad6a03bd3dd55a1f364.png\"/></p>\n<h1>解决rust无法识别目录 ：</h1>\n<p> </p>\n<pre><code>环境：windows10 ，已经安装rust语言插件\n\n问题：Idea打开Rust项目目录不识别Rust工程，代码不能跳转\n\n解决办法：修改.iml文件的内容如下，然后保存，idea会自动生成sourceFolder等相关的源码路径配置。如果Idea报找不到Cargo.toml文件，则根据提示找到项目的根Cargo.toml文件。\n\n注意，module type 要设置为RUST_MODULE 而不是JAVA_MODULE。\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;module type=\"RUST_MODULE\" version=\"4\"&gt;\n  &lt;component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\"&gt;\n    &lt;exclude-output /&gt;\n    &lt;content url=\"file://$MODULE_DIR$\"/&gt;\n    &lt;orderEntry type=\"inheritedJdk\" /&gt;\n    &lt;orderEntry type=\"sourceFolder\" forTests=\"false\" /&gt;\n  &lt;/component&gt;\n&lt;/module&gt;\n配置完成后，打开rust工程的目录，idea会自动将其识别为Rust工程，然后代码就可以跳转了。\n\n下图是配置完成后xxx.iml文件的内容，其中xxx是项目的名称。\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;module type=\"RUST_MODULE\" version=\"4\"&gt;\n  &lt;component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\"&gt;\n    &lt;exclude-output /&gt;\n    &lt;content url=\"file://$MODULE_DIR$\"&gt;\n      &lt;sourceFolder url=\"file://$MODULE_DIR$/dir-xxx/src\" isTestSource=\"false\" /&gt;\n      &lt;sourceFolder url=\"file://$MODULE_DIR$/dir-xxx/examples\" isTestSource=\"false\" /&gt;\n      &lt;sourceFolder url=\"file://$MODULE_DIR$/dir-xxx/tests\" isTestSource=\"true\" /&gt;\n      &lt;sourceFolder url=\"file://$MODULE_DIR$/dir-xxx/benches\" isTestSource=\"true\" /&gt;\n      &lt;excludeFolder url=\"file://$MODULE_DIR$/dir-xxx/target\" /&gt;\n      &lt;excludeFolder url=\"file://$MODULE_DIR$/target\" /&gt;\n     &lt;/content&gt;\n    &lt;orderEntry type=\"inheritedJdk\" /&gt;\n    &lt;orderEntry type=\"sourceFolder\" forTests=\"false\" /&gt;\n  &lt;/component&gt;\n&lt;/module&gt;\n配置完成xxx.iml文件后，会自动更新modules.xml misc.xml vcs.xml  workspace.xml等相关的配置文件。\n\nmodules.xml文件内容示例如下。\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project version=\"4\"&gt;\n  &lt;component name=\"ProjectModuleManager\"&gt;\n    &lt;modules&gt;\n      &lt;module fileurl=\"file://$PROJECT_DIR$/.idea/xxx.iml\" filepath=\"$PROJECT_DIR$/.idea/xxx.iml\" /&gt;\n    &lt;/modules&gt;\n  &lt;/component&gt;\n&lt;/project&gt;\n备注：\n\nxxx.iml文件的位置可能是在.idea目录下，也可能是在工程根目录下\n</code></pre>\n<p></p>\n</div>\n</div>"}