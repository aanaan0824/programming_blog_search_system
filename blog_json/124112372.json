{"blogid": "124112372", "writerAge": "码龄4年", "writerBlogNum": "20", "writerCollect": "58", "writerComment": "9", "writerFan": "10", "writerGrade": "2级", "writerIntegral": "226", "writerName": "进击的编程喵", "writerProfileAdress": "writer_image\\profile_124112372.jpg", "writerRankTotal": "60176", "writerRankWeekly": "27619", "writerThumb": "18", "writerVisitNum": "9862", "blog_read_count": "3654", "blog_time": "已于 2022-04-11 23:15:22 修改", "blog_title": "C++实现简单线程池", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>线程池</h1>\n<p>尽管C++11加入线程库，但C++对多线程的支持还是比较初级，稍微高级的用法还是需要自己实现。线程池是提前创建并维护多个线程，等待管理者分配任务的机制，避免短时间线程创建和销毁的代价，一般是IO密集型的场景使用。主要包括线程管理器、任务线程、消息队列</p>\n<ul><li> <p>线程管理器：主要功能是创建和启动线程、调配任务、管理线程等。主要有三个方法:</p>\n<ul><li>start：创建一定数量线程池</li><li>stop：终止所有线程并回收资源</li><li>addTask：添加任务到消息队列</li></ul> </li><li> <p>任务线程：等待分配任务的线程，一般使用条件变量实现等待和通知机制</p> </li><li> <p>任务队列：存放任务的缓冲机制，队列有调度功能，使用优先队列实现，但需要锁限制并发</p> </li></ul>\n<h1><a id=\"_12\"></a>线程池工作的几种情况</h1>\n<p>按任务队列和线程池大小可分成四种情况：</p>\n<ol><li>没有任务，线程池中任务队列为空，啥也不做</li><li>添加小于等于线程池数量的任务，主线程添加任务后通知唤醒线程池中的线程开始取任务。此时任务缓冲队列还是空</li><li>添加大于线程池数量的任务，继续添加发现线程池用完，于是存入缓冲队列，工作线程空闲后主动从任务队列取任务执行</li><li>添加大于线程池数量的任务，且任务队列已满，当线程中线程用完，且任务缓冲队列已满，进入等待状态，等待任务缓冲队列通知</li></ol>\n<h1><a id=\"_21\"></a>线程池的实现</h1>\n<h2><a id=\"_23\"></a>声明</h2>\n<p>使用C++11中的bind/function定义和调用任务处理函数</p>\n<p>任务处理函数的声明、优先级、带优先级的任务：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> Task_type<span class=\"token punctuation\">;</span><span class=\"token comment\">//任务类型</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">taskPriorityE</span> <span class=\"token punctuation\">{<!-- --></span>LOW<span class=\"token punctuation\">,</span>MIDDLE<span class=\"token punctuation\">,</span>HIGH<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//优先级</span>\n<span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>taskPriorityE<span class=\"token punctuation\">,</span>Task_type<span class=\"token operator\">&gt;</span> TaskPair<span class=\"token punctuation\">;</span><span class=\"token comment\">//任务优先级和任务类型组合的任务</span>\n</code></pre>\n<p>禁用拷贝构造和赋值运算符：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ThreadPool<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ThreadPool<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ThreadPool<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>声明线程池大小、任务队列、互斥锁和条件变量、线程池是否开始</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> m_threads_size<span class=\"token punctuation\">;</span><span class=\"token comment\">//线程池大小</span>\nstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>thread<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> m_threads<span class=\"token punctuation\">;</span><span class=\"token comment\">//线程池</span>\nstd<span class=\"token double-colon punctuation\">::</span>priority_queue<span class=\"token operator\">&lt;</span>TaskPair<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>TaskPair<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>TaskPriorityCmp<span class=\"token operator\">&gt;</span>  m_tasks<span class=\"token punctuation\">;</span><span class=\"token comment\">//任务队列</span>\nstd<span class=\"token double-colon punctuation\">::</span>mutex m_mutex<span class=\"token punctuation\">;</span><span class=\"token comment\">//STL队列不是线程安全的，因此需要结合互斥锁</span>\nstd<span class=\"token double-colon punctuation\">::</span>condition_variable m_cond<span class=\"token punctuation\">;</span><span class=\"token comment\">//条件变量</span>\n<span class=\"token keyword\">bool</span> m_started<span class=\"token punctuation\">;</span><span class=\"token comment\">//是否开始</span>\n</code></pre>\n<p>另外值得注意的是为了安全性和便捷性，只暴露stop和addTask两个接口给用户，其他start和threadLoop、take等接口都被声明为私有函数，</p>\n<h2><a id=\"_55\"></a>实现</h2>\n<p>构造函数通过传入的参数，初始化线程池大小、锁、条件变量、是否开始，之后开始运行</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token class-name\">ThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> threads_size<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span><span class=\"token function\">m_threads_size</span><span class=\"token punctuation\">(</span>threads_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_mutex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_cond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_started</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>start中创建线程，并将线程和任务处理函数进行绑定</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>m_threads<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_started<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_started <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    m_threads<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>m_threads_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m_threads_size<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        m_threads<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ThreadPool<span class=\"token double-colon punctuation\">::</span>threadLoop<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>stop中通知所有线程，并将所有线程分离，最后将线程池清空</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>m_threads<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_started<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_started <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    m_threads<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>m_threads_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m_threads_size<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        m_threads<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ThreadPool<span class=\"token double-colon punctuation\">::</span>threadLoop<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>threadLoop中循环从队列中拿任务并执行</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">threadLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m_started<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Task_type task <span class=\"token operator\">=</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>addTask是添加任务到任务队列，并通知线程。为方便使用重载addTask函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Task_type<span class=\"token operator\">&amp;</span> task<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token double-colon punctuation\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">&gt;</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    TaskPair <span class=\"token function\">taskPair</span><span class=\"token punctuation\">(</span>MIDDLE<span class=\"token punctuation\">,</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>taskPair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_cond<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TaskPair<span class=\"token operator\">&amp;</span> taskPair<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n    std<span class=\"token double-colon punctuation\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">&gt;</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>taskPair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_cond<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>take从队列中拿任务，若队列为空且已开始，则等待，对应上面的情况1，若不空则从队列拿任务并返回</p>\n<pre><code class=\"prism language-cpp\">ThreadPool<span class=\"token double-colon punctuation\">::</span>Task_type <span class=\"token class-name\">ThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token double-colon punctuation\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">&gt;</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>m_started<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        m_cond<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    Task_type task<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> m_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>m_started<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        task <span class=\"token operator\">=</span> m_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n        m_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> m_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> task<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后提醒下，由于STL的队列不是线程安全，因此对队列的添加addTask、删除take都需要锁，当然后续会改进成使用boost库中线程安全的队列，这样就能大大提高并发性。</p>\n<h1><a id=\"_160\"></a>总结</h1>\n<p>使用C++11中的thread、mutex、condition_variable、priority_queue、vector实现简单的线程池。后续考虑使用无锁队列优化。完整代码见<a href=\"https://github.com/attackoncs/MyThreadPool\">这里</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}