{"blogid": "124112562", "writerAge": "码龄1年", "writerBlogNum": "43", "writerCollect": "699", "writerComment": "1183", "writerFan": "3881", "writerGrade": "6级", "writerIntegral": "4821", "writerName": "白晨并不是很能熬夜", "writerProfileAdress": "writer_image\\profile_124112562.jpg", "writerRankTotal": "4103", "writerRankWeekly": "2534", "writerThumb": "1451", "writerVisitNum": "45088", "blog_read_count": "1687", "blog_time": "已于 2022-04-15 18:53:05 修改", "blog_title": "【刷题日记】C++入门必刷经典题目", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><font size=\"5\">😀大家好，我是<strong>白晨</strong>，一个不是很能熬夜😫，但是也想日更的人✈。</font>如果喜欢这篇文章，<strong>点个赞</strong>👍，<strong>关注一下</strong>👀白晨吧！你的支持就是我最大的动力！💪💪💪</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/0353405959954abebb907ea6c1dfc315.gif#pic_center\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#__8\">🏹 前言</a></li><li><a href=\"#_C_26\">🗡 C++入门必刷经典题目</a></li><li><ul><li><a href=\"#1_30\">🪓1.选择题</a></li><li><ul><li><a href=\"#11__34\">🍕1.1 类的类型转换</a></li><li><a href=\"#12__46\">🍔1.2 拷贝构造调用次数</a></li><li><a href=\"#13__61\">🍟1.3 友元函数</a></li><li><a href=\"#14__73\">🌭1.4 静态数据成员</a></li><li><a href=\"#15_new_93\">🍿1.5 new创建对象</a></li><li><a href=\"#16__104\">🧂1.6 模板格式</a></li><li><a href=\"#17__116\">🥓1.7 空类大小</a></li><li><a href=\"#18__130\">🥚1.8 析构函数</a></li><li><a href=\"#19__149\">🍳1.9 赋值运算符</a></li><li><a href=\"#110__167\">🧇1.10 构造函数调用</a></li><li><a href=\"#111__179\">🥞1.11 初始化列表</a></li><li><a href=\"#112_const_188\">🧈1.12 const</a></li><li><a href=\"#113_delete_this_200\">🍞1.13 delete this</a></li><li><a href=\"#114_c_str_214\">🥐1.14 c_str()</a></li><li><a href=\"#115_resizereserve_227\">🥨1.15 resize/reserve</a></li><li><a href=\"#116_cerr_246\">🥯1.16 cerr</a></li><li><a href=\"#117__255\">🥖1.17 基类与派生类</a></li><li><a href=\"#118__264\">🧀1.18 继承的对象模型</a></li></ul>\n</li><li><a href=\"#2_275\">🔨2.编程题</a></li><li><ul><li><a href=\"#21__279\">🥝2.1 字符串相加</a></li><li><a href=\"#22__333\">🥥2.2 字符串相乘</a></li><li><a href=\"#23__495\">🍇2.3 删除有序数组中的重复项</a></li><li><a href=\"#24__560\">🍈2.4 杨辉三角</a></li><li><a href=\"#25__I_606\">🍉2.5 只出现一次的数字 I</a></li><li><a href=\"#26__II_645\">🍊2.6 只出现一次的数字 II</a></li><li><a href=\"#27__III_761\">🍋2.7 只出现一次的数字 III</a></li><li><a href=\"#28__901\">🍌2.8 电话号码的字母组合</a></li><li><a href=\"#29__958\">🍍2.9 连续子数组的最大和</a></li><li><a href=\"#210__1016\">🥭2.10 最小栈</a></li><li><a href=\"#211__1084\">🍎2.11 栈的压入、弹出序列</a></li><li><a href=\"#212__1131\">🍏2.12 逆波兰表达式求值</a></li><li><a href=\"#213_K_1196\">🍐2.13 数组中的第K个最大元素</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__1266\">⚔ 后记</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"__8\"></a>🏹 前言</h1>\n<hr/>\n<p>白晨这段时间回头复盘了一下我的C++学习之旅，发现了许多坎坷和难点。所以，白晨整理了我入门学习C++遇到的好题目以及大坑🧐。</p>\n<p>整理的题目分为两个大类：<code>选择题</code>和<code>编程题</code>。</p>\n<ul><li>选择题</li></ul>\n<p>白晨整理了许多入门易错难掌握的知识点，相当于是对于重难知识点的一次复盘，希望大家可以加深对重难知识点的理解。</p>\n<ul><li>编程题</li></ul>\n<p>其中主要是对于<code>C++输入输出</code>，<code>STL（标准模板库）的使用</code>，<code>动态规划</code>，<code>数据结构</code>等题目，题目不是很难，但是很有代表性和经典性，是每个C++入门应该都会见过并且掌握的题目。</p>\n<hr/>\n<h1><a id=\"_C_26\"></a>🗡 C++入门必刷经典题目</h1>\n<hr/>\n<h2><a id=\"1_30\"></a>🪓1.选择题</h2>\n<hr/>\n<h3><a id=\"11__34\"></a>🍕1.1 类的类型转换</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a6c1986a09f446f4991b5762e55eafcf.png\"/><br/> 📘 <code>答案解析</code> :</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d79fb25248114c21863515a9afc78379.png\"/></p>\n<hr/>\n<h3><a id=\"12__46\"></a>🍔1.2 拷贝构造调用次数</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ea39676752034c8fa7c1e473b3d4b749.png\"/><br/> 📘 <code>答案解析</code> :</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bf669a0d107d42c3a5e4af0dad59cd21.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\94d55da893274c56958d590eff6b14c3.png\"/></p>\n<hr/>\n<h3><a id=\"13__61\"></a>🍟1.3 友元函数</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ff985b48240b48578f981beca9b1ce0e.png\"/></p>\n<p>📘 <code>答案解析</code> :<br/> <img alt=\"在这里插入图片描述\" src=\"image\\68ffa5ebe0514d37bc1bd7d6f590e804.png\"/></p>\n<hr/>\n<h3><a id=\"14__73\"></a>🌭1.4 静态数据成员</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f08dd2a982224720aa3feca3dbea59a5.png\"/></p>\n<p>📘 <code>答案解析</code> :<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8281e0b3ccdf467fbf1ac72ed9c9d7bf.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4633f34399f14b849d1c86dcd8e31162.png\"/></p>\n<p>📘 <code>答案解析</code> :<br/> <img alt=\"在这里插入图片描述\" src=\"image\\84adb22695b940f39d6217a119128849.png\"/></p>\n<hr/>\n<h3><a id=\"15_new_93\"></a>🍿1.5 new创建对象</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\323d06bfa4e744908436c627b1b101e1.png\"/><br/> 📘 <code>答案解析</code> :<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0901ce6eca4b402595b15ce1b69f59f5.png\"/></p>\n<hr/>\n<h3><a id=\"16__104\"></a>🧂1.6 模板格式</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\141cd0872c3f4f2ab632a5aa1e6f4af8.png\"/></p>\n<p>📘 <code>答案解析</code> :<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d7747c23be064dd9a0bef1344b9d67a8.png\"/></p>\n<hr/>\n<h3><a id=\"17__116\"></a>🥓1.7 空类大小</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c189297785334a6eb96b87f8ef65b43b.png\"/><br/> 📘 <code>答案解析</code> :</p>\n<blockquote>\n<p>空类系统为了表示占位，会分配一个字节的空间</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\df03a6518255499ba202a6f923716dcc.png\"/></p>\n<hr/>\n<h3><a id=\"18__130\"></a>🥚1.8 析构函数</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e677e232af3d4ba48883791762fa9a94.png\"/><br/> 📘 <code>答案解析</code> :</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f1cea2ac66904e8eb1f942db68231047.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a4d9e4dac9c946ed9c10822f93564e89.png\"/></p>\n<p>📘 <code>答案解析</code> :<br/> <img alt=\"在这里插入图片描述\" src=\"image\\514fb35431894fd9b3f71582059b9fae.png\"/></p>\n<hr/>\n<h3><a id=\"19__149\"></a>🍳1.9 赋值运算符</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\985b03db2afb41939e722b839155ab6d.png\"/></p>\n<p>📘 <code>答案解析</code> :<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4dd53844df8a4609aeba74553ae86435.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5d53536065334ab6869646dbf594cf3b.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7b688842a7dc4e09a3efe2191c7ba142.png\"/></p>\n<hr/>\n<h3><a id=\"110__167\"></a>🧇1.10 构造函数调用</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3ac464a03d6749f4bb9968e0ace5aa84.png\"/></p>\n<p>📘 <code>答案解析</code> :<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fb80bdd5eee84e7b88201e46387fafa8.png\"/></p>\n<hr/>\n<h3><a id=\"111__179\"></a>🥞1.11 初始化列表</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cbc47672131241ada53568ecde09f8b2.png\"/></p>\n<hr/>\n<h3><a id=\"112_const_188\"></a>🧈1.12 const</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\724d873c8a4f4e0b95572637bf2c1ee8.png\"/><br/> 📘 <code>答案解析</code> :</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6f6c91f1df1c4780addf3de0332d39b9.png\"/></p>\n<hr/>\n<h3><a id=\"113_delete_this_200\"></a>🍞1.13 delete this</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\93ad5c9f3a3e4d8a8eb1311549f95580.png\"/><br/> 📘 <code>答案解析</code> :</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e9d2b4243d994974a24651d1dd9fb927.png\"/></p>\n<p>这个写法是正确的，但是不推荐。</p>\n<hr/>\n<h3><a id=\"114_c_str_214\"></a>🥐1.14 c_str()</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b6cd2b733b714cc485a593a0d4f183b5.png\"/><br/> 📘 <code>答案解析</code> :</p>\n<p>虽然从内容上来说，a == b，但是a，b是两个不同的对象，空间中所存储的位置也不同，<code>c_str</code> 返回值是 <code>const char*</code> ，也就是空间中的地址，所以不可能相等。</p>\n<p>所以选择A。</p>\n<hr/>\n<h3><a id=\"115_resizereserve_227\"></a>🥨1.15 resize/reserve</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d36c9ee20d9e4535861ef4c309d1f01b.png\"/><br/> 📘 <code>答案解析</code> :</p>\n<p>str.reserve(111); //调整容量为 111</p>\n<p>str.resize(5); //调整元素个数为 5</p>\n<p>str.reserve(50); //<strong>调整容量为 50，由于调整的容量小于已有空间容量，故容量不会减小</strong></p>\n<p>所以size=5 capacity=111</p>\n<p>故答案为: C</p>\n<hr/>\n<h3><a id=\"116_cerr_246\"></a>🥯1.16 cerr</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c2dce81aec374a7cbd3685d2b8a083bb.png\"/></p>\n<hr/>\n<h3><a id=\"117__255\"></a>🥖1.17 基类与派生类</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\900aa06e15134110a1a9b0da4c15dd49.png\"/></p>\n<hr/>\n<h3><a id=\"118__264\"></a>🧀1.18 继承的对象模型</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6456f7ad6822443f803f3954172decf5.png\"/></p>\n<hr/>\n<h2><a id=\"2_275\"></a>🔨2.编程题</h2>\n<hr/>\n<h3><a id=\"21__279\"></a>🥝2.1 字符串相加</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d41f12a39da9421eb385330bd13ff03f.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/add-strings/\">字符串相加</a></p>\n<blockquote>\n<p>模拟：</p>\n</blockquote>\n<p>🎉 <code>具体思路</code>：</p>\n<p>我们可以模拟正常的加法，从个位开始，逐位相加，模拟过程中要注意的是：</p>\n<ul><li>我们取出字符串的每一个元素都是字符，所以不能直接将其相加，必须要减去<code>'0'</code> 才能得到这个数的真实值。</li><li>当一个数的每一位都已经遍历完了，如果另一个数还没遍历完，则在这个数的高位补0。</li><li>如果两个数字之和大于等于10，要进位。</li><li>每次向要返回字符串插入一个本次相加得到的<strong>个位数</strong>。</li><li>最后得到的返回字符串是反的，我们要将其反转。</li></ul>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    string <span class=\"token function\">addStrings</span><span class=\"token punctuation\">(</span>string num1<span class=\"token punctuation\">,</span> string num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        string ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 当给定的数字没有遍历完或者要进位时，进入循环</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> flag <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 判断一个数是否已经遍历完</span>\n            <span class=\"token keyword\">int</span> val1 <span class=\"token operator\">=</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> num1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> val2 <span class=\"token operator\">=</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> num2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 看有没有进位</span>\n            <span class=\"token comment\">// flag == 1，有进位，反之，无进位</span>\n            flag <span class=\"token operator\">=</span> flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> val1 <span class=\"token operator\">+</span> val2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> val1 <span class=\"token operator\">+</span> val2<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 将本次相加的个位数插到返回字符串后</span>\n            ret <span class=\"token operator\">+=</span> flag <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            flag <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 反转字符串</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"22__333\"></a>🥥2.2 字符串相乘</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ad659a12228b4c33a788116cc8ac2afc.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/multiply-strings/\">字符串相乘</a></p>\n<blockquote>\n<p>法一：模拟竖式+加法实现</p>\n</blockquote>\n<p>🎉 <code>具体思路</code>：</p>\n<p>先来看例子中的乘法用竖式如何计算：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9ad4bbbedf6245358f9c9e09a65bd386.png\"/></p>\n<ul><li> <p>我们发现，从右到左， <code>num2</code> 每一位都需要乘以 <code>num1</code> ，并且每乘完一次 <code>num1</code> 所得的数字的权重要乘10。</p> </li><li> <p><code>num2</code> 每一位乘 <code>num1</code> 都是个位数* <code>num1</code> ,所以我们可以先把个位数乘 <code>num1</code> 的结果保存起来，用的时候直接调用。</p> </li><li> <p>得到 <code>num2</code> 每一位乘 <code>num1</code> 的字符串后，保存起来，最后和竖式一样，依次相加每一位的结果，得到最后的答案。</p> </li></ul>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 复用上题的加法</span>\n    string <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        string ret<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> add <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> end1 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end2 <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end1 <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> end2 <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> add <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> end1 <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> num1<span class=\"token punctuation\">[</span>end1<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> end2 <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> num2<span class=\"token punctuation\">[</span>end2<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            add <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> add<span class=\"token punctuation\">;</span>\n            ret <span class=\"token operator\">+=</span> add <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            add <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    string <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>string num1<span class=\"token punctuation\">,</span> string num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 出现0时，直接返回\"0\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">||</span> num2 <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> len1 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len2 <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 保存 0 ~ 9 乘 num1 的值</span>\n        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 保存num2每一位乘num1的值</span>\n        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span>len2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 0乘任何数都为0</span>\n        save<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 保存最后的返回值</span>\n        ret<span class=\"token punctuation\">[</span>len2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 记录权重</span>\n        <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\n        <span class=\"token comment\">// 保存 0 ~ 9 乘 num1 的值</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            save<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 保存num2每一位乘num1的值</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> len2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> save<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 根据权重在字符串后面补0</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> pos<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n                ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 每乘完一个数，权重加一</span>\n            pos<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 整体加起来</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len2<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            ret<span class=\"token punctuation\">[</span>len2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">[</span>len2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">[</span>len2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>2.优化竖式+模拟乘法</p>\n</blockquote>\n<p>🎉 <code>具体思路</code>：</p>\n<ol><li>首先，我们先来探讨一下 m位数乘n位数得到的结果为多少位数。</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6f3eaa9402704a22b044282676d2d2e4.png\"/></p>\n<ol start=\"2\"><li> <p>由上式可得，最后相乘得到的数字最长为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          m\n         \n         \n          +\n         \n         \n          n\n         \n        \n        \n         m+n\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span></span> ，所以我们可以预先开辟一个 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          m\n         \n         \n          +\n         \n         \n          n\n         \n        \n        \n         m+n\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span></span> 长度的数组来存放这个数字。</p> </li><li> <p>由于要使用乘法进行模拟，所以我们可以优化一下我们的竖式乘法</p> </li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/1f01f7290144407c9be71d1e4899130e.gif#pic_center\"/></p>\n<p>通过上面的例子我们可以得到优化后竖式的具体做法：</p>\n<blockquote>\n<ul><li>将原来一次乘一个整形的步骤拆解为一次一个数只乘一个数</li><li>这样就不用担心溢出问题</li><li>并且我们可以将相乘的结果直接加到上述数组对应的位上，就如同上面的竖式一样</li></ul>\n</blockquote>\n<ol start=\"4\"><li>进行完全部的竖式运算后，再处理得到的数组，该进位进位，保证每一位上都是个位数。</li><li>再将数组转换为字符串后返回。</li></ol>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    string <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>string num1<span class=\"token punctuation\">,</span> string num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">||</span> num2 <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        string ret<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 模拟每一位乘每一位</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> val2 <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> val1 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> mul <span class=\"token operator\">=</span> val1 <span class=\"token operator\">*</span> val2<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 将乘来的结果加到对应的位上</span>\n                num<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> mul<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 进位</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            num<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 判断有没有最高位</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            ret <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"23__495\"></a>🍇2.3 删除有序数组中的重复项</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f710f1fad74c4619829ccda74e72e5c3.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\">删除有序数组中的重复项</a></p>\n<blockquote>\n<p>法一：暴力求解</p>\n</blockquote>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator begin <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>begin <span class=\"token operator\">==</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                begin <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                begin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>法二：快慢指针</p>\n</blockquote>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        size_t slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        size_t len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                nums<span class=\"token punctuation\">[</span>slow <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                slow<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            fast<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> slow <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"24__560\"></a>🍈2.4 杨辉三角</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b7c79de6031a4b439666ef14f407be50.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/pascals-triangle/\">杨辉三角</a></p>\n<p>这是一道非常典型的动态规划的题目,并且思路也非常简单。</p>\n<p>🎉 <code>具体思路</code>：</p>\n<ul><li>状态：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         d\n        \n        \n         p\n        \n        \n         [\n        \n        \n         i\n        \n        \n         ]\n        \n        \n         [\n        \n        \n         j\n        \n        \n         ]\n        \n       \n       \n        dp [ i ] [ j ]\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span></span> 为位置的数字</li><li>初始状态：当<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         j\n        \n        \n         =\n        \n        \n         =\n        \n        \n         0\n        \n        \n         ∣\n        \n        \n         ∣\n        \n        \n         i\n        \n        \n         =\n        \n        \n         =\n        \n        \n         j\n        \n        \n         时\n        \n        \n         ，\n        \n        \n         d\n        \n        \n         p\n        \n        \n         [\n        \n        \n         i\n        \n        \n         ]\n        \n        \n         [\n        \n        \n         j\n        \n        \n         ]\n        \n        \n         =\n        \n        \n         1\n        \n       \n       \n        j == 0 || i== j时， dp [ i ] [ j ] = 1\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.85396em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.36687em; vertical-align: 0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.36687em; vertical-align: 0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">1</span></span></span></span></span></li><li>状态转移方程： <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         d\n        \n        \n         p\n        \n        \n         [\n        \n        \n         i\n        \n        \n         ]\n        \n        \n         [\n        \n        \n         j\n        \n        \n         ]\n        \n        \n         =\n        \n        \n         d\n        \n        \n         p\n        \n        \n         [\n        \n        \n         i\n        \n        \n         −\n        \n        \n         1\n        \n        \n         ]\n        \n        \n         [\n        \n        \n         j\n        \n        \n         −\n        \n        \n         1\n        \n        \n         ]\n        \n        \n         +\n        \n        \n         d\n        \n        \n         p\n        \n        \n         [\n        \n        \n         i\n        \n        \n         −\n        \n        \n         1\n        \n        \n         ]\n        \n        \n         [\n        \n        \n         j\n        \n        \n         ]\n        \n       \n       \n        dp [i] [j] = dp [i - 1] [j - 1] + dp [i - 1] [ j ]\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span></span>。</li></ul>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numRows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span>numRows<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numRows<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numRows<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> ret<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"25__I_606\"></a>🍉2.5 只出现一次的数字 I</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6d24e635af9a4cccbfc148ff7a943c21.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/single-number/\">只出现一次的数字</a></p>\n<p>首先，我们需要了解异或运算的几个性质：</p>\n<ol><li>交换律：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n        \n         ⊕\n        \n        \n         b\n        \n        \n         =\n        \n        \n         b\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         ,\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         b\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         =\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         b\n        \n       \n       \n        a ⊕ b = b ⊕ a, a ⊕ b ⊕ a = a ⊕ a ⊕ b\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.77777em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.77777em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.77777em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></span></li><li>结合律：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         b\n        \n        \n         )\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         =\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         (\n        \n        \n         b\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         )\n        \n       \n       \n        (a ⊕ b) ⊕ a = a ⊕ (b ⊕ a)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span></span></li><li>任何数与0异或都是其本身：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n        \n         ⊕\n        \n        \n         0\n        \n        \n         =\n        \n        \n         0\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         =\n        \n        \n         a\n        \n       \n       \n        a ⊕ 0 = 0 ⊕ a = a\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></span></li><li>任何数与自己异或都为0：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         =\n        \n        \n         0\n        \n       \n       \n        a⊕a=0\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span></span></span></span></span></li></ol>\n<p>其次，题目中明确指出，只有一个数字出现了一次，其余数字均出现了两次，所以，依照上述性质，我们可以将其化为：</p>\n<blockquote>\n<p><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          a\n         \n         \n          1\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          1\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          2\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          2\n         \n        \n        \n         ⊕\n        \n        \n         .\n        \n        \n         .\n        \n        \n         .\n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          k\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          \n           k\n          \n          \n           +\n          \n          \n           1\n          \n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          \n           k\n          \n          \n           +\n          \n          \n           1\n          \n         \n        \n        \n         ⊕\n        \n        \n         .\n        \n        \n         .\n        \n        \n         .\n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          m\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          m\n         \n        \n        \n         =\n        \n        \n         0\n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          k\n         \n        \n        \n         =\n        \n        \n         \n          a\n         \n         \n          k\n         \n        \n       \n       \n        a_1 ⊕a_1⊕a_2⊕a_2⊕...⊕a_k⊕a_{k+1}⊕a_{k+1}⊕...⊕a_m⊕a_m = 0⊕a_k=a_k\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.336108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.791661em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.336108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.791661em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.336108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.151392em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.151392em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.336108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.336108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>也即，直接将给定数组中的数全部异或起来，最后得到的数就是只出现一次的数。</p>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span>\n            num <span class=\"token operator\">^=</span> i<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"26__II_645\"></a>🍊2.6 只出现一次的数字 II</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\784b1fe33a3240e48411c2fcf23ec06e.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/single-number-ii/\">只出现一次的数字 II</a></p>\n<blockquote>\n<p>🧨 法一：排序 + 遍历</p>\n</blockquote>\n<ul><li>这个方法就没有什么好说的了，直接暴力排序，遍历选出其中只出现一次的数字。</li></ul>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>时间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        n\n       \n       \n        ∗\n       \n       \n        l\n       \n       \n        o\n       \n       \n        \n         g\n        \n        \n         2\n        \n       \n       \n        n\n       \n       \n        )\n       \n      \n      \n       O(n*log_2n)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span> ，空间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        1\n       \n       \n        )\n       \n      \n      \n       O(1)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 。</p>\n<blockquote>\n<p>🧨 法二：哈希表</p>\n</blockquote>\n<ul><li>遍历数组，使用哈希表统计数组中的数出现的次数，最后找到只出现一次的数字即可。</li></ul>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> harsh<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token operator\">++</span>harsh<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> harsh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                ret <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>时间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        n\n       \n       \n        )\n       \n      \n      \n       O(n)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span> ，空间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        n\n       \n       \n        )\n       \n      \n      \n       O(n)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span> 。</p>\n<blockquote>\n<p>🧨 法三：统计二进制位数</p>\n</blockquote>\n<ul><li>建立一个数组，统计全部数字的二进制每一位上<code>1</code>出现了多少次。</li><li>因为除了一个数字以外，其余数字都出现了3次，所以其余数字每一位二进制位为<code>1</code>次数的总和一定能被3整除。</li><li>所以，只需要统计出二进制位中不能被3整除的位，这些位组成的数就是只出现过一次的数。</li></ul>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\n        <span class=\"token comment\">// 统计全部数字二进制为1的个数</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">&gt;&gt;</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 将不能被3整除的位或等起来就是结果</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                ret <span class=\"token operator\">|=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>时间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        n\n       \n       \n        )\n       \n      \n      \n       O(n)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span> ，空间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        1\n       \n       \n        )\n       \n      \n      \n       O(1)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 。</p>\n<hr/>\n<h3><a id=\"27__III_761\"></a>🍋2.7 只出现一次的数字 III</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1a098dd2bbb8454383d6c8c188d4b7cd.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/single-number-iii/\">只出现一次的数字 III</a></p>\n<blockquote>\n<p>✨ 法一：排序 + 遍历</p>\n</blockquote>\n<ul><li>直接排序，然后遍历选出只出现了一次的数字。</li></ul>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ret<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 特别情况：对第一个元素和第二个元素进行判断</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 特别情况：对最后一个元素和倒数第二个元素进行判断</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 一般判断：对数组中的其他元素进行判断</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>时间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        n\n       \n       \n        ∗\n       \n       \n        l\n       \n       \n        o\n       \n       \n        \n         g\n        \n        \n         2\n        \n       \n       \n        n\n       \n       \n        )\n       \n      \n      \n       O(n*log_2n)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span> ，空间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        1\n       \n       \n        )\n       \n      \n      \n       O(1)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 。</p>\n<blockquote>\n<p>✨ 法二：哈希表</p>\n</blockquote>\n<ul><li>暴力哈希，直接统计每个数字出现次数，最后选出只出现一次的数。</li></ul>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> freq<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token operator\">++</span>freq<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ans<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> occ<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> freq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>occ <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>✨ 法三：二进制异或法</p>\n</blockquote>\n<p>🎉 <code>具体思路</code>：</p>\n<ul><li>首先，我们需要了解异或运算的几个性质：</li></ul>\n<ol><li>交换律：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n        \n         ⊕\n        \n        \n         b\n        \n        \n         =\n        \n        \n         b\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         ,\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         b\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         =\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         b\n        \n       \n       \n        a ⊕ b = b ⊕ a, a ⊕ b ⊕ a = a ⊕ a ⊕ b\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.77777em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.77777em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.77777em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></span></li><li>结合律：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         b\n        \n        \n         )\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         =\n        \n        \n         a\n        \n        \n         ⊕\n        \n        \n         (\n        \n        \n         b\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         )\n        \n       \n       \n        (a ⊕ b) ⊕ a = a ⊕ (b ⊕ a)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span></span></li><li>任何数与0异或都是其本身：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n        \n         ⊕\n        \n        \n         0\n        \n        \n         =\n        \n        \n         0\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         =\n        \n        \n         a\n        \n       \n       \n        a ⊕ 0 = 0 ⊕ a = a\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></span></li><li>任何数与自己异或都为0：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n        \n         ⊕\n        \n        \n         a\n        \n        \n         =\n        \n        \n         0\n        \n       \n       \n        a⊕a=0\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span></span></span></span></span></li></ol>\n<p>其次，题目中明确指出，只有两个数字出现了一次，其余数字均出现了两次，所以，依照上述性质，我们可以将其化为：</p>\n<blockquote>\n<p><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          a\n         \n         \n          1\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          1\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          2\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          2\n         \n        \n        \n         ⊕\n        \n        \n         .\n        \n        \n         .\n        \n        \n         .\n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          k\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          \n           k\n          \n          \n           +\n          \n          \n           1\n          \n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          \n           k\n          \n          \n           +\n          \n          \n           1\n          \n         \n        \n        \n         .\n        \n        \n         .\n        \n        \n         .\n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          n\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          \n           n\n          \n          \n           +\n          \n          \n           1\n          \n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          \n           n\n          \n          \n           +\n          \n          \n           1\n          \n         \n        \n        \n         ⊕\n        \n        \n         .\n        \n        \n         .\n        \n        \n         .\n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          m\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          m\n         \n        \n        \n         =\n        \n        \n         \n          a\n         \n         \n          k\n         \n        \n        \n         ⊕\n        \n        \n         \n          a\n         \n         \n          n\n         \n        \n       \n       \n        a_1 ⊕a_1⊕a_2⊕a_2⊕...⊕a_k⊕a_{k+1}⊕a_{k+1}...⊕a_n⊕a_{n+1}⊕a_{n+1}⊕...⊕a_m⊕a_m = a_k⊕a_n\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.336108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.791661em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.336108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.791661em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.336108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.151392em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.791661em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.791661em; vertical-align: -0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.208331em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.66666em; vertical-align: -0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.151392em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.151392em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.73333em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.336108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.151392em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>最后我们得到了两个只出现一次数字的异或值，由异或的定义可知，两个数二进制位上的数不相同时不相同的位上结果为<code>1</code>，eg. 1000 ⊕ 1110 = 0110 ，可得这两个数字从右到左第二位和第三位不同。</p>\n<ul><li>当得到了目标数字的不同二进制位时，我们可以依次为依据对数组进行分组，分组后，每一组都只剩下了一个单独出现的数字。</li><li>再按照 <code>只出现一次的数字 I</code> 的方法分别选出两个数字即可。</li></ul>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 将全部数字异或起来</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            num <span class=\"token operator\">^=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 找出两个数字不一样的二进制位</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;&gt;</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t\n        <span class=\"token comment\">// 按不同二进制位分组进行异或，最后直接得到两个结果</span>\n        <span class=\"token keyword\">int</span> ret1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ret2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">&gt;&gt;</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>            \n                ret1 <span class=\"token operator\">^=</span> e<span class=\"token punctuation\">;</span>            \n            <span class=\"token keyword\">else</span>\n                ret2 <span class=\"token operator\">^=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>ret1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>ret2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>时间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        n\n       \n       \n        )\n       \n      \n      \n       O(n)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span> ，空间复杂度 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        1\n       \n       \n        )\n       \n      \n      \n       O(1)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 。</p>\n<hr/>\n<h3><a id=\"28__901\"></a>🍌2.8 电话号码的字母组合</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4504b9b4ec8b48969beac990c0ab4809.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\">电话号码的字母组合</a></p>\n<p>🎉 <code>具体思路</code>：</p>\n<p>这是一道非常经典的回溯算法题，思路其实也很简单：</p>\n<ol><li>遍历题目给的数字字符串，按照数字找到对应的字母字符串。</li><li>按遍历的元素顺序在当前后面加字符，直到遍历完成。</li><li>当遍历完题目给的数字字符串时，把此时得到的字符串保存。</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\22d22a1f24c44d669ad94b6230d29569.png\"/></p>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 哈希表用来对照</span>\n<span class=\"token keyword\">static</span> string harsh<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wxyz\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> digits<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> string curStr<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> ret<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 当当前的字符串长度与digits相等，如果当前字符串不为空，将其插入</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curStr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>curStr<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>curStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 找到当前digits对应的数字</span>\n        <span class=\"token keyword\">int</span> curInd <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 遍历这个哈希表中对应的字符串</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> ch<span class=\"token operator\">:</span> harsh<span class=\"token punctuation\">[</span>curInd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 尝试每一种结果，index为digits下标，每次加一</span>\n            <span class=\"token comment\">// 每次在当前字符串后加入当前对应的哈希表字符，尝试所有可能性</span>\n            <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> curStr <span class=\"token operator\">+</span> ch<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token function\">letterCombinations</span><span class=\"token punctuation\">(</span>string digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> ret<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"29__958\"></a>🍍2.9 连续子数组的最大和</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f5d41e61c8724dfd8b0952212ae1eb38.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&amp;tqId=11183&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tPage=2\">连续子数组的最大和</a></p>\n<p>这道题是一道很经典的动态规划的题目，有的同学可能第一眼就直接用贪心+回溯去做，但是这道题用贪心算法的话有些情况下会得不到整体最优的结果。</p>\n<p>🎉 <code>具体思路</code>：</p>\n<p>这是一道非常经典的动态规划问题：</p>\n<ul><li> <p>状态：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          f\n         \n         \n          (\n         \n         \n          x\n         \n         \n          )\n         \n        \n        \n         f(x)\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></span> —— 从上一段连续的最大和到 x 位置的最大和</p> </li><li> <p>状态转移方程：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          f\n         \n         \n          (\n         \n         \n          x\n         \n         \n          )\n         \n         \n          =\n         \n         \n          m\n         \n         \n          a\n         \n         \n          x\n         \n         \n          (\n         \n         \n          f\n         \n         \n          (\n         \n         \n          x\n         \n         \n          −\n         \n         \n          1\n         \n         \n          )\n         \n         \n          +\n         \n         \n          a\n         \n         \n          [\n         \n         \n          x\n         \n         \n          ]\n         \n         \n          ,\n         \n         \n          a\n         \n         \n          [\n         \n         \n          x\n         \n         \n          ]\n         \n         \n          )\n         \n        \n        \n         f(x)=max(f(x-1) + a[x], a[x])\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span> —— 如果上一段的连续最大和与当前数的和大于当前数，就取上一段的连续最大和与当前数的和，反之，取当前数（相当于如果 前面连续串的和的最大值 以及 当前数 相加的和 如果还不如当前数，不如从这一位置重新开始一个连续的子串，反之继续延续前面的连续串）</p> </li><li> <p>初始值：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          f\n         \n         \n          (\n         \n         \n          0\n         \n         \n          )\n         \n         \n          =\n         \n         \n          a\n         \n         \n          [\n         \n         \n          0\n         \n         \n          ]\n         \n        \n        \n         f(0) = a[0]\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span></span> —— 从a[0]开始子串</p> </li><li> <p>结果：从 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          f\n         \n         \n          (\n         \n         \n          0\n         \n         \n          )\n         \n         \n          −\n         \n         \n          f\n         \n         \n          (\n         \n         \n          n\n         \n         \n          −\n         \n         \n          1\n         \n         \n          )\n         \n        \n        \n         f(0) - f(n-1)\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 中选出最大值。因为连续串不确定，所以最后要判断一下。</p> </li><li> <p>实例：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          −\n         \n         \n          2\n         \n         \n          ,\n         \n         \n          1\n         \n         \n          ,\n         \n         \n          −\n         \n         \n          3\n         \n         \n          ,\n         \n         \n          4\n         \n         \n          ,\n         \n         \n          −\n         \n         \n          1\n         \n         \n          ,\n         \n         \n          2\n         \n         \n          ,\n         \n         \n          1\n         \n         \n          ,\n         \n         \n          −\n         \n         \n          5\n         \n        \n        \n         -2 ,1,-3,4,-1,2,1,-5\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">−</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">−</span><span class=\"mord\">5</span></span></span></span></span></p> </li><li>\n<table><thead><tr><th>序号</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n         \n          \n           \n            \n             a\n            \n            \n             [\n            \n            \n             x\n            \n            \n             ]\n            \n           \n           \n            a[x]\n           \n          \n         </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span></span></span></span></span></td><td>-2</td><td>1</td><td>-3</td><td>4</td><td>-1</td><td>2</td><td>1</td><td>-5</td></tr><tr><td><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n         \n          \n           \n            \n             f\n            \n            \n             (\n            \n            \n             x\n            \n            \n             )\n            \n           \n           \n            f(x)\n           \n          \n         </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></span></td><td>-2</td><td>1</td><td>-2</td><td>4</td><td>3</td><td>5</td><td>6</td><td>1</td></tr></tbody></table></li></ul>\n<p>再来形象总结一下连续串的思路：</p>\n<blockquote>\n<p>相当于你有一个大型的家族，如果前面你家族的资产很丰厚，和你的资产加起来超过了你原本的资产（你可能还欠钱了），那么你选择继承家产；但是如果你家道中落，家里欠了钱，那么你就可以选择自己出去单干，不要被家族牵连，你又开始建立了一个新家族。你的子孙以你为榜样，继续上面的过程。</p>\n<p>最后你的后代翻阅族谱，要找到祖上最阔器的时代，于是将一代代人的资产比较，得到祖上最阔的一代的资产。</p>\n</blockquote>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">FindGreatestSumOfSubArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Max <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            num <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Max <span class=\"token operator\">=</span> num <span class=\"token operator\">&gt;</span> Max <span class=\"token operator\">?</span> num <span class=\"token operator\">:</span> Max<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> Max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"210__1016\"></a>🥭2.10 最小栈</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f3abfd28a3e547c6bb45c1799b2a6a98.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/min-stack/\">最小栈</a></p>\n<p>本题既然要求要在线性时间内找到最小值，那么我们可以用空间换时间的做法。</p>\n<p>🎉 <code>具体思路</code>：</p>\n<ul><li>预设两个栈，一个存放正常输入的值——<code>_st</code>，另一个专门存放最小值——<code>_min</code>。</li><li>入栈： \n  <ul><li>入栈的值直接存放到<code>_st</code>；</li><li><code>_st</code>栈为空时，同时将其入栈<code>_min</code>；</li><li>后面进行入栈时，和<code>_min</code>的栈顶元素比较，如果入栈的值小于等于<code>_min</code>的栈顶元素，就入栈<code>_min</code>。</li></ul> </li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/62898a69bb144ad684742812aeb16845.gif#pic_center\"/></p>\n<ul><li>出栈： \n  <ul><li>出栈时，如果<code>_st</code>的出栈元素等于<code>_min</code>的栈顶元素，那么两个栈都出栈；</li><li>如果<code>_st</code>的出栈元素不等于<code>_min</code>的栈顶元素，只出<code>_st</code>栈。</li></ul> </li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/3654e284116d43068b688ec3b2c64e8e.gif#pic_center\"/></p>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MinStack</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">MinStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        _st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_min<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> val <span class=\"token operator\">&lt;=</span> _min<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            _min<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_min<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> _st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            _min<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        _st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> _st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> _min<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> _st<span class=\"token punctuation\">;</span>\n    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> _min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<hr/>\n<h3><a id=\"211__1084\"></a>🍎2.11 栈的压入、弹出序列</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e93ff96d1d194ac08710cd192d80b3a4.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&amp;&amp;tqId=11174&amp;rp=1&amp;ru=/activity/oj&amp;qru=/ta/coding-interviews/question-ranking\">栈的压入、弹出序列</a></p>\n<p>这道题的主要思路就是——<code>模拟</code>。</p>\n<p>🎉 <code>具体思路</code>：</p>\n<ul><li>直接模拟栈的出入栈过程。</li><li>按照给定的入栈顺序依次入栈，入到入栈元素和出栈序列的第一个元素相同时，开始出栈，同时指向出栈序列的下一个元素，循环这个过程，直到栈顶元素和出栈序列元素不同或者栈为空，停止出栈。</li><li>循环上述过程，直到遍历完入栈序列。</li><li>此刻，如果栈中没有元素，说明题目给定序列正确，反之，不正确。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/c736186b8ad443048d396d285e5ec54c.gif#pic_center\"/></p>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">IsPopOrder</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> pushV<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> popV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 循环下面的过程，直到遍历完入栈序列</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> pushV<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pushV<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 当栈顶元素和出栈序列相等时，开始出栈</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> popV<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"212__1131\"></a>🍏2.12 逆波兰表达式求值</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fc0b07f10a684a6ca6de336d70c33ed7.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/\">逆波兰表达式求值</a></p>\n<blockquote>\n<p><code>逆波兰表达式</code>由波兰的逻辑学家卢卡西维兹提出。逆波兰表达式的特点是：没有括号，运算符总是放在和它相关的操作数之后。因此，逆波兰表达式也称后缀表达式。</p>\n</blockquote>\n<p>🎉 <code>具体思路</code>：<br/> 逆波兰表达式严格遵循「从左到右」的运算。计算逆波兰表达式的值时，使用一个栈存储操作数，从左到右遍历逆波兰表达式，进行如下操作：</p>\n<ul><li> <p>如果遇到操作数，则将操作数入栈；</p> </li><li> <p>如果遇到运算符，则将两个操作数出栈，其中先出栈的是右操作数，后出栈的是左操作数，使用运算符对两个操作数进行运算，将运算得到的新操作数入栈。</p> </li><li> <p>整个逆波兰表达式遍历完毕之后，栈内只有一个元素，该元素即为逆波兰表达式的值。</p> </li></ul>\n<blockquote>\n<p>上面思路出自力扣官方</p>\n</blockquote>\n<p>🎃 <code>代码实现</code>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">evalRPN</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> str <span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> <span class=\"token string\">\"+\"</span> <span class=\"token operator\">||</span> str <span class=\"token operator\">==</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">||</span> str <span class=\"token operator\">==</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">||</span> str <span class=\"token operator\">==</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n                    st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span>\n                    st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span>\n                    st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">*</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span>\n                    st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">/</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"213_K_1196\"></a>🍐2.13 数组中的第K个最大元素</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7914bc988cf645daa8f66aff78017397.png\"/></p>\n<p>✈ <code>原题链接</code> ：<a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\">数组中的第K个最大元素</a></p>\n<blockquote>\n<p>🕍 <code>法一</code> ：排序</p>\n</blockquote>\n<p>直接排序，选出第k个元素，时间复杂度为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        n\n       \n       \n        ∗\n       \n       \n        l\n       \n       \n        o\n       \n       \n        g\n       \n       \n         \n       \n       \n        n\n       \n       \n        )\n       \n      \n      \n       O(n*log~n)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mspace nobreak\"> </span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>🕍 <code>法二</code> ：堆排序</p>\n</blockquote>\n<p>使用堆排序，时间复杂度为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        n\n       \n       \n        +\n       \n       \n        k\n       \n       \n        ∗\n       \n       \n        l\n       \n       \n        o\n       \n       \n        g\n       \n       \n         \n       \n       \n        n\n       \n       \n        )\n       \n      \n      \n       O(n+k*log~n)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mspace nobreak\"> </span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">pq</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>🕍 <code>法三</code> ：TopK</p>\n</blockquote>\n<p>TopK问题，直接建立一个k个元素大小的小栈，用TopK的解法即可。时间复杂度为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        n\n       \n       \n        +\n       \n       \n        n\n       \n       \n        ∗\n       \n       \n        l\n       \n       \n        o\n       \n       \n        g\n       \n       \n         \n       \n       \n        k\n       \n       \n        )\n       \n      \n      \n       O(n + n*log~k)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.46528em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mspace nobreak\"> </span><span class=\"mord mathdefault\" style=\"margin-right: 0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></span>，这是这道题的最优解了。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">pq</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>没有了解过堆的同学可以看这篇文章——<a href=\"https://blog.csdn.net/baichendada/article/details/122520894?spm=1001.2014.3001.5501\">【数据结构】堆的全解析</a>，其中很详细的讲解了堆排序和TopK问题。</p>\n<hr/>\n<h1><a id=\"__1266\"></a>⚔ 后记</h1>\n<hr/>\n<p>白晨写本文的目的是帮助更多的C++入门学习者更快掌握C++的语法，并且可以将C++用于实践，希望大家可以在这篇文章中有所收获。</p>\n<p>如果这篇文章有帮到你的话，还请多多支持白晨，你的支持就是对白晨最大的鼓励😜。</p>\n<hr/>\n<p>如果解析有不对之处还请指正，我会尽快修改，多谢大家的包容。</p>\n<p>如果大家喜欢这个系列，还请大家多多支持啦😋！</p>\n<p>如果这篇文章有帮到你，还请给我一个<code>大拇指</code> 👍和<code>小星星</code> ⭐️支持一下白晨吧！喜欢白晨【刷题日记】系列的话，不如<code>关注</code>👀白晨，以便看到最新更新哟！！！</p>\n<p>我是不太能熬夜的白晨，我们下篇文章见。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}