{"blogid": "118190807", "writerAge": "码龄5年", "writerBlogNum": "220", "writerCollect": "39146", "writerComment": "9342", "writerFan": "160323", "writerGrade": "10级", "writerIntegral": "147636", "writerName": "不吃西红柿丶", "writerProfileAdress": "writer_image\\profile_118190807.jpg", "writerRankTotal": "7", "writerRankWeekly": "228", "writerThumb": "18687", "writerVisitNum": "3164185", "blog_read_count": "239388", "blog_time": "已于 2022-04-26 10:30:04 修改", "blog_title": "《Python 快速入门》C站最全Python标准库总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><strong>点赞</strong> ➕ <span style=\"color:#facc2e;\"><strong>评论</strong></span> ➕ <span style=\"color:#0080ff;\"><strong>收藏</strong></span> == <strong>养成三连好习惯</strong></span></p>\n</blockquote>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\">🍅 <strong>联系作者</strong>：<a href=\"https://app.yinxiang.com/fx/13ce6bbd-f36f-4e92-be53-92dd381ed729\" title=\" 不吃西红柿 \"> 不吃西红柿 </a></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\">🍅 <strong>作者简介</strong>：CSDN 博客专家丨全站 Top 10🏆、HDZ 核心组成员、<strong>信息技术智库</strong>公号号主</span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\">🍅 简历模板、PPT 模板、学习资料、技术互助。<strong>关注我，都给你</strong></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\">很多人看西红柿的博客，<strong>花里胡哨</strong>的不知道从何学起，为了广大人民群众的根本利益，我决定写一个阅读指引，按照这个指引进行学习，多加练习，假以时日，势必能够……算了，还是看你自己能学多少以及能够坚持到哪里了。加油！少年！毕竟<strong>收藏 = 学会</strong></span></p>\n<table border=\"1\"><thead><tr><th style=\"background-color:#f0f0f0;text-align:left;\">学习路径指引（点击解锁）</th><th style=\"background-color:#f0f0f0;text-align:left;\">定位</th><th style=\"background-color:#f0f0f0;text-align:left;\">适宜人群</th></tr></thead><tbody><tr><td style=\"border-color:#cccccc;text-align:left;\"><a href=\"https://blog.csdn.net/weixin_39032019/category_11518083.html\" title=\"全网最全丨 Python 快速入门专栏\">全网最全丨 Python 快速入门专栏</a></td><td style=\"border-color:#cccccc;text-align:left;\">入门级</td><td style=\"border-color:#cccccc;text-align:left;\">没有语言基础，感兴趣的大学生</td></tr><tr><td style=\"border-color:#cccccc;text-align:left;\"><a href=\"https://blog.csdn.net/weixin_39032019/category_11518096.html\" title=\"全网最黑丨 Python 黑科技专栏\">全网最黑丨 Python 黑科技专栏</a></td><td style=\"border-color:#cccccc;text-align:left;\">黑科技级</td><td style=\"border-color:#cccccc;text-align:left;\">有一定的基础，学以致用</td></tr><tr><td style=\"border-color:#cccccc;text-align:left;\"><a href=\"https://blog.csdn.net/weixin_39032019/category_11163855.html\" title=\"大数据知识体系丨集锦专栏\">大数据知识体系丨集锦专栏</a></td><td style=\"border-color:#cccccc;text-align:left;\">工作/就业</td><td style=\"border-color:#cccccc;text-align:left;\">大数据领域从业者，就业升职加薪</td></tr><tr><td style=\"border-color:#cccccc;text-align:left;\"><a href=\"https://bbs.csdn.net/forums/ITID?typeId=17227\" title=\"信息技术智库社区\">信息技术智库社区</a></td><td style=\"border-color:#cccccc;text-align:left;\">吹水/互助</td><td style=\"border-color:#cccccc;text-align:left;\">互联网相关人员，白嫖奖品丨官方活动</td></tr></tbody></table>\n<hr/>\n<p><strong>python标准库思维导图：</strong></p>\n<p><img alt=\"\" height=\"788\" src=\"image\\20210624170817922.png\" width=\"1200\"/></p>\n<h2>1、操作系统接口</h2>\n<p>os模块提供了不少与操作系统相关联的函数。</p>\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()      # 返回当前的工作目录\n'C:\\\\Python34'\n&gt;&gt;&gt; os.chdir('/server/accesslogs')   # 修改当前的工作目录\n&gt;&gt;&gt; os.system('mkdir today')   # 执行系统命令 mkdir \n0</code></pre>\n<p>建议使用 \"import os\" 风格而非 \"from os import *\"。这样可以保证随操作系统不同而有所变化的 os.open() 不会覆盖内置函数 open()。</p>\n<p><strong>os常用命令</strong></p>\n<p></p>\n<table cellspacing=\"0\" style=\"width:448pt;\"><tbody><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">序号</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">方法</span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">功能</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">1</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.access(path, mode)  </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">检验权限模式</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">2</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.chdir(path)   </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">改变当前工作目录</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">3</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.chflags(path, flags)  </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">设置路径的标记为数字标记。</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">4</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.chmod(path, mode)    </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">更改权限</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">5</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.chown(path, uid, gid)  </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">更改文件所有者</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">6</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.chroot(path)   </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">改变当前进程的根目录</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">7</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.close(fd)    </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">关闭文件描述符 fd</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">8</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.closerange(fd_low, fd_high)    </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">9</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.dup(fd)    </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">复制文件描述符 fd</span></td></tr><tr><td style=\"vertical-align:middle;width:39px;\"><span style=\"color:#000000;\">10</span></td><td style=\"vertical-align:middle;width:175px;\"><span style=\"color:#000000;\">os.dup2(fd, fd2)    </span></td><td style=\"vertical-align:middle;width:382px;\"><span style=\"color:#000000;\">将一个文件描述符 fd 复制到另一个 fd2</span></td></tr></tbody></table>\n<p></p>\n<hr/>\n<h2>2、文件通配符</h2>\n<p>glob模块提供了一个函数用于从目录通配符搜索中生成文件列表:</p>\n<pre><code>&gt;&gt;&gt; import glob\n&gt;&gt;&gt; glob.glob('*.py')\n['primes.py', 'random.py', 'quote.py']</code></pre>\n<hr/>\n<h2>3、命令行参数</h2>\n<p>通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量。</p>\n<p>sys.argv<br/> 可以用sys.argv获取当前正在执行的命令行参数的参数列表(list)。<br/><strong>变量解释</strong></p>\n<ul><li>sys.argv[0]当前程序名</li><li>sys.argv[1]第一个参数</li><li>sys.argv[2]第二个参数</li></ul>\n<p>len(sys.argv)-1 参数个数(减去文件名)</p>\n<p>例如在命令行中执行 \"python demo.py one two three\" 后可以得到以下输出结果:</p>\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print(sys.argv)\n['demo.py', 'one', 'two', 'three']</code></pre>\n<hr/>\n<h2>4、字符串正则匹配</h2>\n<p>re模块为高级字符串处理提供了正则表达式工具。可以说是爬虫必备，对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案:如果只需要简单的功能，应该首先考虑字符串方法，因为它们非常简单，易于阅读和调试:</p>\n<pre><code>&gt;&gt;&gt; 'tea for too'.replace('too', 'two')\n'tea for two'</code></pre>\n<p><strong>re.match函数</strong></p>\n<p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>\n<p><strong>函数语法</strong>：</p>\n<pre><code class=\"language-html\">re.match(pattern, string, flags=0)</code></pre>\n<p>函数参数说明：</p>\n<table><tbody><tr><th>参数</th><th>描述</th></tr><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串。</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td></tr></tbody></table>\n<p>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p>\n<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>\n<table><tbody><tr><th>匹配对象方法</th><th>描述</th></tr><tr><td>group(num=0)</td><td>匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td></tr><tr><td>groups()</td><td>返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td></tr></tbody></table>\n<hr/>\n<h2>5、数学计算</h2>\n<p>math模块为浮点运算提供了对底层C函数库的访问:</p>\n<pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; math.cos(math.pi / 4)\n0.70710678118654757\n&gt;&gt;&gt; math.log(1024, 2)\n10.0</code></pre>\n<p>在实际工作中，math标准库往往无法满足需求，我还需要扩展库：NumPy</p>\n<p>NumPy(Numerical Python) 支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p>\n<ul><li>NumPy 官网 <a href=\"http://www.numpy.org/\" title=\"NumPy\">NumPy</a></li></ul>\n<hr/>\n<h2>6、发送邮件</h2>\n<p>有几个模块用于访问互联网以及处理网络通信协议。其中最简单的两个是用于处理从 urls 接收的数据的 urllib.request 以及用于发送电子邮件的 smtplib:</p>\n<pre><code>import smtplib\nsmtpObj = smtplib.SMTP( [host [, port [, local_hostname]]] )</code></pre>\n<p><strong>参数说明</strong>：</p>\n<ul><li>host: SMTP 服务器主机。 你可以指定主机的ip地址或者域名如: runoob.com，这个是可选参数。</li><li>port: 如果你提供了 host 参数, 你需要指定 SMTP 服务使用的端口号，一般情况下 SMTP 端口号为25。</li><li>local_hostname: 如果 SMTP 在你的本机上，你只需要指定服务器地址为 localhost 即可。</li></ul>\n<p>Python SMTP 对象使用 sendmail 方法发送邮件，语法如下：</p>\n<pre><code>SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options])</code></pre>\n<p><strong>参数说明</strong>：</p>\n<ul><li>from_addr: 邮件发送者地址。</li><li>to_addrs: 字符串列表，邮件发送地址。</li><li>msg: 发送消息</li></ul>\n<p><strong>案例：</strong></p>\n<pre><code class=\"language-python\">#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.header import Header\n \nsender = 'from@runoob.com'\nreceivers = ['429240967@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n \n# 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码\nmessage = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')\nmessage['From'] = Header(\"菜鸟教程\", 'utf-8')   # 发送者\nmessage['To'] =  Header(\"测试\", 'utf-8')        # 接收者\n \nsubject = 'Python SMTP 邮件测试'\nmessage['Subject'] = Header(subject, 'utf-8')\n \n \ntry:\n    smtpObj = smtplib.SMTP('localhost')\n    smtpObj.sendmail(sender, receivers, message.as_string())\n    print \"邮件发送成功\"\nexcept smtplib.SMTPException:\n    print \"Error: 无法发送邮件\"</code></pre>\n<hr/>\n<h2>7、日期和时间</h2>\n<p>datetime模块为日期和时间处理同时提供了简单和复杂的方法。</p>\n<p>支持日期和时间算法的同时，实现的重点放在更有效的处理和格式化输出。</p>\n<p>该模块还支持时区处理:</p>\n<pre><code>&gt;&gt;&gt; # dates are easily constructed and formatted\n&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; now = date.today()\n&gt;&gt;&gt; now\ndatetime.date(2003, 12, 2)\n&gt;&gt;&gt; now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n</code></pre>\n<p>时间的三种存在方式：时间对象，时间字符串，时间戳。</p>\n<p>（1）字符串转datetime：</p>\n<pre><code>&gt;&gt;&gt; string = '2014-01-08 11:59:58'\n&gt;&gt;&gt; time1 = datetime.datetime.strptime(string,'%Y-%m-%d %H:%M:%S')\n&gt;&gt;&gt; print time1\n2014-01-08 11:59:58</code></pre>\n<p>（2）datetime转字符串：</p>\n<pre><code>&gt;&gt;&gt; time1_str = datetime.datetime.strftime(time1,'%Y-%m-%d %H:%M:%S')\n&gt;&gt;&gt; time1_str\n'2014-01-08 11:59:58'</code></pre>\n<p>（3）时间戳转时间对象：</p>\n<pre><code>&gt;&gt;&gt;time1 = time.localtime()\n&gt;&gt;&gt;time1_str = datetime.datetime.fromtimestamp(time1)</code></pre>\n<hr/>\n<h2>8、数据压缩</h2>\n<p>以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile。</p>\n<pre><code>&gt;&gt;&gt; import zlib\n&gt;&gt;&gt; s = b'witch which has which witches wrist watch'\n&gt;&gt;&gt; len(s)\n41\n&gt;&gt;&gt; t = zlib.compress(s)\n&gt;&gt;&gt; len(t)\n37\n&gt;&gt;&gt; zlib.decompress(t)\nb'witch which has which witches wrist watch'\n&gt;&gt;&gt; zlib.crc32(s)\n226805979</code></pre>\n<hr/>\n<h2>9、性能度量</h2>\n<p>有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案。</p>\n<p>例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多,timeit 证明了现代的方法更快一些。</p>\n<pre><code>&gt;&gt;&gt; from timeit import Timer\n&gt;&gt;&gt; Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n0.57535828626024577\n&gt;&gt;&gt; Timer('a,b = b,a', 'a=1; b=2').timeit()\n0.54962537085770791</code></pre>\n<p>相对于 timeit 的细粒度，:mod:profile 和 pstats 模块提供了针对更大代码块的时间度量工具。</p>\n<hr/>\n<h2>10、测试模块</h2>\n<p>开发高质量软件的方法之一是为每一个函数开发测试代码，并且在开发过程中经常进行测试</p>\n<p>doctest模块提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。</p>\n<p>测试构造如同简单的将它的输出结果剪切并粘贴到文档字符串中。</p>\n<p>通过用户提供的例子，它强化了文档，允许 doctest 模块确认代码的结果是否与文档一致:</p>\n<pre><code>def average(values):\n    \"\"\"Computes the arithmetic mean of a list of numbers.\n\n    &gt;&gt;&gt; print(average([20, 30, 70]))\n    40.0\n    \"\"\"\n    return sum(values) / len(values)\n\nimport doctest\ndoctest.testmod()   # 自动验证嵌入测试</code></pre>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\f2a6560807238f6ce0ea2d608f6b4eca.png\"/></p>\n<h2><strong><span style=\"color:#000000;\"><span style=\"background-color:#ef7060;\"><strong><span style=\"color:#ffffff;\"> ❤ 每周福利丨送 8 本正版图书 ❤</span></strong></span> </span></strong></h2>\n<h3><strong><span style=\"color:#000000;\">🍅 抽奖规则：每周 5 程序开奖，双奖池制（粉丝池 + 奖品池）</span></strong></h3>\n<h3><strong><span style=\"color:#000000;\">🍅 奖品清单：至少 8 本正版图书，不定期：CSDN 水杯、背包、日历..</span></strong></h3>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\">🍟 Python 理论基础：<span style=\"color:#000000;\"><a href=\"https://blog.csdn.net/weixin_39032019/category_11518083.html\" title=\"全网最全丨 Python 快速入门专栏\">全网最全丨 Python 快速入门专栏</a></span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\">🍇 Python 练习应用：<span style=\"color:#000000;\"><a href=\"https://blog.csdn.net/weixin_39032019/category_11518096.html\" title=\"全网最黑丨 Python 黑科技专栏\">全网最黑丨 Python 黑科技专栏</a></span></span></p>\n</div>\n</div>"}