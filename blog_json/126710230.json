{"blogid": "126710230", "writerAge": "码龄6年", "writerBlogNum": "92", "writerCollect": "542", "writerComment": "54", "writerFan": "1537", "writerGrade": "4级", "writerIntegral": "1019", "writerName": "Chon-Wang", "writerProfileAdress": "writer_image\\profile_126710230.jpg", "writerRankTotal": "17612", "writerRankWeekly": "459", "writerThumb": "61", "writerVisitNum": "91747", "blog_read_count": "143", "blog_time": "已于 2022-09-07 14:24:53 修改", "blog_title": "PHP - 经典面试题大全，看这一篇就够了", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>本篇汇集网络上各家之长与个人整理的一些PHP面试题，我就不要 Face 的挂原创了 🤡。</p>\n<br/>\n<p><strong>希望大家把知道或实战面试的题 评论或私信发我，我们一起加油。</strong></p>\n<p><br/>内容原作者看到，请留言原文地址。</p>\n<br/>\n<p><strong>求推</strong>：目前所在公司因口罩原因，让本来…雪上加霜，我计划换个新环境，各位大佬如有机会，请留言。</p>\n</blockquote>\n<hr/>\n<h1><a id=\"PHP__14\"></a>一、PHP 面试题</h1>\n<h2><a id=\"11__16\"></a>1.1 基础篇</h2>\n<h3><a id=\"PHP_7__18\"></a>PHP 7 新特性</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/126542735\">查看我的文章 - PHP7.X 版本新特性摘选</a></p>\n<br/>\n<p><a href=\"https://mp.weixin.qq.com/s/3LTxQTaXVgwx0f3OTxVrMw\">PHP8/7/5特性、内核及架构浅析说明</a></p>\n<br/>\n<p><a href=\"https://mp.weixin.qq.com/s/UdL2Hfsv796vU_tijYW7rQ\">PHP5~8各版本特性大汇总！</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"_32\"></a>常用模板引擎</h3>\n<blockquote>\n<p>Smarty、Blade</p>\n</blockquote>\n<br/>\n<h3><a id=\"_38\"></a>面向对象的七大原则</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/125858701\">点我查看 - PHP面向对象OOP</a></p>\n<br/>\n<ul><li>单一职责原则</li><li>开放封闭原则</li><li>里式替换原则</li><li>依赖倒置原则</li><li>接口隔离原则</li><li>迪米特原则</li><li>合成/聚合复用原则</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_54\"></a><strong>什么是面向对象？主要特征是什么？</strong></h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/125858701\">点我查看 - PHP面向对象OOP</a></p>\n<br/>\n<p>面向对象是程序的一种设计方式, 它利于提高程序的重用性, 使程序结构更加清晰。</p>\n<br/>\n<p><strong>主要特征</strong> ：封装、继承、多态。</p>\n</blockquote>\n<br/>\n<h3><a id=\"_68\"></a>类、成员方法、成员属性的修饰符有哪些？他们之间的区别是什么？</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/125858701\">点我查看 - PHP面向对象OOP</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"PHP__74\"></a>PHP 支持多继承吗？如何实现多继承？</h3>\n<blockquote>\n<p>不支持多继承, 但可以通过 <code>Trait</code> 实现。</p>\n</blockquote>\n<br/>\n<h3><a id=\"PHP_80\"></a>PHP的基本变量类型</h3>\n<blockquote>\n<p><strong>四种标量类型</strong> ：boolean （布尔型）、integer （整型）、float （浮点型, 也称作 double)、string （字符串）</p>\n<p><strong>四种复合类型</strong> ：array （数组）、object （对象）、callable、iterable</p>\n<p><strong>最后是两种特殊类型</strong> ：resource（资源）、NULL（NULL）</p>\n</blockquote>\n<br/>\n<h3><a id=\"_30__90\"></a>列举 30 个常用的函数</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/125874242\">点我查看 - PHP 函数大全</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"_96\"></a>常用魔术方法及场景</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/125858460\">点我查看 - PHP魔术方法</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"_102\"></a>常用魔术常量</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/125857722\">点我查看 - PHP魔术常量</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"_108\"></a>常用超全局变量</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/125857633\">点我查看 - PHP超全局变量</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"PHP__114\"></a>PHP 错误级别介绍与设置错误级别的方式</h3>\n<blockquote>\n<ul><li>PHP 官方手册有 16 个级别的错误</li><li>常见错误级别有：</li><li><code>E_ERROR</code> : 致命的运行错误并阻止脚本执行</li><li><code>E_WARNING</code> : 运行时警告</li><li><code>E_PARSE</code> : 解析错误</li><li><code>E_NOTICE</code> : 注意</li><li><code>E_USER_ERROR</code> : 用户生成的错误消息</li><li><code>E_USER_WARNING</code> : 用户生成的警告</li><li><code>E_USER_NOTICE</code> : 用户生成的注意</li><li><code>E_ALL</code> : 所有的错误、警告、注意</li></ul>\n</blockquote>\n<blockquote>\n<p><strong>设置错误级别的方式:</strong></p>\n<br/>\n<ol><li>修改 php.ini 配置文件 \n   <ul><li>例: <code>error_reporting = E_ALL &amp; ~E_NOTICE</code>, 表示报告除 <code>E_NOTICE</code> 之外的所有错误。</li></ul> </li><li><code>error_reporting</code> 函数设置 \n   <ul><li>例: <code>error_reporting(E_ERROR | E_WARNING);</code></li></ul> </li></ol>\n</blockquote>\n<br/>\n<h3><a id=\"PHP__138\"></a>PHP 异常处理</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\"># php 使用 try catch 来捕获异常</span>\n<span class=\"token comment\"># 例: </span>\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$count</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'数量不可超过 10 个'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$width</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">widthException</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'宽度不可超过 100 米'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$height</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">heightException</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'高度不可超过 150 米'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\"># 常用异常捕获信息</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>  <span class=\"token function\">heightException</span> <span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Exception</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>  <span class=\"token function\">widthException</span> <span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Exception</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n</blockquote>\n<br/>\n<hr/>\n<h2><a id=\"12__166\"></a>1.2 进阶篇</h2>\n<h3><a id=\"PSR__168\"></a>PSR 标准规范</h3>\n<blockquote>\n<p><a href=\"https://learnku.com/docs/psr\">点我查看 - Laravel 官网 PSR 规范文章</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"_174\"></a>设计模式原则与你知道的设计模式有哪些？</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/126469777\">点击查看我的文章 - PHP - 设计模式</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"PHP_GC_180\"></a>PHP 垃圾回收机制（GC）</h3>\n<blockquote>\n<ul><li>使用 <strong>引用计数机制</strong></li><li>将每个 PHP 变量保存在一个叫 <code>zval 变量容器</code>中。</li><li><code>zval 变量容器</code> 包含 变量的类型、变量值、 is_res、refcount</li><li><code>is_ref</code> 用于标识该变量是否为引用集合或变量。</li><li><code>refcount</code> 表示指向当前变量的个数。</li><li>默认打开垃圾回收机制, 当发现有存在循环引用的zval时, 就会把其投入到根缓冲区, 当根缓冲区达到配置文件中的指定数量后, 就会进行垃圾回收, 以此解决循环引用导致的内存泄露问题</li></ul>\n<ul><li>如果引用计数减少到零, 所在变量容器将被清除（free）, 不属于垃圾；</li><li>如果一个zval的引用计数减少后还大于0, 那么它会进入垃圾周期。</li><li>其次, 在一个垃圾周期中, 通过检查引用计数是否减1, 并且检查哪些变量容器的引用次数是零, 来发现哪部分是垃圾。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"PHP__195\"></a>PHP 底层原理</h3>\n<blockquote>\n<p><strong>PHP代码执行过程：</strong></p>\n<ol><li>启动 php 及 zend 引擎</li><li>加载注册拓展模块</li><li>对代码进行词法/语法分析</li><li>编译成opcode(opcache)</li><li>执行 opcode</li></ol>\n<hr/>\n<p><strong>PHP 的四层体系, 从下至上分为四层:</strong></p>\n<ul><li>Zend 引擎</li><li>Zend 引擎整体用C语言实现，是 PHP 的内核部分，它负责将 PHP 代码翻译（词法、语法解析等一系列编译过程）为可执行的 opcode 操作码，并实现相应的处理方法、基本的数据结构（如 hashtable、OO）、内存分配及管理、提供相应的 API 方法供外部调用。</li><li>扩展层</li><li>围绕着 Zend 引擎，Extensions 通过组件化的方式提供各种基础服务，我们常见的各种内置函数（例如变量操作函数、字符串操作函数等）以及标准库等都是通过 Extensions 来实现。</li><li>SAPI（服务器应用程序编程接口）</li><li>SAPI 通过一系列钩子函数，使得 PHP 可以和外围交互数据，这是 PHP 非常优雅和成功的一个设计，通过 SAPI 成功的将 PHP 本身和上层应用解耦隔离，PHP 可以不再考虑如何针对不同应用进行兼容，而应用本身也可以针对自己的特点实现不同的处理方式。</li><li>Application（上层应用）</li><li>这就是我们平时编写的 PHP 程序，通过不同的 SAPI 方式得到各种各样的应用模式</li></ul>\n<p><img alt=\"PHP 四层体系\" src=\"image\\05a28c2d89ae0fa8334ec8a5cd37a2ff.png\"/></p>\n</blockquote>\n<br/>\n<h3><a id=\"PHP___222\"></a>PHP 运行模式, 各自的原理</h3>\n<blockquote>\n<p>这一块的知识，网上一堆，各有各的说法，我借鉴并进行整理，各位大佬请提提意见。</p>\n</blockquote>\n<blockquote>\n<p>先了解一下 <strong>CGI</strong> :</p>\n<ul><li>CGI（Common Gateway Interface）全称是“通用网关接口”，是一种让 客户端 与 Web服务器 程序进行通信（数据传输）的协议。</li><li>CGI 用来规范 Web服务器 传输到 解析器(例: php-cgi) 中的数据类型以及数据格式，包括URL、查询字符串、POST数据、HTTP header等。</li><li>解析器只要符合 CGI 标准，就能作为一个 cgi 程序与 Web 服务器交互。</li><li>一次请求都要 fork 一个进程, 然后销毁，也就是（fork-and-execute）模式，性能较低。</li></ul>\n</blockquote>\n<blockquote>\n<p><strong>PHP 运行模式:</strong></p>\n<ul><li> <p>FastCGI</p>\n<blockquote>\n<ul><li>FastCGI（Fast Common Gateway Interface）全称是“快速通用网关接口”，也是一种让 客户端 与 Web服务器 程序进行通信（数据传输）的协议。。</li><li><code>FastCGI</code> 是 <code>CGI</code> 模式的升级版, 目的是避免<strong>重复解析配置文件和初始执行环境</strong>。</li><li>像是一个常驻型 <code>CGI</code> , 可以一直处理请求不结束该进程。</li><li>多进程，将比 <code>CGI</code> 消耗更多的服务器内存。</li><li>可平滑停止/启动进程。</li></ul>\n</blockquote> <br/> </li><li> <p>PHPCGI</p>\n<blockquote>\n<ul><li>一个 <code>CGI</code> 程序，是 PHP 实现 <code>CGI</code> 的 PHP解析器。</li><li>用于解析请求，返回结果。</li><li>不可平滑重启。</li></ul>\n</blockquote> <br/> </li><li> <p>PHP-FPM</p>\n<blockquote>\n<ul><li><code>PHP-FPM</code> 为 <code>FastCGI</code> 的进程管理器。</li><li><strong>工作原理为:</strong>\n<ol><li>Web 服务器启动时，加载启动 <code>PHP-FPM</code>，<code>PHP-FPM</code> 读取配置文件，初始化运行环境。</li><li><code>PHP-FPM</code> 创建一个 Master 主进程和若干个 Worker 进程，负责监听端口，等待接收请求，每个进程内都调用一个 <code>PHP-CGI</code>。</li><li>用户发起请求, Web服务器接收请求并转发给 <code>PHP-FPM</code>，空闲的 Worker 进程以抢占式的接收该请求。</li><li>监听接收后，<code>PHPCGI</code> 解析请求，开始执行业务处理代码, 处理完成后，按照 CGI 规定的格式返给 Worker 进程, 然后退出进程, 此时 Worker 进程变成空闲状态等待下次请求。</li><li>Worker 进程将结果返给 Web服务器, Web服务器接收返回内容并返回给客户端。</li></ol> </li></ul>\n</blockquote> <br/> </li><li> <p>MODULE</p>\n<blockquote>\n<p><code>apache + php</code> 运行时，默认使用的是 <code>module 模式</code>，它把 php 作为 <code>apache</code> 的模块随 <code>apache</code> 启动而启动，接收到用户请求时则直接通过调用 <code>mod_php 模块</code> 进行处理。</p>\n</blockquote> <br/> </li><li> <p>PHP-CLI</p>\n<blockquote>\n<ul><li><code>PHP-CLI 模式</code> 属于命令行模式</li><li>在终端直接输入 <code>php 文件名.php</code> 就可直接运行代码</li><li>没有超时时间</li><li><code>echo</code>、<code>var_dump</code>、<code>phpinfo</code> 等输出会直接打印到控制台中</li></ul>\n</blockquote> </li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"PHP__280\"></a>PHP 数组底层原理</h3>\n<blockquote>\n<ol><li>底层实现是通过散列表（hash table） + 双向链表（解决hash冲突） \n   <ol><li>hashtable：将不同的关键字（key）通过映射函数计算得到散列值（Bucket-&gt;h） 从而直接索引到对应的Bucket</li><li>hash表保存当前循环的指针, 所以foreach 比for更快</li><li>Bucket：保存数组元素的key和value, 以及散列值h</li></ol> </li><li>如何保证有序性 \n   <ol><li>散列函数和元素数组（Bucket）中间添加一层大小和存储元素数组相同的映射表。</li><li>用于存储元素在实际存储数组中的下标</li><li>元素按照映射表的先后顺序插入实际存储数组中</li><li>映射表只是原理上的思路, 实际上并不会有实际的映射表, 而是初始化的时候分配Bucket内存的同时, 还会分配相同数量的 uint32_t 大小的空间, 然后将 arData 偏移到存储元素数组的位置。</li></ol> </li><li>解决hash重复(php使用的链表法)： \n   <ol><li>链表法:不同关键字指向同一个单元时, 使用链表保存关键字（遍历链表匹配key）</li><li>开放寻址法：当关键字指向已经存在数据的单元的时候, 继续寻找其他单元, 直到找到可用单元（占用其他单元位置, 更容易出现hash冲突, 性能下降）</li></ol> </li><li>基础知识 \n   <ol><li>链表：队列、栈、双向链表</li><li>链表：元素 + 指向下一元素的指针</li><li>双向链表：指向上一元素的指针 + 元素 + 指向下一元素的指针</li></ol> </li></ol>\n</blockquote>\n<br/>\n<h3><a id=\"PHP__301\"></a>PHP 数组遍历为什么能保证有序</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/marina_1/article/details/108122283\">点我查看 - 剖析PHP数组的有序性</a></p>\n<br/>\n<ul><li>bucket</li><li>映射表</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_312\"></a>依赖注入实现方式</h3>\n<blockquote>\n<ol><li>构造函数依赖注入（如果依赖的类多，就会造成构造函数的形参特别多）</li><li>set 方式注入（如果依赖的类多，那 set 的方法也特别多）</li><li>采用类似 Laravel 服务容器 实现依赖注入（调用时使用闭包，这样就做到 使用才实例化）</li></ol>\n</blockquote>\n<br/>\n<h3><a id=\"PHP__320\"></a>PHP 内存溢出解决</h3>\n<blockquote>\n<ol><li>增加 PHP 可用内存大小</li><li>对大数组分批处理或 yield 处理</li><li>及时销毁大数组或变量</li><li>根据业务规则，尽可能的少用 静态变量</li><li>数据库操作完，及时关闭</li></ol>\n</blockquote>\n<br/>\n<hr/>\n<h2><a id=\"13__332\"></a>1.3 对比篇</h2>\n<h3><a id=\"define__const__334\"></a>define() 与 const 区别</h3>\n<blockquote>\n<ul><li>两者都是定义常量使用</li><li>const 是语言结构, define 是函数</li><li>const 可在类中使用, define 不可以</li><li>const 可以不同命名空间定义相同名称的常量, define 不可以</li><li>const 大小写敏感, define 默认敏感, 可通过第三个参数为 true 设置为不敏感</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"include__require__344\"></a>include 和 require 的区别是什么？</h3>\n<blockquote>\n<ul><li> <p>require 是无条件包含, 也就是如果一个流程里加入 require , 无论条件成立与否都会先执行 require , 当文件不存在或者无法打开的时候, 会提示错误, 并且会终止程序执行</p> </li><li> <p>include有返回值, 而require没有 (可能因为如此 require 的速度比 include 快), 如果被包含的文件不存在的化, 那么会提示一个错误, 但是程序会继续执行下去</p> </li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_352\"></a>单引号与双引号的区别</h3>\n<blockquote>\n<ul><li>单引号不解析变量，双引号解析变量</li><li>单引号只可解析单引号及转义符本身，双引号可解析更多的特殊字符。例: <code>\\n</code>、<code>\\r</code>、<code>\\t</code></li><li>解析速度不同，因单引号不考虑变量解析，所以比双引号要快</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_360\"></a>传值与传引用的区别</h3>\n<blockquote>\n<ul><li><strong>按值传递</strong> ：函数范围内对值的任何改变在函数外部都会被忽略</li><li><strong>按引用传递</strong> ：函数范围内对值的任何改变在函数外部也能反映出这些修改, 因为传引用传的是内存地址。</li><li><strong>优缺点</strong>：按值传递时, php 必须复制值。特别是对于大型的字符串和对象来说, 这将会是一个代价很大的操作。按引用传递则不需要复制值, 对于性能提高很有好处。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"cookie__session___cookie__session_368\"></a>cookie 与 session 的区别, 禁用 cookie 后如何传递 session</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/116526144\">点击查看 - Cookie 和 Session 有什么区别？</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"____374\"></a>== 与 === 的区别</h3>\n<blockquote>\n<ul><li>== 要求两侧的值相同，弱类型判断</li><li>=== 要求两侧的值与类型都得相同</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"echoprintprint_rvar_dump__381\"></a>echo、print、print_r、var_dump 的区别</h3>\n<blockquote>\n<ul><li>print_r 与 var_dump 是函数, echo、print 是语句</li><li><code>echo</code> 用于输出数值变量或字符串，可以逗号分隔输出多个。数组输出 Array, 对象报错。例: <code>echo $a, $b;</code></li><li><code>print</code> 用于输出数值变量或字符串, 不可输出多个。数组输出 Array, 对象报错。例: <code>print $a;</code></li><li><code>print_r</code> 可简单输出 字符串、数字、数组、对象, 但 布尔(false)、null 都是打印 <code>\\n</code></li><li><code>var_dump</code> 可输出所有字符串、数字、布尔、数组、对象。包括键、值、类型、长度。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"isset__empty__391\"></a>isset 与 empty 的区别</h3>\n<blockquote>\n<ul><li><code>isset</code> 检测变量是否设置并且非 NULL</li><li><code>empty</code> 检测变量的值是否为 false, PHP 中 0、false、[]、‘0’ 、‘’ 所代表的布尔值都是 false</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"for__foreach__398\"></a>for 与 foreach 的区别，哪个更快？为什么？</h3>\n<blockquote>\n<ul><li>for 需要预先知道数组的长度, foreach 不需要</li><li>foreach 效果要比 for 高，foreach 直接通过结构体中的 next 指针获取下一个值, 而 for 循环需要根据 key 先进行一次 hash 才得到值。</li></ul>\n</blockquote>\n<br/>\n<hr/>\n<h2><a id=\"14__407\"></a>1.4 实践题</h2>\n<h3><a id=\"__409\"></a>微信实际支付成功, 但回调失败如何处理？</h3>\n<blockquote>\n<ul><li><strong>临时页面处理</strong>：在返回页增加 “支付成功” 与 “遇到问题, 联系客服” 按钮选项。这两个按钮都重新调取微信获取支付结果的接口，成功或失败都跳转一个中间页。</li><li><strong>定时处理</strong>：如没有临时页, 则根据业务情况, 设置合适的回调周期, 周期性的调取 “获取微信支付结果的接口” , 将支付结果更新至数据库。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_IP__IP_416\"></a>如何获取客户端 IP 与服务端 IP</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token comment\"># 客户端IP</span>\n<span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">]</span>\n   <span class=\"token comment\"># 服务端IP</span>\n   <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'SERVER_ADDR'</span><span class=\"token punctuation\">]</span>\n   <span class=\"token comment\"># 客户端IP(代理透传)</span>\n   <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'HTTP_X_FORWARDED_FOR'</span><span class=\"token punctuation\">]</span>\n\n   <span class=\"token comment\">/*\n* 获取客户端IP地址\n* @return string\n*/</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_client_ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'HTTP_CLIENT_IP'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token variable\">$client_ip</span> <span class=\"token operator\">=</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'HTTP_CLIENT_IP'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'HTTP_X_FORWARDED_FOR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token variable\">$client_ip</span> <span class=\"token operator\">=</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'HTTP_X_FORWARDED_FOR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token variable\">$client_ip</span> <span class=\"token operator\">=</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token variable\">$client_ip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$client_ip</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/* 获取服务器端IP地址\n* @return string\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_server_ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'SERVER_ADDR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token variable\">$server_ip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'SERVER_ADDR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token variable\">$server_ip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'LOCAL_ADDR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token variable\">$server_ip</span> <span class=\"token operator\">=</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'SERVER_ADDR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$server_ip</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_463\"></a>不使用临时变量交换两个变量的值</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 或 数组下标</span>\n<span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"__FILES___477\"></a>通过 $_FILES 获取上传文件类型可能受到黑客伪造, 如何判断用户上传的图像文件类型真实可靠</h3>\n<blockquote>\n<ul><li><code>getimagesize</code> 函数获取的数组结果下标为 2 的值代表文件的类型。</li></ul>\n<blockquote>\n<p>1 = GIF, 2 = JPG, 3 = PNG, 4 = SWF, 5 = PSD, 6 = BMP, 7 = TIFF(intel byte order), 8 = TIFF(motorola byte order), 9 = JPC, 10 = JP2, 11 = JPX, 12 = JB2, 13 = SWC, 14 = IFF, 15 = WBMP, 16 = XBM,</p>\n</blockquote>\n</blockquote>\n<br/>\n<h3><a id=\"_485\"></a>短信验证码防刷机制</h3>\n<blockquote>\n<ul><li>前端时间控制：60 秒后才能再次发送，但刷新页面就会又能发送</li><li>Token 校验：校验通过才发送，这时还可以将 60 秒缓存</li><li>图形验证码限制</li><li>次数限制：根据业务场景，例： 同一手机号，24小时内不可超过5条</li><li>相同返回：例： 30 分钟之内，如果验证码未使用，则返回同一个验证码</li><li>短信预警机制：例：检测短时发送量，达到预警值，就给管理员发送提醒。</li><li>IP限制</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_session__497\"></a>如何实现 session 共享</h3>\n<blockquote>\n<ul><li>将 session 持久化至数据库</li><li>将 session 保存 至 Redis、Memcache</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_504\"></a>如何实现单点登录</h3>\n<blockquote>\n<ul><li><a href=\"https://www.php.cn/php-weizijiaocheng-479574.html\">深入浅析PHP中实现SSO单点登录的方法</a></li><li><a href=\"https://github.com/jasny/sso\">GitHub - SSO</a></li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"PHP__511\"></a>PHP 如何解决跨域问题？</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token comment\"># 1. 代理, 由 php 调用 php 接口</span>\n<span class=\"token comment\"># 2. Nginx 反向代理</span>\n</code></pre>\n<pre><code class=\"prism language-php\"><span class=\"token comment\"># 3. 允许所有域名访问</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span>“Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Origin<span class=\"token punctuation\">:</span><span class=\"token operator\">*</span>”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span>‘Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Methods<span class=\"token punctuation\">:</span><span class=\"token constant\">POST</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示只允许POST请求</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span>‘Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Headers<span class=\"token punctuation\">:</span>x<span class=\"token operator\">-</span>requested<span class=\"token operator\">-</span>with<span class=\"token punctuation\">,</span> content<span class=\"token operator\">-</span>type’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 4. 允许单个域名访问</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span>‘Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Origin<span class=\"token punctuation\">:</span>http<span class=\"token punctuation\">:</span><span class=\"token comment\">//www.test.cn‘);</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span>‘Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Methods<span class=\"token punctuation\">:</span><span class=\"token constant\">POST</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//表示只允许POST请求</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span>‘Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Headers<span class=\"token punctuation\">:</span>x<span class=\"token operator\">-</span>requested<span class=\"token operator\">-</span>with<span class=\"token punctuation\">,</span> content<span class=\"token operator\">-</span>type’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//请求头的限制</span>\n</code></pre>\n<pre><code class=\"prism language-php\"><span class=\"token comment\"># 5. 允许多个域名访问</span>\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'域名1'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'域名2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setheader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">// 获取当前跨域域名</span>\n   <span class=\"token variable\">$origin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span>‘<span class=\"token constant\">HTTP_ORIGIN</span>’<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span>‘<span class=\"token constant\">HTTP_ORIGIN</span>’<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> ‘’<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$origin</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token function\">header</span><span class=\"token punctuation\">(</span>‘Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Origin<span class=\"token punctuation\">:</span>’ <span class=\"token operator\">.</span> <span class=\"token variable\">$origin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 允许 $array 数组内的域名跨域访问</span>\n       <span class=\"token function\">header</span><span class=\"token punctuation\">(</span>‘Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Methods<span class=\"token punctuation\">:</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span><span class=\"token constant\">GET</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 响应类型</span>\n       <span class=\"token function\">header</span><span class=\"token punctuation\">(</span>‘Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Credentials<span class=\"token punctuation\">:</span> <span class=\"token constant boolean\">true</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 带 cookie 的跨域访问</span>\n       <span class=\"token function\">header</span><span class=\"token punctuation\">(</span>‘Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Headers<span class=\"token punctuation\">:</span>x<span class=\"token operator\">-</span>requested<span class=\"token operator\">-</span>with<span class=\"token punctuation\">,</span>Content<span class=\"token operator\">-</span>Type<span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token operator\">-</span><span class=\"token constant\">CSRF</span><span class=\"token operator\">-</span>Token’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 响应头设置</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h2><a id=\"15__548\"></a>1.5 算法或代码实现题</h2>\n<h3><a id=\"_551\"></a>快速排序</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">quick_sort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token variable\">$array_count</span> <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 数组数量</span>\n   <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 对比值</span>\n   <span class=\"token variable\">$left_arr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 接收小于对比值的数</span>\n   <span class=\"token variable\">$right_arr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 接收大于对比值的数</span>\n\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">&lt;</span><span class=\"token variable\">$array_count</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token variable\">$left_arr</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token variable\">$right_arr</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token variable\">$left_arr</span> <span class=\"token operator\">=</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token variable\">$right_arr</span> <span class=\"token operator\">=</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$right_arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_arr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$right_arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_579\"></a>冒泡排序</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$len</span> <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$len</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$j</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$j</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$j</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$list</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token variable\">$list</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token variable\">$tmp</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$list</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           <span class=\"token variable\">$list</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$list</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           <span class=\"token variable\">$list</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n           <span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_602\"></a>二分查找</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">//二分查找（数组里查找某个元素）</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">bin_sch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$low</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$high</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$k</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$low</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$high</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token variable\">$mid</span> <span class=\"token operator\">=</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$low</span><span class=\"token operator\">+</span><span class=\"token variable\">$high</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$mid</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$k</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">return</span> <span class=\"token variable\">$mid</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$k</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$mid</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">return</span> <span class=\"token function\">bin_sch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$low</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$mid</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$k</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">return</span> <span class=\"token function\">bin_sch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$mid</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$high</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$k</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_625\"></a>顺序查找</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">seq_sch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$n</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$k</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$n</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$k</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">&lt;</span><span class=\"token variable\">$n</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token variable\">$k</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">&lt;</span><span class=\"token variable\">$n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_645\"></a>插入排序</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">insertSort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token variable\">$count</span> <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$count</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token variable\">$tmp</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$j</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$j</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$j</span><span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token comment\">// 从小到大 【&lt;】 从大到小 【&gt;】</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$tmp</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n               <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_669\"></a>选择排序</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">selectSort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">&lt;</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token variable\">$p</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$j</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$j</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$j</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$p</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token variable\">$p</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$j</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$p</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token variable\">$tmp</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$p</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n           <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$p</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_696\"></a>字符串反转</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">str_rev</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\"># true 模拟死循环, $i 为长度</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true模拟死循环</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token variable\">$return_str</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$j</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$j</span> <span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> <span class=\"token variable\">$j</span> <span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$return_str</span> <span class=\"token operator\">.=</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$return_str</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># 或</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">str_rev</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$encoding</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$len</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token variable\">$len</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$result</span> <span class=\"token operator\">.=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$encoding</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_728\"></a>字符串长度</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span> <span class=\"token operator\">==</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token variable\">$count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$count</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n            <span class=\"token variable\">$count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span> \n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$count</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_URL__748\"></a>写一个可以从 URL 链接中取出文件的扩展名</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getExt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$arr</span> <span class=\"token operator\">=</span> <span class=\"token function\">parse_url</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//parse_url解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分</span>\n    <span class=\"token comment\">//'scheme' =&gt; string 'http' (length=4)</span>\n    <span class=\"token comment\">//'host' =&gt; string 'www.sina.com.cn' (length=15)</span>\n    <span class=\"token comment\">//'path' =&gt; string '/abc/de/fg.php' (length=14)</span>\n    <span class=\"token comment\">//'query' =&gt; string 'id=1' (length=4)</span>\n    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'path'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// basename函数返回路径中的文件名部分</span>\n    <span class=\"token variable\">$ext</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$ext</span><span class=\"token punctuation\">[</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ext</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_766\"></a>写一个二维数组排序算法函数</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">/**\n* 二维数组排序\n* @param $arrays\n* @param $sort_key\n* @param $sort_order (SORT_DESC 降序；SORT_ASC 升序)\n* @param $sort_type (请看官方文档 array_multisort 函数的说明)\n* @return array|false\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">array_sort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arrays</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$sort_key</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$sort_order</span><span class=\"token operator\">=</span><span class=\"token constant\">SORT_DESC</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$sort_type</span><span class=\"token operator\">=</span><span class=\"token constant\">SORT_NUMERIC</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arrays</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$arrays</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token variable\">$key_arrays</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$sort_key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token function\">array_multisort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key_arrays</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$sort_order</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$sort_type</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$arrays</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"PHP__798\"></a>PHP 遍历文件夹</h3>\n<blockquote>\n<ul><li>遍历某一个目录下面的文件和文件夹</li></ul>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$dir</span> <span class=\"token operator\">=</span> <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_dir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span> <span class=\"token operator\">==</span> <span class=\"token string single-quoted-string\">'.'</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">==</span> <span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'不是一个目录'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<br/>\n<ul><li>写出一个函数对文件目录做遍历</li></ul>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">loopDir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token variable\">$handle</span> <span class=\"token operator\">=</span> <span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">false</span> <span class=\"token operator\">!==</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">!=</span><span class=\"token string single-quoted-string\">'.'</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token variable\">$file</span><span class=\"token operator\">!=</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">echo</span> <span class=\"token variable\">$file</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">filetype</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token operator\">.</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string single-quoted-string\">'dir'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token function\">loopDir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token operator\">.</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$dir</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">loopDir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<br/>\n<ul><li>遍历某个目录下面的所有文件和文件夹(包含子文件夹的目录和文件也要依次读取出来)</li></ul>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$dir</span> <span class=\"token operator\">=</span> <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">my_dir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token variable\">$files</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>@<span class=\"token variable\">$handle</span> <span class=\"token operator\">=</span> <span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">!=</span> <span class=\"token string double-quoted-string\">\"..\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$file</span> <span class=\"token operator\">!=</span> <span class=\"token string double-quoted-string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_dir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n                   <span class=\"token variable\">$files</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">my_dir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span> \n                   <span class=\"token variable\">$files</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token function\">closedir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token variable\">$files</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">my_dir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"__open_door__OpenDoor_867\"></a>写一个函数, 将 “open_door” 转为 “OpenDoor”</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">ucstring</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ucwords</span><span class=\"token punctuation\">(</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 或</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">ucstring</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span><span class=\"token operator\">=&gt;</span><span class=\"token variable\">$val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$new_string</span> <span class=\"token operator\">.=</span> <span class=\"token function\">ucwords</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$new_string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"___1234567890__1234567890__887\"></a>写一个函数, 将 1234567890 转为 1,234,567,890 逗号隔开</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">numFormate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 先反转</span>\n    <span class=\"token variable\">$length</span> <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 获取长度</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$length</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$i</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$new_string</span> <span class=\"token operator\">.=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">','</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token function\">rtrim</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$new_string</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_906\"></a>取扩展名</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_ext1</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">,</span> ‘<span class=\"token operator\">.</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_ext2</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">,</span><span class=\"token function\">strrpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">,</span> ‘<span class=\"token operator\">.</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_ext3</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">array_pop</span><span class=\"token punctuation\">(</span><span class=\"token function\">explode</span><span class=\"token punctuation\">(</span>‘<span class=\"token operator\">.</span>’<span class=\"token punctuation\">,</span> <span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_ext4</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token variable\">$p</span> <span class=\"token operator\">=</span> <span class=\"token function\">pathinfo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$p</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'extension'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_ext5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ‘<span class=\"token operator\">.</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getExt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n   <span class=\"token variable\">$arr</span> <span class=\"token operator\">=</span> <span class=\"token function\">parse_url</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'path'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token variable\">$ext</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">.</span>”<span class=\"token punctuation\">,</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$ext</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_202225__202236__944\"></a>求两个日期的差数, 例如2022-2-5 ~ 2022-3-6 的日期差数</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_days</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$date1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$date2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n   <span class=\"token variable\">$time1</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtotime</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$date1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token variable\">$time2</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtotime</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$date2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$time2</span><span class=\"token operator\">-</span><span class=\"token variable\">$time1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">86400</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"PHP___20220101_120000_959\"></a>PHP 打印出前一天的时间, 格式: 2022年01月01号 12:00:00</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Y年m月d日 H:i:s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strtotime</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"-1 day\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_967\"></a>获取今天是本月所在的第几周</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_mysqli__975\"></a>单例模式并实现 mysqli 数据库连接</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Db</span> <span class=\"token punctuation\">{<!-- --></span> \n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token variable\">$instance</span><span class=\"token punctuation\">;</span> \n   <span class=\"token keyword\">public</span> <span class=\"token variable\">$handle</span><span class=\"token punctuation\">;</span> \n   <span class=\"token keyword\">Private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$host</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$dbname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n       <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">handle</span><span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n       <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getcon</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$host</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$dbname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span> \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getBb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n       <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token variable\">$instance</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Db</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n       <span class=\"token keyword\">return</span> <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token variable\">$instance</span><span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span> \n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getcon</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$host</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$dbname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">handle</span><span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n           <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span> \n       <span class=\"token punctuation\">}</span> \n       <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">handle</span><span class=\"token operator\">=</span><span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$host</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$dbname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<br/>\n<h3><a id=\"_1000\"></a>以下表达式运算结果是？</h3>\n<blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token comment\"># 案例1</span>\n    <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"aabbzz\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token variable\">$a</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\"># 输出 aabcaa</span>\n\n<span class=\"token comment\"># 案例2</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1e3'</span> <span class=\"token operator\">==</span> <span class=\"token string single-quoted-string\">'1000'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'yes'</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token comment\"># 输出 yes</span>\n\t<span class=\"token comment\"># 因为 1e3 是科学计数法, 1e3 等于 1 乘以10 的 3 次方</span>\n\n<span class=\"token comment\"># 案例3</span>\n\t<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$k</span><span class=\"token operator\">=&gt;</span><span class=\"token variable\">$v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token variable\">$v</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$k</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\"># 输出数组值为 ['b','c','c']</span>\n\n<span class=\"token comment\"># 案例4</span>\n\t<span class=\"token variable\">$a</span><span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token operator\">+</span><span class=\"token variable\">$b</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">echo</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">echo</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\"># 输出 空</span>\n\t<span class=\"token comment\"># echo false 输出空 , echo true 输出 1</span>\n\t<span class=\"token comment\"># php 浮点计算会转为 二进制, 0.1 + 0.7 = 0.7999999....</span>\n\n<span class=\"token comment\"># 案例5</span>\n\t<span class=\"token variable\">$a</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$b</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">&gt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$a</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$b</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\"># 输出 11</span>\n\t<span class=\"token comment\"># 算数运算符 &gt; 比较运算符 &gt; 逻辑运算符(!除外) &gt; 赋值</span>\n</code></pre>\n</blockquote>\n<hr/>\n<h1><a id=\"_MySQL__1051\"></a>二 、MySQL 面试题</h1>\n<h2><a id=\"21__1053\"></a>2.1 其他面试题</h2>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/346064689\">知乎 - MySQL数据库优化面试题</a></p>\n</blockquote>\n<hr/>\n<h2><a id=\"22__1059\"></a>2.2 基础篇</h2>\n<h3><a id=\"MySQL__1061\"></a>MySQL 三范式</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/126127323\">请看我文章 - MySQL 三范式理解</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"_MySQL__1067\"></a>一条 MySQL 语句执行步骤</h3>\n<blockquote>\n<p>Server 层按顺序执行 SQL 的步骤为：</p>\n<ol><li>客户端请求 -&gt; 连接器（验证用户身份, 给予权限）</li><li>查询缓存（存在缓存则直接返回, 不存在则执行后续操作）</li><li>分析器（对 SQL 进行词法分析和语法分析操作）</li><li>优化器（主要对执行的 SQL 优化选择最优的执行方案方法）</li><li>执行器（执行时会先看用户是否有执行权限, 有才去使用这个引擎提供的接口）-&gt; 去引擎层获取数据返回（如果开启查询缓存则会缓存查询结果）</li></ol>\n</blockquote>\n<br/>\n<h3><a id=\"_1079\"></a>分区、分库、分表的理解及注意事项</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/Z451835239/article/details/122664450\">表数据太大，如何拆分数据？</a></p>\n<br/>\n<p><a href=\"https://learnku.com/articles/62050\">参考 - 常用分库分表方案</a></p>\n</blockquote>\n<blockquote>\n<ol><li>流程<br/> 评估容量和分表数量-&gt; 根据业务选定分表key-&gt;分表规则（hash、取余、range）-&gt;执行-&gt;考虑扩容问题</li><li>水平拆分</li><li>根据字段水平拆分为多个表</li><li>每个表的结构相同</li><li>所有分表的合集是全量数量</li><li>垂直拆分</li><li>根据字段垂直拆分</li><li>表结构不一样, 分表的同一个关联行是一条完整的数据</li><li>扩展表, 热点字段和非热点字段的拆分（列表和详情的拆分）</li><li>获取数据时, 尽量避免使用join, 而是两次查询结果组合</li><li>问题</li><li>跨库join问题 \n   <ol><li>全局表：需要关联部分系统表的场景</li><li>冗余法：常用字段进行冗余</li><li>组装法：多次查询的结果进行组装</li></ol> </li><li>跨节点的分页、排序、函数问题</li><li>事务一致性</li><li>全局主键id \n   <ol><li>使用uuid -&gt; 会降低聚簇索引效率</li><li>使用分布式自增id</li></ol> </li><li>扩容问题 \n   <ol><li>升级从库 \n     <ol><li>从库升级为主库, 数据一致, 只需要删除冗余数据即可</li><li>成倍扩容：需要在加一倍从库</li></ol> </li><li>双写迁移： \n     <ol><li>新数据进行双写, 同时写进新老数据库</li><li>旧数据复制到新数据库</li><li>以老数据库为准, 验证数据一致性之后删除冗余数据</li></ol> </li></ol> </li></ol>\n</blockquote>\n<br/>\n<h3><a id=\"_Redis__MySQL__1119\"></a>如何保证 Redis 和 MySQL 数据一致性</h3>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/158383468\">redis 缓存和 mysql 数据库如何保证数据一致性</a></p>\n</blockquote>\n<br/>\n<hr/>\n<h2><a id=\"23__1127\"></a>2.3 对比篇</h2>\n<h3><a id=\"___1129\"></a>关系型数据库 与 非关系型数据库的区别</h3>\n<blockquote>\n<p>关系型数据库</p>\n<ul><li>容易理解, 因为它采用了关系模型来组织数据。</li><li>可以保持数据的一致性。</li><li>数据更新的开销比较小。</li><li>支持复杂查询（带 where 子句的查询）</li></ul>\n</blockquote>\n<blockquote>\n<p>非关系型数据库</p>\n<ul><li>无需经过 SQL 层的解析, 读写效率高。</li><li>基于键值对, 读写性能很高, 易于扩展</li><li>可以支持多种类型数据的存储, 如图片, 文档等等。</li><li>扩展（可分为内存性数据库以及文档型数据库, 比如 Redis, MongoDB, HBase 等, 适合场景：数据量大高可用的日志系统/地理位置存储系统）。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"char__varchar__1147\"></a>char 与 varchar 的区别</h3>\n<blockquote>\n<ul><li>char 是定长字符串, 根据定义的字符长度分配足量的空间。</li><li>varchar 是变长字符串, 比定长字符串节省空间。</li><li><strong>存储长度</strong>: char 最大长度 255 字符, varchar 65535 个字符</li><li><strong>存储方式</strong>： char 英文1个字符, 汉字2个字节；varchar 中英文都为2个字节</li><li><strong>定长</strong>: char 为定长字符串, 不足长度部分用隐藏空格填空, varchar 为变长字符串</li><li><strong>占用空间</strong>： char 会浪费空间, varchar 节省空间</li><li><strong>查询效率</strong>：char 比 varchar 更快, 因为 char 在查询时直接查询查询固定长度。但数据量不同、索引是否命中, 实际结果可能有所偏差。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"dropdeletetruncate__1159\"></a>drop、delete、truncate 的区别</h3>\n<blockquote>\n<ul><li><code>drop </code> 命令用于删除数据表, 删除后此表不存在。 <code>drop table 表名;</code>。</li><li><code>delete </code> 命令用于删除表数据, 删除后可恢复。 <code>delete from 表名 where 列名=条件值</code></li><li><code>truncate</code> 命令用于删除所有表数据同时使自增值初始至1。<code>truncate 表名</code></li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_1167\"></a>拖库、洗库、撞库是什么？怎么解决？</h3>\n<blockquote>\n<ul><li>拖库: 通过对目标网站扫描, 查找漏洞, 例如：进行sql注入, 文件上传在服务器建立后门(webshell)获取root权限, 下载数据库</li><li>洗库: 通过技术手段和黑链将用户信息变现</li><li>撞库: 拿到你的用户名或密码，去其他平台尝试登录</li><li>解决:</li><li>对数据库密码进行加密</li><li>每位用户设置单独密码, 并定期更新</li><li>设置黑白名单</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"___1179\"></a>主键 和 唯一索引的区别？</h3>\n<blockquote>\n<ul><li>主键为一种约束, 唯一索引为一种索引, 本质上就不同。</li><li>主键在表中只能有一个, 唯一索引可以有多个。</li><li>主键创建后一定包含唯一性索引, 而唯一索引不一定就是主键。</li><li>主键不能为null,唯一索引可以为null.</li><li>主键可以被其它表引用, 唯一索引不能。</li><li>主键和索引都是键, 主键是逻辑键, 索引为物理键, 即主键不实际存在。</li></ul>\n</blockquote>\n<hr/>\n<h2><a id=\"24_MySQL__1190\"></a>2.4 MySQL 索引篇</h2>\n<h3><a id=\"_1192\"></a>索引类型</h3>\n<blockquote>\n<p>普通索引、唯一索引、主键索引、复合索引、全文索引</p>\n</blockquote>\n<br/>\n<h3><a id=\"_1198\"></a>索引最左匹配原则指的是什么？</h3>\n<blockquote>\n<ul><li>以最左边的为起点任何连续的索引都能匹配上。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_1204\"></a>聚集索引和非聚集索引的区别</h3>\n<blockquote>\n<ul><li><strong>聚集索引</strong>: 以主键作为B+树索引的键值而构建的B+树索引, 称为 <strong>聚集索引</strong>。</li><li><strong>非聚集索引</strong>: 以主键以外的列值作为键值构建的B+树索引, 称为 <strong>非聚集索引</strong>。</li><li>区别： <strong>聚集索引</strong> 叶子节点存储表中的数据, <strong>非聚集索引</strong> 叶子节点存储该列对应的主键。</li><li><strong>非聚集索引</strong> 想要查找数据还需要根据叶子结点存储的主键再去 <strong>聚集索引</strong> 中查找, 这个再根据 <strong>聚集索引</strong> 查找数据的过程, 称为 <strong>回表</strong>。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_1213\"></a>哪些操作会导致索引失效</h3>\n<blockquote>\n<ul><li>in 操作</li><li>or 操作</li><li>左或左右模糊匹配, <code>%??</code> 或 <code>%??%</code></li><li>索引字段进行函数或表达式计算</li><li><code>&gt;、&lt;、between</code></li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_MySQL__1223\"></a>单条 MySQL 一次能使用多少索引</h3>\n<blockquote>\n<p>使用一个索引。如果可以, 建议创建 联合索引。</p>\n</blockquote>\n<hr/>\n<h2><a id=\"25__1229\"></a>2.5 存储引擎篇</h2>\n<h3><a id=\"_1231\"></a>你知道的常用的存储引擎</h3>\n<blockquote>\n<p>MyISAM、InnoDB、CSV、Memory、Archive、Merge、BDB</p>\n</blockquote>\n<br/>\n<h3><a id=\"MyISAM__InnoDB__1237\"></a>MyISAM 与 InnoDB 的区别</h3>\n<blockquote>\n<ul><li>MyISAM 不支持事务、InnoDB支持事务</li><li>MyISAM 支持表锁, InnoDB支持行锁与表锁</li><li>MySQL 将表中的行数存在变量中, 需要时直接返回该变量。InnoDB需要全表扫描</li><li>MyISAM 存储文件格式有 <code>*.myd</code>、<code>*.myi</code>、<code>*.frm</code>, InnoDB存储文件有 <code>*.ibd</code>、<code>*.frm</code>。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"InnoDB__1246\"></a>InnoDB 四大特性</h3>\n<blockquote>\n<ul><li>插入缓冲（insert buffer）</li><li>二次写（double write）</li><li>自适应哈希索引（ahi）</li><li>预读（read ahead）</li></ul>\n</blockquote>\n<hr/>\n<h2><a id=\"26_MySQL__1257\"></a>2.6 MySQL 事务篇</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/126145656\">请看我的文章 - MySQL - 事务四大特性、事务隔离级别、事务的脏读、不可重复读、幻读</a></p>\n</blockquote>\n<h3><a id=\"ACID_1261\"></a>事务的四大特性（ACID）</h3>\n<blockquote>\n<ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_1270\"></a>事务的隔离级别</h3>\n<blockquote>\n<ul><li>读未提交（Read uncommited）</li><li>读已提交（Read commit）</li><li>可重复读（Repeatable read）</li><li>可串行化（Serializable）</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_1279\"></a>为什么会产生脏读、不可重复读、幻读？如何解决</h3>\n<blockquote>\n<ul><li><strong>产生脏读</strong>：R-UC、RC 的隔离级别中可能会发生 脏读</li><li><strong>不可重复读</strong>： R-UC、RC 的隔离级别中可能会发生 不可重复读</li><li><strong>幻读</strong>：R-UC、RC、RR 的隔离级别中会发生 幻读</li><li>**解决方式：**加锁、根据业务情况设置合理的隔离级别</li></ul>\n</blockquote>\n<hr/>\n<h2><a id=\"27_MySQL__1290\"></a>2.7 MySQL 锁篇</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/126250180\">请看我的文章 - MySQL - 全局锁、表级锁、行级锁、元数据锁、自增锁、意向锁、共享锁、独占锁、记录锁、间隙锁、临键锁、死锁</a></p>\n</blockquote>\n<h3><a id=\"_1294\"></a>请尽可能介绍数据库有哪些锁？</h3>\n<blockquote>\n<ul><li>全局读锁</li><li>表锁（表共享锁、表独占锁、元数据锁、自增锁、意向锁）</li><li>行锁（行共享锁、行独占锁、间隙锁、临键锁、插入意向锁）</li><li>死锁</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_1303\"></a>什么是乐观锁与悲观锁？怎么实现？</h3>\n<blockquote>\n<p><strong>理解一:</strong></p>\n<blockquote>\n<p><strong>乐观锁</strong>：乐观的认为数据不会发生冲突。在提交更新时, 才会对数据进行冲突检测。</p>\n<p><strong>悲观锁</strong>：优先于自身, 当前事务需要用时, 直接加锁, 其它事务只能等待。</p>\n</blockquote>\n<blockquote>\n<p><strong>实现乐观锁</strong>：加版本标识或时间戳, 先查询出当前版本号, 然后执行更改操作, 然后提交更新时, 再从数据库获取最新版本号, 如果与之前获取版本号相同, 则认为是正常数据, 直接更新, 否则为过期数据, 返回错误。</p>\n<p><strong>实现悲观锁</strong>： 共享锁或独占锁</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>理解二:</strong></p>\n<ol><li>乐观锁：执行更新的时候判断其他进程是否修改了数据, 如果修改了就放弃修改 \n   <ol><li>实现机制： \n     <ol><li>版本号机制：数据表加一个version版本号字段, 每次修改+1。</li><li>CAS算法</li></ol> </li><li>场景：读取频繁场景</li></ol> </li><li>悲观锁：先取锁再操作-操作数据的时候把数据锁住, 操作完成之后才会释放, 释放锁之前其他进程不能修改数据 \n   <ol><li>实现机制 \n     <ol><li>select * from table where id = 1 for update</li></ol> </li><li>场景：写入操作频繁的场景</li></ol> </li></ol>\n</blockquote>\n<br/>\n<h3><a id=\"_1329\"></a>死锁是如何产生的？如何避免与解决死锁？</h3>\n<blockquote>\n<ol><li>产生的四个必要条件 \n   <ol><li>互斥条件</li><li>请求与保持条件：一次性分配全部资源, 否则一个都不分配</li><li>非剥夺条件：当进程获得一部分资源等待其他资源的时候释放占有的资源</li><li>循环等待条件：<br/> 理解：一个资源只能被一个进程占用, 进程获取资源资源还能申请新的资源, 并且已经获得的资源不能被剥夺, 同时多个进程相互等待其他进程被占用的资源</li></ol> </li><li>解除死锁 \n   <ol><li>终止进程（全部干掉）</li><li>逐个种植（杀一个看一下有没有解除）</li></ol> </li></ol>\n</blockquote>\n<blockquote>\n<p><strong>尽量避免死锁</strong>：</p>\n<ul><li> <p>减少事务当中不必要的 SQL 操作, 这样事务持续的时间缩短, 减少发生死锁的可能性。</p> </li><li> <p>事务中, 如果需要修改, 则直接申请使用独占锁, 不要申请共享锁</p> </li><li> <p>在业务支持的情况下, 进行相关更改后立即提交事务, 降低发生死锁的可能性。</p> </li><li> <p>选择合适事务隔离级别</p> </li><li> <p>使用 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/show-engine.html\">SHOW ENGINE INNODB STATUS</a> 来查看最近的死锁原因。</p> </li><li> <p>启用 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks\">innodb_print_all_deadlocks</a> 收集更广泛的死锁信息, 记录在错误日志当中。</p> </li><li> <p>当看到死锁原因后, 请调整优化业务逻辑代码, 以避免再次发生死锁。</p> </li></ul>\n</blockquote>\n<blockquote>\n<p><strong>解决死锁</strong>：</p>\n<ul><li> <p>终止进程（全部干掉）</p> </li><li> <p>逐个终止（杀掉一个检查是否已解除死锁）</p> </li><li> <p>超时释放：通过 innodblockwait_timeout 设置等待死锁超时时间, 默认自动回滚小事务的锁</p> </li><li> <p>冲突释放：开启死锁检测, 发现会与其他事务产生死锁时, 自动释放当前语句的锁</p> </li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_SQL__1362\"></a>全局读锁、表读锁、表写锁、行读锁、行写锁的 SQL 语句</h3>\n<blockquote>\n<ul><li>全局读锁: 加锁: <code>flush tables with read lock;</code> 、解锁: <code>unlock tables;</code></li><li>表锁: <code>lock tables 表名 read</code>、<code>lock tables 表名 write</code>、解锁: <code>unlock tables;</code></li><li>行读锁: <code>select .... lock in share mode</code></li><li>行写锁: <code>.... for update</code></li></ul>\n</blockquote>\n<h3><a id=\"InnoDB__1369\"></a>InnoDB 存储引擎有几种锁的算法？</h3>\n<blockquote>\n<p>行级锁、间隙锁、临键锁</p>\n</blockquote>\n<br/>\n<h3><a id=\"_1375\"></a>锁优化有什么建议？</h3>\n<blockquote>\n<ul><li>根据业务场景, 设置合适的隔离级别</li><li>要想用好锁, 首先要创建合适的索引, 从而减少锁的冲突</li><li>在重要业务需要保持完整性时, 最好直接获取高级别的锁</li><li>根据业务场景, 尽量减少共享锁的使用</li></ul>\n</blockquote>\n<hr/>\n<h2><a id=\"28_MySQL__1386\"></a>2.8 MySQL 日志篇</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/126299725\">请看我的文章 - MySQL - 服务器日志（慢查询日志、错误日志、通用查询日志、二进制日志、中继日志、元数据日志）</a></p>\n</blockquote>\n<h3><a id=\"MySQL__1390\"></a>MySQL 有哪些系统日志</h3>\n<blockquote>\n<ul><li>错误日志</li><li>慢查询日志</li><li>通用查询日志</li><li>元数据日志</li><li>二进制日志</li><li>中继日志</li><li>redo log</li><li>undo log</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"redo_logundo_logbin_log__1403\"></a>redo log、undo log、bin log 的区别</h3>\n<blockquote>\n<ul><li><strong>redo log</strong>：<code>InnoDB</code> 存储引擎实现, 记录的是物理级别上的页修改操作, 比如页号, 偏移量, 写入的数据, 主要是为了保证数据的可靠性, 主要用于 崩溃恢复。</li><li><strong>undo log</strong>：记录的是逻辑操作日志, 比如对某一行数据进行了 <code>insert</code> 操作, 那么<code>undo log</code>就记录一条与之相反的 <code>delete</code> 操作。主要用于事务的回滚和一致性非锁定读。</li><li><strong>bin log</strong>：属于归档日志, 保存的是执行成功的语句。可以实现 主从复制 和 数据恢复。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"redo_log_WAL_1411\"></a>redo log 刷盘方式（WAL）</h3>\n<blockquote>\n<p>每执行一条 DML 语句, 会先把记录写入 <code>redo log buffer(用户空间)</code>, 再保存到内核空间的缓冲区 <code>OS-buffer</code> 中, 后续根据设置的策略, 再一次性将多个操作记录写入磁盘。</p>\n<ul><li>延迟写延迟刷</li><li>实时写延迟刷</li><li>实时写实时刷</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"binlog__1421\"></a>binlog 的格式有哪几种？</h3>\n<blockquote>\n<ul><li>Statement（基于 SQL 语句的复制）</li><li>Row（基于行的复制）</li><li>Mixed（混合模式）</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_1429\"></a>什么是脏页和干净页？</h3>\n<blockquote>\n<ul><li>脏页: 为了操作性能优化, 会把数据先放入内存中, 之后再统一更新至磁盘。当内存数据和磁盘数据内容不一致时, 那这个内存页为脏页；</li><li>干净页: 内存数据写入磁盘后, 内存页与磁盘数据相同, 则称为干净页。</li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_1436\"></a>什么情况下会引发刷脏页操作？</h3>\n<blockquote>\n<ul><li>redo log 写满</li><li>系统内存不足, 当需要释放内存时, 如果淘汰的是脏页, 则会出发刷脏页操作</li><li>MySQL 服务关闭时会出发刷脏页操作</li></ul>\n</blockquote>\n<hr/>\n<h2><a id=\"29_SQL__1446\"></a>2.9 SQL 语句实现篇</h2>\n<h3><a id=\"SQL__1448\"></a>SQL 优化有哪些方法？</h3>\n<blockquote>\n<ul><li>数据表字段类型优化</li><li>数据表引擎类型优化</li><li>数据表索引优化</li><li>SQL 语句优化 \n   <ul><li>不要使用 select *</li><li>exists 代替 in</li><li>所有字段非 null</li><li>不在索引列上使用 null 值判断</li><li>不在索引列上用函数或计算</li><li>根据业务数据的数量, 对 where 或 order by 的字段, 增加索引</li></ul> </li></ul>\n</blockquote>\n<br/>\n<h3><a id=\"_1463\"></a>如何优化大分页查询</h3>\n<blockquote>\n<ol><li>原因<br/> mysql查询分页数据时不是直接跳过offset(100000), 而是取offset + page_size = 100000 + 10 = 100010条数据, 然后放弃其掉前面的100000条数据, 所以效率地下</li><li>优化方案</li><li>延时关联：使用覆盖索引</li><li>主键阈值法：主键是自增的情况下, 通过条件推算出符合条件的主键最大值&amp;最小值（使用覆盖索引）</li><li>记录上一页的结果位置, 避免使用 OFFSET</li><li>子查询（<code>select * from test where id&gt;=(select id from test limit 1000000,1)limit 10</code>）</li><li>between, 这种方式 ID 必须自增且没有断点（<code>select * from test where id between 1000000 and 1000100 limit 100;</code>）</li><li>&gt;= , 这种方式 ID 必须自增且没有断点 (<code>select * from test where id&gt;=1000000 limit 100</code>)</li></ol>\n</blockquote>\n<br/>\n<h3><a id=\"explain__SQL___1477\"></a>explain 分析 SQL 性能问题, 了解各参数含义</h3>\n<blockquote></blockquote>\n<br/>\n<h3><a id=\"_10__1483\"></a>随机查询 10 条数据</h3>\n<blockquote>\n<p><code>select * from articles where id&gt;=(select floor(rand() * (select max(id) from articles))) order by id limit 10</code></p>\n</blockquote>\n<br/>\n<h3><a id=\"_SQL__1489\"></a>多表查询 SQL 语句案例</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_61386381/article/details/125281377\">多表查询与案例详解</a></p>\n</blockquote>\n<hr/>\n<h1><a id=\"Redis__1499\"></a>三、Redis 面试题</h1>\n<h2><a id=\"31_Redis__1501\"></a>3.1 Redis 是什么？</h2>\n<blockquote>\n<p>Redis 是非关系型数据库，key-value 型数据库</p>\n</blockquote>\n<br/>\n<h2><a id=\"32_Redis__1507\"></a>3.2 Redis 有哪几种数据结构类型？</h2>\n<blockquote>\n<p>String、Hash、List、Set、Zset</p>\n</blockquote>\n<br/>\n<h2><a id=\"33_Redis__1513\"></a>3.3 Redis 使用场景有哪些？</h2>\n<blockquote>\n<p>保存字符串、计数器、功能开关、队列、排行、关注点赞</p>\n</blockquote>\n<br/>\n<h2><a id=\"34_Redis__1519\"></a>3.4 Redis 持久化有哪几种？区别是什么</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/126099727\">点我查看 - Redis 持久化 - RDB 与 AOF</a></p>\n</blockquote>\n<br/>\n<h2><a id=\"35___1525\"></a>3.5 缓存的 雪崩、击穿、穿透</h2>\n<blockquote>\n<ol><li>缓存雪崩：同一时间大量缓存失效, 导致请求直接查询数据库, 数据库内存和CPU压力增加甚至宕机<br/> 解决： \n   <ol><li>热点数据永不过期或者分布到不同实例, 降低单机故障问题</li><li>缓存时间添加随机数, 防止大量缓存同时失效</li><li>做二级缓存或者双缓存, A为原始缓存 短时效, B为备份缓存 , 长期有效。更新时候双写缓存</li></ol> </li><li>缓存穿透：缓存和数据库都没有数据, 大量请求下, 所有请求直接击穿到数据库, 导致宕机。<br/> 解决：<br/> 1. 缓存空值（null）或默认值<br/> 2. 业务逻辑前置校验<br/> 3. 使用布隆过滤器请求白名单<br/> 4. 用户黑名单限制</li><li>缓存击穿：数据库中有数据, 但是缓存突然失效之后发生大量请求导致数据库压力增加甚至打垮宕机<br/> 解决： \n   <ol><li>热点数据永不过期</li><li>互斥锁：获取锁之后不管成功还是失败都要释放锁</li></ol> </li></ol>\n</blockquote>\n<br/>\n<h2><a id=\"36_Redis__1545\"></a>3.6 Redis 数据过期和淘汰策略</h2>\n<blockquote>\n<ol><li>常规过期删除策略 \n   <ol><li>定时删除 \n     <ol><li>通过定时器在过期的时候立即删除</li><li>内存释放及时但是消耗更多的CPU, 大并发的时候需要消耗CPU资源影响处理请求的速度</li><li>内存友好, CPU不友好</li></ol> </li><li>惰性删除 \n     <ol><li>放任键过期不管, 到下次需要去取出的时候检查是否过期并删除</li><li>可能存在大量过期键, 且不会使用, 导致内存溢出</li><li>内存不友好, CPU友好</li></ol> </li><li>定期删除 \n     <ol><li>每隔一段时间检查, 删除过期的键</li><li>删除多少和检查多少有算法决定</li></ol> </li></ol> </li><li>redis采用的 惰性删除 + 定期删除 \n   <ol><li>周期性随机测试一些设置了过期时间的键进行检查, 到期则删除</li><li>每次清理的时间不超过CPU的25%, 达到时间则退出检查</li><li>定期没有删除到的键, 且以后不会使用的键还是会存在内存中, 所以需要配合淘汰策略</li></ol> </li><li>淘汰策略（内存不足以写入新数据的时候执行） \n   <ol><li>volatile-lru ：设置了过期时间且最近使用越少越优先淘汰</li><li>volatile-ttl ：设置了过期时间且过期时间越早越优先淘汰</li><li>volatile-random ：设置了过期时间中随机删除</li><li>allkeys-lru ：所有键中最近使用越少越优先淘汰(修改：2022-08-24 15:40:37)</li><li>allkeys-random ：所有键中过期随机淘汰</li><li>no-enviction ：不允许淘汰, 内存不足报错</li></ol> </li></ol>\n</blockquote>\n<br/>\n<h2><a id=\"37__Redis__1573\"></a>3.7 怎么实现 Redis 高可用</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/wanghengwhwh/article/details/119245611\">Redis - 高可用方案</a></p>\n<br/>\n<p><a href=\"https://blog.csdn.net/ganyouxian_java/article/details/124053853\">Redis - 高可用几种方案</a></p>\n<br/>\n<ul><li>主从复制</li><li>哨兵模式</li><li>Redis 集群</li></ul>\n</blockquote>\n<br/>\n<h2><a id=\"38_Redis__Memcached__1589\"></a>3.8 Redis 与 Memcached 的区别</h2>\n<blockquote>\n<ul><li><strong>数据结构</strong>: Memcached 仅支持 key-value 格式</li><li><strong>执行速度</strong>: Memcached 读写速度高于 Redis</li><li><strong>复制</strong>: Memcached 不支持复制, Redis 支持主人复制</li><li><strong>线程</strong>: Memcached 是多线程, Redis 是单线程</li></ul>\n</blockquote>\n<br/>\n<h2><a id=\"39_Redis__1598\"></a>3.9 Redis 分布式锁怎么实现</h2>\n<blockquote>\n<ol><li>实现：<br/> 加锁：setnx<br/> 解锁：del<br/> 锁超时：expire</li><li>可能出现的问题 \n   <ol><li>setnx 和expire非原子性问题（加锁之后还没来得及设置超时就挂了）<br/> 解决方案：<br/> Redis 2.6.12以上版本为set指令增加了可选参数, 伪代码如下：set（key, 1, 30, NX）,这样就可以取代setnx指令</li><li>超时误删其他进程锁。（A进程执行超时, 导致锁释放, 这时候B进程获取锁开始处理请求, 这时候A进程处理完成, 会误删B进程的锁）<br/> 解决方案：只能删除自己进程的锁 （lua脚本防止B进程获取过期锁之后误删A进程的锁）</li><li>并发场景, A进程执行超时导致锁释放, 这时候B进程获取到锁。<br/> 解决方案：开启守护进程, 给当前进程要过期的锁延时。</li><li>单点实例安全问题<br/> 单机宕机之后导致所有客户端无法获取锁<br/> 解决：<br/> 主从复制, 因为是异步完成的所以无法完全实现解决</li></ol> </li></ol>\n</blockquote>\n<hr/>\n<h1><a id=\"_1625\"></a>四、前端面试题</h1>\n<h2><a id=\"41__1627\"></a>4.1 基础篇</h2>\n<h3><a id=\"_jQuery__DOM__1629\"></a>必须掌握 jQuery 操作 DOM 节点的常用情况</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_44009656/article/details/124564531\">jQuery 中的 DOM 操作（超详细）</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"_css__1635\"></a>常用 css 设置</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_42625428/article/details/107456414\">常用的css</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"JS__1641\"></a>JS 数组与对象的操作</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/m0_61700036/article/details/122649566\">JS 对象和数组的遍历方法</a></p>\n</blockquote>\n<br/>\n<h3><a id=\"_1647\"></a>跨域请求的解决方案</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/XJ5210224/article/details/124614839\">9种常见的前端跨域解决方案（详解）</a></p>\n</blockquote>\n<hr/>\n<h1><a id=\"42__1657\"></a>4.2 网络知识面试题</h1>\n<h2><a id=\"get__post__1659\"></a>get 与 post 的区别</h2>\n<blockquote>\n<ul><li>正常情况已经习惯 get 用于获取数据, post 用于增删改需求</li><li>GET \n   <ul><li>可被缓存</li><li>多用于读取一个资源，以 ? 分割 url 和请求数据, 参数之间用 &amp; 相连</li><li>请求的数据，地址栏可明文看到，也可通过监听器检测到</li><li>传送数据量小，不能大于 2KB, 但每个浏览器定义所不同</li><li>产生一个 TCP 数据包, 正常情况下 header 和 data 一并发给服务器, 服务器响应 200</li></ul> </li><li>POST \n   <ul><li>基于 <code>&lt;form&gt;</code> 表单提交向服务器发起请求</li><li>请求的数据，不是明文，通过 request body 传递, 但也可通过监听器检测到</li><li>传送数据量默认不受限制</li><li>产生两个 TCP 数据包, 正常情况下先发送 header, 服务器响应 100, 再发送 data, 服务器响应 200</li></ul> </li></ul>\n</blockquote>\n<br/>\n<h2><a id=\"http__1676\"></a>http 协议由什么组成？</h2>\n<blockquote>\n<ul><li> <p>请求报文组成</p> </li><li> <p>请求行：包含请求方法、URI、HTTP版本信息</p> </li><li> <p>请求首部字段</p> </li><li> <p>请求内容实体</p> </li><li> <p>响应报文组成</p> </li><li> <p>状态行：包含HTTP版本、状态码、状态码的原因短语</p> </li><li> <p>响应首部字段</p> </li><li> <p>响应内容实体</p> </li></ul>\n</blockquote>\n<br/>\n<h2><a id=\"http__https__1694\"></a>http 与 https 的区别</h2>\n<blockquote>\n<ol><li>端口：http 80； https ：443</li><li>http无状态, https是有http + ssl构建的可进行加密传输的协议</li><li>http明文传输, https加密传输</li><li>http更快, 三次握手三个包, https 需要12个包（3个tcp包+9个ssl握手包）</li></ol>\n</blockquote>\n<br/>\n<h2><a id=\"WebSocket__1703\"></a>WebSocket 原理</h2>\n<br/>\n<h2><a id=\"_1709\"></a>浏览器访问某个网址的详细过程</h2>\n<blockquote>\n<ol><li>用户访问域名</li><li>域名DNS解析</li><li>请求到对应IP服务器和端口</li><li>nginx 监听到对应端口的请求</li><li>nginx 对 url 进行 location 匹配</li><li>执行匹配 location 下的规则</li><li>nginx 转发请求给 php</li><li>php-fpm 的 master 进程监听到 nginx 请求</li><li>闲置的worker进程抢占并执行请求</li><li>worker 进程返回执行结果给 nginx</li><li>nginx返回结果给用户</li></ol>\n</blockquote>\n<br/>\n<h2><a id=\"OSI_1725\"></a>OSI网络协议的七个层级</h2>\n<blockquote>\n<p>应用层、表示层、会话层、传输层、网络层、（数据）链路层、物理层<br/> 记忆套路：<br/> 首字：应表会传（物链网）<br/> 第一个字：应用层（出现次数多, 易忆）<br/> 前四个正向：应表 - 会传<br/> 后三个反向：物联网谐音比网链物更好记</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_35453862/article/details/115197695\">OSI七层网络模型学习记录</a></p>\n</blockquote>\n<br/>\n<h2><a id=\"TCPUDP__1738\"></a>TCP/UDP 的区别</h2>\n<blockquote>\n<ol><li>都是属于传输层协议</li><li>TCP \n   <ol><li>面向连接, 所以只能一对一</li><li>面向字节流传输</li><li>数据可靠, 不丢失</li><li>全双工通信</li></ol> </li><li>UDP（根据TCP特点反记） \n   <ol><li>无连接, 支持一对一, 一对多, 多对多</li><li>面向报文传输</li><li>首部开销小, 数据不一定可靠但是速度更快</li></ol> </li><li>TCP 是事先为所发送的数据开辟出连接好的通道，然后再进行数据发送；而UDP则不为IP提供可靠性、流控或差错恢复功能。一般来说，TCP对应的是可靠性要求高的应用，而UDP对应的则是可靠性要求低、传输经济的应用。</li></ol>\n</blockquote>\n<br/>\n<h2><a id=\"_1754\"></a>三次握手四次挥手</h2>\n<blockquote>\n<p><a href=\"https://learnku.com/articles/68081\">点我查看 - TCP 协议发送 / 接收数据实现</a></p>\n</blockquote>\n<blockquote>\n<p><strong>第一种：</strong></p>\n<blockquote>\n<p><strong>三次握手:</strong></p>\n<ol><li>首先服务器监听某个端口, 客户端发起请求 携带 syn 数据包 (第一次)</li><li>服务端接收到这个数据包, 返回 syn/ack 的数据包给客户端 (第二次)</li><li>最后客户端再次发送一个 ack 的数据包（第三次)。</li></ol>\n</blockquote>\n<blockquote>\n<p><strong>四次挥手:</strong></p>\n<ol><li>客户端发送一个FIN（关闭连接）, 用来关闭客户端到服务器的数据传送, 此时客户端进入FIN_WAIT_1状态</li><li>服务器收到FIN后, 发送一个ACK给客户端, 确认序号为收到需要+1（与SYN相同, 一个FIN占用一个序号), 此时服务器进入CLOSE_WAIT状态</li><li>服务器发送一个FIN, 用来关闭服务器到客户端的数据传送, 服务器进入LAST_ACK状态</li><li>客户端收到FIN后, 客户端进入TIME_WAIT状态, 接着发送一个ACK给服务器, 确认序号为收到的序号+1, 服务器进入CLOSED状态</li></ol>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>第二种：</strong></p>\n<blockquote>\n<p>三次握手：</p>\n<ol><li>第一次：客户端发送SYN = 1,seq = client_isn<br/> 作用：<br/> 客户端：无<br/> 服务端：确认自己的接收功能和客户端的发送功能</li><li>第二次：服务端发送SYN = 1,seq = server_isn,ACK =client_isn +1<br/> 作用：<br/> 客户端：确认自己发送和接收都正常, 确认服务端的接收和发送正常<br/> 服务端：确认自己的接收正常, 确认服务端的发送正常（这时候服务端还不能确认客户端接收是否正常）</li><li>第三次：客户端发送SYN = 0, ACK = server_isn+1,seq =client_isn+1<br/> 作用：双方确认互相的接收和发送正常, 建立连接</li></ol>\n</blockquote>\n<blockquote>\n<p>四次挥手</p>\n<ol><li>第一次:客户端发送FIN<br/> 作用：告诉服务端我没有数据发送了（但是还能接收数据）</li><li>第二次：服务端发送ACK<br/> 作用：告诉客户端收到请求了, 可能服务端可能还有数据需要发送, 所以客户端收到进入FIN_WAIT状态, 等服务端数据传输完之后发送FIN</li><li>第三次：服务端发送FIN<br/> 作用：服务端告诉客户端我发送完了, 可以关闭连接了。</li><li>第四次:客户端发送ACK<br/> 作用：客户端收到FIN之后, 担心服务端不知道要关闭, 所以发送一个ACK, 进入TIME_WAIT, 等待2MSL之后如果没有收到回复, 证明服务端已经关闭了, 这时候客户端也关闭连接。</li></ol>\n</blockquote>\n<blockquote>\n<p><strong>注意：</strong></p>\n<ol><li>当收到对方的FIN报文时, 仅仅表示对方不再发送数据了但是还能接收数据</li><li>最后需要等待2MSL是因为网络是不可靠的, 如果服务端没有收到最后一次ACK,服务端会重新放FIN包然后等客户端再次发送ACK包然后关闭（所以客户端最后发送ACK之后不能立即关闭连接）</li></ol>\n</blockquote>\n</blockquote>\n<br/>\n<h2><a id=\"_1806\"></a>状态码</h2>\n<h3><a id=\"100200300400500__1808\"></a>100、200、300、400、500 分别是什么意思？</h3>\n<blockquote>\n<ol><li> <p>状态码分类<br/> - 1xx：信息, 服务器收到请求, 需要请求者继续操作<br/> - 2xx：成功<br/> - 3xx：重定向<br/> - 4xx：客户端错误<br/> - 5xx：服务端错误</p> </li><li> <p>常用状态码</p> <p>200：请求成功<br/> 301：永久重定向<br/> 302：临时移动<br/> 400 bad request：客户端请求语法错误<br/> 401 unauthorized：客户端没有权限<br/> 403 forbidden：服务器拒绝客户端请求<br/> 404 not found：客户端请求资源不存在<br/> 500 Internal Server Eerro：服务器内部错误<br/> 502 bad gateway：作为网关或者代理工作的服务器尝试执行请求时, 从上游服务器接收到无效的响应<br/> 503 Service Unavailable 超载或系统维护<br/> 504 Gateway timeout：网关超时</p> </li></ol>\n</blockquote>\n<br/>\n<h2><a id=\"_1833\"></a>什么是心跳机制？</h2>\n<blockquote>\n<p>心跳就是业务层来提供一个连接判断是否存活。</p>\n</blockquote>\n<blockquote>\n<ul><li> <p>客户端定时发送一个心跳包, 告诉服务器, 服务器定时检测所有客户端。看最后一个心跳包的时间长短。如果过长则主动关闭这个连接。</p> </li><li> <p>服务器定时询问所有的客户端。如果没有反馈则关闭连接。</p> </li></ul>\n<p><strong>两者的区别:</strong></p>\n<ul><li>第一种, 对服务和网络压力小, 但需要客户但配合。</li><li>第二种对服务器和网络压力大。</li></ul>\n</blockquote>\n<br/>\n<h2><a id=\"_1850\"></a>长连接与短连接？区别是什么？</h2>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/RebeccaG/p/12091939.html\">HTTP 长连接 短连接</a></p>\n</blockquote>\n<br/>\n<hr/>\n<h1><a id=\"_1862\"></a>五、安全面试题</h1>\n<h2><a id=\"51_SQL_1864\"></a>5.1 SQL注入是什么？如何预防？</h2>\n<blockquote>\n<p><a href=\"https://www.php.cn/php-ask-462550.html\">php 防sql注入方法</a></p>\n<br/>\n<p><a href=\"https://blog.csdn.net/IT__learning/article/details/119948514\">SQL 注入及预防</a></p>\n</blockquote>\n<br/>\n<h2><a id=\"52_XSS__SCRF_Web__1874\"></a>5.2 XSS 与 SCRF 攻击？Web 攻击如何预防？</h2>\n<blockquote>\n<ol><li>sql注入</li><li>XSS攻击<br/> 推荐阅读(很详细的案例来分析XSS攻击的不同类型及解决方案)：<a href=\"https://tech.meituan.com/2018/09/27/fe-security.html\">前端安全系列（一）：如何防止XSS攻击？</a></li><li>CSRF攻击：<br/> 推荐阅读 ：<a href=\"https://tech.meituan.com/2018/10/11/fe-security-csrf.html\">前端安全系列（二）：如何防止CSRF攻击？</a></li><li>文件上传漏洞<br/> 推荐阅读 ：<a href=\"https://xz.aliyun.com/t/7365\">浅析文件上传漏洞</a></li><li>跨域问题：<br/> 推荐阅读 ： \n   <ol><li><a href=\"https://segmentfault.com/a/1190000011145364\">前端常见跨域解决方案（全）</a></li><li><a href=\"https://juejin.cn/post/6844904024924225544\">JSONP原理详解——弄懂JSONP及其实现方法</a></li></ol> </li><li>jsonp</li><li>cors</li><li>nginx代理</li></ol>\n</blockquote>\n<br/>\n<h2><a id=\"53_PHP__1893\"></a>5.3 PHP 文件上传安全性考虑</h2>\n<blockquote>\n<ul><li>限制文件大小</li><li>黑名单、白名单文件类型检测</li><li>统一规则文件名</li><li>非执行权限存储</li><li>下载资料限制</li></ul>\n</blockquote>\n<br/>\n<hr/>\n<h1><a id=\"API__1909\"></a>六、API 面试题</h1>\n<h2><a id=\"61___1911\"></a>6.1 接口安全措施, 有哪些实现方法？</h2>\n<blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s/H9lzS_UJCC21BoSOpq-FMQ\">一文搞定前后端所有鉴权方案！</a></p>\n<br/>\n<ul><li>常用对称加密（AES、DES）</li><li>常用非对称加密（RSA、DSA）</li><li>MD5 加签验签, <a href=\"https://blog.csdn.net/qq_35135993/article/details/115031149\">点我查看</a></li><li>黑白名单</li><li>IP限流</li><li>https 协议</li><li>验证码</li></ul>\n</blockquote>\n<br/>\n<h2><a id=\"62__1927\"></a>6.2 降级、限流、熔断实现原理及方式</h2>\n<blockquote></blockquote>\n<br/>\n<hr/>\n<h1><a id=\"_1939\"></a>七、高级面试题</h1>\n<h2><a id=\"71__1941\"></a>7.1 如何解决并发问题？</h2>\n<blockquote>\n<ol><li>项目拆分（根据项目需求及模块功能拆分成多个子系统）</li><li>提升硬件配置 \n   <ol><li>应用集群、负载均衡</li><li>扩容服务器硬件配置</li><li>提升网络带宽</li></ol> </li><li>存储方案 \n   <ol><li>文件存储服务器</li><li>图片存储服务器</li><li>专用搜索服务器</li></ol> </li><li>缓存 \n   <ol><li>Nginx 缓存</li><li>应用缓存: 热点数据、静态配置等</li></ol> </li><li>降级（自动或人工开关控制） \n   <ol><li>根据粒度范围暂时关闭影响度小的服务（例： 精品推荐、分享等）</li><li>延迟服务（例：延迟统计各种分数）</li><li>写降级</li><li>读降级</li></ol> </li><li>限流 \n   <ol><li>验证码</li><li>IP黑名单</li><li>Nginx 限流 控制速率（limit_req_zone）</li><li>Nginx 限流 控制并发连接数（limit_conn_zone 和 limit_conn）</li></ol> </li><li>消息队列 \n   <ol><li>Redis</li><li>RabbitMQ</li><li>Kafka</li></ol> </li><li>MySQL 数据库优化 \n   <ol><li>SQL 语句优化</li><li>索引优化</li><li>数据表结构优化</li><li>分库分表（结合项目需求）</li><li>主从复制、读写分离</li><li>专用搜索服务器</li></ol> </li><li>前端优化 \n   <ol><li>合并 css 和 js</li><li>CDN 加速</li><li>页面静态化与动静分离</li></ol> </li><li>后端优化 \n   <ol><li>代码优化</li></ol> </li></ol>\n</blockquote>\n<br/>\n<h2><a id=\"72__1985\"></a>7.2 简单秒杀系统并发考虑</h2>\n<blockquote>\n<ul><li>硬件 - 秒杀系统使用单独服务器</li><li>集群 - 服务器、Redis、MySQL 集群（如果一台不够, 一台增加到N台, 壕）</li><li>前端 - 秒杀页面静态化, CDN加速</li><li>前端 - 控制提交频率、按钮置灰（只能拦住小白）</li><li>Nginx - IP限流</li><li>后端 - 用户限流, 对用户 uid 计数, 比如 10 秒内只准透过1个请求, 重复请求均返回一个提示页面。</li><li>队列 - Redis 预先将商品入队</li><li>队列 - 请求时, Redis 队列控制, 串行处理</li><li>数据库 - 不需要实时更新数据 \n   <ul><li>得全靠上边这些支撑了, 看 Redis 的瓶颈</li></ul> </li><li>数据库 - 实时更新数据 \n   <ul><li>如果是单库, 可使用表锁、排他锁</li></ul> </li><li>如果支持, 业务规则分化。比如有一万个库存, 每个整点只放 2 千个库存, 一天分 5 个时间点抢。</li><li>防止直接通过链接访问秒杀页面, 秒杀链接通过父级页面点击按钮获取一个唯一标识, 点击提交时, 没有带唯一标识的请求, 直接返回 “很遗憾, 本次没有抢到”（这个就比较狗了, 哈哈）</li><li>点击抢购弹出输入验证码（这个功能让人有点不爽, 京东也这样做了。。。吐了）</li></ul>\n</blockquote>\n<br/>\n<h2><a id=\"73__2005\"></a>7.3 单点登录实现原理</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_41595452/article/details/122066984\">单点登录原理及实现方式</a></p>\n<br/>\n<p><a href=\"https://blog.csdn.net/qq_41956994/article/details/112143232\">单点登录系统原理与实现</a></p>\n</blockquote>\n<br/>\n<h2><a id=\"74__2015\"></a>7.4 数据结构特性</h2>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/373576568\">数据结构（堆、栈、队列、数组、链表、二叉树、红黑树、Hash表、B+Tree树）</a></p>\n<p><a href=\"https://baijiahao.baidu.com/s?id=1678432580223783062&amp;wfr=spider&amp;for=pc\">一文了解 8 种常见的数据结构</a></p>\n</blockquote>\n<br/>\n<h2><a id=\"75__2023\"></a>7.5 说一下你在项目中遇到的难点以及如何解决的？</h2>\n<blockquote>\n<p>想一想，每人留言说一条，当然，两条也可以 😘</p>\n</blockquote>\n<br/>\n<hr/>\n<h1><a id=\"_2035\"></a>八、算法面试题</h1>\n<h2><a id=\"81__2037\"></a>8.1 参考学习资料</h2>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/50479555\">算法的时间与空间复杂度</a></p>\n<br/>\n<p><a href=\"https://cloud.tencent.com/developer/article/1769988\">LeetCode0：学习算法必备知识：时间复杂度与空间复杂度的计算</a></p>\n</blockquote>\n<h2><a id=\"82__2047\"></a>8.2 时间复杂度与空间复杂度</h2>\n<h3><a id=\"_2049\"></a>时间复杂度</h3>\n<blockquote>\n<ul><li> <p><strong>时间复杂度</strong>：全程为渐进时间复杂度, 估算对处理器的使用效率（描述算法的效率趋势, 并不是指算法具体使用的时间, 因为不同机器的性能不一致, 只是一种效率计算的通用方法）</p> </li><li> <p><strong>表示方法</strong>：大O符号表示法</p> </li><li> <p><strong>复杂度量级：</strong></p>\n<ul><li>常数阶O(1)</li><li>线性阶O(n)</li><li>平方阶O(n²)</li><li>立方阶O(n³)</li><li>K次方阶O(n^k)</li><li>指数阶(2^n)</li><li>对数阶O(logN)</li><li>线性对数阶O(nlogN)</li></ul> </li><li> <p>时间复制类型：</p>\n<ul><li>最好时间复杂</li><li>最坏时间复杂度</li><li>平均时间复杂度</li><li>均摊时间复杂度</li></ul> </li></ul>\n</blockquote>\n<h3><a id=\"_2072\"></a>空间复杂度</h3>\n<blockquote>\n<p>空间复杂度：全程渐进空间复杂度, 估算对计算机内存的使用程度（描述算法占用的存储空间的趋势, 不是实际占用空间, 同上）</p>\n</blockquote>\n<hr/>\n<h1><a id=\"HR__2080\"></a>九、HR 常问问题</h1>\n<blockquote>\n<p><a href=\"https://dandelioncloud.cn/article/details/1440788504099016706\">点我查看 - HR常问的面试题</a></p>\n</blockquote>\n<hr/>\n<h1><a id=\"_2090\"></a>十、转载地址</h1>\n<blockquote>\n<p>参考原文太多了, 没有全部记录下来, 只记了一部分。<br/> <br/></p>\n<p><a href=\"https://github.com/colinlet/PHP-Interview-QA\">凌枫 - PHP面试问答</a></p>\n<br/>\n<p><a href=\"https://learnku.com/laravel/t/65632\">2022PHP面试题分享及归档</a></p>\n<br/>\n<p><a href=\"https://mp.weixin.qq.com/s/SNPO2N661Qyd8hSrx9wdAw\">PHP 面试经常被问到的知识点汇总, 对你非常有用</a></p>\n<br/>\n<p><a href=\"https://zhuanlan.zhihu.com/p/385093242\">PHP面试题大全（值得收藏）</a></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}