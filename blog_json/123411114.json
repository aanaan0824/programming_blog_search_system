{"blogid": "123411114", "writerAge": "码龄2年", "writerBlogNum": "56", "writerCollect": "2913", "writerComment": "2535", "writerFan": "4876", "writerGrade": "6级", "writerIntegral": "7007", "writerName": "天影云光", "writerProfileAdress": "writer_image\\profile_123411114.jpg", "writerRankTotal": "2094", "writerRankWeekly": "17534", "writerThumb": "2273", "writerVisitNum": "53429", "blog_read_count": "1158", "blog_time": "已于 2022-03-29 16:02:23 修改", "blog_title": "＜数据结构＞还不会写顺序表？我手把手教你", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_1\">1.线性表</a></li><li><a href=\"#2_5\">2.顺序表</a></li><li><ul><li><a href=\"#21_6\">2.1概念及结构</a></li><li><a href=\"#22__14\">2.2 接口实现</a></li><li><ul><li><a href=\"#221_51\">2.2.1初始化</a></li><li><a href=\"#222__63\">2.2.2 检查容量</a></li><li><a href=\"#223__90\">2.2.3 顺序表打印</a></li><li><a href=\"#224__107\">2.2.4 顺序表尾插</a></li><li><a href=\"#225__123\">2.2.5 顺序表尾删</a></li><li><a href=\"#226__138\">2.2.6 顺序表头插</a></li><li><a href=\"#227__163\">2.2.7 顺序表头删</a></li><li><a href=\"#228_posx_190\">2.2.8 顺序表在pos位置插入x</a></li><li><a href=\"#229_pos_234\">2.2.9 顺序表删除pos位置的值</a></li><li><a href=\"#2210__254\">2.2.10 尾插、尾删、头插、头删的改进</a></li><li><a href=\"#2211__296\">2.2.11 顺序表查找</a></li><li><a href=\"#2212__315\">2.2.12 顺序表销毁</a></li></ul>\n</li><li><a href=\"#23__328\">2.3 数组相关面试题</a></li><li><a href=\"#24__334\">2.4 顺序表的问题及思考</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_1\"></a>1.线性表</h1>\n<p>线性表（linear list）是n个具有相同特性的数据元素的有限序列。 线性表是一种在实际中广泛使用的数据结构，常见的线性表：顺序表、链表、栈、队列、字符串…<br/> 线性表在逻辑上是线性结构，也就说是连续的一条直线。但是在物理结构上并不一定是连续的，线性表在物理上存储时，通常以数组和链式结构的形式存储<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5d24e46deba44fa6a8a7c55db1ed12fa.png\"/></p>\n<h1><a id=\"2_5\"></a>2.顺序表</h1>\n<h2><a id=\"21_6\"></a>2.1概念及结构</h2>\n<p>顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。</p>\n<p>顺序表一般可以分为：</p>\n<ol><li>静态顺序表：使用定长数组存储元素。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\34a97a49a77a481cbac8a66c510856e3.png\"/></li><li>动态顺序表：使用动态开辟的数组存储<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1ac0e171cece4f5791b7254e65682eb8.png\"/></li></ol>\n<h2><a id=\"22__14\"></a>2.2 接口实现</h2>\n<p>静态顺序表只适用于确定知道需要存多少数据的场景。静态顺序表的定长数组导致N定大了，空间开多了浪费，开少了不够用。所以现实中基本都是使用动态顺序表，根据需要动态的分配空间大小，所以下面我们实现动态顺序表。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLDataType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SeqList</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\t <span class=\"token comment\">//存储数据个数</span>\n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span><span class=\"token comment\">//存储空间大小</span>\n<span class=\"token punctuation\">}</span>SeqList<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInit</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListDestroy</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//销毁</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPrint</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListCheckCapacity</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//检查容量</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">SeqListFind</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//查找</span>\n\n<span class=\"token comment\">//时间复杂度是O（1）</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//尾删</span>\n\n<span class=\"token comment\">//时间复杂度是O（N）</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//头删</span>\n\n<span class=\"token comment\">//时间复杂度是O（N）</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在pos位置插入</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在pos位置删除</span>\n\n</code></pre>\n<h3><a id=\"221_51\"></a>2.2.1初始化</h3>\n<p>就是将元素分别初始化。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInit</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpsl<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpsl<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpsl<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"222__63\"></a>2.2.2 检查容量</h3>\n<p>初始化时容量为0，想要放数据得增加容量，每次插入数据也得保证容量充足，为了方便，我们先写一个用于检查容量并增容的函数。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//检查容量</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListCheckCapacity</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//如果满了，就要扩容</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> psl<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">size_t</span> newCapacity <span class=\"token operator\">=</span> psl<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> psl<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//防止一开始capacity=0无法*2增容</span>\n\t\tSLDataType<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SLDataType<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"realloc fail\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tpsl<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t\t\tpsl<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> newCapacity<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"223__90\"></a>2.2.3 顺序表打印</h3>\n<p>就是遍历一次把所有元素打印出来，这样可以检查函数写的是否正确，及时订正。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPrint</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> psl<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> psl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"224__107\"></a>2.2.4 顺序表尾插</h3>\n<p><img alt=\"请添加图片描述\" src=\"image\\abba0996d55040769f92f4e5270742ac.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//如果满了，就要扩容</span>\n\t<span class=\"token function\">SeqListCheckCapacity</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tpsl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>psl<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tpsl<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"225__123\"></a>2.2.5 顺序表尾删</h3>\n<p>只需要把size-1这样的话下一个数据就会把尾部数据覆盖掉，达到删除的效果。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpsl<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"226__138\"></a>2.2.6 顺序表头插</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\333a712c67d64f0e9f089e608e014a3d.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//如果满了，就要扩容</span>\n\t<span class=\"token function\">SeqListCheckCapacity</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//挪动数据,腾出头部位置</span>\n\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> psl<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpsl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tpsl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tpsl<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"227__163\"></a>2.2.7 顺序表头删</h3>\n<p>将第一个位置覆盖掉，然后用尾删的思路将最后一个数据删除。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\37ed8c0a1a5e4e48af96389e84bb808c.png\"/></p>\n<pre><code class=\"prism language-c\">\n<span class=\"token comment\">//头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//挪动数据覆盖第一个</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;</span> psl<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tpsl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>begin <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tbegin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tpsl<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"228_posx_190\"></a>2.2.8 顺序表在pos位置插入x</h3>\n<p>思路跟头插很像,但内含陷阱！</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//在pos位置插入</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//如果满了，就要扩容</span>\n\t<span class=\"token function\">SeqListCheckCapacity</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">温和检测</span>\n\t<span class=\"token comment\">//if (pos &gt; psl-&gt;size)</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tprintf(\"pos越界：%d\\n\", pos);</span>\n\t<span class=\"token comment\">//\treturn;</span>\n\t<span class=\"token comment\">//}</span>\n\t<span class=\"token comment\">//暴力检测</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;=</span> psl<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//pos=0的时候由于无符号整型判断时的整型提升，会出问题</span>\n\t<span class=\"token comment\">//size_t end = psl-&gt;size - 1;</span>\n\t<span class=\"token comment\">//while (end &gt;= pos)</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tpsl-&gt;a[end + 1] = psl-&gt;a[end];</span>\n\t<span class=\"token comment\">//\tend--;</span>\n\t<span class=\"token comment\">//}</span>\n\t<span class=\"token comment\">//psl-&gt;a[pos] = x;</span>\n\t<span class=\"token comment\">//psl-&gt;size++;</span>\n\n\t<span class=\"token comment\">//这样写才不会有问题</span>\n\t<span class=\"token class-name\">size_t</span> end <span class=\"token operator\">=</span> psl<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;</span> pos<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpsl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">--</span>end<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tpsl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tpsl<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"229_pos_234\"></a>2.2.9 顺序表删除pos位置的值</h3>\n<p>思路跟头删很像</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//在pos位置删除</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> psl<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">size_t</span> begin <span class=\"token operator\">=</span> pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;</span> psl<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpsl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>begin <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>begin<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tpsl<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"2210__254\"></a>2.2.10 尾插、尾删、头插、头删的改进</h3>\n<p>有了上面两个通常情况下的增删函数，我们就能改进尾插、尾删、头插、头删。这样能够快速写完顺序表</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SeqListCheckCapacity</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">,</span> psl<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在size位置插入数据</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">,</span> psl<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在size-1位置删除数据</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SeqListCheckCapacity</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在0位置插入数据</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在0位置删除数据</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"2211__296\"></a>2.2.11 顺序表查找</h3>\n<p>遍历一遍，一个个找</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">SeqListFind</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> psl<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"2212__315\"></a>2.2.12 顺序表销毁</h3>\n<p>最后的最后，一定要养成好习惯，不要忘记销毁之前申请的空间，防止内存泄漏。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//销毁</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListDestroy</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpsl<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpsl<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpsl<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"23__328\"></a>2.3 数组相关面试题</h2>\n<ol><li> <p>删除排序数组中的重复项。<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\">26. 删除有序数组中的重复项</a>.</p> </li><li> <p>原地移除数组中所有的元素val，要求时间复杂度为O(N)，空间复杂度为O(1)。<a href=\"https://leetcode-cn.com/problems/remove-element/\">27. 移除元素</a>.</p> </li><li> <p>合并两个有序数组。<a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\">88. 合并两个有序数组</a>.</p> </li></ol>\n<h2><a id=\"24__334\"></a>2.4 顺序表的问题及思考</h2>\n<p>问题：</p>\n<ol><li>中间/头部的插入删除，时间复杂度为O(N)</li><li>增容需要申请新空间，拷贝数据，释放旧空间。会有不小的消耗。</li><li>增容一般是呈2倍的增长，势必会有一定的空间浪费。例如当前容量为100，满了以后增容到200，我们再继续插入了5个数据，后面没有数据插入了，那么就浪费了95个数据空间。</li></ol>\n<blockquote>\n<p>思考：如何解决以上问题呢？下期会给出了链表的结构，现在大家可以想想链表会如何解决这些问题。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}