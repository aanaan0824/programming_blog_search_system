{"blogid": "120483621", "writerAge": "码龄3年", "writerBlogNum": "75", "writerCollect": "1443", "writerComment": "1760", "writerFan": "8526", "writerGrade": "6级", "writerIntegral": "5744", "writerName": "敲代码的布莱恩特", "writerProfileAdress": "writer_image\\profile_120483621.jpg", "writerRankTotal": "8351", "writerRankWeekly": "16534", "writerThumb": "1839", "writerVisitNum": "89750", "blog_read_count": "1290", "blog_time": "于 2021-09-29 07:45:30 发布", "blog_title": "【C语言】想要节省空间，你必须要知道——动态内存管理（附通讯录动态内存版源码）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ed8e671f216e4c0a8725fba4506431ad.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>【C语言】想要节省空间，你必须要知道——动态内存管理 （附通讯录动态内存版源码）</h3>\n<ul><li><a href=\"#1nbspnbspnbspnbsp_6\">1.    为什么存在动态内存分配</a></li><li><a href=\"#2nbspnbspnbspnbsp_21\">2.    动态内存函数的介绍</a></li><li><ul><li><a href=\"#21nbspnbspnbspnbspmalloc_23\">2.1    malloc</a></li><li><a href=\"#22nbspnbspnbspnbspfree_45\">2.2    free</a></li><li><ul><li><a href=\"#mallocfree_66\">malloc和free通常配合一起使用：</a></li></ul>\n</li><li><a href=\"#23nbspnbspnbspnbspcalloc_93\">2.3    calloc</a></li><li><a href=\"#24nbspnbspnbspnbsprealloc_120\">2.4    realloc</a></li></ul>\n</li><li><a href=\"#3nbspnbspnbspnbsp_176\">3.    常见的动态内存错误</a></li><li><a href=\"#4nbspnbspnbspnbsp_259\">4.    几个经典的笔试题</a></li><li><ul><li><a href=\"#nbspnbspnbspnbsp1_260\">    题目1：</a></li><li><a href=\"#nbspnbspnbspnbsp_277\">    代码分析：</a></li><li><a href=\"#nbspnbspnbspnbsp_288\">    代码改正：</a></li><li><a href=\"#nbspnbspnbspnbsp2_293\">    题目2：</a></li><li><a href=\"#nbspnbspnbspnbsp_313\">    代码分析：</a></li><li><a href=\"#nbspnbspnbspnbsp_324\">    代码改正：</a></li><li><a href=\"#nbspnbspnbspnbsp3__329\">    题目3 ：</a></li><li><a href=\"#nbspnbspnbspnbsp_348\">    代码分析：</a></li><li><a href=\"#nbspnbspnbspnbsp_360\">    代码改正：</a></li><li><a href=\"#nbspnbspnbspnbsp4__367\">    题目4 ：</a></li><li><a href=\"#nbspnbspnbspnbsp_387\">    代码分析：</a></li><li><a href=\"#nbspnbspnbspnbsp_398\">    代码改正：</a></li></ul>\n</li><li><a href=\"#5nbspnbspnbspnbsp_407\">5.    柔性数组</a></li><li><a href=\"#_500\">通讯录（动态储存版本）源码</a></li></ul>\n</div>\n<br/> （附通讯录动态内存版源码）)\n<p></p>\n<h1><a id=\"1nbspnbspnbspnbsp_6\"></a>1.    为什么存在动态内存分配</h1>\n<p><strong>我们已经掌握的内存开辟方式有：</strong></p>\n<blockquote>\n<p><code>int val = 20;</code> //在<strong>栈空间</strong>上开辟四个字节<br/> <code>char arr[10] = {0};</code> //在<strong>栈空间</strong>上开辟10个字节的连续空间</p>\n</blockquote>\n<p><strong>但是上述的开辟空间的方式有两个特点</strong>：</p>\n<blockquote>\n<p>1 . 空间开辟大小是<strong>固定</strong>的。<br/> 2 . 数组在<strong>申明</strong>的时候，<strong>必须指定数组的长度</strong>，它所需要的内存在编译时分配。</p>\n</blockquote>\n<p>但是对于空间的需求，不仅仅是上述的情况。<br/> 有时候我们需要的空间大小<strong>在程序运行的时候</strong>才能知道，那数组的编译时开辟空间的方式就不能满足了。<br/> 这时候就只能试试<strong>动态存开辟</strong>了。</p>\n<h1><a id=\"2nbspnbspnbspnbsp_21\"></a>2.    动态内存函数的介绍</h1>\n<hr/>\n<h2><a id=\"21nbspnbspnbspnbspmalloc_23\"></a>2.1    malloc</h2>\n<p>C语言为我们提供了一个<strong>动态内存开辟的函数</strong>：</p>\n<p><strong>描述</strong></p>\n<blockquote>\n<p>C 库函数 <code>void *malloc(size_t size)</code> 分配所需的内存空间，并返回一个<code>指向它的指针</code>。</p>\n</blockquote>\n<p><strong>声明</strong></p>\n<blockquote>\n<p><code>void *malloc(size_t size)</code></p>\n</blockquote>\n<p><strong>参数</strong></p>\n<blockquote>\n<p><code>size</code> – 内存块的大小，以字节为单位。</p>\n</blockquote>\n<p><strong>返回值</strong></p>\n<blockquote>\n<p>该函数返回一个<code>指针</code> ，指向<code>已分配大小的内存</code>。如果请求失败，则返回 <code>NULL</code>。</p>\n</blockquote>\n<p><strong>注意点：</strong></p>\n<blockquote>\n<p>1.如果开辟成功，则<strong>返回一个指向开辟好空间的指针</strong>。<br/> 2.如果开辟失败，则返回一个<code>NULL指针</code>，因此malloc的<strong>返回值一定要做检查</strong>。<br/> 3.返回值的类型是 <code>void*</code> ，所以malloc函数并<strong>不知道开辟空间的类型</strong>，具体在使用的时候使用者自己来决定。<br/> 4.如果参数 <code>size 为 0</code>，malloc的行为是标准是未定义的，取决于编译器。<br/> 5.malloc<strong>开辟的内存空间是在堆上的</strong>，<strong>不会自动释放空间</strong>。</p>\n</blockquote>\n<hr/>\n<h2><a id=\"22nbspnbspnbspnbspfree_45\"></a>2.2    free</h2>\n<blockquote>\n<p>由于<code>malloc</code>是在<strong>堆空间上</strong>开辟内存，不会被<strong>自动释放</strong>，容易造成<strong>内存泄漏</strong><br/> 这时候，C语言里提供了一个free函数，来<strong>人为释放动态内存开辟的空间</strong>，将空间还给操作系统</p>\n</blockquote>\n<p><strong>描述</strong></p>\n<blockquote>\n<p>C 库函数 void free(void *ptr) <strong>释放</strong>之前调用 <code>calloc、malloc 或 realloc 所分配的内存空间</code>。</p>\n</blockquote>\n<p><strong>声明</strong></p>\n<blockquote>\n<p><code>void free(void *ptr)</code></p>\n</blockquote>\n<p><strong>参数</strong></p>\n<blockquote>\n<p>ptr – 指针指向一个<strong>要释放内存的内存块</strong>，该内存块<code>之前是通过调用 malloc、calloc 或 realloc 进行分配内存的</code>。如果传递的参数是一个<code>空指针</code>，则<strong>不会执行任何动作</strong>。</p>\n</blockquote>\n<p><strong>返回值</strong></p>\n<blockquote>\n<p>该函数<code>不返回任何值</code>。</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p>1.如果参数 ptr 指向的空间<strong>不是动态开辟的</strong>，那free函数的行为是<code>未定义的</code>。<br/> 2.如果参数 ptr 是<code>NULL指针</code>，则函数什么事都不做。<br/> 3.通常在free完之后，要 <code>ptr=NULL；</code>将指针给<strong>置空</strong>，否则当释放了空间，这块空间的指针仍然存在，就会造成一个<strong>野指针</strong></p>\n</blockquote>\n<h3><a id=\"mallocfree_66\"></a>malloc和free通常配合一起使用：</h3>\n<p><strong>举个栗子</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token comment\">//代码1</span>\n <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//代码2</span>\n <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> ptr<span class=\"token punctuation\">)</span><span class=\"token comment\">//判断ptr指针是否为空</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>；\n <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放ptr所指向的动态内存</span>\n ptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//是否有必要？答案是很有必要</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"23nbspnbspnbspnbspcalloc_93\"></a>2.3    calloc</h2>\n<p><strong>描述</strong></p>\n<blockquote>\n<p>C 库函数 <code>void *calloc(size_t nitems, size_t size</code>) 分配所需的内存空间，并返回一个指向它的指针。<code>malloc</code> 和 <code>calloc</code> 之间的<strong>不同点是</strong>，<code>malloc</code> <strong>不会设置内存为零</strong>，而 <code>calloc</code> 会<strong>设置分配的内存为零。</strong></p>\n</blockquote>\n<p><strong>声明</strong></p>\n<blockquote>\n<p><code>void *calloc(size_t nitems, size_t size)</code></p>\n</blockquote>\n<p><strong>参数</strong></p>\n<blockquote>\n<p><code>nitems</code> – 要被分配的<strong>元素个数</strong>。<br/> <code>size</code> – <strong>元素的大小</strong>。</p>\n</blockquote>\n<p><strong>返回值</strong></p>\n<blockquote>\n<p>该函数返回一个指针，指向已分配的内存。如果请求失败，则返回 <code>NULL</code>。</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p>1.函数的功能是为 num 个大小为 size 的元素开辟一块空间，并且把<strong>空间的每个字节初始化为0</strong>。<br/> 2.与函数 malloc 的区别<strong>只在于</strong> calloc 会在<strong>返回地址之前把申请的空间的每个字节初始化为全0</strong>。</p>\n</blockquote>\n<p><strong>举个例子：</strong></p>\n<p><strong><code>malloc</code>不会初始化空间，<code>cd</code>就是<code>随机值</code>的意思</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a2fcd4165b0c443697b5f228a024997d.png\"/></p>\n<p><code>calloc</code>会初始化空间为<code>0</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\29befef15bd14a0c8491c87240d9bcea.png\"/></p>\n<hr/>\n<h2><a id=\"24nbspnbspnbspnbsprealloc_120\"></a>2.4    realloc</h2>\n<p><strong>描述</strong></p>\n<blockquote>\n<p>C 库函数 <code>void *realloc(void *ptr, size_t size)</code> 尝试<strong>重新调整</strong>之前调用 <code>malloc 或 calloc</code> 所分配的 <code>ptr</code> 所指向的<strong>内存块的大小</strong>。</p>\n</blockquote>\n<p><strong>声明</strong></p>\n<blockquote>\n<p><code>void *realloc(void *ptr, size_t size)</code></p>\n</blockquote>\n<p><strong>参数</strong></p>\n<blockquote>\n<p><code>ptr</code> – 指针指向一个<strong>要重新分配内存的内存块</strong>，该内存块之前是<code>通过调用 malloc、calloc 或 realloc 进行分配内存的</code>。如果为<code>空指针</code>，则会分配一个<strong>新的内存块</strong>，且函数<strong>返回一个指向它的指针</strong>。<br/> <code>size</code> – 内存块的<strong>新的大小</strong>，以<code>字节</code>为单位。如果<strong>大小为 0</strong>，且 <strong>ptr 指向一个已存在的内存块</strong>，则 <strong>ptr 所指向的内存块会被释放</strong>，并<strong>返回一个<code>空指针</code></strong>。</p>\n</blockquote>\n<p><strong>返回值</strong></p>\n<blockquote>\n<p>该函数返回一个指针 ，指向<strong>重新分配大小的内存</strong>。如果请求失败，则<code>返回 NULL</code>。</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p>这个函数<strong>调整原内存空间大小</strong>的基础上，<strong>还会将原来内存中的数据移动到 <code>新</code> 的空间</strong>。</p>\n</blockquote>\n<blockquote>\n<p><strong><code>realloc</code>在调整内存空间的时候存在<code>两种情况</code>：</strong><br/> <code>情况1：</code>原有空间之后没有足够大的空间<br/> <code>情况2：</code>原有空间之后有足够大的空间<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f47363dfc2e847fd90df032d1b626e91.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\de64ae317ace468b86efc9ced9b5995e.png\"/></p>\n</blockquote>\n<p><strong>因为有两种情况的存在，所以我们在使用realloc函数的同时要注意检查返回的是否为空指针</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token comment\">//业务处理</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">else</span>\n <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n <span class=\"token punctuation\">}</span>\n <span class=\"token comment\">//扩展容量</span>\n\n <span class=\"token comment\">//代码1</span>\n ptr <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这样可以吗？(如果申请失败会如何？)</span>\n <span class=\"token comment\">// 答案是不可以，有可能会追加开辟内存失败，然后丢失原有内存</span>\n \n <span class=\"token comment\">//代码2</span>\n <span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n p <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过一个中间变量来判断是否追加开辟内存成功</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n ptr <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token comment\">//业务处理</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h1><a id=\"3nbspnbspnbspnbsp_176\"></a>3.    常见的动态内存错误</h1>\n<blockquote>\n<p>对NULL指针的解引用操作</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>INT_MAX<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//如果p的值是NULL，就会有问题</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>对动态开辟空间的越界访问</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">//当i是10的时候越界访问</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>对非动态开辟内存使用free释放</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ok?</span>\n <span class=\"token comment\">//这样不可以，会报错，非堆上的动态内存不能用free来释放</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>使用free释放一块动态开辟内存的一部分</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p不再指向动态内存的起始位置，程序会挂掉</span>\n         <span class=\"token comment\">//free释放的是p指向的空间，p必须指向所要释放空间的起始地址</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>对同一块动态内存多次释放</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//重复释放，会报错</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>动态开辟内存忘记释放（内存泄漏）</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> p<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//这里应该free掉开辟的动态内存空间</span>\n <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>忘记释放不再使用的动态开辟的空间会造成<strong>内存泄漏</strong>。<br/> <strong>切记： 动态开辟的空间一定要释放，并且正确释放 。</strong></p>\n<hr/>\n<h1><a id=\"4nbspnbspnbspnbsp_259\"></a>4.    几个经典的笔试题</h1>\n<h2><a id=\"nbspnbspnbspnbsp1_260\"></a>    题目1：</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>运行Test会有什么结果？<br/> <strong>答案是会程序会挂掉</strong></p>\n</blockquote>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp_277\"></a>    代码分析：</h2>\n<p><strong>错误原因；</strong><br/> ①<code>str</code>传给<code>p</code>的时候，是<strong>值传递</strong>，<code>p</code>是<code>str</code>的<strong>临时拷贝</strong>，所以当<code>malloc</code>开辟的空间起始地址放在<code>p</code>中时，<strong>不会影响str</strong>，<strong><code>str</code>依然为<code>NULL</code></strong><br/> ②当<code>str</code>时<code>NULL</code>，<code>strcpy</code>想把<code>hello world</code>拷贝到<code>str</code>指向的空间时，程序就崩溃了，因为<strong>NULL指针指向的空间是不能直接访问的</strong></p>\n<hr/>\n<p><em>图解：</em>*<br/> <img alt=\"在这里插入图片描述\" src=\"image\\32208badc5e744c3b2e5d7d19b0ec1e6.png\"/></p>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp_288\"></a>    代码改正：</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\212cd9ebd1f047f0af5c48fb403e550a.png\"/></p>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp2_293\"></a>    题目2：</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n str <span class=\"token operator\">=</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>运行Test会有什么结果？<br/> <strong>答案是</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\bf3aa5bf2ac64e2ebfe419a97de4198f.png\"/></p>\n</blockquote>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp_313\"></a>    代码分析：</h2>\n<p><strong>错误原因；</strong><br/> ①<code>p</code>是<strong>局部变量</strong>（局部变量是存在<strong>栈区</strong>的），函数调用完之后就会<strong>随着函数空间的销毁而销毁</strong>，将内存空间<strong>还给操作系统</strong><br/> ②返回的<code>p</code>实际上已经是一个<strong>野指针</strong>了，指向的是<strong>未知的空间</strong></p>\n<hr/>\n<p><strong>图解：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\7586e905bbd443a7a78badcc94f134d4.png\"/></p>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp_324\"></a>    代码改正：</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\35eafc5a8b97416387402dc963cb4258.png\"/></p>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp3__329\"></a>    题目3 ：</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>运行Test会有什么结果？<br/> <strong>答案是</strong><br/> 内存泄漏！！！！</p>\n</blockquote>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp_348\"></a>    代码分析：</h2>\n<p><strong>错误原因；</strong><br/> ①<code>malloc</code>申请了内存空间，是在<strong>堆区上</strong>的，是<strong>不会自动销毁的</strong><br/> ②如果在使用完成之后没有<strong>free掉这块空间</strong>，会造成<strong>内存泄漏</strong>，内存泄漏是指程序中已动态分配的的堆内存，由于某些原因无法释放或者未释放，造成的<strong>内存浪费</strong>。</p>\n<hr/>\n<p><strong>图解：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\83e273e3b46d4fb281a2e23dc029e261.png\"/></p>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp_360\"></a>    代码改正：</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8ce4bb86bf6d45e6b86746a809e53c2b.png\"/></p>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp4__367\"></a>    题目4 ：</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>运行Test会有什么结果？<br/> <strong>答案是</strong><br/> 数据非法访问</p>\n</blockquote>\n<h2><a id=\"nbspnbspnbspnbsp_387\"></a>    代码分析：</h2>\n<p><strong>错误原因；</strong><br/> ①<code>free</code>完之后没有<strong>将指针置空</strong>，造成了<strong>野指针</strong>的存在<br/> ②<strong>野指针</strong>会导致<strong>非法访问</strong>行为</p>\n<hr/>\n<p><strong>图解：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f28c749ce37d4cb3abfe132b646bb9ff.png\"/></p>\n<hr/>\n<h2><a id=\"nbspnbspnbspnbsp_398\"></a>    代码改正：</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\092e28a5cd794a38bab29e9bb3f5d7e9.png\"/></p>\n<h1><a id=\"5nbspnbspnbspnbsp_407\"></a>5.    柔性数组</h1>\n<blockquote>\n<p>也许你从来没有听说过柔性数组（flexible array）这个概念，但是它确实是存在的。<br/> C99 中，结构中的<mark>最后一个元素</mark>允许是未知大小的<mark>数组</mark>，这就叫做『<strong>柔性数组</strong>』成员。</p>\n</blockquote>\n<p><strong>例如：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//柔性数组成员</span>\n<span class=\"token punctuation\">}</span>type_a<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>有些编译器会报错无法编译可以改成：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//柔性数组成员</span>\n<span class=\"token punctuation\">}</span>type_a<span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<p><strong>柔性数组的特点：</strong></p>\n<ul><li>结构中的柔性数组成员前面必须至少一个其他成员。</li><li>sizeof 返回的这种结构大小不包括柔性数组的内存。</li><li>包含柔性数组成员的结构用malloc ()函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应柔性数组的预期大小。</li></ul>\n<hr/>\n<p><strong>例如：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//code1</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//柔性数组成员</span>\n<span class=\"token punctuation\">}</span>type_a<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出的是4</span>\n</code></pre>\n<p><strong>柔性数组的使用</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//代码1</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ntype_a <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type_a<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//业务处理</span>\np<span class=\"token operator\">-&gt;</span>i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n p<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>这样柔性数组成员a，相当于获得了<strong>100个整型元素的连续空间</strong>。</p>\n</blockquote>\n<p><strong>柔性数组的优势</strong></p>\n<blockquote>\n<p>上述的 type_a 结构也可以设计为：</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//代码2</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p_a<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>type_a<span class=\"token punctuation\">;</span>\ntype_a <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span>i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">-&gt;</span>p_a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>i<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//业务处理</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n p<span class=\"token operator\">-&gt;</span>p_a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//释放空间</span>\n<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>p_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span>p_a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<p><strong>上述 代码1 和 代码2 可以完成同样的功能<br/> 但是 方法1 的实现有两个好处：</strong></p>\n<p><strong>第一个好处是：方便内存释放</strong></p>\n<blockquote>\n<p>如果我们的代码是在一个给别人用的函数中，你在里面做了二次内存分配，并把整个结构体返回给用户。用户调用free可以释放结构体，但是用户并不知道这个结构体内的成员也需要free，所以你不能指望用户来发现这个事。所以，如果我们把结构体的内存以及其成员要的内存一次性分配好了，并返回给用户一个结构体指针，用户做一次free就可以把所有的内存也给释放掉。</p>\n</blockquote>\n<p><strong>第二个好处是：这样有利于访问速度.</strong></p>\n<blockquote>\n<p>连续的内存有益于提高访问速度，也有益于减少内存碎片。（其实，我个人觉得也没多高了，反正你跑不了要用做偏移量的加法来寻址）</p>\n</blockquote>\n<h1><a id=\"_500\"></a>通讯录（动态储存版本）源码</h1>\n<p><strong>通讯录.c</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"contact.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****  1. 添加      2. 删除  **\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****  3. 搜索      4. 修改  **\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****  5. 展示全部  6. 排序  **\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****  0. 退出               **\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//创建一个通讯录</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span> con<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//初始化通讯录</span>\n\t<span class=\"token function\">InitContact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> ADD<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">AddContact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> DEL<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">DeletContact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SHOW<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ShowContact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MODIFY<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ModifyContact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SEARCH<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">SearchContact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SORT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">SortContact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> EXIT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token comment\">//销毁通讯录</span>\n\t\t\t<span class=\"token function\">DestroyContact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出通讯录\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选择错误\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>contact.c</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"contact.h\"</span></span>\n\n<span class=\"token comment\">//静态初始化</span>\n<span class=\"token comment\">//void InitContact(struct Contact* pc)</span>\n<span class=\"token comment\">//{<!-- --></span>\n<span class=\"token comment\">//\tpc-&gt;sz = 0;//默认没有信息</span>\n<span class=\"token comment\">//\tmemset(pc-&gt;data, 0, MAX*sizeof(struct PeoInfo));</span>\n<span class=\"token comment\">//\tmemset(pc-&gt;data, 0, sizeof(pc-&gt;data));</span>\n<span class=\"token comment\">//}</span>\n\n<span class=\"token comment\">//动态初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tpc<span class=\"token operator\">-&gt;</span>sz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpc<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PeoInfo</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>DEFAULT_SZ <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PeoInfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpc<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> DEFAULT_SZ<span class=\"token punctuation\">;</span><span class=\"token comment\">//初始最大容量为3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//静态添加</span>\n<span class=\"token comment\">//void AddContact(struct Contact* pc)</span>\n<span class=\"token comment\">//{<!-- --></span>\n<span class=\"token comment\">//\tif (pc-&gt;sz == MAX)</span>\n<span class=\"token comment\">//\t{<!-- --></span>\n<span class=\"token comment\">//\t\tprintf(\"通讯录满了\\n\");</span>\n<span class=\"token comment\">//\t}</span>\n<span class=\"token comment\">//\telse</span>\n<span class=\"token comment\">//\t{<!-- --></span>\n<span class=\"token comment\">//\t\tprintf(\"请输入名字:&gt;\");</span>\n<span class=\"token comment\">//\t\tscanf_s(\"%s\", pc-&gt;data[pc-&gt;sz].name, 30);</span>\n<span class=\"token comment\">//\t\tprintf(\"请输入年龄:&gt;\");</span>\n<span class=\"token comment\">//\t\tscanf_s(\"%d\", &amp;(pc-&gt;data[pc-&gt;sz].age));</span>\n<span class=\"token comment\">//\t\tprintf(\"请输入性别:&gt;\");</span>\n<span class=\"token comment\">//\t\tscanf_s(\"%s\", pc-&gt;data[pc-&gt;sz].sex, 5);</span>\n<span class=\"token comment\">//\t\tprintf(\"请输入电话:&gt;\");</span>\n<span class=\"token comment\">//\t\tscanf_s(\"%s\", pc-&gt;data[pc-&gt;sz].tele, 12);</span>\n<span class=\"token comment\">//\t\tprintf(\"请输入地址:&gt;\");</span>\n<span class=\"token comment\">//\t\tscanf_s(\"%s\", pc-&gt;data[pc-&gt;sz].addr, 30);</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//\t\tprintf(\"添加成功\\n\");</span>\n<span class=\"token comment\">//\t\tpc-&gt;sz++;</span>\n<span class=\"token comment\">//\t\tShowContact(pc);</span>\n<span class=\"token comment\">//\t}</span>\n<span class=\"token comment\">//}</span>\n\n<span class=\"token comment\">//动态添加</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">AddContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>sz <span class=\"token operator\">==</span> pc<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PeoInfo</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PeoInfo</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PeoInfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tpc<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">;</span>\n\t\t\tpc<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"增容成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"增容成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">//录入新增人的信息</span>\n\t    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入名字:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入年龄:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入性别:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入电话:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tele<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入地址:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>addr<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpc<span class=\"token operator\">-&gt;</span>sz<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ShowContact</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">DeletContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要删除的联系人姓名\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tele<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>addr<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token punctuation\">)</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ShowContact</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ModifyContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要修改的联系人姓名\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入名字:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入年龄:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入性别:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入电话:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tele<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入地址:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>addr<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ShowContact</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShowContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"序号\\t%10s\\t%10s\\t%8s\\t%15s\\t%30s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tele\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"addr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pc<span class=\"token operator\">-&gt;</span>sz <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//打印每一个数据</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%10s\\t%10d\\t%8s\\t%15s\\t%30s\\n\"</span><span class=\"token punctuation\">,</span>\n\t\t\ti <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span>\n\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">,</span>\n\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tele<span class=\"token punctuation\">,</span>\n\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SearchContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要搜索的联系人姓名\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pc<span class=\"token operator\">-&gt;</span>sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"序号\\t%10s\\t%10s\\t%8s\\t%15s\\t%30s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tele\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"addr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%10s\\t%10d\\t%8s\\t%15s\\t%30s\\n\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\ti <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n\t\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span>\n\t\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">,</span>\n\t\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tele<span class=\"token punctuation\">,</span>\n\t\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"找不到联系人信息\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SortContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PeoInfo</span> temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> pc<span class=\"token operator\">-&gt;</span>sz <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pc<span class=\"token operator\">-&gt;</span>sz <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttemp <span class=\"token operator\">=</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tpc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">ShowContact</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">DestroyContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pc<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpc<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpc<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpc<span class=\"token operator\">-&gt;</span>sz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>contact.h</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NAME_MAX</span> <span class=\"token expression\"><span class=\"token number\">30</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEX_MAX</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TELE_MAX</span> <span class=\"token expression\"><span class=\"token number\">12</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ADDR_MAX</span> <span class=\"token expression\"><span class=\"token number\">30</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">1000</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEFAULT_SZ</span> <span class=\"token expression\"><span class=\"token number\">3</span> </span><span class=\"token comment\">//默认大小为3</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token comment\">//创建枚举变量</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Option</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tEXIT<span class=\"token punctuation\">,</span>\n\tADD<span class=\"token punctuation\">,</span>\n\tDEL<span class=\"token punctuation\">,</span>\n\tSEARCH<span class=\"token punctuation\">,</span>\n\tMODIFY<span class=\"token punctuation\">,</span>\n\tSHOW<span class=\"token punctuation\">,</span>\n\tSORT\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//描述人的信息</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PeoInfo</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span>NAME_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">[</span>SEX_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> tele<span class=\"token punctuation\">[</span>TELE_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> addr<span class=\"token punctuation\">[</span>ADDR_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//通讯录-静态版本</span>\n<span class=\"token comment\">//struct Contact</span>\n<span class=\"token comment\">//{<!-- --></span>\n<span class=\"token comment\">//\tstruct PeoInfo data[MAX];//1000个人的数据存放在data数组中</span>\n<span class=\"token comment\">//\tint sz;//记录当前通讯录有效信息的个数</span>\n<span class=\"token comment\">//};</span>\n\n<span class=\"token comment\">//动态增长的版本</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PeoInfo</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">;</span><span class=\"token comment\">//通讯录中当前有效元素的个数</span>\n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span><span class=\"token comment\">//通讯录的当前最大容量</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//初始化通讯录</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//增加联系人</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">AddContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//删除联系人</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">DeletContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//修改联系人信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ModifyContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//搜索联系人信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SearchContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//显示所有的联系人</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShowContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//按姓氏排序联系人信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SortContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//销毁通讯录</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">DestroyContact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Contact</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><mark>本文为学习中的知识总结，如有错误请评论区留言，感激不尽~<br/> 原创不易，如果觉得还不错，留个三连不过分吧~ 有访必回~</mark></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}