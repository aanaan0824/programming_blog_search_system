{"blogid": "124278125", "writerAge": "码龄2年", "writerBlogNum": "28", "writerCollect": "53", "writerComment": "2", "writerFan": "10", "writerGrade": "2级", "writerIntegral": "301", "writerName": "M.H.Z", "writerProfileAdress": "writer_image\\profile_124278125.jpg", "writerRankTotal": "96282", "writerRankWeekly": "493269", "writerThumb": "16", "writerVisitNum": "30206", "blog_read_count": "22602", "blog_time": "于 2022-04-19 17:26:00 发布", "blog_title": "Java枚举（enum）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>枚举是一个被命名的整型常数的集合，用于声明一组带标识符的常数。枚举在曰常生活中很常见，例如一个人的性别只能是“男”或者“女”，一周的星期只能是 7 天中的一个等。类似这种当一个变量有几种固定可能的取值时，就可以将它定义为枚举类型。</p>\n<p>Java 枚举类使用 enum 关键字来定义，各个常量使用逗号 , 来分割,结尾使用分号;结束</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\5a194bce784b47059b0da72e6605d6ac.png\"/></p>\n<p> </p>\n<h2>定义一个季节的枚举类</h2>\n<pre><code class=\"language-java\">enum Season{\n    spring,summer,autumn,winter;\n//   常量有 spring, summer, autumn，winter,分别表示春天，夏天，秋天，冬天，系统会自动添加 public static final 修饰\n} </code></pre>\n<pre><code class=\"language-java\">enum Season{\n    spring,summer,autumn,winter;\n//   常量有 spring, summer, autumn，winter,分别表示春天，夏天，秋天，冬天，系统会自动添加 public static final 修饰\n}\n\n\npublic class SeasonEnum {\n\n    public static void main(String[] args) {\n\n\n        System.out.println(\"请输入季节\"+\"\\n\"+\"1、春天\"+\"\\n\"+\"2、夏天\"+\"\\n\"+\"3、秋天\"+\"\\n\"+\"4、冬天\");\n        Scanner scan =new Scanner(System.in);\n        int seasons= scan.nextInt();\n        change(seasons);\n    }\n\n    private static void change(int seasons) {\n        Season season=Season.spring;\n        switch (seasons){\n            case 1:\n                season=Season.spring;\n\n                break;\n            case 2:\n                season=Season.summer;\n                break;\n            case 3:\n                season=Season.autumn;\n                break;\n            case 4:\n                season=Season.winter;\n                break;\n        }\n        System.out.println(season);\n    }\n}</code></pre>\n<h2>枚举类</h2>\n<p>enum 定义的枚举类默认继承了 java.lang.Enum 类，并实现了 java.lang.Serializable 和 java.lang.Comparable 两个接口。</p>\n<p>values(), ordinal() 和 valueOf() 方法位于 java.lang.Enum 类中：</p>\n<ul><li>values() 返回枚举类中所有的值。</li><li>ordinal()方法可以找到每个枚举常量的索引，就像数组索引一样。</li><li>valueOf()方法返回指定字符串值的枚举常量。</li></ul>\n<h3>values()方法</h3>\n<p> <code>values( ) 方法</code>可以将枚举的所有成员以数组形式返回，也可以通过该方法获取枚举类型的成员。</p>\n<pre><code class=\"language-java\">enum Season{\n    spring,summer,autumn,winter;\n//   常量有 spring, summer, autumn，winter,分别表示春天，夏天，秋天，冬天，系统会自动添加 public static final 修饰\n}\n\n}\n\n\npublic class SeasonEnum {\n   public static void main(String[] args) {\n//        迭代季节\n        for (Season season : Season.values()) {\n            System.out.println(season);\n        }\n   }\n}</code></pre>\n<p><strong>结果：</strong></p>\n<p><img alt=\"\" height=\"183\" src=\"image\\1b9cc57ad78a47aaae9f2db2df29af2f.png\" width=\"312\"/></p>\n<h2>ordinal()方法</h2>\n<p> <code>ordinal() 方法</code>可以获取一个成员在枚举中的索引位置。下面的示例创建一个包含 3 个成员的枚举类型 Signal，然后调用 ordinal() 方法输出成员及对应索引位置。</p>\n<pre><code class=\"language-java\">enum Season{\n    spring,summer,autumn,winter;\n//   常量有 spring, summer, autumn，winter,分别表示春天，夏天，秋天，冬天，系统会自动添加 public static final 修饰\n}\n\n}\n\n\npublic class SeasonEnum {\n   public static void main(String[] args) {\n//        迭代季节\n        for (Season season : Season.values()) {\n//            ordinal可以找到每个枚举常量的索引，就像数组索引一样。\n            System.out.println(season+\"  索引为  \"+season.ordinal());\n        }\n   }\n}</code></pre>\n<p><strong>结果：</strong></p>\n<p><img alt=\"\" height=\"188\" src=\"image\\fc26c59f873c407fbb5de9093aa0818b.png\" width=\"483\"/></p>\n<p></p>\n<h2> valueOf()方法</h2>\n<p>valueOf()方法返回指定字符串值的枚举常量</p>\n<pre><code class=\"language-java\">enum Season{\n    spring,summer,autumn,winter;\n//   常量有 spring, summer, autumn，winter,分别表示春天，夏天，秋天，冬天，系统会自动添加 public static final 修饰\n}\n\n}\n\n\npublic class SeasonEnum {\n   public static void main(String[] args) {\n\n//        使用 valueOf() 返回枚举常量，不存在的会报错 IllegalArgumentException\n         System.out.println(Season.valueOf(\"summer\"));\n   //    System.out.println(Season.valueOf(\"summ\"));\n   }\n}</code></pre>\n<p>结果</p>\n<p><img alt=\"\" src=\"image\\dd97a5c65a9e451685ae6c8d0f01de31.png\"/></p>\n<h2>枚举类成员</h2>\n<p>枚举跟普通类一样可以用自己的变量、方法和构造函数，构造函数只能使用 private 访问修饰符，所以外部无法调用。</p>\n<p>枚举既可以包含具体方法，也可以包含抽象方法。 如果枚举类具有抽象方法，则枚举类的每个实例都必须实现它。</p>\n<p> </p>\n<pre><code class=\"language-java\">enum Season{\n    spring,summer,autumn,winter;\n//   常量有 spring, summer, autumn，winter,分别表示春天，夏天，秋天，冬天，系统会自动添加 public static final 修饰\n     \n    //    构造方法\n    private Season(){\n        System.out.println(\"Constructor called for :\" +this.toString());\n    }\n\n    public void SeasonInfo(){\n        System.out.println(\"spring\");\n    }\n\n}\n\n}\n\n\npublic class SeasonEnum {\n   public static void main(String[] args) {\n\n         Season season=Season.spring;\n         season.SeasonInfo();\n   }\n}</code></pre>\n<p> </p>\n</div>\n</div>"}