{"blogid": "123433763", "writerAge": "码龄4年", "writerBlogNum": "99", "writerCollect": "562", "writerComment": "42", "writerFan": "174", "writerGrade": "4级", "writerIntegral": "1541", "writerName": "太阳风暴", "writerProfileAdress": "writer_image\\profile_123433763.jpg", "writerRankTotal": "14850", "writerRankWeekly": "39328", "writerThumb": "180", "writerVisitNum": "100695", "blog_read_count": "6079", "blog_time": "已于 2022-03-12 14:12:30 修改", "blog_title": "Qt扫盲-QList使用总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>QList使用总结</h3>\n<ul><li><a href=\"#_1\">概述</a></li><li><a href=\"#QList__7\">一、QList 声明及初始化</a></li><li><ul><li><a href=\"#1__QList_10\">1. 声明 QList</a></li><li><a href=\"#2__QList_22\">2. 初始化 QList</a></li></ul>\n</li><li><a href=\"#QList___33\">二、QList 基本的 增加、删除、移动、修改</a></li><li><ul><li><a href=\"#1__35\">1. 增加节点</a></li><li><a href=\"#2__42\">2. 删除节点</a></li><li><a href=\"#3__46\">3. 移动节点</a></li><li><a href=\"#4__50\">4. 修改节点值</a></li></ul>\n</li><li><a href=\"#QList__53\">三、QList 定位节点</a></li><li><a href=\"#QList__65\">四、QList 的基本信息</a></li><li><a href=\"#QList__77\">五、QList 迭代器功能</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>概述</h1>\n<p>QList是Qt的泛型容器类之一。它将项目存储在一个列表中，该列表提供基于索引的快速访问以及基于索引的插入和删除。<br/> QList、QLinkedList 和 QVector 提供了类似的 API 和功能。它们通常是可互换的，但性能有所区别。</p>\n<ul><li>QVector 应该是默认首选的容器</li><li>QList是最广泛用于Qt API中传递值的容器</li><li>QList不是指针结构体类型的链表，真正的结构体指针链表是 QLinkedList</li></ul>\n<h1><a id=\"QList__7\"></a>一、QList 声明及初始化</h1>\n<p>QList可以保存基本数据类型的，如int，double，bool等；但是在存储QObject对象及其子类对象时，不能直接存对象本身，而是只能存对象的地址；</p>\n<h2><a id=\"1__QList_10\"></a>1. 声明 QList</h2>\n<p>声明简单：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//基本数据类型</span>\nQList<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> integerList<span class=\"token punctuation\">;</span>\nQList<span class=\"token operator\">&lt;</span>QDate<span class=\"token operator\">&gt;</span> dateList<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//存储QObject对象的地址</span>\nQList <span class=\"token operator\">&lt;</span>QWidget <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> ptr_widgets<span class=\"token punctuation\">;</span>\nQList <span class=\"token operator\">&lt;</span>QObject <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> ptr_objects<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2__QList_22\"></a>2. 初始化 QList</h2>\n<p>初始化也很简单；若没初始化，链表默认为空的。</p>\n<pre><code class=\"prism language-cpp\">QList<span class=\"token operator\">&lt;</span>QString<span class=\"token operator\">&gt;</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nQWidget <span class=\"token operator\">*</span> widget1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nQWidget <span class=\"token operator\">*</span> widget2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nQList<span class=\"token operator\">&lt;</span>QWidget <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> ptr_widgets <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>widget1<span class=\"token punctuation\">,</span> widget2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"QList___33\"></a>二、QList 基本的 增加、删除、移动、修改</h1>\n<p>QList 在有些实现都是需要多个基本操作组合来实现的，不同的实现用的方法也不一致，Qt提供的都是最核心、最单一的功能。</p>\n<h2><a id=\"1__35\"></a>1. 增加节点</h2>\n<ul><li>insert()：插入节点到</li><li>append()：尾部添加节点</li><li>prepend() ：头部添加节点</li><li>operator &lt;&lt;()：尾部添加节点或链表</li><li>operator+=()：尾部添加节点</li></ul>\n<h2><a id=\"2__42\"></a>2. 删除节点</h2>\n<ul><li>removeAt()：删除节点</li><li>removeFirst()：删除头节点</li><li>removeLast()：删除尾节点</li></ul>\n<h2><a id=\"3__46\"></a>3. 移动节点</h2>\n<ul><li>move()：链表内移动节点位置</li><li>swap()：俩个链表交换值（其实交换一下地址映射就能实现）</li></ul>\n<h2><a id=\"4__50\"></a>4. 修改节点值</h2>\n<ul><li>replace()：替换链表内的节点值</li></ul>\n<h1><a id=\"QList__53\"></a>三、QList 定位节点</h1>\n<p>QList是有序的链表，可以通过索引来得到</p>\n<ul><li>operator [ ] 数组索引符：这个和普通数组一样的使用 [ ] 访问下标方法一致</li><li>at() 函数：也是通过索引值，也即是下标方式</li></ul>\n<p>Qt 推荐使用at()函数，这样的效率更好，因为 at（）函数不会发生 深拷贝 ，而另外一种方式会。</p>\n<p>QList还提供了一些快捷的 索引 + 返回索引节点 + 删除原索引节点，也就是组合的功能；但是这个是 take…不是get…这样的，这就意味着，这个其实是✂剪掉一个节点，并返回</p>\n<ul><li>takeAt()：取得在指定位置的节点</li><li>takeFirst()：取得头节点 ；等价【takeAt（0）】</li><li>takeLast()：取得尾节点</li></ul>\n<h1><a id=\"QList__65\"></a>四、QList 的基本信息</h1>\n<ul><li>contains()：是否包含节点xxx</li><li>count()：对指定节点值计数</li><li>isEmpty()：链表为空？</li><li>size()：链表大小？</li><li>indexOf()：节点位置？</li></ul>\n<p>等等。。。常用功能</p>\n<p>但是有些功能就需要组合一下就行<br/> 其他功能还需要看帮助文档</p>\n<h1><a id=\"QList__77\"></a>五、QList 迭代器功能</h1>\n<p>有两种迭代器的风格</p>\n<ul><li>Java style</li><li>STL style</li></ul>\n<p>区别确实有，但是不大；<br/> 官方说的性能来看：STL风格的更强大；毕竟能融入算法模块；<br/> 但Java的风格更加人性化，更容易使用些，性能也不差，平常代码完全能胜任了。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}