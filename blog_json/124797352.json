{"blogid": "124797352", "writerAge": "码龄113天", "writerBlogNum": "1", "writerCollect": "7", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "12", "writerName": "jllll_kk", "writerProfileAdress": "writer_image\\profile_124797352.jpg", "writerRankTotal": "231859", "writerRankWeekly": "1354111", "writerThumb": "2", "writerVisitNum": "1349", "blog_read_count": "1347", "blog_time": "已于 2022-05-19 23:27:15 修改", "blog_title": "C#绘图工具", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF\">一、整体思路</a></p>\n<p id=\"1%E3%80%81%E7%95%8C%E9%9D%A2-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E7%95%8C%E9%9D%A2\">1、界面</a></p>\n<p id=\"2%E3%80%81%E5%8A%9F%E8%83%BD-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%8A%9F%E8%83%BD\">2、功能</a></p>\n<p id=\"3%E3%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%A0%E9%80%92-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%A0%E9%80%92\">3、数据的传递</a></p>\n<p id=\"Tools%E5%92%8C%E4%B8%BB%E7%AA%97%E4%BD%93%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#Tools%E5%92%8C%E4%B8%BB%E7%AA%97%E4%BD%93%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%EF%BC%9A\">Tools和主窗体之间的数据传递：</a></p>\n<p id=\"Tools%E5%86%85%E9%83%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#Tools%E5%86%85%E9%83%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%EF%BC%9A\">Tools内部的数据传递：</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0\">二、具体实现</a></p>\n<p id=\"%E7%AA%97%E4%BD%93%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%AA%97%E4%BD%93%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81\">窗体功能代码</a></p>\n<p id=\"Form1.cs-toc\" style=\"margin-left:80px;\"><a href=\"#Form1.cs\">Form1.cs</a></p>\n<p id=\"SetSize.cs-toc\" style=\"margin-left:80px;\"><a href=\"#SetSize.cs\">SetSize.cs</a></p>\n<p id=\"Tool%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#Tool%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1\">Tool抽象类的设计</a></p>\n<p id=\"%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84\">整体结构</a></p>\n<p id=\"Tool.cs-toc\" style=\"margin-left:80px;\"><a href=\"#Tool.cs\">Tool.cs</a></p>\n<p id=\"Tool%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#Tool%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1\">Tool具体实现类的设计</a></p>\n<p id=\"Pencil.cs-toc\" style=\"margin-left:80px;\"><a href=\"#Pencil.cs\">Pencil.cs</a></p>\n<p id=\"PatternTool.cs-toc\" style=\"margin-left:80px;\"><a href=\"#PatternTool.cs\">PatternTool.cs</a></p>\n<p id=\"PaintBuckt.cs-toc\" style=\"margin-left:80px;\"><a href=\"#PaintBuckt.cs\">PaintBuckt.cs</a></p>\n<p id=\"Line.cs-toc\" style=\"margin-left:80px;\"><a href=\"#Line.cs\">Line.cs</a></p>\n<p id=\"Word-toc\" style=\"margin-left:80px;\"><a href=\"#Word\">Word</a></p>\n<hr/>\n<h1 id=\"%E5%89%8D%E8%A8%80\"><a id=\"_7\"></a>前言</h1>\n<blockquote>\n<p>大一下学期学习了C#，由于课程设计需要，所以写了这个小程序，主要用到的由C#中的委托，VisualStuidio的WinForm编程。此程序实现了简单的画笔，油漆桶，文字，形状（矩形和椭圆）工具等功能以及对工具属性的设置。</p>\n</blockquote>\n<hr/>\n<h1 id=\"%E4%B8%80%E3%80%81%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF\"><a id=\"pandas_16\"></a>一、整体思路</h1>\n<h2 id=\"1%E3%80%81%E7%95%8C%E9%9D%A2\">1、界面</h2>\n<p>软件的主要界面由VisualStuidio窗体设计器交互式生成。</p>\n<h2 id=\"2%E3%80%81%E5%8A%9F%E8%83%BD\">2、功能</h2>\n<p>画图功能由一个抽象类 Tools 来实现，Tools下派生了 Pencil, Line, Pattern, PaintBucket, Word的具体的工具类。</p>\n<p>画图功能的实现是在Tools类中定义抽象方法 <strong>MouseDownDraw(object sender ,MouseEventArgs e), MouseUpDraw(object sender ,MouseEventArgs e), MouseMoveDraw(object sender ,MouseEventArgs e), MouseClickDraw(object sender ,MouseEventArgs e) ，</strong>并根据选定的Tool动态的更改界面上PictureBox的的<strong>MouseDown,MouseUp,MouseMove,MouseClick</strong>事件。</p>\n<h2 id=\"3%E3%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%A0%E9%80%92\">3、数据的传递</h2>\n<h3 id=\"Tools%E5%92%8C%E4%B8%BB%E7%AA%97%E4%BD%93%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%EF%BC%9A\">Tools和主窗体之间的数据传递：</h3>\n<p>由于Tools需要操作主窗体中的PictureBox对象，所以需要Tool在构造时需要将PictureBox的相关的一些对象。</p>\n<ul><li><strong>PictureBox pictureBox: </strong>将主窗体的<strong>PictureBox</strong>对象传入<strong>Tool</strong>作为<strong>Tool</strong>的一个字段是为了在绘图完成后调用<strong>pictureBox.Image</strong>属性来更新屏幕上显示的内容。</li><li><strong>Bitmap bitmap:</strong>获取绘图后的Bitmap并设置给pictureBox的Image。</li><li><strong>Graphics g:</strong>保存<strong>bitmap</strong>对应的<strong>Graphic</strong>，用于调用绘图方法。</li></ul>\n<p>由于<strong>Tools</strong>具体的实现类所需的事件各不相同，所以我将具体的实现类所用到的事件保存在该具体实现类的一个字段中。</p>\n<ul><li><strong>protected List&lt;string&gt; eventName;</strong>用于保存所用到的事件名称。</li><li><strong>Dictionary&lt;string, MouseEventHandler&gt; eventMap；</strong>用于保存事件名称，和对应的EventHandler(object sender, EventArgs e)。</li></ul>\n<p>由于Tools实现类的的<strong>属性面板</strong>不同，所以每个实现类都有一个Panel panel字段来保存属性面板信息且必须实现抽象方法<strong>public abstract Panel GetAttrPanel();</strong></p>\n<hr/>\n<h3 id=\"Tools%E5%86%85%E9%83%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%EF%BC%9A\"><strong>Tools内部的数据传递：</strong></h3>\n<p>由于在Tools.GetAttrPanel(),所有的控件没有保存在Tool的字段或属性中，所以控件虽然存在但是是不可访问的。而当更改一些该工具的一些属性（如颜色）时，一些控件需要做出相应的调整来和实际相匹配，所用我用一个字典 <strong>protected Dictionary&lt;string, Control&gt; attr </strong>来保存控件对象，并在控件创建时(调用该 <strong>Tool </strong>的 <strong>GetAttrPanel() </strong>方法时)添加。下面为该方法的具体实现以及 <strong>attr </strong>的具体引用。</p>\n<ul><li>方法实现</li></ul>\n<pre><code class=\"language-cs\">        public override Panel GetAttrPanel()\n        {\n            if (panel != null) \n                return panel;\n            panel = new FlowLayoutPanel();\n            panel.BackColor = System.Drawing.SystemColors.AppWorkspace;\n            panel.AutoSize = true;\n            panel.AutoSizeMode = AutoSizeMode.GrowAndShrink;\n            panel.Dock = DockStyle.Top;\n            attr.Add(\"panel\",panel);\n            //color\n            Label color = new Label();\n            color.Text = \"颜色\";\n            panel.Controls.Add(color);\n            attr.Add(\"color\", color);\n            //select_color\n            PictureBox select_color = new PictureBox();\n            select_color.Width = 30;\n            select_color.Height = 30;\n            select_color.Visible = true;\n            select_color.BackColor = Color.Black;\n            select_color.MouseDoubleClick += new MouseEventHandler(this.SelectColor);\n            panel.Controls.Add(select_color);\n            attr.Add(\"select_color\", select_color);\n            //pixel\n            Label pixel = new Label();\n            pixel.Text = \"粗细\";\n            panel.Controls.Add(pixel);\n            attr.Add(\"pixel\", pixel);\n            //set_pixel\n            NumericUpDown set_pixel = new NumericUpDown();\n            set_pixel.Width = 50;\n            set_pixel.Minimum = 1;\n            set_pixel.ValueChanged += new EventHandler(this.SetWidth);\n            set_pixel.ReadOnly = true;\n            panel.Controls.Add(set_pixel);\n            attr.Add(\"set_pixel\", set_pixel);\n            set_pixel.Value = 5;\n            return panel;\n        }</code></pre>\n<ul><li>具体引用</li></ul>\n<pre><code class=\"language-cs\">        //设置Pencil颜色\n        private void SelectColor(object sender, MouseEventArgs e)\n        {\n            if (colorDialog.ShowDialog() == DialogResult.OK)\n            {\n                this.attr[\"select_color\"].BackColor=colorDialog.Color;\n                this.pen.Color=colorDialog.Color;\n            }\n        }\n        //设置Pencil宽度\n        private void SetWidth(object sender, EventArgs e)\n        {\n            NumericUpDown width = attr[\"set_pixel\"] as NumericUpDown;\n            pen.Width = (int)width.Value;\n        }</code></pre>\n<hr/>\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0\">二、具体实现</h1>\n<h2 id=\"%E7%AA%97%E4%BD%93%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81\"><strong>窗体功能代码</strong></h2>\n<h3 id=\"Form1.cs\"><strong>Form1.cs</strong></h3>\n<p>在事件的操作上，在切换工具时，由于我没有移除原本Tool的EventHandler，所以后选择的Tool的EventHandler会覆盖先前的，再次切回原来的Tool，因为事件中已经有了这个Tool的所有EventHandler所以无法添加，就表现为只能显示出第二个选择的工具的绘图效果。所以我才在每个Tool中保存了对应的事件名称，和对应的EventHandler对象用于减去先选择的Tool的委托。</p>\n<pre><code class=\"language-cs\">using palette.Tools;\nusing pallet.Tools.Word;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace palette\n{\n    public partial class Form1 : Form\n    {\n        private static Graphics g;//PictureBox的背景图片的Graphics\n        private static Bitmap orignalBitmap = (Bitmap)Image.FromFile(\"o.jpg\");//一个空白图片用于初始化画布\n        private static List&lt;Tool&gt; Tools;//保存Tool的实例\n        private Panel attr_panel;//属性面板\n        private Tool SelectTool;//当前选择的工具\n        public Form1()\n        {\n            Tools = new List&lt;Tool&gt;();\n            InitializeComponent();\n            //初始化画布\n            Bitmap bmp = null;\n            bmp = new Bitmap(orignalBitmap, this.pictureBox1.Width, this.pictureBox1.Height);\n            this.pictureBox1.Image = bmp;\n            //添加工具到ListView\n            g = Graphics.FromImage(this.pictureBox1.Image);\n            Tools.Add(new Pencil(g,this.pictureBox1));\n            Tools.Add(new Line(g, this.pictureBox1));\n            Tools.Add(new pallet.Tools.PatternTool(g, this.pictureBox1));\n            Tools.Add(new PaintBucket(g,this.pictureBox1));\n            Tools.Add(new Word(g,this.pictureBox1));\n            foreach (Tool tool in Tools)\n            {\n                tool.Bitmap = bmp;\n                this.ToolBox.Items.Add(tool);\n            }\n        }\n        //工具选择\n        private void ToolBox_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            //移除原有的属性栏和事件\n            if (this.SelectTool != null)\n            {\n                this.MPanel.Controls.Remove(this.SelectTool.GetAttrPanel());\n                this.ClearAllEvents(SelectTool);\n            }\n            //设置新的属性栏和事件\n            Tool tool = this.ToolBox.SelectedItem as Tool;\n            if (tool != null)\n            {\n                this.attr_panel=tool.GetAttrPanel();\n                this.MPanel.Controls.Add(this.attr_panel);\n                this.AddEventsToPBX(tool);\n                SelectTool=tool;\n            }\n            this.UpdateSBar();\n            this.UpdatePBxLocation();\n\n        }\n        //文件操作\n        private void 打开ToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            using (OpenFileDialog ofd = new OpenFileDialog())\n            {\n                ofd.Filter = \"jpg文件|*.jpg|png文件|*.png|jpeg文件|*.jpeg|bmp文件|*bmp\";\n                if (ofd.ShowDialog() == DialogResult.OK)\n                {\n                    Bitmap bmp = new Bitmap(ofd.FileName);\n                    this.pictureBox1.Image = bmp;\n                    g =Graphics.FromImage(bmp);\n                }\n            }\n        }\n        private void 保存ToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            using (SaveFileDialog sfd = new SaveFileDialog())\n            {\n                sfd.Filter = \"jpg文件|*.jpg|png文件|*.png|jpeg文件|*.jpeg|bmp文件|*bmp\";\n                if (sfd.ShowDialog() == DialogResult.OK)\n                {\n                    this.pictureBox1.Image.Save(sfd.FileName);\n                }\n            }\n        }\n        //编辑菜单\n        private void 设置画板大小ToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            if (MessageBox.Show(\"设置后会清空原图像，您确定继续吗？\", \"警告\", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning) == DialogResult.OK)\n            {\n                using (SetSize ss = new SetSize(this.pictureBox1.Width,this.pictureBox1.Height))\n                {\n                    if (ss.ShowDialog() == DialogResult.OK)\n                    {\n                        this.pictureBox1.Width = ss.Width;\n                        this.pictureBox1.Height = ss.Height;\n                    }\n                }\n            }\n        }\n\n        #region 设置画板位置\n        private void pictureBox1_SizeChanged(object sender, EventArgs e)\n        {\n            Bitmap bmp = null;\n            bmp = new Bitmap(orignalBitmap, this.pictureBox1.Width, this.pictureBox1.Height);\n            this.pictureBox1.Image = bmp;\n            g = Graphics.FromImage(this.pictureBox1.Image);\n            foreach(Tool tool in Tools)\n            {\n                if (tool != null)\n                {\n                    tool.Graphics = g;\n                    tool.Bitmap = bmp;\n                }\n            }\n            this.UpdateSBar();\n        }\n        //设置vsbar的值\n        private void UpdateSBar()\n        {\n            int h;\n            if (this.attr_panel is null)\n                h = 0;\n            else\n                h = this.attr_panel.Height;\n            int height = this.MPanel.Height - h;\n            int width = this.MPanel.Width;\n            this.vScrollBar1.Maximum=this.pictureBox1.Height-height;\n            this.vScrollBar1.Minimum=0;\n            this.vScrollBar1.Value=0;\n            this.hScrollBar1.Maximum = this.pictureBox1.Width-width;\n            this.hScrollBar1.Minimum = 0;\n            this.hScrollBar1.Value = 0;\n        }\n        //调整picturebox的位置\n        private void pictureBox1_Resize(object sender, EventArgs e)\n        {\n            this.UpdatePBxLocation();\n        }\n        private void UpdatePBxLocation()\n        {\n            this.pictureBox1.Location = this.GetStartPointOfPicture();\n        }\n        //上下移动画板\n        private void vScrollBar1_Scroll(object sender, ScrollEventArgs e)\n        {\n            this.pictureBox1.Location=this.GetStartPointOfPicture();\n        }\n        private Point GetStartPointOfPicture()\n        {\n            Point p = new Point();\n            int h;\n            if (this.attr_panel is null)\n                h = 0;\n            else\n                h = this.attr_panel.Height;\n            p.Y= h;\n\n            int offsetx = -this.hScrollBar1.Value;\n            int offsety = -this.vScrollBar1.Value;\n            p.X+=offsetx;\n            p.Y+=offsety;\n            return p;\n        }\n        #endregion\n\n\n        //添加事件\n        private void AddEventsToPBX(Tool tool)\n        {\n            Dictionary&lt;string,MouseEventHandler&gt; events =  tool.MouseHandller;\n            List&lt;string&gt; eventname = tool.EventName;\n            foreach(string en in eventname)\n            {\n                if (events.ContainsKey(en))\n                {\n                    switch (en)\n                    {\n                        case \"MouseUp\":this.pictureBox1.MouseUp += events[en]; break;\n                        case \"MouseDown\": this.pictureBox1.MouseDown += events[en]; break;\n                        case \"MouseMove\": this.pictureBox1.MouseMove += events[en]; break;\n                        case \"MouseClick\": this.pictureBox1.MouseClick += events[en]; break;\n                    }\n                }\n            }\n        }\n        //清除某个对象的特定事件\n        private  void ClearAllEvents(Tool tool)\n        {\n            Dictionary&lt;string, MouseEventHandler&gt; events = tool.MouseHandller;\n            List&lt;string&gt; eventname = tool.EventName;\n            foreach (string en in eventname)\n            {\n                if (events.ContainsKey(en))\n                {\n                    switch (en)\n                    {\n                        case \"MouseUp\": this.pictureBox1.MouseUp -= events[en]; break;\n                        case \"MouseDown\": this.pictureBox1.MouseDown -= events[en]; break;\n                        case \"MouseMove\": this.pictureBox1.MouseMove -= events[en]; break;\n                        case \"MouseClick\": this.pictureBox1.MouseClick -= events[en]; break;\n                    }\n                }\n            }\n        }\n        private void Form1_SizeChanged(object sender, EventArgs e)\n        {\n            this.UpdateSBar();\n        }\n    }\n}\n</code></pre>\n<h3 id=\"SetSize.cs\">SetSize.cs</h3>\n<pre><code class=\"language-cs\">using System;\nusing System.Windows.Forms;\n\nnamespace palette\n{\n    public partial class SetSize : Form\n    {\n\n        public new int Width { get; private set; }\n        public new int Height { get; private set; }\n        public SetSize(int w,int h)\n        {\n            InitializeComponent();\n            this.numericUpDown1.Value=w;\n            this.numericUpDown2.Value=h;\n        }\n\n        private void numericUpDown1_ValueChanged(object sender, EventArgs e)\n        {\n            NumericUpDown numericUpDown = (NumericUpDown)sender; \n            if(numericUpDown.Tag.ToString()==\"width\")\n                this.Width = (int)this.numericUpDown1.Value;\n            else if(numericUpDown.Tag.ToString()==\"height\")\n                this.Height = (int)this.numericUpDown1.Value;\n        }\n    }\n}\n</code></pre>\n<hr/>\n<h2 id=\"Tool%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1\"><strong>Tool抽象类的设计</strong></h2>\n<h3 id=\"%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84\"><strong>整体结构</strong></h3>\n<p style=\"text-align:center;\"><strong><img alt=\"\" src=\"image\\ad78604b6a384193a263268b5bf9c9b6.jpeg\"/></strong></p>\n<p style=\"text-align:center;\"></p>\n<p>SetWordDialog用于设置文字的字体；调用ShowDialog()时返回一个DialogResult枚举值，需要将一个按钮的DialogResult属性设置为DialogResult.OK;</p>\n<h3 id=\"Tool.cs\">Tool.cs</h3>\n<pre><code class=\"language-cs\">using System.Collections.Generic;\nusing System.Windows.Forms;\nusing System.Drawing;\n\nnamespace palette\n{\n    internal abstract class Tool\n    {\n        protected string name;//工具名称\n        protected string description;//工具描述\n        protected PictureBox pictureBox;//主窗口的PictureBox\n        protected Bitmap bitmap;//绘图操作的Bitmap\n        protected ColorDialog colorDialog;\n        protected Dictionary&lt;string, Control&gt; attr;\n        protected Pen pen;\n        protected Graphics g;\n        protected List&lt;string&gt; eventName;\n        protected Dictionary&lt;string, MouseEventHandler&gt; eventMap;\n\n        public Bitmap Bitmap { get =&gt; this.bitmap; set =&gt; this.bitmap=value; }\n        public Graphics Graphics { set =&gt; this.g = value; }\n        public List&lt;string&gt; EventName {get =&gt; this.eventName;}\n        public Dictionary&lt;string, MouseEventHandler&gt; MouseHandller { get =&gt; this.eventMap; }\n\n        public Tool(PictureBox pbx)\n        {\n            this.pictureBox = pbx;\n            this.SetEventName();\n            this.SetEventMap();\n        }\n        public abstract Panel GetAttrPanel();\n        public abstract void MouseDownDraw(object sender , MouseEventArgs e);\n        public abstract void MouseUpDraw(object sender, MouseEventArgs e);\n        public abstract void MouseClickDraw(object sender, MouseEventArgs e);\n        public abstract void MouseMoveDraw(object sender, MouseEventArgs e);\n        public override string ToString()\n        {\n            return name;\n        }\n        //设置所用到的事件名\n        protected abstract void SetEventName();\n        //将所用到的EventHandler和对应的事件用字典保存起来\n        protected abstract void SetEventMap();\n    }\n}</code></pre>\n<hr/>\n<h2 id=\"Tool%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1\"><strong>Tool具体实现类的设计</strong></h2>\n<h3 id=\"Pencil.cs\">Pencil.cs</h3>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Windows.Forms;\nusing System.Drawing;\n\nnamespace palette.Tools\n{\n    internal class Pencil : Tool\n    {\n        private bool draw;\n        private PointF startP;\n        private Panel panel;\n        public Pencil(Graphics g,PictureBox pbx) : base(pbx)\n        {\n            this.g = g;\n            name = \"铅笔\";\n            description = \"用于画图\";\n            attr = new Dictionary&lt;string,Control&gt;();\n            colorDialog=new ColorDialog();\n            pen = new Pen(Color.Black);\n        }\n        public override Panel GetAttrPanel()\n        {\n            if (panel != null) \n                return panel;\n            panel = new FlowLayoutPanel();\n            panel.BackColor = System.Drawing.SystemColors.AppWorkspace;\n            panel.AutoSize = true;\n            panel.AutoSizeMode = AutoSizeMode.GrowAndShrink;\n            panel.Dock = DockStyle.Top;\n            attr.Add(\"panel\",panel);\n            //color\n            Label color = new Label();\n            color.Text = \"颜色\";\n            panel.Controls.Add(color);\n            attr.Add(\"color\", color);\n            //select_color\n            PictureBox select_color = new PictureBox();\n            select_color.Width = 30;\n            select_color.Height = 30;\n            select_color.Visible = true;\n            select_color.BackColor = Color.Black;\n            select_color.MouseDoubleClick += new MouseEventHandler(this.SelectColor);\n            panel.Controls.Add(select_color);\n            attr.Add(\"select_color\", select_color);\n            //pixel\n            Label pixel = new Label();\n            pixel.Text = \"粗细\";\n            panel.Controls.Add(pixel);\n            attr.Add(\"pixel\", pixel);\n            //set_pixel\n            NumericUpDown set_pixel = new NumericUpDown();\n            set_pixel.Width = 50;\n            set_pixel.Minimum = 1;\n            set_pixel.ValueChanged += new EventHandler(this.SetWidth);\n            set_pixel.ReadOnly = true;\n            panel.Controls.Add(set_pixel);\n            attr.Add(\"set_pixel\", set_pixel);\n            set_pixel.Value = 5;\n            return panel;\n        }\n        public override void MouseClickDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n        private void DrawLine(PointF EndPoint)\n        {\n            //g.DrawLine(pen, startP, EndPoint);\n            this.g.DrawLine(pen, startP, EndPoint);\n            this.pictureBox.Image = this.Bitmap;\n        }\n/*        private void FillCircle(Graphics g,PointF center)\n        {\n            float r = (float)width / 2;\n            PointF location = new PointF(center.X-r,center.Y-r);\n            RectangleF bound = new RectangleF();\n            bound.X = location.X;\n            bound.Y = location.Y;\n            bound.Width = width;\n            bound.Height = width;\n            g.FillEllipse(brush,bound);\n        }*/\n        public override void MouseDownDraw(object sender, MouseEventArgs e)\n        {\n            draw=true;\n            PictureBox pallet = sender as PictureBox;\n            startP = e.Location;\n        }\n\n        public override void MouseMoveDraw(object sender, MouseEventArgs e)\n        {\n            if(!draw)\n                return;\n            PictureBox pallet = sender as PictureBox;\n            Graphics g = pallet.CreateGraphics();\n            this.DrawLine(e.Location);\n            startP = e.Location;\n        }\n\n        public override void MouseUpDraw(object sender, MouseEventArgs e)\n        {\n            draw = false;\n            PictureBox palette = sender as PictureBox;\n            Graphics g = palette.CreateGraphics();\n            this.DrawLine(e.Location);\n            startP = e.Location;\n        }\n        private void SelectColor(object sender, MouseEventArgs e)\n        {\n            if (colorDialog.ShowDialog() == DialogResult.OK)\n            {\n                this.attr[\"select_color\"].BackColor=colorDialog.Color;\n                this.pen.Color=colorDialog.Color;\n            }\n        }\n        private void SetWidth(object sender, EventArgs e)\n        {\n            NumericUpDown width = attr[\"set_pixel\"] as NumericUpDown;\n            pen.Width = (int)width.Value;\n        }\n        protected override void SetEventName()\n        {\n            eventName = new List&lt;string&gt;();\n            eventName.Add(\"MouseDown\");\n            eventName.Add(\"MouseUp\");\n            eventName.Add(\"MouseMove\");\n        }\n        protected override void SetEventMap()\n        {\n            eventMap = new Dictionary&lt;string, MouseEventHandler&gt;();\n            eventMap.Add(\"MouseDown\", new MouseEventHandler(this.MouseDownDraw));\n            eventMap.Add(\"MouseUp\", new MouseEventHandler(this.MouseUpDraw));\n            eventMap.Add(\"MouseMove\", new MouseEventHandler(this.MouseMoveDraw));\n        }\n    }\n}\n</code></pre>\n<h3 id=\"PatternTool.cs\">PatternTool.cs</h3>\n<pre><code class=\"language-cs\">using palette;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace pallet.Tools\n{\n    internal enum Pattern\n    {\n        Rectangle,Round\n    }\n\n    delegate void Draw();\n\n    \n    internal class PatternTool : Tool\n    {\n        private Draw draw;\n        private static Panel panel;\n        private System.Drawing.Rectangle bound;\n        private Pattern pattern;\n        private Point startP;\n        private Point endP;\n        private Point StartP\n        {\n            get { return startP; }\n            set { startP = value; }\n        }\n        //设置矩形或椭圆的范围\n        private Point EndP\n        {\n            get { return endP; }\n            set \n            {\n                endP = value;\n                int x1=this.StartP.X;\n                int y1=this.StartP.Y;\n                int x2=value.X;\n                int y2=value.Y;\n                if (x1 &gt; x2)\n                    bound.X = x2;\n                else\n                    bound.X = x1;\n                if (y1 &gt; y2)\n                    bound.Y = y2;\n                else\n                    bound.Y=y1;\n                bound.Width = Math.Abs(x1-x2);\n                bound.Height = Math.Abs(y1-y2);  \n            }\n        }\n        public Pattern Pattern\n        {\n            get { return pattern; }\n            set \n            {\n                switch (value)\n                {\n                    case Pattern.Rectangle:; this.draw = this.DrawRectangule; break;\n                    case Pattern.Round: this.draw = this.DrawRound;break;\n                }\n                pattern = value; \n                \n            }\n        }\n        public PatternTool(Graphics g,PictureBox pbx) : base(pbx)\n        {\n            this.g = g;\n            name = \"形状工具\";\n            description = \"拖动鼠标绘制直线\";\n            attr = new Dictionary&lt;string, Control&gt;();\n            colorDialog = new ColorDialog();\n            pen = new Pen(Color.Black);\n            this.Pattern = Pattern.Round;\n        }\n        private void DrawRectangule()\n        {\n            this.g.DrawRectangle(pen, bound);\n            this.pictureBox.Image = bitmap;\n        }\n        private void DrawRound()\n        {\n            this.g.DrawEllipse(pen, bound);\n            this.pictureBox.Image = bitmap;\n        }\n        public override Panel GetAttrPanel()\n        {\n            if (panel != null)\n                return panel;\n            panel = new FlowLayoutPanel();\n            panel.BackColor = System.Drawing.SystemColors.AppWorkspace;\n            panel.AutoSize = true;\n            panel.AutoSizeMode = AutoSizeMode.GrowAndShrink;\n            panel.Dock = DockStyle.Top;\n            attr.Add(\"panel\", panel);\n            //color\n            Label color = new Label();\n            color.Text = \"颜色\";\n            panel.Controls.Add(color);\n            attr.Add(\"color\", color);\n            //select_color\n            PictureBox select_color = new PictureBox();\n            select_color.Width = 30;\n            select_color.Height = 30;\n            select_color.Visible = true;\n            select_color.BackColor = Color.Black;\n            select_color.MouseDoubleClick += new MouseEventHandler(this.SelectColor);\n            panel.Controls.Add(select_color);\n            attr.Add(\"select_color\", select_color);\n            //pixel\n            Label pixel = new Label();\n            pixel.Text = \"粗细\";\n            panel.Controls.Add(pixel);\n            attr.Add(\"pixel\", pixel);\n            //set_pixel\n            NumericUpDown set_pixel = new NumericUpDown();\n            set_pixel.Width = 50;\n            set_pixel.Minimum = 1;\n            set_pixel.ValueChanged += new EventHandler(this.SetWidth);\n            set_pixel.ReadOnly = true;\n            panel.Controls.Add(set_pixel);\n            attr.Add(\"set_pixel\", set_pixel);\n            set_pixel.Value = 5;\n            //pattern\n            Label pattern = new Label();\n            pattern.Text = \"形状\";\n            panel.Controls.Add(pattern);\n            attr.Add(\"pattern\", pattern);\n            //set_pattern设置形状\n            ComboBox set_pattern = new ComboBox();\n            set_pattern.Width = 100;\n            set_pattern.DropDownStyle = ComboBoxStyle.DropDownList;\n            for(int i = 0; i &lt; 10; i++)\n            {\n                Pattern p = (Pattern)i;\n                if (p.ToString() != i.ToString())\n                {\n                    set_pattern.Items.Add(p);\n                } \n            }\n            set_pattern.SelectedIndexChanged += new EventHandler(this.SetPattern);\n            panel.Controls.Add(set_pattern);\n            attr.Add(\"set_pattern\", set_pattern);\n            set_pattern.SelectedIndex = 0;\n            return panel;\n        }\n\n        private void SetPattern(object sender, EventArgs e)\n        {\n            ComboBox set_pattern = (ComboBox)sender;\n            Pattern p = (Pattern)set_pattern.SelectedItem;\n            if (p != null)\n                this.Pattern = p;\n        }\n\n        public override void MouseClickDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseDownDraw(object sender, MouseEventArgs e)\n        {\n            this.StartP = e.Location;\n        }\n\n        public override void MouseMoveDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseUpDraw(object sender, MouseEventArgs e)\n        {\n            this.EndP = e.Location;\n            PictureBox palette = sender as PictureBox;\n            Graphics g = palette.CreateGraphics();\n            this.draw();\n        }\n        private void SelectColor(object sender, MouseEventArgs e)\n        {\n            if (colorDialog.ShowDialog() == DialogResult.OK)\n            {\n                this.attr[\"select_color\"].BackColor = colorDialog.Color;\n                this.pen.Color = colorDialog.Color;\n            }\n        }\n        private void SetWidth(object sender, EventArgs e)\n        {\n            NumericUpDown width = attr[\"set_pixel\"] as NumericUpDown;\n            pen.Width = (int)width.Value;\n        }\n        protected override void SetEventName()\n        {\n            eventName = new List&lt;string&gt;();\n            eventName.Add(\"MouseDown\");\n            eventName.Add(\"MouseUp\");\n        }\n\n        protected override void SetEventMap()\n        {\n            eventMap = new Dictionary&lt;string, MouseEventHandler&gt;();\n            eventMap.Add(\"MouseDown\", new MouseEventHandler(this.MouseDownDraw));\n            eventMap.Add(\"MouseUp\", new MouseEventHandler(this.MouseUpDraw));\n            eventMap.Add(\"MouseMove\", new MouseEventHandler(this.MouseMoveDraw));\n        }\n    }\n}\n</code></pre>\n<h3 id=\"PaintBuckt.cs\">PaintBuckt.cs</h3>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace palette.Tools\n{\n    internal class PaintBucket : Tool\n    {\n        private static Panel panel;\n        private PictureBox pbx;\n        public PaintBucket(Graphics g, PictureBox pbx) : base(pbx)\n        {\n            this.pbx = pbx;\n            this.g = g;\n            name = \"油漆桶\";\n            description = \"用于填充\";\n            attr = new Dictionary&lt;string, Control&gt;();\n            colorDialog = new ColorDialog();\n            pen = new Pen(Color.Black);\n        }\n\n        public override Panel GetAttrPanel()\n        {\n            if (panel != null)\n                return panel;\n            panel = new FlowLayoutPanel();\n            panel.BackColor = System.Drawing.SystemColors.AppWorkspace;\n            panel.AutoSize = true;\n            panel.AutoSizeMode = AutoSizeMode.GrowAndShrink;\n            panel.Dock = DockStyle.Top;\n            attr.Add(\"panel\", panel);\n            //color\n            Label color = new Label();\n            color.Text = \"颜色\";\n            panel.Controls.Add(color);\n            attr.Add(\"color\", color);\n            //select_color\n            PictureBox select_color = new PictureBox();\n            select_color.Width = 30;\n            select_color.Height = 30;\n            select_color.Visible = true;\n            select_color.BackColor = Color.Black;\n            select_color.MouseDoubleClick += new MouseEventHandler(this.SelectColor);\n            panel.Controls.Add(select_color);\n            attr.Add(\"select_color\", select_color);\n            return panel;\n        }\n        private void Draw()\n        {\n\n            this.g.FillRectangle(pen.Brush,0,0, this.pbx.Width, this.pbx.Height);\n            this.pictureBox.Image = this.Bitmap;\n        }\n        public override void MouseClickDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseDownDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseMoveDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseUpDraw(object sender, MouseEventArgs e)\n        {\n            this.Draw();\n        }\n\n        protected override void SetEventMap()\n        {\n            eventMap = new Dictionary&lt;string, MouseEventHandler&gt;();\n            eventMap.Add(\"MouseUp\", new MouseEventHandler(this.MouseUpDraw));\n        }\n\n        protected override void SetEventName()\n        {\n            eventName = new List&lt;string&gt;();\n            eventName.Add(\"MouseUp\");\n        }\n        private void SelectColor(object sender, MouseEventArgs e)\n        {\n            if (colorDialog.ShowDialog() == DialogResult.OK)\n            {\n                this.attr[\"select_color\"].BackColor = colorDialog.Color;\n                this.pen.Color = colorDialog.Color;\n            }\n        }\n    }\n}\n</code></pre>\n<h3 id=\"Line.cs\">Line.cs</h3>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.Drawing;\nnamespace palette.Tools\n{\n    internal class Line : Tool\n    {\n        private Point startP;\n        private Point endP;\n        private static Panel panel;\n        public Line(Graphics g,PictureBox pbx) :base(pbx)\n        {\n            this.g = g;\n            name = \"直线\";\n            description = \"拖动鼠标绘制直线\";\n            attr = new Dictionary&lt;string, Control&gt;();\n            colorDialog = new ColorDialog();\n            pen = new Pen(Color.Black);\n        }\n        private void DrawLine(Graphics g)\n        {\n            //g.DrawLine(pen, startP, endP);\n            this.g.DrawLine(pen, startP, endP);\n            this.pictureBox.Image = this.Bitmap;\n        }\n        public override Panel GetAttrPanel()\n        {\n            if (panel != null)\n                return panel;\n            panel = new FlowLayoutPanel();\n            panel.BackColor = System.Drawing.SystemColors.AppWorkspace;\n            panel.AutoSize = true;\n            panel.AutoSizeMode = AutoSizeMode.GrowAndShrink;\n            panel.Dock = DockStyle.Top;\n            attr.Add(\"panel\", panel);\n            //color\n            Label color = new Label();\n            color.Text = \"颜色\";\n            panel.Controls.Add(color);\n            attr.Add(\"color\", color);\n            //select_color\n            PictureBox select_color = new PictureBox();\n            select_color.Width = 30;\n            select_color.Height = 30;\n            select_color.Visible = true;\n            select_color.BackColor = Color.Black;\n            select_color.MouseDoubleClick += new MouseEventHandler(this.SelectColor);\n            panel.Controls.Add(select_color);\n            attr.Add(\"select_color\", select_color);\n            \n            //pixel\n            Label pixel = new Label();\n            pixel.Text = \"粗细\";\n            panel.Controls.Add(pixel);\n            attr.Add(\"pixel\", pixel);\n            //set_pixel\n            NumericUpDown set_pixel = new NumericUpDown();\n            set_pixel.Width = 50;\n            set_pixel.Minimum = 1;\n            set_pixel.ValueChanged += new EventHandler(this.SetWidth);\n            set_pixel.ReadOnly = true;\n            panel.Controls.Add(set_pixel);\n            attr.Add(\"set_pixel\", set_pixel);\n            set_pixel.Value = 5;\n            return panel;\n        }\n\n        public override void MouseClickDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseDownDraw(object sender, MouseEventArgs e)\n        {\n            this.startP = e.Location;\n        }\n\n        public override void MouseMoveDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseUpDraw(object sender, MouseEventArgs e)\n        {\n            this.endP = e.Location;\n            PictureBox palette = sender as PictureBox;\n            Graphics g = palette.CreateGraphics();\n            this.DrawLine(g);\n        }\n        private void SelectColor(object sender, MouseEventArgs e)\n        {\n            if (colorDialog.ShowDialog() == DialogResult.OK)\n            {\n                this.attr[\"select_color\"].BackColor = colorDialog.Color;\n                this.pen.Color = colorDialog.Color;\n            }\n        }\n        private void SetWidth(object sender, EventArgs e)\n        {\n            NumericUpDown width = attr[\"set_pixel\"] as NumericUpDown;\n            pen.Width = (int)width.Value;\n        }\n        protected override void SetEventName()\n        {\n            eventName = new List&lt;string&gt;();\n            eventName.Add(\"MouseDown\");\n            eventName.Add(\"MouseUp\");\n            //eventName.Add(\"MouseMove\");\n        }\n\n        protected override void SetEventMap()\n        {\n            eventMap = new Dictionary&lt;string, MouseEventHandler&gt;();\n            eventMap.Add(\"MouseDown\", new MouseEventHandler(this.MouseDownDraw));\n            eventMap.Add(\"MouseUp\", new MouseEventHandler(this.MouseUpDraw));\n            eventMap.Add(\"MouseMove\", new MouseEventHandler(this.MouseMoveDraw));\n        }\n    }\n}\n</code></pre>\n<h3 id=\"Word\">Word</h3>\n<ul><li>Word.cs</li></ul>\n<pre><code class=\"language-cs\">using pallet.Tools.Word;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Windows.Forms;\nnamespace palette.Tools\n{\n    internal class Word : Tool\n    {\n        private static Panel panel;\n        private PictureBox pbx;\n        private SetWordDialog setWordDialog;\n        public Word(Graphics g, PictureBox pbx) : base(pbx)\n        {\n            setWordDialog = new SetWordDialog();\n            this.pbx = pbx;\n            this.g = g;\n            name = \"文字工具\";\n            description = \"用于填充\";\n            attr = new Dictionary&lt;string, Control&gt;();\n            colorDialog = new ColorDialog();\n            pen = new Pen(Color.Black);\n        }\n\n        public override Panel GetAttrPanel()\n        {\n            if (panel != null)\n                return panel;\n            panel = new FlowLayoutPanel();\n            panel.BackColor = System.Drawing.SystemColors.AppWorkspace;\n            panel.AutoSize = true;\n            panel.AutoSizeMode = AutoSizeMode.GrowAndShrink;\n            panel.Dock = DockStyle.Top;\n            attr.Add(\"panel\", panel);\n            //description\n            Label font = new Label();\n            font.Text = \"点击添加文字\";\n            font.Font= new System.Drawing.Font(\"微软雅黑\", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));\n            panel.Controls.Add(font);\n            attr.Add(\"color\", font);\n            return panel;\n        }\n        public override void MouseClickDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseDownDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseMoveDraw(object sender, MouseEventArgs e)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void MouseUpDraw(object sender, MouseEventArgs e)\n        {\n            string content;\n            Font font;\n            Color color;\n            if (setWordDialog.ShowDialog() == DialogResult.OK)\n            {\n                content = setWordDialog.Content;\n                font = setWordDialog.Font;\n                color = setWordDialog.Color;\n                \n                try\n                {\n                    DrawString(g,e.Location,font,color,content);\n                    this.pbx.Image = bitmap;\n                }catch (Exception ex)\n                {\n                    MessageBox.Show(ex.Message);\n                }\n                \n            }\n            \n        }\n\n        protected override void SetEventMap()\n        {\n            eventMap = new Dictionary&lt;string, MouseEventHandler&gt;();\n            eventMap.Add(\"MouseUp\", new MouseEventHandler(this.MouseUpDraw));\n        }\n\n        protected override void SetEventName()\n        {\n            eventName = new List&lt;string&gt;();\n            eventName.Add(\"MouseUp\");\n        }\n        private void SelectColor(object sender, MouseEventArgs e)\n        {\n            if (colorDialog.ShowDialog() == DialogResult.OK)\n            {\n                this.attr[\"select_color\"].BackColor = colorDialog.Color;\n                this.pen.Color = colorDialog.Color;\n            }\n        }\n\n        private static void DrawString(Graphics g,Point p,Font font,Color color,string content)\n        {\n            Brush brush = new SolidBrush(color);\n            g.DrawString(content, font, brush,p);\n        }\n    }\n}\n</code></pre>\n<ul><li>SetFontDIalog.cs</li></ul>\n<p>通过窗体的Font,Colot,Content属性来访问所设置的值。</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace pallet.Tools.Word\n{\n    public partial class SetWordDialog : Form\n    {\n        private Font font;\n        private Color color;\n        private string content;\n\n        public Font Font { \n            get =&gt; font; \n            set\n            {\n                font = value;\n                DrawString(this.pictureBox2, Font.Name);\n            } \n        }\n        public Color Color\n        {\n            get =&gt; color; set\n            {\n                this.pictureBox1.BackColor = value;\n                color = value;\n            }\n        }\n        public string Content { get =&gt; content; set\n            {\n                content = value; \n                this.textBox1.Text = Content; \n            } \n        }\n\n        public SetWordDialog()\n        {\n            InitializeComponent();\n            this.Color = Color.Black;\n            this.Content = \"\";\n            this.Font= new System.Drawing.Font(\"微软雅黑\", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));\n        }\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n            if (fontDialog1.ShowDialog() == DialogResult.OK)\n            {\n                this.Font = fontDialog1.Font;\n            }\n        }\n\n        //设置\n        private static void DrawString(PictureBox p, string content)\n        {\n            Graphics  g = p.CreateGraphics();\n            Pen pen = new Pen(Color.Black);\n            Font font = p.Font;\n            g.DrawString(content,font,pen.Brush,0,0);\n        }\n\n        private void pictureBox2_Click(object sender, EventArgs e)\n        {\n            if (this.fontDialog1.ShowDialog() == DialogResult.OK)\n            {\n                this.Font = this.fontDialog1.Font;  \n            }\n        }\n\n        private void pictureBox1_Click(object sender, EventArgs e)\n        {\n            if (colorDialog1.ShowDialog() == DialogResult.OK)\n            {\n                this.Color = colorDialog1.Color;\n            }\n        }\n\n        private void textBox1_TextChanged(object sender, EventArgs e)\n        {\n            this.Content = textBox1.Text;\n        }\n    }\n}\n</code></pre>\n</div>\n</div>"}