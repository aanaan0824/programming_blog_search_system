{"blogid": "120402568", "writerAge": "码龄2年", "writerBlogNum": "92", "writerCollect": "4271", "writerComment": "2079", "writerFan": "11429", "writerGrade": "6级", "writerIntegral": "7760", "writerName": "十叶知秋", "writerProfileAdress": "writer_image\\profile_120402568.jpg", "writerRankTotal": "3315", "writerRankWeekly": "14198", "writerThumb": "2831", "writerVisitNum": "93488", "blog_read_count": "17486", "blog_time": "于 2021-09-21 21:40:20 发布", "blog_title": "【C语言】玩转指针——关于指针，你需要掌握的基础知识！", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_9\">前言</a></li><li><a href=\"#_17\">一、指针是什么？</a></li><li><ul><li><a href=\"#1_24\">1.数据在内存中的存储</a></li><li><a href=\"#2_36\">2.一个小的单元到底是多大？</a></li></ul>\n</li><li><a href=\"#_58\">二、指针变量</a></li><li><ul><li><a href=\"#1_59\">1.什么是指针变量</a></li><li><a href=\"#2_95\">2.指针类型</a></li><li><a href=\"#3_127\">3.指针类型的作用</a></li></ul>\n</li><li><a href=\"#_186\">三、野指针</a></li><li><ul><li><a href=\"#1_187\">1.什么是野指针</a></li><li><a href=\"#2_194\">2.野指针成因</a></li><li><ul><li><a href=\"#21__196\">2.1. 指针未初始化</a></li><li><a href=\"#22_210\">2.2指针越界访问</a></li><li><a href=\"#23_230\">2.3指针指向的空间释放</a></li></ul>\n</li><li><a href=\"#3_250\">3.如何规避野指针</a></li></ul>\n</li><li><a href=\"#_276\">四、指针运算</a></li><li><ul><li><a href=\"#1_278\">1.指针+-整数</a></li><li><a href=\"#2_297\">2.指针-指针</a></li></ul>\n</li><li><a href=\"#_328\">五、指针和数组</a></li><li><ul><li><a href=\"#1_329\">1.数组元素的指针</a></li><li><a href=\"#2_352\">2.通过指针引用数组元素</a></li></ul>\n</li><li><a href=\"#_417\">六、二级指针</a></li><li><a href=\"#_437\">七、指针数组</a></li><li><a href=\"#_485\">最后</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_9\"></a>前言</h1>\n<p><font color=\"#999AAA\">指针是C语言中的一个重要概念。正确而灵活的运用指针，可以使程序间接、紧凑、高效。每一个学习和使用C语言的人，都应当深入地学习和掌握指针。</font></p>\n<hr color=\"#000000\" size='1\"'/>\n<p><font color=\"#999AAA\">提示：以下是本篇文章正文内容，下面案例可供参考</font></p>\n<h1><a id=\"_17\"></a>一、指针是什么？</h1>\n<blockquote>\n<p>指针是包含内存地址的变量，这个地址是内存中另一个对象（通常是另一个变量）的位置。例如如果一个变量包含另一个变量的地址，我们说第一个变量指向第二个变量。</p>\n</blockquote>\n<p>相信大家看到上面这段话，可能有点懵，不急，我稍后再给大家解释。在这里，我先给大家讲述一下，数据在内存中是如何存储和读取的？</p>\n<h2><a id=\"1_24\"></a>1.数据在内存中的存储</h2>\n<blockquote>\n<p>如果在程序中定义了一个变量，在对程序进行编译的时候，系统就会给这个变量分配内存单元。编译系统根据程序中的定义的变量类型，分配一定长度的空间</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\435c0c192b9c4e9abdd08769ccbe6c03.png\"/>那么，这些字节在内存中被分配到哪里？我们如何找到呢？<br/> 为了解决这个问题，我们就给内存区的每一个字节一个编号，这个就是它们的“地址”。它相当于旅馆中的房间号，在地址所标志的内存单元中存放的数据则相当于旅馆房间中居住的旅客。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8c19c1c76cc04b3ab48d51e6c1a32417.png\"/></p>\n<blockquote>\n<p>所以指针是个变量，存放内存单元的地址（编号）</p>\n</blockquote>\n<h2><a id=\"2_36\"></a>2.一个小的单元到底是多大？</h2>\n<p>1、对于32位的机器，假设有32根地址线，那么假设每根地址线在寻址的时候产生高电平（高电压）和低电平（低电压）就是（1或者0）；</p>\n<p>2根地址线上的电信号转换成数字信号用（1/0）表示，所以可能性<br/> 00000000000000000000000000000000–11111111111111111111111111111111<br/> 也就是有2^32 编号，说明可以管理2的32次方个单元<br/> 这里就有2的32次方个地址。</p>\n<p>每个地址标识一个字节，那我们就可以给<br/> （2^32Byte == 2^32/1024KB == 2^32 /1024/1024MB==2^32/1024/1024/1024GB == 4GB） 4G的空闲进行编址。</p>\n<p>按照同样的方法，我们可以计算出64四位机器，下面就直接给结论了。</p>\n<blockquote>\n<p>1、在32位的机器上，地址是32个0或者1组成二进制序列，那地址就得用4个字节的空间来存储，所 以一个指针变量的大小就应该是4个字节。<br/> 2、在64位机器上，如果有64个地址线，那一个指针变量的大小是8个字节，才能存放一个地址</p>\n<p>指针的大小在32位平台是4个字节，在64位平台是8个字节。</p>\n</blockquote>\n<h1><a id=\"_58\"></a>二、指针变量</h1>\n<h2><a id=\"1_59\"></a>1.什么是指针变量</h2>\n<p>思考一个问题，在编译器中，如何把3赋值给i这个变量中？</p>\n<p>第一种作法，把3直接送到i所表示的单元中，例如“i=3”；</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>第二种方法，把3送到变量p所指向的单元（即变量i的存储单元，也就是地址，如<em>p=3，其中</em>i表示p指向的对象）</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//int i = 3;//第一种方法</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span><span class=\"token comment\">//第二种方法</span>\n\t<span class=\"token comment\">//这里我们对变量a，取出它的地址，可以使用&amp;操作符。</span>\n   <span class=\"token comment\">//将i的地址存放在p变量中，p就是一个指针变量。</span>\n\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\588c2580b26f4e6088ff8bc9cc88ec8f.png\"/></p>\n<h2><a id=\"2_95\"></a>2.指针类型</h2>\n<p>思考一个问题：</p>\n<blockquote>\n<p>把int型变量a和float型变量b先后分配到2000开始的存储单元中，&amp;a和&amp;b的信息完全相同吗？</p>\n</blockquote>\n<p>答案是不相同的，因为虽然存储单元的编号相同，但他们的数据类型不同。</p>\n<p>此外，还因为数据类型的不同，无法确定是从一个字节中取信息（字符数据），还是从两个字节取信息（短整型），抑或是从四个字节取信息（整型），不同的类型，存储方式是不一样的。</p>\n<p>如果我们要将&amp;num（num的地址）保存到p中，我们需要我们给指针变量相应的类型。</p>\n<p>如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span>  <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//har* 类型的指针是为了存放 char 类型变量的地址。</span>\n<span class=\"token keyword\">int</span>   <span class=\"token operator\">*</span>pi <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//int* 类型的指针是为了存放 int 类型变量的地址。</span>\n<span class=\"token keyword\">short</span> <span class=\"token operator\">*</span>ps <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//short* 类型的指针是为了存放 short 类型变量的地址</span>\n<span class=\"token keyword\">long</span>  <span class=\"token operator\">*</span>pl <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>pf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>pd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里可以看到，指针的定义方式是： <strong>类型名 * 指针变量名</strong> 。</p>\n<p>【总结】</p>\n<blockquote>\n<p>C语言中的地址包括位置信息（内存编号，或称纯地址）和它所指向的数据的类型信息，或者说它是“带类型的地址”，如&amp;a，一般称它位“变量a的地址”，但是确切地说，它是“整型变量a的地址”</p>\n</blockquote>\n<h2><a id=\"3_127\"></a>3.指针类型的作用</h2>\n<p><strong>作用一：</strong></p>\n<blockquote>\n<p>指针类型决定了指针解引用操作的时候，一次访问几个字节（访问内存的大小）</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x11223344</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6ad25c47c8454e918dbe881792f6a5f6.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x11223344</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\tint* pa = &amp;a;\n\t*pa = 0;*/</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//int*</span>\n\t<span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\204432141bcc4aa4af39348f639ff7d5.png\"/><br/> 指针类型的意义1</p>\n<blockquote>\n<p>指针类型决定了指针解引用操作的时候，一次访问几个字节（访问内存的大小） <br/> char* 指针解引用访问1个字节 <br/> int* 指针解引用访问4个字节</p>\n</blockquote>\n<p><strong>作用二：</strong></p>\n<blockquote>\n<p>指针类型决定了，指针±整数的时候的步长（指针±整数的时候，跳过几个字节）</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> pa<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> pa<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//如果是整型指针int*，+1则跳过4个字节、</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> pc<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//char* 指针+1，跳过1个字节</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cd4be9d2fbba46eda7b1422d3a632832.png\"/></p>\n<h1><a id=\"_186\"></a>三、野指针</h1>\n<h2><a id=\"1_187\"></a>1.什么是野指针</h2>\n<blockquote>\n<p>概念： 野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</p>\n</blockquote>\n<p>什么意思？举个例子<br/> 就是你捡到一把钥匙，但是不知道它可以开那道门。</p>\n<h2><a id=\"2_194\"></a>2.野指针成因</h2>\n<h3><a id=\"21__196\"></a>2.1. 指针未初始化</h3>\n<blockquote>\n<p>指针没有初始化,里面放的是随机值</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span> \n \t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><span class=\"token comment\">//局部变量指针未初始化，默认为随机值</span>\n    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过p中存的随机值作为地址，找到一个空间，这个空间不属于我们当前的程序，就造成了非法访问</span>\n<span class=\"token comment\">//如果非法访问了，p就是野指针</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"22_210\"></a>2.2指针越界访问</h3>\n<blockquote>\n<p>指针越界造成野指针问题</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//这里循环了11次，当指针指向的范围超出数组arr的范围时，p就是野指针</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"23_230\"></a>2.3指针指向的空间释放</h3>\n<blockquote>\n<p>当一个指针指向的空间释放了，这个指针就变成野指针了</p>\n</blockquote>\n<pre><code class=\"prism language-c\">\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//int *,生命周期，出来就销毁了</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//printf(\"不愧是你\\n\");//加入这里加了一条语句，下面的值就变了</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//编译出10是因为编译器会对值做一次保留。所以能访问到上面函数不一定是对的</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_250\"></a>3.如何规避野指针</h2>\n<blockquote>\n<ol><li>指针初始化</li><li>小心指针越界</li><li>指针指向空间释放即使置NULL</li><li>避免返回局部变量的地址</li><li>指针使用之前检查有效性</li></ol>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//规避野指针</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//1、明确初始化，确定指向</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NULL本质是0，2、不知道一个指针当前应该指向哪里是，可以初始化位NULL</span>\n\t<span class=\"token comment\">//*p2 = 100;//err,对于空指针，是不能直接解引用的</span>\n\n\t<span class=\"token comment\">//如何规避？ </span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//先判断是不是空指针</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这样才对</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_276\"></a>四、指针运算</h1>\n<h2><a id=\"1_278\"></a>1.指针±整数</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">float</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span>p<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//对一个指针加1使它指向数组中的下一个元素,把指针指向的内容全部赋值给0</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\14a0bf7a8fa749eba007c637f24d7234.png\"/></p>\n<blockquote>\n<p>也就说，如果加2使它向右移动2个元素的位置，依次类推。把一个指针减去2使它向左移动2个元素的位置。</p>\n</blockquote>\n<h2><a id=\"2_297\"></a>2.指针-指针</h2>\n<blockquote>\n<p>1、指针减去指针的前提，是两个指针指向同一块区域<br/> 2、指针减去指针，得到数字的绝对值，是指针和指针之间元素的个数</p>\n</blockquote>\n<pre><code class=\"prism language-c\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//printf(\"%d\\n\", &amp;arr[9] - &amp;ch[0]);//这种算法是错误的</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//算出的是元素的个数</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//指针减去指针的前提，是两个指针指向同一块区域</span>\n\t<span class=\"token comment\">//指针减去指针，得到数字的绝对值，是指针和指针之间元素的个数</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\49dc79049bc246b18dfd103d5ccfd894.png\"/>【注意】<br/> 指针与指针之间不能进行加法运算，因为进行加法后，得到的结果指向一个不知所向的地方，没有实际意义</p>\n<p>什么意思，举个例子。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f0760fd4dd0d42f1a953a5fe609bf8de.png\"/></p>\n<h1><a id=\"_328\"></a>五、指针和数组</h1>\n<h2><a id=\"1_329\"></a>1.数组元素的指针</h2>\n<p>一个变量有地址，一个数组包含若干元素，每个数组元素都在内存中占用存储单元，它们都有相应的地址。</p>\n<p>指针变量既然可以指向变量，当然也可以指向数组元素，也就是把某一元素地址放到一个指针变量中。</p>\n<blockquote>\n<p>所谓数组元素的指针就是数组元素的地址</p>\n</blockquote>\n<p>（1）用一个指针变量指向一个数组元素</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span><span class=\"token comment\">//定义p位指向整型变量的指针变量</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把a[0]元素的地址赋给指针变量p</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>以上是使指针变量p指向a数组的第0号元素</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\36bbc686e91847ceac1bba4acbed4374.png\"/></p>\n<h2><a id=\"2_352\"></a>2.通过指针引用数组元素</h2>\n<p>（1）下标法，如a[i]形式<br/> （2）指针法，如*（a+i)</p>\n<p>下标法：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数组名就是首元素地址</span>\n\t<span class=\"token comment\">//下标法</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//整型地址放在整型指针上，从而让指针跟数组建立联系</span>\n\n\t<span class=\"token comment\">//数组名确实是首元素地址，</span>\n\t<span class=\"token comment\">//但是有两个例外</span>\n\t<span class=\"token comment\">//1.sizeof(数组名),这里的数组名不是首元素地址，是表示整个数组，计算的是整个数组的大小，单位是字节</span>\n\t<span class=\"token comment\">//2.&amp;数组名，拿到的是整个数组的地址</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\68240f202ad342cab2e94c1a257e6182.png\"/>指针法：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//整型地址放在整型指针上，从而让指针跟数组建立联系</span>\n\t<span class=\"token comment\">//指针法</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// p+i 其实计算的是数组 arr 下标为i的地址。</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e5b2e3492ddb45c0996f4d59802873e7.png\"/>一个小知识：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tarr<span class=\"token punctuation\">;</span><span class=\"token comment\">//数组名</span>\n\t<span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取出首元素地址</span>\n\t<span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//取出整个数组的地址</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6c5de5d3c7114375806fc95a8a95ddda.png\"/></p>\n<h1><a id=\"_417\"></a>六、二级指针</h1>\n<blockquote>\n<p>指针变量的地址二级指针</p>\n</blockquote>\n<p>什么意思？举个例子</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4byte,向内存申请4个字节</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//p指向a,称为一级指针</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token operator\">*</span>pp<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">;</span><span class=\"token comment\">//pp就是二级指针，pp存放的是一级指针的地址</span>\n\t<span class=\"token operator\">*</span> <span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//需两层解引用\t</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//int** * ppp = &amp;pp;//ppp就是三级指针</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_437\"></a>七、指针数组</h1>\n<blockquote>\n<p>存放指针的数组就是指针数组</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//整型数组，存放整型的数组就是整型数组</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字符数组，存放字符的数组就是字符数组</span>\n\t<span class=\"token comment\">//指针数组，存放指针的数组就是指针数组</span>\n\t<span class=\"token comment\">//int*  整型指针的数组</span>\n\t<span class=\"token comment\">//char* 字符指针的数组</span>\n\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> parr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//整型指针的数组，存放的类型都是int*</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字符指针的数组</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>我们也可以用同样的方式来访问指针数组。<br/> 如下</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7945c7b89cec42119e9c15e36924b543.png\"/></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_485\"></a>最后</h1>\n<p><font color=\"#999AAA\">本文介绍的是指针的基础知识，往后还会继续深入讲解指针更深入的知识。此外，本文参考了谭浩强《C语言设计》（第五版），以及网上的部分资料，加之自己在学习听课时的笔记，梳理而成，花费了我很多心思。当文章写成之时，时间已过去4个多小时！</font></p>\n<p>希望能对看到的大家有所帮助！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}