{"blogid": "123283394", "writerAge": "码龄2年", "writerBlogNum": "77", "writerCollect": "705", "writerComment": "36", "writerFan": "627", "writerGrade": "4级", "writerIntegral": "1063", "writerName": "莫凡-11", "writerProfileAdress": "writer_image\\profile_123283394.jpg", "writerRankTotal": "25616", "writerRankWeekly": "213492", "writerThumb": "110", "writerVisitNum": "100946", "blog_read_count": "2746", "blog_time": "已于 2022-03-14 17:11:51 修改", "blog_title": "C# 基础语法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#font_color00ffffC_font_4\"><font color=\"#00ffff\">C# 基础语法</font></a></li><li><ul><li><a href=\"#font_colorredC_font_12\"><font color=\"red\">C# 注释符</font></a></li><li><a href=\"#font_colorredC_Variablefont_23\"><font color=\"red\">C# 变量（Variable）</font></a></li><li><ul><li><a href=\"#_24\">变量的存储</a></li><li><a href=\"#_37\">变量的基本数据类型</a></li><li><a href=\"#_46\">变量的使用规则</a></li><li><a href=\"#_50\">变量的命名</a></li><li><a href=\"#_68\">变量的作用域</a></li></ul>\n</li><li><a href=\"#font_colorredC_font_74\"><font color=\"red\">C# 运算符</font></a></li><li><ul><li><a href=\"#_78\">赋值运算符</a></li><li><a href=\"#_87\">复合赋值运算符</a></li><li><a href=\"#_97\">`+`号的作用</a></li><li><a href=\"#_102\">算术运算符</a></li><li><a href=\"#_123\">关系(比较)运算符</a></li><li><a href=\"#_136\">逻辑运算符</a></li><li><a href=\"#_146\">三元运算符</a></li></ul>\n</li><li><a href=\"#font_colorredC_font_157\"><font color=\"red\">C# 占位符</font></a></li><li><a href=\"#font_colorredC_font_167\"><font color=\"red\">C# 转义符</font></a></li><li><ul><li><a href=\"#_183\">`@`符号</a></li></ul>\n</li><li><a href=\"#font_colorredC_font_192\"><font color=\"red\">C# 类型转换</font></a></li><li><ul><li><a href=\"#_193\">隐式类型转换（自动类型转换）</a></li><li><a href=\"#_200\">显式类型转换（强制类型转换）</a></li><li><a href=\"#Convert_218\">Convert类型转换</a></li><li><a href=\"#TryParse_225\">TryParse类型转换</a></li><li><a href=\"#ToString_238\">ToString类型转换</a></li></ul>\n</li><li><a href=\"#font_colorredC_font_250\"><font color=\"red\">C# 结构划分</font></a></li><li><ul><li><a href=\"#font_colorFF5121C_font_257\"><font color=\"#FF5121\">C# 分支结构</font></a></li><li><ul><li><a href=\"#if__258\">if 语句</a></li><li><a href=\"#ifelse__272\">if-else 语句</a></li><li><a href=\"#ifelseif__288\">if-else-if 语句</a></li><li><a href=\"#switchcase__309\">switch-case 语句</a></li></ul>\n</li><li><a href=\"#font_colorFF5121C_font_331\"><font color=\"#FF5121\">C# 循环结构</font></a></li><li><ul><li><a href=\"#while__332\">while 循环</a></li><li><a href=\"#dowhile_352\">do-while循环</a></li><li><a href=\"#for__364\">for 循环</a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_colorredC_font_382\"><font color=\"red\">C# 关键字</font></a></li><li><ul><li><a href=\"#break_383\">break关键字</a></li><li><a href=\"#continue_390\">continue关键字</a></li></ul>\n</li><li><a href=\"#font_colorredC_font_394\"><font color=\"red\">C# 复杂数据类型</font></a></li><li><ul><li><a href=\"#font_colorFF5121C_Constantfont_395\"><font color=\"#FF5121\">C# 常量（Constant）</font></a></li><li><ul><li><a href=\"#_399\">常量的声明</a></li><li><a href=\"#_407\">什么时候使用常量?</a></li></ul>\n</li><li><a href=\"#font_colorFF5121C_Enumfont_411\"><font color=\"#FF5121\">C# 枚举（Enum）</font></a></li><li><ul><li><a href=\"#_434\">枚举的声明和使用</a></li><li><a href=\"#_449\">枚举与基本数据类型之间的转化</a></li></ul>\n</li><li><a href=\"#font_colorFF5121C_font_464\"><font color=\"#FF5121\">C# 结构</font></a></li><li><a href=\"#font_colorFF5121C_font_475\"><font color=\"#FF5121\">C# 数组</font></a></li><li><ul><li><a href=\"#_485\">数组的排序</a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_colorredC_font_493\"><font color=\"red\">C# 方法(函数)</font></a></li><li><ul><li><a href=\"#_509\">方法调用</a></li><li><a href=\"#return_518\">关键字return</a></li><li><a href=\"#_523\">方法调用</a></li><li><a href=\"#out_540\">out参数</a></li><li><a href=\"#ref_548\">ref参数</a></li><li><a href=\"#params_553\">params可变参数</a></li><li><a href=\"#_558\">方法的重载</a></li><li><a href=\"#_566\">方法的递归</a></li></ul>\n</li><li><a href=\"#font_colorredC_font_570\"><font color=\"red\">C# 异常</font></a></li><li><ul><li><a href=\"#_572\">异常捕获</a></li></ul>\n</li><li><a href=\"#font_colorredfont_594\"><font color=\"red\">产生随机数</font></a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<blockquote>\n<p><a href=\"https://gitee.com/fashenmofan/csharp/tree/master/CSharp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\">gitee代码传送门</a>配合代码食用更佳</p>\n</blockquote>\n<h1><a id=\"font_color00ffffC_font_4\"></a><font color=\"#00ffff\">C# 基础语法</font></h1>\n<p>🌳<strong>C#</strong> 语言是在 C、C++ 的基础上发展而来的，因此在语法形式上有些类似。<br/> 🌳掌握 <strong>C#</strong> 的基本语法是学好 <strong>C#</strong> 语言的前提。<br/> 🌳C#语言是一种强类型语言，要求每个变量都必须指定数据类型。<br/> 🌳任何一个程序都离不开选择语句和循环语句，例如登录一个网站需要输入用户名和密码，如果输入正确，可以进入该网站，否则无法登录，这里使用的就是选择语句。<br/> 🌳此外，如果输入用户名和密码的次数超过 3 次就不允许登录，则可以使用循环语句进行判断或者使用跳转语句完成。</p>\n<hr/>\n<h2><a id=\"font_colorredC_font_12\"></a><font color=\"red\">C# 注释符</font></h2>\n<p><font color=\"#00FF00\" size=\"4\">①注释符的作用</font></p>\n<ol><li>注销代码</li><li>解释代码</li></ol>\n<p><font color=\"#00FF00\" size=\"4\">②C#具有3种注释符</font></p>\n<ol><li>单行注释 <code>//</code></li><li>多行注释 <code>/*要注释的内容*/</code></li><li>文档注释 <code>/// 多用来解释类或方法</code></li></ol>\n<hr/>\n<h2><a id=\"font_colorredC_Variablefont_23\"></a><font color=\"red\">C# 变量（Variable）</font></h2>\n<h3><a id=\"_24\"></a>变量的存储</h3>\n<p><font color=\"#00ffff\">变量用来在计算机当中存储数据</font></p>\n<p><font color=\"orange\">存储变量的语法</font></p>\n<pre><code class=\"prism language-csharp\">变量类型 变量名；<span class=\"token comment\">//声明或者定义某个类型的变量</span>\n变量名 <span class=\"token operator\">=</span> 值；<span class=\"token comment\">//给这个变量进行赋值</span>\n<span class=\"token comment\">//声明并且给变量赋值的简写形式</span>\n变量类型 变量名 <span class=\"token operator\">=</span> 值；\n</code></pre>\n<p><font color=\"red\" size=\"2\">注：<code>=</code>在这里并不是表示等于而是表示赋值</font></p>\n<hr/>\n<h3><a id=\"_37\"></a>变量的基本数据类型</h3>\n<ol><li>整数类型：<code>int</code> 只能存储整数，不能存储小数</li><li>小数类型：<code>double</code> 既能存储整数，也能存储小数，小数点后的位数 15~16位。</li><li>金钱类型：<code>decimal</code> 用来存储金钱，值后面需要加一个m。</li><li>字符串类型：<code>string</code> 用来存储多个文本，也可以存储空，字符串类型的值需被 双引号引用。</li><li>字符类型：<code>char</code> 用来存储单个字符，最多、最少只能存储一个字符，不能存储空，字符类型的值需被 单引号引用。</li><li>布尔类型：<code>bool</code>类型用来描述对或错。<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         b\n        \n        \n         o\n        \n        \n         o\n        \n        \n         l\n        \n       \n       \n        bool\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span></span></span></span></span>类型的值只有<code>true</code>和<code>false</code>两个值。</li></ol>\n<hr/>\n<h3><a id=\"_46\"></a>变量的使用规则</h3>\n<p><font color=\"orangered\">如果你要是用变量的话，应该先声明再赋值最后使用。</font></p>\n<hr/>\n<h3><a id=\"_50\"></a>变量的命名</h3>\n<p><font color=\"orangered\">首先要保证的就是这个变量的名字要有意义。</font></p>\n<ol><li>必须以“字母”、“_”、“@”开头。(后两个具有特殊意义)</li><li>后面可以跟任意“字母”、数字、下划线，不能有特殊符号</li><li>以下划线“_”的变量用于结构中的字段、类中的字段。</li><li>符号“@”</li></ol>\n<p><font color=\"red\" size=\"4\">注意</font></p>\n<ol><li>你起的变量名不要与C#系统中的关键字重复。</li><li>在C#中，大小写是敏感的。</li><li>同一个变量名不允许重复定义（先这么认为，不严谨）</li></ol>\n<p>在满足上面一系列的规则之外同时还要满足这一系列的规范。<br/> <font color=\"orangered\">给变量起名字的时候要满足两个命名规范</font></p>\n<ol><li>骆驼（Camel）命名规范。要求变量名的首字母要小写，其余每个单词的首字母要大写。多用于给变量命名。如:hightSchool</li><li>Pascal 命名规范：要求每个单词的首字母都要大写，其余字母小写。多用于类或者方法命名。</li></ol>\n<hr/>\n<h3><a id=\"_68\"></a>变量的作用域</h3>\n<p>🌳变量的作用域就是你能够使用到这个变量的范围。<br/> 🌳变量的作用域一般从声明它的那个括号开始到那个括号所对应的结束的括号结束。<br/> 🌳在这个范围内，我们可以访问并使用变量。超出这个范围就访问不到了。</p>\n<hr/>\n<h2><a id=\"font_colorredC_font_74\"></a><font color=\"red\">C# 运算符</font></h2>\n<p><font color=\"#00ffff\">由XX运算符连接的表达式称为XX表达式</font><br/> <font size=\"1\">如：由算术运算符连接的表达式称为算术表达式。</font></p>\n<h3><a id=\"_78\"></a>赋值运算符</h3>\n<p>赋值运算符中最常见的是等号，除了等号以外还有很多赋值运算符，它们通常都是与其他运算符连用起到简化操作的作用。</p>\n<table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>=</code></td><td><code>x = y</code>，等号右边的值赋值给等号左边的变量，即把变量 y 的值赋给变量 x</td></tr></tbody></table>\n<p>注意：每个表达式我们都可以求解出一个定义，对于赋值表达式而言，等号左边的变量的值，就是整个赋值表达式的值。</p>\n<hr/>\n<h3><a id=\"_87\"></a>复合赋值运算符</h3>\n<table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>+=</code></td><td><code>x+=y</code>，等同于 <code>x=x+y</code></td></tr><tr><td><code>-=</code></td><td><code>x-=y</code>，等同于 <code>x=x-y</code></td></tr><tr><td><code>*=</code></td><td><code>x*=y</code>，等同于 <code>x=x*y</code></td></tr><tr><td><code>/=</code></td><td><code>x/=y</code>，等同于 <code>x=x/y</code></td></tr><tr><td><code>%=</code></td><td><code>x%=y</code>，等同于 <code>x=x%y</code></td></tr></tbody></table>\n<hr/>\n<h3><a id=\"_97\"></a><code>+</code>号的作用</h3>\n<ol><li>连接：当<code>+</code>号两边有一边是字符串的时候，<code>+</code>号就起到连接的作用。</li><li>相加：两边都是数字的时候。</li></ol>\n<hr/>\n<h3><a id=\"_102\"></a>算术运算符</h3>\n<table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>+</code></td><td>对两个操作数做加法运算</td></tr><tr><td><code>-</code></td><td>对两个操作数做减法运算</td></tr><tr><td><code>*</code></td><td>对两个操作数做乘法运算</td></tr><tr><td><code>/</code></td><td>对两个操作数做除法运算</td></tr><tr><td><code>%</code></td><td>对两个操作数做取余运算</td></tr><tr><td><code>++</code></td><td><code>x ++</code> 或 <code>++ x</code>，等同于<code>x = x + 1</code></td></tr><tr><td><code>--</code></td><td><code>x --</code> 或 <code>-- x</code>，等同于<code>x = x - 1</code></td></tr></tbody></table>\n<p>需要注意的是，<code>++</code> 和 <code>--</code> 运算符放在操作数前和操作数后是有区别的，如果放在操作数前，需要先将操作数加 1 或减 1，然后再与其他操作数进行运算；如果放在操作数后，需要先与其他操作数进行运算，然后操作数自身再加 1。<br/> <font color=\"orangered\">前加加减减示例</font><code>a = 2，b = ++a + 3</code><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        ⟶\n       \n      \n      \n       \\longrightarrow\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.522em; vertical-align: -0.011em;\"></span><span class=\"mrel\">⟶</span></span></span></span></span> <code>a += 1, b = 3 + 3</code><br/> <font color=\"orangered\">后加加减减示例</font><code>a = 2，b = a++ + 3</code><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        ⟶\n       \n      \n      \n       \\longrightarrow\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.522em; vertical-align: -0.011em;\"></span><span class=\"mrel\">⟶</span></span></span></span></span> <code>b = 2 + 3, a += 1</code></p>\n<p>对于像<code>++</code>、<code>--</code>这样只需要一个操作数就能够完成运算的符号，我们称为<strong>一元运算符</strong>。<br/> 对于<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>这样需要两个或以上才能完成运算的操作符，我们称为<strong>二元运算符</strong>。<br/> 一元运算符的优先级要高于二元运算符。<br/> 如果在一个表达式当中，既有一元运算符，又有二元运算符，我们首先计算一元运算符。</p>\n<hr/>\n<h3><a id=\"_123\"></a>关系(比较)运算符</h3>\n<p><font color=\"orangered\">关系运算符是用来描述两个事物之间的关系<br/> 关系表达式的结果是<code>bool</code>类型</font></p>\n<table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>==</code></td><td>表示两边表达式运算的结果相等，注意是两个等号</td></tr><tr><td><code>!=</code></td><td>表示两边表达式运算的结果不相等</td></tr><tr><td><code>&gt;</code></td><td>表示左边表达式的值大于右边表达式的值</td></tr><tr><td><code>&lt;</code></td><td>表示左边表达式的值小于右边表达式的值</td></tr><tr><td><code>&gt;=</code></td><td>表示左边表达式的值大于等于右边表达式的值</td></tr><tr><td><code>&lt;=</code></td><td>表示左边表达式的值小于等于右边表达式的值</td></tr></tbody></table>\n<hr/>\n<h3><a id=\"_136\"></a>逻辑运算符</h3>\n<p><font color=\"orangered\">在使用逻辑运算符时需要注意逻辑运算符两边的表达式以及返回的结果都是布尔类型的</font></p>\n<table><thead><tr><th>运算符</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>逻辑与</td><td>如果运算符两边都为 True，则整个表达式为 True,否则为 False;如果左边操作数为 False，则不对右边表达式进行计算，相当于“且”的含义</td></tr><tr><td><code>||</code></td><td>逻辑或</td><td>如果运算符两边有一个或两个为 True，整个表达式为 True，否则为 False;如果左边为 True,则不对右边表达式进行计算，相当于“或”的含义</td></tr><tr><td><code>!</code></td><td>逻辑非</td><td>表示和原来的逻辑相反的逻辑</td></tr></tbody></table>\n<p><font color=\"red\" size=\"2\">注：逻辑与的优先级要高于逻辑或</font></p>\n<hr/>\n<h3><a id=\"_146\"></a>三元运算符</h3>\n<p><font color=\"#00ffff\"><code>if-else</code>的简化写法</font><br/> <font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\">表达式<span class=\"token number\">1</span><span class=\"token operator\">?</span>表达式<span class=\"token number\">2</span><span class=\"token punctuation\">:</span>表达式<span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果表达式1可以计算出true，那么表达式2的值就是整个三元表达式的值<br/> 如果表达式1可以计算出false，那么表达式3的值就是整个三元表达式的值<br/> <font color=\"red\" size=\"3\">注意：表达式2的结果类型必须跟表达式3的结果类型一致，并且也要跟整个三元表达式的结果类型一致。</font></p>\n<hr/>\n<h2><a id=\"font_colorredC_font_157\"></a><font color=\"red\">C# 占位符</font></h2>\n<p><strong>使用方法</strong>：先挖个坑，再填个坑；挖坑就是“,”后变量的个数，填坑就是占位符的使用。从0开始依次递增。<br/> <font color=\"orangered\">使用占位符需要注意的地方</font></p>\n<ol><li>你挖了几个坑，就应该填几个坑。如果你多填了，没效果；如果你少填了，抛异常。</li><li>输出顺序：按照挖坑的顺序输出</li></ol>\n<pre><code class=\"prism language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一个数字是{0},第二个数字是{1},第三个数字是{2}\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h2><a id=\"font_colorredC_font_167\"></a><font color=\"red\">C# 转义符</font></h2>\n<p><font color=\"#00ffff\">转义符指的就是一个’ \\ '+ 一个特殊的字符，组成了一个具有特殊意义的字符</font></p>\n<table><thead><tr><th>转义字符</th><th>等价字符</th></tr></thead><tbody><tr><td><code>\\'</code></td><td>单引号</td></tr><tr><td><code>\\\"</code></td><td>双引号</td></tr><tr><td><code>\\\\</code></td><td>反斜杠</td></tr><tr><td><code>\\0</code></td><td>空</td></tr><tr><td><code>\\a</code></td><td>警告（产生鸣笛音）</td></tr><tr><td><code>\\b</code></td><td>退格（放在字符串两边没有效果）</td></tr><tr><td><code>\\f</code></td><td>换页</td></tr><tr><td><code>\\n</code></td><td>换行</td></tr><tr><td><code>\\r</code></td><td>回车</td></tr><tr><td><code>\\t</code></td><td>水平制表符</td></tr><tr><td><code>\\v</code></td><td>垂直制表符</td></tr></tbody></table>\n<h3><a id=\"_183\"></a><code>@</code>符号</h3>\n<ol><li>取消<code>\\</code>在字符串中的转义作用，使其单纯的表示为一个<code>\\</code></li><li>将字符串按照原格式输出</li></ol>\n<pre><code class=\"prism language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"今天天气好清凉\n                处处好风光\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h2><a id=\"font_colorredC_font_192\"></a><font color=\"red\">C# 类型转换</font></h2>\n<h3><a id=\"_193\"></a>隐式类型转换（自动类型转换）</h3>\n<p>我们要求等号两边参与运算的操作数的类型必须一致，如果不一致，满足下列条件会发生自动类型转化，或者称之为隐式类型转换。<br/> <font color=\"orangered\">满足下面两个条件才能发生隐式类型转换</font></p>\n<ol><li>两种类型相兼容。例如：<code>int</code>和<code>double</code>兼容（都是数字类型）</li><li>目标类型大于源类型。例如：<code>double &gt; int</code></li></ol>\n<hr/>\n<h3><a id=\"_200\"></a>显式类型转换（强制类型转换）</h3>\n<p><font color=\"orangered\">满足下面两个条件才能发生显式类型转换</font></p>\n<ol><li>两种类型相兼容。例如：<code>int</code>和<code>double</code>兼容</li><li>目标类型小于源类型。例如：<code>int &lt; double</code></li></ol>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//int ---&gt; double</span>\n<span class=\"token comment\">//目标类型 = 源类型</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">//自动类型转换 隐式类型转换</span>\n\n<span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> <span class=\"token number\">303.6</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//double ---&gt; int</span>\n<span class=\"token comment\">//目标类型 = (目标类型)原类型</span>\n<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>d1<span class=\"token punctuation\">;</span><span class=\"token comment\">//强制类型转换，显示类型转换</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//303</span>\n</code></pre>\n<hr/>\n<h3><a id=\"Convert_218\"></a>Convert类型转换</h3>\n<ol><li>两者不兼容的时候。例如：<code>string</code>和<code>double</code>、<code>int</code>不兼容。</li><li>面上必须要过得去。<br/> 比如字符串\"123\"看起来就能够转成<code>int</code>类型，而字符串\"abc\"看起来就不能转成<code>int</code>类型。</li><li>使用Convert进行转换，成功了就是成功了，失败了就抛异常。</li></ol>\n<hr/>\n<h3><a id=\"TryParse_225\"></a>TryParse类型转换</h3>\n<p>Convert底层就是使用Parse，所以Parse也会抛异常，而TryParse转化失败不会抛异常</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">decimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">decimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"ToString_238\"></a>ToString类型转换</h3>\n<p>所有类型都能够转换成string类型</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//int n = 10;</span>\n<span class=\"token comment\">//double n = 3.14;</span>\n<span class=\"token comment\">//decimal n = 20000m;</span>\n<span class=\"token class-name\">QQstate</span> n <span class=\"token operator\">=</span> QQstate<span class=\"token punctuation\">.</span>Busy<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">string</span> s <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h2><a id=\"font_colorredC_font_250\"></a><font color=\"red\">C# 结构划分</font></h2>\n<p>🌳无论世界上有多少语言、又将出现多少语言，他们的骨架都是这三个结构“顺序结构”、“选择结构”和“控制结构”。<br/> 🌳顺序结构：程序从<strong>Main函数</strong>进入，从上到下一行一行的执行，不会落下任何一行。<br/> 🌳选择结构：if、if-else、if-else-if、switch-case<br/> 🌳循环结构：while、do-while、for、foreach</p>\n<hr/>\n<h3><a id=\"font_colorFF5121C_font_257\"></a><font color=\"#FF5121\">C# 分支结构</font></h3>\n<h4><a id=\"if__258\"></a>if 语句</h4>\n<p><font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>判断条件<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    代码块<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>判断条件：一般为关系表达式或者bool类型的值亦或是bool类型的变量。<br/> 执行过程：当判断条件为 True 时执行代码块中的内容，否则不执行并跳出if-else结构。<br/> <code>if</code>结构的特点：先判断再执行，最多执行一条代码。<br/> 作用：用于一种情况的判断</p>\n<hr/>\n<h4><a id=\"ifelse__272\"></a>if-else 语句</h4>\n<p><font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>判断条件<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    代码块<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    代码块<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>判断条件：一般为关系表达式或者bool类型的值亦或是bool类型的变量。<br/> 执行过程：上面语句的执行过程是当 if 中的布尔表达式的结果为 True 时执行代码块1，否则执行代码块2。代码块1或者2执行完之后，就跳出if-else结构。<br/> <code>if-else</code>结构的特点：先判断再执行，最少执行一条代码。<strong><code>else</code>永远只跟离它最近的那个<code>if</code>配对。</strong><br/> 作用：用于两种情况的判断</p>\n<hr/>\n<h4><a id=\"ifelseif__288\"></a>if-else-if 语句</h4>\n<p><font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>判断条件<span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    代码块<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>判断条件<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    代码块<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    代码块n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>判断条件：一般为关系表达式或者<code>bool</code>类型的值亦或是<code>bool</code>类型的变量。<br/> 执行过程：先判断条件1 的值是否为 True，如果为 True，执行代码块 1，整个语句结束，否则依次判断每个判断条件的值，如果都不为 True，执行<code>else</code>语句中的语句块 n。<br/> 作用：用于处理多种情况的区间判断</p>\n<p><font color=\"red\" size=\"3\">需要注意的是，在上面的语法中最后一个 else{} 语句是可以省略的。如果省略了 else{} 语句，那么多分支的 if 语句中如果没有判断语句的值为 True 的语句，则不会执行任何语句块。</font></p>\n<hr/>\n<h4><a id=\"switchcase__309\"></a>switch-case 语句</h4>\n<p><font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>变量或者表达式的值<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">case</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>要执行的代码<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> 值<span class=\"token number\">2</span><span class=\"token punctuation\">:</span>要执行的代码<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> 值<span class=\"token number\">3</span><span class=\"token punctuation\">:</span>要执行的代码<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>要执行的代码<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行过程：程序执行到switch处，首先将括号中变量或者表达式的值计算出来，<br/> 然后拿着这个值依次跟每个case后面所带的值进行匹配，一旦匹配成功，则执行该case所带的代码，执行完成后，遇到break，跳出switch-case结构。<br/> 如果跟每个case所带的值都不匹配，就看当前这个switch-case结构中是否存在default，如果有default，则执行default中的语句，如果没有default，则该switch-case结构什么都不做。<br/> 作用：用来处理多条件的定值判断。只不过switch-case能够处理的，if-else也能够处理</p>\n<hr/>\n<h3><a id=\"font_colorFF5121C_font_331\"></a><font color=\"#FF5121\">C# 循环结构</font></h3>\n<h4><a id=\"while__332\"></a>while 循环</h4>\n<p><font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>循环条件<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t循环体<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行过程: 程序运行到while处, 首先判断while所带的小括号内的循环条件是否成立,<br/> 如果成立的话, 也就是返回一个true, 则执行循环体, 执行完一遍循环体后, 再次回到<br/> 循环条件进行判断, 如果依然成立, 则继续执行循环体, 如果不成立, 则跳出while循环。<br/> 在while循环当中, 一般总会有那么一行代码, 能够改变循环条件, 使之终有一天不再成立,<br/> 如果没有那么一行代码能够改变循环条件, 也就是循环条件永远都成立, 我们称之这种循环叫做死循环。<br/> <font color=\"orange\">最简单的最常用的死循环</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>特点：先判断，再执行，有可能一遍循环都不执行</p>\n<hr/>\n<h4><a id=\"dowhile_352\"></a>do-while循环</h4>\n<p><font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">do</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t循环体<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>循环条件<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>执行过程: 程序首先会执行do中的循环体, 执行完成后, 去判断do-while循环的循环条件, 如果成立, 则继续执行do中的循环体, 如果不成立, 则跳出do-while循环。<br/> 特点: 先循环, 再判断, 最少执行一遍循环体。</p>\n<hr/>\n<h4><a id=\"for__364\"></a>for 循环</h4>\n<p><font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>表达式 <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> 表达式 <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> 表达式<span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t循环体<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>表达式1一般为声明循环变量，记录循环的次数 (int i=0;)<br/> 表达式2一般为循环条件 (i&lt;10)<br/> 表达式3一般为改变循环条件的代码，使循环条件终有一天不再成立 (i++)。</p>\n<p>执行过程：程序首先执行表达式1，声明了一个循环变量用来记录循环的次数，<br/> 然后执行表达式2 , 判断循环条件是否成立，如果表达式 2 返回的结果为true,<br/> 则执行循环体：当执行完循环体后，执行表达式3，然后执行表达式 2 继续判断循环条件是否成立，<br/> 如果成立则继续执行循环体，如果不成立，则跳出for循环。</p>\n<hr/>\n<h2><a id=\"font_colorredC_font_382\"></a><font color=\"red\">C# 关键字</font></h2>\n<h3><a id=\"break_383\"></a>break关键字</h3>\n<ol><li>可以跳出<code>switch-case</code>结构</li><li>跳出当前循环结构</li></ol>\n<p><code>break</code>一般不单独的使用，而是跟着if判断一起使用，表示当满足某些条件的时候，就不再循环了。</p>\n<hr/>\n<h3><a id=\"continue_390\"></a>continue关键字</h3>\n<p><code>continue</code> 会跳过当前循环中的代码，强制开始下一次循环。</p>\n<hr/>\n<h2><a id=\"font_colorredC_font_394\"></a><font color=\"red\">C# 复杂数据类型</font></h2>\n<h3><a id=\"font_colorFF5121C_Constantfont_395\"></a><font color=\"#FF5121\">C# 常量（Constant）</font></h3>\n<p>与变量不同的是，常量在第一次被赋值后值就不能再改变。定义常量需要使用关键字 <strong>const</strong> 来完成。</p>\n<hr/>\n<h4><a id=\"_399\"></a>常量的声明</h4>\n<p><font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">const</span> 变量语法 变量名 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>需要注意的是，在定义常量时必须为其赋值，因为不赋值的话以后就再也不能赋值了。另外，也可以同时定义多个常量。</p>\n<hr/>\n<h4><a id=\"_407\"></a>什么时候使用常量?</h4>\n<p>在程序中使用常量也会带来很多好处，包括增强了程序的可读性以及便于程序的修改。例如在一个计算率的程序中，为了保证程序中的税率统一，设置一个名为 TAX 的常量来完成，如果需要修改税率只修改该常量的值即可。</p>\n<hr/>\n<h3><a id=\"font_colorFF5121C_Enumfont_411\"></a><font color=\"#FF5121\">C# 枚举（Enum）</font></h3>\n<p>枚举就是一种变量类型。只是枚举声明、赋值、使用的方式跟那些普通的变量类型不一样。</p>\n<p>枚举的作用：枚举可以规范开发<br/> <strong>举个例子说明为什么会有枚举这个东西？</strong><br/> 比如说你现在和三个人共同做个某某大学管理系统。这是你们四个人都这些事情，并且都分配了不同的模块，比如存储性别，每个人的定义方法都不相同，你们这个时候我们可以共同定义性别的规范，这是就可以使用枚举规范我们的开发。</p>\n<p><font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//声明以及使用</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">enum</span> 枚举名\n<span class=\"token punctuation\">{<!-- --></span>\n\t值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t值<span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>public:访问修饰符。公开的公共的，哪都可以访问。<br/> enum:关键字，声明枚举的关键字<br/> 枚举名：要符合Pascal命名规范</p>\n<hr/>\n<h4><a id=\"_434\"></a>枚举的声明和使用</h4>\n<p>将枚举声明到命名空间的下面，类的外面，表示这个命名空间下，所有的类都可以使用这个枚举。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> Season\n<span class=\"token punctuation\">{<!-- --></span>\n\t春<span class=\"token punctuation\">,</span>\n    夏<span class=\"token punctuation\">,</span>\n    秋<span class=\"token punctuation\">,</span>\n    冬\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Season</span> s <span class=\"token operator\">=</span> Season<span class=\"token punctuation\">.</span>春<span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h4><a id=\"_449\"></a>枚举与基本数据类型之间的转化</h4>\n<p><font color=\"#00FF00\" size=\"4\">枚举类型和int类型相互转换</font><br/> 枚举类型默认是跟int类型相互兼容的，所以可以通过强制类型转换的语法互相转换。<br/> 当转换一个枚举中没有的值的时候，不会抛异常，而是直接将数字显示出来。</p>\n<p><font color=\"#00FF00\" size=\"4\">枚举类型和string类型相互转换</font><br/> 枚举同样也可以跟string类型互相转换，如果将枚举类型转换成string类型， 则直接调用<code>ToString()</code>;<br/> 如果将字符串转换成枚举类型则需要下面这样一行代码：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">(</span>要转换的枚举类型<span class=\"token punctuation\">)</span>Enum<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>要转换的枚举类型<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"要转换的字符串\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果转换的字符串是数字，则就算枚举中没有，也不会抛异常。<br/> 如果转换的字符串是文本，如果枚举中没有，则会抛异常。</p>\n<hr/>\n<h3><a id=\"font_colorFF5121C_font_464\"></a><font color=\"#FF5121\">C# 结构</font></h3>\n<p>结构作用：可以帮助我们一次性声明<strong>多个不同类型</strong>的变量。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> 结构名\n<span class=\"token punctuation\">{<!-- --></span>\n\t成员<span class=\"token punctuation\">;</span> <span class=\"token comment\">//字段</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>变量在程序运行期间只能存储一个值，而字段可以存储多个值。</p>\n<hr/>\n<h3><a id=\"font_colorFF5121C_font_475\"></a><font color=\"#FF5121\">C# 数组</font></h3>\n<p>数组作用：可以帮助我们一次性存储多个相同类型的变量。<br/> 通过下标或者索引去访问和赋值数组中的元素。<br/> <font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\">数组类型<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 数组类型<span class=\"token punctuation\">[</span>数组长度<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>数组的长度一旦固定了，就不能够再改变了。</p>\n<hr/>\n<h4><a id=\"_485\"></a>数组的排序</h4>\n<p>通过下方两个操作可以实现数组的升序和降序。</p>\n<pre><code class=\"prism language-csharp\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>数组<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//升序</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span>数组<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//反转数组</span>\n</code></pre>\n<hr/>\n<h2><a id=\"font_colorredC_font_493\"></a><font color=\"red\">C# 方法(函数)</font></h2>\n<p><font color=\"#00ffff\">方法就是将一堆代码进行重用的一种机制</font><br/> <font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">static</span> 返回值类型 方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数列表<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t方法体<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>public：访问修饰符，公开的， 公共的，哪都可以访问<br/> static：静态的<br/> 返回值类型：如果不需要写返回值，写void<br/> 方法名：Pascal 每一个单词的首字母都大写，其余字母小写<br/> 参数列表：完成这个方法所必须要提供给这个方法的条件。如果没有参数，小括号也不能省略。</p>\n<hr/>\n<h3><a id=\"_509\"></a>方法调用</h3>\n<p>方法写好后，如果想要被执行，必须要在Main()函数中调用。<br/> <font color=\"orange\">方法的调用语法</font></p>\n<pre><code class=\"prism language-csharp\">类名<span class=\"token punctuation\">.</span>方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在某些情况下，类名是可以省略的，如果你写的方法跟Main()函数同在一个类中，这个时候，类名可以省略。</p>\n<hr/>\n<h3><a id=\"return_518\"></a>关键字return</h3>\n<ol><li>在方法中返回要返回的值。</li><li>立即结束当前方法。</li></ol>\n<hr/>\n<h3><a id=\"_523\"></a>方法调用</h3>\n<p>我们在<code>Main()</code>函数中，调用<code>Test()</code>函数，我们管<code>Main()</code>函数称之为调用者，管<code>Test()函数</code>称之为被调用者。</p>\n<p>如果被调用者想要调用者的值：<br/> 1.传递参数<br/> 2.使用静态字段来模拟全局变量<br/> （CSharp没有全局变量，但是可以用静态字段模拟全局变量，静态变量的作用域是声明的类当中）</p>\n<p>如果调用者想要被调用者的值：<br/> 1.<code>return 返回值;</code></p>\n<p><font color=\"red\">方法需要注意的地方</font><br/> 1.不管是实参还是形参，都是在内存中开辟空间。<br/> 2.方法的功能一定要单一。错误示范：<code>GetMax(int n1, int n2) //判断闰年</code><br/> 3.方法中最忌讳的就是出现提示用户输入的字眼，所以你需要尽可能地不使用<code>Console.WriteLine()</code>方法来达到目的。</p>\n<hr/>\n<h3><a id=\"out_540\"></a>out参数</h3>\n<p>如果你在一个方法中，返回多个相同类型的值的时候，可以考虑返回一个数组。<br/> 但是，如果返回多个不同类型的值的时候，返回数组就不行了，那么这个时候，我们可以考虑使用out参数。<br/> out参数就侧重于在一个方法中返回多个不同类型的值。<br/> out参数要求在方法的内部必须为其赋值。<br/> out意思就是返回多余的值。</p>\n<hr/>\n<h3><a id=\"ref_548\"></a>ref参数</h3>\n<p>能够将一个变量带入一个方法中进行改变，改变完成后，再讲改变后的值带出方法。<br/> ref参数要求在方法外必须为其赋值，而方法内可以不赋值。</p>\n<hr/>\n<h3><a id=\"params_553\"></a>params可变参数</h3>\n<p>将实参列表中跟可变参数数组类型一致的元素都当作数组的元素去处理。<br/> params 参数必须是形参表中最后一个参数。一个形参列表中只能有一个params参数。</p>\n<hr/>\n<h3><a id=\"_558\"></a>方法的重载</h3>\n<p>方法的重载指的就是方法的名称相同，但是参数不同。<br/> <font color=\"orangered\">参数不同，分为两种情况</font><br/> 1.如果参数的个数相同，那么参数的类型就不能相同。<br/> 2.如果参数的类型相同，那么参数的个数就不能相同。<br/> <font color=\"red\" size=\"3\">注：方法的重载跟返回值没有关系</font></p>\n<hr/>\n<h3><a id=\"_566\"></a>方法的递归</h3>\n<p><font color=\"orangered\">方法自己调用自己</font></p>\n<hr/>\n<h2><a id=\"font_colorredC_font_570\"></a><font color=\"red\">C# 异常</font></h2>\n<p>异常是指 语法上没有任何错误，在程序运行的过程当中，由于<strong>某些原因</strong>出现了问题，使程序不能再正常的运行。</p>\n<h3><a id=\"_572\"></a>异常捕获</h3>\n<p>我们在程序中经常会出现各种各样的异常，你如果想要你的程序变得坚强一些。<br/> 在你的代码中应该经常性的使用try-catch来进行异常捕获。</p>\n<p>哪行代码有可能出现异常，你就try它一脚。<br/> <font color=\"orange\">语法</font></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">try</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t可能会出现异常的代码块<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//try和catch之间不能有其它的代码 </span>\n<span class=\"token keyword\">catch</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t出现异常后要执行的代码块<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行过程：如果try中的代码没有出现异常，那么catch中的代码不会执行。<br/> 如果try中的代码出现了异常，那怕这行出现异常的代码后面还有一百行都不会执行了。<br/> 而是直接跳到catch中执行代码。</p>\n<hr/>\n<h2><a id=\"font_colorredfont_594\"></a><font color=\"red\">产生随机数</font></h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Random</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> rNumber <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//左闭右开</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}