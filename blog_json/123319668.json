{"blogid": "123319668", "writerAge": "码龄14年", "writerBlogNum": "16", "writerCollect": "30", "writerComment": "6", "writerFan": "18", "writerGrade": "2级", "writerIntegral": "223", "writerName": "曲大家", "writerProfileAdress": "writer_image\\profile_123319668.jpg", "writerRankTotal": "59206", "writerRankWeekly": "116143", "writerThumb": "31", "writerVisitNum": "18051", "blog_read_count": "1470", "blog_time": "于 2022-03-06 23:00:39 发布", "blog_title": "C#开发的3D图表控件，适用于winform项目", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>C#开发的3D图表控件，适用于winform项目，</p>\n<p>使用了opentk绘制3D图形。图表颜色，文字颜色，均可以替换。欢迎来白嫖。</p>\n<p>资源地址：</p>\n<p><a href=\"https://download.csdn.net/download/qujia121qu/83681593\" title=\"C#开发的3D图表控件，适用于winform项目，使用了opentk绘制3D图形。图表颜色，文字颜色，均可以替换-C#文档类资源-CSDN下载\">C#开发的3D图表控件，适用于winform项目，使用了opentk绘制3D图形。图表颜色，文字颜色，均可以替换-C#文档类资源-CSDN下载<br/></a><br/><br/><br/><br/><br/> 核心绘图代码如下：</p>\n<p>    public class QChart : GLControl<br/>     {<!-- --></p>\n<p>        private bool _loaded;<br/>         private int _x;<br/>         private float _rotationx,_rotationy;<br/>  </p>\n<p>        private float zIndex = 12;//俯视角度，好看</p>\n<p>       </p>\n<p>        private bool locked = false;//是否锁定</p>\n<p>        private readonly Stopwatch _sw = new Stopwatch();</p>\n<p>        private List&lt;Point3D&gt; points;</p>\n<p>        public float FontSize { get; set; }</p>\n<p>       <br/>         private Dictionary&lt;String, Txture&gt; fts = new Dictionary&lt;string, Txture&gt;();//材质集合</p>\n<p><br/>         /// &lt;summary&gt;<br/>         /// 坐标线条颜色<br/>         /// &lt;/summary&gt;<br/>         public Color LineColor { get; set; }<br/>         /// &lt;summary&gt;<br/>         /// 点颜色<br/>         /// &lt;/summary&gt;<br/>         public Color DotColor { get; set; }<br/>         /// &lt;summary&gt;<br/>         /// 标题颜色<br/>         /// &lt;/summary&gt;<br/>         public Color TitleColor { get; set; }<br/>         /// &lt;summary&gt;<br/>         /// X轴标题<br/>         /// &lt;/summary&gt;<br/>         public String XTitle { get; set; }<br/>         /// &lt;summary&gt;<br/>         /// Y轴标题<br/>         /// &lt;/summary&gt;<br/>         public String YTitle { get; set; }<br/>         /// &lt;summary&gt;<br/>         /// Z轴标题<br/>         /// &lt;/summary&gt;<br/>         public String ZTitle { get; set; }</p>\n<p>        public int XRange { get; set; }<br/>         public int YRange { get; set; }<br/>         public int ZRange { get; set; }</p>\n<p><br/>         public QChart()<br/>         {<!-- --><br/>             BackColor = Color.White;<br/>             LineColor = Color.Gray;<br/>             DotColor = Color.Green;<br/>             TitleColor = Color.Black;<br/>             XTitle = \"X\";<br/>             YTitle = \"Y\";<br/>             ZTitle = \"Z\";<br/>             XRange = 5;<br/>             YRange = 3;<br/>             ZRange = 3;<br/>             _rotationy = 1;<br/>             FontSize = 12;//文字大小</p>\n<p>        }</p>\n<p>        private double maxx, minx, maxy, miny, maxz, minz;</p>\n<p>        /// &lt;summary&gt;<br/>         /// 传入坐标集合<br/>         /// &lt;/summary&gt;<br/>         /// &lt;param name=\"points\"&gt;&lt;/param&gt;<br/>         public void ShowPoints(List&lt;Point3D&gt; points) {<!-- --><br/>             this.points = points;<br/>             if (points==null||  points.Count == 0) return;</p>\n<p>            maxx = points[0].X;<br/>             minx = points[0].X;<br/>             maxy = points[0].Y;<br/>             miny = points[0].Y;<br/>             maxz = points[0].Z;<br/>             minz = points[0].Z;</p>\n<p>            foreach (Point3D p in points) {<!-- --><br/>                 if (p.X &gt; maxx) maxx = p.X;<br/>                 if (p.X &lt; minx) minx = p.X;<br/>                 if (p.Y &gt; maxy) maxy =p.Y;<br/>                 if (p.Y &lt; miny) miny = p.Y;<br/>                 if (p.Z &gt; maxz) maxz = p.Z;<br/>                 if (p.Z &lt; minz) minz = p.Z;</p>\n<p>            }<br/>             //防止直接到边界<br/>             maxx += 0.2;<br/>             minx -= 0.2;<br/>             maxy += 0.2;<br/>             miny -= 0.2;<br/>             maxz += 0.2;<br/>             minz -= 0.2;</p>\n<p>        }</p>\n<p>        /// &lt;summary&gt;<br/>         /// 窗体加载<br/>         /// &lt;/summary&gt;<br/>         /// &lt;param name=\"e\"&gt;&lt;/param&gt;<br/>         protected override void OnLoad(EventArgs e)<br/>         {<!-- --><br/>             Control.CheckForIllegalCrossThreadCalls = false;<br/>             base.OnLoad(e);<br/>             this._loaded = true;<br/>             //GL.ClearColor(Color.Black);<br/>             this.SetupViewport();<br/>             Application.Idle += this.Application_Idle;<br/>             this._sw.Start();</p>\n<p>            this.MouseDown += on_MouseDown;<br/>             this.MouseLeave += on_MouseLeave;<br/>             this.MouseMove += on_MouseMove;<br/>             this.MouseUp += on_MouseUp;<br/>             this.MouseWheel += on_MouseWheel;</p>\n<p>        }</p>\n<p>        /// &lt;summary&gt;<br/>         /// 系统空闲<br/>         /// &lt;/summary&gt;<br/>         /// &lt;param name=\"sender\"&gt;&lt;/param&gt;<br/>         /// &lt;param name=\"e\"&gt;&lt;/param&gt;<br/>         private void Application_Idle(object sender, EventArgs e)<br/>         {<!-- --><br/>             while (this.IsIdle)<br/>             {<!-- --></p>\n<p>                this.Render();<br/>             }<br/>         }</p>\n<p>     <br/>         //时间更新方法<br/>         private double ComputeTimeSlice()<br/>         {<!-- --><br/>             this._sw.Stop();<br/>             double timeSlice = this._sw.Elapsed.TotalMilliseconds;<br/>             this._sw.Reset();<br/>             this._sw.Start();<br/>             return timeSlice;<br/>         }<br/>         //初始化可视区域<br/>         private void SetupViewport()<br/>         {<!-- --></p>\n<p><br/>             var w = this.Width;<br/>             var h = this.Height;</p>\n<p>            GL.MatrixMode(MatrixMode.Projection);<br/>             GL.LoadIdentity();<br/>       </p>\n<p>            GL.Viewport(0, 0, w, h); // Use all of the glControl painting area</p>\n<p>            if (h == 0) h = 1;<br/>             Glu.Perspective(60.0f, w / h, 0.01, 100);<br/>             Glu.LookAt(0, 0, zIndex, 0, 0, 0, 0, 1, 0);</p>\n<p><br/>         }<br/>         //大小改变<br/>         protected override void OnResize(EventArgs e)<br/>         {<!-- --><br/>             base.OnResize(e);<br/>             if (!this._loaded)<br/>             {<!-- --><br/>                 return;<br/>             }<br/>             this.SetupViewport();<br/>             this.Invalidate();<br/>         }<br/>         //窗体的绘图事件<br/>         protected override void OnPaint(PaintEventArgs e)<br/>         {<!-- --><br/>             base.OnPaint(e);<br/>             if (!this._loaded)<br/>             {<!-- --><br/>                 return;<br/>             }<br/>             this.Render();<br/>         }<br/>         //绘图主事件<br/>         private void Render()<br/>         {<!-- --></p>\n<p>            GL.ClearColor(BackColor);//背景色<br/>             GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit| ClearBufferMask.StencilBufferBit);</p>\n<p>            GL.MatrixMode(MatrixMode.Modelview);</p>\n<p>            GL.LoadIdentity();</p>\n<p>            </p>\n<p><br/>             GL.Rotate(_rotationx, 1, 0, 0);//X轴旋转</p>\n<p>            GL.Rotate(_rotationy, 0, 1, 0);//Y轴旋转<br/>             GL.Enable(EnableCap.DepthTest);//必须开启深度测试<br/>             GL.Enable(EnableCap.AlphaTest);<br/>             GL.AlphaFunc(AlphaFunction.Equal, 1.0f);<br/>             drawText(0, 0, 0, \"hello\");</p>\n<p>            //绘制坐标</p>\n<p><br/>             GL.Color3(LineColor);//线颜色<br/>             //水平线,X面<br/>             for(int i = -XRange; i &lt;= XRange; i++) {<!-- --><br/>                 GL.Begin(BeginMode.Lines);<br/>                 GL.Vertex3(i, -YRange, -ZRange);<br/>                 GL.Vertex3(i, -YRange, ZRange);<br/>                 GL.End();<br/>                <br/>              }<br/>             for (int i = -ZRange; i &lt;= ZRange; i++)<br/>             {<!-- --><br/>                 GL.Begin(BeginMode.Lines);<br/>                 GL.Vertex3(-XRange, -YRange, i);<br/>                 GL.Vertex3(XRange, -YRange,i);<br/>                 GL.End();<br/>                 <br/>             }</p>\n<p><br/>             //竖直线,Y面<br/>             for (int i = -YRange; i &lt;= YRange; i++)<br/>             {<!-- --><br/>                 GL.Begin(BeginMode.Lines);<br/>                 GL.Vertex3(-XRange, i, -ZRange);<br/>                 GL.Vertex3(-XRange, i, ZRange);<br/>                 GL.End();<br/>             }<br/>             <br/>             for (int i = -ZRange; i &lt;= ZRange; i++)<br/>             {<!-- --><br/>                 GL.Begin(BeginMode.Lines);<br/>                 GL.Vertex3(-XRange, -YRange, i);<br/>                 GL.Vertex3(-XRange, YRange, i);<br/>                 GL.End();<br/>             }<br/>             //Z面<br/>             for (int i = -YRange; i &lt;= YRange; i++)<br/>             {<!-- --><br/>                 GL.Begin(BeginMode.Lines);<br/>                 GL.Vertex3(-XRange,i, -ZRange);<br/>                 GL.Vertex3(XRange, i, -ZRange);<br/>                 GL.End();<br/>             }</p>\n<p>            for (int i = -XRange; i &lt;= XRange; i++)<br/>             {<!-- --><br/>                 GL.Begin(BeginMode.Lines);<br/>                 GL.Vertex3(i,-YRange, -ZRange);<br/>                 GL.Vertex3(i, YRange, -ZRange);<br/>                 GL.End();<br/>             }</p>\n<p>            //输出三个坐标标题<br/>            // GL.text<br/>            </p>\n<p>           <br/>             //如果有点，才绘制点</p>\n<p>            if (points != null &amp;&amp; points.Count &gt; 0) {<!-- --><br/>                 GL.Color3(DotColor);<br/>                 GL.PointSize(3);<br/>                 GL.Begin(BeginMode.Points);<br/>                 foreach (Point3D p in points) {<!-- --><br/>                     double x = XRange*( 2 * (p.X - minx) / (maxx - minx)-1);<br/>                     double y = YRange * (2 * (p.Y - miny) / (maxy - miny) - 1);<br/>                     double z = ZRange * (2 * (p.Z- minz) / (maxz - minz) - 1);<br/>                     GL.Vertex3(x, y, z);<br/>                 }<br/>                 GL.End();</p>\n<p>               // GL.DrawPixels<br/>                 </p>\n<p>            }<br/>           </p>\n<p>            this.SwapBuffers();<br/>         }</p>\n<p><br/>         //按键事件<br/>         protected override void OnKeyDown(KeyEventArgs e)<br/>         {<!-- --><br/>             base.OnKeyDown(e);<br/>             if (e.KeyCode == Keys.Space)<br/>             {<!-- --><br/>                 this._x++;<br/>                 SetupViewport();<br/>                 this.Invalidate();<br/>             }<br/>         }</p>\n<p><br/>         </p>\n<p>        private bool msDown = false;//是否鼠标按下<br/>         private int oldX = 0;//原始X坐标<br/>         private int oldY = 0;<br/>         private void on_MouseWheel(object sender, MouseEventArgs e)<br/>         {<!-- --></p>\n<p>            // MessageBox.Show(e.Delta+\"\");<br/>             if (e.Delta &gt; 0)<br/>             {<!-- --><br/>                 zIndex += 1;<br/>                 if (zIndex &gt; 20) zIndex = 20;<br/>             }<br/>             else if (e.Delta &lt; 0)<br/>             {<!-- --></p>\n<p>                zIndex -= 1;<br/>                 if (zIndex &lt; 8) zIndex = 8;<br/>             }</p>\n<p>            SetupViewport();<br/>             this.Invalidate();<br/>         }<br/>         private void on_MouseDown(object sender, MouseEventArgs e)<br/>         {<!-- --><br/>             msDown = true;<br/>             oldX = e.X;//记录<br/>             oldY = e.Y;<br/>             Cursor = Cursors.Hand;<br/>             ;<br/>         }</p>\n<p>        private void on_MouseMove(object sender, MouseEventArgs e)<br/>         {<!-- --><br/>             if (!msDown) return;<br/>             int dx = e.X - oldX;<br/>             int dy = e.Y - oldY;</p>\n<p>            if (dy &gt; 0) _rotationx += 0.5f;<br/>             else if (dy &lt; 0) _rotationx -= 0.5f;<br/>             if (dx &gt; 0) _rotationy += 0.5f;<br/>             else if (dx &lt; 0) _rotationy -= 0.5f;<br/>             SetupViewport();<br/>             this.Invalidate();<br/>            </p>\n<p>        }</p>\n<p>        private void on_MouseUp(object sender, MouseEventArgs e)<br/>         {<!-- --><br/>             msDown = false;<br/>             Cursor = Cursors.Default;<br/>         }</p>\n<p>        private void on_MouseLeave(object sender, EventArgs e)<br/>         {<!-- --><br/>             msDown = false;<br/>         }</p>\n<p>        <br/>         double pixrate = 0.05;//像素比<br/>         /// &lt;summary&gt;<br/>         /// GL绘制文字<br/>         /// &lt;/summary&gt;<br/>         /// &lt;param name=\"x\"&gt;显示文字的x坐标&lt;/param&gt;<br/>         /// &lt;param name=\"y\"&gt;显示文字的y坐标&lt;/param&gt;<br/>         /// &lt;param name=\"z\"&gt;显示文字的z坐标&lt;/param&gt;<br/>         /// &lt;param name=\"s\"&gt;文字&lt;/param&gt;<br/>         private void drawText(double x, double y, double z, String s) {<!-- --></p>\n<p><br/>             Txture t = getTexture(s);<br/>           //  GL.Enable(EnableCap.DepthTest);//必须开启深度测试<br/>             //GL.Enable(EnableCap.AlphaTest);<br/>           //  GL.AlphaFunc(AlphaFunction.Greater, 0.0f);<br/>             GL.BindTexture(TextureTarget.Texture2D, t.txtureid);//绑定材质</p>\n<p>            float width = (float)(t.bmp.Width * pixrate);<br/>             float height = (float)(t.bmp.Height * pixrate);</p>\n<p>          <br/>             GL.Begin(BeginMode.Polygon);<br/>             GL.TexCoord2(0.0f, 0.0f);<br/>             GL.Vertex3(x, y, z);//左上<br/>             GL.TexCoord2(1.0f, 0.0f);<br/>             GL.Vertex3(x+width, y, z);//右上<br/>             GL.TexCoord2(1.0f, 1.0f);<br/>             GL.Vertex3(x+width,y-height, z);//右下<br/>             GL.TexCoord2(0.0f, 1.0f);<br/>             GL.Vertex3(x, y-height,z);//左下<br/>             GL.End();</p>\n<p><br/>             // GL.DrawPixels(t.bmp.Width, t.bmp.Height, GlPixelFormat.Bgra, PixelType.UnsignedByte,t.pix);</p>\n<p><br/>         }</p>\n<p><br/>         /// &lt;summary&gt;<br/>         /// 获取文字材质<br/>         /// &lt;/summary&gt;<br/>         /// &lt;param name=\"s\"&gt;文字&lt;/param&gt;<br/>         /// &lt;returns&gt;材质对象&lt;/returns&gt;<br/>         private Txture getTxture(String s) {<!-- --><br/>             if (fts.ContainsKey(s)) return fts[s];</p>\n<p>            Txture t = new Txture(s,FontSize,TitleColor);<br/>             fts.Add(s, t);</p>\n<p>            return t;</p>\n<p>        }</p>\n<p>       <br/>         /// &lt;summary&gt;<br/>         /// 创建文字材质，如果有，用现成的，没有就重新绘制<br/>         /// &lt;/summary&gt;<br/>         /// &lt;param name=\"s\"&gt;&lt;/param&gt;<br/>         /// &lt;returns&gt;&lt;/returns&gt;<br/>         private Txture getTexture(String s) {<!-- --></p>\n<p><br/>            <br/>             if (fts.ContainsKey(s)) return fts[s];<br/>             Txture t = new Txture(s, FontSize, TitleColor);<br/>             t.txtureid = LoadTexture(t.bmp);<br/>             fts.Add(s, t);   <br/>             return t;</p>\n<p>        }<br/>         /// &lt;summary&gt;<br/>         /// 把bmp加载到gl材质<br/>         /// &lt;/summary&gt;<br/>         /// &lt;param name=\"bmp\"&gt;&lt;/param&gt;<br/>         /// &lt;returns&gt;&lt;/returns&gt;<br/>         int LoadTexture(Bitmap bmp)<br/>         {<!-- --></p>\n<p>            //new ShowPic().doShow(bmp);</p>\n<p>            int texture;<br/>             GL.Enable(EnableCap.Texture2D);<br/>             GL.GenTextures(1, out texture);<br/>             GL.BindTexture(TextureTarget.Texture2D, texture);<br/>             // GL.TexEnv(TextureEnvTarget.TextureEnv, TextureEnvParameter.TextureEnvMode, (int)TextureEnvMode.Modulate);</p>\n<p><br/>             BitmapData bitmapData1 = bmp.LockBits(<br/>               new Rectangle(0, 0, bmp.Width, bmp.Height),<br/>               ImageLockMode.ReadOnly,<br/>               SysPixelFormat.Format32bppArgb<br/>           );</p>\n<p>            GL.TexImage2D(<br/>                 TextureTarget.Texture2D,<br/>                 0,<br/>                 PixelInternalFormat.Rgba,<br/>                 bitmapData1.Width,<br/>                 bitmapData1.Height,<br/>                 0,<br/>                 GlPixelFormat.Bgra,<br/>                 PixelType.UnsignedByte,<br/>                 bitmapData1.Scan0<br/>             );</p>\n<p>            bmp.UnlockBits(bitmapData1);</p>\n<p><br/>             GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Linear);<br/>             GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMagFilter, (int)TextureMagFilter.Linear);</p>\n<p>            // GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);<br/>             // GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);</p>\n<p>            return texture;<br/>         }</p>\n<p>    }<br/>  </p>\n</div>\n</div>"}