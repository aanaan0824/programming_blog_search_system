{"blogid": "123454677", "writerAge": "码龄2年", "writerBlogNum": "16", "writerCollect": "77", "writerComment": "13", "writerFan": "7", "writerGrade": "2级", "writerIntegral": "201", "writerName": "涩即是Null", "writerProfileAdress": "writer_image\\profile_123454677.jpg", "writerRankTotal": "104680", "writerRankWeekly": "188403", "writerThumb": "30", "writerVisitNum": "22415", "blog_read_count": "8708", "blog_time": "已于 2022-04-19 08:04:57 修改", "blog_title": "什么是转发和重定向", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E8%BD%AC%E5%8F%91%EF%BC%88forward%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E8%BD%AC%E5%8F%91%EF%BC%88forward%EF%BC%89\">一、转发（forward）</a></p>\n<p id=\"1.%20%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:40px;\"><a href=\"#1.%20%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\">1. 实现步骤</a></p>\n<p id=\"%C2%A02.%20%E5%9B%BE%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A02.%20%E5%9B%BE%E8%A7%A3\"> 2. 图解</a></p>\n<p id=\"3.%20%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B-toc\" style=\"margin-left:40px;\"><a href=\"#3.%20%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\">3. 代码示例</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%201.%20%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%201.%20%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91\">        1. 请求转发</a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.%20%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.%20%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%C2%A0\">        2. 共享数据 </a></p>\n<p id=\"%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%203.%20%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%203.%20%E7%BB%93%E6%9E%9C\">        3. 结果</a></p>\n<p id=\"4.%20%E8%BD%AC%E5%8F%91%E7%9A%84%E7%89%B9%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#4.%20%E8%BD%AC%E5%8F%91%E7%9A%84%E7%89%B9%E7%82%B9\">4. 转发的特点</a></p>\n<p id=\"%E2%80%8B%C2%A0%E4%BA%8C%E3%80%81%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%88redirect%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#%E2%80%8B%C2%A0%E4%BA%8C%E3%80%81%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%88redirect%EF%BC%89\">​ 二、重定向（redirect）</a></p>\n<p id=\"1.%20%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:40px;\"><a href=\"#1.%20%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\">1. 实现步骤</a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.%20%E8%AE%BE%E7%BD%AE%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%BA302-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.%20%E8%AE%BE%E7%BD%AE%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%BA302\">        1. 设置状态码为302</a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.%20%E8%AE%BE%E7%BD%AE%E5%93%8D%E5%BA%94%E5%A4%B4-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.%20%E8%AE%BE%E7%BD%AE%E5%93%8D%E5%BA%94%E5%A4%B4\">        2. 设置响应头</a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%E6%B3%A8.%20%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E7%9A%84%E9%87%8D%E5%AE%9A%E5%90%91%E6%96%B9%E6%B3%95%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%E6%B3%A8.%20%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E7%9A%84%E9%87%8D%E5%AE%9A%E5%90%91%E6%96%B9%E6%B3%95%C2%A0\">        注. 一种简单的重定向方法 </a></p>\n<p id=\"2.%20%E5%9B%BE%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#2.%20%E5%9B%BE%E8%A7%A3\">2. 图解</a></p>\n<p id=\"3.%20%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B-toc\" style=\"margin-left:40px;\"><a href=\"#3.%20%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\">3. 代码示例</a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.%20%E7%BC%96%E5%86%99ResponseDemo1%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0ResponseDemo2%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.%20%E7%BC%96%E5%86%99ResponseDemo1%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0ResponseDemo2%E3%80%82\">        1. 编写ResponseDemo1，将请求重定向到ResponseDemo2。</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%202.%20%E7%BC%96%E5%86%99ResponseDemo2%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%87%BA%E4%BF%A1%E6%81%AF%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%202.%20%E7%BC%96%E5%86%99ResponseDemo2%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%87%BA%E4%BF%A1%E6%81%AF%E3%80%82\">        2. 编写ResponseDemo2，直接输出信息。</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%203.%20%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%203.%20%E7%BB%93%E6%9E%9C\">        3. 结果</a></p>\n<p id=\"4.%20%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E7%89%B9%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#4.%20%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E7%89%B9%E7%82%B9\">4. 重定向的特点</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89\">三、转发和重定向的区别（总结）</a></p>\n<hr/>\n<h1>一、转发（forward）</h1>\n<blockquote>\n<p>一种在<strong>服务器内部</strong>的资源跳转方式。</p>\n</blockquote>\n<h2 id=\"1.%20%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\">1. 实现步骤</h2>\n<ol><li>通过request对象获取请求转发器对象：RequestDispatcher，getRequestDispatcher(String path)</li><li>然后使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response)</li></ol>\n<pre><code class=\"language-java\">request.getRequestDispatcher(\"/RequestDemo6\").forward(request,response);</code></pre>\n<p>注意这里是给服务器用，所以不需要获取虚拟目录，即 <span style=\"background-color:#ffd7b9;\">request.getContextPath();</span></p>\n<h2 id=\"%C2%A02.%20%E5%9B%BE%E8%A7%A3\"> 2. 图解</h2>\n<p><img alt=\"\" height=\"990\" src=\"image\\40e9ae31e7c04cfea472e9ac48cd011a.png\" width=\"1200\"/></p>\n<p> 客户端浏览器发送请求到RequestDemo5，RequestDemo5转发请求到RequestDemo6，并且共享request域对象“Ray”。</p>\n<h2 id=\"3.%20%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\">3. 代码示例</h2>\n<h3 id=\"%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%201.%20%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91\">        1. 请求转发</h3>\n<p>         设置一个数据域，并且把它转发到RequestDemo6。</p>\n<pre><code class=\"language-java\">@WebServlet(name = \"RequestDemo5\", value = \"/RequestDemo5\")\npublic class 请求转发 extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        request.setAttribute(\"name\",\"Ray\");\n        request.getRequestDispatcher(\"/RequestDemo6\").forward(request,response);         //给服务器用，路径不需要加虚拟目录\n        System.out.println(\"RequestDemo5被访问了。\");\n    }\n}</code></pre>\n<h3 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.%20%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%C2%A0\">        2. 共享数据 </h3>\n<p>        获取RequestDemo5中的数据域，并打印信息。</p>\n<pre><code class=\"language-java\">@WebServlet(name = \"RequestDemo6\", value = \"/RequestDemo6\")\npublic class 共享数据 extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        Object name = request.getAttribute(\"name\");\n        System.out.println(name);\n        System.out.println(\"RequestDemo6被访问了。\");\n    }\n}</code></pre>\n<h3 id=\"%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%203.%20%E7%BB%93%E6%9E%9C\">        3. 结果</h3>\n<p>    当我们再浏览器下输入<a href=\"http://localhost:8080/Web/RequestDemo5\" title=\"localhost:8080/Web/RequestDemo5\">localhost:8080/Web/RequestDemo5</a>并敲击回车后，可以看到：</p>\n<ol><li>RequestDemo5居然输出了RequestDemo6的 “Ray”。</li><li>RequestDemo6和RequestDemo5同时被访问了，而且是RequestDemo6先被访问到，RequestDemo5被后访问到。</li></ol>\n<p><img alt=\"\" height=\"476\" src=\"image\\0a749662d46d4e7fa4ed4544a82e8789.png\" width=\"1200\"/></p>\n<h2 id=\"4.%20%E8%BD%AC%E5%8F%91%E7%9A%84%E7%89%B9%E7%82%B9\">4. 转发的特点</h2>\n<blockquote>\n<p>        1. 抓包分析后，发现虽然访问到了2个servlet，但是实际上却是<strong>一次请求。</strong></p>\n</blockquote>\n<p><img alt=\"\" height=\"655\" src=\"image\\e06cf6583da1499dbca0d3e9926cb74e.png\" width=\"1200\"/></p>\n<blockquote>\n<p>         2. 当我们把要转发到的资源 /RequestDemo6 换成 www.baidu.com 发现并不能实现转发（404 not found），说明了只能转发到当前服务器<strong>内部资源</strong>中。</p>\n</blockquote>\n<pre><code class=\"language-java\">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        request.setAttribute(\"name\",\"Ray\");\n        request.getRequestDispatcher(\"www.baidu.com\").forward(request,response);         //给服务器用，路径不需要加虚拟目录\n        System.out.println(\"RequestDemo5被访问了。\");\n}</code></pre>\n<p><img alt=\"\" height=\"485\" src=\"image\\2d5320dac04c4f9f8ab04fa6b073ed45.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"372\" src=\"image\\a110ff01758e43b6bec18250fa5ab114.png\" width=\"913\"/></p>\n<blockquote>\n<p>        3. 浏览器地址栏路径不发生变化</p>\n</blockquote>\n<h1 id=\"%E2%80%8B%C2%A0%E4%BA%8C%E3%80%81%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%88redirect%EF%BC%89\"><img alt=\"\" height=\"649\" src=\"image\\5cb405a71e2e4ed58811207698e6cc23.png\" width=\"1200\"/> 二、重定向（redirect）</h1>\n<blockquote>\n<p> 另一种资源跳转的方式。</p>\n</blockquote>\n<h2>1. 实现步骤</h2>\n<h3 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.%20%E8%AE%BE%E7%BD%AE%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%BA302\">        1. 设置状态码为302</h3>\n<pre><code class=\"language-java\">response.setStatus(302);</code></pre>\n<h3 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A02.%20%E8%AE%BE%E7%BD%AE%E5%93%8D%E5%BA%94%E5%A4%B4\">        2. 设置响应头</h3>\n<pre><code class=\"language-java\">response.setHeader(\"location\",\"/Web/responseServletDemo2\");</code></pre>\n<h3 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%E6%B3%A8.%20%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E7%9A%84%E9%87%8D%E5%AE%9A%E5%90%91%E6%96%B9%E6%B3%95%C2%A0\">        注. 一种简单的重定向方法 </h3>\n<pre><code class=\"language-java\">response.sendRedirect(contextPath + \"/responseServletDemo2\");</code></pre>\n<h2 id=\"2.%20%E5%9B%BE%E8%A7%A3\">2. 图解</h2>\n<p><img alt=\"\" height=\"990\" src=\"image\\9ddf7145f93c415a98d840d6cc8fe4b9.png\" width=\"1200\"/></p>\n<h2>3. 代码示例</h2>\n<h3 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01.%20%E7%BC%96%E5%86%99ResponseDemo1%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0ResponseDemo2%E3%80%82\">        1. 编写ResponseDemo1，将请求重定向到ResponseDemo2。</h3>\n<pre><code class=\"language-java\">@WebServlet(name = \"responseServletDemo1\", value = \"/responseServletDemo1\")\npublic class 重定向 extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        System.out.println(\"Demo1!!!\");\n//        response.setStatus(302);                               //设置状态码为302(重定向)\n//        response.setHeader(\"location\",\"/Web/responseServletDemo2\");            // 设置响应头location\n        String contextPath = request.getContextPath();                  //动态获取虚拟目录\n        //简单重定向方法\n        response.sendRedirect(contextPath + \"/responseServletDemo2\");               //给客户端用，需要加虚拟目录\n    }\n}</code></pre>\n<p><span style=\"color:#fe2c24;\">        注意：这里给客户端使用，需要加虚拟目录。即  request.getContextPath();</span></p>\n<h3 id=\"%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%202.%20%E7%BC%96%E5%86%99ResponseDemo2%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%87%BA%E4%BF%A1%E6%81%AF%E3%80%82\">        2. 编写ResponseDemo2，直接输出信息。</h3>\n<pre><code class=\"language-java\">@WebServlet(name = \"responseServletDemo2\", value = \"/responseServletDemo2\")\npublic class 重定向Demo extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        System.out.println(\"Demo2!!!!\");\n    }\n}</code></pre>\n<h3>        3. 结果</h3>\n<p>当我们输入<a href=\"http://localhost:8080/Web/responseServletDemo2\" title=\"localhost:8080/Web/responseServletDemo1\">localhost:8080/Web/responseServletDemo1</a> 敲击回车发现浏览器地址会瞬间变成</p>\n<p><a href=\"http://localhost:8080/Web/responseServletDemo2\" title=\"localhost:8080/Web/responseServletDemo2  \">localhost:8080/Web/responseServletDemo2  </a> ，抓包分析发现浏览器一共发送了2次请求。</p>\n<p><img alt=\"\" height=\"787\" src=\"image\\41a7d992002744598ea1f42e5e7e3b88.png\" width=\"1200\"/></p>\n<p> 回到输出窗口，发现ResponseDemo1和ResponseDemo2的信息都被输出了。</p>\n<p><img alt=\"\" height=\"366\" src=\"image\\fc316ae6381a4616be3714f60bbbf0c0.png\" width=\"927\"/></p>\n<h2 id=\"4.%20%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E7%89%B9%E7%82%B9\">4. 重定向的特点</h2>\n<ol><li>地址栏发生变化</li><li>重定向可以访问其他站点(服务器)的资源</li><li>重定向是两次请求。不能使用request对象来共享数据</li></ol>\n<h1 id=\"%E4%B8%89%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89\">三、转发和重定向的区别（总结）</h1>\n<blockquote>\n<ol><li><strong><span style=\"background-color:#ffd7b9;\">转发的地址栏不变，而重定向变成转发后的资源。</span></strong></li><li><strong><span style=\"background-color:#ffd7b9;\">转发是一次请求，而重定向是两次请求。所以一般可以说重定向是2次转发。</span></strong></li><li><strong><span style=\"background-color:#ffd7b9;\">转发只能在自己内部服务器资源内相互转发，而重定向可以访问其他站点。</span></strong></li></ol>\n</blockquote>\n<h1></h1>\n<p></p>\n</div>\n</div>"}