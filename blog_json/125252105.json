{"blogid": "125252105", "writerAge": "码龄4年", "writerBlogNum": "80", "writerCollect": "74", "writerComment": "9", "writerFan": "36", "writerGrade": "4级", "writerIntegral": "845", "writerName": "CairBin", "writerProfileAdress": "writer_image\\profile_125252105.jpg", "writerRankTotal": "22108", "writerRankWeekly": "10147", "writerThumb": "21", "writerVisitNum": "42420", "blog_read_count": "1933", "blog_time": "已于 2022-08-04 14:07:20 修改", "blog_title": "C++元组(tuple)类型", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Ctuple_0\"></a>C++元组tuple类型</h1>\n<h2><a id=\"_4\"></a>介绍</h2>\n<p><strong>元组tuple</strong>是C++的一个模板，不同tuple类型的成员类型也不相同，但是一个tuple可以有任意数量的成员。</p>\n<p>每个tuple类型的成员个数是<strong>一定的</strong>，但是不同的tuple成员个数可以不同。</p>\n<h2><a id=\"tuple_10\"></a>tuple的定义及初始化</h2>\n<p>使用tuple要引入tuple头文件</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tuple&gt;</span></span>\n</code></pre>\n<p>tuple定义以及初始化（我们这里以成员类型为int、string、vector为例子）</p>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> test<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello,world\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>当然也可以使用它的构造函数进行初始化</p>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello,world\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>存在这种情况，表面上看起来没有进行任何初始化操作，但实际上利用了不带参数的默认构造函数</p>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span>size_t<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//每个成员的值为0</span>\n</code></pre>\n<p>当然如果你这样定义后，又想对test的初始值所作更改，可以这样写，如下所示。（实际上现在的test不是原来的test，它被你新创建的tuple对象所替代了，严格意义来讲并不算是初始化）</p>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span>size_t<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//每个成员的值为0</span>\ntest <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">tuple</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>size_t<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//第一个成员的值为1，第二个成员的值为2</span>\n</code></pre>\n<p>另外标准库定义了make_tuple函数来生成tuple对象，我们可以用auto关键字来推测生成的tuple的类型</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">auto</span> test2 <span class=\"token operator\">=</span> <span class=\"token function\">make_tuple</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wasd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果要添加一个vector作为成员，则情况如下</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//错误写法</span>\n<span class=\"token keyword\">auto</span> test2 <span class=\"token operator\">=</span> <span class=\"token function\">make_tuple</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wasd\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//正确写法</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> test2 <span class=\"token operator\">=</span> <span class=\"token function\">make_tuple</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wasd\"</span><span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"tuple_69\"></a>tuple的使用</h2>\n<h3><a id=\"_71\"></a>成员访问</h3>\n<p>说起tuple的使用，最能直接想到的自然是对tuple的访问了。</p>\n<p>在C++标准库里，有一个名为get的函数模板。为了使用get，我们必须指定一个<strong>显式模板实参</strong>来指示访问的第几个成员，并在函数参数中给予它一个tuple对象。</p>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> test<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello,world\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//打印test第一个成员，其类型为int</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//打印test第二个成员，其类型为string</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//打印test第三个成员vector&lt;int&gt;的第一个元素</span>\n</code></pre>\n<p>下面是返回结果</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1</span>\nhello<span class=\"token punctuation\">,</span>world\n<span class=\"token number\">4</span>    \n</code></pre>\n<h3><a id=\"tuple_92\"></a>获取tuple信息</h3>\n<p>可用以下方法获取tuple元素个数</p>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;&gt;</span> test<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"456\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取tuple成员个数</span>\nsize_t num <span class=\"token operator\">=</span> tuple_size<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//利用tuple某个成员类型来声明变量（以第0个成员为例）</span>\ntuple_element<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>type n <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"tuple_104\"></a>拼接tuple</h3>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//拼接</span>\n<span class=\"token keyword\">auto</span> new_tup <span class=\"token operator\">=</span> <span class=\"token function\">tuple_cat</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">,</span> test2<span class=\"token punctuation\">,</span> test3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"tuple_115\"></a>交换tuple</h3>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//交换</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"tuple_125\"></a>tuple解包</h3>\n<p>tuple使用tie方法进行解包，<strong>tie的参数个数与tuple成员个数一致，否则要用ignore占位</strong></p>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test2<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//解包</span>\n<span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//ignore占位的情况</span>\n<span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> ignore<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> test2<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"tuple_144\"></a>tuple比较</h3>\n<p>当两个tuple具有相同数目的成员，且对应成员类型可比较的时候，tuple比较才合法</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//有如下四个tuple</span>\ntuple<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test2<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test3<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test4<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntest <span class=\"token operator\">==</span> test2<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//报错，string与int类型不能比较</span>\ntest2 <span class=\"token operator\">&lt;</span> test3<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//报错，test2与test3成员数量不同</span>\ntest3 <span class=\"token operator\">&lt;</span> test4<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//正确，该语句值为True</span>\n</code></pre>\n<p>tuple比较方式是对应位置比较，如果该位置值不相等，则<strong>返回</strong>当前位置的值的比较结果，不再继续进行比较；如果值相等则继续比较下一个位置</p>\n<pre><code class=\"prism language-cpp\">tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>test5<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>test6<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntest5 <span class=\"token operator\">&lt;</span> test6  <span class=\"token comment\">//正确，1与2不相等，直接返回1&lt;2比较结果true，不比较4和3</span>\n</code></pre>\n<h3><a id=\"tuple_169\"></a>tuple遍历</h3>\n<p>tuple没有迭代器，其遍历非常麻烦，其设计目的也不在于此（如果项目开发过程中要对某一数据结构进行遍历该数据结构应尽量避免为tuple类型，完全可以用list代替）</p>\n<p>但此处还是给出遍历的方法(不推荐使用)</p>\n<p>本方法来自<a href=\"https://zhuanlan.zhihu.com/p/71929922\">C++Tuple元组的详细用法 - 知乎 (zhihu.com)</a></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tuple&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tuple</span><span class=\"token punctuation\">,</span> size_t N<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PrintTuple</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Tuple<span class=\"token operator\">&amp;</span> Value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">PrintTuple</span><span class=\"token operator\">&lt;</span>Tuple<span class=\"token punctuation\">,</span> N <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>N <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tuple</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PrintTuple</span><span class=\"token operator\">&lt;</span>Tuple<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Tuple<span class=\"token operator\">&amp;</span> Value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t     cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintfMyTuple</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> tuple<span class=\"token operator\">&lt;</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> vlaue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token class-name\">PrintTuple</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>vlaue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>vlaue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ttuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintfMyTuple</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"tuple_221\"></a>tuple开发时的应用</h2>\n<p>在项目开发时，如果我们想让一个函数返回多个不同类型的值的话可以使用tuple。</p>\n<p>至于其他情况有待探索。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}