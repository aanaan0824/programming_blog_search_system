{"blogid": "121417408", "writerAge": "码龄2年", "writerBlogNum": "107", "writerCollect": "228", "writerComment": "16", "writerFan": "177", "writerGrade": "4级", "writerIntegral": "1403", "writerName": "Snakin_ya", "writerProfileAdress": "writer_image\\profile_121417408.jpg", "writerRankTotal": "20854", "writerRankWeekly": "41457", "writerThumb": "306", "writerVisitNum": "131366", "blog_read_count": "2366", "blog_time": "于 2021-11-19 10:43:52 发布", "blog_title": "Thinkphp5.0.0~5.0.23 RCE漏洞复现分析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"image-20211117223456251\" src=\"image\\73d4c0c4985789a08e3e27a0e3d70f8c.png\"/></p>\n<h2><a id=\"_2\"></a>漏洞概要</h2>\n<p>漏洞存在于 <strong>ThinkPHP</strong> 底层没有对控制器名进行很好的合法性校验，导致在未开启强制路由的情况下，用户可以调用任意类的任意方法，最终导致 <strong>远程代码执行漏洞</strong> 的产生。</p>\n<h2><a id=\"_6\"></a>环境搭建：</h2>\n<p><strong>Phpstudy：</strong></p>\n<ul><li>OS: <code>Windows</code></li><li>PHP: <code>7.3.4</code></li><li>ThinkPHP: <code>5.0.22</code></li></ul>\n<h2><a id=\"POC_14\"></a>POC</h2>\n<pre><code>http://xxxxxx.xxx/public/?s=captcha\n\nBody\n_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami\n_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=whoami\n</code></pre>\n<h2><a id=\"_24\"></a>复现分析</h2>\n<h3><a id=\"POC_1_26\"></a>POC 1</h3>\n<p><img alt=\"image-20211118172356063\" src=\"image\\7f463dc6a5e2173f0d576eca97036045.png\"/></p>\n<p>调试分析，Thinkphp的程序是从<code>App.php</code>开始的，在<code>App::run</code>中，先通过<code>$dispatch = self::routeCheck($request, $config);</code>对路由进行检测</p>\n<p><img alt=\"image-20211118164531151\" src=\"image\\19680c6726df4ce5f5dc1eb7f917b358.png\"/></p>\n<p>在该方法中，又调用了<code>Route::check</code>方法，跟进</p>\n<p><img alt=\"image-20211118164903693\" src=\"image\\63f66fdaf743aeb7c84309c02674bf35.png\"/></p>\n<p>存在<code>$method = strtolower($request-&gt;method());</code>,跟进<code>method</code>方法，进入了<code>Request.php</code></p>\n<p><img alt=\"image-20211118165239755\" src=\"image\\c254363baf790595f9a8039eb94e9eb3.png\"/></p>\n<p>默认<code>$method = false</code>时进入分支条件</p>\n<p>注意到：<code>$this-&gt;method = strtoupper($_POST[Config::get('var_method')]);</code></p>\n<p>这里的<code>var_method</code>对应<code>_method</code>，在<code>Config.php</code>中</p>\n<p><code>$method</code>来自可控的 <code>$_POST</code>数组，而且在获取之后没有进行任何检查，直接把它作为 <strong>Request</strong> 类的方法进行调用，同时，该方法传入的参数是可控数据 <code>$_POST</code> 。也就相当于可以随意调用 <strong>Request</strong> 类的部分方法。</p>\n<p>我们传入的参数：<code>_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</code></p>\n<p>它会调用<code>__construct</code>方法，而该方法中有类属性覆盖功能</p>\n<p><img alt=\"image-20211118174942348\" src=\"image\\0dfc849385c06d6c7bb6bd8ed6614470.png\"/></p>\n<p>那么在结束method方法时，我们需要返回参数<code>$this-&gt;method</code>为get</p>\n<p><img alt=\"image-20211118163556291\" src=\"image\\7d46b91d303fb84e97087f7a941832cc.png\"/></p>\n<p>继续分析</p>\n<p><img alt=\"image-20211118225550588\" src=\"image\\47e55757da3812b0b4af94ec9dce9096.png\"/></p>\n<p>进入了exec方法，<code>?s=captcha</code>就可以让<code>$dispatch['type']</code>是method</p>\n<blockquote>\n<p>在 ThinkPHP5 完整版中，定义了验证码类的路由地址。程序在初始化时，会通过自动类加载机制，将 vendor 目录下的文件加载，这样在 GET 方式中便多了这一条路由。我们便可以利用这一路由地址，使得 <code>$dispatch['type']</code>等于 method ，从而完成 远程代码执行 漏洞。</p>\n</blockquote>\n<p>进入<code>Request::instance()-&gt;param()</code></p>\n<p><img alt=\"image-20211118230712251\" src=\"image\\4d4244371b7b9b19c3bdf090796bf41c.png\"/></p>\n<p><img alt=\"image-20211118230837911\" src=\"image\\0e1bb8447395651abf0f19610741ba3a.png\"/></p>\n<p><code>$this-&gt;param</code>通过<code>array_merge</code>将当前请求参数和URL地址中的参数合并。</p>\n<p>跟进get方法</p>\n<p><img alt=\"image-20211118231215186\" src=\"image\\ddf7a2867681478b8c6ab4b1404e03bd.png\"/></p>\n<p>由于之前的变量覆盖get有值</p>\n<p><img alt=\"image-20211118232034784\" src=\"image\\511eef2252ec67a0be8e07b8a46616a3.png\"/></p>\n<p>所以会进入<code>input</code>方法</p>\n<p><img alt=\"image-20211118232333297\" src=\"image\\2a6932007f9d70d2cdea6d5d7db69a0b.png\"/></p>\n<p>它返回了get数组值，而<code>$this-&gt;param</code>也会有值</p>\n<p><img alt=\"image-20211118232755497\" src=\"image\\62f6c2716771a8afbe3c44539d3144b1.png\"/></p>\n<p>接着我们再次进入input方法</p>\n<p><img alt=\"image-20211118232920377\" src=\"image\\2da9318740290b75838b330c64320163.png\"/></p>\n<p>进入解析过滤器</p>\n<p><img alt=\"image-20211118233244683\" src=\"image\\ac39f9c3257028523131592e01c69c21.png\"/></p>\n<p>发现是通过<code>$filter</code>参数获取的方法，由之前的变量覆盖</p>\n<p><img alt=\"image-20211118233508379\" src=\"image\\b7c9bc7ac8450320e3b0a65a859dff07.png\"/></p>\n<p>那么<code>array_walk_recursive($data, [$this, 'filterValue'], $filter);</code>会调用<code>filterValue</code>方法</p>\n<p><img alt=\"image-20211118234154433\" src=\"image\\d60dbac57d8734f81cdc066de4ccef0c.png\"/></p>\n<p>之后就通过回调函数进行RCE</p>\n<p>该调用链的payload：</p>\n<pre><code>http://xxxxxx.xxx/public/?s=captcha\nPOST:\n_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami\n</code></pre>\n<h3><a id=\"POC_2_120\"></a>POC 2</h3>\n<p><img alt=\"image-20211119000336365\" src=\"image\\6d9058ff9e61dca53153d5d9b16195d2.png\"/></p>\n<p><img alt=\"image-20211118234630188\" src=\"image\\96abc4ecaf462d851366ef5fefbdad32.png\"/></p>\n<p>跟进一下<code>method()</code>方法，这里的<code>$method</code>是true：</p>\n<p><img alt=\"image-20211118235037615\" src=\"image\\723d1b2e19f05d583241682358806240.png\"/></p>\n<p>继续跟进<code>server</code>方法</p>\n<p><img alt=\"image-20211118235123426\" src=\"image\\caa86d70b94c87f6b4410199efb23799.png\"/></p>\n<p>这里也有input方法</p>\n<pre><code>return $this-&gt;server('REQUEST_METHOD') ?: 'GET';\n</code></pre>\n<p>这里的name为<code>REQUEST_METHOD</code>,第一个参数<code>$this-&gt;server</code>可以利用之前<code>__construct()</code>方法进行属性覆盖，设置<code>server[REQUEST_METHOD]=whoami</code>，之后会调用到<code>getFilter()</code>，于是分析思路和上一个相似，最终调用回调函数进行RCE</p>\n<h2><a id=\"_142\"></a>总结</h2>\n<p>来自一位师傅：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210212193530735.jpg\"/></p>\n<p>该复现过程基本是跟着Y4师傅来的，很多地方现在理解也不是很清楚，希望以后能继续完善吧!</p>\n<p>继续努力！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}