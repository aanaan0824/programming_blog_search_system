{"blogid": "125003188", "writerAge": "码龄1年", "writerBlogNum": "102", "writerCollect": "2405", "writerComment": "4050", "writerFan": "11757", "writerGrade": "7级", "writerIntegral": "9273", "writerName": "乔乔家的龙龙", "writerProfileAdress": "writer_image\\profile_125003188.jpg", "writerRankTotal": "1535", "writerRankWeekly": "600", "writerThumb": "3100", "writerVisitNum": "141749", "blog_read_count": "1011", "blog_time": "已于 2022-06-05 17:23:11 修改", "blog_title": "Linux 基本指令 Pt.2", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#_2\">传统艺能😎</a></li><li><a href=\"#_25\">感性理解🤔</a></li><li><a href=\"#man__32\">man 指令🤔</a></li><li><a href=\"#cp__60\">cp 指令🤔</a></li><li><a href=\"#mv__67\">mv 指令🤔</a></li><li><a href=\"#cat__85\">cat 指令🤔</a></li><li><a href=\"#moreless__95\">more/less 指令🤔</a></li><li><a href=\"#_104\">输出重定向🤔</a></li><li><a href=\"#headtail__114\">head/tail 指令🤔</a></li><li><ul><li><a href=\"#_122\">管道🎉</a></li></ul>\n</li><li><a href=\"#date__129\">date 指令🤔</a></li><li><a href=\"#cal__137\">cal 指令🤔</a></li><li><a href=\"#find__141\">find 指令🤔</a></li><li><a href=\"#grep__146\">grep 指令🤔</a></li><li><a href=\"#zip__167\">zip 指令🤔</a></li><li><a href=\"#tar__197\">tar 指令🤔</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_2\"></a>传统艺能😎</h2>\n<p>小编是双非本科大一菜鸟不赘述，欢迎大佬指点江山（QQ：1319365055）<br/> 此前博客<a href=\"https://blog.51cto.com/\">点我！点我！请搜索博主 【知晓天空之蓝】</a></p>\n<p><mark>🎉🎉非科班转码社区诚邀您入驻🎉🎉</mark><br/> 小伙伴们，打码路上一路向北，背后烟火，彼岸之前皆是疾苦<br/> <mark>一个人的单打独斗不如一群人的砥砺前行</mark><br/> 这是我和梦想合伙人组建的社区，诚邀各位有志之士的加入！！<br/> 社区用户好文均加精（“标兵”文章字数2000+加精，“达人”文章字数1500+加精）<br/> 直达： <a href=\"https://bbs.csdn.net/forums/FKBZM?typeId=22226\">社区链接点我</a></p>\n<p>🎉🎉🎉<font color=\"orange\" size=\"5\">倾力打造转码社区微信公众号🎉🎉🎉<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d5a1afe7c7c2424184a62535a1ab2fb2.png\"/></font></p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\abbd251e984e49a48422c5b79507487a.png\"/><br/> 大家应该都知道，我们打开浏览器随便打开一个网站，再从网页里面点进任何一个个体，我们从现在网址栏复制下来的访问地址就是我们常说的 url，比如我找到 b 站一个视频：</p>\n<blockquote>\n<p>https://www.bilibili.com/video/BV1u54y1Z7Wg?spm_id_from=333.851.b_7265636f6d6d656e64.1</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\42a950a41cb241278084b612c8b31488.png\"/><br/> 那么这个视频 url 域名后面的一大坨是什么呢？我们说过 Linux 文件路径我们有路径分隔符，发现他和网址的 url 分隔符是一样的，其实网址靠后端维护，稍稍能看出来<mark>企业的后端是 Linux 操作系统！</mark></p>\n<h2><a id=\"_25\"></a>感性理解🤔</h2>\n<p><mark>Linux 下一切皆文件</mark>，这句话你是否有很多问号？</p>\n<p>这就是一个 Linux 的感性理解，Linux 的设计哲学就认为所有的东西都可以被当成文件，我们能所见的键盘，硬盘，显示器，网卡都会被当成文件。这个世界很复杂，有好就有坏，不管你是乐天派还是觉得错的是这个世界，过去说过世上一切皆浮云，按照这个标准那么看待事物的方式就会变得简单，这就意味着我们可以用同一套方法来解决所有的问题。</p>\n<p>Linux 的浮云就是文件，好处就是可以以同样的方式看待这些设备，当然这些设备在冯诺依曼体系下都被称为外设，说白了除了CPU和内存其他的基本上都是内设。</p>\n<h2><a id=\"man__32\"></a>man 指令🤔</h2>\n<p>man命令是Linux下最核心的命令之一， 而 man 也并不是英文单词 “man” 的意思——男人，它是单词 manual 的缩写，即使用手册的意思<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3728fcc96fab478c82c50f35c080c863.png\"/></p>\n<p>man命令会列出一份完整的说明，其内容包括命令语法、选项的意义及相关命令 ，更为强大的是，不仅可以查看 Linux 中命令的使用帮助，还可以查看软件服务配置文件、系统调用、库函数等帮助信息 。</p>\n<p>Linux 的命令有很多参数，不可能全部记住，我们可以通过查看联网手册获取帮助，这就可以用到 Linux 手册页的访问语法——man 语法：</p>\n<blockquote>\n<p>man [选项] + 命令参数</p>\n</blockquote>\n<p>常见指令比如：</p>\n<blockquote>\n<p>-a：在所有的man帮助手册中搜索；<br/> -f：等价于whatis指令，显示给定关键字的简短描述信息；<br/> -P：指定内容时使用分页程序；<br/> -M：指定man手册搜索的路径。</p>\n</blockquote>\n<p>比如我们查一个 printf：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8c87eebf4cf94d3181e2612328279591.png\"/><br/> 还意外的发现 printf 是一个指令并不是函数，他可以在 Linux 中直接使用。因为 Linux 是C语言写的，man 既能查命令也能查函数，只需要在 printf 前加一个 3 ，就能查到C语言下的 printf 函数。那么问题来了，man 后面这个数字啥意思呢？这时候我们就可以来一手典中典的 man man 来看看 man 怎么用。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7b1be5c679254e10af65d8c9131ecbb0.png\"/><br/> 这些就是提供的接口，也就是9种不同的手册，<font color=\"blue4\" size=\"4\">我们 1 对应可执行程序手册，也就是 1 查指令；2 是系统调用手册，能查到功能； 3 对应库调用手册，所以跟 3 能查到 printf 的C语言定义。当 man 没有选项时默认为手册 1，<font color=\"0\" size=\"3\">最常用的就是前三个手册了，记住就行。</font></font></p>\n<p>如果没有 man，执行：</p>\n<pre><code class=\"prism language-c\">yum install <span class=\"token operator\">-</span>y man<span class=\"token operator\">-</span>pages\n</code></pre>\n<h2><a id=\"cp__60\"></a>cp 指令🤔</h2>\n<p>cp 指令即拷贝指令，类似于 win 中的复制粘贴功能，比如进行文件拷贝，我将 new.txt 里面的内容拷到 new2.txt 里面：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8c124f667d1c419db0c7c7f2ed45a64c.png\"/><br/> cp 指令也可以进行指定路径的拷贝，如果在拷贝的时候，要拷贝的文件要在当前路径下，两个文件的名称不能一样。默认情况下，我们不允许拷贝目录，如果有硬性需要，就需要借助 -r 选项的递归拷贝。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c33117be5f1841048316419ed1e0ae02.png\"/></p>\n<h2><a id=\"mv__67\"></a>mv 指令🤔</h2>\n<p>mv 也是重要指令，他的主要功能有两个，<mark>一是剪切功能</mark>，比如我想将一个文件剪切移动到该目录下另一个目录里面，也可以剪切目录。</p>\n<pre><code class=\"prism language-c\">mv 文件名 目录名\n</code></pre>\n<p>这里我将 dir 目录下的 new2.txt 移动到了新建的 dir2 目录下</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\11aeaee012e74e7cb814beff2e5362ee.png\"/><br/> <mark>二是重命名功能</mark>，我们可以利用如下格式</p>\n<pre><code class=\"prism language-c\">mv 原文件名 新文件名\n</code></pre>\n<p>在原来的位置进行原地重命名，同理也可以堆目录进行重命名。</p>\n<p>mv 常用选项有 -f 和 -i，-f 我们说过是强制性命令直接进行覆盖，而 -i 是如果目标文件存在时，就会询问是否进行覆盖，默认参数是 -f。<font color=\"orange\" size=\"4\">还是那句话，Linux 里面不要轻易删除或者覆盖一个文件，因为 Linux 并没有回收站。</font></p>\n<h2><a id=\"cat__85\"></a>cat 指令🤔</h2>\n<p>我们其实一开始就使用了这个指令了，他的作用就是打印文件内容，比较适合查看短文本和代码，他也是可以带参数的：</p>\n<blockquote>\n<p>-n ：由 1 开始对所有输出的行数编号。<br/> -b ：和 -n 相似，只不过对于空白行不编号。<br/> -s ：当遇到有连续两行以上的空白行，就代换为一行的空白行。</p>\n</blockquote>\n<p>cat 后面在不加文件名的时候，默认会从键盘进行标准输入与输出。</p>\n<p>既然他时候短文本，那长文本咋办呢？他其实是可以展现出来的，但不会像在 vim 或者 nano 编辑器里面一样从开头供你随意查看，但是 cat 出来的第一眼永远是尾巴上的那几行文本，结论就是 cat 并不适合长文本。</p>\n<h2><a id=\"moreless__95\"></a>more/less 指令🤔</h2>\n<p>他俩的作用是对于文本的显示，more 是进行行数的升序呈现，一个 100 行的文本，先出现在眼前的是开头开始的几行，而 less 是降序，从尾巴开始显示，键盘上下键支持文本页面上下翻。</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">more</span><span class=\"token punctuation\">(</span>less<span class=\"token punctuation\">)</span> 文件名\n</code></pre>\n<p>那么问题来了，我们为什么会去使用这两个命令呢？其主要用途就是进行查看日志。</p>\n<h2><a id=\"_104\"></a>输出重定向🤔</h2>\n<pre><code class=\"prism language-c\">echo “hello world” <span class=\"token operator\">&gt;</span> new<span class=\"token punctuation\">.</span>txt\n</code></pre>\n<p>这句代码的意思就是将 “hello world” 写入 new.txt ，这里的 &gt; 就是<mark>输出重定向</mark>，就是指本来应该写入到显示器的内容把他写入到文件中 ，<mark>重点在于他会清空原来文件的内容，进行重新写入</mark>，这是如果想要不清空原来文件内容，就使用双大于符号，&gt;&gt; 被称为<mark>追加重定向</mark>：</p>\n<pre><code class=\"prism language-c\">echo “hello world” <span class=\"token operator\">&gt;&gt;</span> new<span class=\"token punctuation\">.</span>txt\n</code></pre>\n<h2><a id=\"headtail__114\"></a>head/tail 指令🤔</h2>\n<p>head，tail 是分别查看头，尾开始的正数 n 行和倒数 n 行的指令</p>\n<blockquote>\n<p>head -num 文件名<br/> tail -num 文件名</p>\n</blockquote>\n<p>那如果我想要取中间的区间怎么办呢？可以用临时文件+ head 先取出右区间范围，再使用 tail 取到左区间来取出这个区间，当然这样是比较麻烦的，我们还有更聪明的方法——<mark>管道</mark>。</p>\n<h3><a id=\"_122\"></a>管道🎉</h3>\n<p>计算机世界里面的资源就是数据，就相当于世界的是由一样，这个管道和现实世界是一样的，有人去放入数据有人去拿出数据，他就是一个传输数据资源的载体</p>\n<blockquote>\n<p>管道是一种单向通信的方式，一般用于进程间通信，在零拷贝时也会用到管道。管道本质上是一个文件，一个进程读，一个进程写。但是管道本身不占用磁盘或者其他外部存储的空间。在Linux上它占用内存空间。所以管道就是一个操作方式为文件的内存缓冲区。也正是因为管道是内存中的，所以它比使用文件作通信更快。</p>\n</blockquote>\n<p>我们通过组合多条 head 、tail 命令来达到取区间数据，<mark>管道交付的最终意义就是级联多个命令来完成流水线式的数据处理工作</mark>。</p>\n<h2><a id=\"date__129\"></a>date 指令🤔</h2>\n<p>顾名思义，date 指令就是用来显示时间的指令，他原本的输出格式并不方便我们直接阅读，所以我们一般会带上输出格式，一般是：</p>\n<pre><code class=\"prism language-c\">date <span class=\"token operator\">+</span><span class=\"token operator\">%</span>Y<span class=\"token operator\">-</span><span class=\"token operator\">%</span>m<span class=\"token operator\">-</span><span class=\"token operator\">%</span>d_<span class=\"token operator\">%</span>H<span class=\"token operator\">:</span><span class=\"token operator\">%</span>M<span class=\"token operator\">:</span><span class=\"token operator\">%</span>S\n</code></pre>\n<p>Y，m，d，H，M，S 分别代表年月日时分秒的格式。</p>\n<h2><a id=\"cal__137\"></a>cal 指令🤔</h2>\n<p>cal 是Linux的日历功能<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d5f2570daeea453d88d7f4e824954ab6.png\"/></p>\n<h2><a id=\"find__141\"></a>find 指令🤔</h2>\n<p>find 指令是非常重要的，它是 Linux 里面非常常见的文件查找指令，他可以查找指定目录下的指定文件，任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。</p>\n<p>因为目前俺是入门，很多 find 选项还用不到，所以了解一手就行，想深入研究的请自行搜索</p>\n<h2><a id=\"grep__146\"></a>grep 指令🤔</h2>\n<p>grep 是一个行文本过滤指令，即在文件中搜索字符串，将找到的内容打印出来，语法：</p>\n<pre><code class=\"prism language-c\">grep <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span>  要搜索的字符串  文件\n</code></pre>\n<p><font color=\"blue4\" size=\"4\">-i</font></p>\n<p>搜寻的字符串要加上 单引号 ‘ ’ ，而且在查找时该指令是明确了大小写的，<mark>所以如果要默认不区分大小写可以使用选项 -i</mark>，-i 是忽略大小写。</p>\n<p><font color=\"blue4\" size=\"4\">-v</font></p>\n<p>-v 是反向过滤，凡是具有关键字的文本行，全部去掉留下没有匹配的文本行。</p>\n<p>注意 grep 是行处理指令，永远拿到的是一行一行的内容。<br/> <font color=\"blue4\" size=\"4\">总结一下就是：</font></p>\n<blockquote>\n<p>cat命令：将文件内容一次全输出显示在屏幕上。<br/> more命令：分屏显示文件内容，每次只显示一屏，只允许向前浏览。<br/> less命令：与more相似，并且支持向前，向后浏览。</p>\n</blockquote>\n<h2><a id=\"zip__167\"></a>zip 指令🤔</h2>\n<p>zip 命令用于压缩文件，zip 是个使用广泛的压缩程序，压缩后的文件后缀名为 .zip，对应解压指令 unzip。</p>\n<p>比如要将 /home/zip 目录下所有文件和文件夹打包成 zip 格式：</p>\n<pre><code class=\"prism language-c\">zip <span class=\"token operator\">-</span>r test<span class=\"token punctuation\">.</span>zip <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>zip\n</code></pre>\n<p>查看压缩文件中包含的文件：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">unzip</span> <span class=\"token expression\"><span class=\"token operator\">-</span>l abc<span class=\"token punctuation\">.</span>zip </span></span>\nArchive<span class=\"token operator\">:</span> abc<span class=\"token punctuation\">.</span>zip\n Length   Date  Time  Name\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>  <span class=\"token operator\">--</span><span class=\"token operator\">--</span>  <span class=\"token operator\">--</span><span class=\"token operator\">--</span>  <span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n  <span class=\"token number\">94618</span> <span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">21</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">20</span><span class=\"token operator\">:</span><span class=\"token number\">44</span>  a11<span class=\"token punctuation\">.</span>jpg\n  <span class=\"token number\">202001</span> <span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">21</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">20</span><span class=\"token operator\">:</span><span class=\"token number\">44</span>  a22<span class=\"token punctuation\">.</span>jpg\n    <span class=\"token number\">16</span> <span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">22</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">01</span>  <span class=\"token number\">11.</span>txt\n  <span class=\"token number\">46468</span> <span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">23</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span><span class=\"token number\">30</span>  w456<span class=\"token punctuation\">.</span>JPG\n  <span class=\"token number\">140085</span> <span class=\"token number\">03</span><span class=\"token operator\">-</span><span class=\"token number\">14</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">49</span>  my<span class=\"token punctuation\">.</span>asp\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>          <span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n  <span class=\"token number\">483188</span>          <span class=\"token number\">5</span> files\n</code></pre>\n<p>当然他会像所有解压软件一样，默认解压会将目标文件放在默认路径也就是当前目录下，如果想要放在指定地方我们可以带上-d</p>\n<blockquote>\n<p>-d&lt;目录&gt; 指定文件解压缩后所要存储的目录</p>\n</blockquote>\n<p><mark>那我们为什么要打包压缩？</mark></p>\n<ol><li>节约空间</li><li>下载下来的软件是压缩包，曾经提供软件的人，上传的就是压缩包。所有的软件写好后，并不是只有一个文件的，我们压缩是让分化走向统一，方便网络传输和各种部署。</li></ol>\n<h2><a id=\"tar__197\"></a>tar 指令🤔</h2>\n<p>一般一个压缩包分了两个动作：打包和压缩，tar 指令就可以将这两个动作分开，他是用来建立或者还原备份文件的工具程序，它可以加入，解开备份文件内的文件。</p>\n<pre><code class=\"prism language-c\">touch a<span class=\"token punctuation\">.</span>c       \ntar <span class=\"token operator\">-</span>czvf tar<span class=\"token punctuation\">.</span>c test<span class=\"token punctuation\">.</span>c   <span class=\"token comment\">//压缩 test.c 文件为 tar.c</span>\n</code></pre>\n<p>-c 是创建（还原改成 x 即可），-z 是压缩，-f 是在后面输出对应文件名，则解压文件可写成：</p>\n<pre><code class=\"prism language-c\">tar <span class=\"token operator\">-</span>xzvf test<span class=\"token punctuation\">.</span>c \n</code></pre>\n<p>这里要解压缩到指定路径就需要加上 -C 选项即可。</p>\n<p><font color=\"blue4\" size=\"4\">这里只讲了 zip不讲其他的是因为几乎所有种类的压缩包 Linux 都能支持，因为 Linux 面对非常多的平台包括 Windows，Mac 这些个，如果以后遇到后缀 .xxx 的不知道怎么搞，建议直接搜索 “ centos .xxx 文件的解压缩 ”。</font></p>\n<p>今天就到这里了，润了家人们。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}