{"blogid": "126705588", "writerAge": "码龄3年", "writerBlogNum": "177", "writerCollect": "940", "writerComment": "59", "writerFan": "316", "writerGrade": "5级", "writerIntegral": "2527", "writerName": "只爭朝夕不負韶華", "writerProfileAdress": "writer_image\\profile_126705588.jpg", "writerRankTotal": "10069", "writerRankWeekly": "40827", "writerThumb": "184", "writerVisitNum": "145390", "blog_read_count": "122", "blog_time": "于 2022-09-05 15:53:51 发布", "blog_title": "【C# 学习笔记 ②】C#基本语法（数组、判断和循环、字符串、枚举、结构体）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p><font face=\"微软雅黑\" size=\"3\">由于在自己的工作和学习过程中，只查看某个大佬的教程或文章无法满足自己的学习需求和解决遇到的问题，所以自己在追赶大佬们步伐的基础上，又自己总结、整理、汇总了一些资料，方便自己理解和后续回顾，同时也希望给大家带来帮助，所以才写下该篇文章。在本文中，所有参考或引用大佬们文章内容的位置，都附上了原文章链接，您可以直接前往查阅观看。在原文章内容的基础上，若无任何补充内容，同时避免直接大段摘抄大佬们的文章，该情况下也只附上了原文章链接供大家学习。本文旨在总结归纳，并希望给大家提供帮助，未用作任何商用用途。文章内容如有错误之处，望各位大佬指出。如果涉及侵权行为，将会第一时间对文章进行删除。</font></p>\n<hr/>\n<p><font face=\"微软雅黑\" size=\"3\">👉 <a href=\"https://blog.csdn.net/qq_45613931\">个人博客主页</a> 👈</font><br/> <font face=\"微软雅黑\" size=\"3\">📝 一个努力学习的程序猿</font></p>\n<hr/>\n<p><font face=\"微软雅黑\" size=\"3\">🧑👉 本文所在专栏： <a href=\"https://blog.csdn.net/qq_45613931/category_11951371.html\">C# 专栏</a>，欢迎大家前往查看更多内容</font></p>\n<div>\n<br/> 专栏内目前所有文章：\n  <br/> 🚧 不定期持续更新中\n </div>\n<p></p>\n</blockquote>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>C# 学习笔记 ②</h3>\n<ul><li><a href=\"#_12\">数组</a></li><li><a href=\"#___266\">判断 和 循环</a></li><li><a href=\"#_497\">字符串</a></li><li><a href=\"#_623\">枚举</a></li><li><a href=\"#_760\">结构体</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_12\"></a>数组</h1>\n<p>为了更好的说明之后的循环，先总结一下数组内容。对于数组，上篇文章已经有过简单的使用，基础使用如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>数组用来<strong>存储相同数据类型的数据</strong>。如果要使用其中的数据，<strong>使用索引来访问</strong>即可。然后在使用上，我们需要注意以下问题：</p>\n<hr/>\n<p>（1）初始化数组的时候，<strong>必须要给定数组大小</strong>。比如可以用这几种方式给定：</p>\n<p><strong>方法一</strong>：如果此时有确切初始值，那么可以不指定数组大小。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n或者\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>方法二</strong>：如果此时没有确切初始值，那么必须指定数组大小（此时数组中的所有元素都有初始值，初始值根据不同数据类型决定）。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list数组: {0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// list数组: 0</span>\n</code></pre>\n<p>否则报错：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\185b387b267e4ad4997e5dab0da13bcb.png\"/></p>\n<p><strong>方法三</strong>：如果指定数组大小，那么初始值数量必须与数组大小匹配。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list数组: {0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// list数组: 1</span>\n</code></pre>\n<p>否则报错：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8cefd96bcbcb48088b832c1a09814072.png\"/></p>\n<hr/>\n<p>（2）通过以上说明已经得知，数组肯定需要给定大小，所以<strong>使用时需要注意不要越界</strong>，否则报错：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8bae8376b6944ea6b3857b8295fc0454.png\"/></p>\n<hr/>\n<p>（3）如果要使用多维数组：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 索引为 0 的行</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 索引为 1 的行</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 索引为 2 的行</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list数组: {0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// list数组: 5</span>\n</code></pre>\n<p>注意，依然需要和使用一维数组一样，<strong>在初始化的时候给定数组大小</strong>，在这里不详细举例了。其中 <code>new int[3,4]</code> 意味着这是一个 三行四列 的二维数组，使用的索引还是需要从 0 起。</p>\n<p>其他和数组相关的内容，为了避免大篇幅引用，感兴趣的话请您自行前往查阅：</p>\n<p>交错数组：<br/> <a href=\"https://www.runoob.com/csharp/csharp-jagged-arrays.html\">https://www.runoob.com/csharp/csharp-jagged-arrays.html</a></p>\n<p>参数数组：<br/> <a href=\"https://www.runoob.com/csharp/csharp-param-arrays.html\">https://www.runoob.com/csharp/csharp-param-arrays.html</a></p>\n<hr/>\n<p>和其他语言一样，最后再总结一下<strong>数组常用的属性和方法</strong>。</p>\n<p>在上篇文章里有提到过，在代码第一行中的 <code>using System;</code> ，就是用来引入 <code>System</code> 命名空间。而这个 <code>System</code> 命名空间中，就有着所有 <code>.net</code> 基础类型和通用类型。而所有数组的基类 Array 也是在 <code>System</code> 命名空间中定义的，Array 类提供了这些用于数组的属性和方法。</p>\n<p>常用属性【表格转自菜鸟教程】：</p>\n<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>IsFixedSize</td><td>获取一个值，该值指示数组是否带有固定大小</td></tr><tr><td>IsReadOnly</td><td>获取一个值，该值指示数组是否只读</td></tr><tr><td>Length</td><td>获取一个 32 位整数，该值表示所有维度的数组中的元素总数</td></tr><tr><td>LongLength</td><td>获取一个 64 位整数，该值表示所有维度的数组中的元素总数</td></tr><tr><td>Rank</td><td>获取数组的秩（维度）</td></tr></tbody></table>\n<p>代码演示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 1、IsFixedSize 获取一个值，该值指示数组是否带有固定大小</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>IsFixedSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// True</span>\n\n            <span class=\"token comment\">// 2、IsReadOnly 获取一个值，该值指示数组是否只读</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>IsReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// False</span>\n\n            <span class=\"token comment\">// 3、Length 获取一个 32 位整数，该值表示所有维度的数组中的元素总数</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n            <span class=\"token comment\">// 4、LongLength 获取一个 64 位整数，该值表示所有维度的数组中的元素总数</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>LongLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n            <span class=\"token comment\">// 5、Rank 获取数组的秩（维度）</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>Rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\">True\nFalse\n<span class=\"token number\">3</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">1</span>\n</code></pre>\n<hr/>\n<p><strong>常用方法</strong>【表格转自菜鸟教程】：</p>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Clear(Array, Int32, Int32)</td><td>根据元素的数据类型，将 Array 中第一个 Int32 索引开始，其后第二个 Int32 数量的元素，设置为零、false 或 null。括号内参数均为必填项。</td></tr><tr><td>Copy(Array, Array, Int32)</td><td>从第一个 Array 的第一个元素开始复制到 Int32 长度的元素到第二个 Array 的第一个元素位置。括号内参数均为必填项。</td></tr><tr><td>GetLength(Int32)</td><td>获取一个 32 位整数，该值表示指定 Int32 维度的数组中的元素总数。括号内参数均为必填项。</td></tr><tr><td>GetLongLength(Int32)</td><td>获取一个 64 位整数，该值表示指定 Int32 维度的数组中的元素总数。括号内参数均为必填项。</td></tr><tr><td>GetLowerBound(Int32)</td><td>获取数组中指定 Int32 维度的下界。括号内参数均为必填项。</td></tr><tr><td>GetType</td><td>获取当前实例的类型。</td></tr><tr><td>GetUpperBound(Int32)</td><td>获取数组中指定 Int32 维度的上界。括号内参数均为必填项。</td></tr><tr><td>GetValue(Int32)</td><td>获取一维数组中 Int32 索引位置的值。括号内参数均为必填项。</td></tr><tr><td>IndexOf(Array, Object)</td><td>搜索指定的对象（内容），返回整个一维数组 Array 中第一次出现该对象（内容）的索引。括号内参数均为必填项。</td></tr><tr><td>Reverse(Array)</td><td>逆转整个一维数组 Array 中元素的顺序。括号内参数均为必填项。</td></tr><tr><td>SetValue(Object, Int32)</td><td>给一维数组中指定 Int32 位置的元素设置 Object 值。括号内参数均为必填项。</td></tr><tr><td>Sort(Array)</td><td>使用数组的每个元素的 IComparable 实现来排序整个一维数组中的元素。括号内参数均为必填项。</td></tr></tbody></table>\n<p>代码演示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 6、Clear(Array, Int32, Int32)</span>\n            Array<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 0 6</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 7、Copy(Array, Array, Int32) </span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> copyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            Array<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> copyList<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token keyword\">in</span> copyList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 0 6</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 8、GetLength(Int32)</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n            <span class=\"token comment\">// 9、GetLongLength(Int32)</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">GetLongLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n            <span class=\"token comment\">// 10、GetLowerBound(Int32)</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">GetLowerBound</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n            <span class=\"token comment\">// 11、GetType</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// System.Int32[]</span>\n\n            <span class=\"token comment\">// 12、GetUpperBound(Int32)</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">GetUpperBound</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n            <span class=\"token comment\">// 13、GetValue(Int32)</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n\n            <span class=\"token comment\">// 14、IndexOf(Array, Object)</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n            <span class=\"token comment\">// 15、Reverse(Array)</span>\n            Array<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6 0 4</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 16、SetValue(Object, Int32)</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n\n            <span class=\"token comment\">// 17、Sort(Array)</span>\n            Array<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 4 10</span>\n            <span class=\"token punctuation\">}</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">4</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">0</span>\nSystem<span class=\"token punctuation\">.</span>Int32<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">10</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">10</span>\n</code></pre>\n<p>需要注意的就是，以上一部分方法只能对一维数组使用，且有的操作会直接影响原数组，比如：Clear、Reverse、Sort 等等。如果不想改变原数组，那就可以用 Copy 复制一份。</p>\n<hr/>\n<h1><a id=\"___266\"></a>判断 和 循环</h1>\n<p>判断和循环是十分常用的用法，和其他语言很类似，在这里就不过多说明了。展示一下相关使用：</p>\n<hr/>\n<p><strong>（1）if 语句：</strong></p>\n<p>代码：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的 num 值是 {0}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num 大于等于 10，小于 20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num 小于 10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num 大于 20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">15</span> \n输入的 num 值是 <span class=\"token number\">15</span>      \nnum 大于等于 <span class=\"token number\">10</span>，小于 <span class=\"token number\">20</span>\n</code></pre>\n<hr/>\n<p><strong>（2）switch 语句：</strong></p>\n<p>代码【选自菜鸟教程】：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">char</span></span> grade <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToChar</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">case</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">:</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"很棒！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token char\">'C'</span><span class=\"token punctuation\">:</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"做得好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token char\">'D'</span><span class=\"token punctuation\">:</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您通过了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token char\">'F'</span><span class=\"token punctuation\">:</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最好再试一下\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无效的成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您的成绩是 {0}\"</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\">B\n做得好\n您的成绩是 B\n</code></pre>\n<hr/>\n<p><strong>（3）for 语句：</strong></p>\n<p>代码【选自菜鸟教程】：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值： {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\">a 的值： <span class=\"token number\">1</span>\na 的值： <span class=\"token number\">2</span>\na 的值： <span class=\"token number\">3</span>\na 的值： <span class=\"token number\">4</span>\n</code></pre>\n<p>之后的所有循环，依然可以像其他语言一样，使用 <code>break</code> 和 <code>continue</code>。</p>\n<p>break 就是跳出所有循环，去执行循环语句的下一行代码；</p>\n<p>continue 就是跳出当前的这一次循环，进入循环语句的下一次循环；</p>\n<hr/>\n<p><strong>（4）foreach 语句：</strong></p>\n<p>和其他语言一样，foreach 用来迭代数组或者一个集合对象。</p>\n<p>代码【选自菜鸟教程】：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> fibarray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> element <span class=\"token keyword\">in</span> fibarray<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span>\n</code></pre>\n<hr/>\n<p><strong>（5）while 语句：</strong></p>\n<p>代码【选自菜鸟教程】：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值： {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\">a 的值： <span class=\"token number\">15</span>\na 的值： <span class=\"token number\">16</span>\na 的值： <span class=\"token number\">17</span>\na 的值： <span class=\"token number\">18</span>\na 的值： <span class=\"token number\">19</span>\n</code></pre>\n<hr/>\n<p><strong>（6）do…while 语句：</strong></p>\n<p>代码【选自菜鸟教程】：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">do</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n               Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值： {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\">a 的值： <span class=\"token number\">15</span>\na 的值： <span class=\"token number\">16</span>\na 的值： <span class=\"token number\">17</span>\na 的值： <span class=\"token number\">18</span>\na 的值： <span class=\"token number\">19</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_497\"></a>字符串</h1>\n<p>在上篇文章里，简单说明了字符串类型的使用以及转义字符，简单使用如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Windows\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>而字符串也有着它自己的属性和方法。</p>\n<p><strong>常用属性</strong>【表格转自菜鸟教程】：</p>\n<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Length</td><td>当前 String 对象中的字符数</td></tr></tbody></table>\n<p>代码演示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"CSDN\"</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">4</span>\n</code></pre>\n<hr/>\n<p><strong>常用方法</strong>【表格转自菜鸟教程】：</p>\n<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Compare(strA, strB, bool)</td><td>比较 strA，strB 两个指定的 string 对象，如果相同返回 0，不同返回 -1。如果不传递 bool 参数或传递 false，那么该方法区分大小写。如果 bool 参数为 true 时，该方法不区分大小写</td></tr><tr><td>Concat(str0, str1, …)</td><td>连接多个 string 对象，并返回连接结果</td></tr><tr><td>Contains(value)</td><td>返回当前 string 对象是否包含 value 字符或字符串</td></tr><tr><td>Copy(str)</td><td>创建一个与指定字符串具有相同值的新 String 对象</td></tr><tr><td>EndsWith(value)</td><td>判断当前 string 对象的结尾是否匹配指定的 value 字符或字符串</td></tr><tr><td>Equals(str0, str1)</td><td>判断两个 string 对象是否具有相同的值</td></tr><tr><td>Format(format, arg0)</td><td>把指定字符串中一个或多个格式项替换为指定对象的字符串表示形式</td></tr><tr><td>IndexOf(value)</td><td>返回指定 value 字符或字符串在当前字符串中第一次出现的索引</td></tr><tr><td>IsNullOrEmpty(str)</td><td>判断指定的字符串是否为 null 或者的字符串</td></tr><tr><td>Replace(oldValue, newValue)</td><td>把当前 string 对象中，所有指定的字符串替换为另一个指定的字符串，并返回新的字符串</td></tr><tr><td>ToLower()</td><td>把字符串转换为小写并返回</td></tr><tr><td>ToUpper()</td><td>把字符串转换为大写并返回</td></tr><tr><td>Trim()</td><td>移除当前 String 对象中的所有前导空白字符和后置空白字符</td></tr></tbody></table>\n<p>代码演示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"CSDN1\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"CSDN2\"</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CSDN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">EndsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SDN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SDN2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SDN3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">\" test \"</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">,</span> str3<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token operator\">-</span><span class=\"token number\">1</span>\nCSDN1CSDN2\nTrue\nCSDN1\nTrue\nFalse\n<span class=\"token number\">1</span>\nFalse\nCSDN3\ncsdn2\nCSDN2\ntest\n</code></pre>\n<p>更多内容为了避免大篇幅引用，感兴趣的话可以前往查看：</p>\n<p>C# 字符串<br/> <a href=\"https://www.runoob.com/csharp/csharp-string.html\">https://www.runoob.com/csharp/csharp-string.html</a></p>\n<hr/>\n<h1><a id=\"_623\"></a>枚举</h1>\n<p>枚举类型使用 <code>enum</code> 关键字来声明，枚举的使用如下所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Days</span> <span class=\"token punctuation\">{<!-- --></span> Sun<span class=\"token punctuation\">,</span> Mon<span class=\"token punctuation\">,</span> tue<span class=\"token punctuation\">,</span> Wed<span class=\"token punctuation\">,</span> thu<span class=\"token punctuation\">,</span> Fri<span class=\"token punctuation\">,</span> Sat <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其中的枚举列表中的每个符号都将会代表一个整数值，<strong>如果没有给与初始值的话，那么第一个枚举符号的值是 0</strong>，<strong>其后的每个枚举符号的值都比前面一个枚举符号大 1</strong>。如果给予初始值，那么每个枚举符号就会使用这个初始值。如果部分枚举符号存在初始值，部分枚举符号没有初始值，那么没有初始值的枚举符号的值，都只会比它之前的枚举符号大 1。比如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Day</span> <span class=\"token punctuation\">{<!-- --></span> Sun<span class=\"token punctuation\">,</span> Mon<span class=\"token punctuation\">,</span> Tue<span class=\"token punctuation\">,</span> Wed<span class=\"token punctuation\">,</span> Thu<span class=\"token punctuation\">,</span> Fri<span class=\"token punctuation\">,</span> Sat <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Day2</span> <span class=\"token punctuation\">{<!-- --></span> Sun<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> Mon<span class=\"token punctuation\">,</span> Tue<span class=\"token punctuation\">,</span> Wed<span class=\"token punctuation\">,</span> Thu<span class=\"token punctuation\">,</span> Fri<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> Sat <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Day<span class=\"token punctuation\">.</span>Sun<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Day<span class=\"token punctuation\">.</span>Sat<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sun = {0}\"</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sat = {0}\"</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Day2<span class=\"token punctuation\">.</span>Sun<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Day2<span class=\"token punctuation\">.</span>Mon<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Day2<span class=\"token punctuation\">.</span>Sat<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sun = {0}\"</span><span class=\"token punctuation\">,</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mon = {0}\"</span><span class=\"token punctuation\">,</span> num4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sat = {0}\"</span><span class=\"token punctuation\">,</span> num5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\">Sun <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nSat <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\nSun <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\nMon <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\nSat <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n</code></pre>\n<hr/>\n<p>关于枚举的使用情景，可以像下例一样，像是一种开发者所提供的对数组的说明，从而让程序更容易理解。比如您可以这样用：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">enum</span> <span class=\"token class-name\">rectangle</span> <span class=\"token punctuation\">{<!-- --></span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> area <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"矩形宽度 = {0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>rectangle<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"矩形高度 = {0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>rectangle<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"矩形面积 = {0}\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>rectangle<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\">矩形宽度 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n矩形高度 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n矩形面积 <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n</code></pre>\n<p>如上所示，因为数组本身存放的数据是无法定义具体含义的，比如只看 0 号索引，在无说明的情况下，肯定无法知道它代表着 width。所以如果真想用数组存放这些有意义的数据，那么为了方便他人和自己查看，就可以考虑用枚举。此时利用枚举的特点，通过设置或不设置初始值，来完成类似上面的功能。</p>\n<p>说白了，上面的功能就相当于这样：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> width <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> height <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> area <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"矩形宽度 = {0}\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"矩形高度 = {0}\"</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"矩形面积 = {0}\"</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>但是如果有多个矩形的话，不用枚举显然需要定义多个变量。使用枚举就可以少写几行代码。</p>\n<p>除此以外，在下篇文章中要详细说的类也可以实现类似枚举的用法（类的详细内容在下篇文章说明），比如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> w<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> h<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n            height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Rectangle</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"面积：{0}\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在面对多个矩形的情况下，只需要实例化多个对象即可。不过相比来说，如果没有复杂需求，就这个功能而言，枚举相对更简易。</p>\n<hr/>\n<h1><a id=\"_760\"></a>结构体</h1>\n<p>想要创建结构体需要用 <code>struct</code> 关键字，结构体很像是在上篇文章中使用的类，它用来<strong>存储各种数据类型的相关数据</strong>。但是结构体和类还是有些区别的，这些区别在下文说明。首先先看一下结构体该如何使用：</p>\n<p>代码演示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 结构不能继承其他的结构或类，也不能作为其他结构或类的基础结构</span>\n<span class=\"token comment\">// 结构可实现一个或多个接口</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Pet</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 结构体中声明的字段无法赋予初值</span>\n    <span class=\"token comment\">// 结构成员不能指定为 abstract、virtual 或 protected</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 结构体中可定义构造函数，但不能定义析构函数</span>\n    <span class=\"token comment\">// 但是不能定义无参构造函数。无参构造函数是自动定义的，且不能被改变</span>\n    <span class=\"token comment\">// 结构体的构造函数中，必须为结构体所有字段赋值</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = {0}\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age = {0}\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 与类不同，结构可以不使用 new 操作符，即可被实例化</span>\n            <span class=\"token class-name\">Pet</span> pet1<span class=\"token punctuation\">;</span>\n            pet1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">;</span>\n            pet1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 如果不使用 new 操作符，只有在所有的字段都被初始化之后，对象才能被使用</span>\n            pet1<span class=\"token punctuation\">.</span><span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"狗\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pet1<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 使用 new 操作符创建一个结构对象时，会调用适当的构造函数来创建结构</span>\n            <span class=\"token class-name\">Pet</span> pet2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猫\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pet2<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-csharp\">name <span class=\"token operator\">=</span> 狗\nage <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nname <span class=\"token operator\">=</span> 猫\nage <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n</code></pre>\n<p>其中的相关使用说明在对应位置上写了一些简单注释，在这里详细说一下。</p>\n<hr/>\n<p>（1）对于结构体来说，<strong>它不能继承其他的结构或类，也不能作为其他结构或类的基础结构，但它可以实现一个或多个接口</strong>。而对于继承和接口，在这里先不做说明了，在下篇文章将会提到这些内容，在这里可以先记住有这个问题。</p>\n<hr/>\n<p>（2）<strong>结构体中声明的字段无法赋予初值</strong>，如果赋值就会报错：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5b8cac0fdaea49e189e934aa77a5815d.png\"/></p>\n<hr/>\n<p>（3）<strong>结构体中不能定义析构函数，可定义构造函数，但是不能定义无参构造函数</strong>（无参构造函数依然会自动定义，只不过不允许我们修改），且<strong>如果定义构造函数，那么它必须为结构体所有字段赋值</strong>，否则报错：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token function\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d650289ab91d40e5a551f39ed7eafb5a.png\"/></p>\n<hr/>\n<p>（4）<strong>如果不使用 new 操作符实例化对象</strong>，那么像构造函数的说明一样，<strong>必须得在具体使用对象前，为结构体所有字段赋值</strong>，否则报错：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Pet</span> pet1<span class=\"token punctuation\">;</span>\npet1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">;</span>\npet1<span class=\"token punctuation\">.</span><span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"狗\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e5ad2479df90411fa8a4ab2809a08d2e.png\"/></p>\n<p>那么这也就意味着：<strong>如果不用构造函数</strong>，那么想要使用它的方法前，<strong>必须手动为所有字段赋值</strong>，即使在这里想用 setValues 赋值，但是 setValues 在没有初始值之前是不会调用成功的。所以，<strong>如果能够手动为所有字段赋值</strong>，那么就代表着<strong>结构体中的所有字段都得至少是 public 才能被外部修改访问</strong>。那么这样一来就需要<strong>注意是否有些字段不希望外部访问到</strong>。</p>\n<p><strong>如果有些字段不希望外部访问，那么就需要使用构造函数</strong>，而使用构造函数由于（3）展示的问题，那么<strong>就必须一次性为所有字段赋值</strong>。</p>\n<hr/>\n<p>最后通过以上使用，总结来说，类和结构会有以下几点区别：</p>\n<p>（1）结构体不支持继承，但类无此限制。</p>\n<p>（2）结构体中不能声明无参构造函数，不能声明析构函数，且只要声明构造函数，那么它就必须为结构体所有字段赋值，但类无此限制。</p>\n<p>（3）结构体中声明的字段无法赋予初值，但类无此限制。</p>\n<p>（4）与类不同，结构体可以不使用 new 操作符实例化对象。</p>\n<hr/>\n<p>因此从目前来看，结构体好像就是类的缩水版，没有多出新功能，但却多了很多限制，那么结构体到底有什么用呢？</p>\n<p>首先，它们还有一个更深层次的区别，在上面没有说明，但是这个区别可以从使用上感觉到。你会发现<strong>结构体是必须定义初始值的，同时也无法实现继承</strong>。这很像在上篇文章中提到过的 值类型和引用类型的区别，也就是值类型是有固定内存空间的，存放在栈中。而引用类型会存放一个内存地址，具体数据都存放在堆中。而这也正是类和结构更深层次的区别。也就是：<strong>类是引用类型，结构体是值类型</strong>。</p>\n<p>那说到这就可以明确<strong>类和结构体的使用情景区别</strong>了：</p>\n<p>类是引用类型，它的值会存储在堆中；而结构体是值类型，它的值会存储在栈中。所以就会导致，使用结构体时，它的访问速度相对类会更快（复杂情况除外）。因此，当我们想要声明一个<strong>轻量级对象</strong>的时候（比如只有几个成员变量），使用<strong>结构体可提高效率</strong>，<strong>成本也会更低</strong>。但是如果真的有复杂或大量逻辑功能，需要写很多成员函数，那么这时候继续使用结构体就有一些得不偿失，不如使用类。具体来说，比如要将声明的<strong>复杂的结构体</strong>赋值给另一个结构体时，由于值类型直接存储数据，那么<strong>性能肯定受限于结构的大小</strong>。但如果声明的是类，传递一个内存地址显然更轻松。这样也就产生了其他需要考虑的点。因为结构体是值类型，所以传递给其他对象的是当前对象的拷贝；因为类是引用类型，所以传递给其他对象的是当前对象的引用地址。如果需要考虑这个传参问题，那么还是得根据具体需求来考虑，而不是从效率方面来考虑。</p>\n<p>而正是因为结构体的这些特性（简单来说就是效率高），所以通常可以用它来创建新的值类型。最具体的例子就是大学学习 C++ 的时候 或者 写伪代码 或者 学习原生数据结构时，有的例子或老师会让我们用结构体去创建一些数据结构，比如队列、栈、树等等。后来才学习工具库。</p>\n<hr/>\n<blockquote>\n<p><font face=\"微软雅黑\" size=\"3\">由于在自己的工作和学习过程中，只查看某个大佬的教程或文章无法满足自己的学习需求和解决遇到的问题，所以自己在追赶大佬们步伐的基础上，又自己总结、整理、汇总了一些资料，方便自己理解和后续回顾，同时也希望给大家带来帮助，所以才写下该篇文章。在本文中，所有参考或引用大佬们文章内容的位置，都附上了原文章链接，您可以直接前往查阅观看。在原文章内容的基础上，若无任何补充内容，同时避免直接大段摘抄大佬们的文章，该情况下也只附上了原文章链接供大家学习。本文旨在总结归纳，并希望给大家提供帮助，未用作任何商用用途。文章内容如有错误之处，望各位大佬指出。如果涉及侵权行为，将会第一时间对文章进行删除。</font></p>\n<hr/>\n<p><font face=\"微软雅黑\" size=\"3\">👉 <a href=\"https://blog.csdn.net/qq_45613931\">个人博客主页</a> 👈</font><br/> <font face=\"微软雅黑\" size=\"3\">📝 一个努力学习的程序猿</font></p>\n<hr/>\n<p><font face=\"微软雅黑\" size=\"3\">🧑👉 本文所在专栏： <a href=\"https://blog.csdn.net/qq_45613931/category_11951371.html\">C# 专栏</a>，欢迎大家前往查看更多内容</font></p>\n<div>\n<br/> 专栏内目前所有文章：\n  <br/> 🚧 不定期持续更新中\n </div>\n<p></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}