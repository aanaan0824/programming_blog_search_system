{"blogid": "121389956", "writerAge": "码龄3年", "writerBlogNum": "18", "writerCollect": "365", "writerComment": "56", "writerFan": "100", "writerGrade": "3级", "writerIntegral": "797", "writerName": "野漫横江", "writerProfileAdress": "writer_image\\profile_121389956.jpg", "writerRankTotal": "276373", "writerRankWeekly": "365628", "writerThumb": "166", "writerVisitNum": "57985", "blog_read_count": "937", "blog_time": "于 2021-11-17 22:47:56 发布", "blog_title": "Rust的所有权与可变性", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Rust_0\"></a>Rust与其他语言的比较</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Rust_0\">Rust与其他语言的比较</a></li><li><ul><li><a href=\"#_5\">特性</a></li><li><ul><li><a href=\"#_7\">所有权</a></li><li><ul><li><a href=\"#_11\">直接转移</a></li><li><a href=\"#_24\">间接转移</a></li></ul>\n</li><li><a href=\"#_46\">引用、借用</a></li><li><a href=\"#_88\">可变性与不可变性</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_5\"></a>特性</h2>\n<h3><a id=\"_7\"></a>所有权</h3>\n<p>在Rust中，若声明有类似于Java或C++中的引用传递类型概念的变量，存在相同作用域下将地址赋值给另一个变量，则该变量的所有权将发生转移，原先的变量将<strong>不可访问</strong>。</p>\n<h4><a id=\"_11\"></a>直接转移</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/* Error: 进行类似于其他语言中的引用赋值，地址被新的变量获取，则会丧失所有权。 */</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//将a的所有权转移给b</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 试图访问已丧失所有权的变量a</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h4><a id=\"_24\"></a>间接转移</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/* Error: _v变量的地址被赋值给了change函数实参v，所有权已转移 */</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> _v<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _v<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* change函数得到了传递过来的Vec实例的所有权 */</span>\n    <span class=\"token keyword\">let</span> change <span class=\"token operator\">=</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>v<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> _v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 试图访问已丧失所有权的变量_v</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_46\"></a>引用、借用</h3>\n<p>在Rust中，由于有<strong>所有权</strong>的特性，若想用另一个变量去读取其值进行一些操作，而又不会丢失其所有权，可以使用引用特性，使用方式是将<code>&amp;</code>加在变量名前。</p>\n<p>事实上这样的场景十分常见。</p>\n<p>如，现在有一个<code>let nums:Vec&lt;i32&gt; = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].to_vec();</code>，我们需要分别获取它们累加、累乘的结果。为了不丢失所有权，直接使用<code>nums</code>变量进行迭代获取结果显然是可行的，但并不优雅。我们可以分别实现累加、累成的函数进行操作。</p>\n<p>这样的函数签名大概是这样的形式<code>fn sum(arr: Vec&lt;i32&gt;)-&gt;i32</code>、<code>fn mult(arr: Vec&lt;i32&gt;)-&gt;i32</code>。</p>\n<p>但这会引发一个问题：<strong>间接转移</strong><code>test3</code>代码段即存在这样的问题。当<code>_v</code>变量作为实参传入<code>change</code>函数时，<code>_v</code>的所有权就已经被转移到了<code>change</code>函数的形参<code>v</code>中，这意味着<code>change</code>一旦执行，<code>_v</code>则已丧失所有权，不可访问。</p>\n<p>而这样的情况函数签名若是以<code>fn sum(arr: Vec&lt;i32&gt;)</code>、<code>fn mult(arr: Vec&lt;i32&gt;)</code>的形式，那么意味着我们至多只能执行其中的一个<code>sum</code>或是<code>mult</code>，因为<code>nums</code>的所有权会在执行他们的其中一个时就已经转移丢失了。</p>\n<p>所以为了保持其原有的所有权，我们需要有一种借用它的方式，这样的方式就是引用。针对累加、累乘，我们就可以写出这样的代码。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">sum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ans <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ans\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">mult</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ans <span class=\"token operator\">*=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ans\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> nums<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ans1 <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过引用传递nums，保证nums不会丢失所有权，下同</span>\n<span class=\"token keyword\">let</span> ans2 <span class=\"token operator\">=</span> <span class=\"token function\">mult</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum:{} mult:{}\"</span><span class=\"token punctuation\">,</span> ans1<span class=\"token punctuation\">,</span> ans2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_88\"></a>可变性与不可变性</h3>\n<p>Rust的<code>let</code>关键字自带<code>const</code>（不可变）性质，但与JavaScript、C++的<code>const</code>关键字带来的效果略有差异。在JavaScript、C++以修饰的<code>const</code>的变量，只为了确保其变量所指向堆区的地址是否发生变化，而不关心其地址指向堆中的内存区域的数据是否有所改变。</p>\n<p>在<code>TypeScript</code>中，以下代码段是合法的。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> array<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>int<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明一个名为array，int类型的数组</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 为array添加一个元素1</span>\n</code></pre>\n<p>在<code>C++</code>中，以下代码段是合法的。</p>\n<pre><code class=\"prism language-c++\">const vector&lt;int&gt; array = vector&lt;int&gt;(); // 声明一个名为array，int类型的数组\narray.push_back(1); // 为array添加一个元素1\n</code></pre>\n<p>而Rust不是这样的，任何变量，没有经过<code>mut</code>关键字的修饰，<strong>无论是栈中的内存数据还是堆区的内存数据，都是不可改变的。</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/* Error: cannot borrow `array` as mutable, as it is not declared as mutable */</span>\n<span class=\"token keyword\">let</span> array<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明一个名为</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尝试为array添加一个元素1，不可行</span>\n</code></pre>\n<p>而如果想要为其添加元素，则必须使用<code>mut</code>关键字修饰。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/* 与javascript的const不同，Rust若不指定mut，则无法更改容器内的数据，这里的数据修改权不仅限于栈空间，更像是变量的可写权限？ */</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> _v<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _v<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接添加</span>\n    <span class=\"token comment\">/* change函数得到了传递过来的Vec实例的借用权 */</span>\n    <span class=\"token keyword\">let</span> change <span class=\"token operator\">=</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>v<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">mut</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> _v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> _v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以成功获取change函数添加的元素3</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}