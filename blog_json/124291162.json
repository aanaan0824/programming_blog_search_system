{"blogid": "124291162", "writerAge": "码龄11年", "writerBlogNum": "205", "writerCollect": "2502", "writerComment": "331", "writerFan": "1962", "writerGrade": "7级", "writerIntegral": "15741", "writerName": "PassionY", "writerProfileAdress": "writer_image\\profile_124291162.jpg", "writerRankTotal": "688", "writerRankWeekly": "8108", "writerThumb": "794", "writerVisitNum": "1793734", "blog_read_count": "4931", "blog_time": "已于 2022-04-20 10:27:25 修改", "blog_title": "C# HttpWebRequest详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>一.前言</h2>\n<p>HttpWebRequest是C#原生语法提供的实现了Http协议完整封装的类，可以实现任意类型的Http请求。但是也因为参数众多，导致很多人不容易掌握它。</p>\n<p>今天我们来尝试从简入繁的给大家介绍下HttpWebRequest</p>\n<h2><a id=\"_6\"></a>二.常用属性</h2>\n<ul><li> <p>AllowAutoRedirect：获取或设置一个值，该值指示请求是否应跟随重定向响应。</p> </li><li> <p>CookieContainer：获取或设置与此请求关联的cookie。</p> </li><li> <p>Credentials：获取或设置请求的身份验证信息。</p> </li><li> <p>KeepAlive：获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接。</p> </li><li> <p>MaximumAutomaticRedirections：获取或设置请求将跟随的重定向的最大数目。</p> </li><li> <p>Proxy：获取或设置请求的代理信息。</p> </li><li> <p>SendChunked：获取或设置一个值，该值指示是否将数据分段发送到 Internet 资源。</p> </li><li> <p>Timeout：获取或设置请求的超时值。</p> </li><li> <p>UserAgent：获取或设置 User-agent HTTP 标头的值</p> </li><li> <p>ContentType：Http内容类型</p> </li><li> <p>Headers：指定组成 HTTP 标头的名称/值对的集合。</p> </li></ul>\n<h3><a id=\"ContentType_31\"></a>ContentType</h3>\n<ul><li> <p>普通文本: “text/plain”</p> </li><li> <p>JSON字符串: “application/json”</p> </li><li> <p>数据流类型(文件流): “application/octet-stream”</p> </li><li> <p>表单数据(键值对): “application/x-www-form-urlencoded”</p> </li><li> <p>多分部数据: “multipart/form-data”</p> </li></ul>\n<h2><a id=\"_44\"></a>三.简单示例</h2>\n<p>下面是一个最简单的HttpWebRequest请求和相应</p>\n<p>我们只需要传url，就可以想服务器发送请求，并接收回复了。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//创建HttpWeb请求</span>\n<span class=\"token class-name\">HttpWebRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpWebRequest<span class=\"token punctuation\">)</span>WebRequest<span class=\"token punctuation\">.</span>Create <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建HttpWeb相应</span>\n<span class=\"token class-name\">HttpWebResponse</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpWebResponse<span class=\"token punctuation\">)</span>request<span class=\"token punctuation\">.</span>GetResponse <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span><span class=\"token string\">\"Content length is {0}\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>ContentLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span><span class=\"token string\">\"Content type is {0}\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>ContentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//获取response的流</span>\n<span class=\"token class-name\">Stream</span> receiveStream <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>GetResponseStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//使用streamReader读取流数据</span>\n<span class=\"token class-name\">StreamReader</span> readStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span> <span class=\"token punctuation\">(</span>receiveStream<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span><span class=\"token string\">\"Response stream received.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span>readStream<span class=\"token punctuation\">.</span>ReadToEnd <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span>Close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreadStream<span class=\"token punctuation\">.</span>Close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"Json_71\"></a>四.Json文本请求示例</h2>\n<p>使用<code>application/json</code>作为请求头，用来告诉服务端<strong>消息主体是序列化的JSON字符串</strong>。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">/*\n*  url:POST请求地址\n*  postData:json格式的请求报文,例如：{\"key1\":\"value1\",\"key2\":\"value2\"}\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">PostUrl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> postData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">HttpWebRequest</span> req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpWebRequest<span class=\"token punctuation\">)</span>WebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    req<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">;</span>\n    req<span class=\"token punctuation\">.</span>TimeOut <span class=\"token operator\">=</span> <span class=\"token string\">\"800\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置请求超时时间，单位为毫秒</span>\n    req<span class=\"token punctuation\">.</span>ContentType <span class=\"token operator\">=</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> data <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    req<span class=\"token punctuation\">.</span>ContentLength <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span> reqStream <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">GetRequestStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        reqStream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reqStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">HttpWebResponse</span> resp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpWebResponse<span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">GetResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Stream</span> stream <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">GetResponseStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//获取响应内容</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        result <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_108\"></a>五.文件上传示例</h2>\n<p>使用<code>multipart/form-data</code>作为请求头，用来告诉服务器消息主体是 <strong>多发文件</strong> 格式</p>\n<p><code>multipart/form-data</code>格式使用一长串字符作为boundtry封装线对字段进行分割。这也很符合multipart多个部分的语义，包含了多个部分集，每一部分都包含了一个<code>content-desposition</code>头，其值为<code>form-data</code>,以及一个<code>name</code>属性，其值为表单的字段名，文件输入框还可以使用<code>filename</code>参数指定文件名。<code>content-type</code>非必须属性，其值会根据文件类型进行变化，默认值是<code>text/plain</code>。multipart的每一个part上方是边界线，最后一个part的下方添加一个边界线。</p>\n<p>参考示例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 上传文件请求</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"url\"&gt;Url&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"filePath\"&gt;文件路径&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"formDatas\"&gt;表单数据（字典格式）&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"callback\"&gt;上传回调&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UploadRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> filePath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> formDatas<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 时间戳，用做boundary</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> timeStamp <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Ticks<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//根据uri创建HttpWebRequest对象</span>\n    <span class=\"token class-name\">HttpWebRequest</span> httpReq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpWebRequest<span class=\"token punctuation\">)</span> WebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    httpReq<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">;</span>\n    httpReq<span class=\"token punctuation\">.</span>AllowWriteStreamBuffering <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//对发送的数据不使用缓存</span>\n    httpReq<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> <span class=\"token number\">300000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//设置获得响应的超时时间（300秒）</span>\n    httpReq<span class=\"token punctuation\">.</span>ContentType <span class=\"token operator\">=</span> <span class=\"token string\">\"multipart/form-data; boundary=\"</span> <span class=\"token operator\">+</span> timeStamp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//读取file文件</span>\n    <span class=\"token class-name\">FileStream</span> fileStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BinaryReader</span> binaryReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BinaryReader</span><span class=\"token punctuation\">(</span>fileStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//表单信息</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> boundary <span class=\"token operator\">=</span> <span class=\"token string\">\"--\"</span> <span class=\"token operator\">+</span> timeStamp<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> form <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> formFormat <span class=\"token operator\">=</span> boundary <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\nContent-Disposition: form-data; name=\\\"{0}\\\"\\r\\n\\r\\n{1}\\r\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> formEnd <span class=\"token operator\">=</span> boundary <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\nContent-Disposition: form-data; name=\\\"{0}\\\"; filename=\\\"{1}\\\";\\r\\nContent-Type:application/octet-stream\\r\\n\\r\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pair <span class=\"token keyword\">in</span> formDatas<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        form <span class=\"token operator\">+=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span>formFormat<span class=\"token punctuation\">,</span> pair<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> pair<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    form <span class=\"token operator\">+=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span>formEnd<span class=\"token punctuation\">,</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">GetFileName</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> postHeaderBytes <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//结束边界</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> boundaryBytes <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>ASCII<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n--\"</span> <span class=\"token operator\">+</span> timeStamp <span class=\"token operator\">+</span> <span class=\"token string\">\"--\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> length <span class=\"token operator\">=</span> fileStream<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> postHeaderBytes<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> boundaryBytes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n    httpReq<span class=\"token punctuation\">.</span>ContentLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span> <span class=\"token comment\">//请求内容长度</span>\n\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//每次上传4k</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> bufferLength <span class=\"token operator\">=</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span>bufferLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//已上传的字节数</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> size <span class=\"token operator\">=</span> binaryReader<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bufferLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stream</span> postStream <span class=\"token operator\">=</span> httpReq<span class=\"token punctuation\">.</span><span class=\"token function\">GetRequestStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//发送请求头部消息</span>\n        postStream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>postHeaderBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> postHeaderBytes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            postStream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            offset <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">=</span> binaryReader<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bufferLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//添加尾部边界</span>\n        postStream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>boundaryBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> boundaryBytes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        postStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取服务器端的响应</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpWebResponse</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpWebResponse<span class=\"token punctuation\">)</span> httpReq<span class=\"token punctuation\">.</span><span class=\"token function\">GetResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Stream</span> receiveStream <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">GetResponseStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">StreamReader</span> readStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>receiveStream<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> returnValue <span class=\"token operator\">=</span> readStream<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"upload result:\"</span><span class=\"token operator\">+</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            callback<span class=\"token punctuation\">?.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            response<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            readStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件传输异常： \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">finally</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        fileStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        binaryReader<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>首先明确一点，上传文件使用Get请求时无效的，必须使用Post请求结合<code>multipart/form-data</code>才能真正将文件内容传入请求体。</p>\n<p>上传文件是一个前端常见的需求，但是为什么上传文件必须使用<code>content-type:multipart/form-data</code>作为请求头?</p>\n<p>文档<a href=\"https://link.juejin.cn?target=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc2388\" title=\"https://tools.ietf.org/html/rfc2388\">《RFC 2388：Returning Values from Forms: multipart/form-data 》</a>，阐明了不仅在HTTP协议下传输文件、而且使用邮件传输文件时 multipart/form-data 中的各个部分的具体格式<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fmoxo.io%2Fblog%2F2016%2F11%2F12%2Fhtml-form-submit-urlencode-and-multipart-formdata%2F\" title=\"https://moxo.io/blog/2016/11/12/html-form-submit-urlencode-and-multipart-formdata/\">[1]</a>。分别对<code>3.Definition of multipart/form-data</code> multipart/form-data的定义；<code>4.Use of multipart/form-data</code>具体使用格式和方法做了更详细的阐述，</p>\n<ul><li>Postman示例：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0bf9cda1faf6484095b45af01c6eb64a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a0242faa61f844859adf2ccc72a6e06e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\79ac306663cc44abbb9020b583cb389f.png\"/></li></ul>\n<h2><a id=\"_219\"></a>六.其他示例</h2>\n<p>未完待续…</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}