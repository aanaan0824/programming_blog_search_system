{"blogid": "124295301", "writerAge": "码龄4年", "writerBlogNum": "210", "writerCollect": "5349", "writerComment": "373", "writerFan": "2679", "writerGrade": "6级", "writerIntegral": "5847", "writerName": "流浪猪头拯救地球", "writerProfileAdress": "writer_image\\profile_124295301.jpg", "writerRankTotal": "4238", "writerRankWeekly": "12238", "writerThumb": "895", "writerVisitNum": "603454", "blog_read_count": "5033", "blog_time": "已于 2022-06-08 10:54:00 修改", "blog_title": "Python 跨文件调用函数 + 在一个文件中执行另一个文件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_2\">一、项目简介</a></li><li><a href=\"#_38\">二、调用类型</a></li><li><ul><li><a href=\"#1_39\">1、调用同文件中的函数</a></li><li><a href=\"#2_41\">2、调用同目录下不同文件中的函数</a></li><li><a href=\"#3_47\">3、调用同级文件夹文件中的函数</a></li><li><a href=\"#4_53\">4、调用上一级文件夹文件中的函数</a></li><li><a href=\"#5_68\">5、执行另一个文件</a></li></ul>\n</li><li><a href=\"#_77\">三、概念区分</a></li></ul>\n</div>\n<br/> 在很多时候，为了保持代码与代码文件的简洁和逻辑清晰，通常会将许多相类似的函数放在一个文件中，在一个\n<code>main.py</code>中去调用它们。调用 Python 函数的时候，大致会存在如下几种情况。\n<p></p>\n<h1><a id=\"_2\"></a>一、项目简介</h1>\n<p>假如现在有这样一个文件树（从其他地方copy的，稍加整改）</p>\n<pre><code class=\"prism language-bash\">A\n   <span class=\"token operator\">|</span>-------- __init__.py\n   <span class=\"token operator\">|</span>-------- a.py\n   <span class=\"token operator\">|</span>-------- main.py\n   <span class=\"token operator\">|</span>-------- B\n         <span class=\"token operator\">|</span>-------- __init__.py\n         <span class=\"token operator\">|</span>-------- b.py\n   <span class=\"token operator\">|</span>-------- C\n         <span class=\"token operator\">|</span>-------- __init__.py\n         <span class=\"token operator\">|</span>-------- c.py\n</code></pre>\n<p>文件内容如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># a.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">a_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A_HELLO\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token comment\"># b.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">b_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B_HELLO\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token comment\"># c.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">c_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C_HELLO\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token comment\"># main.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAIN_HELLO\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>为什么要有<code>__init__.py</code>文件呢？<br/> 【答】在Python工程里，当python检测到一个目录下存在__init__.py文件时，python就会把它当成一个模块(module)。Module跟C＋＋的命名空间和Java的Package的概念很像，都是为了科学地组织化工程，管理命名空间。<br/> <code>__init__.py</code>可以是一个空文件，也可以有非常丰富的内容。</p>\n</blockquote>\n<h1><a id=\"_38\"></a>二、调用类型</h1>\n<h2><a id=\"1_39\"></a>1、调用同文件中的函数</h2>\n<p>这个比较简单，比如我想在<code>main.py</code>中调用<code>main_hello()</code>函数，那么我直接<code>main_hello()</code>即可</p>\n<h2><a id=\"2_41\"></a>2、调用同目录下不同文件中的函数</h2>\n<p>比如我想在<code>main.py</code>中调用<code>a.py</code>中的<code>a_hello()</code>函数，可做如下操作</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> a\na<span class=\"token punctuation\">.</span>a_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"3_47\"></a>3、调用同级文件夹文件中的函数</h2>\n<p>比如我想在<code>main.py</code>中调用文件夹<code>B</code>下<code>b.py</code>中的<code>b_hello()</code>函数，可做如下操作：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> B <span class=\"token keyword\">import</span> b\nb<span class=\"token punctuation\">.</span>b_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"4_53\"></a>4、调用上一级文件夹文件中的函数</h2>\n<p>比如我想在<code>c.py</code>中调用<code>a.py</code>中的函数，这时候如果用上面的方法就会报错<code>No module named xx</code>。解决方法就是将目录<code>A</code>加到系统路径下</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'E:\\\\testnow\\\\A'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#括号内容为文件的绝对路径</span>\n</code></pre>\n<p>注意，<code>sys.path</code>添加目录时注意是在windows还是在linux下，windows下需要用<code>\\\\</code>，linux下需要用<code>/</code>否则会出错。这样需要区分操作系统，而且需要知道绝对路径，岂不是很不好用。看到有大佬用到过如下操作：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>上面这句话很长，但也不难理解，<code>os.path.dirname(__file__)</code>获取当前文件的绝对路径，<code>os.path.join(xx,'..')</code>在后面追加<code>..</code>，相当于进入上一级目录，然后再<code>os.path.abspath(xx)</code>获取绝对路径，最后<code>sys.path.append()</code>将其加入系统路径当中。经过这些操作之后，被加入系统路径中的所有文件中的函数都可以被调用了。</p>\n<h2><a id=\"5_68\"></a>5、执行另一个文件</h2>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">r'python tmp.py'</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\"># 最好给文件的绝对路径，否则有可能会找不到文件。</span>\n</code></pre>\n<h1><a id=\"_77\"></a>三、概念区分</h1>\n<ul><li><strong>Python 模块</strong>(<code>Module</code>)，是一个 Python 文件，以 <code>.py</code> 结尾，包含了 Python 对象定义和 Python 语句。</li><li><strong>Python 包</strong>是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。简单来说，包就是文件夹，但该文件夹下必须存在 <code>__init__.py</code> 文件， <strong>该文件的内容可以为空。<code>__init__.py</code> 用于标识当前文件夹是一个包。</strong></li><li><strong>文件夹</strong>：文件夹就是不存在 <code>__init__.py</code> 文件的文件夹。</li></ul>\n<p>另外，对于导入模块可以使用<code>import model1</code>或<code>from model1 import func1, func2, ...</code>。其实，这两种方式看似一样，但是是有所区别的，具体请看</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/Gou_Hailong/article/details/125169752\">https://blog.csdn.net/Gou_Hailong/article/details/125169752</a></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}