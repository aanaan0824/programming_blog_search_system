{"blogid": "122380657", "writerAge": "码龄4年", "writerBlogNum": "67", "writerCollect": "294", "writerComment": "25", "writerFan": "16", "writerGrade": "4级", "writerIntegral": "805", "writerName": "超爱吃小蛋糕的66", "writerProfileAdress": "writer_image\\profile_122380657.jpg", "writerRankTotal": "23547", "writerRankWeekly": "43704", "writerThumb": "57", "writerVisitNum": "63003", "blog_read_count": "2806", "blog_time": "于 2022-01-08 15:08:51 发布", "blog_title": "C++解析json文件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#1_JSON1_1\">1 JSON文件简介[1]</a></li><li><ul><li><a href=\"#11_JSON_5\">1.1 JSON文件的语法规则</a></li><li><a href=\"#12_JSON_12\">1.2 JSON值的类型</a></li></ul>\n</li><li><a href=\"#2_JSON_19\">2 JSON文件解析</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"1_JSON1_1\"></a>1 JSON文件简介[1]</h2>\n<p>一个项目在设计时会存在很多参数，比如data文件路径、外设名称与相关参数、文件储存路径等等，这些参数根据实际需要可能需要修改的频率比较频繁，如果放在程序里面不仅查找比较麻烦，而且每次修改完就得重新编译一次，超级麻烦。所以可以将这种类型的参数文件都放在一个文本里面，然后设计一个函数接口来读取这些参数并存储在结构体或者其它类型的容器中。</p>\n<p>之前为了方便将参数写进了TXT中，key和value之间通过<code>=</code>进行连接，以方便查找。最近接触了另外一种存储外参的文件格式JSON文件，JSON文件有自己的文件规则，并且<code>boost库</code>提供了解析json文件的接口。</p>\n<h3><a id=\"11_JSON_5\"></a>1.1 JSON文件的语法规则</h3>\n<ol><li>每一条数据通过<code>key:value</code>的形式储存，如<code>\"name\":\"lsx\"</code></li><li>数据之间通过逗号分隔，如<code>\"name\":\"lsx\",\"age\":16</code></li><li>花括号用于保存对象，如<code>\"info\":{\"name\":\"lsx\",\"age\":16}</code></li><li>中括号用于保存数组，如<code>\"info\":[\"name\":\"lsx\",\"age\":16]</code></li><li>一个数组中可以包含多个对象，一个对象中也可以包含多个数组</li></ol>\n<h3><a id=\"12_JSON_12\"></a>1.2 JSON值的类型</h3>\n<ol><li>数字（整型或浮点型表示）</li><li>字符串（在双引号中）</li><li>逻辑值（true/false）</li><li>对象（在花括号中）</li><li>数组（在中括号中）</li></ol>\n<h2><a id=\"2_JSON_19\"></a>2 JSON文件解析</h2>\n<p><strong>1.创建ptree对象</strong></p>\n<pre><code class=\"prism language-cpp\">boost<span class=\"token operator\">::</span>property_tree<span class=\"token operator\">::</span>ptree json_root<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2.读取file文件，并将根节点存储赋值给json_root</strong></p>\n<pre><code class=\"prism language-cpp\">boost<span class=\"token operator\">::</span>property_tree<span class=\"token operator\">::</span>read_json<span class=\"token operator\">&lt;</span>boost<span class=\"token operator\">::</span>property_tree<span class=\"token operator\">::</span>ptree<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> json_root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>3.获取某个子节点信息</strong><br/> 对于某个对象或者数组，可以嵌套更多的普通键值对，对象和数组，<br/> 把一个对象或者数组对应的结构成为一个子节点，<br/> 如果在该子节点下还存在子节点，则继续获取子节点,<br/> 直到是基本的组成元素</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//这里只列举两层</span>\nboost<span class=\"token operator\">::</span>property_tree<span class=\"token operator\">::</span>ptree elements <span class=\"token operator\">=</span> json_root<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nboost<span class=\"token operator\">::</span>property_tree<span class=\"token operator\">::</span>ptree sub_elements <span class=\"token operator\">=</span> json_root<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>4.对于结构规则的子节点信息进行遍历</strong><br/> 对于下面所举例的数组和对象，有一个共同特点就是他们包含的信息都具有相似的结构，而且组成每个结构的key的名称均相同，这样就可以通过遍历的方式获得每个节点中的元素</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"m1\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span>，<span class=\"token number\">2</span>，<span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"m2\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"m3\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"key1\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"key2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value2\"</span> \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"key1\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value３\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"key2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value４\"</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"obj\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"key３\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value５\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"key４\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value６\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"key３\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value７\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"key４\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value８\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>基于迭代器进行遍历</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//创建一个迭代器</span>\nboost<span class=\"token operator\">::</span>property_tree<span class=\"token operator\">::</span>ptree<span class=\"token operator\">::</span>iterator json_iterator<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//基于迭代器进行循环遍历</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>json_iterator<span class=\"token operator\">=</span>elements<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>json_iterator<span class=\"token operator\">!=</span>elements<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>json_iterator<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    string key1 <span class=\"token operator\">=</span> json_iterator<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string key2 <span class=\"token operator\">=</span> json_iterator<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>通过C++11提供的方式遍历</strong><br/> 其中迭代器的类型为<code>boost::property_tree::ptree::value_type*</code><br/> <code>value_type</code>的结构为<code>std::pair&lt;const Key,self_type&gt;</code><br/> 这样还可以通过C++11提供的方式遍历节点中的内容</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> value <span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    string key1 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string key2 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>示例代码</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/property_tree/ptree.hpp&gt;</span>  </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/property_tree/json_parser.hpp&gt;</span>  </span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> pt <span class=\"token operator\">=</span> boost<span class=\"token operator\">::</span>property_tree<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//解析普通数组</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">getArrayDataFromJson</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>vecData<span class=\"token punctuation\">,</span> pt<span class=\"token operator\">::</span>ptree <span class=\"token operator\">&amp;</span> nodeJSON<span class=\"token punctuation\">,</span> string path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//1.循环遍历数组中所有的子节点（数组中的每一个元素）</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>pt<span class=\"token operator\">::</span>ptree<span class=\"token operator\">::</span>value_type <span class=\"token operator\">&amp;</span>value <span class=\"token operator\">:</span> nodeJSON<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//2.获得每一个子节点的值，并将其放进vector</span>\n\t\tT tValue <span class=\"token operator\">=</span>value<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>get_value<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tvecData<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    string file_name <span class=\"token operator\">=</span> <span class=\"token string\">\"./test.json\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 创建ptree对象</span>\n    pt<span class=\"token operator\">::</span>ptree json_root<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 读取file文件，并将根节点存储赋值给json_root</span>\n    pt<span class=\"token operator\">::</span>read_json<span class=\"token operator\">&lt;</span>pt<span class=\"token operator\">::</span>ptree<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> json_root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//解析普通键值对</span>\n    string g_version <span class=\"token operator\">=</span> json_root<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string g_description <span class=\"token operator\">=</span> json_root<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"description\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> g_test_number <span class=\"token operator\">=</span>  json_root<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test_number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string g_end_desc <span class=\"token operator\">=</span> json_root<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end_desc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"version=\"</span><span class=\"token operator\">&lt;&lt;</span>g_version<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"description=\"</span><span class=\"token operator\">&lt;&lt;</span>g_description<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"test_number=\"</span><span class=\"token operator\">&lt;&lt;</span>g_test_number<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"end_desc=\"</span><span class=\"token operator\">&lt;&lt;</span>g_description<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//解析普通数组</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> gv_location1<span class=\"token punctuation\">,</span>gv_location2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> flag_gv_location1 <span class=\"token operator\">=</span> <span class=\"token function\">getArrayDataFromJson</span><span class=\"token punctuation\">(</span>gv_location1<span class=\"token punctuation\">,</span> json_root<span class=\"token punctuation\">,</span> <span class=\"token string\">\"location1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> flag_gv_location2 <span class=\"token operator\">=</span> <span class=\"token function\">getArrayDataFromJson</span><span class=\"token punctuation\">(</span>gv_location2<span class=\"token punctuation\">,</span> json_root<span class=\"token punctuation\">,</span> <span class=\"token string\">\"location2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"gv_location1=\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>gv_location1<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"gv_location2=\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>gv_location2<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//解析数组中包含对象</span>\n    <span class=\"token comment\">//1.通过循环迭代获取test_choice数组的所有子节点中的对象</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>pt<span class=\"token operator\">::</span>ptree<span class=\"token operator\">::</span>value_type <span class=\"token operator\">&amp;</span>elements_test_choice <span class=\"token operator\">:</span> json_root<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test_choice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//2.再通过解析普通键值对的方式获得对象中的每个值</span>\n        string key_name <span class=\"token operator\">=</span> elements_test_choice<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> value_enable <span class=\"token operator\">=</span> elements_test_choice<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"key_name=\"</span><span class=\"token operator\">&lt;&lt;</span>key_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\tvalue_enable=\"</span><span class=\"token operator\">&lt;&lt;</span>value_enable<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//对象中仅包含键值对</span>\n    <span class=\"token comment\">//1.获取该对象对应的子节点</span>\n    pt<span class=\"token operator\">::</span>ptree element_path <span class=\"token operator\">=</span> json_root<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path_set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2.获取该对象中每个元素（键值对）</span>\n    string g_load_path <span class=\"token operator\">=</span> element_path<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load_path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string g_save_path <span class=\"token operator\">=</span> element_path<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"save_path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"g_load_path=\"</span><span class=\"token operator\">&lt;&lt;</span>g_load_path<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"g_save_path=\"</span><span class=\"token operator\">&lt;&lt;</span>g_save_path<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//对象中仅包含数组</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>gv_t1<span class=\"token punctuation\">,</span>gv_t2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1.获取该对象对应的子节点</span>\n    pt<span class=\"token operator\">::</span>ptree element_t_matrix <span class=\"token operator\">=</span> json_root<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T_Matrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> gv_t1_flag <span class=\"token operator\">=</span> <span class=\"token function\">getArrayDataFromJson</span><span class=\"token punctuation\">(</span>gv_t1<span class=\"token punctuation\">,</span>element_t_matrix<span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">bool</span> gv_t2_flag <span class=\"token operator\">=</span> <span class=\"token function\">getArrayDataFromJson</span><span class=\"token punctuation\">(</span>gv_t2<span class=\"token punctuation\">,</span>element_t_matrix<span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"gv_t1=［\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>gv_t1<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"gv_t2=[\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>gv_t2<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//对象中包含对象</span>\n    <span class=\"token comment\">//1.获得该对象的子节点对象</span>\n    pt<span class=\"token operator\">::</span>ptree ele_other <span class=\"token operator\">=</span> json_root<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other_info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//1.通过C++11方式进行遍历</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> sub_value <span class=\"token operator\">:</span>ele_other<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//对每个子节点对象（即sub_value.second）进行解析</span>\n        string sub_info_temp <span class=\"token operator\">=</span> sub_value<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> sub_v_temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> sub_v_temp_flag <span class=\"token operator\">=</span> <span class=\"token function\">getArrayDataFromJson</span><span class=\"token punctuation\">(</span>sub_v_temp<span class=\"token punctuation\">,</span>sub_value<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span><span class=\"token string\">\"Matrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>sub_info_temp<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"=[\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>sub_v_temp<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//2.通过迭代器进行遍历</span>\n    pt<span class=\"token operator\">::</span>ptree<span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> ele_other<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>ele_other<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//对每个子节点对象（即sub_value.second）进行解析</span>\n        string sub_info_temp <span class=\"token operator\">=</span> it<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> sub_v_temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> sub_v_temp_flag <span class=\"token operator\">=</span> <span class=\"token function\">getArrayDataFromJson</span><span class=\"token punctuation\">(</span>sub_v_temp<span class=\"token punctuation\">,</span>it<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">,</span><span class=\"token string\">\"Matrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>sub_info_temp<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"=[\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>sub_v_temp<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//对象中包含普通键值对.数组和对象</span>\n    <span class=\"token comment\">//1.获取对象子节点信息</span>\n    pt<span class=\"token operator\">::</span>ptree element_color_cam <span class=\"token operator\">=</span> json_root<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"camera_device\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1.1获取对象中普通键值对</span>\n    string ele_name <span class=\"token operator\">=</span> element_color_cam<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string ele_path <span class=\"token operator\">=</span> element_color_cam<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>ele_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>ele_path<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//1.２获取对象中数组</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> gv_fov<span class=\"token punctuation\">,</span>gv_res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> gv_fov_flag <span class=\"token operator\">=</span> <span class=\"token function\">getArrayDataFromJson</span><span class=\"token punctuation\">(</span>gv_fov<span class=\"token punctuation\">,</span>element_color_cam<span class=\"token punctuation\">,</span><span class=\"token string\">\"FOV\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> gv_res_flag <span class=\"token operator\">=</span> <span class=\"token function\">getArrayDataFromJson</span><span class=\"token punctuation\">(</span>gv_res<span class=\"token punctuation\">,</span>element_color_cam<span class=\"token punctuation\">,</span><span class=\"token string\">\"RES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"fov=［\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>gv_fov<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"res=[\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>gv_res<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//1.3获取对象中的对象的子节点信息</span>\n    pt<span class=\"token operator\">::</span>ptree sub_Intrinsic <span class=\"token operator\">=</span> element_color_cam<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Intrinsic\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"fx=\"</span><span class=\"token operator\">&lt;&lt;</span>sub_Intrinsic<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fx\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"fy=\"</span><span class=\"token operator\">&lt;&lt;</span>sub_Intrinsic<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fy\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"cx=\"</span><span class=\"token operator\">&lt;&lt;</span>sub_Intrinsic<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cx\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"cy=\"</span><span class=\"token operator\">&lt;&lt;</span>sub_Intrinsic<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cy\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>json文件</strong></p>\n<pre><code>{\n    \"version\":\"test_json v1.0\",\n    \"description\":\"this demo used to practice json analysis\",\n    \"test_number\":78322,\n    \"path_set\":{\n        \"load_path\":\"./data\",\n        \"save_path\":\"./result\"\n    },\n    \"camera_device\":{\n        \"name\":\"cam1\",\n        \"path\":\"/sys/dev/\",\n        \"FOV\":[30,50],\n        \"RES\":[640,480],\n        \"Intrinsic\":{\n            \"fx\":50.2155,\n            \"fy\":45.1245,\n            \"cx\":0.55454,\n            \"cy\":0.55488\n        }\n    },\n    \"T_Matrix\":{\n        \"t1\":[1,2,3],\n        \"t2\":[4,5,6]\n    },\n    \"other_info\":{\n        \"info_1\":{\n            \"info\":\"hello world\",\n            \"Matrix\":[21,21,21,21]\n        },\n        \"info_2\":{\n            \"info\":\"hello C++\",\n            \"Matrix\":[22,22,22,22]\n        }\n    },\n    \"location1\":[23,23,2333],\n    \"location2\":[233,233,23333],\n    \"test_choice\":[\n        {\n            \"name\":\"test1\",\n            \"enable\":true\n        },\n        {\n            \"name\":\"test2\",\n            \"enable\":false\n        },\n        {\n            \"name\":\"test1\",\n            \"enable\":true\n        }\n    ],\n    \"end_desc\":\"thank you\"\n}\n</code></pre>\n<p>[1]<a href=\"https://blog.csdn.net/jinzhu1911/article/details/100050852?spm=1001.2014.3001.5506\">https://blog.csdn.net/jinzhu1911/article/details/100050852?spm=1001.2014.3001.5506</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}