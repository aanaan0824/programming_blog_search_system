{"blogid": "123363926", "writerAge": "码龄5年", "writerBlogNum": "294", "writerCollect": "5634", "writerComment": "1154", "writerFan": "13904", "writerGrade": "6级", "writerIntegral": "7633", "writerName": "剽悍一小兔", "writerProfileAdress": "writer_image\\profile_123363926.jpg", "writerRankTotal": "1813", "writerRankWeekly": "4203", "writerThumb": "2609", "writerVisitNum": "859314", "blog_read_count": "19467", "blog_time": "已于 2022-07-06 21:46:09 修改", "blog_title": "前端面试：浅拷贝和深拷贝的区别？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p> 前些天发现了一个巨牛的人工智能学习博客，通俗易懂，风趣幽默，忍不住分享一下给大家。<a href=\"https://www.cbedai.net/javaxbfs/\" title=\"点击跳转\">点击跳转</a></p>\n</blockquote>\n<p>那么大家晚上好，我是今天晚上的主讲老师，我是兔哥。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"258\" src=\"image\\3b68d20b0090452799707e3bad935f67.png\" width=\"258\"/></p>\n<p></p>\n<p>我们在面试中经常会被问到浅拷贝和深拷贝的区别，正好群里也有在问到这个问题，于是今天就专门写一篇博客来讲解一下哈。</p>\n<p><img alt=\"\" height=\"1200\" src=\"image\\0ce6f930d04442fc8dbf8a5ee168238a.png\" width=\"1080\"/></p>\n<p></p>\n<h1>1.浅拷贝</h1>\n<p>浅拷贝是指，对基本类型的<strong>值拷贝</strong>，以及对象类型的<strong>地址拷贝</strong>。</p>\n<p>怎么讲，什么是基本类型？</p>\n<p>在js中，我们知道的基本类型有字符串，数字，布尔值。</p>\n<p>当我们写这样的代码，就是浅拷贝。</p>\n<pre><code>var a = 1;\nvar b = a; //浅拷贝\nb = 2;     //改变b的值，并不会影响到a，因为浅拷贝对基本类型而言就是值拷贝\nconsole.log(a);</code></pre>\n<p>a还是1，和b没有关系。</p>\n<p>这个道理，在对象中也一样适用。JavaScript中还有对象类型（也叫引用数据类型），对象类型的浅拷贝则只是拷贝了地址。</p>\n<pre><code>var p1 = {\n    name: 'jack'\n}\n\nvar p2 = p1;\np2.name = 'rose';\n\nconsole.log(p1);</code></pre>\n<p>p2保存的是和p1一模一样的内存地址，就好像你去配了一把钥匙给张三，张三拿着钥匙一样可以去你家把冰箱里的酸奶喝了。</p>\n<p></p>\n<h1>2.深拷贝</h1>\n<p>深拷贝是指，除了拷贝基本类型的值，还完全复刻了对象类型。</p>\n<p>一个对象在内存中是固定存在的，我们如果要对其进行深拷贝，唯一的办法就是创建一个新的对象，里面的值完全复刻原来的对象。</p>\n<p>还是刚才例子，我们稍加改造</p>\n<pre><code>var p1 = {\n    name: 'jack'\n}\n\nvar p2 = {\n    name: p1.name\n};\np2.name = 'rose';</code></pre>\n<p>这样一来，我们对p2进行改造，就不会影响到p1了。这就是深拷贝。</p>\n<p>我们用这种方法实现深拷贝是可以的，但是如果属性太多，就会很繁琐。下面讲讲如何实现深拷贝的通用方法？</p>\n<h1>3.深拷贝 <strong><code><span style=\"background-color:#fef2f0;\">Object.assign()</span></code></strong></h1>\n<p><code>Object.assign()</code>是一种可以对非嵌套对象进行深拷贝的方法，如果对象中出现嵌套情况，那么其对被嵌套对象的行为就成了普通的浅拷贝。如果没有嵌套，是可以用这个方法的。</p>\n<pre><code>var p1 = {\n    name: 'jack'\n}\n\nvar p2 = {}\n\nObject.assign(p2,p1);</code></pre>\n<p>还有一种类似的方法，就是用JSON进行转换</p>\n<pre><code>var p1 = {\n    name: 'jack',\n    age:12\n}\n\nvar p2 = JSON.parse(JSON.stringify(p1));\n\np2.name = 'rose';</code></pre>\n<p>实际开发中，可能这种方式用的更多一些，比如把一些数据转成json存储到本地缓存，需要用到的时候，我们再反序列化。</p>\n<h1>4.深拷贝递归</h1>\n<pre><code>function deepCopy(dest,src){\n  var dest = dest || {};\n  for(var key in src){\n    //如果对象的属性又是对象，则递归处理\n    if(typeof src[key] === \"object\"){ \n        dest[key]= (src[key].constructor === Array)?[]:{}; \n        deepCopy(dest[key],src[key]); \n    }else{\n        dest[key]=src[key];  \n    }\n  }\n  return dest;\n}</code></pre>\n<p>测试：</p>\n<pre><code>var p1 = {\n    name: 'jack',\n    age:12,\n    toy: {\n        name:'car'\n    }\n}\n\nvar p2 = deepCopy({},p1);</code></pre>\n<p><img alt=\"\" height=\"361\" src=\"image\\e2aea04f1e044e0da7418faa73f98882.png\" width=\"378\"/></p>\n<p>可以看到，操作p2并不会影响到p1，这就是递归方式的深拷贝。 </p>\n<p>今天的分享就到这里啦，也欢迎大家来我们的学习qun交流哦~~</p>\n</div>\n</div>"}