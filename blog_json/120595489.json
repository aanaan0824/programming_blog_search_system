{"blogid": "120595489", "writerAge": "码龄11年", "writerBlogNum": "28", "writerCollect": "552", "writerComment": "29", "writerFan": "134", "writerGrade": "3级", "writerIntegral": "422", "writerName": "李宥小哥", "writerProfileAdress": "writer_image\\profile_120595489.jpg", "writerRankTotal": "34456", "writerRankWeekly": "14039", "writerThumb": "121", "writerVisitNum": "89745", "blog_read_count": "5906", "blog_time": "已于 2022-05-06 15:17:54 修改", "blog_title": "C#高级--多线程详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"C_0\"></a>C#高级–多线程详解</h1>\n<h2><a id=\"httpsblogcsdnnetliyou123456789articledetails119715435_2\"></a><a href=\"https://blog.csdn.net/liyou123456789/article/details/119715435\">零、文章目录</a></h2>\n<h2><a id=\"_4\"></a>一、什么是多线程</h2>\n<h3><a id=\"1_6\"></a>1、进程</h3>\n<p>当一个程序开始运行时，它就是一个进程，进程包括运行中的程序和程序所使用到的内存和系统资源。 而一个进程又是由多个线程所组成的。</p>\n<h3><a id=\"2_10\"></a>2、线程</h3>\n<p>线程是程序中的一个执行流，每个线程都有自己的专有寄存器(栈指针、程序计数器等)，但代码区是共享的，即不同的线程可以执行同样的函数。</p>\n<h3><a id=\"3_14\"></a>3、句柄</h3>\n<p>句柄是Windows系统中对象或实例的标识，这些对象包括模块、应用程序实例、窗口、控制、位图、GDI对象、资源、文件等。</p>\n<h3><a id=\"4_18\"></a>4、多线程</h3>\n<h4><a id=\"1_20\"></a>（1）多线程概念</h4>\n<p>多线程是指程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</p>\n<h4><a id=\"2_24\"></a>（2）多线程优点</h4>\n<p>可以提高CPU的利用率。在多线程程序中，一个线程必须等待的时候，CPU可以运行其它的线程而不是等待，这样就大大提高了程序的效率。<strong>（牺牲空间计算资源，来换取时间）</strong></p>\n<h4><a id=\"3_28\"></a>（3）多线程缺点</h4>\n<ul><li>线程也是程序，所以线程运行需要占用计算机资源，线程越多占用资源也越多。<strong>（占内存多）</strong></li><li>多线程需要协调和管理，所以需要CPU跟踪线程，消耗CPU资源。<strong>（占cpu多）</strong></li><li>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题。<strong>多线程存在资源共享问题）</strong></li><li>线程太多会导致控制太复杂，最终可能造成很多Bug。<strong>（管理麻烦，容易产生bug）</strong></li></ul>\n<h4><a id=\"4_35\"></a>（4）为什么计算机可以多线程</h4>\n<ul><li>程序运行需要计算机资源，操作系统就会去申请CPU来处理，CPU在执行动作的时候是分片执行的。</li><li>分片：把CPU的处理能力进行切分，操作系统在调度的时候，按照切片去处理不同的计算需求，按照规则分配切片计算资源，对于同一个计算机核心来讲，所有的运行都是串行的，但是因为分片的存在，感觉几个程序同时在向前推进。</li></ul>\n<h4><a id=\"5_40\"></a>（5）何时建议使用多线程</h4>\n<ul><li>当主线程试图执行冗长的操作，但系统会卡界面，体验非常不好，这时候可以开辟一个新线程，来处理这项冗长的工作。</li><li>当请求别的数据库服务器、业务服务器等，可以开辟一个新线程，让主线程继续干别的事。</li><li>利用多线程拆分复杂运算，提高计算速度。</li></ul>\n<h4><a id=\"6_46\"></a>（6）何时不建议使用多线程</h4>\n<p>当单线程能很好解决，就不要为了使用多线程而用多线程。</p>\n<h3><a id=\"5_50\"></a>5、同步，异步</h3>\n<h4><a id=\"1_52\"></a>（1）同步方法</h4>\n<p>线性执行，从上往下依次执行，同步方法执行慢，消耗的计算机资源少。</p>\n<h4><a id=\"2_56\"></a>（2）异步方法</h4>\n<p>线程和线程之间，不再线型执行，多个线程总的耗时少，执行快，消耗的计算机资源多，各线程执行是无序的。</p>\n<h3><a id=\"6C_60\"></a>6、C#中的多线程</h3>\n<p>Thread/ThreadPool/Task 都是C#语言在操作计算机的资源时封装的帮助类库。</p>\n<h2><a id=\"Thread_64\"></a>二、Thread</h2>\n<p>Thread是.Net最早的多线程处理方式，它出现在.Net1.0时代，虽然现在已逐渐被微软所抛弃，微软强烈推荐使用Task，但从多线程完整性的角度上来说，我们有必要了解下早期多线程的是怎么处理的，以便体会.Net体系中多线程处理方式的进化。</p>\n<h3><a id=\"1_68\"></a>1、如何开启新线程</h3>\n<blockquote>\n<p>分析Thread类的源码，发现其构造函数参数有两类</p>\n</blockquote>\n<ul><li>ThreadStart类：是无参无返回值的委托。</li><li>ParameterizedThreadStart类：是有一个object类型参数但无返回值的委托。</li></ul>\n<blockquote>\n<p>开启了一个新的线程1</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">ParameterizedThreadStart parameterizedThreadStart = new ParameterizedThreadStart((oInstacnce) =&gt;\n{\n    Debug.WriteLine($\"ParameterizedThreadStart--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\" HH:mm:ss.fff\")}\");\n});\nThread thread = new Thread(parameterizedThreadStart);\nthread.Start();\n</code></pre>\n<blockquote>\n<p>开启了一个新的线程2</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">ThreadStart threadStart = new ThreadStart(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\nThread thread = new Thread(threadStart);\nthread.Start();\n</code></pre>\n<h3><a id=\"2_97\"></a>2、线程的停止等待</h3>\n<pre><code class=\"prism language-C#\">Thread thread = new Thread(() =&gt;\n{\n    this.DoSomething(\"张三\", 5000);\n});\nthread.Start();\n//thread.Suspend(); //表示线程暂停，现在已弃用，NetCore平台已经不支持\n//thread.Resume();  //线程恢复执行，弃用，NetCore平台已经不支持\n//thread.Abort();   //线程停止，子线程对外抛出了一个异常，线程是无法从外部去终止的\n//Thread.ResetAbort();//停止的线程继续去执行\n\n//thread.ThreadState\n//根据线程状态ThreadState判断实现线程间歇性休息\n//while (thread.ThreadState != System.Threading.ThreadState.Stopped)\n//{\n//    Thread.Sleep(500); //当前休息500ms，不消耗计算机资源的\n//}\n\nthread.Join();//主线程等待，直到当前线程执行完毕\n//thread.Join(500);//主线程等待500毫秒，不管当前线程执行是否完毕，都继续往后执行\n//thread.Join(new TimeSpan(500*10000));//主线程等待500毫秒，不管当前线程执行是否完毕，都继续往后执行\n//TimeSpan 单位100纳秒  1毫秒=10000*100纳秒\n</code></pre>\n<h3><a id=\"3_123\"></a>3、后台线程，前台线程</h3>\n<h4><a id=\"1_125\"></a>（1）后台线程，界面关闭，线程也就随之消失</h4>\n<h4><a id=\"2_127\"></a>（2）前台线程，界面关闭，线程会等待执行完才结束</h4>\n<pre><code class=\"prism language-C#\">Thread thread = new Thread(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\nthread.Start();\nthread.IsBackground = true;//后台线程，界面关闭，线程也就随之消失\nthread.IsBackground = false;//前台线程，界面关闭，线程会等待执行完才结束\nthread.Start();\n</code></pre>\n<h3><a id=\"4UI_140\"></a>4、跨线程操作主线程UI</h3>\n<pre><code class=\"prism language-C#\">Thread thread = new Thread(() =&gt;\n{\n    for (int i = 0; i &lt;= 5; i++)\n    {\n        Thread.Sleep(500);\n        textBox1.Invoke(new Action(()=&gt; textBox1.Text = i.ToString()));\n    }\n});\nthread.Start();\n</code></pre>\n<h3><a id=\"5_154\"></a>5、线程的优先级</h3>\n<p>设置优先级只是提高了他被优先执行的概率</p>\n<pre><code class=\"prism language-C#\">Thread thread = new Thread(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\n// 线程的优先级最高\nthread.Priority = ThreadPriority.Highest;\n\nThread thread1 = new Thread(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\n// 线程的优先级最低\nthread1.Priority = ThreadPriority.Lowest;\nthread.Start();\nthread1.Start();//线程开启后，根据优先级，来执行\n</code></pre>\n<h3><a id=\"6_176\"></a>6、扩展封装</h3>\n<h4><a id=\"1_178\"></a>（1）实现两个委托多线程顺序执行</h4>\n<blockquote>\n<p>方法封装</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">private void CallBackThread(Action action1, Action action2)\n{\n    Thread thread = new Thread(() =&gt;\n    {\n        action1.Invoke();\n        action2.Invoke();\n    });\n    thread.Start();\n}\n</code></pre>\n<blockquote>\n<p>方法调用</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">Action action1 = () =&gt;\n{\n    this.DoSomething(\"张三\");\n};\nAction action2 = () =&gt;\n{\n    this.DoSomething(\"李四\");\n};\n//不会阻塞线程\nCallBackThread(action1, action2);\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash、\">DoSomething--Start--张三--06--16:57:21.411\nDoSomething--End--张三--06--16:57:23.412\nDoSomething--Start--李四--06--16:57:23.417\nDoSomething--End--李四--06--16:57:25.423\n</code></pre>\n<h4><a id=\"2_218\"></a>（2）实现获取多线程执行委托的结果</h4>\n<blockquote>\n<p>方法封装</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">private Func&lt;T&gt; CallBackFunc&lt;T&gt;(Func&lt;T&gt; func)\n{\n    T t = default(T);\n    ThreadStart threadStart = new ThreadStart(() =&gt;\n    {\n        t = func.Invoke();\n    });\n    Thread thread = new Thread(threadStart);\n    thread.Start();\n\n    return new Func&lt;T&gt;(() =&gt;\n    {\n        thread.Join();//等待thread执行完成；\n        return t;\n    });\n}\n</code></pre>\n<blockquote>\n<p>方法调用</p>\n</blockquote>\n<pre><code class=\"prism language-c#\">Func&lt;int&gt; func = () =&gt;\n{\n    this.DoSomething(\"王五\");\n    return DateTime.Now.Year;\n};\n//这一步不会阻塞界面\nFunc&lt;int&gt; func1 = this.CallBackFunc&lt;int&gt;(func);\nDebug.WriteLine(\"线程开启后，计算结果出来前\");\n//这里会等待线程计算出结果才继续往后执行\nint iResult = func1.Invoke();\nDebug.WriteLine($\"计算结果：{iResult}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">线程开启后，计算结果出来前\nDoSomething--Start--王五--09--17:06:12.088\nDoSomething--End--王五--09--17:06:14.090\n计算结果：2021\n</code></pre>\n<h3><a id=\"7_266\"></a>7、数据槽</h3>\n<p>为了解决多线程竞用共享资源的问题，引入数据槽的概念，即将数据存放到线程的环境块中，使该数据只能单一线程访问。</p>\n<h4><a id=\"1AllocateNamedDataSlotAllocateDataSlot_270\"></a>（1）AllocateNamedDataSlot命名槽位和AllocateDataSlot未命名槽位</h4>\n<p>在主线程上设置槽位，使该数据只能被主线程读取，其它线程无法访问</p>\n<blockquote>\n<p>AllocateNamedDataSlot命名槽位</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">var d = Thread.AllocateNamedDataSlot(\"userName\");\nThread.SetData(d, \"张三\");\n//声明一个子线程\nvar t1 = new Thread(() =&gt;\n{\n    Debug.WriteLine($\"子线程中读取数据：{Thread.GetData(d)}\");\n});\nt1.Start();\n//主线程中读取数据\nDebug.WriteLine($\"主线程中读取数据：{Thread.GetData(d)}\");\n</code></pre>\n<blockquote>\n<p>AllocateDataSlot未命名槽位</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">var d = Thread.AllocateDataSlot();\nThread.SetData(d, \"李四\");\n//声明一个子线程\nvar t1 = new Thread(() =&gt;\n{\n    Debug.WriteLine($\"子线程中读取数据：{Thread.GetData(d)}\");\n});\nt1.Start();\n//主线程中读取数据\nDebug.WriteLine($\"主线程中读取数据：{Thread.GetData(d)}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">主线程中读取数据：张三\n子线程中读取数据：\n主线程中读取数据：李四\n子线程中读取数据：\n</code></pre>\n<h4><a id=\"2ThreadStatic_313\"></a>（2）利用特性[ThreadStatic]</h4>\n<p>在主线程中给ThreadStatic特性标注的变量赋值，则只有主线程能访问该变量</p>\n<blockquote>\n<p>变量标记特性</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">[ThreadStatic]\nprivate static string Age = string.Empty;\n</code></pre>\n<blockquote>\n<p>线程访问变量</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">Age = \"小女子年方28\";\n//声明一个子线程\nvar t1 = new Thread(() =&gt;\n{\n    Debug.WriteLine($\"子线程中读取数据：{Age}\");\n});\nt1.Start();\n//主线程中读取数据\nDebug.WriteLine($\"主线程中读取数据：{Age}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">主线程中读取数据：小女子年方28\n子线程中读取数据：\n</code></pre>\n<h4><a id=\"3ThreadLocal_345\"></a>（3）利用ThreadLocal线程的本地存储</h4>\n<p>在主线程中声明ThreadLocal变量，并对其赋值，则只有主线程能访问该变量</p>\n<blockquote>\n<p>程序访问</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">ThreadLocal&lt;string&gt; tlocalSex = new ThreadLocal&lt;string&gt;();\ntlocalSex.Value = \"女博士\";\n//声明一个子线程\nvar t1 = new Thread(() =&gt;\n{\n    Debug.WriteLine($\"子线程中读取数据：{tlocalSex.Value}\");\n});\nt1.Start();\n//主线程中读取数据\nDebug.WriteLine($\"主线程中读取数据：{tlocalSex.Value}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">主线程中读取数据：女博士\n子线程中读取数据：\n</code></pre>\n<h3><a id=\"8_371\"></a>8、内存栅栏</h3>\n<p>当多个线程共享一个变量的时候，在Release模式的优化下，子线程会将共享变量加载到cup Cache中，导致主线程不能使用该变量而无法运行</p>\n<h4><a id=\"1Release_375\"></a>（1）默认情况(Release模式主线程不能正常运行)</h4>\n<pre><code class=\"prism language-C#\">var isStop = false;\nvar t = new Thread(() =&gt;\n{\n    var isSuccess = false;\n    while (!isStop)\n    {\n        isSuccess = !isSuccess;\n    }\n    Trace.WriteLine(\"子线程执行成功\");\n});\nt.Start();\nThread.Sleep(1000);\nisStop = true;\nt.Join();\nTrace.WriteLine(\"主线程执行结束\");\n</code></pre>\n<h4><a id=\"2MemoryBarrierRelease_395\"></a>（2）MemoryBarrier解决共享变量（Release模式下可以正常运行）</h4>\n<p>在此方法之前的内存写入都要及时从cpu cache中更新到memory；在此方法之后的内存读取都要从memory中读取，而不是cpu cache。</p>\n<pre><code class=\"prism language-C#\">var isStop = false;\nvar t = new Thread(() =&gt;\n{\n    var isSuccess = false;\n    while (!isStop)\n    {\n        Thread.MemoryBarrier();\n        isSuccess = !isSuccess;\n    }\n    Trace.WriteLine(\"子线程执行成功\");\n});\nt.Start();\nThread.Sleep(1000);\nisStop = true;\nt.Join();\nTrace.WriteLine(\"主线程执行结束\");\n</code></pre>\n<h4><a id=\"3VolatileReadRelease_418\"></a>（3）VolatileRead解决共享变量（Release模式下可以正常运行）</h4>\n<pre><code class=\"prism language-C#\">var isStop = 0;\nvar t = new Thread(() =&gt;\n{\n    var isSuccess = false;\n    while (isStop == 0)\n    {\n        Thread.VolatileRead(ref isStop);\n        isSuccess = !isSuccess;\n    }\n    Trace.WriteLine(\"子线程执行成功\");\n});\nt.Start();\nThread.Sleep(1000);\nisStop = 1;\nt.Join();\nTrace.WriteLine(\"主线程执行结束\");\n</code></pre>\n<h2><a id=\"ThreadPool_439\"></a>三、ThreadPool</h2>\n<p>.NET Framework2.0时代，出现了一个线程池ThreadPool，是一种池化思想，如果需要使用线程，就可以直接到线程池中去获取直接使用，如果使用完毕，在自动的回放到线程池去；</p>\n<h3><a id=\"1ThreadPool_443\"></a>1、ThreadPool好处</h3>\n<p>不需要程序员对线程的数量管控,提高性能，防止滥用，去掉了很多在Thread中没有必要的Api</p>\n<h3><a id=\"2_447\"></a>2、线程池如何分配一个线程</h3>\n<p>QueueUserWorkItem方法，将方法排入队列以便开启异步线程，它有两个重载。</p>\n<ul><li>QueueUserWorkItem(WaitCallback callBack)，WaitCallback是一个有一个object类型参数且无返回值的委托。</li><li>QueueUserWorkItem(WaitCallback callBack, object state)，WaitCallback是一个有一个object类型参数且无返回值的委托，state即WaitCallback中需要的参数， 不推荐这么使用，存在拆箱装箱的转换问题，影响性能。</li></ul>\n<pre><code class=\"prism language-C#\">//无参数\nThreadPool.QueueUserWorkItem(o =&gt;this.DoSomething(\"张三\"));\n//一个参数\nThreadPool.QueueUserWorkItem(o =&gt; this.DoSomething(\"张三\"), \"12345\");\n</code></pre>\n<h3><a id=\"3_461\"></a>3、线程等待</h3>\n<p>（1）定义一个监听ManualResetEvent<br/> （2）通过ManualResetEvent.WaitOne等待<br/> （3）等到ManualResetEvent.Set方法执行了，主线程等待的这个WaitOne()就继续往后执行</p>\n<pre><code class=\"prism language-C#\">ManualResetEvent resetEvent = new ManualResetEvent(false);\nThreadPool.QueueUserWorkItem(o =&gt;\n{\n    this.DoSomething(o.ToString());\n    resetEvent.Set();\n}, \"张三\");\nresetEvent.WaitOne();\n</code></pre>\n<h3><a id=\"4_477\"></a>4、线程池如何控制线程数量</h3>\n<p>如果通过SetMinThreads/SetMaxThreads来设置线程的数量，不建议大家去这样控制线程数量，这个数量访问是在当前进程中是全局的，错误配置可能影响程序的正常运行</p>\n<pre><code class=\"prism language-C#\">{\n    //线程池中的工作线程数\n    int workerThreads = 4;\n    //线程池中异步 I/O 线程的数目\n    int completionPortThreads = 4;\n    //设置最小数量\n    ThreadPool.SetMinThreads(workerThreads, completionPortThreads);\n}\n{\n    int workerThreads = 8;\n    int completionPortThreads = 8;\n    //设置最大数量\n    ThreadPool.SetMaxThreads(workerThreads, completionPortThreads);\n}\n{\n    ThreadPool.GetMinThreads(out int workerThreads, out int completionPortThreads);\n    Debug.WriteLine($\"当前进程最小的工作线程数量：{workerThreads}\");\n    Debug.WriteLine($\"当前进程最小的IO线程数量：{completionPortThreads}\");\n}\n{\n    ThreadPool.GetMaxThreads(out int workerThreads, out int completionPortThreads);\n    Debug.WriteLine($\"当前进程最大的工作线程数量：{workerThreads}\");\n    Debug.WriteLine($\"当前进程最大的IO线程数量：{completionPortThreads}\");\n}\n</code></pre>\n<h3><a id=\"5_508\"></a>5、扩展一个定时器功能</h3>\n<p>（1）RegisterWaitForSingleObject类，但是不常用.（涉及到定时任务，建议使用Quartz.Net）</p>\n<p>（2）System.threading命名空间下的Thread类，通过查看源码，构造函数中有四个参数</p>\n<ul><li>第一个是object参数的委托</li><li>第二个是委托需要的值</li><li>第三个是调用 callback 之前延迟的时间量（以毫秒为单位）</li><li>第四个是 调用 callback 的时间间隔（以毫秒为单位）</li></ul>\n<pre><code class=\"prism language-C#\">//每隔3s开启一个线程执行业务逻辑\nThreadPool.RegisterWaitForSingleObject(new AutoResetEvent(true), new WaitOrTimerCallback((obj, b) =&gt; this.DoSomething(\"张三\")), \"hello world\", 3000, false);\n//效果类似于Timer定时器：2秒后开启该线程，然后每隔3s调用一次\nSystem.Threading.Timer timer = new System.Threading.Timer((n) =&gt; this.DoSomething(\"李四\"), \"1\", 2000, 3000);\n</code></pre>\n<h2><a id=\"Task_526\"></a>四、Task</h2>\n<h3><a id=\"1Task_528\"></a>1、Task出现背景</h3>\n<p>在前面的章节介绍过，Task出现之前，微软的多线程处理方式有：Thread→ThreadPool→委托的异步调用，虽然也可以基本业务需要的多线程场景，但它们在多个线程的等待处理方面、资源占用方面、线程延续和阻塞方面、线程的取消方面等都显得比较笨拙，在面对复杂的业务场景下，显得有点捉襟见肘了。正是在这种背景下，Task应运而生。</p>\n<p>Task是微软在.Net 4.0时代推出来的，也是微软极力推荐的一种多线程的处理方式，Task看起来像一个Thread，实际上，它是在ThreadPool的基础上进行的封装，Task的控制和扩展性很强，在线程的延续、阻塞、取消、超时等方面远胜于Thread和ThreadPool。</p>\n<h3><a id=\"2Task_534\"></a>2、Task开启线程有哪些方式</h3>\n<h4><a id=\"1new_TaskStart_536\"></a>（1）new Task().Start()</h4>\n<pre><code class=\"prism language-C#\">Task task = new Task(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\ntask.Start();\nTask&lt;int&gt; task2 = new Task&lt;int&gt;(() =&gt;\n{\n    return DateTime.Now.Year;\n});\ntask2.Start();\nint result = task2.Result;\nDebug.WriteLine($\"result：{result}\");\n</code></pre>\n<h4><a id=\"2TaskRun_553\"></a>（2）Task.Run()</h4>\n<pre><code class=\"prism language-C#\">Task.Run(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\nTask&lt;int&gt; task2 = Task.Run&lt;int&gt;(() =&gt;\n{\n    return DateTime.Now.Year;\n});\nint result = task2.Result;\nDebug.WriteLine($\"result：{result}\");\n</code></pre>\n<h4><a id=\"3TaskFactoryStartNew_568\"></a>（3）Task.Factory.StartNew()</h4>\n<pre><code class=\"prism language-C#\">TaskFactory factory = Task.Factory;\nfactory.StartNew(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\nTask&lt;int&gt; task2 = factory.StartNew&lt;int&gt;(() =&gt;\n{\n    return DateTime.Now.Year;\n});\nint result = task2.Result;\nDebug.WriteLine($\"result：{result}\");\n</code></pre>\n<h4><a id=\"4new_TaskRunSynchronously_584\"></a>（4）new Task().RunSynchronously()（同步方式，上面三种异步方式）</h4>\n<pre><code class=\"prism language-C#\">Task task = new Task(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\ntask.RunSynchronously();\nTask&lt;int&gt; task2 = new Task&lt;int&gt;(() =&gt;\n{\n    return DateTime.Now.Year;\n});\ntask2.RunSynchronously();\nint result = task2.Result;\nDebug.WriteLine($\"result：{result}\");\n</code></pre>\n<h3><a id=\"3_601\"></a>3、线程等待</h3>\n<h4><a id=\"1taskWait_603\"></a>（1）task.Wait()</h4>\n<p>等待task内部执行完毕，才会往后直行，卡主线程，Task实例方法<br/> task.Wait(1000);//等待1000毫秒后就往后直行不管有没有执行结束<br/> task.Wait(TimeSpan.FromMilliseconds(1000));//等待1000毫秒后就往后直行不管有没有执行结束</p>\n<pre><code class=\"prism language-C#\">Task task = Task.Run(() =&gt;\n  {\n      this.DoSomething(\"张三\");\n  });\ntask.Wait();\n//task.Wait(TimeSpan.FromMilliseconds(1000));\n//task.Wait(1000);\n</code></pre>\n<h4><a id=\"2WaitAny_619\"></a>（2）WaitAny</h4>\n<p>某一个任务执行结束后，去触发一个动作，卡主线程，Task静态方法</p>\n<p>数据有可能是来自于第三方接口，缓存，数据库，查询的时候，我们不确定，开启几个线程同时查询，只要一个返回了就返回界面</p>\n<pre><code class=\"prism language-C#\">List&lt;Task&gt; taskList = new List&lt;Task&gt;();\nTaskFactory factory = new TaskFactory();\ntaskList.Add(factory.StartNew(()=&gt; { Debug.WriteLine(\"查询数据库\"); }));\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询缓存\"); }));\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询接口\"); }));\nTask.WaitAny(taskList.ToArray());\nDebug.WriteLine($\"查到数据，返回界面！\");\n</code></pre>\n<h4><a id=\"3WaitAll_635\"></a>（3）WaitAll</h4>\n<p>所有任务执行完成后，去触发一个动作，卡主线程，Task静态方法<br/> 数据是来自于第三方接口，缓存，数据库，查询的时候，开启几个线程同时查询，等所有数据全部查询出来，一起返回界面</p>\n<pre><code class=\"prism language-C#\">List&lt;Task&gt; taskList = new List&lt;Task&gt;();\nTaskFactory factory = new TaskFactory();\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询数据库\"); }));\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询缓存\"); }));\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询接口\"); }));\nTask.WaitAll(taskList.ToArray());\nDebug.WriteLine($\"查到数据，返回界面！\");\n</code></pre>\n<h4><a id=\"4WhenAny_650\"></a>（4）WhenAny</h4>\n<p>与下面ContinueWith配合执行,当传入的线程中任何一个线程执行完毕，继续执行ContinueWith中的任务(属于开启新线程，不卡主线程)，Task静态方法</p>\n<pre><code class=\"prism language-C#\">List&lt;Task&gt; taskList = new List&lt;Task&gt;();\nTaskFactory factory = new TaskFactory();\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询数据库\"); }));\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询缓存\"); }));\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询接口\"); }));\nTask.WhenAny(taskList.ToArray()).ContinueWith((n) =&gt; { Debug.WriteLine($\"查到数据，返回界面！\"); });\n</code></pre>\n<h4><a id=\"5WhenAll_663\"></a>（5）WhenAll</h4>\n<p>当其中所有线程执行完成后，新开启了一个线程执行，继续执行新业务，所以执行过程中，不卡主线程，Task静态方法</p>\n<pre><code class=\"prism language-C#\">List&lt;Task&gt; taskList = new List&lt;Task&gt;();\nTaskFactory factory = new TaskFactory();\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询数据库\"); }));\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询缓存\"); }));\ntaskList.Add(factory.StartNew(() =&gt; { Debug.WriteLine(\"查询接口\"); }));\nTask.WhenAll(taskList.ToArray()).ContinueWith((n) =&gt; { Debug.WriteLine($\"查到数据，返回界面！\"); });\n</code></pre>\n<h4><a id=\"6ContinueWhenAny_676\"></a>（6）ContinueWhenAny</h4>\n<p>某一个任务执行结束后，去触发一个动作，不卡主线程，TaskFactory实例方法，等价于WhenAny+ContinueWith</p>\n<pre><code class=\"prism language-C#\">List&lt;Task&gt; taskList = new List&lt;Task&gt;();\nTaskFactory factory = new TaskFactory();\ntaskList.Add(factory.StartNew(obj =&gt; Coding(\"张三\", \"数据库设计\"), \"张三\"));\ntaskList.Add(factory.StartNew(obj =&gt; Coding(\"李四\", \"接口对接\"), \"李四\"));\ntaskList.Add(factory.StartNew(obj =&gt; Coding(\"王五\", \"Webapi\"), \"王五\"));\ntaskList.Add(factory.StartNew(obj =&gt; Coding(\"赵六\", \"前端页面\"), \"赵六\"));\nfactory.ContinueWhenAny(taskList.ToArray(), ts =&gt;\n{\n    Debug.WriteLine($\"{ts.AsyncState}同学开发完毕，田七开始测试！\");\n});\n</code></pre>\n<h4><a id=\"7ContinueWhenAll_693\"></a>（7）ContinueWhenAll</h4>\n<p>所有任务执行完成后，去触发一个动作，不卡主线程，TaskFactory实例方法，等价于WhenAll+ContinueWith</p>\n<pre><code class=\"prism language-C#\">List&lt;Task&gt; taskList = new List&lt;Task&gt;();\nTaskFactory factory = new TaskFactory();\ntaskList.Add(factory.StartNew(obj =&gt; Coding(\"张三\", \"数据库设计\"), \"张三\"));\ntaskList.Add(factory.StartNew(obj =&gt; Coding(\"李四\", \"接口对接\"), \"李四\"));\ntaskList.Add(factory.StartNew(obj =&gt; Coding(\"王五\", \"Webapi\"), \"王五\"));\ntaskList.Add(factory.StartNew(obj =&gt; Coding(\"赵六\", \"前端页面\"), \"赵六\"));\nfactory.ContinueWhenAll(taskList.ToArray(), ts =&gt;\n{\n    Debug.WriteLine($\"所有人开发完毕，我们一起庆祝一下吃个饭！\");\n});\n</code></pre>\n<h3><a id=\"4TaskCreationOptions_710\"></a>4、TaskCreationOptions枚举类详解</h3>\n<p>一个Task内部，可以开启线程，Task内部的线程可以理解为子线程，Task为父线程，创建Task实例的时候可以传入TaskCreationOptions枚举参数来影响线程的运行方式。</p>\n<h4><a id=\"1None_714\"></a>（1）None，默认情况</h4>\n<p>父线程不会等待子线程执行结束才结束。</p>\n<pre><code class=\"prism language-C#\">Task task = new Task(() =&gt;\n{\n    Debug.WriteLine($\"task--start--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    Task task1 = new Task(() =&gt;\n    {\n        this.DoSomething(\"task1\");\n    });\n    Task task2 = new Task(() =&gt;\n    {\n        this.DoSomething(\"task2\");\n    });\n    task1.Start();\n    task2.Start();\n    Debug.WriteLine($\"task--end--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n});\ntask.Start();\ntask.Wait();\n</code></pre>\n<h4><a id=\"2AttachedToParent_738\"></a>（2）AttachedToParent</h4>\n<p>子线程附加到父线程，父线程必须等待所有子线程执行结束才能结束，相当于Task.WaitAll(task1, task2)。</p>\n<pre><code class=\"prism language-C#\">Task task = new Task(() =&gt;\n{\n    Debug.WriteLine($\"task--start--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    Task task1 = new Task(() =&gt;\n    {\n        this.DoSomething(\"task1\");\n    }, TaskCreationOptions.AttachedToParent);\n    Task task2 = new Task(() =&gt;\n    {\n        this.DoSomething(\"task2\");\n    }, TaskCreationOptions.AttachedToParent);\n    task1.Start();\n    task2.Start();\n    Debug.WriteLine($\"task--end--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n});\ntask.Start();\ntask.Wait();\n</code></pre>\n<h4><a id=\"3DenyChildAttach_762\"></a>（3）DenyChildAttach</h4>\n<p>不允许子任务附加到父任务上，反AttachedToParent，和默认效果一样。</p>\n<pre><code class=\"prism language-C#\">Task task = new Task(() =&gt;\n{\n    Debug.WriteLine($\"task--start--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    Task task1 = new Task(() =&gt;\n    {\n        this.DoSomething(\"task1\");\n    }, TaskCreationOptions.AttachedToParent);\n    Task task2 = new Task(() =&gt;\n    {\n        this.DoSomething(\"task2\");\n    }, TaskCreationOptions.AttachedToParent);\n    task1.Start();\n    task2.Start();\n    Debug.WriteLine($\"task--end--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n}, TaskCreationOptions.DenyChildAttach);\ntask.Start();\ntask.Wait();\n</code></pre>\n<h4><a id=\"4PreferFairness_786\"></a>（4）PreferFairness</h4>\n<p>相对来说比较公平执行的先申请的线程优先执行。</p>\n<pre><code class=\"prism language-C#\">Task task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n}, TaskCreationOptions.PreferFairness);\nTask task2 = new Task(() =&gt;\n{\n    this.DoSomething(\"task2\");\n}, TaskCreationOptions.PreferFairness);\ntask1.Start();\ntask2.Start();\n</code></pre>\n<h4><a id=\"5LongRunning_803\"></a>（5）LongRunning</h4>\n<p>事先知道是长时间执行的线程就加这个参数，线程调度会优化。</p>\n<h4><a id=\"6RunContinuationsAsynchronously_807\"></a>（6）RunContinuationsAsynchronously</h4>\n<p>强制以异步方式执行添加到当前任务的延续。</p>\n<h4><a id=\"7HideScheduler_811\"></a>（7）HideScheduler</h4>\n<p>防止环境计划程序被视为已创建任务的当前计划程序。 这意味着像 StartNew 或 ContinueWith 创建任务的执行操作将被视为 System.Threading.Tasks.TaskScheduler.Default当前计划程序。</p>\n<h3><a id=\"5TaskContinuationOptions_815\"></a>5、TaskContinuationOptions枚举类详解</h3>\n<p>ContinueWith可以传入TaskContinuationOptions枚举类参数来影响线程的运行方式。</p>\n<h4><a id=\"1None_819\"></a>（1）None，默认情况</h4>\n<p>任务顺序执行。</p>\n<pre><code class=\"prism language-C#\">Task task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n});\n\nTask task2 = task1.ContinueWith(t =&gt;\n  {\n      this.DoSomething(\"task2\");\n  });\n\nTask task3=task2.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task3\");\n});\n\ntask1.Start();\n</code></pre>\n<h4><a id=\"2LazyCancellation_842\"></a>（2）LazyCancellation</h4>\n<p>取消该线程，该线程的前一个线程和后一个线程顺序执行。</p>\n<pre><code class=\"prism language-C#\">CancellationTokenSource source = new CancellationTokenSource();\nsource.Cancel();\n\nTask task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n});\n\nTask task2 = task1.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task2\");\n}, source.Token,TaskContinuationOptions.LazyCancellation, TaskScheduler.Current);\n\nTask task3 = task2.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task3\");\n});\n\ntask1.Start();\n</code></pre>\n<h4><a id=\"3ExecuteSynchronously_868\"></a>（3）ExecuteSynchronously</h4>\n<p>前后任务由同一个线程执行。</p>\n<pre><code class=\"prism language-C#\">Task task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n});\n\nTask task2 = task1.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task2\");\n},TaskContinuationOptions.ExecuteSynchronously);\n\ntask1.Start();\n</code></pre>\n<p>（4）NotOnRanToCompletion</p>\n<p>延续任务必须在前面task非完成状态才能执行。</p>\n<pre><code class=\"prism language-C#\">Task task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n    //异常了，表示未执行完成，task2能执行\n    //不异常，表示执行完成，task2不能执行\n    throw new Exception(\"手动制造异常，表示不能执行完毕\");\n});\n\nTask task2 = task1.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task2\");\n}, TaskContinuationOptions.NotOnRanToCompletion);\n\ntask1.Start();\n</code></pre>\n<h4><a id=\"5OnlyOnRanToCompletion_907\"></a>（5）OnlyOnRanToCompletion</h4>\n<p>延续任务必须在前面task完成状态才能执行，和NotOnRanToCompletion正好相反。</p>\n<pre><code class=\"prism language-C#\">Task task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n    //异常了，表示未执行完成，task2不能执行\n    //不异常，表示执行完成，task2能执行\n    throw new Exception(\"手动制造异常，表示不能执行完毕\");\n});\n\nTask task2 = task1.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task2\");\n}, TaskContinuationOptions.OnlyOnRanToCompletion);\n\ntask1.Start();\n</code></pre>\n<p>（6）NotOnFaulted</p>\n<p>延续任务必须在前面task完成状态才能执行，效果和OnlyOnRanToCompletion差不多。</p>\n<pre><code class=\"prism language-C#\">Task task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n    //throw new Exception(\"手动制造异常\");\n});\n\nTask task2 = task1.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task2\");\n}, TaskContinuationOptions.NotOnFaulted);\n\ntask1.Start();\n</code></pre>\n<h4><a id=\"7OnlyOnFaulted_947\"></a>（7）OnlyOnFaulted</h4>\n<p>延续任务必须在前面task未完成状态才能执行，效果和NotOnRanToCompletion差不多。</p>\n<pre><code class=\"prism language-C#\">Task task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n    //throw new Exception(\"手动制造异常\");\n});\n\nTask task2 = task1.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task2\");\n}, TaskContinuationOptions.OnlyOnFaulted);\n\ntask1.Start();\n</code></pre>\n<h4><a id=\"8OnlyOnCanceled_966\"></a>（8）OnlyOnCanceled</h4>\n<p>前面的任务未被取消才执行后面的任务。</p>\n<pre><code class=\"prism language-C#\">CancellationTokenSource cts = new CancellationTokenSource();\nTask task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n    cts.Cancel();\n});\n\nTask task2 = task1.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task2\");\n}, TaskContinuationOptions.OnlyOnCanceled);\n\ntask1.Start();\n</code></pre>\n<h4><a id=\"9NotOnCanceled_986\"></a>（9）NotOnCanceled</h4>\n<p>前面的任务被取消才执行后面的任务。</p>\n<pre><code class=\"prism language-C#\">CancellationTokenSource cts = new CancellationTokenSource();\nTask task1 = new Task(() =&gt;\n{\n    this.DoSomething(\"task1\");\n    cts.Cancel();\n});\n\nTask task2 = task1.ContinueWith(t =&gt;\n{\n    this.DoSomething(\"task2\");\n}, TaskContinuationOptions.NotOnCanceled);\n\ntask1.Start();\n</code></pre>\n<h4><a id=\"10PreferFairness_1006\"></a>（10）PreferFairness</h4>\n<p>System.Threading.Tasks.TaskScheduler 以一种尽可能公平的方式安排任务，这意味着较早安排的任务将更可能较早运行，而较晚安排运行的任务将更可能较晚运行。</p>\n<h4><a id=\"11LongRunning_1010\"></a>（11）LongRunning</h4>\n<p>指定某个任务将是运行时间长、粗粒度的操作。 它会向 System.Threading.Tasks.TaskScheduler 提示，过度订阅可能是合理的。</p>\n<h4><a id=\"12AttachedToParent_1014\"></a>（12）AttachedToParent</h4>\n<p>指定将任务附加到任务层次结构中的某个父级。</p>\n<h4><a id=\"13DenyChildAttach_1018\"></a>（13）DenyChildAttach</h4>\n<p>如果尝试附有子任务到创建的任务，指定 System.InvalidOperationException 将被引发。</p>\n<h4><a id=\"14HideScheduler_1022\"></a>（14）HideScheduler</h4>\n<p>防止环境计划程序被视为已创建任务的当前计划程序。 这意味着像 StartNew 或 ContinueWith 创建任务的执行操作将被视为 System.Threading.Tasks.TaskScheduler.Default当前计划程序。</p>\n<h3><a id=\"6_1026\"></a>6、延迟执行</h3>\n<p>Task.Delay(),一般和ContinueWith配合使用，执行的动作就是ContinueWith内部的委托，委托的执行有可能是一个全新的线程，也有可能是主线程。</p>\n<pre><code class=\"prism language-C#\">//开启线程后，线程等待3000毫秒后执行动作，不卡主线程\nTask.Delay(3000).ContinueWith(t =&gt;\n{\n    this.DoSomething(\"张三\");\n});\n</code></pre>\n<h2><a id=\"Task_1038\"></a>五、Task进阶</h2>\n<h3><a id=\"1_1040\"></a>1、多线程捕获异常</h3>\n<h4><a id=\"1_1042\"></a>（1）线程不等待，捕捉不到异常</h4>\n<p>多线程中，如果发生异常，使用try-catch包裹，捕捉不到异常，异常还没发生，主线程已经执行结束</p>\n<pre><code class=\"prism language-C#\">//捕捉不到异常\ntry\n{\n    Task task = Task.Run(() =&gt;\n    {\n        int i = 0;\n        int j = 10;\n        int k = j / i; //尝试除以0，会异常\n    });\n}\ncatch (AggregateException aex)\n{\n    foreach (var exception in aex.InnerExceptions)\n    {\n        Debug.WriteLine($\"线程不等待：异常{exception.Message}\");\n    }\n}\n</code></pre>\n<h4><a id=\"2_1066\"></a>（2）线程不等待，线程内部捕捉异常</h4>\n<p>多线程中，如果要捕捉异常，可以在线程内部try-catch，可以捕捉到异常</p>\n<pre><code class=\"prism language-C#\">//捕捉到异常\ntry\n{\n    Task task = Task.Run(() =&gt;\n    {\n        try\n        {\n            int i = 0;\n            int j = 10;\n            int k = j / i; //尝试除以0，会异常\n        }\n        catch (Exception ex)\n        {\n            Debug.WriteLine($\"线程内异常{ex.Message}\");\n        }\n    });\n}\ncatch (AggregateException aex)\n{\n    foreach (var exception in aex.InnerExceptions)\n    {\n        Debug.WriteLine($\"线程不等待：异常{exception.Message}\");\n    }\n}\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">线程内异常Attempted to divide by zero.\n</code></pre>\n<h4><a id=\"3_1103\"></a>（3）线程等待，能够捕获异常</h4>\n<ul><li> <p>多线程中，如果要捕捉异常，需要设置主线程等待子线程执行结束，可以捕捉到异常</p> </li><li> <p>多线程内部发生异常后，抛出的异常类型是system.AggregateException</p> <pre><code class=\"prism language-C#\">//捕捉到异常\ntry\n{\nTask task = Task.Run(() =&gt;\n{\n    int i = 0;\n    int j = 10;\n    int k = j / i; //尝试除以0，会异常\n});\n//线程等待\ntask.Wait();\n}\ncatch (AggregateException aex)\n{\nforeach (var exception in aex.InnerExceptions)\n{\n    Debug.WriteLine($\"线程等待：异常{exception.Message}\");\n}\n}\n</code></pre> </li></ul>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">线程等待：异常Attempted to divide by zero.\n</code></pre>\n<h3><a id=\"2_1136\"></a>2、线程取消</h3>\n<p>线程取消是不能从外部取消的，线程取消的实质还是通过变量去控制程序的运行和结束，正常结束，或者发生异常结束</p>\n<h4><a id=\"1Cancel_1140\"></a>（1）标准取消Cancel</h4>\n<ul><li> <p>实例化一个CancellationTokenSource</p> </li><li> <p>包含了一个IsCancellationRequested属性，属性值默认为false</p> </li><li> <p>包含了一个Cancel方法，Cancel方法如果被执行，IsCancellationRequested属性值马上更新成true</p> </li><li> <p>线程内部判断IsCancellationRequested值，结束线程</p> </li><li> <p>包含了一个Token属性，可以Register注册一个委托，创建Task的时候传入，线程结束后调用</p> </li></ul>\n<pre><code class=\"prism language-C#\">//初始化一个CancellationTokenSource实例\nCancellationTokenSource source = new CancellationTokenSource();\n\n//注册一个线程取消后执行的逻辑\nsource.Token.Register(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\n\nTask.Run(() =&gt;\n{\n    while (!source.IsCancellationRequested)\n    {\n        this.DoSomething(\"李四\", 500);\n    }\n}, source.Token);\n\n//Thread.Sleep阻塞主线程\nThread.Sleep(2000);\n//Cancel方法更新IsCancellationRequested的值\nsource.Cancel();\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">DoSomething--Start--李四--04--19:04:32.592\nDoSomething--End--李四--04--19:04:33.094\nDoSomething--Start--李四--04--19:04:33.096\nDoSomething--End--李四--04--19:04:33.597\nDoSomething--Start--李四--04--19:04:33.598\nDoSomething--End--李四--04--19:04:34.100\nDoSomething--Start--李四--04--19:04:34.101\nDoSomething--Start--张三--01--19:04:34.587\nDoSomething--End--李四--04--19:04:34.604\nDoSomething--End--张三--01--19:04:36.588\n</code></pre>\n<h4><a id=\"2CancelAfter_1188\"></a>（2）延迟取消CancelAfter</h4>\n<pre><code class=\"prism language-C#\">CancellationTokenSource source = new CancellationTokenSource();\n//注册一个线程取消后执行的逻辑\nsource.Token.Register(() =&gt;\n{    \n    this.DoSomething(\"张三\");\n});\n\nTask.Run(() =&gt;\n{\n    while (!source.IsCancellationRequested)\n    {\n        this.DoSomething(\"李四\", 500);\n    }\n}, source.Token);\n\n//2s后自动取消，等待取消期间不阻塞主线程\nsource.CancelAfter(new TimeSpan(0, 0, 0, 2));\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">DoSomething--Start--李四--04--18:49:48.601\nDoSomething--End--李四--04--18:49:49.102\nDoSomething--Start--李四--04--18:49:49.104\nDoSomething--End--李四--04--18:49:49.606\nDoSomething--Start--李四--04--18:49:49.607\nDoSomething--End--李四--04--18:49:50.109\nDoSomething--Start--李四--04--18:49:50.110\nDoSomething--Start--张三--05--18:49:50.599\nDoSomething--End--李四--04--18:49:50.612\nDoSomething--End--张三--05--18:49:52.602\n</code></pre>\n<h4><a id=\"3CancellationTokenSource_1225\"></a>（3）CancellationTokenSource构造函数取消</h4>\n<pre><code class=\"prism language-C#\">//2s后自动取消\nCancellationTokenSource source = new CancellationTokenSource(2000);\n//注册一个线程取消后执行的逻辑\nsource.Token.Register(() =&gt;\n{\n    this.DoSomething(\"张三\");\n});\n\nTask.Run(() =&gt;\n{\n    while (!source.IsCancellationRequested)\n    {\n        this.DoSomething(\"李四\", 500);\n    }\n}, source.Token);\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">DoSomething--Start--李四--04--19:17:11.726\nDoSomething--End--李四--04--19:17:12.228\nDoSomething--Start--李四--04--19:17:12.229\nDoSomething--End--李四--04--19:17:12.731\nDoSomething--Start--李四--04--19:17:12.733\nDoSomething--End--李四--04--19:17:13.235\nDoSomething--Start--李四--04--19:17:13.237\nDoSomething--Start--张三--05--19:17:13.720\nDoSomething--End--李四--04--19:17:13.741\nDoSomething--End--张三--05--19:17:15.722\n</code></pre>\n<h4><a id=\"4CreateLinkedTokenSource_1260\"></a>（4）CreateLinkedTokenSource组合取消</h4>\n<p>利用CreateLinkedTokenSource构建CancellationTokenSource的组合体，其中任何一个体取消，则组合体就取消</p>\n<pre><code class=\"prism language-C#\">CancellationTokenSource source1 = new CancellationTokenSource();\nCancellationTokenSource source2 = new CancellationTokenSource();\nCancellationTokenSource source3 = new CancellationTokenSource();\nvar combineSource = CancellationTokenSource.CreateLinkedTokenSource(source1.Token, source2.Token,source3.Token);\nsource2.Cancel();\nDebug.WriteLine($\"source1.IsCancellationRequested={source1.IsCancellationRequested}\");\nDebug.WriteLine($\"source2.IsCancellationRequested={source2.IsCancellationRequested}\");\nDebug.WriteLine($\"source3.IsCancellationRequested={source3.IsCancellationRequested}\");\nDebug.WriteLine($\"combineSource.IsCancellationRequested={combineSource.IsCancellationRequested}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">source1.IsCancellationRequested<span class=\"token operator\">=</span>False\nsource2.IsCancellationRequested<span class=\"token operator\">=</span>True\nsource3.IsCancellationRequested<span class=\"token operator\">=</span>False\ncombineSource.IsCancellationRequested<span class=\"token operator\">=</span>True\n</code></pre>\n<h4><a id=\"5CancellationToken_1285\"></a>（5）CancellationToken类监控取消</h4>\n<p>取消之后，调用ThrowIfCancellationRequested就会抛异常，不取消，不会抛异常</p>\n<pre><code class=\"prism language-C#\">CancellationTokenSource source1 = new CancellationTokenSource();\nCancellationTokenSource source2 = new CancellationTokenSource();\nCancellationTokenSource source3 = new CancellationTokenSource();                //等价于上面那句话\nvar combineSource = CancellationTokenSource.CreateLinkedTokenSource(source1.Token, source2.Token,source3.Token);\nsource2.Cancel();\ntry\n{\n    combineSource.Token.ThrowIfCancellationRequested();\n}\ncatch (Exception)\n{\n    Debug.WriteLine(\"报错了\");\n}\nDebug.WriteLine($\"source1.IsCancellationRequested={source1.IsCancellationRequested}\");\nDebug.WriteLine($\"source2.IsCancellationRequested={source2.IsCancellationRequested}\");\nDebug.WriteLine($\"source3.IsCancellationRequested={source3.IsCancellationRequested}\");\nDebug.WriteLine($\"combineSource.IsCancellationRequested={combineSource.IsCancellationRequested}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">报错了\nsource1.IsCancellationRequested<span class=\"token operator\">=</span>False\nsource2.IsCancellationRequested<span class=\"token operator\">=</span>True\nsource3.IsCancellationRequested<span class=\"token operator\">=</span>False\ncombineSource.IsCancellationRequested<span class=\"token operator\">=</span>True\n</code></pre>\n<h3><a id=\"3_1319\"></a>3、线程返回值</h3>\n<h4><a id=\"1_1321\"></a>（1）线程开启类的返回值</h4>\n<pre><code class=\"prism language-C#\">Task&lt;string&gt; task1 = Task.Run(() =&gt;\n{\n    this.DoSomething(\"张三\");\n    return \"ok\";\n});                \n//要读取返回值，会阻塞主线程\nDebug.WriteLine($\"我是主线程，我要读取子线程task1的返回值为：{task1.Result}--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">DoSomething--Start--张三--06--19:45:49.765\nDoSomething--End--张三--06--19:45:51.773\n我是主线程，我要读取子线程task1的返回值为：ok--01--19:45:51.774\n</code></pre>\n<h4><a id=\"2_1341\"></a>（2）线程延续类的返回值</h4>\n<pre><code class=\"prism language-C#\">Task&lt;int&gt; task1 = Task.Run(() =&gt;\n{\n    this.DoSomething(\"task1\");\n    return 2;\n});\n\nvar task2 = task1.ContinueWith((t) =&gt;\n{\n    this.DoSomething(\"task2\");\n\n    //这里的t代表 task1\n    var num = t.Result + 2;\n    return num.ToString();\n});\n\nDebug.WriteLine($\"我是主线程，我要读取子线程task1的返回值为：{task1.Result}--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\nDebug.WriteLine($\"我是主线程，我要读取子线程task2的返回值为：{task2.Result}--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">DoSomething--Start--task1--05--19:52:11.346\nDoSomething--End--task1--05--19:52:13.349\n我是主线程，我要读取子线程task1的返回值为：2--01--19:52:13.357\nDoSomething--Start--task2--04--19:52:13.359\nDoSomething--End--task2--04--19:52:15.361\n我是主线程，我要读取子线程task2的返回值为：4--01--19:52:15.363\n</code></pre>\n<h4><a id=\"3_1374\"></a>（3）线程条件延续类</h4>\n<pre><code class=\"prism language-C#\">Task&lt;int&gt; task1 = Task.Run(() =&gt;\n{\n    this.DoSomething(\"task1\");\n    return 2;\n});\nTask&lt;int&gt; task2 = Task.Run(() =&gt;\n{\n    this.DoSomething(\"task2\");\n    return 4;\n});\n\nvar task = Task.WhenAny(new Task&lt;int&gt;[2] { task1, task2 });\n\n//下面的值可能是1，也可能是2\nDebug.WriteLine($\"我是主线程，我要读取子线程的返回值为：{task.Result.Result}--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">DoSomething--Start--task2--04--09:05:57.574\nDoSomething--Start--task1--05--09:05:57.575\nDoSomething--End--task1--05--09:05:59.583\nDoSomething--End--task2--04--09:05:59.583\n我是主线程，我要读取子线程的返回值为：2--01--09:05:59.587\n</code></pre>\n<h3><a id=\"4_1406\"></a>4、线程安全</h3>\n<p>线程安全：一段业务逻辑，单线程执行和多线程执行后的结果如果完全一致，是线程安全的，否则就是线程不安全的</p>\n<h4><a id=\"1_1410\"></a>（1）线程安全产生的原因</h4>\n<p>线程的开启需要时间，线程开启不阻塞主线程的执行，循环10000次的时间不足够开启10000个线程的时间就会出现数据不足10000的现象出现</p>\n<blockquote>\n<p>单线程执行：这段循环完毕以后，intlist中有10000条数据</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">List&lt;int&gt; intlist = new List&lt;int&gt;();\nfor (int i = 0; i &lt; 10000; i++)\n{\n    intlist.Add(i);\n}\nDebug.WriteLine($\"intlist中有{intlist.Count}条数据\");\n</code></pre>\n<blockquote>\n<p>多线程执行：这段循环完毕以后，intlist中有多少条数据？第一次执行：9937，第二次执行：9976</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">List&lt;int&gt; intlist = new List&lt;int&gt;();\nList&lt;Task&gt; tasklist = new List&lt;Task&gt;();\nfor (int i = 0; i &lt; 10000; i++)\n{\n    Task.Run(() =&gt;\n    {\n        intlist.Add(i);\n    });\n}\nTask.WaitAll(tasklist.ToArray());\nDebug.WriteLine($\"intlist中有{intlist.Count}条数据\");\n</code></pre>\n<h4><a id=\"2_1441\"></a>（2）加锁解决线程安全问题</h4>\n<ul><li>锁的本质：是独占引用，加锁是反多线程的，可以解决线程安全问题，但是不推荐大家使用，加锁会影响性能</li><li>锁的标准写法： private readonly static object obj_Lock = new object(); 锁对象，不要去锁String锁This</li></ul>\n<pre><code class=\"prism language-C#\">List&lt;int&gt; intlist = new List&lt;int&gt;();\nList&lt;Task&gt; tasklist = new List&lt;Task&gt;();\nfor (int i = 0; i &lt; 10000; i++)\n{\n    Task.Run(() =&gt;\n    {\n        lock (obj_Lock)\n        {\n            intlist.Add(i);\n        }\n    });\n}\nTask.WaitAll(tasklist.ToArray());\nDebug.WriteLine($\"intlist中有{intlist.Count}条数据\");\n</code></pre>\n<h4><a id=\"3_1463\"></a>（3）分块执行解决线程安全问题</h4>\n<p>把执行的任务切割，然后分别开启一个线程执行，每一个线程内部执行的动作是单线程，线程安全，等待所有线程执行结束以后，再做一个统一汇总</p>\n<pre><code class=\"prism language-C#\">List&lt;int&gt; intlist = new List&lt;int&gt;();\nList&lt;int&gt; intlist2 = new List&lt;int&gt;();\nList&lt;int&gt; intlist3 = new List&lt;int&gt;();\nint Num1 = 3000;\nint Num2 = 6000;\nint Num3 = 10000;\nList&lt;Task&gt; taskList = new List&lt;Task&gt;();\ntaskList.Add(Task.Run(() =&gt;\n{\n    for (int i = 0; i &lt; Num1; i++)\n    {\n        intlist.Add(i);\n    }\n}));\ntaskList.Add(Task.Run(() =&gt;\n{\n    for (int i = Num1; i &lt; Num2; i++)\n    {\n        intlist2.Add(i);\n    }\n}));\n\ntaskList.Add(Task.Run(() =&gt;\n{\n    for (int i = Num2; i &lt; Num3; i++)\n    {\n        intlist3.Add(i);\n    }\n}));\nTask.WaitAll(taskList.ToArray());\nintlist.AddRange(intlist2);\nintlist.AddRange(intlist3);\nDebug.WriteLine($\"intlist中有{intlist.Count}条数据\");\n</code></pre>\n<h4><a id=\"4_1503\"></a>（4）使用线程安全对象</h4>\n<pre><code class=\"prism language-C#\">BlockingCollection&lt;int&gt; blockinglist = new BlockingCollection&lt;int&gt;();\nConcurrentBag&lt;int&gt; conocurrentbag = new ConcurrentBag&lt;int&gt;();\nConcurrentDictionary&lt;string, int&gt; concurrentDictionary = new ConcurrentDictionary&lt;string, int&gt;();\nConcurrentQueue&lt;int&gt; concurrentQueue = new ConcurrentQueue&lt;int&gt;();\nConcurrentStack&lt;int&gt; concurrentStack = new ConcurrentStack&lt;int&gt;();\n</code></pre>\n<h3><a id=\"5_1513\"></a>5、解决中间变量问题</h3>\n<h4><a id=\"1_1515\"></a>（1）单线程执行</h4>\n<pre><code class=\"prism language-C#\">for (int i = 0; i &lt; 5; i++)\n{\n    Debug.WriteLine($\"ThreadID={Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}_i={i}\");\n}\n</code></pre>\n<h4><a id=\"2_1524\"></a>（2）多线程执行问题</h4>\n<p>Task开启线程的时候，延迟开启，在循环的时候，不会阻塞主线程，循环很快，线程执行业务逻辑的时候，循环已经结束了，i已经变成5了，所以打出来的都是5</p>\n<pre><code class=\"prism language-C#\">for (int i = 0; i &lt; 5; i++)\n{\n    Task.Run(() =&gt;\n    {\n        Debug.WriteLine($\"ThreadID={Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}_i={i}\");\n    });\n}\n</code></pre>\n<h4><a id=\"3_1538\"></a>（3）多线程执行+中间变量</h4>\n<p>可以另外定义个变量，在每次循环的时候赋值，循环多少次，就会有多少个k，每个线程使用的是每一次循环内部的k</p>\n<pre><code class=\"prism language-C#\">for (int i = 0; i &lt; 5; i++)\n{\n    int k = i;\n    Task.Run(() =&gt;\n    {\n        Debug.WriteLine($\"ThreadID={Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}_k={ k}\");\n    });\n}\n</code></pre>\n<h2><a id=\"Parallel_1553\"></a>六、Parallel</h2>\n<h3><a id=\"1Parallel_1555\"></a>1、Parallel特点</h3>\n<ul><li>可以传入多个委托，多个委托中的内容是会开启线程来执行，执行的线程可能是新的线程，也可能是主线程</li><li>会阻塞主线程，相当于是主线程等待子线程执行结束</li></ul>\n<pre><code class=\"prism language-C#\">Parallel.Invoke(\n    () =&gt; this.DoSomething(\"张三\"),\n    () =&gt; this.DoSomething(\"李四\"),\n    () =&gt; this.DoSomething(\"王五\"),\n    () =&gt; this.DoSomething(\"赵六\"));\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">DoSomething--Start--赵六--04--11:01:20.666\nDoSomething--Start--王五--06--11:01:20.666\nDoSomething--Start--张三--01--11:01:20.666\nDoSomething--Start--李四--05--11:01:20.666\nDoSomething--End--赵六--04--11:01:22.668\nDoSomething--End--王五--06--11:01:22.696\nDoSomething--End--张三--01--11:01:22.702\nDoSomething--End--李四--05--11:01:22.703\n</code></pre>\n<ul><li>可以传入options.MaxDegreeOfParallelism来限制开启的线程数量，可以做到不影响线程池的线程数量又能控制当前执行所用的线程数量</li></ul>\n<pre><code class=\"prism language-C#\">ParallelOptions options = new ParallelOptions();\noptions.MaxDegreeOfParallelism = 2;\nParallel.Invoke(options,\n    () =&gt; this.DoSomething(\"张三\"),\n    () =&gt; this.DoSomething(\"李四\"),\n    () =&gt; this.DoSomething(\"王五\"),\n    () =&gt; this.DoSomething(\"赵六\"));\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">DoSomething--Start--张三--01--11:03:20.700\nDoSomething--Start--李四--09--11:03:20.702\nDoSomething--End--张三--01--11:03:22.704\nDoSomething--Start--王五--01--11:03:22.706\nDoSomething--End--李四--09--11:03:22.710\nDoSomething--Start--赵六--09--11:03:22.711\nDoSomething--End--王五--01--11:03:24.707\nDoSomething--End--赵六--09--11:03:24.714\n</code></pre>\n<ul><li>把Parallel包在一个Task里面实现不卡主线程</li></ul>\n<pre><code class=\"prism language-C#\">Task.Run(() =&gt;\n{\n    Parallel.Invoke(\n    () =&gt; this.DoSomething(\"张三\"),\n    () =&gt; this.DoSomething(\"李四\"),\n    () =&gt; this.DoSomething(\"王五\"),\n    () =&gt; this.DoSomething(\"赵六\"));\n});\n</code></pre>\n<h3><a id=\"2ParallelFor_1619\"></a>2、Parallel.For</h3>\n<p>实现循环开启线程执行动作，可以获取索引，可以控制开启的线程数量</p>\n<pre><code class=\"prism language-C#\">ParallelOptions options = new ParallelOptions();\noptions.MaxDegreeOfParallelism = 3;\nParallel.For(0, 10, options, index =&gt;\n{\n     Debug.WriteLine($\"index：{ index}  线程ID:  {Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}\");\n});\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">index：3  线程ID:  05\nindex：0  线程ID:  01\nindex：6  线程ID:  04\nindex：1  线程ID:  01\nindex：7  线程ID:  04\nindex：8  线程ID:  04\nindex：4  线程ID:  05\nindex：5  线程ID:  05\nindex：2  线程ID:  01\nindex：9  线程ID:  04\n</code></pre>\n<h3><a id=\"3ParallelForEach_1647\"></a>3、Parallel.ForEach</h3>\n<p>实现循环遍历数组开启线程执行动作，可以获取数组值，可以控制开启的线程数量</p>\n<pre><code class=\"prism language-C#\">List&lt;int&gt; intlist = new List&lt;int&gt;() { 1, 2, 3, 5, 7, 11, 13, 17 };\nParallelOptions options = new ParallelOptions();\noptions.MaxDegreeOfParallelism = 3;\nParallel.ForEach(intlist, options, s =&gt;\n{\n    Debug.WriteLine($\"index：{ s}  线程ID:  {Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}\");\n});\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">index：1  线程ID:  01\nindex：7  线程ID:  08\nindex：2  线程ID:  01\nindex：11  线程ID:  08\nindex：5  线程ID:  01\nindex：13  线程ID:  08\nindex：3  线程ID:  09\nindex：17  线程ID:  08\n</code></pre>\n<h2><a id=\"awaitasync_1674\"></a>七、await/async</h2>\n<h3><a id=\"1asyncawait_1676\"></a>1、async/await是什么</h3>\n<p>（1）C#5 (.NET4.5) 引入的语法糖<br/> （2）C#7.1，Main入口也可以<br/> （3）C#8.0，可以使用异步流await，foreach可以释放对象await using</p>\n<h3><a id=\"2awaitasync_1682\"></a>2、await/async用法</h3>\n<h4><a id=\"1AsyncAwait_1684\"></a>（1）无返回值，有Async，无Await</h4>\n<p>async是用来修饰方法，如果单独出现，方法会警告，不会报错，和普通的多线程方法没有什么区别，不存在线程等待的问题</p>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 无返回值，有Async，无Await\n/// &lt;/summary&gt;\nprivate async void NoReturnAsyncNoAwait()\n{\n    Console.WriteLine($\"NoReturnAsyncNoAwait Start ThreadId={Thread.CurrentThread.ManagedThreadId}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    Thread.Sleep(3000);\n    Console.WriteLine($\"NoReturnAsyncNoAwait End ThreadId={Thread.CurrentThread.ManagedThreadId}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n}\n</code></pre>\n<h4><a id=\"2AsyncAwait_1700\"></a>（2）无返回值，有Async，有Await</h4>\n<ul><li>await在方法体内部，只能放在async修饰的方法内，必须放在task前面</li><li>主线程到await这里就返回了，执行主线程任务</li><li>task中的任务执行完毕以后，继续执行await后面的后续内容，有可能是子线程，也有可能是其他线程，甚至有可能是主线程来执行</li><li>类似ContinueWith回调await后面的后续内容</li></ul>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 无返回值，有Async，有Await\n/// &lt;/summary&gt;\nprivate async void NoReturnAsyncAwait()\n{\n    Debug.WriteLine($\"NoReturnAsyncAwait--Start--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    Task task = Task.Run(() =&gt;\n    {\n        Thread.Sleep(3000);\n        Debug.WriteLine($\"Task.Run--NoReturnAsyncAwait--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    });\n\n    //主线程到await这里就返回了，执行主线程任务\n    //task中的任务执行完毕以后，继续执行await后面的后续内容，有可能是子线程，也有可能是其他线程，甚至有可能是主线程来执行\n    await task;\n\n    Debug.WriteLine($\"NoReturnAsyncAwait--End--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n\n    //类似ContinueWith回调await后面的后续内容\n    //task.ContinueWith(t =&gt;\n    //{\n    //    Debug.WriteLine($\"NoReturnAsyncAwait--End--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    //});\n}\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">btnAwaitAsync_Click--Start--01--13:40:10.935\nNoReturnAsyncAwait--Start--01--13:40:10.954\nbtnAwaitAsync_Click--End--01--13:40:10.987\nTask.Run--NoReturnAsyncAwait--05--13:40:13.992\nNoReturnAsyncAwait--End--01--13:40:14.034\n</code></pre>\n<h4><a id=\"3TaskAsyncAwait_1744\"></a>（3）返回Task，有Async，有Await</h4>\n<p>async Task == async void,Task和Task能够使用await, Task.WhenAny, Task.WhenAll等方式组合使用。Async Void 不行</p>\n<blockquote>\n<p>方法</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 无返回值，返回Task，有Async，有Await \n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nprivate async Task NoReturnTaskAsyncAwait()\n{\n    Debug.WriteLine($\"NoReturnTaskAsyncAwait--Start--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    Task task = Task.Run(() =&gt;\n    {\n        Thread.Sleep(3000);\n        Debug.WriteLine($\"Task.Run--NoReturnTaskAsyncAwait--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    });\n    await task;\n    Debug.WriteLine($\"NoReturnTaskAsyncAwait--End--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n}\n</code></pre>\n<blockquote>\n<p>方法调用</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">Task task = NoReturnTaskAsyncAwait();\nTask.WhenAny(task).ContinueWith((a)=&gt; {\n    this.DoSomething(\"张三\");\n});\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">btnAwaitAsync_Click--Start--01--14:05:33.611\nNoReturnTaskAsyncAwait--Start--01--14:05:33.624\nbtnAwaitAsync_Click--End--01--14:05:33.674\nTask.Run--NoReturnTaskAsyncAwait--04--14:05:36.686\nNoReturnTaskAsyncAwait--End--01--14:05:36.702\nDoSomething--Start--张三--06--14:05:36.718\nDoSomething--End--张三--06--14:05:38.733\n</code></pre>\n<h4><a id=\"4Task_intAsyncAwait_1789\"></a>（4）返回Task int，有Async，有Await</h4>\n<p>要使用返回值就一定要等子线程计算完毕</p>\n<blockquote>\n<p>方法</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 返回Task&lt;int&gt;，有Async，有Await\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nprivate Task&lt;int&gt; ReturnTaskIntAsyncAwait()\n{\n    Debug.WriteLine($\"ReturnTaskIntAsyncAwait--Start--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    TaskFactory taskFactory = new TaskFactory();\n    Task&lt;int&gt; iResult = Task.Run(() =&gt;\n    {\n        Thread.Sleep(3000);\n        Debug.WriteLine($\"Task.Run--ReturnTaskIntAsyncAwait--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n        return 123;\n    });\n\n    Debug.WriteLine($\"ReturnTaskIntAsyncAwait--End--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    return iResult;\n}\n</code></pre>\n<blockquote>\n<p>方法调用</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">Task&lt;int&gt; result = ReturnTaskIntAsyncAwait();\nDebug.WriteLine($\"ReturnTaskIntAsyncAwait--Result--{result.Result}--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">btnAwaitAsync_Click--Start--01--14:09:03.839\nReturnTaskIntAsyncAwait--Start--1--14:09:03.851\nReturnTaskIntAsyncAwait--End--1--14:09:03.874\nTask.Run--ReturnTaskIntAsyncAwait--5--14:09:06.903\nReturnTaskIntAsyncAwait--Result--123--01--14:09:06.911\nbtnAwaitAsync_Click--End--01--14:09:06.917\n</code></pre>\n<h4><a id=\"5Task_1834\"></a>（5）返回Task，实现多个任务顺序执行不阻塞</h4>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 返回Task，实现多个任务顺序执行不阻塞\n/// &lt;/summary&gt;\n/// &lt;returns&gt;async 就只返回long&lt;/returns&gt;\nprivate async Task ReturnTaskAsyncAwaits()\n{\n    Debug.WriteLine($\"ReturnTaskAsyncAwaits--Start--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n\n    await Task.Run(() =&gt;\n    {\n        this.DoSomething(\"task1\");\n    });\n\n    await Task.Run(() =&gt;\n    {\n        this.DoSomething(\"task2\");\n    });            \n\n    await Task.Run(() =&gt;\n    {\n        this.DoSomething(\"task3\");\n    });\n\n    Debug.WriteLine($\"ReturnTaskAsyncAwaits--Start--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n}\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">btnAwaitAsync_Click--Start--01--14:38:07.608\nReturnTaskAsyncAwaits--Start--01--14:38:07.627\nDoSomething--Start--task1--04--14:38:07.703\nbtnAwaitAsync_Click--End--01--14:38:07.709\nDoSomething--End--task1--04--14:38:09.719\nDoSomething--Start--task2--04--14:38:09.753\nDoSomething--End--task2--04--14:38:11.773\nDoSomething--Start--task3--05--14:38:11.781\nDoSomething--End--task3--05--14:38:13.799\nReturnTaskAsyncAwaits--Start--01--14:38:13.806\n</code></pre>\n<h4><a id=\"6Winform_1879\"></a>（6）在Winform中存在特殊处理</h4>\n<p>更改控件的值，必须是(UI线程)主线程去执行，这跟Winform设计有关系，在Winform中，await后面的内容，都会让主线程来执行</p>\n<blockquote>\n<p>计算方法</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">private async Task&lt;long&gt; CalculationAsync(long total)\n{\n    var task = await Task.Run(() =&gt;\n    {\n        Debug.WriteLine($\"This is CalculationAsync Start,ThreadId={Thread.CurrentThread.ManagedThreadId}\");\n        long lResult = 0;\n        for (int i = 0; i &lt; total; i++)\n        {\n            lResult += i;\n        }\n        Debug.WriteLine($\"This is CalculationAsync   End,ThreadId={Thread.CurrentThread.ManagedThreadId}\");\n\n        return lResult;\n    });\n\n    return task; //这句话必须由主线程来执行，线程在同一时刻只能做一件事儿\n}\n</code></pre>\n<blockquote>\n<p>方法调用</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 在Winform中存在特殊处理\n/// &lt;/summary&gt;\nprivate async Task TextAsyncResultChange()\n{\n    Debug.WriteLine($\"TextAsyncResultChange--End--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n    long lResult = await this.CalculationAsync(1_000_000);\n    //更改控件的值，必须是(UI线程)主线程去执行；这跟Winform设计有关系，在Winform中，await后面的内容，都会让主线程来执行\n    this.textAsyncResult.Text = lResult.ToString();\n    Debug.WriteLine($\"TextAsyncResultChange--End--{Thread.CurrentThread.ManagedThreadId.ToString(\"00\")}--{DateTime.Now.ToString(\"HH:mm:ss.fff\")}\");\n}\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">btnAwaitAsync_Click--Start--01--15:31:16.624\nTextAsyncResultChange--End--01--15:31:16.636\nThis is CalculationAsync Start,ThreadId<span class=\"token operator\">=</span><span class=\"token number\">6</span>\nbtnAwaitAsync_Click--End--01--15:31:16.735\nThis is CalculationAsync   End,ThreadId<span class=\"token operator\">=</span><span class=\"token number\">6</span>\nTextAsyncResultChange--End--01--15:31:16.787\n</code></pre>\n<h3><a id=\"3asyncawait_1932\"></a>3、async/await好处</h3>\n<p>（1）既要有顺序，又要不阻塞，降低了编程难度<br/> （2）以同步编程的方式来写异步</p>\n<h3><a id=\"4asyncawait_1937\"></a>4、async/await原理</h3>\n<p>如果给方法加上Async，在底层会生成一个状态机，一个对象在不同的状态可以执行的不同的行为<br/> （1）实例化状态机<br/> （2）把状态机实例交给一个build去执行<br/> （3）整理线程的上下文<br/> （4）stateMachine.MoveNext();<br/> （5）MoveNext如何执行，先获取一个状态，继续往后执行<br/> （6）如果有异常，抛出异常，把状态重置为-2<br/> （7）如果没有异常，把状态重置重置为-2<br/> （8）SetResult();把结果包裹成一个Task</p>\n<h3><a id=\"5asyncawait_1949\"></a>5、async/await优势场景</h3>\n<p>计算机的计算任务可以分成两类，计算密集型任务和IO密集型任务,async/await和Task相比，降低了线程使用数量，性能相当，不能提高计算速度，优势就是在同等硬件基础上系统的吞吐率更高，对计算密集型任务没有优势，IO密集型计算有优势，常见的IO密集型任务有：</p>\n<h4><a id=\"1WebApi_1953\"></a>（1）Web请求，Api请求</h4>\n<h4><a id=\"2_1955\"></a>（2）文件读写</h4>\n<h4><a id=\"3_1957\"></a>（3）数据库请求</h4>\n<h4><a id=\"4_1959\"></a>（4）跟第三方交互的（非托管资源）</h4>\n<h2><a id=\"_1961\"></a>八、多线程双色球项目</h2>\n<p>需求：双色球，投注号码由6个红色球号码和1个蓝色球号码组成；红色球号码从01–33中选择，不重复；蓝色球号码从01–16中选择</p>\n<blockquote>\n<p>界面</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"image\\1660efb804d04310bb7512794cd6aff2.png\"/></p>\n<blockquote>\n<p>代码实现</p>\n</blockquote>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace MyThread\n{\n    public partial class FrmSSQ : Form\n    {\n        /// &lt;summary&gt; \n        /// 多线程双色球项目\n        /// 需求：双色球，投注号码由6个红色球号码和1个蓝色球号码组成；红色球号码从01--33中选择，不重复；蓝色球号码从01--16中选择\n        /// &lt;/summary&gt;\n        public FrmSSQ()\n        {\n            InitializeComponent();\n        }\n\n        #region Data \n        /// &lt;summary&gt;\n        /// 红球集合  其实可以写入配置文件\n        /// &lt;/summary&gt;\n        private string[] RedNums =\n        {\n            \"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\n            \"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\n            \"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\n            \"31\",\"32\",\"33\"\n        };\n\n        /// &lt;summary&gt;\n        /// 蓝球集合  球号码可以放在配置文件；\n        /// &lt;/summary&gt;\n        private string[] BlueNums =\n        {\n            \"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\n            \"11\",\"12\",\"13\",\"14\",\"15\",\"16\"\n        };\n\n        private bool IsGoOn = true;\n        private List&lt;Task&gt; taskList = new List&lt;Task&gt;();\n        private static object object_Lock = new object();\n        #endregion\n\n        /// &lt;summary&gt;\n        /// 点击开始\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void btnStart_Click(object sender, EventArgs e)\n        {\n            #region 初始化动作\n            this.btnStart.Text = \"运行ing\";\n\n            this.lblBlue.Text = \"00\";\n            this.lblRed1.Text = \"00\";\n            this.lblRed2.Text = \"00\";\n            this.lblRed3.Text = \"00\";\n            this.lblRed4.Text = \"00\";\n            this.lblRed5.Text = \"00\";\n            this.lblRed6.Text = \"00\";\n            #endregion\n\n            this.btnStart.Enabled = false;\n            this.btnStop.Enabled = true;\n            taskList.Clear();\n            Thread.Sleep(1000);\n            //1.读取界面上有多少个球号码\n            //2.循环球号码个数，每循环一次，开启一个线程\n            foreach (var control in this.gboSSQ.Controls)\n            {\n                if (control is Label)\n                {\n                    Label label = (Label)control; //只对lable处理\n                    if (label.Name.Contains(\"Blue\")) //蓝色球\n                    {\n                        taskList.Add( Task.Run(() =&gt; //开启一个线程\n                        {\n                            //目标：需要让这个球不断的跳动变化；\n                            //1.获取号码值---号码的区间 建议写在配置文件；就应该在BlueNums数组中找数据；\n                            //2.赋值\n                            //3.循环 \n                            while (IsGoOn)\n                            {\n                                //数组找数据通过索引；先确定索引；找到1-15的随机值作为索引值；然后去数组中取出数据\n                                //new Random().Next(0, 16);\n                                int index = new RandomHelper().GetRandomNumberDelay(0, 16);\n                                string blueNum = this.BlueNums[index];\n                                //this.lblBlue.Text = blueNum;//不允许---需要让主线程来帮助完成这件事儿\n                                this.Invoke(new Action(() =&gt; //子线程委托出去，让主线程帮助完成一件事儿\n                                {\n                                    lblBlue.Text = blueNum;\n                                }));\n                            }\n                        }));\n                    }\n                    else //红色球\n                    {\n                        taskList.Add( Task.Run(() =&gt; \n                        { \n                            while (IsGoOn)\n                            {  \n                                int index = new RandomHelper().GetRandomNumberDelay(0, 33);\n                                string redNum = this.RedNums[index];                              \n                                lock (object_Lock)\n                                {\n                                    var currentNumberlist = GetCurrentNumberList();\n                                    if (!currentNumberlist.Contains(redNum))\n                                    {\n                                        this.Invoke(new Action(() =&gt;\n                                        {\n                                            label.Text = redNum;\n                                        }));\n                                    }                                    \n                                }  \n                                //问题：号码重复如何解决\n                                //1.赋值的时候，判断是否有重复\n                                //2.在赋值的时候，进行判断，如果界面上没有重复数据，就赋值，否则就重新生成index，重新获取值；\n                                //3.锁\n                            }\n                        })); \n                    } \n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 获取界面上所有红色球的球号码\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public List&lt;string&gt; GetCurrentNumberList()\n        {\n            List&lt;string&gt; numberlist = new List&lt;string&gt;();\n            foreach (var control in this.gboSSQ.Controls)\n            {\n                if (control is Label)\n                {\n                    Label label = (Label)control; //只对lable处理\n                    if (label.Name.Contains(\"Red\"))\n                    {\n                        numberlist.Add(label.Text);\n                    } \n                }\n            }\n\n            //写代码测试\n            if (numberlist.Count(s=&gt;s==\"00\")==0  &amp;&amp; numberlist.Distinct().Count()&lt;6)\n            {\n                Console.WriteLine(\"********************有重复************************\");\n                foreach (var num in numberlist)\n                {\n                    Console.WriteLine(num);\n                }\n            }\n\n            return numberlist;\n        }\n\n        /// &lt;summary&gt;\n        /// 点击结束  \n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void btnStop_Click(object sender, EventArgs e)\n        {\n            Task.Run(() =&gt;\n            {\n                this.IsGoOn = false;\n                //还要等待所有线程都执行结束，才能输出结果； \n                Task.WaitAll(taskList.ToArray()); \n                //死锁：是主线程和子线程相互等待引起的；  \n                this.Invoke(new Action(() =&gt; {\n                    this.btnStart.Text = \"Start\";\n                    this.btnStart.Enabled = true;\n                    this.btnStop.Enabled = false;\n                    this.IsGoOn = true;\n                }));\n\n                ShowResult();\n            }); \n        }\n\n        /// &lt;summary&gt;\n        /// 弹框提示数据\n        /// &lt;/summary&gt;\n        private void ShowResult()\n        {\n            MessageBox.Show(string.Format(\"本期双色球结果为：{0} {1} {2} {3} {4} {5}  蓝球{6}\"\n                , this.lblRed1.Text\n                , this.lblRed2.Text\n                , this.lblRed3.Text\n                , this.lblRed4.Text\n                , this.lblRed5.Text\n                , this.lblRed6.Text\n                , this.lblBlue.Text));\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p>运行效果</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"image\\ea800afc80b04df6aa92709967188d08.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}