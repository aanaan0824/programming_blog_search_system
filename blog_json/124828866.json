{"blogid": "124828866", "writerAge": "码龄3年", "writerBlogNum": "35", "writerCollect": "886", "writerComment": "994", "writerFan": "1065", "writerGrade": "5级", "writerIntegral": "2992", "writerName": "不许代码码上红", "writerProfileAdress": "writer_image\\profile_124828866.jpg", "writerRankTotal": "6064", "writerRankWeekly": "2438", "writerThumb": "988", "writerVisitNum": "39817", "blog_read_count": "686", "blog_time": "于 2022-05-17 22:35:20 发布", "blog_title": "C语言：指针四（栈）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>大家好，我是<a href=\"https://blog.csdn.net/?spm=1010.2135.3001.5421\">不许</a><br/> 今天给大家详细介绍一下数据结构中栈的知识，非常详细。大家快来学习吧！ 如果觉得写的不错欢迎三连（点赞、收藏加评论）<br/> 😘😘😘😘😘😘</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7e19891835184cadb045c2a2f3912acb.jpeg\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_11\">一、什么是栈</a></li><li><a href=\"#_18\">二、栈中的基本运算</a></li><li><a href=\"#_203\">三、栈的分类</a></li><li><ul><li><a href=\"#31_205\">3.1顺序栈</a></li><li><a href=\"#32_465\">3.2链栈</a></li><li><a href=\"#33_757\">3.3顺序栈与链栈的区别</a></li></ul>\n</li><li><a href=\"#_762\">四、多栈共享技术</a></li><li><ul><li><a href=\"#41_764\">4.1什么是多栈共享技术</a></li><li><a href=\"#42_768\">4.2两个顺序栈共享空间</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_11\"></a>一、什么是栈</h2>\n<p><strong>1.1栈的定义：</strong></p>\n<blockquote>\n<p>栈（Stack）作为一种限定性线性表，是将线性表的插入和删除操作限制为仅在表的一端进行，通常将表中允许进行插入、删除操作的一端称为栈顶（Top），因此栈顶的当前位置是动态变化的，它由一个称为栈顶指针的位置指示器来指示。同时，另一端被称为栈底（Bottom）。当栈中没有元素时称为空栈。栈的插入操作被形象地称为进栈或者入栈，删除操作被称为出栈或者退栈。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bea838464d1242d7ac0d8200460a2f09.png\"/></p>\n<h2><a id=\"_18\"></a>二、栈中的基本运算</h2>\n<p><strong>2.1栈的初始化</strong><br/> 🐒定义栈s：</p>\n<blockquote>\n<p>SeqStack* s</p>\n</blockquote>\n<p>🐒申请空间：</p>\n<blockquote>\n<p>s = (SeqStack*)malloc(sizeof(SeqStack))</p>\n</blockquote>\n<pre><code class=\"prism language-c\">SeqStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空间不足\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>2.2判断栈是否为空</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Empty_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n</code></pre>\n<p><strong>2.3入栈操作</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> DataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        s<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>2.4出栈操作</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Pop_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> DataType<span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Empty_SeqStack</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>2.5整体代码</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;malloc.h&gt;</span></span>\n \n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DataType</span> <span class=\"token expression\"><span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span></span></span>\n \n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{<!-- --></span>\n    DataType data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>SeqStack<span class=\"token punctuation\">;</span>\n \nSeqStack<span class=\"token operator\">*</span> <span class=\"token function\">Init_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//栈初始化</span>\n    SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空间不足\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">Empty_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//判栈空</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> DataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//入栈</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//栈满不能入栈</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        s<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">Pop_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> DataType<span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//出栈</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Empty_SeqStack</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//栈空不能出栈</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token comment\">//栈顶元素存入*x，返回</span>\n<span class=\"token punctuation\">}</span>\n \nDataType <span class=\"token function\">Top_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//取栈顶元素</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Empty_SeqStack</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//栈空</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">Print_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前栈中的元素:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    SeqStack<span class=\"token operator\">*</span> L<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     \n    L <span class=\"token operator\">=</span> <span class=\"token function\">Init_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化完成\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈空：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Empty_SeqStack</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入入栈元素个数：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要入栈的%d个元素：\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Push_SeqStack</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n     \n    <span class=\"token function\">Print_SeqStack</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈顶元素：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Top_SeqStack</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要出栈的元素个数（不能超过%d个）：\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"依次出栈的%d个元素：\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">Pop_SeqStack</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n     \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Print_SeqStack</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈顶元素：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Top_SeqStack</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p><strong>运行结果</strong><br/> <em>初始化完成<br/> 栈空：1<br/> 请输入入栈元素个数：<br/> 3<br/> 请输入要入栈的3个元素：<br/> 1 2 3<br/> 当前栈中的元素:<br/> 3 2 1<br/> 栈顶元素：3<br/> 请输入要出栈的元素个数（不能超过3个）：<br/> 2<br/> 依次出栈的2个元素：<br/> 3 2<br/> 当前栈中的元素:<br/> 1<br/> 栈顶元素：1<br/> 请按任意键继续. . .</em></p>\n<h2><a id=\"_203\"></a>三、栈的分类</h2>\n<h3><a id=\"31_205\"></a>3.1顺序栈</h3>\n<p><strong>定义</strong></p>\n<blockquote>\n<p>顺序栈是用顺序存储结构实现的栈。</p>\n</blockquote>\n<p>说白了，就是利用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素，同时由于栈操作的特殊性，还必须附设一个位置指针top（栈顶指针）来动态指示栈顶元素在顺序栈中的位置。通常以top=-1表示空栈。</p>\n<p><strong>3.1.1定义结构体</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tElemType data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 用于栈顶指针 */</span>\n<span class=\"token punctuation\">}</span>SeqStack<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>3.1.2初始化</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">initStack</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token operator\">*</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.1.3进栈操作</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断是否栈满</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈顶指针加1</span>\n\tstack<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将新插入元素赋值给栈顶空间</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.1.4出栈操作</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断是否空栈</span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将要删除的栈顶元素赋值给e</span>\n\tstack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 栈顶指针减1</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.1.5遍历操作</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">traverseStack</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> stack<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.1.6清空操作</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">clearStack</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.1.7判断是否为空</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> TRUE <span class=\"token operator\">:</span> FALSE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>3.1.8获取栈顶元素</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.1.9获取栈长度</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>3.1.10完整代码</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span> </span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TRUE</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FALSE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">20</span> </span><span class=\"token comment\">/* 存储空间初始分配量 */</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ElemType<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ElemType类型根据实际情况而定，这里假设为int */</span>\n\n<span class=\"token comment\">/* 顺序栈结构 */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tElemType data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 用于栈顶指针 */</span>\n<span class=\"token punctuation\">}</span>SeqStack<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Status initStack(SeqStack **stack); // 初始化栈操作</span>\n<span class=\"token comment\">// Status push(SeqStack *stack, const ElemType e); // 进栈操作</span>\n<span class=\"token comment\">// Status pop(SeqStack *stack, ElemType *e); // 出栈操作</span>\n<span class=\"token comment\">// Status traverseStack(SeqStack *stack); // 遍历栈操作</span>\n<span class=\"token comment\">// Status clearStack(SeqStack *stack); // 清空栈操作</span>\n<span class=\"token comment\">// Status isEmpty(SeqStack *stack); // 判断是否为空</span>\n<span class=\"token comment\">// Status getTop(SeqStack *stack, ElemType *e); // 获得栈顶元素</span>\n<span class=\"token comment\">// int getLength(SeqStack *stack); // 获取栈的长度</span>\n\n<span class=\"token comment\">// 初始化栈操作</span>\nStatus <span class=\"token function\">initStack</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token operator\">*</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 进栈操作</span>\nStatus <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断是否栈满</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈顶指针加1</span>\n\tstack<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将新插入元素赋值给栈顶空间</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 出栈操作</span>\nStatus <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断是否空栈</span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将要删除的栈顶元素赋值给e</span>\n\tstack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 栈顶指针减1</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 遍历栈操作</span>\nStatus <span class=\"token function\">traverseStack</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> stack<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 清空栈操作</span>\nStatus <span class=\"token function\">clearStack</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 判断是否为空</span>\nStatus <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> TRUE <span class=\"token operator\">:</span> FALSE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 获得栈顶元素</span>\nStatus <span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 获取栈的长度</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 初始化栈</span>\n\tSeqStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">initStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化顺序栈成功！\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 入栈操作\t</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"入栈操作（0-10）!\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 出栈操作\t</span>\n\t<span class=\"token keyword\">int</span> e<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"弹出的栈顶元素e=%d\\n\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 遍历栈</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"遍历栈，栈中元素依次为：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">traverseStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 获得栈顶元素</span>\n\t<span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈顶元素 e=%d 栈的长度为%d\\n\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 判断是否为空栈</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈空否：%d(1:空 0:否)\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 清空栈</span>\n\t<span class=\"token function\">clearStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"清空栈后，栈空否：%d(1:空 0:否)\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>运行结果</strong><br/> <em>初始化顺序栈成功！<br/> 入栈操作（0-10）!<br/> 弹出的栈顶元素e=10<br/> 遍历栈，栈中元素依次为：1 2 3 4 5 6 7 8 9<br/> 栈顶元素 e=9 栈的长度为9<br/> 栈空否：0(1:空 0:否)<br/> 清空栈后，栈空否：1(1:空 0:否)<br/> 请按任意键继续. . .</em></p>\n<h3><a id=\"32_465\"></a>3.2链栈</h3>\n<p><strong>定义</strong></p>\n<blockquote>\n<p>链栈是采用链表作为存储结构实现的栈。</p>\n</blockquote>\n<p><strong>3.2.1栈的初始化</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">initStack</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 注意要给链栈分配内存</span>\n\t<span class=\"token operator\">*</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 链栈的空其实就是 top=NULL 的时候</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.2.2进栈操作</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStackNode  <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>StackNode  <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>StackNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把当前的栈顶元素赋值给新结点的直接后继，见图中①</span>\n\tstack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将新的结点s赋值给栈顶指针，见图中②</span>\n\tstack<span class=\"token operator\">-&gt;</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.2.3出栈操作</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStackNode  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p用来存储要删除的栈顶结点，见图中③</span>\n\tstack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使得栈顶指针下移一位，指向后一结点，见图中④</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放结点p</span>\n\tstack<span class=\"token operator\">-&gt;</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.2.4遍历</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">traverseStack</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStackNode  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.2.5清除</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">clearStack</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStackNode  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tStackNode  <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tq <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstack<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.2.6判断是否为空</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> TRUE <span class=\"token operator\">:</span> FALSE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.2.7获取栈顶元素</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3.2.8获取栈长度</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-&gt;</span>count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>3.2.9整体代码</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span> </span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TRUE</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FALSE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">20</span> </span><span class=\"token comment\">/* 存储空间初始分配量 */</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ElemType<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ElemType类型根据实际情况而定，这里假设为int */</span>\n\n<span class=\"token comment\">/* 链栈结点结构 */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">StackNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tElemType data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">StackNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>StackNode<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 链栈结构 */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStackNode  <span class=\"token operator\">*</span>top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>LinkStack<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Status initStack(LinkStack **stack); // 初始化栈操作</span>\n<span class=\"token comment\">// Status push(LinkStack *stack, const ElemType e); // 进栈操作</span>\n<span class=\"token comment\">// Status pop(LinkStack *stack, ElemType *e); // 出栈操作</span>\n<span class=\"token comment\">// Status traverseStack(LinkStack *stack); // 遍历栈操作</span>\n<span class=\"token comment\">// Status clearStack(LinkStack *stack); // 清空栈操作</span>\n<span class=\"token comment\">// Status isEmpty(LinkStack *stack); // 判断是否为空</span>\n<span class=\"token comment\">// Status getTop(LinkStack *stack, ElemType *e); // 获得栈顶元素</span>\n<span class=\"token comment\">// int getLength(LinkStack *stack); // 获取栈的长度</span>\n\n<span class=\"token comment\">// 初始化栈操作</span>\nStatus <span class=\"token function\">initStack</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 注意要给链栈分配内存</span>\n\t<span class=\"token operator\">*</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 链栈的空其实就是 top=NULL 的时候</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 进栈操作</span>\nStatus <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStackNode  <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>StackNode  <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>StackNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把当前的栈顶元素赋值给新结点的直接后继，见图中①</span>\n\tstack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将新的结点s赋值给栈顶指针，见图中②</span>\n\tstack<span class=\"token operator\">-&gt;</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 出栈操作</span>\nStatus <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStackNode  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p用来存储要删除的栈顶结点，见图中③</span>\n\tstack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使得栈顶指针下移一位，指向后一结点，见图中④</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放结点p</span>\n\tstack<span class=\"token operator\">-&gt;</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 遍历栈操作</span>\nStatus <span class=\"token function\">traverseStack</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStackNode  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 清除栈操作</span>\nStatus <span class=\"token function\">clearStack</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStackNode  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tStackNode  <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tq <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstack<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 判断是否为空栈</span>\nStatus <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> TRUE <span class=\"token operator\">:</span> FALSE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 获得栈顶元素</span>\nStatus <span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> stack<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 获得栈的长度</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> stack<span class=\"token operator\">-&gt;</span>count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 初始化栈</span>\n\tLinkStack <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">initStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化链栈成功！\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 入栈操作 </span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"入栈操作（0-10）!\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 出栈操作 </span>\n\t<span class=\"token keyword\">int</span> e<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"弹出的栈顶元素e=%d\\n\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 遍历栈</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"遍历栈，栈中元素依次为：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">traverseStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 获得栈顶元素</span>\n\t<span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈顶元素 e=%d 栈的长度为%d\\n\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 判断是否为空栈</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈空否：%d(1:空 0:否)\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 清空栈</span>\n\t<span class=\"token function\">clearStack</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"清空栈后，栈空否：%d(1:空 0:否)\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>运行结果</strong><br/> <em>初始化链栈成功！<br/> 入栈操作（0-10）!<br/> 弹出的栈顶元素e=10<br/> 遍历栈，栈中元素依次为：9 8 7 6 5 4 3 2 1<br/> 栈顶元素 e=9 栈的长度为9<br/> 栈空否：0(1:空 0:否)<br/> 清空栈后，栈空否：1(1:空 0:否)<br/> 请按任意键继续. . .</em></p>\n<h3><a id=\"33_757\"></a>3.3顺序栈与链栈的区别</h3>\n<blockquote>\n<p>1、两者在时间复杂度上是一样的，均为 O(1)。<br/> 2、对于空间性能，顺序栈需要事先确定一个固定的长度，可能会存在内存空间浪费的问题，但它的优势是存取时定位很方便，而链栈则要求每个元素都有指针域，这同时也增加了一些内存开销，但对于栈的长度无限制。所以它们的区别和线性表中讨论的一样，如果栈的使用过程中元素变化不可预料，有时很小，有时非常大，那么最好是用链栈，反之，如果它的变化在可控范围内，建议使用顺序栈会更好一些。</p>\n</blockquote>\n<h2><a id=\"_762\"></a>四、多栈共享技术</h2>\n<h3><a id=\"41_764\"></a>4.1什么是多栈共享技术</h3>\n<p>栈的应用非常广泛，经常会出现一个程序中需要同时使用多个栈的情况。若使用顺序栈，会因为对栈空间大小难以准确估计，从而产生有的栈溢出、有的栈空间还很空闲的情况。为了解决这个问题，可以让多个栈共享一个足够大的数组空间，通过利用栈的动态特性来使其存储空间互相补充，这就是多栈的共享技术。<br/> 在顺序栈的共享技术中，最常用的是两个栈的共享技术，即双端栈。它主要利用了栈的栈底位置不变，而栈顶位置动态变化的特性。</p>\n<h3><a id=\"42_768\"></a>4.2两个顺序栈共享空间</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c47636633dd34f9fb58d82c5d61596a7.png\"/></p>\n<p><strong>定义共享栈结构</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{<!-- --></span>  \n    ElemType    data<span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">int</span>         top1<span class=\"token punctuation\">;</span>                    \n    <span class=\"token keyword\">int</span>         top2<span class=\"token punctuation\">;</span>\t\t\t\t\t\n<span class=\"token punctuation\">}</span>Stack<span class=\"token punctuation\">,</span>  <span class=\"token operator\">*</span>pStack<span class=\"token punctuation\">;</span>  \n</code></pre>\n<p><strong>初始化</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">init_Stack</span><span class=\"token punctuation\">(</span>pStack S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tS<span class=\"token operator\">-&gt;</span>top1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tS<span class=\"token operator\">-&gt;</span>top2 <span class=\"token operator\">=</span> MaxSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>进栈</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span>pStack S<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stackNumber<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>top1<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\t\t\n\t\t\t\tS<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>S<span class=\"token operator\">-&gt;</span>top1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\t\t\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\t\t\n\t\t\t\tS<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\t\t\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>出栈</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">pop_Stack</span><span class=\"token punctuation\">(</span>pStack S<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stackNumber<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top1<span class=\"token punctuation\">)</span>\t\t\n\t\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> S<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>top1<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MaxSize <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> S<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>top2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>输出</strong></p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">dis_pStack</span><span class=\"token punctuation\">(</span>pStack S<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stackNumber<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top1<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈1中的元素为：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>S<span class=\"token operator\">-&gt;</span>top1<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> S<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n==================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MaxSize <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈2中的元素为：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>MaxSize<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&gt;=</span>S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\t\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> S<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n==================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>此时，我们定义这个共享栈的总长度为10，也就是说，栈1和栈2总数据为10个</strong></p>\n<pre><code class=\"prism language-c\">\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">pop_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">dis_pStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">dis_pStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>我们先在第一个栈插入八个数据，运行没问题：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1b37eecdb44144a9824c3200ed45a1e8.png\"/><br/> 现在，栈2只能插入2个元素，验证：</p>\n<pre><code class=\"prism language-c\">\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果肯定是只能插入10和9：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\898ce02e1d53455f88d181d7c8904cba.png\"/></p>\n<p>但如果，我们在插入栈2前先进行栈1出栈：</p>\n<pre><code class=\"prism language-c\">\t<span class=\"token function\">pop_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d7d4a54dceb345b1a136c67ec481eb93.png\"/><br/> <strong>完整代码</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxSize</span> <span class=\"token expression\"><span class=\"token number\">10</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OK</span>      <span class=\"token expression\"><span class=\"token number\">1</span>      </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ERROR</span>   <span class=\"token expression\"><span class=\"token number\">0</span>      </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TRUE</span>    <span class=\"token expression\"><span class=\"token number\">1</span>      </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FALSE</span>   <span class=\"token expression\"><span class=\"token number\">0</span>    </span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ElemType<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Status<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{<!-- --></span>  \n    ElemType    data<span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">int</span>         top1<span class=\"token punctuation\">;</span>                    \n    <span class=\"token keyword\">int</span>         top2<span class=\"token punctuation\">;</span>\t\t\t\t\t\n<span class=\"token punctuation\">}</span>Stack<span class=\"token punctuation\">,</span>  <span class=\"token operator\">*</span>pStack<span class=\"token punctuation\">;</span>  \n\nStatus <span class=\"token function\">init_Stack</span><span class=\"token punctuation\">(</span>pStack S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tS<span class=\"token operator\">-&gt;</span>top1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tS<span class=\"token operator\">-&gt;</span>top2 <span class=\"token operator\">=</span> MaxSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\nStatus <span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span>pStack S<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stackNumber<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>top1<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\t\t\n\t\t\t\tS<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>S<span class=\"token operator\">-&gt;</span>top1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\t\t\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\t\t\n\t\t\t\tS<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\t\t\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nStatus <span class=\"token function\">pop_Stack</span><span class=\"token punctuation\">(</span>pStack S<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stackNumber<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top1<span class=\"token punctuation\">)</span>\t\t\n\t\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> S<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>top1<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MaxSize <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> S<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>top2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nStatus <span class=\"token function\">dis_pStack</span><span class=\"token punctuation\">(</span>pStack S<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stackNumber<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top1<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈1中的元素为：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>S<span class=\"token operator\">-&gt;</span>top1<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> S<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n==================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> stackNumber<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MaxSize <span class=\"token operator\">==</span> S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈2中的元素为：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>MaxSize<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&gt;=</span>S<span class=\"token operator\">-&gt;</span>top2<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\t\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> S<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n==================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"======共享栈===========\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tStack S<span class=\"token punctuation\">;</span>\n\tElemType e<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">init_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">pop_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">dis_pStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">dis_pStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}