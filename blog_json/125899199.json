{"blogid": "125899199", "writerAge": "码龄11年", "writerBlogNum": "294", "writerCollect": "1219", "writerComment": "174", "writerFan": "337", "writerGrade": "6级", "writerIntegral": "8503", "writerName": "zhangbeizhen18", "writerProfileAdress": "writer_image\\profile_125899199.jpg", "writerRankTotal": "1891", "writerRankWeekly": "12396", "writerThumb": "397", "writerVisitNum": "916633", "blog_read_count": "1435", "blog_time": "已于 2022-07-20 20:32:02 修改", "blog_title": "基于Spring Boot使用Java调用http请求的6种方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>记录</strong></strong>：287</p>\n<p style=\"margin-left:.0001pt;\"><strong><strong>场景</strong></strong>：基于Spring Boot使用Java调用http请求的6种方式。服务端发布一个POST请求和2个GET请求。使用6种方式实现的客户端都调用服务端发布的这3个方法。可以直观感受和比对6种http请求的客户端。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>版本：</strong></strong></p>\n<pre><code>Spring Boot 2.6.3\nSpring Framework 5.3.15\nSpring Cloud 2021.0.1</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>一、案例场景</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">本例实现6种方式客户端调用同一个服务端的3种方法。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>1.服务端</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">在服务端发布一个POST请求，2个GET请求。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>1.1 接口信息</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(1)POST请求</p>\n<pre><code>[访问URL]: http://127.0.0.1:19091/server/comm/f1\n[请求方式]: POST\n[请求参数]: JSON\n{\"userName\":\"HangZhou20220719\",\"tradeName\":\"Vue进阶教程\"}\n[返回值]: JSON\n{code=200, message=成功}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(2)GET请求(一)</p>\n<pre><code>[访问URL]: http://127.0.0.1:19091/server/comm/f2\n[请求方式]: GET\n[请求参数]: String\nobj=HangZhou20220719\n[返回值]: JSON\n{code=200, message=成功}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(3)GET请求(二)</p>\n<pre><code>[访问URL]: http://127.0.0.1:19091/server/comm/f3/{obj}\n[请求方式]: GET\n[请求参数]: String\nobj=HangZhou20220719\n[返回值]: JSON\n{code=200, message=成功}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>1.2 服务端代码</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">服务端3个接口代码。</p>\n<pre><code class=\"language-java\">@Slf4j\n@RestController\n@RequestMapping(\"/comm\")\npublic class CommonController {\n  /**\n   *  1.发布POST请求\n   *    入参注解: @RequestBody\n   *    返回注解: @ResponseBody(@RestController包含此注解)\n   * */\n  @PostMapping(\"/f1\")\n  public Object f1(@RequestBody  Object obj) {\n    log.info(\"CommonController-&gt;f1,接收参数,obj = \" + obj.toString());\n    log.info(\"CommonController-&gt;f1,处理业务.\");\n    log.info(\"CommonController-&gt;f1,返回.\");\n    return ResultObj.builder().code(\"200\").message(\"成功\").build();\n  }\n  /**\n   *  2.发布GET请求\n   *    入参注解: @RequestParam\n   *    返回注解: @ResponseBody(@RestController包含此注解)\n   * */\n  @GetMapping (\"/f2\")\n  public Object f2(@RequestParam(\"obj\") String obj) {\n    log.info(\"CommonController-&gt;f2,接收参数,obj = \" + obj.toString());\n    log.info(\"CommonController-&gt;f2,处理业务.\");\n    log.info(\"CommonController-&gt;f2,返回.\");\n    return ResultObj.builder().code(\"200\").message(\"成功\").build();\n  }\n  /**\n   *  3.发布GET请求\n   *    入参注解: @PathVariable\n   *    返回注解: @ResponseBody(@RestController包含此注解)\n   * */\n  @GetMapping (\"/f3/{obj}\")\n  public Object f3(@PathVariable(\"obj\") String obj) {\n    log.info(\"CommonController-&gt;f3,接收参数,obj = \" + obj.toString());\n    log.info(\"CommonController-&gt;f3,处理业务.\");\n    log.info(\"CommonController-&gt;f3,返回.\");\n    return ResultObj.builder().code(\"200\").message(\"成功\").build();\n  }\n}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>1.3 服务端辅助对象</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">服务端辅助对象。</p>\n<pre><code class=\"language-java\">@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class ResultObj {\n  private String code;\n  private String message;\n}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>二、Java调用http请求的6种方式</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1.使用HttpURLConnection调用http请求</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(1)Jar包位置</p>\n<p style=\"margin-left:.0001pt;\">HttpURLConnection，全称：java.net.HttpURLConnection。</p>\n<p style=\"margin-left:.0001pt;\">JDK 1.8中自带的rt.jar包中的java.net包内的类。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(2)客户端代码</p>\n<pre><code class=\"language-java\">public class Utils01JdkClient {\n public static void main(String[] args) throws Exception {\n   f1();\n   f2();\n   f3();\n }\n /**\n  * 1.使用HttpURLConnection调用服务端的POST请求\n  * 服务端入参注解: @RequestBody\n  */\n public static void f1() throws Exception {\n   // 1.请求URL\n   String postUrl = \"http://127.0.0.1:19091/server/comm/f1\";\n   // 2.请求参数JSON格式\n   Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n   map.put(\"userName\", \"HangZhou20220718\");\n   map.put(\"tradeName\", \"Vue进阶教程\");\n   String json = JSON.toJSONString(map);\n   // 3.创建连接与设置连接参数\n   URL urlObj = new URL(postUrl);\n   HttpURLConnection httpConn = (HttpURLConnection) urlObj.openConnection();\n   httpConn.setRequestMethod(\"POST\");\n   httpConn.setRequestProperty(\"Charset\", \"UTF-8\");\n   // POST请求且JSON数据,必须设置\n   httpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n   // 打开输出流,默认是false\n   httpConn.setDoOutput(true);\n   // 打开输入流,默认是true,可省略\n   httpConn.setDoInput(true);\n   // 4.从HttpURLConnection获取输出流和写数据\n   OutputStream oStream = httpConn.getOutputStream();\n   oStream.write(json.getBytes());\n   oStream.flush();\n   // 5.发起http调用(getInputStream触发http请求)\n   if (httpConn.getResponseCode() != 200) {\n       throw new Exception(\"调用服务端异常.\");\n   }\n   // 6.从HttpURLConnection获取输入流和读数据\n   BufferedReader br = new BufferedReader(\n           new InputStreamReader(httpConn.getInputStream()));\n   String resultData = br.readLine();\n   System.out.println(\"从服务端返回结果: \" + resultData);\n   // 7.关闭HttpURLConnection连接\n   httpConn.disconnect();\n }\n /**\n  * 2.使用HttpURLConnection调用服务端的GET请求\n  * 服务端入参注解: @RequestParam\n  */\n public static void f2() throws Exception {\n  // 1.请求URL与组装请求参数\n  String getUrl = \"http://127.0.0.1:19091/server/comm/f2\";\n  String obj = \"Vue进阶教程\";\n  String para = \"?obj=\" + URLEncoder.encode(obj, \"UTF-8\");\n  getUrl = getUrl + para;\n  // 2.创建连接与设置连接参数\n  URL urlObj = new URL(getUrl);\n  HttpURLConnection httpConn = (HttpURLConnection) urlObj.openConnection();\n  httpConn.setRequestMethod(\"GET\");\n  httpConn.setRequestProperty(\"Charset\", \"UTF-8\");\n  // 3.发起http调用(getInputStream触发http请求)\n  if (httpConn.getResponseCode() != 200) {\n      throw new Exception(\"调用服务端异常.\");\n  }\n  // 4.从HttpURLConnection获取输入流和读数据\n  BufferedReader br = new BufferedReader(\n          new InputStreamReader(httpConn.getInputStream()));\n  String resultData = br.readLine();\n  System.out.println(\"从服务端返回结果: \" + resultData);\n  // 5.关闭HttpURLConnection连接\n  httpConn.disconnect();\n }\n /**\n  * 3.使用HttpURLConnection调用服务端的GET请求\n  * 服务端入参注解: @PathVariable\n  */\n public static void f3() throws Exception {\n  // 1.请求URL与组装请求参数\n  String getUrl = \"http://127.0.0.1:19091/server/comm/f3/\";\n  String obj = \"Vue进阶教程\";\n  obj = URLEncoder.encode(obj, \"UTF-8\");\n  getUrl = getUrl + obj;\n  URL urlObj = new URL(getUrl);\n  // 2.创建连接与设置连接参数\n  HttpURLConnection httpConn = (HttpURLConnection) urlObj.openConnection();\n   httpConn.setRequestMethod(\"GET\");\n   httpConn.setRequestProperty(\"charset\", \"UTF-8\");\n   // 3.发起http调用(getInputStream触发http请求)\n   if (httpConn.getResponseCode() != 200) {\n       throw new Exception(\"调用服务端异常.\");\n   }\n   // 4.从HttpURLConnection获取输入流和读数据\n   BufferedReader br = new BufferedReader(\n           new InputStreamReader(httpConn.getInputStream()));\n   String resultData = br.readLine();\n   System.out.println(\"从服务端返回结果: \" + resultData);\n   // 5.关闭HttpURLConnection连接\n   httpConn.disconnect();\n }\n}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2.使用commons-httpclient调用http请求</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(1)Jar包位置</p>\n<p style=\"margin-left:.0001pt;\">commons-httpclient，比较早的Jar包，在MVNRepository仓库中，查看的最新维护时间是：2007年8月。</p>\n<pre><code class=\"language-XML\">&lt;dependency&gt;\n  &lt;groupId&gt;commons-httpclient&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-httpclient&lt;/artifactId&gt;\n  &lt;version&gt;3.1&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(2)客户端代码</p>\n<pre><code class=\"language-java\">public class Utils02CommonsHttpClient {\n\n public static void main(String[] args) throws Exception {\n  f1();\n  f2();\n  f3();\n }\n /**\n  * 1.使用commons-httpclient调用服务端的POST请求\n  * 服务端入参注解: @RequestBody\n  */\n public static void f1() throws Exception {\n  // 1.请求URL\n  String postUrl = \"http://127.0.0.1:19091/server/comm/f1\";\n  // 2.请求参数\n  Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n  map.put(\"userName\", \"HangZhou20220718\");\n  map.put(\"tradeName\", \"Vue进阶教程\");\n  String json = JSON.toJSONString(map);\n  // 3.创建连接与设置连接参数\n  HttpClient httpClient = new HttpClient();\n  PostMethod postMethod = new PostMethod(postUrl);\n  postMethod.addRequestHeader(\"Content-Type\", \"application/json\");\n  RequestEntity entity = new StringRequestEntity(json, \"application/json\", \"UTF-8\");\n  postMethod.setRequestEntity(entity);\n  //解决返回值中文乱码\n  postMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, \"UTF-8\");\n  String resultData = \"\";\n  // 4.发起请求\n  int code = httpClient.executeMethod(postMethod);\n  if (code != 200) {\n      throw new Exception(\"调用服务端异常.\");\n  }\n  // 5.接收返回值\n  resultData = postMethod.getResponseBodyAsString();\n  System.out.println(\"从服务端返回结果: \" + resultData);\n  // 6.关闭连接\n  postMethod.releaseConnection();\n }\n /**\n  * 2.使用commons-httpclient调用服务端的GET请求\n  * 服务端入参注解: @RequestParam\n  */\n public static void f2() throws Exception {\n  // 1.请求URL与组装请求参数\n  String getUrl = \"http://127.0.0.1:19091/server/comm/f2\";\n  String obj = \"Vue进阶教程\";\n  //入参有中文需要编码\n  String para = \"?obj=\" + URLEncoder.encode(obj, \"UTF-8\");\n  getUrl = getUrl + para;\n  // 2.创建连接与设置连接参数\n  HttpClient httpClient = new HttpClient();\n  GetMethod getMethod = new GetMethod(getUrl);\n  //解决返回值中文乱码\n  getMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, \"UTF-8\");\n  // 3.发起请求\n  int code = httpClient.executeMethod(getMethod);\n  String resultData = \"\";\n  if (code != 200) {\n      throw new Exception(\"调用服务端异常.\");\n  }\n  // 4.接收返回值\n  resultData = getMethod.getResponseBodyAsString();\n  System.out.println(\"从服务端返回结果: \" + resultData);\n  // 5.关闭连接\n  getMethod.releaseConnection();\n }\n /**\n  * 3.使用commons-httpclient调用服务端的GET请求\n  * 服务端入参注解: @PathVariable\n  */\n public static void f3() throws Exception {\n  // 1.请求URL与组装请求参数\n  String getUrl = \"http://127.0.0.1:19091/server/comm/f3/\";\n  String obj = \"Vue进阶教程\";\n  //入参有中文需要编码\n  obj = URLEncoder.encode(obj, \"UTF-8\");\n  getUrl = getUrl + obj;\n  // 2.创建连接与设置连接参数\n  HttpClient httpClient = new HttpClient();\n  GetMethod getMethod = new GetMethod(getUrl);\n  //解决返回值中文乱码\n  getMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, \"UTF-8\");\n  // 3.发起请求\n  int code = httpClient.executeMethod(getMethod);\n  String resultData = \"\";\n  if (code != 200) {\n      throw new Exception(\"调用服务端异常.\");\n  }\n  // 4.接收返回值\n  resultData = getMethod.getResponseBodyAsString();\n  System.out.println(\"从服务端返回结果: \" + resultData);\n  // 5.关闭连接\n  getMethod.releaseConnection();\n }\n}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3.使用org.apache.httpcomponents调用http请求</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(1)Jar包位置</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">httpcomponents，在MVNRepository仓库中，查看的最新维护时间是：2020年10月。</p>\n<pre><code class=\"language-XML\">&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;\n  &lt;artifactId&gt;httpclient&lt;/artifactId&gt;\n  &lt;version&gt;4.5.13&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(2)客户端代码</p>\n<pre><code class=\"language-java\">public class Utils03HttpComponentsClient {\n public static void main(String[] args) throws Exception {\n    f1();\n    f2();\n    f3();\n }\n /**\n  * 1.使用org.apache.httpcomponents调用服务端的POST请求\n  * 服务端入参注解: @RequestBody\n  */\n public static void f1() throws Exception {\n   // 1.请求URL\n   String postUrl = \"http://127.0.0.1:19091/server/comm/f1\";\n   // 2.请求参数\n   Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n   map.put(\"userName\", \"HangZhou20220718\");\n   map.put(\"tradeName\", \"Vue进阶教程\");\n   String json = JSON.toJSONString(map);\n   // 3.创建连接与设置连接参数\n   CloseableHttpClient httpClient = HttpClientBuilder.create().build();\n   HttpPost httpPost = new HttpPost(postUrl);\n   StringEntity entity = new StringEntity(json);\n   entity.setContentEncoding(\"UTF-8\");\n   entity.setContentType(\"application/json\");\n   httpPost.setEntity(entity);\n   // 4.发起请求与接收返回值\n   HttpResponse response = httpClient.execute(httpPost);\n   if (response.getStatusLine().getStatusCode() != 200) {\n       throw new Exception(\"调用服务端异常.\");\n   }\n   HttpEntity res = response.getEntity();\n   String resultData = EntityUtils.toString(res);\n   System.out.println(\"从服务端返回结果: \" + resultData);\n   // 5.关闭连接\n   httpClient.close();\n }\n /**\n  * 2.使用org.apache.httpcomponents调用服务端的GET请求\n  * 服务端入参注解: @RequestParam\n  */\n public static void f2() throws Exception {\n   // 1.请求URL与组装请求参数\n   String getUrl = \"http://127.0.0.1:19091/server/comm/f2\";\n   String obj = \"Vue进阶教程\";\n   String para = \"?obj=\" + URLEncoder.encode(obj, \"UTF-8\");\n   getUrl = getUrl + para;\n   // 2.创建连接与设置连接参数\n   CloseableHttpClient httpClient = HttpClientBuilder.create().build();\n   HttpGet httpGet = new HttpGet(getUrl);\n   // 3.发起请求与接收返回值\n   HttpResponse response = httpClient.execute(httpGet);\n   if (response.getStatusLine().getStatusCode() != 200) {\n       throw new Exception(\"调用服务端异常.\");\n   }\n   HttpEntity res = response.getEntity();\n   String resultData = EntityUtils.toString(res);\n   System.out.println(\"从服务端返回结果: \" + resultData);\n   // 4.关闭连接\n   httpClient.close();\n }\n \n /**\n  * 3.使用org.apache.httpcomponents调用服务端的GET请求\n  * 服务端入参注解: @PathVariable\n  */\n public static void f3() throws Exception {\n   // 1.请求URL与组装请求参数\n   String getUrl = \"http://127.0.0.1:19091/server/comm/f3/\";\n   String obj = \"Vue进阶教程\";\n   //入参有中文需要编码\n   obj = URLEncoder.encode(obj, \"UTF-8\");\n   getUrl = getUrl + obj;\n   // 2.创建连接与设置连接参数\n   CloseableHttpClient httpClient = HttpClientBuilder.create().build();\n   HttpGet httpGet = new HttpGet(getUrl);\n   // 3.发起请求与接收返回值\n   HttpResponse response = httpClient.execute(httpGet);\n   if (response.getStatusLine().getStatusCode() != 200) {\n       throw new Exception(\"调用服务端异常.\");\n   }\n   HttpEntity res = response.getEntity();\n   String resultData = EntityUtils.toString(res);\n   System.out.println(\"从服务端返回结果: \" + resultData);\n   // 4.关闭连接\n   httpClient.close();\n }\n}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>4.使用OkHttp调用http请求</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(1)Jar包位置</p>\n<p style=\"margin-left:.0001pt;text-align:left;\">com.squareup.okhttp3，本例使用版本。</p>\n<pre><code class=\"language-XML\">&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;\n  &lt;artifactId&gt;okhttp&lt;/artifactId&gt;\n  &lt;version&gt;4.10.0&lt;/version&gt;\n  &lt;exclusions&gt;\n    &lt;exclusion&gt;\n      &lt;groupId&gt;com.google.android&lt;/groupId&gt;\n      &lt;artifactId&gt;android&lt;/artifactId&gt;\n    &lt;/exclusion&gt;\n  &lt;/exclusions&gt;\n&lt;/dependency&gt;</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(2)客户端代码</p>\n<pre><code class=\"language-java\">public class Utils04OkHttpClient {\n public static void main(String[] args) throws Exception {\n  f1();\n  f2();\n  f3();\n }\n /**\n  *  1.使用okhttp调用服务端的POST请求\n  *    服务端入参注解: @RequestBody\n  * */\n public static void f1() throws Exception {\n  // 1.请求URL\n  String postUrl = \"http://127.0.0.1:19091/server/comm/f1\";\n  // 2.请求参数\n  Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n  map.put(\"userName\", \"HangZhou20220718\");\n  map.put(\"tradeName\", \"Vue进阶教程\");\n  String json = JSON.toJSONString(map);\n  // 3.创建连接与设置连接参数\n  MediaType mediaType = MediaType.parse(\"application/json; charset=UTF-8\");\n  RequestBody requestBody = RequestBody.Companion.create(json, mediaType);\n  Request request = new Request.Builder().url(postUrl).post(requestBody).build();\n  OkHttpClient okHttpClient = new OkHttpClient.Builder().build();\n  // 4.发起请求与接收返回值\n  Response response = okHttpClient.newCall(request).execute();\n  String resultData = response.body().string();\n  System.out.println(\"从服务端返回结果: \" + resultData);\n }\n /**\n  *  2.使用okhttp调用服务端的GET请求\n  *    服务端入参注解: @RequestParam\n  * */\n public static void f2() throws Exception {\n  // 1.请求URL与组装请求参数\n  String getUrl = \"http://127.0.0.1:19091/server/comm/f2\";\n  String obj = \"Vue进阶教程\";\n  String para = \"?obj=\" + URLEncoder.encode(obj, \"UTF-8\");\n  getUrl = getUrl + para;\n  // 2.创建连接与设置连接参数\n  Request request = new Request.Builder().url(getUrl).build();\n  OkHttpClient okHttpClient = new OkHttpClient.Builder().build();\n  // 3.发起请求与接收返回值\n  Response response = okHttpClient.newCall(request).execute();\n  String resultData = response.body().string();\n  System.out.println(\"从服务端返回结果: \" + resultData);\n }\n /**\n  *  3.使用okhttp调用服务端的GET请求\n  *    服务端入参注解: @PathVariable\n  * */\n public static void f3() throws Exception {\n  // 1.请求URL与组装请求参数\n  String getUrl = \"http://127.0.0.1:19091/server/comm/f3/\";\n  String obj = \"Vue进阶教程\";\n  obj = URLEncoder.encode(obj, \"UTF-8\");\n  getUrl = getUrl + obj;\n  // 2.创建连接与设置连接参数\n  Request request = new Request.Builder().url(getUrl).build();\n  OkHttpClient okHttpClient = new OkHttpClient.Builder().build();\n  // 3.发起请求与接收返回值\n  Response response = okHttpClient.newCall(request).execute();\n  String resultData = response.body().string();\n  System.out.println(\"从服务端返回结果: \" + resultData);\n }\n}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>5.使用RestTemplate调用http请求</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(1)Jar包位置</p>\n<p style=\"margin-left:.0001pt;\">RestTemplate，全称org.springframework.web.client.RestTemplate。</p>\n<p style=\"margin-left:.0001pt;\">本例使用版本。</p>\n<pre><code class=\"language-XML\">dependency&gt;\n  &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n  &lt;version&gt;5.3.15&lt;/version&gt;\n  &lt;scope&gt;compile&lt;/scope&gt;\n&lt;/dependency&gt;</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(2)客户端代码</p>\n<pre><code class=\"language-java\">public class Utils05RestTemplateClient {\n public static void main(String[] args) throws Exception {\n  f1();\n  f2();\n  f3();\n }\n /**\n  * 1.使用RestTemplate调用服务端的POST请求\n  * 服务端入参注解: @RequestBody\n  */\n public static void f1() throws Exception {\n  // 1.请求URL\n  String postUrl = \"http://127.0.0.1:19091/server/comm/f1\";\n  // 2.请求参数JSON格式\n  Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n  map.put(\"userName\", \"HangZhou20220718\");\n  map.put(\"tradeName\", \"Vue进阶教程\");\n  String json = JSON.toJSONString(map);\n  // 3.创建RestTemplate\n  RestTemplate restTemplate = new RestTemplate();\n  // 4.设置RestTemplate参数(请求头和body)\n  HttpHeaders headers = new HttpHeaders();\n  MediaType mediaType = MediaType.parseMediaType(\"application/json; charset=UTF-8\");\n  headers.setContentType(mediaType);\n  headers.add(\"Accept\", \"application/json\");\n  HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(json, headers);\n  // 5.使用RestTemplate发起请求与接收返回值\n  String resultData = restTemplate.postForObject(postUrl, entity, String.class);\n  System.out.println(\"从服务端返回结果: \" + resultData);\n }\n /**\n  * 2.使用RestTemplate调用服务端的GET请求\n  * 服务端入参注解: @RequestParam\n  */\n public static void f2() throws Exception {\n  // 1.请求URL与组装请求参数\n  String getUrl = \"http://127.0.0.1:19091/server/comm/f2\";\n  String obj = \"Vue进阶教程\";\n  String para = \"?obj=\" + obj;\n  getUrl = getUrl + para;\n  // 2.创建RestTemplate\n  RestTemplate restTemplate = new RestTemplate();\n  // 3.使用RestTemplate发起请求与接收返回值\n  String resultData = restTemplate.getForObject(getUrl, String.class);\n  System.out.println(\"从服务端返回结果: \" + resultData);\n }\n /**\n  * 3.使用RestTemplate调用服务端的GET请求\n  * 服务端入参注解: @PathVariable\n  */\n public static void f3() throws Exception {\n  // 1.请求URL与组装请求参数\n  String getUrl = \"http://127.0.0.1:19091/server/comm/f3/\";\n  String obj = \"Vue进阶教程\";\n  getUrl = getUrl + obj;\n  // 2.创建RestTemplate\n  RestTemplate restTemplate = new RestTemplate();\n  // 3.使用RestTemplate发起请求与接收返回值\n  String resultData = restTemplate.getForObject(getUrl, String.class);\n  System.out.println(\"从服务端返回结果: \" + resultData);\n }\n}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>6.使用OpenFeign调用http请求</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(1)Jar包位置</p>\n<p style=\"margin-left:.0001pt;\">Spring Cloud OpenFeign是Spring Cloud全家桶组件成员。</p>\n<p style=\"margin-left:.0001pt;\">本例版本：Spring Cloud 2021.0.1；spring-cloud-openfeign 3.1.1</p>\n<pre><code class=\"language-XML\">&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(2)客户端代码(Feign接口)</p>\n<pre><code class=\"language-java\">@FeignClient(contextId = \"utils06OpenFeign\",\n             value = \"example-server\")\npublic interface Utils06OpenFeignClient {\n  /**\n   *  1.使用openfeign调用服务端的POST请求\n   *    服务端入参注解: @RequestBody\n   * */\n  @ResponseBody\n  @PostMapping(\"/server/comm/f1\")\n  Object f1(@RequestBody Object obj);\n  /**\n   *  2.使用openfeign调用服务端的GET请求\n   *    服务端入参注解: @RequestParam\n   * */\n  @ResponseBody\n  @GetMapping(\"/server/comm/f2\")\n  Object f2(@RequestParam(\"obj\") String obj);\n  /**\n   *  3.使用openfeign调用服务端的GET请求\n   *    服务端入参注解: @PathVariable\n   * */\n  @ResponseBody\n  @GetMapping(\"/server/comm/f3/{obj}\")\n  Object f3(@PathVariable(\"obj\") String obj);\n}</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">(3)客户端代码(调用Feign接口)</p>\n<pre><code class=\"language-java\">/**\n *   触发请求: \n *   http://127.0.0.1:19092/client/exam/f\n * */\n@Slf4j\n@RestController\n@RequestMapping(\"/exam\")\npublic class ExampleController {\n  /**\n   *  1.注入Feign接口\n   * */\n  @Autowired\n  private Utils06OpenFeignClient feignClient;\n  \n  /**\n   * 2.调用Feign接口\n   * */\n  @GetMapping(\"/f\")\n  public void f() throws Exception {\n \n  log.info(\"使用Feign调用服务端f1: \");\n  Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n  map.put(\"userName\", \"HangZhou20220718\");\n  map.put(\"tradeName\", \"Vue进阶教程\");\n  Object resultDataF1 = feignClient.f1(map);\n  log.info(\"使用Feign调用服务端f1,返回结果: \" + resultDataF1);\n  \n  log.info(\"使用Feign调用服务端f2: \");\n  String obj = \"Vue进阶教程\";\n  Object resultDataF2 = feignClient.f2(obj);\n  log.info(\"使用Feign调用服务端f2,返回结果: \" + resultDataF2);\n  \n  log.info(\"使用Feign调用服务端f3: \");\n  String obj2 = \"Vue进阶教程\";\n  Object resultDataF3 = feignClient.f3(obj2);\n  log.info(\"使用Feign调用服务端f3,返回结果: \" + resultDataF3);\n }\n}</code></pre>\n<p style=\"margin-left:.0001pt;\">(4)本例使用基础</p>\n<p style=\"margin-left:.0001pt;\">Spring Cloud OpenFeign是Spring Cloud 组件，搭建的微服务都是基于Spring Cloud架构。本例两个微服务：</p>\n<p style=\"margin-left:.0001pt;\">服务端：example-server</p>\n<p style=\"margin-left:.0001pt;\">客户端：example-feign-client</p>\n<p style=\"margin-left:.0001pt;\">服务端和客户端都使用Nacos作为服务注册和发现中心，在客户端example-feign-client中整合Spring Cloud OpenFeign，服务端不需要修改。在启动类中加@EnableFeignClients注解，在使用OpenFeign的接口上加@FeignClient注解。</p>\n<p style=\"margin-left:.0001pt;\">以上，感谢。</p>\n<p style=\"margin-left:.0001pt;text-align:right;\">2022年7月20日</p>\n</div>\n</div>"}