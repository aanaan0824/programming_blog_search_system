{"blogid": "124435655", "writerAge": "码龄160天", "writerBlogNum": "479", "writerCollect": "1058", "writerComment": "48", "writerFan": "760", "writerGrade": "6级", "writerIntegral": "5679", "writerName": "ikt4435", "writerProfileAdress": "writer_image\\profile_124435655.jpg", "writerRankTotal": "3077", "writerRankWeekly": "4322", "writerThumb": "139", "writerVisitNum": "157824", "blog_read_count": "8042", "blog_time": "于 2022-04-26 19:52:55 发布", "blog_title": "如何使用mysql binlog 恢复数据", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>如果想通过 mysql 的 binlog 恢复数据，首先要开启 binlog 。这里搭建一个测试的环境，了解一下 mysql binlog 是如何恢复数据库的。原理比较简单，binlog 会存储mysql中变化的数据，比如你创建了一个数据库，写入了一些数据，这些都会存储在 mysql 的 binlog 中。</p>\n<p>需要恢复的时候就找到，两个位置，一个起始位置，一个结束的位置。结束的位置，一半是数据被破坏或者删除前的位置。mysql 8 默认已经开启了 binlog</p>\n<pre>mysql&gt; show variables like '%log_bin%';\n+---------------------------------+--------------------------+\n| Variable_name                   | Value                    |\n+---------------------------------+--------------------------+\n| log_bin                         | ON                       |\n| log_bin_basename                | /data/mysql/binlog       |\n| log_bin_index                   | /data/mysql/binlog.index |\n| log_bin_trust_function_creators | OFF                      |\n| log_bin_use_v1_row_events       | OFF                      |\n| sql_log_bin                     | ON                       |\n+---------------------------------+--------------------------+</pre>\n<p>可以看到 log_bin 已经开启， 同时可以看到存储的位置在 /daba/mysql 目录 , 前缀是 binlog</p>\n<pre>ls /data/mysql/binlog.*\n/data/mysql/binlog.000143  /data/mysql/binlog.000144  /data/mysql/binlog.000145  /data/mysql/binlog.000146  /data/mysql/binlog.index</pre>\n<p>可以看到有好几个 binlog 日志文件， 因为这里是测试的数据库（有历史信息,之前的数据，没什么用)，为了方便测试，直接进行重置操作。(删除了全部binlog文件) ，如果是生成环境 ，谨慎操作，数据无价。</p>\n<pre>show master logs;\n+---------------+-----------+-----------+\n| Log_name      | File_size | Encrypted |\n+---------------+-----------+-----------+\n| binlog.000143 |       156 | No        |\n| binlog.000144 |       200 | No        |\n| binlog.000145 |       156 | No        |\n| binlog.000146 |       156 | No        |\n+---------------+-----------+-----------+\n4 rows in set (0.01 sec)\n\nmysql&gt; reset master;\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&gt; show master logs;\n+---------------+-----------+-----------+\n| Log_name      | File_size | Encrypted |\n+---------------+-----------+-----------+\n| binlog.000001 |       156 | No        |\n+---------------+-----------+-----------+\n1 row in set (0.00 sec)\n\n\nls /data/mysql/binlog.*\n/data/mysql/binlog.000001  /data/mysql/binlog.index</pre>\n<p>执行重置(reset master)后 ，可以看到之前的 binlog 文件已经被删除了，产生一个新的 binlog 文件。</p>\n<p>可以查看一下这个文件的内容</p>\n<pre>$mysqlbinlog binlog.000001\n# The proper term is pseudo_replica_mode, but we use this compatibility alias\n# to make the statement usable on server versions 8.0.24 and older.\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n...</pre>\n<p>这个时候，我们添加一些数据</p>\n<pre>mysql &lt;&lt;EOT\ncreate database test_liuhaolin_com;\nselect now();\nEOT\n\nmysql &lt;&lt;EOT\nuse test_liuhaolin_com;\n\ncreate table if not exists test(\n\t\\`id\\` int unsigned not null auto_increment primary key,\n\t\\`key\\` varchar(100),\n\t\\`val\\` varchar(255)\n) engine=myisam charset=utf8mb4;\nEOT\n\n\nmysql &lt;&lt;EOT\nuse test_liuhaolin_com;\ninsert into test  values ('1','website', 'https://www.liuhaolin.com');\nEOT</pre>\n<p>这个时候，不小心删除了，数据库 test_liuhaolin_com</p>\n<pre>mysql&gt; drop database test_liuhaolin_com;\nQuery OK, 1 row affected (0.09 sec)</pre>\n<h3>现在就需要解决一个实际问题，怎么恢复这个数据库</h3>\n<p>首先为了防止干扰，执行 flush logs ，产生一个新binlog 文件。</p>\n<pre>mysql&gt; show master logs;\n+---------------+-----------+-----------+\n| Log_name      | File_size | Encrypted |\n+---------------+-----------+-----------+\n| binlog.000001 |      1594 | No        |\n+---------------+-----------+-----------+\n1 row in set (0.00 sec)\n\nmysql&gt; show master status;\n+---------------+----------+--------------+------------------+-------------------+\n| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+---------------+----------+--------------+------------------+-------------------+\n| binlog.000001 |     1594 |              |                  |                   |\n+---------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; flush logs;\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql&gt; show master status;\n+---------------+----------+--------------+------------------+-------------------+\n| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+---------------+----------+--------------+------------------+-------------------+\n| binlog.000002 |      156 |              |                  |                   |\n+---------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)</pre>\n<p>恢复数据，首先要找到数据在哪里被删除了。</p>\n<pre>mysqlbinlog binlog.000001 | grep -n  \"drop database\"\n113:drop database test_liuhaolin_com</pre>\n<p>可以看到在 113 行的地方有个 删除语句。终可以找到两个地方</p>\n<ol><li>数据需要恢复的起始位置</li><li>数据需要恢复的结束位置</li></ol>\n<p>这里起始的位置就找 创建数据库的位置，结束的位置就找 删除数据库的位置。</p>\n<pre>mysqlbinlog --set-charset=utf8  binlog.000001 &gt; tmp.sql</pre>\n<p>可以在文件 tmp.sql 中知道 开始和结束位置</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\543a97640ecb97e300bb1714f8ba81be.png\"/></p>\n<p>binlog</p>\n<p>可以看到开始的地方是 233</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\ccaf467e9183acd93e90307dbc6baa5e.png\"/></p>\n<p>binlog</p>\n<h3>可以看到结束的位置在 1371 ，所以执行一下数据的恢复。</h3>\n<pre>mysqlbinlog -v  binlog.000001  --start-position=233  --stop-position=1371 | mysql</pre>\n<p>作为验证,执行前可以，看下 数据库是否存在。</p>\n<pre>mysql&gt; use test_liuhaolin_com;\nERROR 1049 (42000): Unknown database 'test_liuhaolin_com'\n\n# 执行恢复操作\nmysqlbinlog -v  binlog.000001  --start-position=233  --stop-position=1371 | mysql \n\n# 再次检查，可以发现数据已经恢复\nmysql&gt;\nmysql&gt; use test_liuhaolin_com;\nDatabase changed</pre>\n</div>\n</div>"}