{"blogid": "125586683", "writerAge": "码龄5年", "writerBlogNum": "679", "writerCollect": "878", "writerComment": "98", "writerFan": "56", "writerGrade": "6级", "writerIntegral": "8079", "writerName": "Lucky小黄人", "writerProfileAdress": "writer_image\\profile_125586683.jpg", "writerRankTotal": "2523", "writerRankWeekly": "6204", "writerThumb": "215", "writerVisitNum": "378178", "blog_read_count": "4394", "blog_time": "于 2022-07-03 17:02:00 发布", "blog_title": "MongoDB常用28条查询语句(转)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div class=\"blogpost-body cnblogs-markdown\" id=\"cnblogs_post_body\" style=\"font-size: 16px;\">\n<p><strong>转自</strong>：<a href=\"https://blog.51cto.com/u_15333628/3452209\" rel=\"noopener noreferrer\" target=\"_blank\">MongoDB常用28条查询语句</a></p>\n<p>1、查询所有记录</p>\n<p>db.userInfo.find();</p>\n<p>相当于：</p>\n<p>select* from userInfo;</p>\n<p>默认每页显示20条记录，当显示不下的情况下，可以用it迭代命令查询下一页数据。注意：键入it命令不能带“；”<br/> 但是你可以设置每页显示数据的大小，用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。</p>\n<p>2、查询去掉后的当前聚集集合中的某列的重复数据</p>\n<p>db.userInfo.distinct(\"name\");</p>\n<p>会过滤掉 name 中的相同数据<br/> 相当于：</p>\n<p>select distict name from userInfo;</p>\n<p>3、查询 age = 22 的记录</p>\n<p>db.userInfo.find({\"age\": 22});</p>\n<p>相当于：</p>\n<p>select * from userInfo where age = 22;</p>\n<p>4、查询 age &gt; 22 的记录</p>\n<p>db.userInfo.find({age: {$gt: 22}});</p>\n<p>相当于：</p>\n<p>select * from userInfo where age &gt; 22;</p>\n<p>5、查询 age &lt; 22 的记录</p>\n<p>db.userInfo.find({age: {$lt: 22}});</p>\n<p>相当于：</p>\n<p>select * from userInfo where age &lt; 22;</p>\n<p>6、查询 age &gt;= 25 的记录</p>\n<p>db.userInfo.find({age: {$gte: 25}});</p>\n<p>相当于：</p>\n<p>select * from userInfo where age &gt;= 25;</p>\n<p>7、查询 age &lt;= 25 的记录</p>\n<p>db.userInfo.find({age: {$lte: 25}});</p>\n<p>相当于：</p>\n<p>select * from userInfo where age &lt;= 25;</p>\n<p>8、查询 age &gt;= 23 并且 age &lt;= 25 注意书写格式</p>\n<p>db.userInfo.find({age: {$gte: 23, $lte: 25}});</p>\n<p>相当于：</p>\n<p>select * from userInfo where age&gt;=23 and age &lt;= 25;</p>\n<p>9、查询 age != 25 的记录</p>\n<p>db.userInfo.find({age: {$ne: 25}});<br/> 相当于：</p>\n<p>select * from userInfo where age != 25;</p>\n<p>10、查询 name 中包含 mongo 的数据 模糊查询用于搜索</p>\n<p>db.userInfo.find({name: /mongo/});</p>\n<p>相当于:</p>\n<p>select * from userInfo where name like '%mongo%';</p>\n<p>11、查询 name 中以 mongo 开头的</p>\n<p>db.userInfo.find({name: /^mongo/});</p>\n<p>相当于:</p>\n<p>select * from userInfo where name like 'mongo%';</p>\n<p>12、查询 name 中以 mongo 结尾的</p>\n<p>db.userInfo.find({name: /mongo$/});</p>\n<p>相当于:</p>\n<p>select * from userInfo where name like ‘%mongo’;</p>\n<p>模糊查询语法：{ : /pattern/ }<br/> 其中options值可以为：</p>\n<p>i -- 不区分大小写。<br/> m -- 匹配value中有换行符(\\n)的情形，还有一个情形是：匹配规则中使用了锚，所谓的锚就是^ 开头, $ 结尾。<br/> s -- 允许点字符(.)匹配所有的字符，包括换行符。<br/> x -- 忽视所有空白字符。</p>\n<p>13、查询指定列 name、age 数据</p>\n<p>db.userInfo.find({}, {name: 1, age: 1});</p>\n<p>相当于：</p>\n<p>select name, age from userInfo;</p>\n<p>当然 name 也可以用 true 或 false,当用 ture 的情况下和 name:1 效果一样，如果用 false 就是排除 name，显示 name 以外的列信息。</p>\n<p>14、查询指定列 name、age 数据, age &gt; 25</p>\n<p>db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1});</p>\n<p>相当于：</p>\n<p>select name, age from userInfo where age &gt; 25;</p>\n<p>15、按照年龄排序 1 升序 -1 降序<br/> 升序：</p>\n<p>db.userInfo.find().sort({age: 1});</p>\n<p>相当于：</p>\n<p>select * from userInfo order by age asc;</p>\n<p>降序：</p>\n<p>db.userInfo.find().sort({age: -1});</p>\n<p>相当于：</p>\n<p>select * from userInfo order by age desc;</p>\n<p>17、查询前 5 条数据</p>\n<p>db.userInfo.find().limit(5);</p>\n<p>相当于：</p>\n<p>select * from userInfo limit 5;</p>\n<p>18、查询 10 条以后的数据</p>\n<p>db.userInfo.find().skip(10);</p>\n<p>19、查询在 6-10条 之间的数据</p>\n<p>db.userInfo.find().limit(10).skip(5);</p>\n<p>可用于分页，limit 是 pageSize，第n页时 skip 是 (n-1)*pageSize<br/> 相当于：</p>\n<p>select * from userInfo limit 5,5;</p>\n<p>20、and 查询 name = zhangsan, age = 22 的数据</p>\n<p>db.userInfo.find({name: 'zhangsan', age: 22});</p>\n<p>相当于：</p>\n<p>select * from userInfo where name = 'zhangsan' and age = 22;</p>\n<p>21、or 查询</p>\n<p>db.userInfo.find({$or: [{age: 22}, {age: 25}]});</p>\n<p>相当于：</p>\n<p>select * from userInfo where age = 22 or age = 25;</p>\n<p>注意多条件间用中括号[]包围。</p>\n<p>22、in 查询</p>\n<p>db.userInfo.find({age :{$in:[22,25]}});</p>\n<p>相当于：</p>\n<p>select * from userInfo where age in (22,25);</p>\n<p>23、查询某个结果集的记录条数 统计数量</p>\n<p>db.userInfo.find({age: {$gte: 25}}).count();</p>\n<p>相当于：</p>\n<p>select count(*) from userInfo where age &gt;= 20;</p>\n<p>skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。</p>\n<p>24、查询某个时间段的数据(时间为日期类型，非字符串类型)</p>\n<p>db.userInfo.find({createTime:{$gt:ISODate(\"2020-11-09T00:00:00Z\")}});</p>\n<p>相当于：</p>\n<p>select * from userInfo where createTime&gt; '2020-11-09 00:00:00';</p>\n<p>25、对表中一字段进行统计求和</p>\n<p>db.userInfo.aggregate({$group:{_id:null,score:{$sum:\"$score\"}}})</p>\n<p>相当于：</p>\n<p>SELECT SUM(score) from userInfo;</p>\n<p>26、对表中一字段进行统计求平均值</p>\n<p>db.userInfo.aggregate({$group:{_id:null,score:{$avg:\"$score\"}}})</p>\n<p>相当于：</p>\n<p>SELECT AVG(score) from userInfo;</p>\n<p>27、对表中指定条件记录中的某字段求和</p>\n<p>db.userInfo.aggregate({$match:{createTime:{$gte:ISODate(\"2020-11-10T00:00:00Z\"),$lt:ISODate(\"2020-11-11T00:00:00Z\")}}},{$group:{_id:null,score:{$sum:\"$score\"}}})</p>\n<p>相当于：</p>\n<p>SELECT SUM(score) from userInfo where createTime &gt;= '2020-11-10 00:00:00' and createTime &lt; '2020-11-11 00:00:00';</p>\n<p>28、根据A表，匹配B表所有满足条件的集合，如根据用户表userInfo表中的userId字段找出userAdress表中所有地址的集合，其中userId也为userAdress中的字段。</p>\n<p>假设 有 用户集合， 存储的测试数据 如下：</p>\n<p>db.userInfo.insert([<br/> { \"_id\" : 1, \"userId\" : \"xxxx\", \"username\" : \"ruink\", \"website\" : \"www.51ste.com\" },<br/> { \"_id\" : 2, \"userId\" : \"yyyy\", \"username\" : \"foosingy\", \"website\" : \"www.scgossip.com\" }<br/> ])<br/> 假设 有 地址集合， 存储的测试数据 如下：</p>\n<p>db.userAdress.insert([<br/> { \"_id\" : 1, \"userId\" : \"xxxx\", address: \"测试地址1\"},<br/> { \"_id\" : 2, \"userId\" : \"yyyy\", address: \"测试地址2\"},<br/> { \"_id\" : 3, \"userId\" : \"xxxx\", address: \"测试地址3\"},<br/> ])</p>\n<p>查询语句：</p>\n<pre class=\"has\"><code class=\"language-json\">db.userInfo.aggregate([\n  {\n    $lookup:\n      {\n        from: \"userAdress\",\n        localField: \"userId\",\n        foreignField: \"userId\",\n        as: \"address_detail\"\n      }\n    },\n  { $match : {\"userId\" :\"xxxx\"} }\n])</code></pre>\n<p>上表为找出userId=\"xxxx\"的所有地址的集合，查询结果如下：</p>\n<p>复制</p>\n<pre class=\"has\"><code class=\"language-json\">[\n  {\n    _id: 1,\n    userId: 'xxxx',\n    username: 'ruink',\n    website:'www.51ste.com',\n    address_docs: [\n        {\n          _id: 1,\n          userId: 'xxxx',\n          address: '测试地址1'\n        },\n        {\n          _id: 3,\n          userId: 'xxxx',\n          address: '测试地址3'\n        }\n      ]\n  }\n]</code></pre>\n<h3 id=\"注意\">注意：</h3>\n<p>字段是什么类型，那么查询时字段值的类型就应该是什么类型，比如如果字段类型是 NumberLog，那么查询时就应该执行查询类型为 NumberLog，如</p>\n<pre class=\"has\"><code class=\"language-sql\">db.userInfo.find({id: NumberLog(10)})</code></pre>\n<p><strong>转自</strong>：<a href=\"https://blog.51cto.com/u_15333628/3452209\" rel=\"noopener noreferrer\" target=\"_blank\">MongoDB常用28条查询语句</a></p>\n</div>\n</div>\n</div>"}