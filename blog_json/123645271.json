{"blogid": "123645271", "writerAge": "码龄3年", "writerBlogNum": "2", "writerCollect": "11", "writerComment": "0", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "43", "writerName": "SJ小学生", "writerProfileAdress": "writer_image\\profile_123645271.jpg", "writerRankTotal": "147045", "writerRankWeekly": "1250283", "writerThumb": "3", "writerVisitNum": "2761", "blog_read_count": "2482", "blog_time": "已于 2022-03-22 22:21:17 修改", "blog_title": "C#学习之读取并修改JSON文件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>本博客是自己记录学习所用。<br/> <strong>学习内容</strong><br/> 一、了解什么JSON文件<br/> 二、如何使用C#读取</p>\n<p>一、什么是JSON文件<br/> JSON网站：https://www.json.org/json-en.html<br/> 本文参考的是菜鸟教程中的介绍<br/> 链接：https://www.runoob.com/json/json-tutorial.html<br/> 1、它是啥？<br/> JSON全程为JavaScript Object Notation，一看就知道是Java搞的一个数据格式。官方说法是一种轻量级的数据交换格式。</p>\n<p>2、它长啥样？<br/> 菜鸟教程里提供的JSON实例图片：<br/> <img alt=\"菜鸟教程\" src=\"image\\0794b9307e1a414cb18b7d7a54b82cad.png\"/></p>\n<p>3、它咋读？<br/> JSON文件可以直接使用记事本读取。<br/> 顾名思义，JSON里面包含的都是一些数据，使用不同的数据类型进行保存。</p>\n<pre><code class=\"prism language-bash\">数据在名称/值对中\n数据由逗号分隔\n大括号 <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span> 保存对象\n中括号 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 保存数组，数组可以包含多个对象\n</code></pre>\n<p>一些实例<br/> 数据很好懂，大括号就很像python语言里面所说的字典。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7173694b5215493cb920666017f9897d.png\"/><br/> 像这个文件，最开始是个大括号，那么说明是个字典，字典里面有个关键字sites，sites里面有个中括号即数组，数组保存三个字典，每个字典里面有name和url两个名称，分别指的是网站名字和网址。</p>\n<p>不同的类型有不同的读取方法<br/> 在此之前，有必要解释几个基本概念：</p>\n<p>json字符串，就是string，它一定是由双引号包起来的，如\"{‘name’:‘jerry’}\"。这是一个string，尽管去掉双引号后它就是一个json对象。</p>\n<p>json对象，就是以大括号开头的对象，如{“name”:“jerry”}; 而获取name值的方式就是 json.name 或者 json[“name”];</p>\n<p>json数组，就是以中括号开头的json对象数组，如[{“name”:“tom”},{“name”:“jerry”}];获取值的方式是 json[0].name 或 json[0][“name”]; //这里取第一个name</p>\n<p>4、总结：<br/> 感觉JSON就是一个用类似python字典类型进行不断嵌套的一个数据，里面可以包含数值、字符、字符串、数组、字典等等。</p>\n<p>二、如何使用C#读取和修改<br/> 本次使用的编辑器是VS2022版本。</p>\n<p>设计的操作界面<br/> <img alt=\"在这里插入图片描述\" src=\"image\\22b19dfe356e4d17a7c3f1d9b9752e19.png\"/></p>\n<p>代码部分：<br/> 首先引用库</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Newtonsoft<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Newtonsoft<span class=\"token punctuation\">.</span>Json<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>先定义一个跟Json文件一样的类用于存储数据。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DATA</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> id <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> dev_type <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> mmpx <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> line <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>左上角的按钮内容，输入文件地址。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">OpenFileDialog</span> ofd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OpenFileDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//声明打开文件</span>\n            ofd<span class=\"token punctuation\">.</span>Title <span class=\"token operator\">=</span> <span class=\"token string\">\"请选择打开的文件\"</span><span class=\"token punctuation\">;</span>\n            ofd<span class=\"token punctuation\">.</span>Filter <span class=\"token operator\">=</span> <span class=\"token string\">\"json文件(*.json)|*.json\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ofd<span class=\"token punctuation\">.</span><span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> DialogResult<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//窗体打开成功</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                textBox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> ofd<span class=\"token punctuation\">.</span>FileName<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//获取或设置用户选定的路径</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>查看按钮部分</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">jiexi_click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//string json = \"[ { 'id':'AAA', 'dev_type':2, 'mmpx':1.2, 'line':0 }, { 'id':'BBB', 'dev_type':3, 'mmpx':2.2, 'line':1 } ]\";</span>\n            <span class=\"token comment\">//List&lt;DATA&gt; datas = JsonConvert.DeserializeObject&lt;List&lt;DATA&gt;&gt;(json); //用List作为容器装Person数组</span>\n            <span class=\"token comment\">//如何使用e.g:datas[0].id</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>input_num<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>DATA<span class=\"token punctuation\">&gt;</span></span> parameters <span class=\"token operator\">=</span> JsonConvert<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">DeserializeObject</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>List<span class=\"token punctuation\">&lt;</span>DATA<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            value1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n            value2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dev_type<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            value3<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mmpx<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            value4<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>保存地址按钮</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">save_adress_click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">FolderBrowserDialog</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FolderBrowserDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">.</span><span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> DialogResult<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                aim_location<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">.</span>SelectedPath<span class=\"token punctuation\">;</span><span class=\"token comment\">//选择地址</span>\n                aim_location<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>aim_location<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\converted.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>保存按钮地址</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Change_cilck</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>input_num<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>DATA<span class=\"token punctuation\">&gt;</span></span> parameters <span class=\"token operator\">=</span> JsonConvert<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">DeserializeObject</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>List<span class=\"token punctuation\">&lt;</span>DATA<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            parameters<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> value1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n            parameters<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dev_type <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            parameters<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mmpx <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>value3<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            parameters<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>line <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>value4<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span>aim_location<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> JsonConvert<span class=\"token punctuation\">.</span><span class=\"token function\">SerializeObject</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改保存完成！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总结：<br/> 本次实验由于时间比较仓促，还是有很多部分没有完成，并且完全没有泛化能力。但是能够提供一个大概的结构，经供参考。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}