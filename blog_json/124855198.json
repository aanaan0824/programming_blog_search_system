{"blogid": "124855198", "writerAge": "码龄4年", "writerBlogNum": "300", "writerCollect": "744", "writerComment": "253", "writerFan": "665", "writerGrade": "5级", "writerIntegral": "4437", "writerName": "IT枫斗者", "writerProfileAdress": "writer_image\\profile_124855198.jpg", "writerRankTotal": "4379", "writerRankWeekly": "6164", "writerThumb": "621", "writerVisitNum": "193437", "blog_read_count": "2472", "blog_time": "于 2022-05-19 07:00:50 发布", "blog_title": "java定时任务_定时任务3种实现方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"java_3_0\"></a>java定时任务_定时任务3种实现方式</h1>\n<ul><li>定时任务在实际的开发中特别常见，比如电商平台 30 分钟后自动取消未支付的订单，以及凌晨的数据汇总和备份等，都需要借助定时任务来实现，那么我们本文就来看一下<strong>定时任务最简单的几种实现方式。</strong></li></ul>\n<h2><a id=\"Timer_4\"></a><strong>Timer</strong></h2>\n<ul><li> <p>Timer 是 JDK 自带的定时任务执行类，无论任何项目都可以直接使用 Timer 来实现定时任务，所以 Timer 的优点就是使用方便，它的实现代码如下：</p> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTimerTask</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 定义一个任务</span>\n        TimerTask timerTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Override</span></span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Run timerTask：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 计时器</span>\n        Timer timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加执行任务（延迟 1s 执行，每 3s 执行一次）</span>\n        timer<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>timerTask<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>程序执行结果如下：</p> </li><li> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Run</span> timerTask：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token operator\">:</span><span class=\"token number\">25</span> CST <span class=\"token number\">2020</span>\n<span class=\"token class-name\">Run</span> timerTask：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token operator\">:</span><span class=\"token number\">28</span> CST <span class=\"token number\">2020</span>\n<span class=\"token class-name\">Run</span> timerTask：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token operator\">:</span><span class=\"token number\">31</span> CST <span class=\"token number\">2020</span>\n</code></pre> </li></ul>\n<p><strong>Timer 缺点分析</strong></p>\n<ul><li> <p><strong>任务执行时间长影响其他任务</strong></p> </li><li> <p>当一个任务的执行时间过长时，会影响其他任务的调度，如下代码所示：</p> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTimerTask</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 定义任务 1</span>\n        TimerTask timerTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Override</span></span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入 timerTask 1：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 休眠 5 秒</span>\n                    TimeUnit<span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>InterruptedException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Run timerTask 1：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 定义任务 2</span>\n        TimerTask timerTask2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Override</span></span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Run timerTask 2：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 计时器</span>\n        Timer timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加执行任务（延迟 1s 执行，每 3s 执行一次）</span>\n        timer<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>timerTask<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timer<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>timerTask2<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>程序执行结果如下：</p> </li><li> <pre><code class=\"prism language-java\">进入 timerTask <span class=\"token number\">1</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">08</span> CST <span class=\"token number\">2020</span>\n<span class=\"token class-name\">Run</span> timerTask <span class=\"token number\">1</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">13</span> CST <span class=\"token number\">2020</span> <span class=\"token class-name\">Run</span> timerTask <span class=\"token number\">2</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">13</span> CST <span class=\"token number\">2020</span>\n进入 timerTask <span class=\"token number\">1</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">13</span> CST <span class=\"token number\">2020</span>\n<span class=\"token class-name\">Run</span> timerTask <span class=\"token number\">1</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">18</span> CST <span class=\"token number\">2020</span>\n进入 timerTask <span class=\"token number\">1</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">18</span> CST <span class=\"token number\">2020</span>\n<span class=\"token class-name\">Run</span> timerTask <span class=\"token number\">1</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">23</span> CST <span class=\"token number\">2020</span> <span class=\"token class-name\">Run</span> timerTask <span class=\"token number\">2</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">23</span> CST <span class=\"token number\">2020</span>\n进入 timerTask <span class=\"token number\">1</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">23</span> CST <span class=\"token number\">2020</span>\n</code></pre> </li><li> <p>从上述结果中可以看出，<strong>当任务 1 运行时间超过设定的间隔时间时，任务 2 也会延迟执行。</strong> 原本任务 1 和任务 2 的执行时间间隔都是 3s，但因为任务 1 执行了 5s，因此任务 2 的执行时间间隔也变成了 10s（和原定时间不符）</p> </li><li> <p><strong>任务异常影响其他任务</strong></p> </li><li> <p>使用 Timer 类实现定时任务时，当一个任务抛出异常，其他任务也会终止运行，如下代码所示：</p> </li><li> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTimerTask</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 定义任务 1</span>\n        <span class=\"token class-name\">TimerTask</span> timerTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入 timerTask 1：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 模拟异常</span>\n                <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Run timerTask 1：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 定义任务 2</span>\n        <span class=\"token class-name\">TimerTask</span> timerTask2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Run timerTask 2：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 计时器</span>\n        <span class=\"token class-name\">Timer</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加执行任务（延迟 1s 执行，每 3s 执行一次）</span>\n        timer<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>timerTask<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timer<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>timerTask2<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>程序执行结果如下：</p> </li><li> <pre><code class=\"prism language-java\">进入 timerTask <span class=\"token number\">1</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">22</span><span class=\"token operator\">:</span><span class=\"token number\">02</span><span class=\"token operator\">:</span><span class=\"token number\">37</span> CST <span class=\"token number\">2020</span>\n<span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"Timer-0\"</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>ArithmeticException</span><span class=\"token operator\">:</span> <span class=\"token operator\">/</span> by zero\nat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span></span>MyTimerTask</span>$<span class=\"token number\">1.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyTimerTask</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>\nat <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>TimerThread</span><span class=\"token punctuation\">.</span><span class=\"token function\">mainLoop</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Timer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">555</span><span class=\"token punctuation\">)</span>\nat <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>TimerThread</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Timer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">505</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Process</span> finished <span class=\"token keyword\">with</span> <span class=\"token namespace\">exit</span> code <span class=\"token number\">0</span>\n</code></pre> </li></ul>\n<h3><a id=\"Timer__131\"></a><strong>Timer 小结</strong></h3>\n<ul><li><strong>Timer 类实现定时任务的优点是方便，因为它是 JDK 自定的定时任务，但缺点是任务如果执行时间太长或者是任务执行异常，会影响其他任务调度，所以在生产环境下建议谨慎使用。</strong></li></ul>\n<h2><a id=\"ScheduledExecutorService_135\"></a><strong>ScheduledExecutorService</strong></h2>\n<ul><li> <p>ScheduledExecutorService 也是 JDK 1.5 自带的 API，我们可以使用它来实现定时任务的功能，也就是说<strong>ScheduledExecutorService 可以实现 Timer 类具备的所有功能，并且它可以解决了 Timer 类存在的所有问题</strong>。</p> </li><li> <p>ScheduledExecutorService 实现定时任务的代码示例如下：</p> </li><li> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyScheduledExecutorService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 创建任务队列</span>\n        <span class=\"token class-name\">ScheduledExecutorService</span> scheduledExecutorService <span class=\"token operator\">=</span>\n                <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10 为线程数量</span>\n  <span class=\"token comment\">// 执行任务</span>\n        scheduledExecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Run Schedule：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1s 后开始执行，每 3s 执行一次</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>程序执行结果如下：</p> </li><li> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Run</span> <span class=\"token class-name\">Schedule</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">23</span> CST <span class=\"token number\">2020</span>\n<span class=\"token class-name\">Run</span> <span class=\"token class-name\">Schedule</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">26</span> CST <span class=\"token number\">2020</span>\n<span class=\"token class-name\">Run</span> <span class=\"token class-name\">Schedule</span>：<span class=\"token class-name\">Mon</span> <span class=\"token class-name\">Aug</span> <span class=\"token number\">17</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">29</span> CST <span class=\"token number\">2020</span>\n</code></pre> </li><li> <p><strong>使用 ScheduledExecutorService 可以避免任务执行时间过长对其他任务造成的影响</strong>。</p> </li><li> <p><strong>当任务 1 出现异常时，并不会影响任务 2 的执行</strong></p> </li></ul>\n<h3><a id=\"ScheduledExecutorService__167\"></a><strong>ScheduledExecutorService 小结</strong></h3>\n<ul><li><strong>在单机生产环境下建议使用 ScheduledExecutorService 来执行定时任务，它是 JDK 1.5 之后自带的 API，因此使用起来也比较方便，并且使用 ScheduledExecutorService 来执行任务，不会造成任务间的相互影响。</strong></li></ul>\n<h2><a id=\"Spring_Task_171\"></a><strong>Spring Task</strong></h2>\n<ul><li>如果使用的是 Spring 或 Spring Boot 框架，可以直接使用 Spring Framework 自带的定时任务，<strong>使用上面两种定时任务的实现方式，很难实现设定了具体时间的定时任务，比如当我们需要每周五来执行某项任务时</strong>，但如果使用 Spring Task 就可轻松的实现此需求</li><li>以 Spring Boot 为例，实现定时任务只需两步：</li><li>开启定时任务</li><li>添加定时任务</li></ul>\n<h3><a id=\"_178\"></a><strong>开启定时任务</strong></h3>\n<ul><li> <p>开启定时任务只需要在 Spring Boot 的启动类上声明 <code>@EnableScheduling</code> 即可，实现代码如下：</p> </li><li> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableScheduling</span> <span class=\"token comment\">// 开启定时任务</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// do someing</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ul>\n<h3><a id=\"_190\"></a><strong>添加定时任务</strong></h3>\n<ul><li> <p>定时任务的添加只需要使用 <code>@Scheduled</code> 注解标注即可，如果有多个定时任务可以创建多个 <code>@Scheduled</code> 注解标注的方法，示例代码如下：</p> </li><li> <pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>scheduling<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scheduled</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token annotation punctuation\">@Component</span> <span class=\"token comment\">// 把此类托管给 Spring，不能省略</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskUtils</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 添加定时任务</span>\n    <span class=\"token annotation punctuation\">@Scheduled</span><span class=\"token punctuation\">(</span>cron <span class=\"token operator\">=</span> <span class=\"token string\">\"59 59 23 0 0 5\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// cron 表达式，每周五 23:59:59 执行</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是定时任务~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>定时任务是自动触发的无需手动干预，也就是说 Spring Boot 启动后会自动加载并执行定时任务。</p> </li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}