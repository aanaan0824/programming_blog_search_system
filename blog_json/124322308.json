{"blogid": "124322308", "writerAge": "码龄3年", "writerBlogNum": "17", "writerCollect": "108", "writerComment": "16", "writerFan": "1058", "writerGrade": "2级", "writerIntegral": "229", "writerName": "牛马大亨", "writerProfileAdress": "writer_image\\profile_124322308.jpg", "writerRankTotal": "76324", "writerRankWeekly": "26422", "writerThumb": "46", "writerVisitNum": "50400", "blog_read_count": "2208", "blog_time": "已于 2022-05-07 10:14:05 修改", "blog_title": "【Unity每日灵感】第一期：IPointer_?_Handler接口实现有趣的鼠标交互", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><span style=\"color:#cccccc;\"><strong>本期开设新的栏目Up&amp;Up，专门针对我自己平日里一些在项目中使用的好玩的点子，或者尚未实现的有趣功能复刻。</strong></span></p>\n<p><strong><span style=\"color:#ff9900;\">第一期：EventSystems中的IPointerClickHandler、IPointerEnterHandler、IPointerExitHandler等...对鼠标回调事件的检测和函数控制。</span></strong></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93\">一、接口及其函数方法总结</a></p>\n<p id=\"%E3%80%87EventSystems-toc\" style=\"margin-left:80px;\"><a href=\"#%E3%80%87EventSystems\">〇EventSystems</a></p>\n<p id=\"%E2%91%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0\">①IPointerClickHandler</a></p>\n<p id=\"%E2%91%A2-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A2\">②IPointerEnter/ExitHandler</a></p>\n<p id=\"%E2%91%A3IPointerUp%2FDownHandler-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A3IPointerUp%2FDownHandler\">③IPointerUp/DownHandler</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B\">二、实际案例</a></p>\n<p id=\"%E2%91%A0%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BAUI-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BAUI\">①悬浮提示UI</a></p>\n<p id=\"%E2%91%A1%E6%8B%96%E6%8B%BDUI-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A1%E6%8B%96%E6%8B%BDUI\">②拖拽UI</a></p>\n<p id=\"%E2%91%A23D%E7%89%A9%E4%BD%93%E5%93%8D%E5%BA%94-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A23D%E7%89%A9%E4%BD%93%E5%93%8D%E5%BA%94\">③3D物体响应</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93\">一、接口及其函数方法总结</h1>\n<h3 id=\"%E3%80%87EventSystems\">〇EventSystems</h3>\n<p>EventSystems 主要是负责处理输入、射线投射和发送事件。</p>\n<p>根据字面意思也可以看出来 ES 是负责处理 Unity 场景中的事件。 一个场景应当只包含一个 EventSystem。<br/><br/> 当 EventSystem 启动时，它会搜索附加到同一 <a href=\"https://docs.unity.cn/cn/2018.2/ScriptReference/GameObject.html\" title=\"GameObject\">GameObject</a> 的任何 <a href=\"https://docs.unity.cn/cn/2018.2/ScriptReference/EventSystems.BaseInputModule.html\" title=\"BaseInputModule\">BaseInputModule</a>， 并将其添加到内部列表中。这里的BaseInputModule(基本输入模块类)在 EventSystem 中所有关系输入模块都继承自该类。</p>\n<p>在更新时，每个附加模块都会收到 一个 <a href=\"https://docs.unity.cn/cn/2018.2/ScriptReference/EventSystems.EventSystem.UpdateModules.html\" title=\"UpdateModules\">UpdateModules</a> 调用，模块可以在其中修改内部状态。所有模块更新完成后， 活动模块将执行 Process 调用。 此时可以进行自定义模块处理。</p>\n<p>拿最简单的例子来说就是，每当开发者们新建创建UI的时候都会自动新建一个名为EventSystem对象，如果没有这个对象，对UI上的各种操作都会失效。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"52\" src=\"image\\ec07b2160091462c987a46a7f356f134.png\" width=\"183\"/></p>\n<p style=\"text-align:center;\"></p>\n<h3 id=\"%E2%91%A0\">①IPointerClickHandler</h3>\n<p>要实现的接口（如果您希望接收 <a href=\"https://docs.unity3d.com/cn/2018.4/ScriptReference/EventSystems.IPointerClickHandler.OnPointerClick.html\" title=\"OnPointerClick\">OnPointerClick</a> 回调）</p>\n<p>使用 IPointerClickHandler 接口来处理使用 OnPointerClick 回调的单击输入。确保场景中存在事件系统，以支持单击检测。对于非 UI 游戏对象的单击检测，请确保将 <a href=\"https://docs.unity3d.com/cn/2018.4/ScriptReference/EventSystems.PhysicsRaycaster.html\" title=\"PhysicsRaycaster\">PhysicsRaycaster</a> 附加到摄像机。</p>\n<p>使用举例如下图1-1，在头部引用EventSystems，在Mono行为类的后面引用上PointerClickHandler，alt+enter快捷实现接口，自己手打应该也可以。而我们接下来想要实现的效果则是当鼠标点击物体或者UI的时候能够得到某种反馈。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"445\" src=\"image\\a46e04fd724c433d99c8751667c8a9b7.png\" width=\"1200\"/></p>\n<p style=\"text-align:center;\"><span style=\"color:#a5a5a5;\">图1-1 IPointerClickHandler接口</span></p>\n<p style=\"text-align:center;\"></p>\n<p>所以我们在实现的OnPointerClick方法下编写逻辑。编写好之后，在场景中为两个物体都添加上碰撞盒，按照官方说法给摄像机添加上PhysicsRaycaster，把写好的脚本添加到想要实现点击检测的物体，如图1-2，1-3。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"396\" src=\"image\\5b2748a455d84a19bb232b7500113f7a.png\" width=\"1189\"/></p>\n<p style=\"text-align:center;\"><span style=\"color:#a5a5a5;\"> 图1-2 碰撞添加</span></p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"273\" src=\"image\\377eddf44aee415484f06b8591d7ebf9.png\" width=\"441\"/></p>\n<p style=\"text-align:center;\"><span style=\"color:#a5a5a5;\">  图1-3 PhysicsRaycaster添加</span></p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:justify;\">具体测试代码如下，利用Debug理解原理</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.EventSystems;\n\npublic class ESIPointerTest : MonoBehaviour, IPointerClickHandler\n{\n    public void OnPointerClick(PointerEventData eventData)\n    {\n        Debug.Log(\"你点击到了：\" + name + \" \" + tag);\n    }\n}\n</code></pre>\n<p>运行点击两物体查看效果，如图1-4。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"87\" src=\"image\\076289758c7a4dd3836aae3ebbbffbf4.png\" width=\"817\"/></p>\n<p style=\"text-align:center;\"><span style=\"color:#a5a5a5;\">图1-4 OnPointerClick方法反馈</span></p>\n<p></p>\n<h3 id=\"%E2%91%A2\">②IPointerEnter/ExitHandler</h3>\n<p>要实现的接口（如果您希望接收 <a href=\"https://docs.unity3d.com/cn/2018.4/ScriptReference/EventSystems.IPointerExitHandler.OnPointerExit.html\" title=\"OnPointerExit\">OnPointerExit</a> 回调）</p>\n<p>用于检测鼠标何时开始悬停在某个游戏对象上。要检测鼠标何时停止悬停在游戏对象上，请使用 <a href=\"https://docs.unity3d.com/cn/2018.4/ScriptReference/EventSystems.IPointerExitHandler.html\" title=\"IPointerExitHandler\">IPointerExitHandler</a>。</p>\n<p><strong>注意：</strong>Enter和Exit本身并不需要同时出现。</p>\n<p>和碰撞检测的检测原理其实是一样的，和Tigger或Collision的OnCollisionEnter，OnTriggerEnter等比较类似，只是讲碰撞盒触发器的监测对象换成了鼠标，相当于自写一个摄像机发射鼠标位置射线检测。</p>\n<p>也是用Debug来理解，如下代码。</p>\n<pre><code class=\"language-cs\">public class ESIPointerTest : MonoBehaviour, IPointerClickHandler, IPointerEnterHandler, IPointerExitHandler\n{\n    public void OnPointerClick(PointerEventData eventData)\n    {\n        Debug.Log(\"你点击到了：\" + name + \" \" + tag);\n    }\n\n    public void OnPointerEnter(PointerEventData eventData)\n    {\n        Debug.Log(\"你的鼠标悬停在了：\" + name + \" \" + tag + \" 开始于：\" + Time.time);\n    }\n\n    public void OnPointerExit(PointerEventData eventData)\n    {\n        Debug.Log(\"你的鼠标离开了：\" + name + \" \" + tag + \" 结束于：\" + Time.time);\n    }\n}\n</code></pre>\n<p>具体效果如下图。</p>\n<p><img alt=\"\" height=\"846\" src=\"image\\4d39dd79042b40d2987310e6682bc2b7.png\" width=\"981\"/></p>\n<p style=\"text-align:center;\"><span style=\"color:#a5a5a5;\"> 图2-1，3-1 鼠标检测</span></p>\n<p style=\"text-align:center;\"></p>\n<h3 id=\"%E2%91%A3IPointerUp%2FDownHandler\">③IPointerUp/DownHandler</h3>\n<p>要实现的接口（如果您希望接收 <a href=\"https://docs.unity3d.com/cn/2018.4/ScriptReference/EventSystems.IPointerUpHandler.OnPointerUp.html\" title=\"OnPointerUp\">OnPointerUp</a> 回调）</p>\n<p><strong>注意</strong>：为了接收 <a href=\"https://docs.unity3d.com/cn/2018.4/ScriptReference/EventSystems.IPointerUpHandler.OnPointerUp.html\" title=\"OnPointerUp\">OnPointerUp</a> 回调，您还必须实现 <a href=\"https://docs.unity3d.com/cn/2018.4/ScriptReference/EventSystems.IPointerDownHandler.html\" title=\"IPointerDownHandler\">IPointerDownHandler</a> 接口，即Up和Down的接口必须同时实现。</p>\n<p>要实现的接口（如果您希望接收 <a href=\"https://docs.unity3d.com/cn/2018.4/ScriptReference/EventSystems.IPointerDownHandler.OnPointerDown.html\" title=\"OnPointerDown\">OnPointerDown</a> 回调）</p>\n<p>检测正在进行的鼠标单击，直到松开鼠标按钮。使用 <a href=\"https://docs.unity3d.com/cn/2018.4/ScriptReference/EventSystems.IPointerUpHandler.html\" title=\"IPointerUpHandler\">IPointerUpHandler</a> 来处理鼠标按钮的释放。和OnCollision/TriggerStay不同，可以看得出来按下去的一点多秒并不是持续检测的。</p>\n<p><img alt=\"\" height=\"83\" src=\"image\\e2a6f89557f945bbba0387f322a56c12.png\" width=\"802\"/></p>\n<hr/>\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B\">二、实际案例</h1>\n<p>好的，那有了对以上几种接口的效果和实现原理的理解，我们来尝试实现一下几个案例。</p>\n<h3 id=\"%E2%91%A0%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BAUI\">①悬浮提示UI</h3>\n<p>效果见下图1-1：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/e623e1620e7a48fead9578b20091ed42.gif\"/></p>\n<p style=\"text-align:center;\"> 图1-1 悬浮UI</p>\n<p>原理分析：</p>\n<p>Ⅰ实现生成悬浮UI，则利用RectTransform类型变量来存储和操作矩形（悬浮方块UI）的位置、大小和锚定。</p>\n<pre><code class=\"language-cs\">    public static TipUI instance;\n    private RectTransform childRectTrans;\n    private float rectRefreshTime;\n    public float rectIntervaTime = 0.1f; //矩形UI间隔时间，间隔时间越长事件结束后停留越久\n    private bool isUI; //判断是否是UI\n\n    void Awake()\n    {\n        instance = this;\n\n        childRectTrans = transform.GetChild(0).GetComponent&lt;RectTransform&gt;();\n        rectRefreshTime = 0.0f;\n        isUI = false;\n        DontDestroyOnLoad(gameObject); //防止在改变场景的时候销毁 即额外保存可以引用在别的场景\n    }</code></pre>\n<p>Ⅱ实现鼠标跟随，则需要用Input.mousePosition来控制，同时检测激活状态，在移出检测范围后取消激活。</p>\n<pre><code class=\"language-cs\">    /// &lt;summary&gt;\n    /// 设置Tip显示位置\n    /// &lt;/summary&gt;\n    private void SetTipPos() {\n        childRectTrans.position = Input.mousePosition;\n    }\n\n    /// &lt;summary&gt;\n    /// 获取当前Tip激活状态\n    /// &lt;/summary&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public bool GetActive() {\n        return childRectTrans.gameObject.activeSelf;\n    }</code></pre>\n<p></p>\n<p>Ⅲ实现判断屏幕是否超界，居于屏幕上部还是下部的调整逻辑，则获取到屏幕上的XY数值，以鼠标位置在屏幕哪一部分来判断，反馈矩形pivot中心位置给悬浮UI后再创建。</p>\n<pre><code class=\"language-cs\">    /// &lt;summary&gt;\n    /// 设置Tip中心\n    /// &lt;/summary&gt;\n    private void SetTipPivot() {\n        int tempPivotX = ((Input.mousePosition.x &lt;= Screen.height / 2.0f) ? 0 : 1);\n        int tempPivotY = ((Input.mousePosition.x &lt;= Screen.width / 2.0f) ? 0 : 1);\n        if (childRectTrans.pivot.x != tempPivotX || childRectTrans.pivot.y != tempPivotY) {\n            childRectTrans.pivot = new Vector2(tempPivotX, tempPivotY);\n        }\n    }</code></pre>\n<p>Ⅳ实现隐藏或显现浮窗TipUI，则命好两个函数根据文章前面介绍的IPointer事件和对物体的OnMouse事件去设置SetActive(true / false)。</p>\n<pre><code class=\"language-cs\">    /// &lt;summary&gt;\n    /// 隐藏Tip\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"_isUI\"&gt;&lt;/param&gt;\n    public void HideTip(bool _isUI) {\n        if (!_isUI &amp;&amp; (isUI &amp;&amp; childRectTrans.gameObject.activeSelf)) return;\n        childRectTrans.GetChild(0).GetComponent&lt;UnityEngine.UI.Text&gt;().text = \"\";\n        childRectTrans.gameObject.SetActive(false);\n    }\n\n    /// &lt;summary&gt;\n    /// 展示Tip\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"_infoStr\"&gt;&lt;/param&gt;\n    /// &lt;param name=\"_isUI\"&gt;&lt;/param&gt;\n    public void ShowTip(string _infoStr, bool _isUI) {\n        if (!_isUI &amp;&amp; (isUI &amp;&amp; childRectTrans.gameObject.activeSelf)) return;\n        childRectTrans.GetChild(0).GetComponent&lt;UnityEngine.UI.Text&gt;().text = _infoStr;\n        childRectTrans.gameObject.SetActive(true);\n        isUI = _isUI;\n        rectRefreshTime = Time.time;\n        SetTipPivot();\n        SetTipPos();\n    }</code></pre>\n<p>Ⅴ实现浮窗UI上的文本，则需要额外定义UI信息类，同时调用IPointer和OnMouse，针对某个想要实现浮窗的物体去添加脚本。</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.EventSystems;\n\npublic class TipUIInfo : MonoBehaviour,IPointerEnterHandler,IPointerExitHandler\n{\n    public string infoStr;\n\n    /// &lt;summary&gt;\n    ///  用于检测UI的悬停移开\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"eventData\"&gt;&lt;/param&gt;\n    public void OnPointerEnter(PointerEventData eventData)\n    {\n        Debug.LogWarning(\"OnPointerEnter物体和UI都可以检测，但不连续\");\n        TipUI.instance.ShowTip(infoStr, true);\n    }\n\n    public void OnPointerExit(PointerEventData eventData)\n    {\n        TipUI.instance.HideTip(true);\n    }\n\n    /// &lt;summary&gt;\n    /// 检测物体的悬停移开\n    /// &lt;/summary&gt;\n    private void OnMouseOver()\n    {\n        Debug.LogWarning(\"OnMouseOver仅检测物体，是连续的\");\n        if (!TipUI.instance.GetActive())\n        {\n            TipUI.instance.ShowTip(infoStr, false);\n        }\n\n    }\n\n    private void OnMouseExit()\n    {\n        TipUI.instance.HideTip(false);\n    }\n}\n</code></pre>\n<p>使用方法则是将TipUIInfo挂载在想要实现悬浮UI的对象或UI上，如下图1-2设置悬浮UI的形态，其中UITip为去掉GraphicRaycast的Canvas如图1-3，TipImage则是一个图标，添加好图1-4的两个组件，TipText就是一个文本。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"51\" src=\"image\\43823766876b427eb26629c96a2b3862.png\" width=\"207\"/></p>\n<p style=\"text-align:center;\"> 图1-2 UITip预制</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"487\" src=\"image\\3099b9dd9ce94cf5879444c90ea22f39.png\" width=\"293\"/></p>\n<p style=\"text-align:center;\">图1-3 Canvas作为UITip</p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"558\" src=\"image\\9580ddc89ed64213babd5616aa588214.png\" width=\"288\"/></p>\n<p style=\"text-align:center;\"> 图1-4 TipImage的设定</p>\n<p>完整代码如下</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\n/// &lt;summary&gt;\n/// 显示悬浮UI，优先级顺序-&gt; UI -&gt; 物体\n/// &lt;/summary&gt;\npublic class TipUI : MonoBehaviour\n{\n    public static TipUI instance;\n    private RectTransform childRectTrans;\n    private float rectRefreshTime;\n    public float rectIntervaTime = 0.1f; //矩形UI间隔时间，间隔时间越长事件结束后停留越久\n    private bool isUI; //判断是否是UI\n\n    void Awake()\n    {\n        instance = this;\n\n        childRectTrans = transform.GetChild(0).GetComponent&lt;RectTransform&gt;();\n        rectRefreshTime = 0.0f;\n        isUI = false;\n        DontDestroyOnLoad(gameObject); //防止在改变场景的时候销毁 即额外保存可以引用在别的场景\n    }\n\n    void Start()\n    {\n        childRectTrans.gameObject.SetActive(false);\n        Debug.Log(\"Rect:\" + childRectTrans);\n    }\n\n    void Update()\n    {\n        if (childRectTrans.gameObject.activeSelf) {\n            if (Time.time &gt;= rectRefreshTime + rectIntervaTime) {\n                rectRefreshTime = Time.time;\n                SetTipPivot();\n            }\n            SetTipPos();\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// 设置Tip中心\n    /// &lt;/summary&gt;\n    private void SetTipPivot() {\n        int tempPivotX = ((Input.mousePosition.x &lt;= Screen.height / 2.0f) ? 0 : 1);\n        int tempPivotY = ((Input.mousePosition.x &lt;= Screen.width / 2.0f) ? 0 : 1);\n        if (childRectTrans.pivot.x != tempPivotX || childRectTrans.pivot.y != tempPivotY) {\n            childRectTrans.pivot = new Vector2(tempPivotX, tempPivotY);\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// 设置Tip显示位置\n    /// &lt;/summary&gt;\n    private void SetTipPos() {\n        childRectTrans.position = Input.mousePosition;\n    }\n\n    /// &lt;summary&gt;\n    /// 获取当前Tip激活状态\n    /// &lt;/summary&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public bool GetActive() {\n        return childRectTrans.gameObject.activeSelf;\n    }\n\n    /// &lt;summary&gt;\n    /// 隐藏Tip\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"_isUI\"&gt;&lt;/param&gt;\n    public void HideTip(bool _isUI) {\n        if (!_isUI &amp;&amp; (isUI &amp;&amp; childRectTrans.gameObject.activeSelf)) return;\n        childRectTrans.GetChild(0).GetComponent&lt;UnityEngine.UI.Text&gt;().text = \"\";\n        childRectTrans.gameObject.SetActive(false);\n    }\n\n    /// &lt;summary&gt;\n    /// 展示Tip\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"_infoStr\"&gt;&lt;/param&gt;\n    /// &lt;param name=\"_isUI\"&gt;&lt;/param&gt;\n    public void ShowTip(string _infoStr, bool _isUI) {\n        if (!_isUI &amp;&amp; (isUI &amp;&amp; childRectTrans.gameObject.activeSelf)) return;\n        childRectTrans.GetChild(0).GetComponent&lt;UnityEngine.UI.Text&gt;().text = _infoStr;\n        childRectTrans.gameObject.SetActive(true);\n        isUI = _isUI;\n        rectRefreshTime = Time.time;\n        SetTipPivot();\n        SetTipPos();\n    }\n}\n</code></pre>\n<h3 id=\"%E2%91%A1%E6%8B%96%E6%8B%BDUI\">②拖拽UI</h3>\n<p>不同于先前讲述的几种IPointer接口，这里还有IBegin..IDrag..类的接口，这一类接口均继承于IEventSystemHandler的事件系统接口。而具体实现效果如图2-1，</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/e168a1dfc6a84dfb8ac1f8e408ffa924.gif\"/></p>\n<p style=\"text-align:center;\"><span style=\"color:#a5a5a5;\">图2-1 UI拖拽</span></p>\n<p>挂上脚本即可，完整代码如下：</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.EventSystems;\npublic class DragUI : MonoBehaviour, IPointerClickHandler, IBeginDragHandler, IDragHandler, IEndDragHandler\n{\n    private RectTransform rectTransform;\n    void Start()\n    {\n        rectTransform = GetComponent&lt;RectTransform&gt;();\n    }\n\n    public void OnBeginDrag(PointerEventData eventData)\n    {\n        Debug.Log(\"开始拖拽\");\n    }\n\n    public void OnDrag(PointerEventData eventData)\n    {\n        //以备反馈点输出\n        Vector3 uiPosition;\n\n        //将一个屏幕空间点转换为世界空间中位于给定 RectTransform 平面上的一个位置\n        RectTransformUtility.ScreenPointToWorldPointInRectangle(rectTransform, eventData.position, eventData.enterEventCamera, out uiPosition);\n\n        //将赋值位置的uiPosition反馈回当前具有RectTransform的UI.Position\n        rectTransform.position = uiPosition;\n    }\n\n    public void OnEndDrag(PointerEventData eventData)\n    {\n        Debug.Log(\"结束拖拽\");\n    }\n\n    public void OnPointerClick(PointerEventData eventData)\n    {\n        Debug.LogWarning(\"检测到点击\");\n    }\n}\n</code></pre>\n<h3 id=\"%E2%91%A23D%E7%89%A9%E4%BD%93%E5%93%8D%E5%BA%94\">③3D物体响应</h3>\n<p>待更新</p>\n</div>\n</div>"}