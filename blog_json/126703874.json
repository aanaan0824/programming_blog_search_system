{"blogid": "126703874", "writerAge": "码龄4年", "writerBlogNum": "453", "writerCollect": "481", "writerComment": "138", "writerFan": "229", "writerGrade": "6级", "writerIntegral": "5014", "writerName": "cheems~", "writerProfileAdress": "writer_image\\profile_126703874.jpg", "writerRankTotal": "3850", "writerRankWeekly": "2112", "writerThumb": "341", "writerVisitNum": "218940", "blog_read_count": "940", "blog_time": "于 2022-09-05 19:56:05 发布", "blog_title": "C++文件服务器项目—FastDFS—1", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C++文件服务器项目—FastDFS—1</h3>\n<ul><li><a href=\"#_2\">前言</a></li><li><a href=\"#1__13\">1. 项目架构</a></li><li><a href=\"#2__57\">2. 分布式文件系统</a></li><li><ul><li><a href=\"#21__59\">2.1 传统文件系统</a></li><li><a href=\"#22__69\">2.2 分布式文件系统</a></li></ul>\n</li><li><a href=\"#3_FastDFS_91\">3. FastDFS介绍</a></li><li><ul><li><a href=\"#31_fdfs_93\">3.1 fdfs概述</a></li><li><a href=\"#32_fdfs_108\">3.2 fdfs框架中的三个角色</a></li><li><a href=\"#33_fdfs_120\">3.3 fdfs三个角色之间的关系</a></li><li><a href=\"#34_fdfs_155\">3.4 fdfs集群</a></li></ul>\n</li><li><a href=\"#4_FastDFS_215\">4. FastDFS的安装</a></li><li><ul><li><a href=\"#41__216\">4.1 源码安装详解</a></li><li><a href=\"#42__237\">4.2 安装源码</a></li><li><a href=\"#43_make_install_260\">4.3 make install做了哪些事</a></li><li><a href=\"#44__269\">4.4 测试</a></li></ul>\n</li><li><a href=\"#5_fdfs_309\">5. fdfs的配置文件</a></li><li><ul><li><a href=\"#51_tracker_318\">5.1 tracker配置文件</a></li><li><a href=\"#52_storage_340\">5.2 storage配置文件</a></li><li><a href=\"#53_client_378\">5.3 client配置文件</a></li><li><a href=\"#54__395\">5.4 集群的配置</a></li></ul>\n</li><li><a href=\"#6_fdfs_408\">6. fdfs的启动</a></li><li><ul><li><a href=\"#61_____423\">6.1 第一个启动追踪器 - 守护进程</a></li><li><a href=\"#62_____447\">6.2 第二个启动存储节点 - 守护进程</a></li><li><a href=\"#63_____471\">6.3 第三个启动客户端 - 普通进程</a></li><li><a href=\"#64_FastDFS_498\">6.4 FastDFS的状态检测</a></li></ul>\n</li><li><a href=\"#7_file_id_562\">7. file_id的构成</a></li><li><a href=\"#8__608\">8. 上传下载的代码实现</a></li><li><ul><li><a href=\"#81__610\">8.1 使用多进程方式-思路</a></li><li><a href=\"#82_fastDFS_API_634\">8.2 使用fastDFS API实现-思路</a></li><li><a href=\"#83__762\">8.3 两个方案的代码实现</a></li><li><ul><li><a href=\"#831__765\">8.3.1 源代码</a></li><li><a href=\"#832__915\">8.3.2 测试</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>前言</h1>\n<p>   本项目使用c++实现一个文件服务器，核心功能是上传与下载。所以该项目可以作为网盘，也可以作为图床来用。</p>\n<p>  本文的核心重点是介绍<code>FastDFS</code>的<code>概念</code>、<code>构成</code>、<code>配置文件</code>、<code>启动</code>与<code>上传下载的实现</code>。后续将逐步介绍nginx，mysql，redis，fastcgi等内容。</p>\n<p>  本专栏知识点是通过<strong>零声教育</strong>的线上课学习，进行梳理总结写下文章，对c/c++linux课程感兴趣的读者，可以点击链接 <a href=\"https://ke.qq.com/course/417774?flowToken=1010783\">C/C++后台高级服务器课程介绍</a> 详细查看课程的服务。</p>\n<h1><a id=\"1__13\"></a>1. 项目架构</h1>\n<p><img alt=\"项目架构图\" src=\"image\\0ee0659502d044c7b6164ce604d42c41.png\"/></p>\n<ol><li>客户端-网络架构</li></ol>\n<ul><li>b/s：浏览器使用http协议</li><li>c/s：客户端可以随意选择协议</li></ul>\n<ol start=\"2\"><li>反向代理服务器</li></ol>\n<ul><li>客户端并不能直接访问web服务器, 直接访问到的是反向代理服务器</li><li>客户端静请求发送给反向代理服务器, 反向代理将客户端请求转发给web服务器</li></ul>\n<ol start=\"3\"><li>服务端</li></ol>\n<ul><li> <p>Nginx</p>\n<ul><li>可以处理静态请求：html，jpg</li><li>无法处理动态请求</li><li>服务器部署为集群后, 每台服务器上部署的内容必须相同</li></ul> </li><li> <p>fastCGI</p>\n<ul><li>帮助服务器Nginx处理动态请求</li></ul> </li></ul>\n<ol start=\"4\"><li>关系型数据库mysql</li></ol>\n<ul><li>存储文件的属性信息</li><li>存储用户的属性信息</li></ul>\n<ol start=\"5\"><li>非关系型数据库redis</li></ol>\n<ul><li>提高程序效率，减轻mysql压力</li><li>存储是服务器经常要从关系型数据中读取的数据</li></ul>\n<ol start=\"6\"><li><code>FastDFS - 分布式文件系统</code></li></ol>\n<ul><li>存储用户上传的文件</li><li>用户下载存储的文件</li></ul>\n<h1><a id=\"2__57\"></a>2. 分布式文件系统</h1>\n<h2><a id=\"21__59\"></a>2.1 传统文件系统</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\19a6b00ba43c459fa6eb1451a7d9b079.png\"/><br/>    传统的文件系统可以被挂载和卸载，格式：ntfs / fat32 / ext3 / ext4</p>\n<p>   一台主机的磁盘插槽不可能是无限的，当磁盘都满了之后想要扩充，而磁盘插槽都被插满了，那么这个时候就需要使用分布式文件系统了。</p>\n<h2><a id=\"22__69\"></a>2.2 分布式文件系统</h2>\n<p>   完整的文件系统, 不在同一台主机上，而是在很多台主机上，多个分散的文件系统组合在一起，形成了一个完整的文件系统。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\16f2bb1fef824c32a137ab3d1818bf17.png\"/></p>\n<p>分布式文件系统：</p>\n<ol><li>需要有网络</li><li>多台主机（不需要在同一地点）</li><li>需要管理者，管理所有的存储节点</li><li>编写应用层的管理程序（Ceph,TFS,FastDFS,MogileFS,MooseFS,GlusterFS）</li></ol>\n<h1><a id=\"3_FastDFS_91\"></a>3. FastDFS介绍</h1>\n<h2><a id=\"31_fdfs_93\"></a>3.1 fdfs概述</h2>\n<ul><li>是用<strong>c语言</strong>编写的一款开源的分布式文件系统。 \n  <ul><li>余庆 - 淘宝的架构师</li></ul> </li><li>为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，注重高可用、高性能等指标 \n  <ul><li>冗余备份: 纵向扩容</li><li>线性扩容: 横向扩容</li></ul> </li><li>可以很容易搭建一套高性能的文件服务器集群提供文件<strong>上传、下载</strong>等服务。 \n  <ul><li>图床</li><li>网盘</li></ul> </li></ul>\n<h2><a id=\"32_fdfs_108\"></a>3.2 fdfs框架中的三个角色</h2>\n<ul><li>追踪器 ( tracker ) - 管理者 - 守护进程 \n  <ul><li>管理存储节点，可以有多个</li></ul> </li><li>存储节点（storage ）- 守护进程 \n  <ul><li>存储节点是有多个的</li></ul> </li><li>客户端（client） - 不是守护进程, 这是程序猿编写的程序 \n  <ul><li>文件上传</li><li>文件下载</li></ul> </li></ul>\n<h2><a id=\"33_fdfs_120\"></a>3.3 fdfs三个角色之间的关系</h2>\n<p><strong>上传</strong></p>\n<ul><li><img alt=\"上传\" src=\"image\\5152f5d54c034ef1a163170db4248539.png\"/></li></ul>\n<p><strong>下载</strong></p>\n<ul><li><img alt=\"下载\" src=\"image\\1bfc13186cbc42a38f6bd3d8bf952c9a.png\"/></li></ul>\n<ol><li> <p>追踪器 (tracker)</p>\n<ul><li>最先启动追踪器（存储节点和客户端都需要主动连接追踪器）</li></ul> </li><li> <p>存储节点（storage ）</p>\n<ul><li>第二个启动的角色</li><li>存储节点启动之后, 会单独开一个线程 \n    <ul><li>汇报当前存储节点的容量, 和剩余容量</li><li>汇报数据的同步情况</li><li>汇报数据被下载的次数</li></ul> </li></ul> </li><li> <p>客户端</p>\n<ul><li>最后启动</li><li>上传 \n    <ul><li>连接追踪器, 询问存储节点的信息 \n      <ul><li>我要上传1G的文件, 询问哪个存储节点有足够的容量</li><li>追踪器查询, 得到结果</li><li>追踪器将查到的存储节点的IP+端口发送给客户端</li><li>通过得到IP和端口连接存储节点</li><li>将文件内容发送给存储节点</li></ul> </li></ul> </li><li>下载 \n    <ul><li>连接追踪器, 询问存储节点的信息 \n      <ul><li>问一下, 要下载的文件在哪一个存储节点</li><li>追踪器查询, 得到结果</li><li>追踪器将查到的存储节点的IP+端口发送给客户端</li><li>通过得到IP和端口连接存储节点</li><li>下载文件</li></ul> </li></ul> </li></ul> </li></ol>\n<h2><a id=\"34_fdfs_155\"></a>3.4 fdfs集群</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\70e112141efd48ddb3aaab4b24348d27.png\"/></p>\n<ol><li>追踪器集群 \n  <ul><li> <p>为什么需要追踪器集群？</p>\n<ul><li>避免单点故障</li></ul> </li><li> <p>多个tracker如何工作？</p>\n<ul><li>轮询RR</li></ul> </li><li> <p>如何实现集群</p>\n<ul><li>通过修改配置文件可实现</li></ul> </li></ul> </li></ol>\n<p>  </p>\n<ol start=\"2\"><li> <p>存储节点集群</p>\n<ul><li> <p>fastDFS如何管理存储节点？</p>\n<ul><li>通过分组的方式完成的（Group）</li></ul> </li><li> <p>集群方式（两种扩容方式）</p>\n<ul><li>横向扩容 - 增加容量</li><li>纵向扩容 - 数据备份</li></ul> </li><li> <p>如何实现集群</p>\n<ul><li>通过修改配置文件可实现</li></ul> </li></ul> </li></ol>\n<p><strong>横向扩容 - 增加容量：</strong></p>\n<pre><code class=\"prism language-bash\">假设当前有两个组: group1, group2\n需要添加一个新的分组 -<span class=\"token operator\">&gt;</span> group3\n新主机属于group3\n\n添加一台新的主机 -<span class=\"token operator\">&gt;</span> 容量增加了\n\n不同组的主机之间不需要通信\n</code></pre>\n<p><strong>纵向扩容 - 数据备份：</strong></p>\n<pre><code class=\"prism language-bash\">假设当前有两个组: group1, group2\n将新的主机放到现有的组中\n\n每个组的主机数量从1 -<span class=\"token operator\">&gt;</span> N\n- 这n台主机的关系就是相互备份的关系\n- 同一个组中的主机需要通信\n- 每个组的容量 等于 组内容量最小的主机容量（比如Group1的容量是500G）\n</code></pre>\n<h1><a id=\"4_FastDFS_215\"></a>4. FastDFS的安装</h1>\n<h2><a id=\"41__216\"></a>4.1 源码安装详解</h2>\n<p>安装流程:</p>\n<ol><li>以下文件, 里边有安装步骤 \n  <ul><li>readme</li><li>readme.md</li><li>INSTALL</li></ul> </li><li>找 可执行文件 <font color=\"green\">configure</font>\n<ul><li>执行这个可执行文件 \n    <ul><li>检测安装环境</li><li>生成 makefile</li></ul> </li></ul> </li><li>执行<strong>make</strong>命令 \n  <ul><li>编译源代码 \n    <ul><li>生成动态库或静态库</li><li>生成可执行程序</li></ul> </li></ul> </li><li>安装 <strong>make install</strong> (需要管理员权限) \n  <ul><li>将第三步生成的动态库/动态库/可执行程序拷贝到对应的系统目录</li></ul> </li></ol>\n<h2><a id=\"42__237\"></a>4.2 安装源码</h2>\n<ol><li>安装 libfastcommon（fastdfs的基础库包）</li></ol>\n<pre><code class=\"prism language-cpp\">git clone https<span class=\"token operator\">:</span><span class=\"token comment\">//github.com/happyfish100/libfastcommon.git</span>\n\ncd libfastcommon\n\n<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>make<span class=\"token punctuation\">.</span>sh\n<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>make<span class=\"token punctuation\">.</span>sh install\n</code></pre>\n<ol start=\"2\"><li>安装 FastDFS</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> clone https://gitee.com/fastdfs100/fastdfs.git\n\n<span class=\"token builtin class-name\">cd</span> fastdfs\n\n./make.sh\n./make.sh <span class=\"token function\">install</span>\n</code></pre>\n<h2><a id=\"43_make_install_260\"></a>4.3 make install做了哪些事</h2>\n<p>来看看make install都做了哪些事情</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9c1dd4c676f54564b9be65e288a75f62.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\67dc13646e704bd8b8613673efded5c3.png\"/></p>\n<h2><a id=\"44__269\"></a>4.4 测试</h2>\n<p>测试</p>\n<pre><code class=\"prism language-bash\">fdfs_test\n\n<span class=\"token function\">ls</span> /usr/bin/fdfs_*\n</code></pre>\n<pre><code class=\"prism language-bash\">root@wxf:/<span class=\"token comment\"># fdfs_test</span>\nThis is FastDFS client <span class=\"token builtin class-name\">test</span> program v6.08\n\nCopyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">2008</span>, Happy Fish / YuQing\n\nFastDFS may be copied only under the terms of the GNU General\nPublic License V3, <span class=\"token function\">which</span> may be found <span class=\"token keyword\">in</span> the FastDFS <span class=\"token builtin class-name\">source</span> kit.\nPlease visit the FastDFS Home Page http://www.fastken.com/ \n<span class=\"token keyword\">for</span> <span class=\"token function\">more</span> detail.\n\nUsage: fdfs_test <span class=\"token operator\">&lt;</span>config_file<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span>operation<span class=\"token operator\">&gt;</span>\n\toperation: upload, download, getmeta, setmeta, delete and query_servers\n\n<span class=\"token comment\">#fastDFS安装的所有的可执行程序: </span>\nroot@wxf:/<span class=\"token comment\"># ls /usr/bin/fdfs_*</span>\n/usr/bin/fdfs_appender_test   /usr/bin/fdfs_download_file        /usr/bin/fdfs_test\n/usr/bin/fdfs_appender_test1  /usr/bin/fdfs_file_info            /usr/bin/fdfs_test1\n/usr/bin/fdfs_append_file     /usr/bin/fdfs_monitor              /usr/bin/fdfs_trackerd\n/usr/bin/fdfs_crc32           /usr/bin/fdfs_regenerate_filename  /usr/bin/fdfs_upload_appender\n/usr/bin/fdfs_delete_file     /usr/bin/fdfs_storaged             /usr/bin/fdfs_upload_file\n</code></pre>\n<p>  为什么在别的目录输入fdfs_test 也能执行？因为make install的时候，已经将程序拷贝到/usr/bin目录下了。</p>\n<pre><code class=\"prism language-bash\">root@wxf:/temp/fastdfs<span class=\"token comment\"># echo $PATH</span>\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n</code></pre>\n<h1><a id=\"5_fdfs_309\"></a>5. fdfs的配置文件</h1>\n<p>  在上面已经分析了<code>fdfs的配置文件</code>放在<code>/etc/fdfs/</code>目录下。</p>\n<pre><code class=\"prism language-bash\">root@wxf:/etc/fdfs<span class=\"token comment\"># ls</span>\nclient.conf  storage.conf  storage_ids.conf  tracker.conf\n</code></pre>\n<h2><a id=\"51_tracker_318\"></a>5.1 tracker配置文件</h2>\n<p>  不同的tracker主机需要各自修改自己的配置文件</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 下列是需要修改的地方</span>\n\n<span class=\"token comment\"># 将追踪器和部署的主机的IP地址进程绑定, 也可以不指定</span>\n<span class=\"token comment\"># 如果不指定, 会自动绑定当前主机IP, 如果是云服务器建议不要写</span>\n<span class=\"token comment\"># 这里的ip和port是提供给storage，client建立连接用的</span>\n<span class=\"token assign-left variable\">bind_addr</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.109.100\n<span class=\"token comment\"># 追踪器监听的端口</span>\n<span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token number\">22122</span>\n<span class=\"token comment\"># 追踪器存储日志信息的目录, xxx.pid文件, 必须是一个存在的目录</span>\n<span class=\"token assign-left variable\">base_path</span><span class=\"token operator\">=</span>/fastdfs/tracker\n</code></pre>\n<p>   这里因为fastdfs由client，storage，tracker构成，所以可以创建一个fastdfs目录，里面再分三个子目录，由一个大目录fastdfs进行统一管理。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b3ac965e0c3645ad984b6c75b549bb29.png\"/></p>\n<h2><a id=\"52_storage_340\"></a>5.2 storage配置文件</h2>\n<p>  不同的storage主机需要各自修改自己的配置文件</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 下列是需要修改的地方</span>\n\n<span class=\"token comment\"># 当前存储节点对应的主机属于哪一个组</span>\n<span class=\"token assign-left variable\">group_name</span><span class=\"token operator\">=</span>group1\n<span class=\"token comment\"># 当前存储节点和所应该的主机进行IP地址的绑定, 如果不写, 有fastdfs自动绑定</span>\n<span class=\"token comment\"># 这里的ip和port是给client建立连接用的</span>\n<span class=\"token assign-left variable\">bind_addr</span><span class=\"token operator\">=</span>\n<span class=\"token comment\"># 存储节点绑定的端口</span>\n<span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token number\">23000</span>\n<span class=\"token comment\"># 存储节点写log日志的路径</span>\n<span class=\"token assign-left variable\">base_path</span><span class=\"token operator\">=</span>/fastdfs/storage\n<span class=\"token comment\"># 存储节点提供的存储文件的路径个数</span>\n<span class=\"token assign-left variable\">store_path_count</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token comment\"># 具体的存储路径 【M00 M01映射的路径】</span>\n<span class=\"token assign-left variable\">store_path0</span><span class=\"token operator\">=</span>/fastdfs/storage0\n<span class=\"token assign-left variable\">store_path1</span><span class=\"token operator\">=</span>/fastdfs/storage1\n<span class=\"token comment\"># 追踪器的地址信息</span>\n<span class=\"token assign-left variable\">tracker_server</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.109.100:22122 \n<span class=\"token assign-left variable\">tracker_server</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.109.101:22122 \n</code></pre>\n<p>   上面配置两个存储目录和两个追踪器地址只是演示怎么配置而已，后文用的配置如下</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 存储节点写log日志的路径</span>\n<span class=\"token assign-left variable\">base_path</span><span class=\"token operator\">=</span>/fastdfs/storage\n<span class=\"token comment\"># 存储节点提供的存储文件的路径个数</span>\n<span class=\"token assign-left variable\">store_path_count</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token comment\"># 具体的存储路径 【M00 M01映射的路径】</span>\n<span class=\"token assign-left variable\">store_path0</span><span class=\"token operator\">=</span>/fastdfs/storage\n<span class=\"token comment\"># 追踪器的地址信息</span>\n<span class=\"token assign-left variable\">tracker_server</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.109.100:22122 \n</code></pre>\n<h2><a id=\"53_client_378\"></a>5.3 client配置文件</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 下列是需要修改的地方</span>\n\n<span class=\"token comment\"># 客户端写log日志的目录</span>\n<span class=\"token comment\"># 该路径必须存在</span>\n<span class=\"token comment\"># 当前的用户对于该路径中的文件有读写权限</span>\n<span class=\"token assign-left variable\">base_path</span><span class=\"token operator\">=</span>/fastdfs/client\n<span class=\"token comment\"># 要连接的追踪器的地址信息</span>\n<span class=\"token assign-left variable\">tracker_server</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.109.100:22122 \n<span class=\"token assign-left variable\">tracker_server</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.109.101:22122 \n</code></pre>\n<h2><a id=\"54__395\"></a>5.4 集群的配置</h2>\n<p>  假设现在有6台主机，2台client，2台tracker，2台storage。</p>\n<p>  第一步：6台主机全部安装FastDFS</p>\n<p>  第二步：修改各自对应的配置文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9f0a5a21444b49928d990dcd4732e456.png\"/></p>\n<h1><a id=\"6_fdfs_408\"></a>6. fdfs的启动</h1>\n<p>所有的启动程序都在/usr/bin/目录下</p>\n<pre><code class=\"prism language-cpp\">root@wxf<span class=\"token operator\">:</span><span class=\"token operator\">/</span># ls <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_<span class=\"token operator\">*</span>\n<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_appender_test   <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_download_file        <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_test\n<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_appender_test1  <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_file_info            <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_test1\n<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_append_file     <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_monitor              <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_trackerd\n<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_crc32           <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_regenerate_filename  <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_upload_appender\n<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_delete_file     <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_storaged             <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>fdfs_upload_file\n</code></pre>\n<p>   其实下面命令中不指定/usr/bin也可以，我这里为了演示清楚目录，全部补全了。</p>\n<h2><a id=\"61_____423\"></a>6.1 第一个启动追踪器 - 守护进程</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 使用的方式如下</span>\n<span class=\"token comment\"># &lt;程序&gt; &lt;配置文件&gt; &lt;行为&gt;</span>\n\n<span class=\"token comment\"># 启动</span>\n<span class=\"token comment\">#fdfs_trackerd 追踪器的配置文件(/etc/fdfs/tracker.conf) </span>\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start\n\n<span class=\"token comment\"># 关闭</span>\n<span class=\"token comment\">#fdfs_trackerd 追踪器的配置文件(/etc/fdfs/tracker.conf) stop</span>\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf stop\n\n<span class=\"token comment\"># 重启</span>\n<span class=\"token comment\">#fdfs_trackerd 追踪器的配置文件(/etc/fdfs/tracker.conf) restart</span>\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart\n</code></pre>\n<h2><a id=\"62_____447\"></a>6.2 第二个启动存储节点 - 守护进程</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 使用的方式如下</span>\n<span class=\"token comment\"># &lt;程序&gt; &lt;配置文件&gt; &lt;行为&gt;</span>\n\n<span class=\"token comment\"># 启动</span>\n<span class=\"token comment\">#fdfs_storaged 存储节点的配置文件(/etc/fdfs/stroga.conf)</span>\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf start\n\n<span class=\"token comment\"># 关闭</span>\n<span class=\"token comment\">#fdfs_storaged 存储节点的配置文件(/etc/fdfs/stroga.conf) stop</span>\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf stop\n\n<span class=\"token comment\"># 重启</span>\n<span class=\"token comment\">#fdfs_storaged 存储节点的配置文件(/etc/fdfs/stroga.conf) restart</span>\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart\n</code></pre>\n<h2><a id=\"63_____471\"></a>6.3 第三个启动客户端 - 普通进程</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 使用的方式如下</span>\n<span class=\"token comment\"># &lt;程序&gt; &lt;配置文件&gt; &lt;行为&gt;</span>\n\n<span class=\"token comment\"># 上传</span>\n<span class=\"token comment\">#fdfs_upload_file 客户端的配置文件(/etc/fdfs/client.conf) 要上传的文件(/etc/fdfs/client.conf)</span>\n<span class=\"token comment\"># 得到的结果字符串: group1/M00/00/00/wKhtZWMVtDGAR4d0AAAHTaCnXjs12.conf</span>\nroot@wxf:/<span class=\"token comment\"># /usr/bin/fdfs_upload_file /etc/fdfs/client.conf /etc/fdfs/client.conf </span>\ngroup1/M00/00/00/wKhtZWMVtDGAR4d0AAAHTaCnXjs12.conf\n<span class=\"token comment\"># 下载</span>\n<span class=\"token comment\">#fdfs_download_file 客户端的配置文件(/etc/fdfs/client.conf) 上传成功之后得到的字符串(fileID)</span>\nroot@wxf:/<span class=\"token comment\"># /usr/bin/fdfs_download_file /etc/fdfs/client.conf group1/M00/00/00/wKhtZWMVtDGAR4d0AAAHTaCnXjs12.conf</span>\nroot@wxf:/<span class=\"token comment\"># ls</span>\nwKhtZWMVtDGAR4d0AAAHTaCnXjs12.conf\n<span class=\"token comment\"># 发现原来的文件名被修改了，所以需要把原来的文件名和保证之后的文件名做一个映射保存在数据库中</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3fcbf1644d6d4eb994acb272c8a530b2.png\"/></p>\n<h2><a id=\"64_FastDFS_498\"></a>6.4 FastDFS的状态检测</h2>\n<ol><li>实现使用工具查看一下是否启动成功</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">#查看端口是否被占用：</span>\n<span class=\"token function\">netstat</span> -apn <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">80</span>\n\t\n<span class=\"token comment\">#查看占用某个端口的进程：</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">lsof</span> -i:80\n\t\n<span class=\"token comment\">#关键字搜索某个进程</span>\n<span class=\"token function\">ps</span> -aux <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> fdfs\n\n\n<span class=\"token function\">lsof</span> -i:22122\n<span class=\"token function\">lsof</span> -i:23000\n<span class=\"token function\">ps</span> aux<span class=\"token operator\">|</span><span class=\"token function\">grep</span> fdfs_\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b2e0e1ef1b884a5dade964923c13d6f4.png\"/></p>\n<ol start=\"2\"><li>使用fdfs_monitor检测fastDFS状态</li></ol>\n<pre><code class=\"prism language-bash\">fdfs_monitor /etc/fdfs/client.conf\n</code></pre>\n<p>   可以看到fdfs_monitor 后面跟的是client的配置信息，所以可以把它当作一个客户端，启动时先连接追踪器，向追踪器询问storage的信息</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6ac9178770c040a5a7dec2561bdb703f.png\"/></p>\n<p>   STORAGE SERVER的状态通常有七种，正常状态必须是<code>ACTIVE</code>：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># FDFS_STORAGE_STATUS：INIT      :初始化，尚未得到同步已有数据的源服务器</span>\n<span class=\"token comment\"># FDFS_STORAGE_STATUS：WAIT_SYNC :等待同步，已得到同步已有数据的源服务器</span>\n<span class=\"token comment\"># FDFS_STORAGE_STATUS：SYNCING   :同步中</span>\n<span class=\"token comment\"># FDFS_STORAGE_STATUS：DELETED   :已删除，该服务器从本组中摘除</span>\n<span class=\"token comment\"># FDFS_STORAGE_STATUS：OFFLINE   :离线</span>\n<span class=\"token comment\"># FDFS_STORAGE_STATUS：ONLINE    :在线，尚不能提供服务</span>\n<span class=\"token comment\"># FDFS_STORAGE_STATUS：ACTIVE    :在线，可以提供服务</span>\n</code></pre>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 从集群中删除</span>\nfdfs_monitor /etc/fdfs/client.conf delete group1 <span class=\"token number\">192.168</span>.109.100\n\n<span class=\"token comment\"># 删除数据文件夹</span>\n<span class=\"token function\">rm</span> -rf /fastdfs/storage/data\n\n<span class=\"token comment\"># 重启节点</span>\nfdfs_storaged /etc/fdfs/storage.conf restart\n</code></pre>\n<h1><a id=\"7_file_id_562\"></a>7. file_id的构成</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4e558954fcff4b57aff9e73d3c6a2adc.png\"/></p>\n<ul><li>group1 \n  <ul><li>文件上传到了存储节点的哪一个组</li><li>如果有多个组这个组名可变的</li></ul> </li></ul>\n<p>  </p>\n<ul><li> <p>M00 - 虚拟目录</p>\n<ul><li>和存储节点的配置项有映射 \n    <ul><li>store_path0=/home/yuqing/fastdfs/data -&gt; M00<br/> store_path1=/home/yuqing/fastdfs1/data -&gt; M01<br/>   </li></ul> </li></ul> </li><li> <p>00/00</p>\n<ul><li>实际的路径</li><li>可变的</li></ul> </li></ul>\n<p>  </p>\n<ul><li>wKhS_VlrEfOAdIZyAAAJTOwCGr43848.md \n  <ul><li>文件名包含的信息</li><li>采用Base64编码 \n    <ul><li>包含的字段包括 \n      <ul><li>源storage server Ip 地址</li><li>文件创建时间</li><li>文件大小</li><li>文件CRC32效验码（循环冗余校验）</li><li>随机数</li></ul> </li></ul> </li></ul> </li></ul>\n<pre><code class=\"prism language-bash\">wKhS_VlrEfOAdIZyAAAJTOwCGr43848\n<span class=\"token operator\">|</span> 4bytes <span class=\"token operator\">|</span> 4bytes <span class=\"token operator\">|</span> 8bytes <span class=\"token operator\">|</span>4bytes <span class=\"token operator\">|</span> 2bytes <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token function\">ip</span> <span class=\"token operator\">|</span> timestamp <span class=\"token operator\">|</span> file_size <span class=\"token operator\">|</span>crc32 <span class=\"token operator\">|</span> 校验值 <span class=\"token operator\">|</span>\n</code></pre>\n<h1><a id=\"8__608\"></a>8. 上传下载的代码实现</h1>\n<h2><a id=\"81__610\"></a>8.1 使用多进程方式-思路</h2>\n<p>   我们上面已经用过<code>fdfs_upload_file</code>了，这是fdfs作者提供好的可执行程序，所以用多进程的方式是一种比较投机的方式。将fdfs_upload_file的输出重定位到管道pipe，由父进程读取。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f845cfaa367547148e714ad46b23241a.png\"/><br/>    exec函数协议族函数（exec族函数用一个新的进程映像替换当前进程映像）：execl、execlp。</p>\n<p>  子进程 -&gt; 执行<code>execlp(\"fdfs_upload_file\" , \"xx\", arg, NULL)</code>。此时会有结果输出到标准输出终端里面，我们想让它输出到终端，使用<code>dup2(old标准输出, new管道的写端)</code>。将file_id写入pipe中，最终由父进程进行读取。pipe在子进程创建之前创建即可。父进程记得还要wait()，释放子进程的资源。</p>\n<ul><li> <p>操作步骤</p>\n<ol><li> <p>创建管道 - pipe</p> </li><li> <p>创建子进程</p> </li><li> <p>子进程干什么?</p>\n<ul><li>写管道, 关闭读端 \n      <ul><li>将标准输出 -&gt; 管道的写端</li></ul> </li><li>重定向</li><li>执行execl命令, 调用另外的进程fdfs_upload_file</li><li>子进程退出</li></ul> </li><li> <p>父进程？</p>\n<ul><li>读管道， 关闭写端</li><li>释放子进程资源 - pcb \n      <ul><li>wait()/ waitpid()</li></ul> </li></ul> </li></ol> </li></ul>\n<h2><a id=\"82_fastDFS_API_634\"></a>8.2 使用fastDFS API实现-思路</h2>\n<p>  作者并没有提供api与文档出来，但是我们可以通过<code>fdfs_upload_file.c</code>，看看源码是怎么做的。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b0be9f59b95b40efa1b6229e6c1f767e.png\"/></p>\n<p>   看我写的<code>//TODO 注释</code>即可。那么我们的思路就很简单，把这个main函数改成一个接口即可。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">/**\n* Copyright (C) 2008 Happy Fish / YuQing\n*\n* FastDFS may be copied only under the terms of the GNU General\n* Public License V3, which may be found in the FastDFS source kit.\n* Please visit the FastDFS Home Page http://www.fastken.com/ for more detail.\n**/</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fdfs_client.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fastcommon/logger.h\"</span></span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: %s &lt;config_file&gt; &lt;local_filename&gt; \"</span> \\\n        <span class=\"token string\">\"[storage_ip:port] [store_path_index]\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>conf_filename<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>local_filename<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> group_name<span class=\"token punctuation\">[</span>FDFS_GROUP_NAME_MAX_LEN <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ConnectionInfo <span class=\"token operator\">*</span>pTrackerServer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> store_path_index<span class=\"token punctuation\">;</span>\n    ConnectionInfo storageServer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> file_id<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">log_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    g_log_context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> LOG_ERR<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ignore_signal_pipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    conf_filename <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//TODO fdfs_client_init解析传入的配置文件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token function\">fdfs_client_init</span><span class=\"token punctuation\">(</span>conf_filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//TODO tracker_get_connection在上面client配置文件里面</span>\n    <span class=\"token comment\">//TODO 有追踪器的ip:port，所以这里就是连接追踪器，初始化pTrackerServer指针</span>\n    pTrackerServer <span class=\"token operator\">=</span> <span class=\"token function\">tracker_get_connection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pTrackerServer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">fdfs_client_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> errno <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> errno <span class=\"token operator\">:</span> ECONNREFUSED<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    local_filename <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>group_name <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//我们都是传3个参数，这里&gt;=4不用看了</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&gt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pPort<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pIpAndPort<span class=\"token punctuation\">;</span>\n\n        pIpAndPort <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        pPort <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>pIpAndPort<span class=\"token punctuation\">,</span> <span class=\"token char\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pPort <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">fdfs_client_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid storage ip address and \"</span> \\\n                <span class=\"token string\">\"port: %s\\n\"</span><span class=\"token punctuation\">,</span> pIpAndPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        storageServer<span class=\"token punctuation\">.</span>sock <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>storageServer<span class=\"token punctuation\">.</span>ip_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>storageServer<span class=\"token punctuation\">.</span>ip_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \\\n             <span class=\"token string\">\"%.*s\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>pPort <span class=\"token operator\">-</span> pIpAndPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pIpAndPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        storageServer<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>pPort <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&gt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            store_path_index <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            store_path_index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//TODO tracker_query_storage_store追踪器 查询 存储节点 的 存储</span>\n        <span class=\"token comment\">//TODO storageServer是传入参数，对storageServer赋值</span>\n        <span class=\"token comment\">//TODO group_name是一个char数组，对group_name赋值</span>\n        <span class=\"token comment\">//TODO store_path_index是传入参数，对store_path_index赋值</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token function\">tracker_query_storage_store</span><span class=\"token punctuation\">(</span>pTrackerServer<span class=\"token punctuation\">,</span> \\\n                    <span class=\"token operator\">&amp;</span>storageServer<span class=\"token punctuation\">,</span> group_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>store_path_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">fdfs_client_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tracker_query_storage fail, \"</span> \\\n            <span class=\"token string\">\"error no: %d, error info: %s\\n\"</span><span class=\"token punctuation\">,</span> \\\n            result<span class=\"token punctuation\">,</span> <span class=\"token function\">STRERROR</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//TODO storage_upload_by_filename1查到了存储节点，就进行上传的动作</span>\n    <span class=\"token comment\">//TODO file_id传出参数，如果上传成功了，就打印file_id</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">storage_upload_by_filename1</span><span class=\"token punctuation\">(</span>pTrackerServer<span class=\"token punctuation\">,</span> \\\n            <span class=\"token operator\">&amp;</span>storageServer<span class=\"token punctuation\">,</span> store_path_index<span class=\"token punctuation\">,</span> \\\n            local_filename<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> \\\n            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> group_name<span class=\"token punctuation\">,</span> file_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> file_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"upload file fail, \"</span> \\\n            <span class=\"token string\">\"error no: %d, error info: %s\\n\"</span><span class=\"token punctuation\">,</span> \\\n            result<span class=\"token punctuation\">,</span> <span class=\"token function\">STRERROR</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//TODO tracker_close_connection_ex与追踪器断开连接</span>\n    <span class=\"token function\">tracker_close_connection_ex</span><span class=\"token punctuation\">(</span>pTrackerServer<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fdfs_client_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"83__762\"></a>8.3 两个方案的代码实现</h2>\n<h3><a id=\"831__765\"></a>8.3.1 源代码</h3>\n<ul><li>fdfs_upload_file.c</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fdfs_client.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/wait.h&gt;</span></span>\n\n<span class=\"token comment\">//使用多进程方式</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">upload_file1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>confFile<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>uploadFile<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fileID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//1. 创建管道</span>\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pipe error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//2. 创建子进程</span>\n    pid_t pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//子进程</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//3. 标准输出重定向 -&gt; pipe写端</span>\n        <span class=\"token function\">dup2</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> STDOUT_FILENO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//4. 关闭读端</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">execlp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fdfs_upload_file\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fdfs_upload_file\"</span><span class=\"token punctuation\">,</span> confFile<span class=\"token punctuation\">,</span> uploadFile<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execlp error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//父进程读管道</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fileID<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//回收子进程的PCB</span>\n        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//使用fastDFS API实现</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">upload_file2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>confFile<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>myFile<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fileID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> group_name<span class=\"token punctuation\">[</span>FDFS_GROUP_NAME_MAX_LEN <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ConnectionInfo <span class=\"token operator\">*</span>pTrackerServer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> store_path_index<span class=\"token punctuation\">;</span>\n    ConnectionInfo storageServer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//TODO fdfs_client_init解析传入的配置文件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token function\">fdfs_client_init</span><span class=\"token punctuation\">(</span>confFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//TODO tracker_get_connection在上面client配置文件里面</span>\n    <span class=\"token comment\">//TODO 有追踪器的ip:port，所以这里就是连接追踪器，初始化pTrackerServer指针</span>\n    pTrackerServer <span class=\"token operator\">=</span> <span class=\"token function\">tracker_get_connection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pTrackerServer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">fdfs_client_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> errno <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> errno <span class=\"token operator\">:</span> ECONNREFUSED<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">*</span>group_name <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//TODO tracker_query_storage_store追踪器 查询 存储节点 的 存储</span>\n    <span class=\"token comment\">//TODO storageServer是传入参数，对storageServer赋值</span>\n    <span class=\"token comment\">//TODO group_name是一个char数组，对group_name赋值</span>\n    <span class=\"token comment\">//TODO store_path_index是传入参数，对store_path_index赋值</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token function\">tracker_query_storage_store</span><span class=\"token punctuation\">(</span>pTrackerServer<span class=\"token punctuation\">,</span> \\\n                    <span class=\"token operator\">&amp;</span>storageServer<span class=\"token punctuation\">,</span> group_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>store_path_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">fdfs_client_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tracker_query_storage fail, \"</span> \\\n            <span class=\"token string\">\"error no: %d, error info: %s\\n\"</span><span class=\"token punctuation\">,</span> \\\n            result<span class=\"token punctuation\">,</span> <span class=\"token function\">STRERROR</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//TODO storage_upload_by_filename1查到了存储节点，就进行上传的动作</span>\n    <span class=\"token comment\">//TODO file_id传出参数，如果上传成功了，就打印file_id</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">storage_upload_by_filename1</span><span class=\"token punctuation\">(</span>pTrackerServer<span class=\"token punctuation\">,</span> \\\n            <span class=\"token operator\">&amp;</span>storageServer<span class=\"token punctuation\">,</span> store_path_index<span class=\"token punctuation\">,</span> \\\n            myFile<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> \\\n            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> group_name<span class=\"token punctuation\">,</span> fileID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> fileID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"upload file fail, \"</span> \\\n            <span class=\"token string\">\"error no: %d, error info: %s\\n\"</span><span class=\"token punctuation\">,</span> \\\n            result<span class=\"token punctuation\">,</span> <span class=\"token function\">STRERROR</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//TODO tracker_close_connection_ex与追踪器断开连接</span>\n    <span class=\"token function\">tracker_close_connection_ex</span><span class=\"token punctuation\">(</span>pTrackerServer<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fdfs_client_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>fdfs_upload_file.h</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Created by 68725 on 2022/9/5.</span>\n<span class=\"token comment\">//</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">FDFS_UPLOAD_FILE_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FDFS_UPLOAD_FILE_H</span></span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">upload_file1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>confFile<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>uploadFile<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fileID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">upload_file2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>confFile<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>myFile<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fileID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//FDFS_UPLOAD_FILE_H</span></span>\n\n</code></pre>\n<ul><li>main.c</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fdfs_upload_file.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> fildID<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">upload_file1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/etc/fdfs/client.conf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"main.c\"</span><span class=\"token punctuation\">,</span> fildID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fildID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Multiprocess upload_file1 fildID:%s\\n\"</span><span class=\"token punctuation\">,</span> fildID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">upload_file2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/etc/fdfs/client.conf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"main.c\"</span><span class=\"token punctuation\">,</span> fildID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Call API upload_file2 fildID:%s\\n\"</span><span class=\"token punctuation\">,</span> fildID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"832__915\"></a>8.3.2 测试</h3>\n<pre><code class=\"prism language-bash\">root@wxf:/test<span class=\"token comment\"># ls</span>\nfdfs_upload_file.c  fdfs_upload_file.h  main.c\nroot@wxf:/test<span class=\"token comment\"># gcc -o test *.c -I/usr/include/fastdfs/ -lfdfsclient</span>\nroot@wxf:/test<span class=\"token comment\"># ls</span>\nfdfs_upload_file.c  fdfs_upload_file.h  main.c  <span class=\"token builtin class-name\">test</span>\nroot@wxf:/test<span class=\"token comment\"># ./test </span>\n\nMultiprocess upload_file1 fildID:group1/M00/00/00/wKhtZWMV4USAeXL4AAACCAMe_TM89174.c\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\ngroup1/M00/00/00/wKhtZWMV4UWAeb7BAAACCAMe_TM19985.c\nCall API upload_file2 fildID:group1/M00/00/00/wKhtZWMV4UWAeb7BAAACCAMe_TM19985.c\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\60e8052ecd644e23a1759b3c31b7609c.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4ffc6c5133424d2f9246c9da30efb183.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}