{"blogid": "125809700", "writerAge": "码龄1年", "writerBlogNum": "452", "writerCollect": "2376", "writerComment": "2977", "writerFan": "1317", "writerGrade": "7级", "writerIntegral": "11371", "writerName": "YZL40514131", "writerProfileAdress": "writer_image\\profile_125809700.jpg", "writerRankTotal": "1160", "writerRankWeekly": "98", "writerThumb": "2639", "writerVisitNum": "209386", "blog_read_count": "1620", "blog_time": "于 2022-08-23 09:20:51 发布", "blog_title": "python面试题总结(四)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/3b9c73799fc341d79bf00f643ed803bd.webp#pic_center\"/></p>\n<h1><a id=\"Python_2\"></a>Python基础</h1>\n<h2><a id=\"1_Python__4\"></a>1.说一说你所知道的 Python 数据结构有哪些。</h2>\n<blockquote>\n<p>list<br/> tuple<br/> dict<br/> set<br/> str<br/> int<br/> float<br/> bool</p>\n</blockquote>\n<h2><a id=\"2Python__15\"></a>2.Python 中列表和元组的区别是什么？元组是不是真的不可变？</h2>\n<blockquote>\n<p>列表可变，元组不可变<br/> 元组的查询速度比列表快<br/> 列表能进行增删改查操作，元组不可以进行增加操作<br/> 列表不可以作为字典的键，元组可以作为字典的键</p>\n</blockquote>\n<h2><a id=\"3_23\"></a>3.什么是生成器和迭代器？它们之间有什么区别？</h2>\n<blockquote>\n<p>生成器：生成器包括列表生成器和函数中加入yield生成器<br/> 生成器并不是列表，它保存了如何生成生成器中元素的算法<br/> 解决了列表或者是列表生成式的缺点，解决了大量无用数据占用资源的问题<br/> 生成器中含有游标，记录了元素的位置，下次使用数据时，会继续去取数据</p>\n</blockquote>\n<p>迭代器：</p>\n<blockquote>\n<p>通过调用__next__()方法能不断生成下一个数据的方式，就是迭代器</p>\n</blockquote>\n<h2><a id=\"4_33\"></a>4.什么是闭包？装饰器又是什么？装饰器有什么作用？你用过装饰器吗？请写一个装饰器的例子。</h2>\n<p>闭包：</p>\n<blockquote>\n<p>闭包需要满足3个条件：<br/> 函数中嵌套函数<br/> 内部函数中调用外部函数中的变量<br/> 外部函数要返回内部函数中的函数名<br/> 内部函数不能修改外部函数中变量，如果非要修改用关键字nolocal</p>\n</blockquote>\n<p>装饰器：</p>\n<blockquote>\n<p>不改变原函数的功能，增加新的功能<br/> 在使用装饰器的方法上加@函数名或者类名<br/> 装饰器分为函数装饰器和类装饰器</p>\n</blockquote>\n<h2><a id=\"5__lambda___49\"></a>5 什么是 lambda 函数？ 有什么好处？</h2>\n<p>lambda 函数是一个可以接收任意多个参数(包括可选参数)并且返回单个表达式值的函数</p>\n<blockquote>\n<p>lambda 函数比较轻便，即用即仍，很适合需要完成一项功能，但是此功能只在此一处使用，连名字都很随意的情况下<br/> 匿名函数，一般用来给 filter， map 这样的函数式编程服务<br/> 作为回调函数，传递给某些应用，比如消息处理</p>\n</blockquote>\n<h2><a id=\"6_Python__Python__55\"></a>6.在学习 Python 的过程中，你有想过如何提高 Python 的运行效率吗？</h2>\n<blockquote>\n<p>if elif … else：语句中，尽量把执行几率高的语句放到最上面，减少代码的执行<br/> for、while循环语句中，尽量减少代码的循环测试<br/> 不定义列表或者列表生成式，采用列表生成器，减少内存中无用数据的堆积<br/> 采用多线程，异步方式执行<br/> 减少不必要的代码执行<br/> 减少不必要的IO操作</p>\n</blockquote>\n<h2><a id=\"7_65\"></a>7.用过类吗？知道继承吗？请写一个例子，用到继承。</h2>\n<p><a href=\"https://blog.csdn.net/YZL40514131/article/details/125753234?spm=1001.2014.3001.5501\">https://blog.csdn.net/YZL40514131/article/details/125753234?spm=1001.2014.3001.5501</a></p>\n<h2><a id=\"8_69\"></a>8.说一下深拷贝和浅拷贝。</h2>\n<p>浅拷贝：</p>\n<blockquote>\n<p>只拷贝父对象，父对象中的子对象不会进行拷贝<br/> 举例：如果子对象中元素是可变对象，对可变对象进行增删改查操作，拷贝的对象也将进行相应的操作</p>\n</blockquote>\n<p>深拷贝：</p>\n<blockquote>\n<p>父对象和子对象都要拷贝<br/> 举例：如果子对象中元素是可变对象，对可变对象进行增删改查操作，拷贝的对象不变化</p>\n</blockquote>\n<p>特殊：</p>\n<blockquote>\n<p>不管是深拷贝还是浅拷贝，如果拷贝前的对象中的元素是不可变对象，拷贝后的对象也将不发生变化</p>\n</blockquote>\n<h2><a id=\"9_Python__match__search__83\"></a>9 Python 里 match 与 search 的区别？</h2>\n<p>match()和search()两者都是测试正则表达式与字符串是否匹配。不同的是，<br/> <font color=\"#FF0000\" size=\"4\">match() 如果在字符串的开头有0个或更多个字符，符合正则表达式模式，返回相关匹配的实例对象；如果字符串不符合正则表达式模式则返回None；<br/> 而search()则不同，扫描整个字符串，如果产生了一个匹配正则模式就寻找到这个位置，返回相关匹配的对象。如果没有位置能够匹配这个模式则返回None。</font></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> re\n<span class=\"token builtin\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"谢谢您的关注和支持:YZL40514131\"</span>\nresult<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'40514131'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\nresult1<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'谢您'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\nresult2<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'谢谢您'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\t\t\t<span class=\"token boolean\">None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span>\t\t\t<span class=\"token boolean\">None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span>\t\t\t<span class=\"token operator\">&lt;</span>re<span class=\"token punctuation\">.</span>Match <span class=\"token builtin\">object</span><span class=\"token punctuation\">;</span> span<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'谢谢您'</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> re\n<span class=\"token builtin\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"谢谢您的关注和支持:YZL40514131\"</span>\nresult3<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'14131'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t<span class=\"token operator\">&lt;</span>re<span class=\"token punctuation\">.</span>Match <span class=\"token builtin\">object</span><span class=\"token punctuation\">;</span> span<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'14131'</span><span class=\"token operator\">&gt;</span>\nresult4<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'141310'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\t\t\t\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result4<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t<span class=\"token boolean\">None</span>\n</code></pre>\n<h1><a id=\"Django_107\"></a>Django</h1>\n<h2><a id=\"1_Django__109\"></a>1.什么是 Django? 说说你的理解。</h2>\n<h2><a id=\"2Django_MVC_111\"></a>2.Django 遵循什么样的设计模式？每个字母代表什么意思？各自完成什么样的功能？它和MVC是怎么对应的？</h2>\n<p>MVC：模型类、视图、控制器<br/> 运行顺序：</p>\n<blockquote>\n<p>客户端传输数据，控制器接收数据，进行处理<br/> 与模型类进行映射，与数据库进行交互<br/> 将数据返回到控制器<br/> 再将数据传到视图函数中<br/> 视图函数将数据进行封装成一个响应<br/> 再交给控制器<br/> 控制器返回给客户端</p>\n</blockquote>\n<p>MVT：模型类、视图、模板</p>\n<h2><a id=\"3Django__125\"></a>3.Django 中的缓存是怎么用的？</h2>\n<p>我采用的是redis进行数据缓冲的<br/> a、安装：<strong><code>pip install django-redis</code></strong><br/> b、settings.py文件中配置：<br/> c、在指定的视图函数加上装饰器 <strong><code>@cache_page(10, cache='default', key_prefix='mysite')</code></strong><br/> d、请求视图，redis中生成缓冲数据</p>\n<h2><a id=\"4_Django__133\"></a>4.用 Django 做过什么项目吗？大概是怎么样的思路？现在让你写个登陆页面，你要怎么写？</h2>\n<p>自动化接口平台，<br/> 步骤：</p>\n<blockquote>\n<p>安装user子应用：<code>python manage.py startapp user</code><br/> <code>注册</code>user子应用<br/> 安装第三方应用:<code>pip install gjango-restframework-jwt</code><br/> <code>settings.py文件中配置</code><br/> 定义路由：<br/> 主路由：<code>path('user/',include('users.urls'))</code><br/> 子路由：<code>path('login/', obtain_jwt_token),</code><br/> 访问路由：<code>http://127.0.0.1:8000/user/login </code><br/> 登录成只返回了token，现在需要返回用户名和用户id<br/> 在公共文件中重写 <strong><code>jwt_response_payload_handler()方法</code></strong><br/> 详细步骤在：<br/> <a href=\"https://blog.csdn.net/YZL40514131/article/details/125840482?spm=1001.2014.3001.5501\">https://blog.csdn.net/YZL40514131/article/details/125840482?spm=1001.2014.3001.5501</a></p>\n</blockquote>\n<h2><a id=\"5_session__cookie__cookie__150\"></a>5.说一下 session 和 cookie 区别。为什么 cookie 是不安全的？</h2>\n<blockquote>\n<p><font color=\"#FF0000\" size=\"4\"><strong>cookie保存在客户端，由服务端生成的；当用户从客户端访问服务端时，若要记录客户端状态，服务端会给客户端发送一个令牌，客户端下次请求服务端的时候会携带cookie参数，服务端来验证cookie的准确性</strong></font></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\" size=\"4\"><strong>session保存在服务端，随着用户认证数量的增多，服务端的开销会明显增大。<br/> 拓展性变差；用户认证成功后，服务器保存认证记录，这意味着用户下次请求还必须要请求这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡的能力，也意味着限制了应用的拓展能力</strong></font></p>\n</blockquote>\n<h2><a id=\"6_Django___157\"></a>6.你在用 Django 做项目的时候碰到过什么问题吗？你印象最深的是哪个？ 你是怎么解决的？</h2>\n<blockquote>\n<p>异步任务celery</p>\n</blockquote>\n<h2><a id=\"7_django_orm_QuerySet_162\"></a>7 列举django orm 中所有的方法（QuerySet对象的所有方法）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5975add7576c4fba91ccf53e981258e1.png\"/></p>\n<h2><a id=\"8_restful_166\"></a>8 谈谈你对restful规范的认识？</h2>\n<blockquote>\n<p><strong>1、restful是一种风格，并不是规范或者约束；每一种uri代表一种资源，资源是从数据库中获取的一种集合，所以采用名称的复数形式</strong><br/> 例如获取列表资源地址：https://api.example.com/v1/sources<br/> 例如获取详情资源地址：https://api.example.com/v1/sources/1<br/> <strong>2、HTTP动词：</strong><br/> GET（SELECT）：从服务器取出资源（⼀项或多项）。<br/> POST（CREATE）：在服务器新建⼀个资源。<br/> PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。<br/> DELETE（DELETE）：从服务器删除资源。<br/> <strong>3、过滤信息</strong><br/> ?limit=10：指定返回记录数<br/> ?offset：指定返回记录的开始位置<br/> ?page=2&amp;per_page=10：指定第⼏⻚，以及每⻚的记录数。<br/> ?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。<br/> ?animal_type_id=1：指定筛选条件<br/> <strong>4、状态码</strong><br/> 200 OK - [GET]：服务器成功返回⽤户请求的数据<br/> 201 CREATED - [POST/PUT/PATCH]：⽤户新建或修改数据成功。<br/> 202 Accepted - [<em>]：表示⼀个请求已经进⼊后台排队（异步任务）<br/> 204 NO CONTENT - [DELETE]：⽤户删除数据成功。<br/> 400 INVALID REQUEST - [POST/PUT/PATCH]：⽤户发出的请求有错误，服务器没有进<br/> ⾏新建或修改数据的操作<br/> 401 Unauthorized - [</em>]：表示⽤户没有权限（令牌、⽤户名、密码错误）。<br/> 403 Forbidden - [<em>] 表示⽤户得到授权（与401错误相对），但是访问是被禁⽌的。<br/> 404 NOT FOUND - [</em>]：⽤户发出的请求针对的是不存在的记录，服务器没有进⾏操作，<br/> 406 Not Acceptable - [GET]：⽤户请求的格式不可得（⽐如⽤户请求JSON格式，但<br/> 是只有XML格式）。<br/> 410 Gone -[GET]：⽤户请求的资源被永久删除，且不会再得到的。<br/> 422 Unprocesable entity - [POST/PUT/PATCH] 当创建⼀个对象时，发⽣⼀个验证<br/> 错误。<br/> 500 INTERNAL SERVER ERROR - [*]：服务器发⽣错误，⽤户将⽆法判断发出的请求是<br/> 否成功。<br/> <strong>5、错误处理：</strong><br/> 如果状态码是4xx，服务器就应该向⽤户返回出错信息。⼀般来说，返回的信息中将error作为键名，出错信息作为键值即可</p>\n</blockquote>\n<h2><a id=\"9_django_rest_framework_202\"></a>9 django rest framework如何实现的用户访问频率控制？</h2>\n<blockquote>\n<p><strong>settings.py文件中进行全局配置(AnonRateThrottle、UserRateThrottle)：所有继承APIView类视图都具有限流功能<br/> 局部配置：公共文件中定义公共类，自定义限流配置，改变限流频率（包括认证用户和未认证用户）；<br/> 在继承APIView中的类视图定义类属性throttle_classes=[类名]</strong></p>\n</blockquote>\n<h1><a id=\"_209\"></a>计算机网络</h1>\n<h2><a id=\"1_TCPIP__211\"></a>1.说一说什么是 TCP/IP 协议？</h2>\n<p>TCP/IP的意思是：“传输控制协议/Internet协议（Transport Control Protocol/Internet Protocol）”<br/> TCP/IP是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层。</p>\n<h2><a id=\"2_215\"></a>2.知道什么是三次握手和四次挥手吗？简单描述一下。</h2>\n<blockquote>\n<p><strong>第一次握手：保证了服务端可以接收到信息、客户端可以发送消息<br/> 第二次握手：保证了客户端知道服务端可以发送、接受消息，服务端知道客户端可以发送信息<br/> 第三次握手：保证了服务端知道客户端可以接收消息</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第一次挥手：客户端发送FIN标识到服务端，告知服务端我要释放连接<br/> 第二次挥手：服务端收到FIN标识，知道了客户端想断开连接，于是马上检查是否还有数据发送给客户端，如果还有数据没有发送，就发送ACK标识告诉客户端：等一会，你还有数据在我这里<br/> 第三次挥手：待所有数据发送完毕后，服务端发送FIN标识给客户端，告诉客户端，现在已经没有数据了，我要关闭连接啦<br/> 第四次挥手：客户端收到服务端的FIN标识，知道服务端现在就要关闭连接了，于是就发送ACK标识，告知服务端：我知道啦，你关吧<br/> 于是服务器关闭，客户端也关闭了</strong></p>\n</blockquote>\n<h2><a id=\"3TCP__UDP__226\"></a>3.TCP 和 UDP 有什么区别？</h2>\n<blockquote>\n<p>TCP：面向连接的，面向字节流的，一对一，安全，数据不会丢失，但是会出现黏包<br/> UDP：面向无连接的，面向数据包的，一对多，多对多、多对一的连接方式，不会出现黏包，但是会出现数据丢失的问题</p>\n</blockquote>\n<h2><a id=\"4_Socket__231\"></a>4.知道 Socket 网络编程吗？知道怎么用吗？</h2>\n<h3><a id=\"Socket_233\"></a>服务端Socket：</h3>\n<blockquote>\n<p><strong>1、创建服务端socker：server_socket = socket(AF_INET, SOCK_STREAM)<br/> 2、绑定ip和port：host_port = (‘’, 8088)；server_socket.bind(host_port)<br/> 3、server_socket.listen()调用listen()方法使服务端socket由主动变为被动，此时等待客户端的连接<br/> 4、new_socker,ip_port=server_socker.accept()调用recv()方法，客户端发送过来连接请求，返回new_socker和客户端ip和端口<br/> 5、data=new_socker.recv(1024)接收客户端发送过来的数据，数据是byte类型的数据<br/> 6、data1=data.decode()：解码<br/> 7、new_socker.close()：客户端socket进行关闭链接<br/> 8、server_socker.close()：服务端socket进行关闭链接</strong></p>\n</blockquote>\n<h3><a id=\"socket_243\"></a>客户端socket：</h3>\n<blockquote>\n<p><strong>1.创建客户端socket:<br/> client_socket=socket(AF_INIT,SOCK_STREAM)<br/> 2.获取目标服务器的ip和端口<br/> server_ip_port=(‘192.169.17.111’,8088)<br/> 3.发送连接请求,此时服务端产生了新的new_socket<br/> client_socket.connect(server_ip_port)<br/> 4.客户端发送请求,客户端知道服务器ip和端口,服务器知道客户端ip和端口,因此是面向连接的<br/> send_data=input(‘请输入:’)<br/> client_socket.send(send_data.encode(‘utf-8’))<br/> 5.客户端接收服务端返回的数据<br/> recv_data=client_socket.recv(1024)<br/> 6.关闭客户端socket<br/> client_socket.close()</strong></p>\n</blockquote>\n<h1><a id=\"_259\"></a>操作系统</h1>\n<h2><a id=\"1_261\"></a>1.什么是死锁？造成死锁的原因？死锁类型？如何预防死锁？</h2>\n<h3><a id=\"_263\"></a>死锁：</h3>\n<blockquote>\n<p><strong>多线程执行任务过程中如果，A线程获取了资源1，B获取了资源2，并且没有释放资源；同时A线程想获取B的资源，B想获取A的资源；此时线程停止执行任务，称为死锁；</strong></p>\n</blockquote>\n<h3><a id=\"_266\"></a>造成死锁的原因：</h3>\n<blockquote>\n<p><font color=\"#FF0000\" size=\"4\"><strong>在多线程程序中，死锁问题很大一部分原因是由于线程同时获取多个锁造成的。<br/> 在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。<br/> 尽管死锁很少发生，但是一旦发生就会造成线程的停止工作</strong></font></p>\n</blockquote>\n<h3><a id=\"_270\"></a>死锁类型：</h3>\n<h4><a id=\"a_271\"></a>a、没有释放锁</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\18900acbda7a47f38653a12807689041.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\87b1d55feaca4a2786b132e741eb8def.png\"/></p>\n<h4><a id=\"b_274\"></a>b、多次调用自己</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\dfc4fed6ba794ebcaa54b3ae3af7809f.png\"/></p>\n<h3><a id=\"_277\"></a>如何预防死锁</h3>\n<blockquote>\n<p><strong><code>让多个线程交叉有序的竞争多个资源</code><br/> <code>让互斥锁变为逻辑锁</code></strong><br/> <strong><code>mutex_TianTang=threading.Lock()：互斥锁</code></strong><br/> <strong><code>mutex_TianTang=threading.RLock()：互斥锁</code></strong></p>\n</blockquote>\n<h2><a id=\"2_283\"></a>2.学过编译原理吗？会用吗？(了解)</h2>\n<p>编译原理就是将高级语言翻译成计算机语言（即计算机所能识别的二进制代码）所遵循的规律，并且让你理解机器是如何理解高级语言的。</p>\n<h2><a id=\"3_Linux__287\"></a>3.用过 Linux 吗？会用吗？在上面搭过环境吗？说一下常用的指令。</h2>\n<blockquote>\n<p><strong>cat file<br/> head -n file<br/> tail -n file<br/> tail -f file<br/> tar -cvf log.tar ./<br/> tar -xvf log.tar<br/> tar -czvf log.tar.gz ./<br/> tar -xzvf log.tar.gz<br/> find ./ -name ‘*.log’<br/> ps -aux | grep ‘mysql’<br/> kill -9 进程号<br/> netstat -lt<br/> systemctl status firewalld.service<br/> systemctl stop firewalld.service<br/> vi 编辑命令<br/> su root 切换用户命令<br/> chomd 777 file<br/> grep<br/> sed<br/> awk</strong></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bf1c59f85ac54174bf4f0ce80d0dc088.jpeg\"/><br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/b4ca0aa9822248f3bbdbe164f0d7f45e.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}