{"blogid": "126743562", "writerAge": "码龄1年", "writerBlogNum": "139", "writerCollect": "57", "writerComment": "43", "writerFan": "26", "writerGrade": "4级", "writerIntegral": "1505", "writerName": "程序员不想睡觉", "writerProfileAdress": "writer_image\\profile_126743562.jpg", "writerRankTotal": "16563", "writerRankWeekly": "1996", "writerThumb": "8", "writerVisitNum": "7223", "blog_read_count": "17", "blog_time": "于 2022-09-07 13:25:43 发布", "blog_title": "秋招面试之MySQL：面试常考题（附答案）+MySQL性能调优经验，秋招必胜！", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>前言</h1>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/7b6a2e7c78af42e602c5e76e2ef0674d.webp?x-oss-process=image/format,png\"/></p>\n<p></p>\n<h1>20道常见MySQL数据库面试题+解析</h1>\n<ol><li> <p>事务四大特性（ACID）原子性、一致性、隔离性、持久性？</p> </li><li> <p>事务的并发？事务隔离级别，每个级别会引发什么问题，MySQL默认是哪个级别？</p> </li><li> <p>MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY）的区别？</p> </li><li> <p>MySQL的MyISAM与InnoDB两种存储引擎在，事务、锁级别，各自的适用场景？</p> </li><li> <p>查询语句不同元素（where、jion、limit、group by、having等等）执行先后顺序？</p> </li><li> <p>什么是临时表，临时表什么时候删除?</p> </li><li> <p>MySQL B+Tree索引和Hash索引的区别？</p> </li><li> <p>sql查询语句确定创建哪种类型的索引？如何优化查询？</p> </li><li> <p>聚集索引和非聚集索引区别？</p> </li><li> <p>有哪些锁（乐观锁悲观锁），select 时怎么加排它锁？</p> </li><li> <p>非关系型数据库和关系型数据库区别，优势比较？</p> </li><li> <p>数据库三范式，根据某个场景设计数据表？</p> </li><li> <p>数据库的读写分离、主从复制，主从复制分析的 7 个问题？</p> </li><li> <p>使用explain优化sql和索引？</p> </li><li> <p>MySQL慢查询怎么解决？</p> </li><li> <p>什么是 内连接、外连接、交叉连接、笛卡尔积等？</p> </li><li> <p>mysql都有什么锁，死锁判定原理和具体场景，死锁怎么解决？</p> </li><li> <p>varchar和char的使用场景？</p> </li><li> <p>mysql 高并发环境解决方案？</p> </li><li> <p>数据库崩溃时事务的恢复机制（REDO日志和UNDO日志）？</p> </li></ol>\n<p><strong>1、事务四大特性（ACID）原子性、一致性、隔离性、持久性？</strong></p>\n<p><strong>原子性（Atomicity）</strong></p>\n<ul><li> <p><strong>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚</strong>，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p> </li></ul>\n<p><strong>一致性（Consistency）</strong></p>\n<ul><li> <p><strong>事务开始前和结束后，数据库的完整性约束没有被破坏。比如A向B转账，不可能A扣了钱，B却没收到</strong>。</p> </li></ul>\n<p><strong>隔离性（Isolation）</strong></p>\n<ul><li> <p><strong>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</strong>。</p> </li></ul>\n<p>同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p>\n<p><strong>关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到</strong>。 <strong>持久性（Durability）</strong></p>\n<ul><li> <p><strong>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作</strong>。</p> </li></ul>\n<p><strong>2、事务的并发？事务隔离级别，每个级别会引发什么问题，MySQL默认是哪个级别？</strong></p>\n<p>从理论上来说, 事务应该彼此完全隔离, 以避免并发事务所导致的问题，然而, 那样会对性能产生极大的影响, 因为事务必须按顺序运行， <strong>在实际开发中, 为了提升性能, 事务会以较低的隔离级别运行， 事务的隔离级别可以通过隔离事务属性指定</strong>。</p>\n<p><strong>2.1事务的并发问题</strong></p>\n<p>（1）<strong>脏读</strong>：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p>\n<p>（2）<strong>不可重复读</strong>：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果因此本事务先后两次读到的数据结果会不一致。</p>\n<p>（3）<strong>幻读</strong>：幻读解决了不重复读，保证了同一个事务里，查询的结果都是事务开始时的状态（一致性）。</p>\n<p>例如：事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作 这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。 而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有跟没有修改一样，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p>\n<p><strong>小结</strong>：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。</p>\n<p><strong>2.2事务的隔离级别</strong></p>\n<p><strong>事务隔离级别</strong></p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/4fd1d598bcb0b3d0e92f81a56eb8b9e5.webp?x-oss-process=image/format,png\"/></p>\n<p></p>\n<ul><li> <p><strong>读未提交</strong>：另一个事务修改了数据，但尚未提交，而本事务中的SELECT会读到这些未被提交的数据<strong>脏读</strong></p> </li><li> <p><strong>不可重复读</strong>：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果因此本事务先后两次读到的数据结果会不一致。</p> </li><li> <p><strong>可重复读</strong>：在同一个事务里，SELECT的结果是事务开始时时间点的状态，因此，同样的SELECT操作读到的结果会是一致的。但是，会有<strong>幻读</strong>现象</p> </li><li> <p><strong>串行化</strong>：最高的隔离级别，在这个隔离级别下，不会产生任何异常。并发的事务，就像事务是在一个个按照顺序执行一样</p> </li></ul>\n<p><strong>2.3 MySQL默认的事务隔离级别为repeatable-read</strong></p>\n<ul><li> <p><strong>MySQL 支持 4 中事务隔离级别</strong>.</p> </li><li> <p>事务的隔离级别要得到底层数据库引擎的支持, 而不是应用程序或者框架的支持.</p> </li><li> <p>Oracle 支持的 2 种事务隔离级别：READ_COMMITED , SERIALIZABLE</p> </li></ul>\n<p><strong>2.3补充</strong></p>\n<ol><li> <p>SQL规范所规定的标准，不同的数据库具体的实现可能会有些差异</p> </li><li> <p>MySQL中默认事务隔离级别是“可重复读”时并不会锁住读取到的行</p> </li></ol>\n<ul><li> <p><strong>事务隔离级别</strong>：<strong>未提交读时</strong>，写数据只会锁住相应的行。</p> </li><li> <p><strong>事务隔离级别为</strong>：<strong>可重复读时</strong>，写数据会锁住整张表。</p> </li><li> <p><strong>事务隔离级别为</strong>：<strong>串行化时</strong>，读写数据都会锁住整张表。</p> </li></ul>\n<p><strong>隔离级别越高</strong>，<strong>越能保证数据的完整性和一致性</strong>，但是对并发性能的影响也越大，鱼和熊掌不可兼得啊。<strong>对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed，它能够避免脏读取，而且具有较好的并发性能</strong>。尽管它会导致不可重复读、幻读这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/15641a2428bb463ece4ee51806fe48d7.webp?x-oss-process=image/format,png\"/></p>\n<p></p>\n<h1>21条MySQL性能调优经验</h1>\n<ol><li> <p>为查询缓存优化你的查询</p> </li><li> <p>EXPLAIN你的SELECT查询</p> </li><li> <p>当只要一行数据时使用LIMIT 1</p> </li><li> <p>为搜索字段建索引</p> </li><li> <p>在Join表的时候使用相当类型的例，并将其索引</p> </li><li> <p>千万不要 ORDER BY RAND()</p> </li><li> <p>避免 SELECT *</p> </li><li> <p>永远为每张表设置一个 ID</p> </li><li> <p>使用 ENUM 而不是 VARCHAR</p> </li><li> <p>从 PROCEDURE ANALYSE() 取得建议</p> </li><li> <p>尽可能的使用 NOT NULL</p> </li><li> <p>Prepared Statements</p> </li><li> <p>无缓冲的查询</p> </li><li> <p>把 IP 地址存成 UNSIGNED INT</p> </li><li> <p>固定长度的表会更快</p> </li><li> <p>垂直分割</p> </li><li> <p>拆分大的 DELETE 或 INSERT 语句</p> </li><li> <p>越小的列会越快</p> </li><li> <p>选择正确的存储引擎</p> </li><li> <p>使用一个对象关系映射器(Object Relational Mapper)</p> </li><li> <p>小心“永久链接”</p> </li></ol>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/5403eaba7d5b2ea325b4ab3f0af31aa6.webp?x-oss-process=image/format,png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/eae12887f3703d5bd0bcb313713f7d9e.webp?x-oss-process=image/format,png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/c934eb7cfebe27235cd5b7229bc73adc.webp?x-oss-process=image/format,png\"/></p>\n<p>由于篇幅有限，这里就不一一罗列了，<strong>20道常见面试题（含答案）+21条MySQL性能调优经验，有需要的小伙伴可以私信【面试】即可！！感谢支持！！</strong> </p>\n</div>\n</div>"}