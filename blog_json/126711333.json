{"blogid": "126711333", "writerAge": "码龄12年", "writerBlogNum": "19", "writerCollect": "3120", "writerComment": "406", "writerFan": "1431", "writerGrade": "5级", "writerIntegral": "2616", "writerName": "陈小房", "writerProfileAdress": "writer_image\\profile_126711333.jpg", "writerRankTotal": "1083090", "writerRankWeekly": "40457", "writerThumb": "1617", "writerVisitNum": "94659", "blog_read_count": "2329", "blog_time": "于 2022-09-05 22:07:59 发布", "blog_title": "第2章 第一个Spring Boot项目", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2 id=\"%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9\">开发工具选择</h2>\n<p> </p>\n<p>工欲善其事必先利其器，我们进行Java项目开发，选择一个好的集成开发工具（IDE）对提高我们的开发调试效率有非常大的帮助。这里我们选择大名鼎鼎的IDEA ，它全称 IntelliJ IDEA。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\7b1802026a8fe3996ecc693c495e5525.png\"/></p>\n<p>​IntelliJ IDEA公认最好的Java开发工具，尤其在智能代码助手、代码自动提示、重构、JavaEE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析方面功能强大，尤其是其智能化人性化的辅助功能会让你用起来就爱不释手。IDEA是JetBrains公司的产品，我们可以在官网下载。Intellij IDEA有Community和Ultimate两个版本，Community为免费版，Ultimate为收费版，区别就是Ultimate可以开发web项目。</p>\n<p></p>\n<p>IntelliJ IDEA: <a href=\"https://www.jetbrains.com/idea/\" title=\"IntelliJ IDEA: The Capable &amp; Ergonomic Java IDE by JetBrains\">IntelliJ IDEA: The Capable &amp; Ergonomic Java IDE by JetBrains</a></p>\n<h3></h3>\n<h2 id=\"%E5%88%9B%E5%BB%BASpring%20Boot%E9%A1%B9%E7%9B%AE%E7%9A%842%E7%A7%8D%E6%96%B9%E6%B3%95\">创建Spring Boot项目的2种方法</h2>\n<p>创建Spring Boot项目一般有两种方法，一种是使用Spring官网提供的在线项目生成向导生成，另一种是使用Intellij IDEA自带的Spring项目生成向导生成。在创建项目之前需要安装JDK，网上教程较多，这里就不再赘述了。</p>\n<h2 id=\"%E6%96%B9%E6%B3%951%EF%BC%9A%E4%BD%BF%E7%94%A8Spring%20%E5%AE%98%E7%BD%91%E5%9C%A8%E7%BA%BF%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE\">方法1：使用Spring 官网在线生成项目</h2>\n<p>访问https://start.spring.io/ 出现如下页面。在Project 中选择Maven Project，编程语言Language中选择Java，Spring Boot版本使用默认选项即可。 Project Metadata 中Group为组织机构，一般按com.组织机构名填写，这里我填写了com.cjl , 选项Artifact代表子项目名，Name代表具体项目名称这里我们填写helloworld，描述信息Description请随意填写，Package name会自动生成。填写完毕基本参数之后，点击Generate创建并下载项目压缩包</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\60405293b4cee4e0bfdd129756b23bcd.png\"/></p>\n<p>将下载下来的项目压缩包解压，其中文件目录如下</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\c50054dc56bd9c442bee2edb2ae36f56.png\"/></p>\n<p>​使用IDEA导入项目，选择File-&gt;Open File or Project，选择前面我们解压后的文件夹，单击OK，这个时候IDEA会提示你使用新的窗口还是在当前窗口，可以根据实际情况选择，选择完毕之后，出现如下项目窗口，其中项目文件结构还未完全显示，同时IDEA右下方有一个小进度条，表面IDEA正在下载项目依赖文件</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\b803e0137cec98022feab93d58505943.png\"/></p>\n<p>​当IDEA下载完相关依赖文件之后会出现类似如下的项目结构。具体不同目录和文件的含义我们稍后介绍。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\123394f85432d4cd9b127b489f55b2f3.png\"/></p>\n<p>​</p>\n<h2 id=\"%E6%96%B9%E6%B3%952%EF%BC%9AIDEA%E8%87%AA%E5%B8%A6%E7%9A%84Spring%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E5%90%91%E5%AF%BC%E7%94%9F%E6%88%90\">方法2：IDEA自带的Spring项目生成向导生成</h2>\n<p>选择File-&gt;New-&gt;Project命令，弹出新建项目对话框。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\a52399725cddcf8ee907f05997636a26.png\"/></p>\n<p>​左侧选择Spring Initializr，Project SDK根据项目需要选择</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\81a05e454cde389eb296566959f81bf9.png\"/></p>\n<p>选择完毕后点击Next,出现Project Metadata填写页面，参照方法1填写即可</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\3125b0fe6060d6cb4b4987b992002968.png\"/></p>\n<p>​点击Next 出现和前述导入一样的画面，等待IDEA将依赖文件下载完毕，即可看到项目结构目录。至此项目的初始创建完成。接下来我们介绍一下Spring Boot项目的结构以及如何将其运行起来。</p>\n<h3></h3>\n<h2 id=\"Spring%20Boot%E9%A1%B9%E7%9B%AE%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\">Spring Boot项目基本结构</h2>\n<p>了解项目的目录结构是理解整个Spring Boot项目的基础，同时对理解项目的部署、维护也很有帮助。Spring Boot的项目结构如下，下面我们对其进行说明</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\55c87674d24686a0186b9bf097d20a94.png\"/></p>\n<p>​<strong>.idea目录</strong>，这个目录其实不属于Spring Boot项目，.idea目录是存储IntelliJ IDEA项目的配置信息，主要内容有IntelliJ IDEA项目本身的一些编译配置、文件编码信息、jar包的数据源和相关的插件配置信息。</p>\n<p><strong>.mvn目录</strong></p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\6c26b5401f19de1b0cb2e92ab998c709.png\"/></p>\n<p>​maven-wrapper主要有两个用处：</p>\n<p>1.可以为某个Java工程指定特定Maven版本，避免因为Maven版本差异引起的环境错误统一项目的开发环境.</p>\n<p>2.不再需要提前安装Maven，简化了开发环境的配置.</p>\n<p>接下来的src目录是Spring Boot主目录</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\55cc522acec7f87a606fcd9a431a3deb.png\"/></p>\n<p>​其中</p>\n<p><strong>src/main/java</strong>: 是程序开发及主程序目录</p>\n<p><strong>src/main/resource</strong>: 存放配置文件和资源文件，例如一些项目中用到的图片、视频、音频等和项目配置文件application.properties</p>\n<p><strong>src/test/java</strong>: 是测试程序目录，我们在该目录下编写测试程序</p>\n<p>接下来介绍一下其他文件</p>\n<p><strong>.gitignore文件</strong> ：Git忽略文件.gitignore，我们开发过程中会产生很多中间文件或者一些只有在本地使用的文件，这些文件不需要上传到代码库中，我们可以使用.gitignore进行配置。</p>\n<h3></h3>\n<h2 id=\"pom.xml%E4%BB%8B%E7%BB%8D\"><strong>pom.xml介绍</strong></h2>\n<p>pom.xml文件是Maven项目中非常重要的配置文件。Gradle项目的配置文件是build.gradle，主要描述项目包的依赖和项目构建时的配置。由于pom.xml文件非常重要，我们对它进行详细介绍</p>\n<h3 id=\"pom.xml%E6%96%87%E4%BB%B6%E5%A4%B4%E4%BF%A1%E6%81%AF\"><strong>pom.xml文件头信息</strong></h3>\n<pre><code class=\"language-XML\">&lt;project \nxmlns=\"http://maven.apache.org/POM/4.0.0\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</code></pre>\n<ul><li> <p>xmlns：命名空间，类似包名，因为xml的标签可自定义，为防止自定义的标签重名，需要命名空间来进行区分</p> </li><li> <p>xmlns:xsi ：xml遵循的标签规范</p> </li><li> <p>xsi:schemaLocation ：用来定义xmlschema的地址，也就是xml书写时需要遵循的语法</p> </li><li> <p>modelVersion：声明项目描述符遵循哪一个POM模型版本</p> </li></ul>\n<h3></h3>\n<h2 id=\"%E9%A1%B9%E7%9B%AE%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\"><strong>项目基本信息</strong></h2>\n<pre><code class=\"language-XML\">&lt;groupId&gt;com.cjl&lt;/groupId&gt;\n\t&lt;artifactId&gt;helloworld&lt;/artifactId&gt;\n\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n\t&lt;name&gt;helloworld&lt;/name&gt;\n        &lt;packaging&gt;jar&lt;/packaging&gt;\n\t&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n\t&lt;properties&gt;\n\t\t&lt;java.version&gt;8&lt;/java.version&gt;\n\t&lt;/properties&gt;</code></pre>\n<pre>上面的配置内容基本是创建项目时定义的有关项目的基本描述信息其中：</pre>\n<ul><li> <p>groupld:组织名也是项目的包路径。</p> </li><li> <p>artifactld: 项目名称。</p> </li><li> <p>version:项目版本号。</p> </li><li> <p>packaging:一般有jar、war两个值，表示使用Maven打包时是构建成JAR包还是WAR 包，默认是jar。</p> </li><li> <p>name:项目名称。</p> </li><li> <p>description:项目描述</p> </li></ul>\n<h3></h3>\n<h2 id=\"%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BF%A1%E6%81%AF\">项目依赖项信息</h2>\n<p>Spring Boot项目依赖项信息主要分为两部分parent和dependencies两部分。</p>\n<p>parent部分</p>\n<pre><code class=\"language-XML\">\t&lt;parent&gt;\n\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n\t\t&lt;version&gt;2.7.2&lt;/version&gt;\n\t\t&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n\t&lt;/parent&gt;</code></pre>\n<pre>这部分是配置父级项目的信息，这是Spring Boot的主要优点之一，将需要的依赖项打包在父项目依赖中，Maven支持项目的父子结构，引入后会默认继承父级的配置。此项目中引入spring-boot-starter-parent定义Spring Boot的基础版本。</pre>\n<p><strong>dependencies部分</strong></p>\n<pre><code class=\"hljs\">\t&lt;dependencies&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n\t\t\t&lt;scope&gt;test&lt;/scope&gt;\n\t\t&lt;/dependency&gt;\n\t&lt;/dependencies&gt;</code></pre>\n<pre>\ndependencies:配置项目所需要的依赖包，其中每个dependency标签代表一个依赖项，groupId是该依赖项的公司或者组织的唯一标志，artifacId是某个项目的唯一ID，一个groupId下面可能多个项目。</pre>\n<h2 id=\"%E9%A1%B9%E7%9B%AE%E5%85%AC%E5%85%B1%E5%B1%9E%E6%80%A7\"><strong>项目公共属性</strong></h2>\n<pre><code class=\"language-XML\">&lt;properties&gt;\n\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n\t\t&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;\n\t\t&lt;java.version&gt;1.8&lt;/java.version&gt;\n\t&lt;/properties&gt;</code></pre>\n<pre>properties标签下定义了一些项目的公共属性，例如源程序文件编码格式，Java版本等等。</pre>\n<h2 id=\"%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE\"><strong>项目构建相关配置</strong></h2>\n<pre><code class=\"language-XML\">\t&lt;build&gt;\n\t\t&lt;plugins&gt;\n\t\t\t&lt;plugin&gt;\n\t\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t\t&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n\t\t\t&lt;/plugin&gt;\n\t\t&lt;/plugins&gt;\n\t&lt;/build&gt;</code></pre>\n<pre>build标签下面是项目构建相关配置信息，由于我们选择的是Maven构建Spring Boot项目，所以必须在&lt;plugins&gt;中添加spring-boot-maven-plugin插件，这样项目就能以Maven的方式为应用提供Spring Boot的支持。</pre>\n<h2 id=\"%E8%BF%90%E8%A1%8C%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE\"><strong>运行第一个项目</strong></h2>\n<p>好了，前面已经对项目结构、pom.xml文件已经做完了介绍，相信很多读者都迫不及待想把项目运行起来了。下面介绍一下，如何运行我们第一个hello world程序。</p>\n<p>在src\\main\\java\\com\\cjl\\helloworld\\目录上右击，选择new pacage创建一个目录</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\c28f43695d7049ada616932d1b353e5a.png\"/></p>\n<p>然后在该目录下创建HelloController类，随后添加/helloworld的路由地址和方法，代码如下</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\05fe50550af7355c5a37c60e5d5de4cd.png\"/></p>\n<p></p>\n<pre><code class=\"language-java\">package com.cjl.helloworld.controller;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n    @RequestMapping(\"/helloworld\")\n    public String helloworld() {\n        return \"hello world,你好世界\";\n    }\n}</code></pre>\n<p>在上面代码示例中，我们创建了一个HelloController并创建了一个helloworld()方法，最后使用</p>\n<p>@RestController 和@RequestMapping 注解实现HTTP路由。</p>\n<p>可能有些初学者对注解这个词比较陌生，这里简单介绍一下，注解和注释很像，两者其实本质就差不多，注释是给我们程序员看的，而注解呢其实就是给程序看的，某个注解可以告诉程序要做什么事情。例如这里的 @RestController 标识被它标记的这个Spring中的类HelloController可以接收HTTP请求并返回return中的数据，而@RequestMapping(\"/helloworld\"）则提供路由映射，即访问“项目地址XX/helloworld”路径的HTTP请求，都会映射到helloworld（）方法上处理。</p>\n<p>接下来我们开始运行项目，在左侧项目导航中选中HelloworldApplication文件，可以看到文件中有一个注解@SpringBootApplication表面这是我们Spring项目的入口文件，点击右侧的绿色小三角形箭头，然后选择Run</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\538b9ee788675797c3f45f8db195ea59.png\"/></p>\n<p>项目如果成功运行，在IDEA下侧的输出窗口会看到类似如下的输出，其中注意port(s):8080，这表明我们的项目在8080端口监听服务，这个接下来会使用到</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\40c281bdeb2e3c05f54d3696163c8d89.png\"/></p>\n<p>成功运行项目之后，我们用地址http://localhost:8080/helloworld 访问项目，出现如下图信息，则说明我们的项目运行成功了</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\d84127d3ebba9d744010a3a2faf087f6.png\"/></p>\n<p></p>\n<p>接下来要介绍一下Spring的单元测试，可能很多同学在学校期间编写代码没有做单元测试的习惯，但是在实际开发中，单元测试是一项非常重要的工作，养成良好的单元测试习惯，可以减少大量的bug，让你的项目更加顺利上线，为你节省大量精力。</p>\n<p>Spring Boot作为一个专业的开发框架，它对单元测试的支持非常好，要使用单元测试功能，只需要在项目pom.xml文件中添加spring-boot-starter-test测试依赖启动器，然后就可以通过相关的单元测试注解实现单元测试。由于在线生成或者用IDEA生成向导生成的项目默认已经带了测试依赖启动器，无需再添加，如果没有需要在pom.xml中手动添加</p>\n<pre><code class=\"language-XML\">\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n\t\t\t&lt;scope&gt;test&lt;/scope&gt;\n\t\t&lt;/dependency&gt;</code></pre>\n<p>确认项目中添加了测试依赖启动器之后，就可以开始编写对应的单元测试了</p>\n<p>现在我们第一步只是单纯想运行一下单元测试，输出一句“Spring boot单元测试开始”,我们使用@Test 注解 实现。在自动生成的HelloworldApplicationTests类中已经有一个自动生成的单元测试方法实例了</p>\n<pre><code class=\"language-java\">@SpringBootTest\nclass HelloworldApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {\n\t}\n\n}</code></pre>\n<p>@SpringBootTest 注解用于标记这是一个测试类，其作用是用于确定如何装载 Spring 应用程序的上下文资源，这样框架会自动将这段程序加载到Spring Boot容器中，@Test 说明这是一个单元测试用例。我们仿照示例编写自己的单元测试程序</p>\n<pre><code class=\"language-java\">\t@Test\n\tpublic void  helloworld() {\n\t\tSystem.out.println(\"Spring boot单元测试开始\");\n\t}</code></pre>\n<pre>单机方法右侧的绿色箭头运行单元测试helloworld()方法，如果一切正常则会看到如下输出，左上角的绿色小勾说明测试通过，左下方会输出单测函数的输出结果</pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\84057a53f547be462b9ecfe5d3dfa1e7.png\"/></p>\n<p></p>\n<p>上面介绍了Spring Boot中最基本的单元测试，在一般开发过程中单元测试应用最多的地方是针对Service和Controller的测试。</p>\n<h3>测试Service方法</h3>\n<p>首先在项目中新建一个要测试的Service类，具体方法是。在com.cjl.helloworld目录下新建目录service，在目录中添加HelloService类。我们在该类中定义一个findHelloMsg()的方法，后面我们将测试该方法是否按预期运行</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\19cba9698517cdf404dfdb61223c1501.png\"/></p>\n<p>接下来就是生成对于的测试方法，对此IDEA提供了良好的支持，在Service类文件中右击，选择Go To，然后选择Test</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\de49510f2f763c09fee31b768d774d01.png\"/></p>\n<p>随后会弹出如下创建向导，在其中勾选我们需要测试的方法</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\0cba1761c80d275ac1de791011d0016a.png\"/></p>\n<p>​</p>\n<p>点击Ok后会在test目录下生成对于的测试类HelloServiceTest，并且其中已经生成了对findHelloMsg()的测试方法，我们在其中添加需要的代码</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\1b5294e9ae11fe9651ae4d5ec9e997c0.png\"/></p>\n<p></p>\n<p>首先在class声明头部添加@RunWith(SpringRunner.class)注解，在编写代码过程中如果相应的类没有引入IDEA还会提示，我们按照提示操作即可</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\ebce3792819ea1fccae8f9148184224c.png\"/></p>\n<p></p>\n<p>完整的测试代码如下，我们用@Autowired 注解了一个HelloService 类实例，以便后面测试时调用。然后编写了findHelloMsg()测试函数，里面用Assert.assertEquals方法判断findHelloMsg()运行结果是否符合我们预期</p>\n<pre><code class=\"language-java\">import org.junit.jupiter.api.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\nclass HelloServiceTest {\n    @Autowired\n    private HelloService helloService;\n\n    @Test\n    public void findHelloMsg() {\n        Assert.assertEquals(\"find Hello Msg\", helloService.findHelloMsg());\n    }\n}</code></pre>\n<pre>\n</pre>\n<p>将鼠标放到单元测试方法findHelloMsg()上，右键选择Run执行该方法，我们即可看到运行结果</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\c230b4b275bd8b59c071bd54185da2e8.png\"/></p>\n<p></p>\n<h3>测试Controller</h3>\n<p>除了对Service进行测试，我们还需要对Controller进行测试。由于Controller功能是对不同的web请求进行路由响应因此需要一个可以模拟Web请求的类来辅助测试，这个类就是MockMvc类。MockMvc类能够模拟HTTP请求，来访问Controller中的方法，同时不依赖网络环境。spring-boot-starter-test中使用@WebMvcTest等注解进行使用。在我们前面创建的HelloController类里，按照前述方法创建测试用例程序</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\f9bc48eb200e878fddada3687a2a7668.png\"/></p>\n<p></p>\n<p>在IDEA自动生成的代码上添加代码如下</p>\n<pre><code class=\"language-java\">@RunWith(SpringRunner.class)\n@WebMvcTest(HelloController.class)\nclass HelloControllerTest {\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public   void helloworld() throws  Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/helloworld\")\n        .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andDo(print());\n    }\n}</code></pre>\n<pre>代码中使用MockMvc类实例mockMvc构造HTTP请求，通过MockMvcRequestBuilder.post构造一个post请求，通过contentType(MediaType.APPLICATION_JSON)设置返回格式为JSON格式，andExpect(status().isOk())对执行的结果进行判断，默认HTTP请求返回状态码200为正确，andDo(print())在执行完毕后调用print（）将处理结果打印出来。</pre>\n<p>运行测试程序可以看到结果输出</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\dcc862288715d1ebebba6245491248fd.png\"/></p>\n<p>​</p>\n<p></p>\n<p>在Idea的spring工程里，经常会遇到Could not autowire. No beans of 'xxxx' type found的错误提示。但程序的编译和运行都是没有问题的，这个错误提示并不会产生影响。 原因在于spring auto scan配置。在编辑情况下，无法找不到对应的bean，于是提示找不到对应bean的错误，只要修改工程的配置即可</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\0c621ef781050569d01b1688cbb428ef.png\"/></p>\n<p>​点击File-&gt;Settings 输入autoW然后按图修改即可</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\d0242a65314ab6cb072fb57e52dde692.png\"/></p>\n<h2>开发中的热部署</h2>\n<p>我们在调试开发Spring Boot项目过程中，经常需要反复修改测试，在修改之后往往需要重启服务，有些服务需要加装很长时间，这就导致了开发效率低下，为解决这个问题Spring Boot框架专门提供了进行热部署的依赖启动器，实现项目的热部署。</p>\n<p>添加热部署依赖启动器</p>\n<p>使用热部署需要添加相应的依赖启动器，在pom.xml中引入</p>\n<pre><code class=\"language-XML\">\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;</code></pre>\n<pre>\n</pre>\n<p>在IDE工具中设置热部署，点击File-&gt;Settings, 打开Compiler面板设置，选择【Build,Execution,Deployment】下的Comiller，选中自动编译项目Build project automatically</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\bb9390b82ac3af6f114496b59d0e4aef.png\"/></p>\n<p>​在项目任意页面使用快捷键 \"Ctrl+Shift+Alt+/\"打开Maintenance选项框，选择Registry页面，然后选择运行自动编译运行</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\ce147eeafa4c6c4eed04ec44bbad3bb4.png\"/></p>\n<p>效果测试，启动项目访问http://localhost:8080/helloworld可以看到当前的输出是</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\21a3f04485c2eb93c81d521fbcc7c68a.png\"/></p>\n<p></p>\n<p>然后我们修改helloworld的代码，返回值变为\"hello world,我很好\";</p>\n<pre><code class=\"language-java\">@RestController\npublic class HelloController {\n    @RequestMapping(\"/helloworld\")\n    public String helloworld() {\n        return \"hello world,我很好\";\n    }\n}</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\a94937063cc52ad12fde1a603d9c6ee3.png\"/></p>\n<p>​我们观察输出窗口，发现项目自动进行编译并运行了，同时刷新浏览器，内容改变说明热部署生效。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\9da0d28ebeba9b4e671e758169408ad1.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<h3></h3>\n<p>项目源码</p>\n<p>可以访问：<a href=\"https://github.com/qwdzq/springboot.git\" title=\"GitHub - qwdzq/springboot: spring boot 入门\">GitHub - qwdzq/springboot: spring boot 入门</a></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}