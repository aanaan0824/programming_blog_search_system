{"blogid": "126049293", "writerAge": "码龄172天", "writerBlogNum": "33", "writerCollect": "739", "writerComment": "1037", "writerFan": "1865", "writerGrade": "5级", "writerIntegral": "3106", "writerName": "雪芙花", "writerProfileAdress": "writer_image\\profile_126049293.jpg", "writerRankTotal": "7107", "writerRankWeekly": "553", "writerThumb": "1179", "writerVisitNum": "14508", "blog_read_count": "278", "blog_time": "已于 2022-09-01 14:53:12 修改", "blog_title": "C++精通之路：红黑树的应用（模拟实现map/set）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_5\">一：红黑树的迭代器</a></li><li><ul><li><a href=\"#1beginend_11\">1.begin()与end()</a></li><li><a href=\"#2operatoroperator_19\">2.operator++()与operator--()</a></li><li><ul><li><a href=\"#_30\">代码实现：</a></li></ul>\n</li><li><a href=\"#_91\">反向迭代器适配器</a></li></ul>\n</li><li><a href=\"#mapset_244\">二：改造红黑树来模拟实现map/set</a></li><li><ul><li><a href=\"#1__248\">1. 节点的改变：</a></li><li><a href=\"#2__275\">2. 主体的改变</a></li><li><a href=\"#3__299\">3. 添加仿函数来适配数据间的比较</a></li></ul>\n</li><li><a href=\"#_392\">三：红黑树的封装与适配</a></li><li><a href=\"#map_753\">四：map的封装和模拟实现</a></li><li><a href=\"#_%09set_815\">五： set的封装和模拟实现</a></li><li><a href=\"#_874\">总结</a></li><li><a href=\"#ps_878\">ps</a></li></ul>\n</div>\n<p></p>\n<blockquote>\n<p>很多小伙伴为了刷题发愁<br/> 今天为大家推荐一款刷题神奇哦：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_xfh_sf\">刷题面试神器牛客</a><br/> 各大互联网大厂面试真题。从基础到入阶乃至原理刨析类面试题 应有尽有，赶快来装备自己吧！助你面试稳操胜券，solo全场面试官</p>\n</blockquote>\n<h1><a id=\"_5\"></a>一：红黑树的迭代器</h1>\n<ul><li>需要注意的是：</li></ul>\n<blockquote>\n<ol><li>迭代器本质上是指针的一个封装的类，其底层就是指针；好处是可以方便遍历，是数据结构的底层实现与用户透明</li><li>对于string,vector,list等容器，其本身的结构上是比较简单的，迭代器的实现也很简单；但是对于二叉树结构的红黑树来说需要考虑很多的问题</li></ol>\n</blockquote>\n<h2><a id=\"1beginend_11\"></a>1.begin()与end()</h2>\n<blockquote>\n<p>STL明确规定，begin()与end()代表的是一段前闭后开的区间</p>\n</blockquote>\n<blockquote>\n<p>对红黑树进行中序遍历后，可以得到一个有序的序列，因此begin()可以放在红黑树中最小节点(即最左侧节点)的位置，end()放在最大节点(最右侧节点)的下一个位置即nullptr</p>\n</blockquote>\n<ul><li>如图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c2f055d2a83a49b4a6e8a5470f267675.png\"/></li></ul>\n<h2><a id=\"2operatoroperator_19\"></a>2.operator++()与operator–()</h2>\n<ul><li>++逻辑的实现：</li></ul>\n<ol><li>因为红黑树的中序是有序的，所以++是找到该节点在中序中的下一个节点</li><li>因为中序是左中右，所以我们可以分为右子树存在和不存在来讨论下一个节点是谁</li></ol>\n<blockquote>\n<ol><li>当右子树存在时，右子树的最左节点即是下一个节点</li><li>当右子树不存在时，我们需要向上寻找，因为中序是左中右的，所以该子树已经被遍历完了，则++操作后应该在该结点的祖先结点中找到孩子不在父亲右的祖先</li></ol>\n</blockquote>\n<ul><li>–的逻辑是一样的</li></ul>\n<h3><a id=\"_30\"></a>代码实现：</h3>\n<ul><li>operator++()</li></ul>\n<pre><code class=\"prism language-cpp\">Self<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_node<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span><span class=\"token comment\">//右子节点存在</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//找到右子树中最左节点</span>\n        Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        _node <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token comment\">//右子节点不存在，向上找</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录走过的节点</span>\n        Node<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            cur <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n            parent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        _node <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul><li>operator–()：</li></ul>\n<pre><code class=\"prism language-cpp\">Self<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_node<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span><span class=\"token comment\">//左子节点存在</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//找左子树中的最右节点</span>\n        Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        _node <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token comment\">//左子节点不存在</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n        Node<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            cur <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n            parent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        _node <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_91\"></a>反向迭代器适配器</h2>\n<blockquote>\n<p>因为反向迭代器与正向迭代器在原理实现中是相同的，只是方向反了而已<br/> 所以我们可以用正向迭代器来封装出反向迭代器，在正向迭代器的基础上，对其接口进行封装达到反向迭代器的效果</p>\n</blockquote>\n<ul><li>正向迭代器实现代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ref</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ptr</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_TreeIterator</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//声明类型，便于反向迭代器对类型的提取</span>\n\t<span class=\"token keyword\">typedef</span> Ref reference<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> Ptr pointer<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> RBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> _TreeIterator<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> Ref<span class=\"token punctuation\">,</span> Ptr<span class=\"token operator\">&gt;</span> Self<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> _node<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">_TreeIterator</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_node</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n\tRef <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _node<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tPtr <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_node<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _node <span class=\"token operator\">==</span> it<span class=\"token punctuation\">.</span>_node<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _node <span class=\"token operator\">!=</span> it<span class=\"token punctuation\">.</span>_node<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tSelf<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_node<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_node <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n\t\t\tNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t\t\tparent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_node <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tSelf<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_node<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_node <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _node<span class=\"token punctuation\">;</span>\n\t\t\tNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> _node<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t\t\tparent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t_node <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<ul><li>反向迭代器实现代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//适配器构造反向迭代器</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Iterator</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ReverseIterator</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//类型未实例化，无法取出里面的类型，此时需要使用typename：告诉编译器等实例化后再到类里面找对应的类型</span>\n\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Iterator</span><span class=\"token double-colon punctuation\">::</span>reference Ref<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Iterator</span><span class=\"token double-colon punctuation\">::</span>pointer Ptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> ReverseIterator<span class=\"token operator\">&lt;</span>Iterator<span class=\"token operator\">&gt;</span> Self<span class=\"token punctuation\">;</span>\n\n\tIterator _it<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ReverseIterator</span><span class=\"token punctuation\">(</span>Iterator it<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_it</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token comment\">//在正向迭代器接口上进行封装复用   </span>\n\tRef <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>_it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tPtr <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _it<span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> it<span class=\"token punctuation\">.</span>_it<span class=\"token operator\">==</span>_it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token comment\">//两个const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> _it <span class=\"token operator\">!=</span> it<span class=\"token punctuation\">.</span>_it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tSelf<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">--</span>_it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tSelf<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">++</span>_it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h1><a id=\"mapset_244\"></a>二：改造红黑树来模拟实现map/set</h1>\n<blockquote>\n<p>因为set是K模型的容器，而map是KV模型的容器.所以要用红黑树来模拟实现这两个容器，需要添加一些东西使得其能适配两者，添加和改变的东西如下：</p>\n</blockquote>\n<h2><a id=\"1__248\"></a>1. 节点的改变：</h2>\n<blockquote>\n<p>对于红黑树的节点我们需要节点对于set来说储存key，对于map来说储存key-value键值对，所以这里我们就直接让节点类型的阈值类型为T，用来控制储存类型</p>\n</blockquote>\n<ul><li>代码的实现：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RBTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _left<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _right<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _parent<span class=\"token punctuation\">;</span>\n\n\tT _data<span class=\"token punctuation\">;</span><span class=\"token comment\">//T可以是key也可以是pair&lt;K,V&gt;</span>\n\tColour _col<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">RBTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_parent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_col</span><span class=\"token punctuation\">(</span>RED<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h2><a id=\"2__275\"></a>2. 主体的改变</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RBTree</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">typedef</span> RBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//.......</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tNode<span class=\"token operator\">*</span> _root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<blockquote>\n<p>K是用来比较的类型，T是用来存储的类型</p>\n</blockquote>\n<ul><li>这里就体现了对map和set的兼容。</li></ul>\n<blockquote>\n<ul><li>当为map时，传进来的T为pirpair&lt;key,value&gt;</li><li>当为set时，传进来的T为K</li></ul>\n</blockquote>\n<ul><li>达到了存储不同数据类型的目的</li></ul>\n<h2><a id=\"3__299\"></a>3. 添加仿函数来适配数据间的比较</h2>\n<blockquote>\n<p>在删除添加时，我们要进行节点中数据的比较，<br/> 当为map时，pirpair&lt;key,value&gt;与Kl类型无法比较时，这里就需要仿函数来帮助我们适配</p>\n</blockquote>\n<ul><li>对于不同容器我们需要不同的仿函数类型，由此在红黑树的模板列表中还需要一个模板类型参数，灵活控制传入的仿函数类型</li></ul>\n<blockquote>\n<p>仿函数的本质是创造一个类，通过operator（）的重载来实现的，与函数重载类似，但在模板内，就只能使用仿函数来实现了。</p>\n</blockquote>\n<ul><li>红黑树框架：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RBTree</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">typedef</span> RBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//...</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tNode<span class=\"token operator\">*</span> _root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<ul><li>map实现框架：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> cole\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">map</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MapOfKey</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tRBTree<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> MapOfKey<span class=\"token operator\">&gt;</span> _t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul><li>set实现框架：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> cole\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">set</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">SetOfKey</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tRBTree<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> SetOfKey<span class=\"token operator\">&gt;</span> _t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul><li>仿函数使用示例：<br/> Node* Find(const K&amp; key)<br/> {<!-- --><br/> KeyOfT kot;<br/> Node* cur = _root;<br/> while (cur)<br/> {<!-- --><br/> if (kot(cur-&gt;_kv.first) &gt; key)<br/> {<!-- --><br/> cur = cur-&gt;_left;<br/> }<br/> else if (kot(cur-&gt;_kv.first) &lt; key)<br/> {<!-- --><br/> cur = cur-&gt;_right;<br/> }<br/> else<br/> {<!-- --><br/> return cur;<br/> }<br/> }<br/> return nullptr;<br/> }</li></ul>\n<h1><a id=\"_392\"></a>三：红黑树的封装与适配</h1>\n<ul><li>代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//颜色</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRED<span class=\"token punctuation\">,</span>\n\tBLACK<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RBTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _left<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _right<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _parent<span class=\"token punctuation\">;</span>\n\n\tT _data<span class=\"token punctuation\">;</span><span class=\"token comment\">//T可以是key也可以是pair&lt;K,V&gt;</span>\n\tColour _col<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">RBTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_parent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_col</span><span class=\"token punctuation\">(</span>RED<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyOfT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RBTree</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> RBTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">typedef</span> _TreeIterator<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> iterator<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> _TreeIterator<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> const_iterator<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> ReverseIterator<span class=\"token operator\">&lt;</span>iterator<span class=\"token operator\">&gt;</span> reverse_iterator<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> ReverseIterator<span class=\"token operator\">&lt;</span>const_iterator<span class=\"token operator\">&gt;</span> reverse_const_iterator<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">RBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_root</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">RBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">_Destory</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">&amp;&amp;</span>cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\treverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">&amp;&amp;</span>cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\treverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tNode<span class=\"token operator\">*</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tKeyOfT kot<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tpair<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//空树的情况</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tKeyOfT kot<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//查找位置插入节点</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//创建链接节点</span>\n\t\tcur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">kot</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">//父节点存在且为红，则需要调整（不能存在连续的红色节点）</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//此时当前节点一定有祖父节点</span>\n\t\t\tNode<span class=\"token operator\">*</span> granparent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//具体调整情况主要看叔叔节点</span>\n\t\t\t<span class=\"token comment\">//分左右讨论</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> granparent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> granparent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//情况1：叔叔节点存在且为红</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//修改颜色，继续向上检查</span>\n\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tcur <span class=\"token operator\">=</span> granparent<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token comment\">//情况2和3：叔叔节点不存在 或者存在且为黑</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//单旋(三代节点为斜线)+变色</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token comment\">//双旋(三代节点为折线)+变色</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token comment\">//旋转后不需再向上调整了</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token comment\">//parent=grandparent-&gt;right</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> granparent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tcur <span class=\"token operator\">=</span> granparent<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//确保根节点为黑</span>\n\t\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>newnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">IsRBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"根节点为红色\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">int</span> Blacknum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n\t\t\t\tBlacknum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> Blacknum<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">_Destory</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">_Destory</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">_Destory</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">delete</span> root<span class=\"token punctuation\">;</span>\n\t\troot <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> blacknum<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blacknum <span class=\"token operator\">==</span> count<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"各路径上黑色节点个数不同\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-&gt;</span>_parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"存在连续红色节点\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">,</span> blacknum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">,</span> blacknum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> subR <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> subRL <span class=\"token operator\">=</span> subR<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parentP <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\n\n\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subRL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subRL<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsubRL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tsubR<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> _root<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t\tsubR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsubR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentP<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentP<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> subL <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> subLR <span class=\"token operator\">=</span> subL<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parentP <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\n\n\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subLR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLR<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsubLR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tsubL<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> _root<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t\tsubL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsubL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentP<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentP<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tNode<span class=\"token operator\">*</span> _root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h1><a id=\"map_753\"></a>四：map的封装和模拟实现</h1>\n<ul><li>代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> ymhh\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">map</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MapOfKey</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">RBTree</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> MapOfKey<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator iterator<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">RBTree</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> MapOfKey<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>reverse_iterator reverse_iterator<span class=\"token punctuation\">;</span>\n\n\t\titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\treverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\treverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tpair<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tV<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tpair<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token function\">V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span>first<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\titerator <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tRBTree<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> MapOfKey<span class=\"token operator\">&gt;</span> _t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_%09set_815\"></a>五： set的封装和模拟实现</h1>\n<ul><li>代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> ymhh\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">set</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">SetOfKey</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">RBTree</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span> SetOfKey<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator iterator<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">RBTree</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span> SetOfKey<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>reverse_iterator reverse_iterator<span class=\"token punctuation\">;</span>\n\n\t\titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\treverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\treverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tpair<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\titerator <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tRBTree<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> SetOfKey<span class=\"token operator\">&gt;</span> _t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_874\"></a>总结</h1>\n<blockquote>\n<p>因为红黑树的增删查改都是O（logN）,所以用红黑树实现的map/set的增删查改也是O（logN），是个非常优秀的容器</p>\n</blockquote>\n<h1><a id=\"ps_878\"></a>ps</h1>\n<blockquote>\n<p>想和博主一样刷优质面试和算法题嘛，快来<a href=\"https://www.nowcoder.com/link/pc_csdncpt_xfh_sf\">刷题面试神器牛客</a>吧，期待与你在牛客相见</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}