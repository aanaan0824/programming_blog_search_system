{"blogid": "123082736", "writerAge": "码龄12年", "writerBlogNum": "2", "writerCollect": "1", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "21", "writerName": "魔王6", "writerProfileAdress": "writer_image\\profile_123082736.jpg", "writerRankTotal": "231554", "writerRankWeekly": "458847", "writerThumb": "1", "writerVisitNum": "969", "blog_read_count": "947", "blog_time": "于 2022-03-24 10:55:10 发布", "blog_title": "Illuminate database", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>Illuminate database是一个非常强大非常优秀的ORM类库，也是一个非常实用的数据库操作组件。使用它可以轻松对数据库进行查询、插入、更新、删除等操作，支持MySQL，Postgres，SQL Server，SQLlite等。它还是Laravel框架的数据库组件。</p>\n<p>本文单独将illuminate database拿出来，脱离框架，主要讲讲使用illuminate database查询构造器进行数据库操作。</p>\n<p>安装</p>\n<p>使用 composer 安装，直接在项目根目录的命令行里，执行</p>\n<pre><code>composer require illuminate/database</code></pre>\n<p>建议PHP版本使用PHP^7.2。</p>\n<p>建立配置</p>\n<p>创建一个Capsule管理实例来配置数据库连接参数。</p>\n<pre><code>&lt;?php \n$capsule = new \\Illuminate\\Database\\Capsule\\Manager;\n// 创建链接\n$capsule-&gt;addConnection([\n    'driver' =&gt; 'mysql',\n    'host' =&gt; 'localhost',\n    'database' =&gt; 'demo',\n    'username' =&gt; 'root',\n    'password' =&gt; '',\n    'charset' =&gt; 'utf8mb4',\n    'port' =&gt; 3306,\n    'collation' =&gt; 'utf8mb4_general_ci',\n    'prefix' =&gt; 'web_',\n]);\n// 设置全局静态可访问DB\n$capsule-&gt;setAsGlobal();\n// 启动Eloquent （如果只使用查询构造器，这个可以注释）\n$capsule-&gt;bootEloquent();\n</code></pre>\n<p>将配置文件保存为database.php。再新建文件index.php，代码如下：</p>\n<pre><code>&lt;?php \ndate_default_timezone_set(\"PRC\");\n\nrequire 'vendor/autoload.php';\nrequire 'database.php';\n\nuse Illuminate\\Database\\Capsule\\Manager as DB;\n\n</code></pre>\n<p>自行准备好数据库表，现在，可以直接在index.php后面写数据库操作语句了。</p>\n<p>获取结果集</p>\n<p>从一张表中获取一行/一列</p>\n<p>如果我们只是想要从数据表中获取一行数据，可以使用<code>first</code> 方法，该方法将会返回单个<code>StdClass</code>对象：</p>\n<pre><code>$article = DB::table('article')-&gt;where('author', '月光光')-&gt;first();\necho $article-&gt;title;\n</code></pre>\n<p>如果我们不需要完整的一行，可以使用<code>value</code> 方法从结果中获取单个值，该方法会直接返回指定列的值：</p>\n<pre><code>$title = DB::table('article')-&gt;where('author', '月光光')-&gt;value('title');\n</code></pre>\n<p>获取数据列值列表</p>\n<p>如果只要查询表中的某一列值，可使用<code>pluck</code>方法。</p>\n<pre><code>$titles = DB::table('article')-&gt;where('author', '月光光')-&gt;pluck('title');\nforeach ($titles as $title) {\n     echo $title;\n}\n</code></pre>\n<p>如果要获取一个表中的其中几个字段列的结果，可以使用<code>select</code>和<code>get</code>方法。</p>\n<pre><code>$list = DB::table('article')-&gt;select('id', 'title')-&gt;get();\n$list = DB::table('article')-&gt;get(['id', 'title']);\n</code></pre>\n<p>两条语句返回的结果是一样的。要获取结果，需要遍历$list:</p>\n<pre><code>foreach ($list as $key =&gt; $val) {\n    echo $val-&gt;id;\n    echo $val-&gt;title;\n}\n</code></pre>\n<p>强制不重复</p>\n<p><code>distinct</code>方法允许你强制查询返回不重复的结果集</p>\n<pre><code>$list = DB::table('article')-&gt;distinct()-&gt;get();\n</code></pre>\n<p>Where查询</p>\n<p>简单 Where 子句</p>\n<p>使用查询构建器上的<code>where</code>方法可以添加<code>where</code>子句到查询中，调用<code>where</code>最基本的方式需要传递三个参数，第一个参数是列名，第二个参数是任意一个数据库系统支持的操作符，第三个参数是该列要比较的值。</p>\n<p>如，查询id值为100的记录。</p>\n<pre><code>$row = DB::table('article')-&gt;where('id', '=', '100')-&gt;get();\n</code></pre>\n<p>当要查询的列值和给定数组相等时，可以将等号省略。上面的语句可以这样写：</p>\n<pre><code>DB::table('article')-&gt;where('id', '100')-&gt;get();\n</code></pre>\n<p>除了等号，还有<code>&gt;=</code>，<code>&lt;=</code>，<code>&lt;&gt;</code>，<code>like</code></p>\n<pre><code>DB::table('article')-&gt;where('title', 'like', 'php%')-&gt;get();\n</code></pre>\n<p>Where数组</p>\n<p>还可以传递条件数组到<code>where</code>函数：</p>\n<pre><code>$list = DB::table('article')-&gt;where([\n     ['id', '&gt;', '100'],\n     ['source', '=', 'helloweba.com']\n ])-&gt;get();\n</code></pre>\n<p>or 语句</p>\n<p>我们可以通过方法链将多个<code>where</code>约束链接到一起，也可以添加 or 子句到查询，<code>orWhere</code>方法和 <code>where</code> 方法接收参数一样：</p>\n<pre><code>$list = DB::table('article')\n         -&gt;where('source', 'helloweba.com')\n         -&gt;orWhere('hits', '&lt;', '1000')\n         -&gt;get(['id', 'title', 'hits']);\n</code></pre>\n<p>whereIn语句</p>\n<p><code>whereIn</code>方法验证给定列的值是否在给定数组中。<code>whereNotIn</code>方法验证给定列的值不在给定数组中。</p>\n<pre><code>$list = DB::table('article')-&gt;whereIn('id', [10,100,200])-&gt;get(['id', 'title']);\n</code></pre>\n<p>whereBeteen语句</p>\n<p><code>whereBetween</code>方法验证列值是否在给定值之间，<code>whereNotBetween</code>方法验证列值不在给定值之间。</p>\n<pre><code>$list = DB::table('article')\n         -&gt;whereBetween('hits', [1, 1000])-&gt;get(['id', 'title', 'hits']);</code></pre>\n<p>whereNull语句</p>\n<p><code>whereNull</code>方法验证给定列的值为<code>NULL</code>，<code>whereNotNull</code>方法验证给定列的值不是 <code>NULL</code>。</p>\n<pre><code>$list = DB::table('article')\n        -&gt;whereNull('updated_at')\n        -&gt;get();\n</code></pre>\n<p>whereDate语句</p>\n<p>如果我们要查询创建日期在2019-08-29的文章记录，可以使用<code>whereDate</code>。</p>\n<pre><code>$list = DB::table('article')-&gt;whereDate('created_at', '2019-08-29')-&gt;get(['id', 'title', 'created_at']);\n</code></pre>\n<p>whereMonth语句</p>\n<p>如果我们要查询创建月份在10月份的所有文章记录，可以使用<code>whereMonth</code>。</p>\n<pre><code>$list = DB::table('article')-&gt;whereMonth('created_at', '10')-&gt;get(['id', 'title', 'created_at']);\n</code></pre>\n<p>whereDay语句</p>\n<p>如果要查询创建日期在1号的所有文章，可以使用<code>whereDay</code>。</p>\n<pre><code>$list = DB::table('article')-&gt;whereDay('created_at', '1')-&gt;get(['id', 'title', 'created_at']);\n</code></pre>\n<p>whereYear语句</p>\n<p>如果要查询创建年份是2016年的所有文章，可以使用<code>whereYear</code>。</p>\n<pre><code>$list = DB::table('article')-&gt;whereYear('created_at', '2016')-&gt;get(['id', 'title', 'created_at']);</code></pre>\n<p>whereTime语句</p>\n<p>如果要查询创建时间在10:20的所有文章，可以使用<code>whereTime</code>。</p>\n<pre><code>$list = DB::table('article')-&gt;whereTime('created_at', '10:20')-&gt;get(['id', 'title', 'created_at']);</code></pre>\n<p>whereColumn语句</p>\n<p>如果要查询文章表中创建时间和更新时间相等的所有文章，可以使用<code>whereColumn</code>。</p>\n<pre><code>$list = DB::table('article')-&gt;whereColumn('created_at', '=', 'updated_at')-&gt;get(['id', 'title', 'created_at']);</code></pre>\n<p>聚合查询</p>\n<p>查询构建器还提供了多个聚合方法，如总记录数: <code>count</code>, 最大值: <code>max</code>, 最小值:<code>min</code>,平均数：<code>avg</code> 和总和: <code>sum</code>，我们可以在构造查询之后调用这些方法。</p>\n<pre><code>$count = DB::table('article')-&gt;count(); //总记录数\n$max = DB::table('article')-&gt;max('hits'); //点击量最大\n</code></pre>\n<p>判断记录是否存在</p>\n<p>除了通过 count 方法来判断匹配查询条件的结果是否存在外，还可以使用<code>exists</code> 或<code>doesntExist</code> 方法：</p>\n<pre><code>$exists = DB::table('article')-&gt;where('author', '月光光')-&gt;exists();\n</code></pre>\n<p>返回的是true和false。</p>\n<p>排序、分组与限定</p>\n<p>orderBy</p>\n<p>我们要对查询的记录进行顺序<code>asc</code>和倒序<code>desc</code>排序，可以使用<code>orderBy</code>。</p>\n<pre><code>$list = DB::table('article')-&gt;orderBy('id', 'desc')-&gt;get(['id', 'title']);</code></pre>\n<p>latest / oldest</p>\n<p>我们可以使用<code>latest</code>和<code>oldest</code>对日期字段<code>created_at</code>。</p>\n<pre><code>$list = DB::table('article')-&gt;latest()-&gt;first();\n</code></pre>\n<p>inRandomOrder</p>\n<p>如果我们要从文章表中随机排序，查询一条随机记录，可以使用<code>inRandomOrder</code>。</p>\n<pre><code>$list = DB::table('article')-&gt;inRandomOrder()-&gt;first();</code></pre>\n<p>groupBy / having</p>\n<p>如果要对结果集进行分组，可以使用<code>groupBy</code>方法和<code>having</code>方法。</p>\n<pre><code>DB::table('article')-&gt;groupBy('cate')-having('id', '&gt;', 100)-&gt;get();</code></pre>\n<p>skip / take</p>\n<p>如果要对结果集进行跳过给定的数目结果，可以使用<code>skip</code>和<code>take</code>方法，该方法常用于数据分页。</p>\n<pre><code>$list = DB::table('article')-&gt;skip(10)-&gt;take(5)-&gt;get(['id', 'title']);\n</code></pre>\n<p>以上语句等价于：</p>\n<pre><code>$list = DB::table('article')-&gt;offset(10)-&gt;limit(5)-&gt;get(['id', 'title']);\n</code></pre>\n<p>连接Join</p>\n<p>查询构建器还可以用于编写join连接语句，常见的几种连接类型有：<code>join</code>、<code>leftJoin</code>、<code>rightJoin</code>等。</p>\n<pre><code>$list = DB::table('mark')\n            -&gt;join('user', 'mark.user_id', '=', 'user.id')\n            -&gt;join('article', 'mark.article_id', '=', 'article.id')\n            -&gt;get(['article.id','article.title','user.username','user.nickname']);\n</code></pre>\n<p>插入数据</p>\n<p>查询构建器还提供了<code>insert</code>方法用于插入记录到数据表。<code>insert</code>方法接收数组形式的字段名和字段值进行插入操作</p>\n<pre><code>DB::table('article')-&gt;insert(\n    ['title' =&gt; 'PDO操作数据库', 'author' =&gt; '月光光']\n);</code></pre>\n<p>支持批量插入：</p>\n<pre><code>DB::table('article')-&gt;insert(\n    ['title' =&gt; 'PDO操作数据库', 'author' =&gt; '月光光'],\n    ['title' =&gt; 'PDO那些事', 'author' =&gt; '想吃鱼的猫'],\n);</code></pre>\n<p>自增ID</p>\n<p>使用<code>insertGetId</code>方法来插入记录并返回ID值，如果表中的id为自增长ID，则返回的即为自增ID。</p>\n<pre><code>$id = DB::table('article')-&gt;insertGetId(\n    ['title' =&gt; 'PDO操作数据库', 'author' =&gt; '月光光'],\n);\n</code></pre>\n<p>更新数据</p>\n<p>使用<code>update</code>方法可以更新对应的字段。</p>\n<pre><code>DB::table('article')-&gt;where('id', 1)-&gt;update('author', '月光光');</code></pre>\n<p>增减数字</p>\n<p>我们可以使用<code>increment</code>和<code>decrement</code>方法增减某个列值，比如增加点击量。</p>\n<pre><code>DB::table('article')-&gt;increment('hits'); //点击量+1\nDB::table('article')-&gt;increment('hits', 5); //点击量+5\nDB::table('article')-&gt;decrement('hits'); //点击量-1\nDB::table('article')-&gt;decrement('hits', 5); //点击量-5\n</code></pre>\n<p>删除数据</p>\n<p>使用<code>delete</code>方法可以从表中删除记录。</p>\n<pre><code>DB::table('article')-&gt;where('id', 10)-&gt;delete();</code></pre>\n<p>如果我们要清空一张表，将自增长id归0，可以使用<code>truncate</code>方法。</p>\n<pre><code>DB::table('article')-&gt;truncate();\n</code></pre>\n<p>打印sql日志</p>\n<p>有时我们需要调试sql语句，查看最后一次执行的原生的sql语句，可以使用以下方法：</p>\n<pre><code>DB::connection()-&gt;enableQueryLog();\n$list = DB::table('article')-&gt;skip(10)-&gt;take(5)-&gt;get(['id', 'title']);\nprint_r(DB::getQueryLog());\n</code></pre>\n<p>2019-11-17补充：</p>\n<p>事务</p>\n<p>想要在一个数据库事务中运行一连串操作，可以使用 DB 门面的<code>transaction</code> 方法，使用<code>transaction</code>方法时不需要手动回滚或提交：如果事务闭包中抛出异常，事务将会自动回滚；如果闭包执行成功，事务将会自动提交：</p>\n<pre><code>DB::transaction(function () {\n    DB::table('users')-&gt;update(['votes' =&gt; 1]);\n    DB::table('posts')-&gt;delete();\n});\n</code></pre>\n<p>当然我们也可以使用手动控制事务，从而对回滚和提交有更好的控制，可以使用 DB 门面的 <code>beginTransaction</code>方法：</p>\n<pre><code>DB::beginTransaction();\n</code></pre>\n<p>可以通过<code>rollBack</code>方法回滚事务：</p>\n<pre><code>DB::rollBack();</code></pre>\n<p>最后，我们可以通过<code>commit</code>方法提交事务：</p>\n<pre><code>DB::commit();</code></pre>\n<p>小结</p>\n<p>Illuminate database提供的查询构造器可以轻松实现对数据库的操作，能满足我们日常开发需求，当然，在框架中使用的时候更多的使用ORM进行数据操作，后面我们会有文章介绍Illuminate database的ORM功能，彻底摆脱sql语句的束缚。</p>\n</div>\n</div>"}