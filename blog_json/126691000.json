{"blogid": "126691000", "writerAge": "码龄2年", "writerBlogNum": "48", "writerCollect": "41", "writerComment": "26", "writerFan": "45", "writerGrade": "3级", "writerIntegral": "607", "writerName": "手眼通天王水水", "writerProfileAdress": "writer_image\\profile_126691000.jpg", "writerRankTotal": "28640", "writerRankWeekly": "1959", "writerThumb": "80", "writerVisitNum": "6688", "blog_read_count": "201", "blog_time": "已于 2022-09-04 23:01:59 修改", "blog_title": "【项目】扫雷小游戏（C语言）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>【项目】—— 扫雷小游戏（C语言）</p>\n<h1><a id=\"_1\"></a>一、游戏介绍</h1>\n<p>使用C语言实现的一个扫雷小游戏，这里没有美观的鼠标可点触窗口，只有初学者面对的让人心酸的黑框框，以及需要键盘输入坐标的输入模式。</p>\n<p>游戏功能</p>\n<blockquote>\n<ol><li>打开游戏，有一个进入游戏和退出游戏的界面</li><li>进入游戏，展示一个<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          9\n         \n         \n          ×\n         \n         \n          9\n         \n        \n        \n         9\\times9\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">9</span></span></span></span></span>的方格，每个位置都是空格</li><li>玩家开始输入排雷的坐标，如果该位置是雷，则游戏结束，玩家失败</li><li>如果该位置不是雷，则显示周围一圈的8个格子雷的数量，玩家继续输入坐标排雷</li><li>所有非雷位置全部排查时，游戏结束，玩家胜利</li></ol>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_1\">一、游戏介绍</a></li><li><a href=\"#_14\">二、设计思路和结构</a></li><li><ul><li><a href=\"#1__16\">1. 设计思路</a></li><li><a href=\"#2__26\">2. 设计结构</a></li></ul>\n</li><li><a href=\"#_32\">三、相关问题</a></li><li><ul><li><a href=\"#1__34\">1. 如何设置地雷</a></li><li><a href=\"#2__41\">2. 如何计算输入坐标的数字</a></li><li><a href=\"#3__49\">3. 如何判断输赢</a></li></ul>\n</li><li><a href=\"#_55\">四、头文件实现</a></li><li><ul><li><a href=\"#1__57\">1. 引入头文件</a></li><li><a href=\"#2__67\">2. 定义常量</a></li><li><a href=\"#3__78\">3. 函数声明</a></li></ul>\n</li><li><a href=\"#_88\">五、源文件实现</a></li><li><ul><li><a href=\"#1__90\">1. 初始化</a></li><li><a href=\"#2__111\">2. 部署地雷</a></li><li><a href=\"#3__134\">3. 打印展示界面</a></li><li><a href=\"#4__180\">4. 获取该坐标周围雷的数量</a></li><li><a href=\"#5__201\">5. 排查地雷</a></li></ul>\n</li><li><a href=\"#_265\">六、测试文件实现</a></li><li><ul><li><a href=\"#1__269\">1. 游戏菜单</a></li><li><a href=\"#2__286\">2. 运行游戏</a></li><li><a href=\"#3_main_311\">3. main函数</a></li></ul>\n</li><li><a href=\"#_348\">七、完整代码</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_14\"></a>二、设计思路和结构</h1>\n<h2><a id=\"1__16\"></a>1. 设计思路</h2>\n<ol><li>定义一个二维数组作为扫雷的范围，该数组是一个<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         9\n        \n        \n         ×\n        \n        \n         9\n        \n       \n       \n        9\\times9\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">9</span></span></span></span></span>的方格，随机在10个位置上设置10个雷</li><li>再次定义一个二维数组作为展示给用户的界面，该界面是一个<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         9\n        \n        \n         ×\n        \n        \n         9\n        \n       \n       \n        9\\times9\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">9</span></span></span></span></span>的方格，方格中没有字符</li><li>用户每次输入坐标，若是该坐标在扫雷数组上设置地雷，则会在展示界面的该坐标上显示<code>*</code>，并提示游戏结束</li><li>若是该界面上没有地雷，则会计算该坐标周围<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         3\n        \n        \n         ×\n        \n        \n         3\n        \n       \n       \n        3\\times3\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">3</span></span></span></span></span>个方格中有几个地雷，并将数字填入展示界面的方格中，展示给用户</li><li>用户每次输入坐标，对应位置显示出该位置的数字或雷，直到用户踩到地雷或排除所有雷时游戏结束</li></ol>\n<h2><a id=\"2__26\"></a>2. 设计结构</h2>\n<ol><li><code>test.c</code>：测试源文件，含有main函数，是进入程序的入口</li><li><code>game.c</code>：游戏源文件，实现游戏内的函数定义</li><li><code>game.h</code>：游戏头文件，包含源文件需要包含的头文件，实现宏定义，对游戏内的函数进行声名</li></ol>\n<h1><a id=\"_32\"></a>三、相关问题</h1>\n<h2><a id=\"1__34\"></a>1. 如何设置地雷</h2>\n<p>先将二维数组初始化成全0，调用随机函数，生成<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        9\n       \n       \n        ×\n       \n       \n        9\n       \n      \n      \n       9\\times9\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">9</span></span></span></span></span>范围内的坐标，并将该地雷所在坐标置为数字1</p>\n<p><img alt=\"1\" src=\"image\\7ef06d4a32fd4185b062eaf1299e7d5f.png\"/></p>\n<h2><a id=\"2__41\"></a>2. 如何计算输入坐标的数字</h2>\n<ol><li>在扫雷数组的输入坐标周围的<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         3\n        \n        \n         ×\n        \n        \n         3\n        \n       \n       \n        3\\times3\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">3</span></span></span></span></span>位置上含有地雷的数字为1，没有地雷的数字为0，所以将这9个位置中存储的数字加起来就是该位置周围地雷的数量，将该数字以字符形式展示给展示界面即可</li><li>但是扫雷数组最边上一圈的坐标周围并没有<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         3\n        \n        \n         ×\n        \n        \n         3\n        \n       \n       \n        3\\times3\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">3</span></span></span></span></span>范围的数字，若是直接相加则会数组越界，所以我们在上下左右各延展一行或一列，该行或该列不放置地雷</li></ol>\n<p><img alt=\"2\" src=\"image\\0a646587c4ef4fffb5080b93d75afedb.png\"/></p>\n<h2><a id=\"3__49\"></a>3. 如何判断输赢</h2>\n<ol><li>输赢是在用户输入坐标后进行判断，用户每次输入坐标都会有计数器计算用户排过多少雷。</li><li>用户输入坐标，若该位置在扫雷数组中是地雷，则游戏结束，玩家失败</li><li>若是该位置不是地雷，计算周围地雷数量，放置在展示数组的指定坐标中，此时判断未排除的数量是否达到雷的数量，若是达到则游戏结束，玩家胜利。</li></ol>\n<h1><a id=\"_55\"></a>四、头文件实现</h1>\n<h2><a id=\"1__57\"></a>1. 引入头文件</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once\t\t\t</span><span class=\"token comment\">//防止头文件重复包含</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>\t\t</span><span class=\"token comment\">//用于调用随机种子</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span>\t\t</span><span class=\"token comment\">//设置随机种子的参数需要调用该库函数time</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h&gt;</span>\t</span><span class=\"token comment\">//用于执行一些命令行（后面再看）</span>\n</code></pre>\n<h2><a id=\"2__67\"></a>2. 定义常量</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ROW 9\t\t</span><span class=\"token comment\">//设置行</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> COL 9\t\t</span><span class=\"token comment\">//设置列</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> COUNT 10\t</span><span class=\"token comment\">//设置地雷数量</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ROWS ROW+2\t</span><span class=\"token comment\">//扫雷数组实际的行</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> COLS COL+2\t</span><span class=\"token comment\">//扫雷数组实际的列</span>\n</code></pre>\n<h2><a id=\"3__78\"></a>3. 函数声明</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">InitBoard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> board<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cols<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SetMine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> mine<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//部署地雷</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">DisplayBoard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> board<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//打印展示界面</span>\n<span class=\"token keyword\">_Bool</span> <span class=\"token function\">FindMine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> mine<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> show<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//排查地雷</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_mine_count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> mine<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//获取该子周围的雷的数量</span>\n</code></pre>\n<h1><a id=\"_88\"></a>五、源文件实现</h1>\n<h2><a id=\"1__90\"></a>1. 初始化</h2>\n<p>将扫雷数组初始化为0</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">InitBoard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> board<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cols<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cols<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tboard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2__111\"></a>2. 部署地雷</h2>\n<p>在扫雷数组上随机设置地雷为1，为了防止生成坐标重复，使用计数器<code>count</code>记录设置好的地雷数量，若是地雷成功设置才会计数</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SetMine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> mine<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> col <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tmine<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span>\n\t\t\tcount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3__134\"></a>3. 打印展示界面</h2>\n<p>需要打印出9宫格的效果，使用<code>-</code>字符作为行，<code>|</code>字符作为列。先打印一行，再打印<code>row</code>行，最后一行和一列要单独处理</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">DisplayBoard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> board<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>col <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> col<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> k <span class=\"token operator\">||</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">5</span><span class=\"token operator\">+</span>k<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扫雷小游戏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ti <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> col<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4__180\"></a>4. 获取该坐标周围雷的数量</h2>\n<p>将扫雷数组上下左右9个坐标的值加起来就是雷的数量</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">get_mine_count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> mine<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token operator\">+</span> mine<span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token operator\">+</span> mine<span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token operator\">+</span> mine<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token operator\">+</span> mine<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token operator\">+</span> mine<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token operator\">+</span> mine<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token operator\">+</span> mine<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"5__201\"></a>5. 排查地雷</h2>\n<p>输入坐标，并判断是否合法，是否重复，然后判断是否是雷，若都不是，计算该位置周围地雷数量并展示界面，然后判断输赢</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">_Bool</span> <span class=\"token function\">FindMine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> mine<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> show<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//已排查的数量</span>\n\t<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入坐标&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">//判断坐标是否非法</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> x <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;=</span> row<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;=</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//判断坐标是否重复</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//此处是雷</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"很遗憾，你被炸死了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">DisplayBoard</span><span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token comment\">//此处不是雷</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">get_mine_count</span><span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tshow<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>count <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">DisplayBoard</span><span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该位置已被排查\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"坐标输入错误\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//判断输赢</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;=</span> row <span class=\"token operator\">*</span> col <span class=\"token operator\">-</span> COUNT<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"恭喜你，你赢了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">DisplayBoard</span><span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_265\"></a>六、测试文件实现</h1>\n<p>测试文件是用来测试游戏实现，并写有<code>main</code>函数作为启动程序的入口。</p>\n<h2><a id=\"1__269\"></a>1. 游戏菜单</h2>\n<p>只有两个选项，开始游戏和推出游戏</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*********  1. play  ********\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*********  0. exit  ********\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"2__286\"></a>2. 运行游戏</h2>\n<p>将游戏逻辑封装成一个函数，调用该函数就可以完整的启动游戏</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> mine<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">'0'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> show<span class=\"token punctuation\">[</span>ROWS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>COLS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">'0'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//初始化棋盘</span>\n\t<span class=\"token function\">InitBoard</span><span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">,</span> ROWS<span class=\"token punctuation\">,</span> COLS<span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InitBoard</span><span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">,</span> ROWS<span class=\"token punctuation\">,</span> COLS<span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//部署地雷</span>\n\t<span class=\"token function\">SetMine</span><span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">,</span> ROW<span class=\"token punctuation\">,</span> COL<span class=\"token punctuation\">,</span> COUNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//展示棋盘</span>\n\t<span class=\"token function\">DisplayBoard</span><span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">,</span> ROW<span class=\"token punctuation\">,</span> COL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//玩家排雷</span>\n\t<span class=\"token function\">FindMine</span><span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">,</span> show<span class=\"token punctuation\">,</span> ROW<span class=\"token punctuation\">,</span> COL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_main_311\"></a>3. main函数</h2>\n<p>在这里实现菜单和游戏的调用，提供用于开始游戏和结束游戏的选择</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入操作序号&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"欢迎下次光临\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入错误，请重新输入\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">!=</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_348\"></a>七、完整代码</h1>\n<p>代码存储于gitee中：<a href=\"https://gitee.com/whang-shui-shui/test/tree/master/1.C%E8%AF%AD%E8%A8%80/%E6%89%AB%E9%9B%B7\">点击查看完整代码</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}