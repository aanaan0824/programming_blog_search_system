{"blogid": "126743870", "writerAge": "码龄1年", "writerBlogNum": "390", "writerCollect": "125", "writerComment": "11", "writerFan": "5025", "writerGrade": "5级", "writerIntegral": "4036", "writerName": "bp粉", "writerProfileAdress": "writer_image\\profile_126743870.jpg", "writerRankTotal": "4979", "writerRankWeekly": "1744", "writerThumb": "33", "writerVisitNum": "161287", "blog_read_count": "16", "blog_time": "于 2022-09-07 13:32:03 发布", "blog_title": "JVM内存配置参数", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>题目</p>\n<p><strong>对于JVM内存配置参数：</strong></p>\n<p><strong>-Xmx10240m -Xms10240m -Xmn5120m -XXSurvivorRatio=3</strong></p>\n<p><strong>,其最小内存值和Survivor区总大小分别是（）</strong></p>\n<p>A 5120m，1024m</p>\n<p>B 5120m，2048m</p>\n<p>C 10240m，1024m</p>\n<p>D 10240m，2048m</p>\n</blockquote>\n<p>答案解析</p>\n<p>正确答案是：D</p>\n<p>-Xmx：最大堆大小</p>\n<p>-Xms：初始堆大小</p>\n<p>-Xmn: 年轻代大小</p>\n<p>-XXSurvivorRatio=3：代表Eden:Survivor = 3</p>\n<p>根据Generation-Collection算法(目前大部分JVM采用的算法)，一般根据对象的生存周期将堆内存分为若干不同的区域，一般情况将新生代分为Eden ，两块Survivor；</p>\n<p>计算Survivor大小， Eden:Survivor = 3，总大小为5120,3x+x+x=5120 x=1024（Survivor区有两个，即将年轻代分为5份，每个Survivor区占一份），总大小为2048m。</p>\n<blockquote>\n<p>新生代大部分要回收，采用Copying算法，快！</p>\n<p>老年代 大部分不需要回收，采用Mark-Compact算法</p>\n</blockquote>\n<p>-Xms初始堆大小即最小内存值为10240m</p>\n<p>所以正确答案是<strong>D 10240m，2048m</strong></p>\n<p><img alt=\"\" src=\"image\\20190215171405292.png\"/></p>\n<h3><a id=\"_44\"></a>常见配置汇总</h3>\n<p><strong>堆设置</strong></p>\n<p>**-Xms:**初始堆大小，表示java虚拟机堆区内存初始内存分配的大小，通常为操作系统可用内存的1/64大小即可</p>\n<p>**-Xmx:**最大堆大小，表示java虚拟机堆区内存可被分配的最大上限，通常为操作系统可用内存的1/4大小。但是开发过程中，通常会将 -Xms 与 -Xmx两个参数的配置相同的值，其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源。</p>\n<p>一般来讲对于堆区的内存分配只需要对上述两个参数进行合理配置即可。</p>\n<p><strong>-XX:NewSize</strong>=n:设置年轻代大小</p>\n<p><strong>-XX:NewRatio</strong>=n:设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4</p>\n<p><strong>-XX:SurvivorRatio</strong>=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5</p>\n<p><strong>-XX:PermSize</strong>:设置永久区的大小</p>\n<p><strong>-XX:MaxPermSize</strong>=n:设置持久代大小</p>\n<p><strong>-XX:TargetSurvivorRatio</strong>:设置survivior 的使用率。当达到这个空间使用率时，会将对象送入老年代。</p>\n<p><strong>方法区参数配置</strong><br/> <strong>-XX:PermSize</strong>：表示非堆区初始内存分配大小，其缩写为permanent size（持久化内存）<br/> <strong>-XX:MaxPermSize</strong>：表示对非堆区分配的内存的最大上限</p>\n<p><strong>栈的容量配置</strong><br/> <strong>－Xss</strong>：设置线程栈的大小</p>\n<p><strong>本机直接内存设置</strong></p>\n<p><strong>-XX：MaxDirectMemorySize</strong> :指定本机直接内存大小，如果不指定就表示和Java堆最大值(-Xmx)相同</p>\n<p>例如：-Xms128m -Xmx512m -XX:PermSize=128m -XX:MaxPermSize=512m</p>\n<p>上面设置的参数就是堆初始化128M,最大堆内存是512M；方法区初始化分配内存128M,方法区最大上限是512M。</p>\n<p><strong>收集器设置</strong></p>\n<p>-XX:+UseSerialGC:设置串行收集器</p>\n<p>-XX:+UseParallelGC:设置并行收集器</p>\n<p>-XX:+UseParalledlOldGC:设置并行年老代收集器</p>\n<p>-XX:+UseConcMarkSweepGC:设置并发收集器</p>\n<p><strong>垃圾回收统计信息</strong></p>\n<p>-XX:+PrintGC</p>\n<p>-XX:+PrintGCDetails</p>\n<p>-XX:+PrintGCTimeStamps</p>\n<p>-Xloggc:filename</p>\n<p><strong>并行收集器设置</strong></p>\n<p>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。</p>\n<p>-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间</p>\n<p>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)</p>\n<p><strong>并发收集器设置</strong></p>\n<p>-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。</p>\n<p>-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。</p>\n<blockquote>\n<p>**知识补充：**JVM内存区域总体分两类，heap区 和 非heap 区 。</p>\n<p><strong>heap区：</strong> Eden Space（伊甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代-养老区）。</p>\n<p><strong>非heap区：</strong> Code Cache(代码缓存区)、Perm Gen（永久代）、Jvm Stack(java虚拟机栈)、Local Method Statck(本地方法栈)。</p>\n</blockquote>\n<p>转载自：</p>\n<p><a href=\"https://mp.weixin.qq.com/s/0BfG_gVphVfdx6pBcgbgMQ\">https://mp.weixin.qq.com/s/0BfG_gVphVfdx6pBcgbgMQ</a>，https://blog.csdn.net/weixin_40792878/article/details/82154402</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}