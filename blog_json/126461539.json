{"blogid": "126461539", "writerAge": "码龄1年", "writerBlogNum": "134", "writerCollect": "142", "writerComment": "197", "writerFan": "1297", "writerGrade": "5级", "writerIntegral": "1908", "writerName": "从未止步..", "writerProfileAdress": "writer_image\\profile_126461539.jpg", "writerRankTotal": "10359", "writerRankWeekly": "945", "writerThumb": "311", "writerVisitNum": "24493", "blog_read_count": "1086", "blog_time": "已于 2022-09-02 19:57:23 修改", "blog_title": "C语言之预处理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>作者：从未止步…</p>\n<p>博客主页：<a href=\"https://blog.csdn.net/m0_64365419?type=blog\">从未止步的博客…</a></p>\n<p>专栏：和我一起学C</p>\n<p>语录：Every day is a second chance</p>\n<p>行动是理想最高贵的表达 ，给大家介绍一款超牛的斩获大厂offer利器——牛客网</p>\n<p><a href=\"https://www.nowcoder.com/link/pc_csdncpt_cwzb_c\">快来和我一起刷题吧</a></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4491600666d847d2a6cf787a9844a431.jpeg\"/></p>\n<h2><a id=\"_14\"></a>程序的翻译环境和执行环境：</h2>\n<p><strong>在ANSI的任何一种实现中，存在两个不同的环境。</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\be34d4e96e1848d6b9867f4e2cad8a20.png\"/></p>\n<p><strong>第一种是翻译环境，在这个环境中源代码被转换为可执行的机器指令，第二种是执行环境，它用于实际执行代码。</strong></p>\n<p>而程序的编译过程如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fb296d31b463400c9e602cef1b798406.png\"/><strong>组成一个程序的每个源文件通过编译过程分别转换成目标代码。</strong></p>\n<p><strong>每个目标文件由链接器捆绑在一起，形成一个单一而完整的可执行程序。</strong></p>\n<p><strong>链接器同时会引入标准C函数库中任何该程序所用到的函数，而且它可以搜索程序员个人的程序库，将其需要的函数也链接到程序中。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6c941da59af64d8ea121d9815d6aac67.png\"/></p>\n<h2><a id=\"_30\"></a>翻译环境：</h2>\n<p>感兴趣的同学可以去看这篇文章，说的挺详细的哈</p>\n<pre><code class=\"prism language-c\">http<span class=\"token operator\">:</span><span class=\"token comment\">//t.csdn.cn/E0I8x</span>\n</code></pre>\n<h2><a id=\"_37\"></a>运行环境：</h2>\n<h3><a id=\"_39\"></a>程序执行的过程：</h3>\n<p>1：<strong>程序必须载入内存中</strong>，在有操作系统的环境中:一般这个由操作系统完成，在独立的环境中，程序的载入必须由手工安排，也可能是通过可执行代码置入只读内存来完成。</p>\n<p>2：程序的执行就已经开始了，接着是调用main函数。</p>\n<p>3：开始执行程序代码，这个时候程序将使用一个运行时堆栈（stack）,存储函数的局部变量和返回地址，程序同时也可以使用静态（static）内存，存储于静态内存中的变量在程序执行过程一直保留他们的值。</p>\n<p>4：终止程序，正常终止main函数，也有可能是意外终止。</p>\n<h2><a id=\"_49\"></a>预处理：</h2>\n<h3><a id=\"_51\"></a>预定义符号：</h3>\n<p><strong><strong>FILE</strong> //进行编译的源文件</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e0d4d6124dcb40db81495775e51ae0a6.png\"/></p>\n<p><strong><strong>LINE</strong> //文件当前的行号</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7d0c60ede67a45ed9b94868bc8c5ab94.png\"/><br/> 输出如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">5</span>\n\n</code></pre>\n<p><strong><strong>DATE</strong>//文件被编译的日期</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">__DATE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f522172b3ea74c47aa740f3d90aef3a0.png\"/></p>\n<p><strong><strong>TIME</strong>//文件被编译的时间</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">__TIME__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d69f774baffb4d3db82d92da95b7262a.png\"/></p>\n<p><strong><strong>STDC</strong>//如果编译遵循ANSI C，其值为1，否则未定义</strong></p>\n<p>vs编译器下是不支持C语言标准的，因此__STDC__会直接显示未定义。</p>\n<p>但在gcc编译器下是 支持的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ba9fe7591b854120bb6107598e2b4442.png\"/></p>\n<p>那么这些预定义符号到底有什么作用呢？</p>\n<p>事实上，我们可以通过这些符号，将文件的信息写入日志记录下来。</p>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tFILE<span class=\"token operator\">*</span> pf <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"file:%s line:%d date:%s time:%s i=%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">,</span><span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span><span class=\"token constant\">__DATE__</span><span class=\"token punctuation\">,</span><span class=\"token constant\">__TIME__</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写入文件信息</span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当我们打开log.txt文件后，会发现关于程序的一些信息都被写入了log.txt文件，方便以后查阅。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\93b65595a1d34e1d80aa6a2ac5c0f757.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span> <span class=\"token number\">9</span>\n</code></pre>\n<h3><a id=\"_147\"></a>预处理指令：</h3>\n<blockquote>\n<p>#define</p>\n<p>#include</p>\n<p>#pragma pack（4）</p>\n<p>#pragma</p>\n<p>#if</p>\n<p>#endif</p>\n<p>#ifdef</p>\n<p>#line</p>\n</blockquote>\n<p>举例：</p>\n<h4><a id=\"define_167\"></a>#define:定义标识符</h4>\n<blockquote>\n<p>语法：#define name stuff</p>\n</blockquote>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">str1</span> <span class=\"token string\">\"你好\"</span><span class=\"token comment\">//定义字符串</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">number</span> <span class=\"token expression\"><span class=\"token number\">9</span></span><span class=\"token comment\">//定义数字</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出如下：</p>\n<pre><code class=\"prism language-c\">你好 <span class=\"token number\">9</span>\n</code></pre>\n<p>#define不仅可以用来定义数字和字符串，还可以用来定义关键字的别名等等。</p>\n<p>那么#define后面是否要加分号吗？</p>\n<p>举例：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\db2a82ae44584c6cba2dccb732edbb5c.png\"/></p>\n<p>此时编译不会通过，会出现语法错误，但在预处理阶段，我们很难发现代码的问题，只有在进行编译时，将定义的标识符的值进行替换后，编译器才会报错，因此，在以后写代码的过程中，<strong>#define后面不要加分号。</strong></p>\n<h4><a id=\"define_199\"></a>#define：定义宏</h4>\n<p>#define机制包括了一个规定，允许把参数替换到文本中，这种实现通常称为宏（macro）或定义宏（define macro）</p>\n<p>下面是宏的申明方式：</p>\n<p>#define name(parament—list）stuff 其中的parament-list是一个由逗号隔开的符号表，它们可能出现在stuff中。</p>\n<p><strong>注意：参数列表的左括号必须与name紧邻，如果两者之间有任何空白存在，参数列表就会被解释为stuff的一部分。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">number</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> x<span class=\"token operator\">+</span>x <span class=\"token punctuation\">;</span></span><span class=\"token comment\">//x用10替换，实现10+10</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">20</span>\n</code></pre>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">number</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> x<span class=\"token operator\">*</span>x <span class=\"token punctuation\">;</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>按照上面的方式将x替换为5+1，那么x<em>x的值为36，但事实输出结果并不是36，而是11，原因是<strong>宏不是进行传参的，而是进行替换的</strong>，因此实际计算为5+1</em>5+1，输出结果为11</p>\n<p>那么应该怎么杜绝这种情况呢？</p>\n<p><strong>宏修改如下：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">number</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></span></span>\n</code></pre>\n<p>传递过去，计算为（5+1）*(5+1),此时输出结果为36.</p>\n<p>因此对于数值表达式进行求值的宏定义都应该使用注意不要出现由于忘记加括号而出现问题这种情况。</p>\n<h2><a id=\"define_253\"></a>#define替换的规则：</h2>\n<p>在程序扩展#define定义符号和宏时，需要涉及几个步骤：</p>\n<p>1：在调用宏时，首先对参数进行检查，看看是否包含任何由#define定义的符号，如果是，他们首先被替换。</p>\n<p>2：替换文本随后被插入到程序中原来文本的位置，对于宏，参数名被他们的值替换。</p>\n<p>3：再次对结果文件进行扫描，看看它是否包含任何由#define定义的符号，如果是，就重复上述处理过程。</p>\n<h3><a id=\"_262\"></a>注意：</h3>\n<p><strong>1:宏参数和#define定义中可以出现其他#define定义的变量，但是对于宏，不能出现递归。</strong></p>\n<p><strong>2：当预处理器搜索#define定义的符号的时候，字符串常量的内容并不被搜索。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">number</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">numbers</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> ret<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token function\">numbers</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number=%d\\n\"</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字符串常量内容和定义的符号相同。</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>字符串有自动连接的特点。</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"he\"</span> <span class=\"token string\">\"llo\"</span> <span class=\"token string\">\" world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出</p>\n<pre><code class=\"prism language-c\">hello world\n</code></pre>\n<p>如何把参数插入字符串中？</p>\n<p><strong>只有当字符串作为宏参数的时候才可以把字符串放在字符串中。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PRINT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"the value is \"</span><span class=\"token expression\">format</span><span class=\"token string\">\"\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">PRINT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>使用#，把一个宏参数变成对应的字符串。</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PRINT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"the value of \"</span><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">value</span><span class=\"token string\">\" is \"</span><span class=\"token expression\">format</span><span class=\"token string\">\"\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PRINT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-c\">the value of i<span class=\"token operator\">+</span><span class=\"token number\">3</span> is <span class=\"token number\">13</span>\n</code></pre>\n<h2><a id=\"_327\"></a>##的作用：</h2>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">STR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>Y<span class=\"token punctuation\">)</span> X</span><span class=\"token punctuation\">##</span><span class=\"token expression\">Y</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> str1 <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">STR</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//##可以把位于它两边的符号合成一个符号，它允许宏定义从分离的文本片段创建标识符。</span>\n\t<span class=\"token comment\">//printf(\"%d\\n\",STR(str##1);</span>\n\t<span class=\"token comment\">//printf(\"%d\\n\",str1);</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出</p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">90</span>\n</code></pre>\n<p><strong>注：这样的连接必须产生一个合法的标识符，否则其结果就是未定义的。</strong></p>\n<h2><a id=\"_351\"></a>带副作用的宏参数：</h2>\n<p><strong>当宏参数在宏的定义中出现超过一次的时候，如果参数带有副作用，那么在使用这个宏的时候就可能出现危险，副作用即为表达式求值的时候出现的永久性效果。</strong></p>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MAX</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>Y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//将a++和b++直接传递到宏，而不是将其计算结果替换进去：MAX((a++)&gt;(b++)?(a++);(b++)) </span>\n\t<span class=\"token comment\">//MAX((10)&gt;(11)?(a++);(b++))注：后面的b++第一次加一为前面11的b++,而第二次b++是为后面产生比较结果的b++</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//12</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//11</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//13</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<p>产生这种结果的原因即为x++带有副作用，虽然没有直接的体现在参数上，但这种副作用往往会体现在表达式求值中。</p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">12</span>\n<span class=\"token number\">11</span>\n<span class=\"token number\">13</span>\n</code></pre>\n<h2><a id=\"_382\"></a>宏和函数的对比：</h2>\n<p>宏通常被应用于执行简单的运算，比如在两个数中找出较大的一个。</p>\n<blockquote>\n<p>#define MAX（a,b）((a)&gt;(b)?(a):(b))</p>\n</blockquote>\n<p>那么为什么不使用函数来执行这个任务？</p>\n<p>原因有两个：</p>\n<p>1:用于调用函数和从函数返回的代码可能比实际执行这个小型计算机工作所需要的时间更多，所以<strong>宏比函数在程序的规模和速度方面更胜一筹。</strong></p>\n<p>2：更为重要的是函数的参数必须声明为特定的类型，所以函数只能在类型合适的表达式上使用，反之，这个宏既可以适用于整形，长整型，浮点型等可以用于&gt;来比较的类型，<strong>宏是无关类型的。</strong></p>\n<p>当然，宏相比于函数也有劣势的地方：</p>\n<p><strong>1：每次使用宏的时候，一份宏定义的代码将插入到程序中，除非 宏比较短，否则可能大幅度增加程序的程度。</strong></p>\n<p>2：宏是无法进行调试的。</p>\n<p>3：宏由于类型无关，也就不够严谨。</p>\n<p>4：宏可能会带来运算符优先级的问题，导致容易出现错误。</p>\n<p>宏有时候可以做函数做不到的事情，比如：宏的参数可以出现类型，但是函数做不到。</p>\n<h2><a id=\"_407\"></a>命名约定：</h2>\n<p>一般来讲，函数的宏的使用语法很相似，所以语言本身没法帮我们区分二者，那我们平时的一个习惯是：</p>\n<blockquote>\n<p>把宏名全部大写，函数名不要全部大写</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ba468031ad4b402aacab041b299130ec.jpeg\"/><img alt=\"在这里插入图片描述\" src=\"image\\446923fcbe834496b967f0e8da14bfd9.jpeg\"/><img alt=\"在这里插入图片描述\" src=\"image\\4ce160cfe9824c4b9a636f0b67e32227.jpeg\"/><strong>#undef：用于移除一个宏定义。</strong></p>\n<p>如果现存的一个名字需要被重新定义，那么它的旧名字首先要被移除。</p>\n<h2><a id=\"_418\"></a>命令行定义：</h2>\n<p>许多C的编译器提供了一种能力，允许在命令行中定义符号。用于启动编译过程，例如:当我们根据同一个源文件要编译出不同的一个程序的不同版本的时候，这个特性有点用处。（假设某个程序中声明了某个长度的数组，如果机器内存有限，我们需要一个很小的数组，但是另外一个机器内存大写，我们需要一个数组能够大写）。</p>\n<p><strong>编译指令：</strong></p>\n<blockquote>\n<p>gcc -D ARRAY_SIZE programe.c</p>\n</blockquote>\n<h2><a id=\"_425\"></a>条件编译：</h2>\n<p>在编译一个程序的时候，我们如果要将一条语句（一组语句）编译或者放弃是很方便的，可以通过条件编译指令。</p>\n<p>比如：调试性的代码，删除可惜，保留又碍事，那么我们可以对其进行选择性的编译。</p>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">DEBUG</span><span class=\"token comment\">//如果DEBUG在此之前被定义过，那么ifdef和endif之间的语句会被执行，否则不会执行。</span></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上述代码将无任何输出。</p>\n<p>那么如果想输出printf的内容，我们可以定义DEBUG。</p>\n<p>代码修改如下所示：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">DEBUG</span><span class=\"token comment\">//如果DEBUG在此之前被定义过，那么ifdef和endif之间的语句会被执行，否则不会执行。</span></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n</code></pre>\n<h2><a id=\"_476\"></a>常见的条件编译指令：</h2>\n<blockquote>\n<p>1：<br/> #if 常量表达式<br/> //…<br/> #endif<br/> //常量表达式由预处理器求值</p>\n</blockquote>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">1</span></span><span class=\"token comment\">//if 后面的常量表达式为真，下面的printf将会被执行，否则不执行</span></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-c\"><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n</code></pre>\n<p><strong>2:多个分支的条件编译</strong></p>\n<blockquote>\n<p>#if 常量表达式<br/> //…<br/> #elif 常量表达式<br/> //…<br/> #else<br/> //…<br/> #endif</p>\n</blockquote>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">1</span><span class=\"token operator\">==</span><span class=\"token number\">1</span></span><span class=\"token comment\">//当if后面的条件为真，则if后面的语句将会被执行</span></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haha\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//当if后面的语句为假时，则对elif后面的语句进行判断</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token number\">7</span><span class=\"token operator\">==</span><span class=\"token number\">1</span></span></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"heihei\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wiwi\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-c\">haha\n</code></pre>\n<p><strong>3:判断是否被定义</strong></p>\n<blockquote>\n<p><strong>#if defined(symbol)<br/> #ifdef symbol<br/> 上述逻辑反操作如下：<br/> #if !defined(symbol)<br/> #ifndef symbol</strong></p>\n</blockquote>\n<p>举例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token comment\">//当defined（）括号中的标识符被定义过，那么执行if后面的语句，反之不执行</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hehe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时没有输出。</p>\n<p>要想输出printf语句，只需要在程序开头定义DEBUG即可。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n</code></pre>\n<p><strong>注：即使这里的DEBUG被定义为0，但是printf语句依然会输出hehe，因为这里只关心是否定义，而不关心定义的内容。</strong></p>\n<p><strong>4：嵌套指令：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\38a727313fc048bd967bab0ba29c50f4.png\"/></p>\n<p>和if/elif/else的条件编译用法基本相同，这里就是增加了嵌套用法而已。</p>\n<h2><a id=\"_575\"></a>文件包含：</h2>\n<p>通过前面的学习，我们已经知道，#include指令可以使另一个文件被编译，就像它实际出现于#include指令的地方一样，这种替换方式很简单：预处理器先删除这条指令，并用包含文件的内容替换，这样一个源文件被包含10次，那就被编译10次。</p>\n<h3><a id=\"_578\"></a>头文件被包含的方式：</h3>\n<h4><a id=\"_580\"></a>本地文件包含：</h4>\n<blockquote>\n<p>#include“filename”</p>\n</blockquote>\n<p><strong>add.h:</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">ADD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>test.h:</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"add.h\"</span><span class=\"token comment\">//注意引add函数的文件方式不是&lt;&gt;,而是双引号</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">ADD</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret=%d\\n\"</span><span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-c\">ret<span class=\"token operator\">=</span><span class=\"token number\">5</span>\n</code></pre>\n<p>那么什么时候使用&lt;&gt;呢？什么时候使用“”呢？</p>\n<p><strong>如果是本地文件，也就是自己编写的头文件，就使用“”包含。</strong></p>\n<p>查找策略：先在源文件所在目录下查找，如果该头文件为找到，编译器就像查找库函数头文件一样在标准位置查找头文件，如果在找不到，就提示编译错误。</p>\n<p><strong>Linux环境的标准头文件路径：</strong></p>\n<blockquote>\n<p>/usr/include</p>\n</blockquote>\n<p><strong>VS环境的标准头文件的路径：</strong></p>\n<blockquote>\n<p>C：\\program Files(x86)\\Microsoft STudio 9.0\\VC\\include</p>\n</blockquote>\n<p>注意按照自己的安装路径去找。</p>\n<p><strong>库文件包含：</strong></p>\n<blockquote>\n<p>#include&lt;filename.h&gt;</p>\n</blockquote>\n<p>查找头文件直接去标准路径下去查找，如果找不到就提示编译错误。</p>\n<p>那么，我们可以得出一个结论，<strong>无论是我们自己编写的头文件还是库文件，都可以使用&lt;&gt;和双引号的形式，只要注意路径即可。</strong></p>\n<p><strong>但如果库文件也使用双引号包含的形式，这样一来在查找文件的时候效率就会低很多，并且本地文件和库文件也不容易被区分了。</strong></p>\n<h2><a id=\"_635\"></a>嵌套文件包含：</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bc0adbffc86d4011b42be2205d945b71.png\"/><br/> comm.h和comm.c是公共模块，test.h和test1.c使用了公共模块。test2.h和test2.c使用了公共模块，test.c和test.h使用了test1模块和test2模块，这样最终程序中就会出现两份comm.h的内容，这样就造成了文件内容的重复。</p>\n<p>对于这种现象，我们可以通过条件编译来解决。</p>\n<p>每个头文件的开头写：</p>\n<blockquote>\n<p>#ifndef _<em>TEST_H</em><br/> #define _<em>TEST_H</em><br/> //头文件的内容<br/> #endif //_<em>TEST_H</em></p>\n<p>或者#pragma once</p>\n</blockquote>\n<p>这样就可以避免头文件的重复使用。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1335b94842cc4afc81895328641c0995.jpeg\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\2a7b49d4abd7464ab5da6c270735421a.jpeg\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}