{"blogid": "125262877", "writerAge": "码龄10年", "writerBlogNum": "43", "writerCollect": "522", "writerComment": "199", "writerFan": "42", "writerGrade": "5级", "writerIntegral": "2177", "writerName": "流云一号", "writerProfileAdress": "writer_image\\profile_125262877.jpg", "writerRankTotal": "20358", "writerRankWeekly": "64466", "writerThumb": "146", "writerVisitNum": "330561", "blog_read_count": "6613", "blog_time": "于 2022-06-13 16:58:38 发布", "blog_title": "JAVA发送HTTP请求的多种方式总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>        程序员日常工作中，发送http请求特别常见。本文以Java为例，总结发送http请求的多种方式。</p>\n<p>        1. HttpURLConnection<br/>         使用JDK原生提供的net，无需其他jar包，代码如下：</p>\n<pre><code>import com.alibaba.fastjson.JSON;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HttpTest1 {\n\n    public static void main(String[] args) {\n        HttpURLConnection con = null;\n\n        BufferedReader buffer = null;\n        StringBuffer resultBuffer = null;\n\n        try {\n            URL url = new URL(\"http://10.30.10.151:8012/gateway.do\");\n            //得到连接对象\n            con = (HttpURLConnection) url.openConnection();\n            //设置请求类型\n            con.setRequestMethod(\"POST\");\n            //设置Content-Type，此处根据实际情况确定\n            con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            //允许写出\n            con.setDoOutput(true);\n            //允许读入\n            con.setDoInput(true);\n            //不使用缓存\n            con.setUseCaches(false);\n            OutputStream os = con.getOutputStream();\n            Map paraMap = new HashMap();\n            paraMap.put(\"type\", \"wx\");\n            paraMap.put(\"mchid\", \"10101\");\n            //组装入参\n            os.write((\"consumerAppId=test&amp;serviceName=queryMerchantService&amp;params=\" + JSON.toJSONString(paraMap)).getBytes());\n            //得到响应码\n            int responseCode = con.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                //得到响应流\n                InputStream inputStream = con.getInputStream();\n                //将响应流转换成字符串\n                resultBuffer = new StringBuffer();\n                String line;\n                buffer = new BufferedReader(new InputStreamReader(inputStream, \"GBK\"));\n                while ((line = buffer.readLine()) != null) {\n                    resultBuffer.append(line);\n                }\n                System.out.println(\"result:\" + resultBuffer.toString());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<p>        </p>\n<p>        2. HttpClient</p>\n<p>        需要用到commons-httpclient-3.1.jar，maven依赖如下：</p>\n<p></p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;commons-httpclient&lt;/groupId&gt;\n    &lt;artifactId&gt;commons-httpclient&lt;/artifactId&gt;\n    &lt;version&gt;3.1&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p>        代码如下：</p>\n<pre><code>import com.alibaba.fastjson.JSON;\nimport org.apache.commons.httpclient.HttpClient;\nimport org.apache.commons.httpclient.methods.PostMethod;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HttpTest2 {\n\n    public static void main(String[] args) {\n        HttpClient httpClient = new HttpClient();\n        PostMethod postMethod = new PostMethod(\"http://10.30.10.151:8012/gateway.do\");\n\n        postMethod.addRequestHeader(\"accept\", \"*/*\");\n        //设置Content-Type，此处根据实际情况确定\n        postMethod.addRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        //必须设置下面这个Header\n        //添加请求参数\n        Map paraMap = new HashMap();\n        paraMap.put(\"type\", \"wx\");\n        paraMap.put(\"mchid\", \"10101\");\n        postMethod.addParameter(\"consumerAppId\", \"test\");\n        postMethod.addParameter(\"serviceName\", \"queryMerchantService\");\n        postMethod.addParameter(\"params\", JSON.toJSONString(paraMap));\n        String result = \"\";\n        try {\n            int code = httpClient.executeMethod(postMethod);\n            if (code == 200){\n                result = postMethod.getResponseBodyAsString();\n                System.out.println(\"result:\" + result);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<p>        3. CloseableHttpClient<br/>         需要用到httpclient-4.5.6.jar，maven依赖如下： </p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;\n    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;\n    &lt;version&gt;4.5.6&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p>        代码如下：</p>\n<pre><code>import com.alibaba.fastjson.JSON;\nimport org.apache.http.Consts;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class HttpTest3 {\n\n    public static void main(String[] args) {\n        int timeout = 120000;\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n        RequestConfig defaultRequestConfig = RequestConfig.custom().setConnectTimeout(timeout)\n                .setConnectionRequestTimeout(timeout).setSocketTimeout(timeout).build();\n        HttpPost httpPost = null;\n        List&lt;NameValuePair&gt; nvps = null;\n        CloseableHttpResponse responses = null;// 命名冲突，换一个名字，response\n        HttpEntity resEntity = null;\n        String result;\n        try {\n            httpPost = new HttpPost(\"http://10.30.10.151:8012/gateway.do\");\n            httpPost.setConfig(defaultRequestConfig);\n\n            Map paraMap = new HashMap();\n            paraMap.put(\"type\", \"wx\");\n            paraMap.put(\"mchid\", \"10101\");\n            nvps = new ArrayList&lt;NameValuePair&gt;();\n            nvps.add(new BasicNameValuePair(\"consumerAppId\", \"test\"));\n            nvps.add(new BasicNameValuePair(\"serviceName\", \"queryMerchantService\"));\n            nvps.add(new BasicNameValuePair(\"params\", JSON.toJSONString(paraMap)));\n            httpPost.setEntity(new UrlEncodedFormEntity(nvps, Consts.UTF_8));\n\n            responses = httpClient.execute(httpPost);\n            resEntity = responses.getEntity();\n            result = EntityUtils.toString(resEntity, Consts.UTF_8);\n            EntityUtils.consume(resEntity);\n            System.out.println(\"result:\" + result);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                responses.close();\n                httpClient.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}</code></pre>\n<p>         4. okhttp<br/>         需要用到okhttp-3.10.0.jar，maven依赖如下：</p>\n<pre><code>&lt;dependency&gt;\n\t&lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;\n\t&lt;artifactId&gt;okhttp&lt;/artifactId&gt;\n\t&lt;version&gt;3.10.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p>        代码如下：</p>\n<pre><code>import com.alibaba.fastjson.JSON;\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HttpTest4 {\n\n    public static void main(String[] args) throws IOException {\n        String url = \"http://10.30.10.151:8012/gateway.do\";\n        OkHttpClient client = new OkHttpClient();\n        Map paraMap = new HashMap();\n        paraMap.put(\"yybh\", \"1231231\");\n\n        RequestBody requestBody = new MultipartBody.Builder()\n                .addFormDataPart(\"consumerAppId\", \"tst\")\n                .addFormDataPart(\"serviceName\", \"queryCipher\")\n                .addFormDataPart(\"params\", JSON.toJSONString(paraMap))\n                .build();\n\n        Request request = new Request.Builder()\n                .url(url)\n                .post(requestBody)\n                .addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                .build();\n        Response response = client\n                .newCall(request)\n                .execute();\n        if (response.isSuccessful()) {\n            System.out.println(\"result:\" + response.body().string());\n        } else {\n            throw new IOException(\"Unexpected code \" + response);\n        }\n    }\n}</code></pre>\n<p>         5. Socket<br/>         使用JDK原生提供的net，无需其他jar包<br/>         此处参考：https://www.cnblogs.com/hehongtao/p/5276425.html<br/>         代码如下：</p>\n<pre><code>import com.alibaba.fastjson.JSON;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.Socket;\nimport java.net.URLEncoder;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HttpTest6 {\n\n    private static String encoding = \"utf-8\";\n\n    public static void main(String[] args) {\n        try {\n            Map paraMap = new HashMap();\n            paraMap.put(\"yybh\", \"12312311\");\n            String data = URLEncoder.encode(\"consumerAppId\", \"utf-8\") + \"=\" + URLEncoder.encode(\"test\", \"utf-8\") + \"&amp;\" +\n                    URLEncoder.encode(\"serviceName\", \"utf-8\") + \"=\" + URLEncoder.encode(\"queryCipher\", \"utf-8\")\n                    + \"&amp;\" +\n                    URLEncoder.encode(\"params\", \"utf-8\") + \"=\" + URLEncoder.encode(JSON.toJSONString(paraMap), \"utf-8\");\n            Socket s = new Socket(\"10.30.10.151\", 8012);\n            OutputStreamWriter osw = new OutputStreamWriter(s.getOutputStream());\n            StringBuffer sb = new StringBuffer();\n            sb.append(\"POST /gateway.do HTTP/1.1\\r\\n\");\n            sb.append(\"Host: 10.30.10.151:8012\\r\\n\");\n            sb.append(\"Content-Length: \" + data.length() + \"\\r\\n\");\n            sb.append(\"Content-Type: application/x-www-form-urlencoded\\r\\n\");\n            //注，这里很关键。这里一定要一个回车换行，表示消息头完，不然服务器会等待\n            sb.append(\"\\r\\n\");\n            osw.write(sb.toString());\n            osw.write(data);\n            osw.write(\"\\r\\n\");\n            osw.flush();\n\n            //--输出服务器传回的消息的头信息\n            InputStream is = s.getInputStream();\n            String line = null;\n            int contentLength = 0;//服务器发送回来的消息长度\n            // 读取所有服务器发送过来的请求参数头部信息\n            do {\n                line = readLine(is, 0);\n                //如果有Content-Length消息头时取出\n                if (line.startsWith(\"Content-Length\")) {\n                    contentLength = Integer.parseInt(line.split(\":\")[1].trim());\n                }\n                //打印请求部信息\n                System.out.print(line);\n                //如果遇到了一个单独的回车换行，则表示请求头结束\n            } while (!line.equals(\"\\r\\n\"));\n\n            //--输消息的体\n            System.out.print(readLine(is, contentLength));\n\n            //关闭流\n            is.close();\n\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /*\n     * 这里我们自己模拟读取一行，因为如果使用API中的BufferedReader时，它是读取到一个回车换行后\n     * 才返回，否则如果没有读取，则一直阻塞，直接服务器超时自动关闭为止，如果此时还使用BufferedReader\n     * 来读时，因为读到最后一行时，最后一行后不会有回车换行符，所以就会等待。如果使用服务器发送回来的\n     * 消息头里的Content-Length来截取消息体，这样就不会阻塞\n     *\n     * contentLe 参数 如果为0时，表示读头，读时我们还是一行一行的返回；如果不为0，表示读消息体，\n     * 时我们根据消息体的长度来读完消息体后，客户端自动关闭流，这样不用先到服务器超时来关闭。\n     */\n    private static String readLine(InputStream is, int contentLe) throws IOException {\n        ArrayList lineByteList = new ArrayList();\n        byte readByte;\n        int total = 0;\n        if (contentLe != 0) {\n            do {\n                readByte = (byte) is.read();\n                lineByteList.add(Byte.valueOf(readByte));\n                total++;\n            } while (total &lt; contentLe);//消息体读还未读完\n        } else {\n            do {\n                readByte = (byte) is.read();\n                lineByteList.add(Byte.valueOf(readByte));\n            } while (readByte != 10);\n        }\n\n        byte[] tmpByteArr = new byte[lineByteList.size()];\n        for (int i = 0; i &lt; lineByteList.size(); i++) {\n            tmpByteArr[i] = ((Byte) lineByteList.get(i)).byteValue();\n        }\n        lineByteList.clear();\n\n        return new String(tmpByteArr, encoding);\n    }\n}</code></pre>\n<p>        6. RestTemplate<br/>         RestTemplate 是由Spring提供的一个HTTP请求工具。比传统的Apache和HttpCLient便捷许多，能够大大提高客户端的编写效率。代码如下：</p>\n<pre><code>import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.ClientHttpRequestFactory;\nimport org.springframework.http.client.SimpleClientHttpRequestFactory;\nimport org.springframework.web.client.RestTemplate;\n\n@Configuration\npublic class RestTemplateConfig {\n\n    @Bean\n    public RestTemplate restTemplate(ClientHttpRequestFactory factory){\n        return new RestTemplate(factory);\n    }\n\n    @Bean\n    public ClientHttpRequestFactory simpleClientHttpRequestFactory(){\n        SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory();\n        factory.setConnectTimeout(15000);\n        factory.setReadTimeout(5000);\n        return factory;\n    }\n}\n\n\n\n@Autowired\nRestTemplate restTemplate;\n\n@Test\npublic void postTest() throws Exception {\n    MultiValueMap&lt;String, String&gt; requestEntity = new LinkedMultiValueMap&lt;&gt;();\n    Map paraMap = new HashMap();\n    paraMap.put(\"type\", \"wx\");\n    paraMap.put(\"mchid\", \"10101\");\n    requestEntity.add(\"consumerAppId\", \"test\");\n    requestEntity.add(\"serviceName\", \"queryMerchant\");\n    requestEntity.add(\"params\", JSON.toJSONString(paraMap));\n    RestTemplate restTemplate = new RestTemplate();\n    System.out.println(restTemplate.postForObject(\"http://10.30.10.151:8012/gateway.do\",         requestEntity, String.class));\n}</code></pre>\n<p></p>\n</div>\n</div>"}