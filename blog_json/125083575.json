{"blogid": "125083575", "writerAge": "码龄2年", "writerBlogNum": "108", "writerCollect": "231", "writerComment": "7", "writerFan": "28", "writerGrade": "4级", "writerIntegral": "1191", "writerName": "m0_51551385", "writerProfileAdress": "writer_image\\profile_125083575.jpg", "writerRankTotal": "30877", "writerRankWeekly": "282215", "writerThumb": "50", "writerVisitNum": "68825", "blog_read_count": "2491", "blog_time": "于 2022-06-02 18:48:28 发布", "blog_title": "CMake指令解析 set(CMAKE_CXX_FLAGS “$ENV{CXXFLAGS} -rdynamic -O3 -fPIC -ggdb -std=c++11 -Wall -Wno-deprec", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>完整代码</p>\n<pre><code class=\"prism language-bash\">set<span class=\"token punctuation\">(</span>CMAKE_CXX_FLAGS <span class=\"token string\">\"<span class=\"token variable\">$ENV</span>{CXXFLAGS} -rdynamic -O3 -fPIC -ggdb -std=c++11 -Wall -Wno-deprecated -Werror -Wno-unused-function -Wno-builtin-macro-redefined -Wno-deprecated-declarations\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"1CMAKE_CXX_FLAGS_5\"></a>1、<code>CMAKE_CXX_FLAGS</code></h1>\n<p>这种大写的变量，一般都是CMake预定义的内建变量，且他们是全局的。该变量可用于设置编译选项。直接使用<code>set</code>修改其值即可。</p>\n<p>除了修改该变量的值之外，还可以通过<code>add_compile_options</code>命令来设置编译选项。它们的区别是：<br/> <code>add_compile_options</code>命令添加的编译选项是<font color=\"#007FFF\"><strong>针对所有编译器的(包括c和c++编译器)</strong> </font><br/> <code>CMAKE_C_FLAGS</code>或<code>CMAKE_CXX_FLAGS</code>变量则是<font color=\"#238E23\"><strong>分别只针对c和c++编译器</strong> </font></p>\n<h1><a id=\"2ENV_13\"></a>2、<code>$ENV{}</code></h1>\n<p><code>$ENV{}</code>用于获取环境变量设置环境变量的方法是：</p>\n<pre><code class=\"prism language-bash\">set<span class=\"token punctuation\">(</span>ENV<span class=\"token punctuation\">{<!-- --></span>变量名<span class=\"token punctuation\">}</span> 值<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"3CXXFLAGS_18\"></a>3、<code>CXXFLAGS</code></h1>\n<p><code>CXXFLAGS</code>是C++编译器的编译选项。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\253dc48e49e04758aede50a41ad2c4e9.png\"/></p>\n<h1><a id=\"4rdynamic_21\"></a>4、<code>-rdynamic</code></h1>\n<p><code>-rdynamic</code>编译选项通知链接器将所有符号添加到动态符号表中。（目的是能够通过使用 dlopen 来实现向后跟踪）<br/> <a href=\"https://blog.csdn.net/mw_nice/article/details/102620597?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165406630616781435475360%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165406630616781435475360&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-102620597-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=-rdynamic&amp;spm=1018.2226.3001.4187\">gcc选项-g与-rdynamic的异同</a></p>\n<h1><a id=\"5O3_25\"></a>5、<code>-O3</code></h1>\n<p><code>-O3</code>是一个优化选项，告诉编译器优化我们的代码。<br/> <a href=\"https://blog.csdn.net/qq_31108501/article/details/51842166?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165406764516780357253666%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165406764516780357253666&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-51842166-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=-O3%E9%80%89%E9%A1%B9&amp;spm=1018.2226.3001.4187\">gcc -O0 -O1 -O2 -O3 四级优化选项及每级分别做什么优化</a></p>\n<h1><a id=\"6fPIC_28\"></a>6、<code>-fPIC</code></h1>\n<p><code>-fPIC</code> 作用于编译阶段，告诉编译器产生与位置无关代码，即，产生的代码中，没有绝对地址，全部使用相对地址，故而代码可以被加载器加载到内存的任意位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。<br/> <a href=\"https://blog.csdn.net/wind19/article/details/8090394?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165406784316782248566090%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165406784316782248566090&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-8090394-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=-fPIC%E9%80%89%E9%A1%B9&amp;spm=1018.2226.3001.4187\">gcc编译参数-fPIC的一些问题</a></p>\n<h1><a id=\"7ggdb_31\"></a>7、<code>-ggdb</code></h1>\n<p><code>-ggdb</code>选项使编译器生成<code>gdb</code><strong>专用</strong>的更为丰富的调试信息。<br/> <a href=\"https://blog.csdn.net/hansel/article/details/5008700?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165406805516782391873797%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165406805516782391873797&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-5008700-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=-ggdb%E9%80%89%E9%A1%B9&amp;spm=1018.2226.3001.4187\">gcc 的 -g 和 -ggdb 选项</a></p>\n<h1><a id=\"8stdc11_34\"></a>8、<code>-std=c++11</code></h1>\n<p><code>-std=c++11</code>设置为使用C++11标准</p>\n<h1><a id=\"9Wall_36\"></a>9、<code>-Wall</code></h1>\n<p><code>-Wall</code>选项告诉编译器 编译后显示所有警告。<br/> <a href=\"https://blog.csdn.net/m7548352/article/details/49520069?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165406843216782388055358%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165406843216782388055358&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-49520069-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=-Wall%E9%80%89%E9%A1%B9&amp;spm=1018.2226.3001.4187\">gcc中的-w -W和-Wall选项</a></p>\n<h1><a id=\"10Wnodeprecated_39\"></a>10、<code>-Wno-deprecated</code></h1>\n<p>不要警告使用已弃用的功能</p>\n<h1><a id=\"11Werror_42\"></a>11、<code>-Werror</code></h1>\n<p>告诉编译器视所有警告为错误，出现任何警告立即放弃编译</p>\n<h1><a id=\"12Wnounusedfunction_44\"></a>12、<code>-Wno-unused-function</code></h1>\n<p>关闭 函数被定义了但没有被使用 而产生的警告，即，不使用的函数不警告。</p>\n<h1><a id=\"13Wnobuiltinmacroredefined_46\"></a>13、<code>-Wno-builtin-macro-redefined</code></h1>\n<p>如果某些内置宏被重新定义，请不要警告。这抑制了警告的重新定义__TIMESTAMP__，<strong>TIME</strong>，<strong>DATE</strong>，<strong>FILE</strong>，和__BASE_FILE__。</p>\n<h1><a id=\"14Wnodeprecateddeclarations_48\"></a>14、<code>-Wno-deprecated-declarations</code></h1>\n<p>关闭使用废弃API的警告。<br/> <a href=\"https://blog.csdn.net/qq_17308321/article/details/79979514\">gcc警告选项汇总，这篇文章贼全面</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}