{"blogid": "126635597", "writerAge": "码龄2年", "writerBlogNum": "58", "writerCollect": "6738", "writerComment": "5577", "writerFan": "20458", "writerGrade": "7级", "writerIntegral": "11819", "writerName": "小威要向诸佬学习呀", "writerProfileAdress": "writer_image\\profile_126635597.jpg", "writerRankTotal": "915", "writerRankWeekly": "9", "writerThumb": "4557", "writerVisitNum": "232872", "blog_read_count": "538", "blog_time": "于 2022-09-01 08:39:39 发布", "blog_title": "【云原生】微服务的介绍与使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>前言：<br/> 好久没有用到微服务相关的知识了，最近在项目中又遇到了难题，因此又重新学习了一下，以下是根据所看课程做的笔记🎊<br/> 如果文章有什么需要改进的地方还请大佬多多指教🥂<br/> 小威先感谢大家的支持了😁<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/19466b4656e841c085c6ccea20f7e549.gif#pic_center\"/></p>\n<blockquote>\n<p>🏠个人主页：<a href=\"https://blog.csdn.net/qq_53847859?spm=1011.2415.3001.5343\">小威要向诸佬学习呀</a><br/> 🧑个人简介：大家好，我是小威，一个想要与大家共同进步的男人😉😉<br/> 目前状况🎉：目前大二，在一家满意的公司实习👏👏</p>\n<p>🎁如果大佬在准备面试，可以使用我找实习前用的刷题神器哦<a href=\"https://www.nowcoder.com/link/pc_csdncpt_xiaowei_sf\">刷题神器点这里哟</a><br/> 💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p>\n</blockquote>\n<p>牛客部分使用反馈，个人感觉还不错，帮我找到了心仪的公司，希望各位伙伴儿们通过它也能提高不少🥂🥂🥂</p>\n<p>以下正文开始<br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Nacos_19\">Nacos基本概念</a></li><li><a href=\"#Nacos_50\">Nacos的使用</a></li><li><a href=\"#Feign_67\">Feign的基本概念</a></li><li><a href=\"#Feign_75\">Feign服务调用</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"Nacos_19\"></a>Nacos基本概念</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7124ab77551342f390c868aafa2502da.png\"/><br/> Nacos 是阿里巴巴推出来的一个开源项目，是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。<br/> Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速<strong>实现动态服务发现、服务配置、服务元数据及流量管理</strong>。<br/> Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p>\n<p>常见的注册中心：</p>\n<ol><li> <p>Eureka（原生，2.0遇到性能瓶颈，停止维护）</p> </li><li> <p>Zookeeper（支持，专业的独立产品。例如：dubbo）</p> </li><li> <p>Consul（原生，GO语言开发）</p> </li><li> <p>Nacos相对于 Spring Cloud Eureka 来说，Nacos 更强大。Nacos = Spring Cloud Eureka + Spring Cloud Config</p> </li></ol>\n<ul><li> <p>Nacos 可以与 Spring, Spring Boot, Spring Cloud 集成，并能代替 Spring Cloud Eureka, Spring Cloud Config</p> </li><li> <p>通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-discovery 实现服务的注册与发现。</p> </li><li> <p>Nacos是以服务为主要服务对象的中间件，Nacos支持所有主流的服务发现、配置和管理。</p> </li></ul>\n<p>Nacos主要提供以下四大功能：</p>\n<ol><li> <p>服务发现和服务健康监测</p> </li><li> <p>动态配置服务</p> </li><li> <p>动态DNS服务</p> </li><li> <p>服务及其元数据管理<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a1c947ce8c274f9aa8721ff9c0e2aa46.png\"/></p> </li></ol>\n<h1><a id=\"Nacos_50\"></a>Nacos的使用</h1>\n<p>在service模块配置pom<br/> 配置Nacos客户端的pom依赖</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>添加服务配置信息<br/> 配置application.properties，在客户端微服务中添加注册Nacos服务的配置信息：spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848<br/> 添加Nacos客户端注解<br/> 在客户端微服务启动类中添加注解：@EnableDiscoveryClient<br/> 然后，启动客户端微服务，启动注册中心<br/> 启动已注册的微服务，可以在Nacos服务列表中看到被注册的微服务。</p>\n<h1><a id=\"Feign_67\"></a>Feign的基本概念</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b8a6f60677ce427fa058fbe2cb76480a.jpeg\"/></p>\n<ul><li>Feign是Netflix开发的声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API。</li><li>Feign支持多种注解，例如Feign自带的注解或者JAX-RS注解等。</li><li>Spring Cloud对Feign进行了增强，使Feign支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Feign的使用更加方便。</li><li>Spring Cloud Feign是基于Netflix feign实现，整合了Spring Cloud Ribbon和Spring Cloud Hystrix，除了提供这两者的强大功能外，还提供了一种声明式的Web服务客户端定义的方式。</li><li>Spring Cloud Feign帮助我们定义和实现依赖服务接口的定义。在Spring Cloud feign的实现下，只需要创建一个接口并用注解方式配置它，即可完成服务提供方的接口绑定，简化了在使用Spring Cloud Ribbon时自行封装服务调用客户端的开发量。</li></ul>\n<h1><a id=\"Feign_75\"></a>Feign服务调用</h1>\n<p>第一步先在service模块添加pom依赖</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-cloud-starter-openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>接着在调用端的启动类添加注解</p>\n<p>@EnableFeignClients<br/> 创建包和接口<br/> 创建client包<br/> @FeignClient注解用于指定从哪个服务中调用功能 ，名称与被调用的服务名保持一致。<br/> @GetMapping注解用于对被调用的微服务进行地址映射。<br/> @PathVariable注解一定要指定参数名称，否则出错<br/> @Component注解防止，在其他位置注入CodClient时idea报错</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>guli<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"service-vod\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">VodClient</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/eduvod/vod/video/{videoId}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span> <span class=\"token function\">removeVideo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"videoId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> videoId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后开始调用微服务<br/> 在调用端的VideoServiceImpl中调用client中的方法</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeVideoById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//查询id</span>\n    <span class=\"token class-name\">Video</span> video <span class=\"token operator\">=</span> baseMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> videoSourceId <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span><span class=\"token function\">getVideoSourceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//删除视频资源</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>videoSourceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        vodClient<span class=\"token punctuation\">.</span><span class=\"token function\">removeVideo</span><span class=\"token punctuation\">(</span>videoSourceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> baseMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> result <span class=\"token operator\">&amp;&amp;</span> result <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/1320344f9e094379ba313311b49521d5.gif#pic_center\"/></p>\n<blockquote>\n<p>文章到这里就结束了，如果有什么疑问的地方请指出，诸佬们一起讨论🍻<br/> 最后再次给大家安利一波牛客，点击<a href=\"https://www.nowcoder.com/link/pc_csdncpt_xiaowei_sf\">刷题神器</a><br/> 注册牛客，快来和博主一起刷题吧嘿嘿嘿👏 再次感谢各位小伙伴儿们的支持🤞</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5ee09ff91e044d7680f20f51cc521887.jpeg\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}