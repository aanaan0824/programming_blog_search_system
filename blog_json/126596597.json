{"blogid": "126596597", "writerAge": "码龄1年", "writerBlogNum": "36", "writerCollect": "684", "writerComment": "1138", "writerFan": "564", "writerGrade": "5级", "writerIntegral": "3085", "writerName": "东非不开森", "writerProfileAdress": "writer_image\\profile_126596597.jpg", "writerRankTotal": "6317", "writerRankWeekly": "135", "writerThumb": "849", "writerVisitNum": "14454", "blog_read_count": "565", "blog_time": "已于 2022-09-05 21:24:09 修改", "blog_title": "【JS】JavaScript入门笔记第三弹~", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>💭💭:</p>\n<blockquote>\n<p> <br/> 🎬：今天更新js的第三部分！<br/>  <br/> 💟：更新JavaScript这部分的内容，也是我整理笔记整理思路的过程，更是对此内容的一次巩固，如有不足或者错误，还请多多指教哈哈😆😆<br/>  <br/> ☂️：每天进步一点，收获一点，向着好的方向去走，希望我们都可以成为更好的自己💜💜💜<br/>  </p>\n</blockquote>\n<p>前期回顾：<a href=\"https://blog.csdn.net/m0_62159662/article/details/126478541?spm=1001.2014.3001.5501\">JavaScript入门笔记第一弹~</a><br/>      <a href=\"https://blog.csdn.net/m0_62159662/article/details/126537423?spm=1001.2014.3001.5501\">JavaScript入门笔记第二弹~</a></p>\n<p></p>\n<div class=\"toc\">\n<h3>JavaScript</h3>\n<ul><li><ul><li><ul><li><a href=\"#_14\">一、循环</a></li><li><ul><li><a href=\"#11for_16\">1.1.for循环</a></li><li><a href=\"#12for_50\">1.2.双重for循环</a></li><li><a href=\"#13while_83\">1.3.while循环</a></li><li><a href=\"#14do_while__106\">1.4.do while 循环</a></li><li><a href=\"#15continue_129\">1.5.continue</a></li><li><a href=\"#16break_144\">1.6.break</a></li></ul>\n</li><li><a href=\"#js_158\">二、js命名规范</a></li><li><ul><li><a href=\"#21_159\">2.1.标识符命名规范</a></li><li><a href=\"#22_173\">2.2.操作符规范</a></li><li><a href=\"#23_185\">2.3.单行注释规范</a></li></ul>\n</li><li><a href=\"#_196\">三、数组</a></li><li><ul><li><a href=\"#31_197\">3.1.数组简介</a></li><li><a href=\"#32_208\">3.2.创建数组</a></li><li><a href=\"#33_230\">3.3.获取数组中的元素</a></li><li><a href=\"#34_255\">3.4.数组中新增元素</a></li><li><a href=\"#35_280\">3.5.数组长度</a></li><li><a href=\"#36_295\">3.6.数组的常见用法</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"_14\"></a>一、循环</h3>\n<h4><a id=\"11for_16\"></a>1.1.for循环</h4>\n<blockquote>\n<p>在程序中，一组被重复执行的语句被称之为循环体，能否继续重复执行，取决于循环的终止&gt;条件。由循环体及循环的终止条件组成的语句，被称之为循环语句</p>\n</blockquote>\n<p>💡💡执行的过程为</p>\n<ol><li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li><li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li><li>执行操作表达式，此时第一轮结束。</li><li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li><li>继续执行操作表达式，第二轮结束。</li><li>后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。</li></ol>\n<p>结构为：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始化变量<span class=\"token punctuation\">;</span> 条件表达式<span class=\"token punctuation\">;</span> 操作表达式 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//循环体</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>初始化变量：通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</li><li>条件表达式：用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</li><li>操作表达式：每次循环的最后都要执行的表达式。通常被用于更新或者递增计数器变量。当然，递减变量也是可以的</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 打印100次你好</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1. 首先执行里面的计数器变量  var i = 1 </span>\n<span class=\"token comment\">// 2. 去 i &lt;= 100 来判断是否满足条件， 如果满足条件  就去执行 循环体  不满足条件退出循环 </span>\n<span class=\"token comment\">// 3. 最后去执行 i++   i++是单独写的代码 递增  第一轮结束 </span>\n<span class=\"token comment\">// 4. 以此类推</span>\n</code></pre>\n<h4><a id=\"12for_50\"></a>1.2.双重for循环</h4>\n<p>💡💡</p>\n<ul><li>在单层循环满足不了我们的时候我们就要考虑用双层循环，比如说打印九九乘法口诀等</li><li>双层for循环，也可以说是循环嵌套。指在一个循环语句中再定义一个循环语句的语法结构</li><li></li></ul>\n<p>九九乘法表：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6cf038403c294369b9b2c553f61dfdbc.png\"/></p>\n<p>结构：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>外循环的初始<span class=\"token punctuation\">;</span> 外循环的条件<span class=\"token punctuation\">;</span> 外循环的操作表达式<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>内循环的初始<span class=\"token punctuation\">;</span> 内循环的条件<span class=\"token punctuation\">;</span> 内循环的操作表达式<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  \n       需执行的代码<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>内层循环可以看做外层循环的语句</li><li>内层循环执行的顺序也要遵循 for 循环的执行顺序</li><li>外层循环执行一次，内层循环要执行全部次数</li></ul>\n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是外层循环第'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'次'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是里层的循环第'</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">'次'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 执行一次外循环，内循环全部执行一次</span>\n<span class=\"token comment\">// 双层循环一般效率较低</span>\n</code></pre>\n<h4><a id=\"13while_83\"></a>1.3.while循环</h4>\n<blockquote>\n<p>while 语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环</p>\n</blockquote>\n<p>结构：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 循环体代码 </span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>💡💡执行思路：</p>\n<ol><li>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li><li>执行循环体代码</li><li>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li></ol>\n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"14do_while__106\"></a>1.4.do while 循环</h4>\n<p>do… while 语句其实是 while 语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环</p>\n<p>💡💡结构：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>步骤：</p>\n<ol><li>先执行一次循环体代码</li><li>再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码</li></ol>\n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'how are you?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//  do while 先执行一次循环体 在判断条件 如果条件表达式结果为真，则继续执行循环体，否则退出循环</span>\n</code></pre>\n<h4><a id=\"15continue_129\"></a>1.5.continue</h4>\n<p>💡💡<br/> continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// continue 关键字   退出本次（当前次的循环）  继续执行剩余次数循环</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  \t  <span class=\"token comment\">// 只要遇见 continue就退出本次循环 直接跳到 i++</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> \n       <span class=\"token punctuation\">}</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'第'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'个'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"16break_144\"></a>1.6.break</h4>\n<p>💡💡<br/> break 关键字用于立即跳出整个循环（循环结束）。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// break 退出整个循环</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'第'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'个'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"js_158\"></a>二、js命名规范</h3>\n<h4><a id=\"21_159\"></a>2.1.标识符命名规范</h4>\n<ol><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词</li><li>函数的名称一般用动词</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">/</span> 操作符的左右两侧各保留一个空格\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 单行注释前面有个空格</span>\n   <span class=\"token punctuation\">}</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'第'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'个'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"22_173\"></a>2.2.操作符规范</h4>\n<p>💡💡操作符的左右两侧各保留一个空格</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 操作符的左右两侧各保留一个空格</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'第'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'个'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"23_185\"></a>2.3.单行注释规范</h4>\n<p>💡💡单行注释前面有个空格</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 操作符的左右两侧各保留一个空格</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 单行注释前面有个空格</span>\n   <span class=\"token punctuation\">}</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'第'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'个'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_196\"></a>三、数组</h3>\n<h4><a id=\"31_197\"></a>3.1.数组简介</h4>\n<p>💡💡<br/> 数组是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 普通变量一次只能存储一个值</span>\n<span class=\"token keyword\">var</span>  num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 数组一次可以存储多个值</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"32_208\"></a>3.2.创建数组</h4>\n<p>💡💡</p>\n<ol><li>利用 new 创建数组</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> 数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ；\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 创建一个新的空数组</span>\n</code></pre>\n<ol start=\"2\"><li>利用数组字面量创建数组</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//1. 使用数组字面量方式创建空的数组</span>\n<span class=\"token keyword\">var</span>  数组名 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>；\n<span class=\"token comment\">//2. 使用数组字面量方式创建带初始值的数组</span>\n<span class=\"token keyword\">var</span>  数组名 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'小白'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小黑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'大黄'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'瑞奇'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建了一个空的数组</span>\n\n\n</code></pre>\n<h4><a id=\"33_230\"></a>3.3.获取数组中的元素</h4>\n<p>💡💡<br/> 数组可以通过索引来访问、设置、修改对应的数组元素，我们可以通过“数组名[索引]”的形式来获取数组中的元素。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 定义数组</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取数组中的第2个元素</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 获取数组元素  格式 数组名[索引号]  索引号从 0开始</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// arr[0] = 1;</span>\n</code></pre>\n<ul><li>遍历数组：<br/> 遍历数组：就是把数组的元素从头到尾访问一次</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 遍历数组：就是把数组的元素从头到尾访问一次</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"34_255\"></a>3.4.数组中新增元素</h4>\n<p>💡💡</p>\n<ol><li>通过修改 length 长度新增数组元素</li></ol>\n<pre><code class=\"prism language-javascript\"> <span class=\"token comment\">// 1. 新增数组元素 修改length长度 </span>\n        <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把我们数组的长度修改为了 5  里面应该有5个元素 </span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre>\n<p>💡💡<br/> 3. 通过修改数组索引新增数组元素</p>\n<pre><code class=\"prism language-javascript\"> \t\t<span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hotpink'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里是替换原来的数组元素</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"35_280\"></a>3.5.数组长度</h4>\n<p>数组长度 数组名.length,数组的长度是元素个数 不要跟索引号混淆</p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1. 数组的长度是元素个数  不要跟索引号混淆</span>\n<span class=\"token comment\">// 2. arr.length 动态监测数组元素的个数</span>\n</code></pre>\n<h4><a id=\"36_295\"></a>3.6.数组的常见用法</h4>\n<p>💡💡</p>\n<ol><li>翻转数组</li></ol>\n<ul><li>将数组 [‘red’, ‘green’, ‘blue’, ‘pink’, ‘purple’] 的内容反过来存放<br/> 1、声明一个新数组 newArr<br/> 2、把旧数组索引号第4个取过来（arr.length - 1)，给新数组索引号第0个元素 (newArr.length)<br/> 3、我们采取 递减的方式 i–</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'purple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hotpink'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            newArr<span class=\"token punctuation\">[</span>newArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>💡💡<br/> 2. 数组去重</p>\n<ul><li>将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中的 0 去掉后，形成一个不包含 0 的新数组。<br/> 1、需要一个新数组用于存放筛选之后的数据。<br/> 2、遍历原来的数组， 把不是 0 的数据添加到新数组里面(此时要注意采用数组名 + 索引的格式接收数据)。<br/> 3、新数组里面的个数， 用 length 不断累加。</li></ul>\n<pre><code class=\"prism language-javascript\">\n        <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                newArr<span class=\"token punctuation\">[</span>newArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>💡💡<br/> 3. 筛选数组</p>\n<ul><li>将数组 [2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组。<br/> 1、声明一个新的数组用于存放新数据newArr。<br/> 2、遍历原来的旧数组， 找出大于等于 10 的元素。<br/> 3、依次追加给新数组 newArr。</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 1</span>\n <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 新数组索引号应该从0开始 依次递增</span>\n      newArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2</span>\n <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 刚开始 newArr.length 就是 0</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token comment\">// 新数组索引号应该从0开始 依次递增</span>\n newArr<span class=\"token punctuation\">[</span>newArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>持续更新中！💜💜💜</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}