{"blogid": "125353535", "writerAge": "码龄2年", "writerBlogNum": "30", "writerCollect": "1388", "writerComment": "85", "writerFan": "234", "writerGrade": "3级", "writerIntegral": "714", "writerName": "多加点辣也没关系", "writerProfileAdress": "writer_image\\profile_125353535.jpg", "writerRankTotal": "22807", "writerRankWeekly": "23452", "writerThumb": "332", "writerVisitNum": "184038", "blog_read_count": "5542", "blog_time": "已于 2022-06-19 18:04:59 修改", "blog_title": "Swagger-的使用(详细教程)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">前言</a></li><li><a href=\"#_10\">一、简介</a></li><li><a href=\"#_22\">二、基本使用</a></li><li><ul><li><a href=\"#1__24\">1. 导入相关依赖</a></li><li><a href=\"#2__47\">2. 编写配置文件</a></li><li><ul><li><a href=\"#21__66\">2.1 配置基本信息</a></li><li><a href=\"#22__118\">2.2 配置接口信息</a></li><li><a href=\"#23__158\">2.3 配置分组信息</a></li></ul>\n</li><li><a href=\"#3__Swagger__231\">3. 控制 Swagger 的开启</a></li><li><a href=\"#4__281\">4. 常用注解使用</a></li><li><ul><li><a href=\"#ApiModel_295\">@ApiModel</a></li><li><a href=\"#ApiModelProperty_320\">@ApiModelProperty</a></li><li><a href=\"#ApiOperation_340\">@ApiOperation</a></li><li><a href=\"#ApiParam_358\">@ApiParam</a></li></ul>\n</li><li><a href=\"#5__384\">5. 接口调用</a></li></ul>\n</li><li><a href=\"#_407\">三、进阶使用</a></li><li><ul><li><a href=\"#1__408\">1. 添加请求头</a></li></ul>\n</li><li><a href=\"#_472\">四、项目下载</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<p>作为后端开放人员，最烦的事就是自己写接口文档和别人没有写接口文档，不管是前端还是后端开发，多多少少都会被接口文档所折磨，前端会抱怨后端没有及时更新接口文档，而后端又会觉得编写接口文档太过麻烦。Swagger 可以较好的接口接口文档的交互问题，以一套标准的规范定义接口以及相关的信息，就能做到生成各种格式的接口文档，生成多种语言和客户端和服务端的代码，以及在线接口调试页面等等。只需要更新 Swagger 描述文件，就能自动生成接口文档，做到前端、后端联调接口文档的及时性和便利性。</p>\n<h1><a id=\"_10\"></a>一、简介</h1>\n<p>官网：<a href=\"https://swagger.io/\">https://swagger.io/</a></p>\n<p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>\n<p>Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过 Swagger 进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger 消除了调用服务时可能会有的猜测。</p>\n<p><strong>Swagger 的优势</strong></p>\n<ul><li>支持 API 自动生成同步的在线文档：使用 Swagger 后可以直接通过代码生成文档，不再需要自己手动编写接口文档了，对程序员来说非常方便，可以节约写文档的时间去学习新技术。</li><li>提供 Web 页面在线测试 API：光有文档还不够，Swagger 生成的文档还支持在线测试。参数和格式都定好了，直接在界面上输入参数对应的值即可在线测试接口。</li></ul>\n<h1><a id=\"_22\"></a>二、基本使用</h1>\n<h2><a id=\"1__24\"></a>1. 导入相关依赖</h2>\n<p>通过在项目中引入 Springfox，可以扫描相关的代码，生成该描述文件，进而生成与代码一致的接口文档和客户端代码。</p>\n<pre><code class=\"prism language-xml\">        <span class=\"token comment\">&lt;!-- swagger --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>springfox-spring-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>springfox-swagger2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>springfox-swagger-ui<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h2><a id=\"2__47\"></a>2. 编写配置文件</h2>\n<p>在配置文件 <code>config</code> 目录下，添加 swagger 的配置文件 <code>SwaggerConfig.java</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span> <span class=\"token comment\">// 配置类</span>\n<span class=\"token annotation punctuation\">@EnableSwagger2</span> <span class=\"token comment\">// 开启 swagger2 的自动配置</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SwaggerConfig</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这个时候 Swagger 已经算是整合到项目之中了，可以启动下服务，输入：<code>http://localhost:8080/swagger-ui.html#</code> （这里我的项目端口是 8868 ，项目路径是 /mike，所以我打开的文档地址为 <code>http://localhost:8868/mike/swagger-ui.html#</code> ）即可查看 swagger 文档。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d965c0a0bcdd478a99cef5a82738b2ed.png\"/><br/> 可以看到 Swagger 文档中大概有这四类信息</p>\n<ul><li>组</li><li>基本信息</li><li>接口信息</li><li>实体类信息</li></ul>\n<h3><a id=\"21__66\"></a>2.1 配置基本信息</h3>\n<p>Swagger 有自己的实例 Docket，如果我们想要自定义基本信息，可以使用 docket 来配置 swagger 的基本信息，基本信息的设置在 <code>ApiInfo</code> 这个对象中。</p>\n<p>Swagger 默认的基本信息展示</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8ecd7b81fbdb4125b0a1f1532a61349d.png\"/></p>\n<p>ApiInfo 中默认的基本设置</p>\n<ul><li>title：Api Documentation</li><li>description：Api Documentation</li><li>version：1.0</li><li>termsOfServiceUrl：urn:tos</li><li>contact：无</li><li>license：Apache 2.0</li><li>licenseUrl：http://www.apache.org/licenses/LICENSE-2.0</li></ul>\n<p><code>SwaggerConfig.java</code> 配置文件添加以下内容：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Docket</span> <span class=\"token function\">docket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 创建一个 swagger 的 bean 实例</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentationType</span><span class=\"token punctuation\">.</span>SWAGGER_2<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 配置基本信息</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 基本信息设置</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApiInfo</span> <span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Contact</span> contact <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Contact</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"米大傻\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 作者姓名</span>\n                <span class=\"token string\">\"https://blog.csdn.net/xhmico?type=blog\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 作者网址</span>\n                <span class=\"token string\">\"777777777@163.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 作者邮箱</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApiInfoBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"多加辣-接口文档\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 标题</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"众里寻他千百度，慕然回首那人却在灯火阑珊处\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 描述</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">termsOfServiceUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 跳转连接</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 版本</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">license</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Swagger-的使用(详细教程)\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">licenseUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://blog.csdn.net/xhmico/article/details/125353535\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">contact</span><span class=\"token punctuation\">(</span>contact<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>重启服务，打开 Swagger 文档，基本信息改变如下所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8a23ffe7863e4c58bf538b61ab37de2d.png\"/></p>\n<h3><a id=\"22__118\"></a>2.2 配置接口信息</h3>\n<p>默认情况下，Swagger 是会展示所有的接口信息的，包括最基础的 <code>basic-error</code> 相关的接口</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b8f8a6b7a9e54659820599aea8ce4070.png\"/></p>\n<p>有时候我们希望不要展示 <code>basic-error-controller</code> 相关的接口，或者是说这想要显示某些接口，比如说：<code>user-controller</code> 下的接口，由该怎么去实现呢？这个时候就需要设置 <code>扫描接口</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Docket</span> <span class=\"token function\">docket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 创建一个 swagger 的 bean 实例</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentationType</span><span class=\"token punctuation\">.</span>SWAGGER_2<span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\">// 配置接口信息</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置扫描接口</span>\n                <span class=\"token comment\">// 配置如何扫描接口</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">apis</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestHandlerSelectors</span>\n                        <span class=\"token comment\">//.any() // 扫描全部的接口，默认</span>\n                        <span class=\"token comment\">//.none() // 全部不扫描</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">basePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.duojiala.mikeboot.controller\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 扫描指定包下的接口，最为常用</span>\n                        <span class=\"token comment\">//.withClassAnnotation(RestController.class) // 扫描带有指定注解的类下所有接口</span>\n                        <span class=\"token comment\">//.withMethodAnnotation(PostMapping.class) // 扫描带有只当注解的方法接口</span>\n\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">paths</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PathSelectors</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 满足条件的路径，该断言总为true</span>\n                        <span class=\"token comment\">//.none() // 不满足条件的路径，该断言总为false（可用于生成环境屏蔽 swagger）</span>\n                        <span class=\"token comment\">//.ant(\"/user/**\") // 满足字符串表达式路径</span>\n                        <span class=\"token comment\">//.regex(\"\") // 符合正则的路径</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可根据自己的需求去设置对应的配置，这里我就不再一一赘述了，以上是我所设置的配置，重启服务，打开 Swagger 文档，接口信息改变如下所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\454edf96b40a490088cf41f0cc316a41.png\"/></p>\n<p>可以看到之前 <code>basic-error-controller</code> 相关的接口已经没有了</p>\n<h3><a id=\"23__158\"></a>2.3 配置分组信息</h3>\n<p>Swagger 默认只有一个 default 分组选项，如果没有设置，所有的接口都会显示在 <code>default</code> `分组下，如果功能模块和接口数量一多，就会显得比较凌乱，不方便查找和使用。</p>\n<p>swagger 文档中组名默认是 <code>default</code>，可通过 <code>.groupName(String )</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\874aea5c6d794599a459e434be8e9134.png\"/></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Docket</span> <span class=\"token function\">docket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 创建一个 swagger 的 bean 实例</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentationType</span><span class=\"token punctuation\">.</span>SWAGGER_2<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修改组名为 \"mike\"</span>\n                <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>修改后：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\06b5cc26f2c24fb691f275e69bd96f27.png\"/><br/> 如果需要配置多个组的话，就需要配置多个 <code>docket() 方法</code>，这里我就简单写两组，代码如下：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">/**\n     * 展示 controller 包下所有的接口\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Docket</span> <span class=\"token function\">docket1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 创建一个 swagger 的 bean 实例</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentationType</span><span class=\"token punctuation\">.</span>SWAGGER_2<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修改组名为 \"mike\"</span>\n                <span class=\"token comment\">// 配置接口信息</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置扫描接口</span>\n                <span class=\"token comment\">// 配置如何扫描接口</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">apis</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestHandlerSelectors</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">basePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.duojiala.mikeboot.controller\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 扫描指定包下的接口，最为常用</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">paths</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PathSelectors</span>\n                         <span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 满足条件的路径，该断言总为true</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 展示路径为 /error 的所有接口（基础接口）\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Docket</span> <span class=\"token function\">docket2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 创建一个 swagger 的 bean 实例</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentationType</span><span class=\"token punctuation\">.</span>SWAGGER_2<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yank\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修改组名为 \"yank\"</span>\n                <span class=\"token comment\">// 配置接口信息</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置扫描接口</span>\n                <span class=\"token comment\">// 配置如何扫描接口</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">apis</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestHandlerSelectors</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 扫描全部的接口，默认</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">paths</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PathSelectors</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">ant</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/error\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 满足字符串表达式路径</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>重启服务，打开 Swagger 文档，接口信息改变如下所示：</p>\n<p>组名为 <code>mike</code> 的文档中只有 <code>user-controller</code> 相关的接口信息</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c87eb2d8a25943b1b29645b1c2fcdc83.png\"/></p>\n<p>组名为 <code>yank</code> 的文档中只有 <code>basic-error-controller</code> 相关的接口信息</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\00b106b8bc2d42f5a636843aab01fb2e.png\"/></p>\n<hr/>\n<h2><a id=\"3__Swagger__231\"></a>3. 控制 Swagger 的开启</h2>\n<p>在开发或者测试环境下，我们开启 swagger 会方便前端和后端的交互，但是如果在生产环境下也开启 swagger 的话，是会将接口暴露出去的，有极大风险，如何让 swagger 根据不同的环境来决定是否开启？</p>\n<p>这里我准备了四个项目的配置文件，<code>dev</code>、<code>test</code>、<code>pro</code> 三个环境的配置文件仅是端口上的不同</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6b7c4a2fabbc498ba3cbea4d3d6b2c47.png\"/></p>\n<ul><li>application.yml -------------------------- 全局配置文件</li><li>application-dev.yml -------------------- 开发环境配置文件</li><li>application-test.yml -------------------- 测试环境配置文件</li><li>application-pro.yml -------------------- 生产环境配置文件</li></ul>\n<p><code>application.yml</code> 内容如下，用于指定选择的环境：</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> dev\n</code></pre>\n<p>可以通过代码判断此时是在什么环境：<code>dev</code>、<code>test</code>、<code>pro</code>，如果是在 <code>pro</code> 生产环境，则关闭 swagger。</p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">/**\n     * swagger 配置\n     * @param environment 环境\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Docket</span> <span class=\"token function\">docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Environment</span> environment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">// 设置环境范围</span>\n        <span class=\"token class-name\">Profiles</span> profiles <span class=\"token operator\">=</span> <span class=\"token class-name\">Profiles</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果在该环境返回内则返回：true，反之返回 false</span>\n        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> environment<span class=\"token punctuation\">.</span><span class=\"token function\">acceptsProfiles</span><span class=\"token punctuation\">(</span>profiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 创建一个 swagger 的 bean 实例</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentationType</span><span class=\"token punctuation\">.</span>SWAGGER_2<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 是否开启 swagger：true -&gt; 开启，false -&gt; 关闭</span>\n                <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在 <code>application.yml</code> 全局配置文件中环境指向 <code>dev</code> 时，是可以打开 swagger 的</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\43a6b878984d4ba2b8a9d903a7103eef.png\"/><br/> 如果我将 <code>application.yml</code> 全局配置文件中环境指向 <code>pro</code> 时，就不能打开 swagger 了，提示 <code>Could not render e, see the console</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\138b1db9041d4f0a949dd3c95e956920.png\"/></p>\n<h2><a id=\"4__281\"></a>4. 常用注解使用</h2>\n<p>之前有说 Swagger 会将接口请求或者相应的实体类信息展示在 <code>Models</code> 下的，比如我 <code>UserController.java</code> 下有一个接口如下所示：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/query-user-info\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseBean</span> <span class=\"token function\">queryUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token annotation punctuation\">@Validated</span> <span class=\"token class-name\">IdReq</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">queryUserInfo</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>它的请求体是 <code>IdReq</code>，响应是 <code>ResponseBean</code>，<code>Models</code> 展示这两个实体类信息如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6befd4da7498411d89220e9548aafd24.png\"/><br/> 前端可通过看这个 <code>Models</code> 知道后端定义实体类的信息。</p>\n<h3><a id=\"ApiModel_295\"></a>@ApiModel</h3>\n<p>该注解是作用于类上面的，是用来描述类的一些基本信息的。</p>\n<p>相关属性：</p>\n<ul><li><code>value</code>：提供类的一个备用名，如果不设置，默认情况下将使用 class 类的名称</li><li>description：对于类，提供一个详细的描述信息</li><li>parent：这个属性用于描述的是类的一些父类信息</li><li>discriminator：这个属性解释起来比较麻烦，因为这个类主要体现在断言当中</li><li>subTypes：可以通过这个属性，指定我们想要使用的子类</li></ul>\n<p>譬如：这个为给 <code>IdReq</code> 这个类添加该注解</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ApiModel</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Id请求体\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IdReq</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\de46611c80f141bc82dae4535abfab70.png\"/><br/> 可以看到这里的名字从 <code>IdReq </code> 变成 <code>Id请求体</code> 了</p>\n<h3><a id=\"ApiModelProperty_320\"></a>@ApiModelProperty</h3>\n<p>它的作用是添加和操作属性模块的数据。</p>\n<p>该注解的使用详情可参见博客：<a href=\"https://blog.csdn.net/weixin_44356055/article/details/109451892\">@ApiModelProperty注解的用法</a></p>\n<p>这里我还是以 <code>IdReq</code> 类为例，为该类的属性添加说明</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ApiModel</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Id请求体\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IdReq</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@ApiModelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主键id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8568c00c30cb44c4ab523fafd2b16ae7.png\"/><br/> 可以看到这里对该字段有一个备注说明。</p>\n<h3><a id=\"ApiOperation_340\"></a>@ApiOperation</h3>\n<p>该注解用来对某个方法/接口进行描述</p>\n<p>该注解的使用详情可参见博客：<a href=\"https://www.hxstrive.com/article/959.htm\">Swagger @ApiOperation 注解详解</a></p>\n<p>这里我以 <code>UserController</code> 下的接口为例：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/query-user-info\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ApiOperation</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"根据id查询用户详情\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseBean</span> <span class=\"token function\">queryUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token annotation punctuation\">@Validated</span> <span class=\"token class-name\">IdReq</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">queryUserInfo</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\129a4c5d520e453da1c4790d64a8b207.png\"/><br/> 可以看见该接口就多了对其的描述信息。</p>\n<h3><a id=\"ApiParam_358\"></a>@ApiParam</h3>\n<p>该注解使用在方法上或者参数上，字段说明，表示对参数的添加元数据（说明或者是否必填等）</p>\n<p>相关属性：</p>\n<ul><li>name：参数名</li><li>value：参数说明</li><li>required：是否必填</li></ul>\n<p>这里我以 <code>UserController</code> 下的接口为例：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/query-user-infos\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ApiOperation</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"条件查询用户信息\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseBean</span> <span class=\"token function\">queryUserInfos</span><span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// name 用户名称 不必填</span>\n            <span class=\"token annotation punctuation\">@ApiParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"用户名称\"</span><span class=\"token punctuation\">,</span> required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// gender 用户性别 必填</span>\n            <span class=\"token annotation punctuation\">@ApiParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"用户性别\"</span><span class=\"token punctuation\">,</span> required <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">GenderEnum</span> gender\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">queryUserInfos</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\82fae1a1b8514588ac83d102fab39f25.png\"/><br/> 这里会展示请求参数的备注信息，以及是否必填等。</p>\n<h2><a id=\"5__384\"></a>5. 接口调用</h2>\n<p>使用 swagger 除了让前后端交互变得方便，也让接口的请求变得简单，只需要填写好请求所需要的参数信息，便可直接发起请求。</p>\n<p>比如说接口 <code>/user/query-user-info</code></p>\n<p>点击 <code>Try it out</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e96bf4ae28814856bbb9855d991bfe1a.png\"/><br/> 设置好请求所需的参数，点击 <code>Execute</code> 执行</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5b57eef70c8c4d4a846cea69d82bc776.png\"/></p>\n<p>就能看到接口响应的结果了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\051779175e5f4199b7dcc5e222a261e6.png\"/></p>\n<p>接口 <code>/user/query-user-infos</code> 也差不多</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e33756b5d1b54782aca530babf3822cc.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a013f81a6dd64994909bd4c16c31063d.png\"/></p>\n<hr/>\n<h1><a id=\"_407\"></a>三、进阶使用</h1>\n<h2><a id=\"1__408\"></a>1. 添加请求头</h2>\n<p>有时候我们的接口是需要获取请求头信息的，这样的话就还需要在 swagger 配置中添加请求头的配置。</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Docket</span> <span class=\"token function\">docket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 设置请求头</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parameter</span><span class=\"token punctuation\">&gt;</span></span> parameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        parameters<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ParameterBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 字段名</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 描述</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">modelRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 数据类型</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">parameterType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"header\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 参数类型</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">defaultValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default value\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 默认值：可自己设置</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">hidden</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 是否隐藏</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 是否必须</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 创建一个 swagger 的 bean 实例</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentationType</span><span class=\"token punctuation\">.</span>SWAGGER_2<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修改组名为 \"mike\"</span>\n                <span class=\"token comment\">// 配置接口信息</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置扫描接口</span>\n                <span class=\"token comment\">// 配置如何扫描接口</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">apis</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestHandlerSelectors</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">basePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.duojiala.mikeboot.controller\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 扫描指定包下的接口，最为常用</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">paths</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PathSelectors</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 满足条件的路径，该断言总为true</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\">// 添加请求头参数</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">globalOperationParameters</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>比如接口：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/get-token\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ApiOperation</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"获取请求头中的token信息\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span>\n            <span class=\"token annotation punctuation\">@RequestHeader</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> token\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 直接获取 token 信息</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token = \"</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 通过代码获取</span>\n        <span class=\"token class-name\">ServletRequestAttributes</span> servletRequestAttributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestAttributes</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">RequestContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequestAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>servletRequestAttributes <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> servletRequestAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> header <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"header = \"</span> <span class=\"token operator\">+</span> header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ba3332f9c2124c519d1e827b50b8d13a.png\"/><br/> 可以看到这个接口已经可以去设置请求头了，调用接口</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0c485d2e5c3541eb9e63c8d87639e911.png\"/><br/> 后端也能获取到。</p>\n<h1><a id=\"_472\"></a>四、项目下载</h1>\n<p>以下是我这个项目所编写的代码<br/> 链接：<a href=\"https://pan.baidu.com/s/1qbURCzYpL0mX5z1tjzZJUQ\">百度网盘</a><br/> 提取码：na2o</p>\n<p>相关博客：<br/> <a href=\"https://blog.csdn.net/xhmico/article/details/123491109\">SpringBoot - 快速搭建</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}