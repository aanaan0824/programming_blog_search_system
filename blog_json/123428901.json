{"blogid": "123428901", "writerAge": "码龄5年", "writerBlogNum": "42", "writerCollect": "168", "writerComment": "1", "writerFan": "10", "writerGrade": "3级", "writerIntegral": "447", "writerName": "森火123", "writerProfileAdress": "writer_image\\profile_123428901.jpg", "writerRankTotal": "96972", "writerRankWeekly": "364283", "writerThumb": "24", "writerVisitNum": "32246", "blog_read_count": "16555", "blog_time": "已于 2022-07-01 18:53:45 修改", "blog_title": "idea快捷键最全最新最好", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3>持续更新</h3>\n<h3>常用快捷键</h3>\n<ol><li> <p>返回最顶头： home</p> </li><li> <p>返回最末尾：end</p> </li><li> <p>Alt+Insert  可以新建类，文件，get或set方法，此快捷键又名创造一切</p> </li><li> <p>编辑区和文件区的跳转。                                                                                                          </p> <p>alt + 1 ：编辑区跳转至文件区</p> <p>esc：文件区跳转回到编辑区</p> </li><li> <p>关闭当前打开的类：Ctrl+F4</p> </li><li> <p>文件跳转                                                                                                                                   </p> <p>        “alt + →” 表示跳转到下一个文件，</p> <p>        “alt + ←” 表示跳转到上一个文件。</p> </li><li> <p>快速打开设置：ctrl+alt+s</p> </li><li> <p>鼠标右键 空白键的右边目录或者fn+ctrl</p> </li><li> <p>关闭窗口alt+F4</p> </li><li> <p>定位下一个错误: F2 定位上一个错误: Shift + F2</p> </li><li> <p>解决异常alt+enter</p> </li><li> <p>环绕方式 ctrl+alt+t，if,for,try catch,synchronize,runnable</p> </li><li> <p>进入指定方法 ctrl+alt+b</p> </li><li> <p>在一个有接口和实现类的代码中，查看该方法的接口 ctrl+b</p> </li><li> <p>查看源码F4</p> </li><li> <p>选择某个类文件的代码运行：Ctrl+shift+F10</p> </li><li> <p>运行当前类代码：shift+F10</p> </li><li> <p>断点调试：shift+F9</p> </li><li> <p>代码块注释：选中要注释的代码块，按下组合键。Ctrl+Shift+/ </p> </li><li> <p>快速生成输出语句包含输出对象：list.size().sout  回车后结果为 System.out.println(list.size());</p> </li><li> <p>查看父类下面有哪些子类：Ctrl+h</p> </li><li> <p>查看类中的方法列表：Ctrl+F12</p> </li><li> <p>隐藏一段代码：1、选中一段代码块  2、Ctrl+点 </p> </li><li> <p>格式化代码：选中要格式化代码段，按下 Ctrl+Alt+L</p> </li><li> <p>查看某个方法的传参类型： Ctrl+p</p> </li><li> <p>查看某个方法的返回类型：ctrl＋q</p> </li><li> <p>查看类在项目中的位置：可以先使用alt+F1，弹出Select in视图，然后选择Project View中的Project，回车，就可以立刻定位到类的位置了。</p> </li><li> <p>自动补全当前语句的分号：Ctrl + Shift + Enter</p> </li><li> <p>foreach快捷键：iter</p> </li><li> <p>输出包含遍历对象的foreach快捷键：遍历对象.for +回车</p> </li><li> <p>模糊方法名称查找到方法：你依稀记得某个方法名字几个字母，想在IDEA里面找出来，可以怎么做呢？ 直接使用ctrl+shift+alt+n，然后输入记住的方法名称的几个字母。通过方法名查到类：你记得某个业务类里面有某个方法，那也可以使用首字母找到类,然后加个.，再输入方法名字也是可以的。</p> </li><li> <p>查找目录：使用ctrl+shift+n后，使用/，然后输入目录名字即可。</p> </li><li> <p>隐藏代码选中的代码块：当编写的代码很多时候，看上去不够简洁，不能直观看出代码的逻辑关系，为了能够清晰的看出代码之间的逻辑关系，可以将方法的实现代码隐藏，只留下每个方法名称，这样整个页面的代码业务逻辑看上去只有几个方法名称，代码之间的业务关系就非常的简单直观了。</p> </li><li> <p>隐藏单个方法：在方法名称上点击，按下组合键Ctrl -，反之则展开 Ctrl+ </p> </li><li> <p>隐藏类中所有方法：Ctrl Shift - ，反之则展开 Ctrl Shift +</p> </li><li> <p>查看某个类的体系关系：在要查看的类上右击---Diagram--showDiagram</p> </li><li> <p>在Diagram视图中查看某类的源代码：选中某个类或接口右击选择 Jump to Source</p> </li><li> <p>右键 fn+ctrl</p> </li></ol>\n<p></p>\n<p><img alt=\"\" height=\"895\" src=\"image\\45bf1fba84644c208a7c8fb0b28838cf.png\" width=\"1200\"/></p>\n<p></p>\n<p></p>\n<p></p>\n<p>1.自动代码对齐： ctrl+alt+l(file-&gt;settings-&gt;keymap-&gt;搜索format自动设置快捷键)</p>\n<p>2.IDEA返回上一步，下一步：ctrl+alt+左 回到上一步 ctrl+alt+右 回到下一步</p>\n<p>3.改变编码file-settings-File Encodings</p>\n<p>6.导包 alt + enter：或者通过设置，自动导包</p>\n<p>9.查找接口的实现类：IDEA 风格 ctrl + alt +B</p>\n<p>10.在按F2查看详细文档注解</p>\n<p>11.查看类或接口的继承关系：ctrl + h</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\960fa17df8e7fc818ac5f2c2488163b3.png\"/></p>\n<p></p>\n<p></p>\n<p>调试功能</p>\n<p>9.调试的时候查看参数内容alt+F8</p>\n<p>10.IDEA文件查找功能（ctrl+shift+N）弹出的Enter file name.进入文件对应的类</p>\n<p>install调过test安装</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\4e109f1ad94d60cb5ceae8438613c6d6.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\fd2a5050aa16c249fc41e5053c35a85e.png\"/></p>\n<p></p>\n<p>Alt+回车 导入包,自动修正</p>\n<p>Ctrl+N  查找类</p>\n<p>Ctrl+Shift+N 查找文件</p>\n<p>Ctrl+Alt+O 优化导入的类和包</p>\n<p>Ctrl+E或者Alt+Shift+C  最近更改的代码</p>\n<p>Ctrl+R 替换文本</p>\n<p>Ctrl+F 查找文本</p>\n<p>Ctrl+Shift+Space 自动补全代码</p>\n<p>Ctrl+空格 代码提示</p>\n<p>Ctrl+Alt+Space 类名或接口名提示</p>\n<p>Ctrl+P 方法参数提示</p>\n<p>Ctrl+Shift+Alt+N 查找类中的方法或变量</p>\n<p>Alt+Shift+C 对比最近修改的代码</p>\n<p></p>\n<p>Shift+F6  重构-重命名</p>\n<p>Ctrl+Shift+先上键</p>\n<p>Ctrl+X 删除行</p>\n<p>Ctrl+D 复制行</p>\n<p>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/*...*/ ）</p>\n<p>Ctrl+J  自动代码</p>\n<p>Ctrl+E 最近打开的文件</p>\n<p>Ctrl+H 显示类结构图</p>\n<p>Ctrl+Q 显示注释文档</p>\n<p>Alt+F1 查找代码所在位置</p>\n<p>Alt+1 快速打开或隐藏工程面板</p>\n<p>Ctrl+Alt+ left/right 返回至上次浏览的位置</p>\n<p>Alt+ left/right 切换代码视图</p>\n<p>Alt+ Up/Down 在方法间快速移动定位</p>\n<p>Ctrl+Shift+Up/Down 代码向上/下移动。</p>\n<p>F2 或Shift+F2 高亮错误或警告快速定位</p>\n<p></p>\n<p>代码标签输入完成后，按Tab，生成代码。</p>\n<p>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。</p>\n<p>Ctrl+W 选中代码，连续按会有其他效果</p>\n<p>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。</p>\n<p>Ctrl+Up/Down 光标跳转到第一行或最后一行下</p>\n<p>Ctrl+B 快速打开光标处的类或方法</p>\n<p>最常用快捷键</p>\n<p>1.Ctrl＋E，可以显示最近编辑的文件列表</p>\n<p>2.Shift＋Click可以关闭文件</p>\n<p>3.Ctrl＋[或]可以跳到大括号的开头结尾</p>\n<p>4.Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方</p>\n<p>5.Ctrl＋F12，可以显示当前文件的结构</p>\n<p>6.Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择</p>\n<p>7.Ctrl＋N，可以快速打开类</p>\n<p>8.Ctrl＋Shift＋N，可以快速打开文件</p>\n<p>9.Alt＋Q可以看到当前方法的声明</p>\n<p>10.Ctrl＋W可以选择单词继而语句继而行继而函数</p>\n<p>11.Alt＋F1可以将正在编辑的元素在各个面板中定位</p>\n<p>12.Ctrl＋P，可以显示参数信息</p>\n<p>13.Ctrl＋Shift＋Insert可以选择剪贴板内容并插入</p>\n<p>14.Alt＋Insert可以生成构造器/Getter/Setter等</p>\n<p>15.Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量</p>\n<p>16.Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch</p>\n<p>17.Alt＋Up and Alt＋Down可在方法间快速移动</p>\n<p>下面的不是很有用</p>\n<p>18.在一些地方按Alt＋Enter可以得到一些Intention Action，例如将”==”改为”equals()”</p>\n<p>19.Ctrl＋Shift＋Alt＋N可以快速打开符号</p>\n<p>20.Ctrl＋Shift＋Space在很多时候都能够给出Smart提示</p>\n<p>21.Alt＋F3可以快速寻找</p>\n<p>22.Ctrl＋/和Ctrl＋Shift＋/可以注释代码</p>\n<p>23.Ctrl＋Alt＋B可以跳转到抽象方法的实现</p>\n<p>24.Ctrl＋O可以选择父类的方法进行重写</p>\n<p>25.Ctrl＋Q可以看JavaDoc</p>\n<p>26.Ctrl＋Alt＋Space是类名自动完成</p>\n<p>27.快速打开类/文件/符号时，可以使用通配符，也可以使用缩写</p>\n<p>28.Live Templates! Ctrl＋J</p>\n<p>29.Ctrl＋Shift＋F7可以高亮当前元素在当前文件中的使用</p>\n<p>30.Ctrl＋Alt＋Up /Ctrl＋Alt＋Down可以快速跳转搜索结果</p>\n<p>31.Ctrl＋Shift＋J可以整合两行</p>\n<p>32.Alt＋F8是计算变量值</p>\n<p></p>\n<h3>IDEA创建JAVA项目</h3>\n<ol><li> <p>第一步</p> </li></ol>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\ebff69eff7a1e9850ce68e7330068e66.png\"/></p>\n<ol><li> <p>第二步</p> </li></ol>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\80750a598e28132d85742da85a4cfd75.png\"/></p>\n<ol><li> <p>第三步不选择</p> </li></ol>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1f39ed62d0b2351f6eeebd1b29371629.png\"/></p>\n<ol><li> <p>ds</p> </li><li> <p>fsd</p> </li><li> <p>fsdf</p> </li></ol>\n<p></p>\n<h3>IDEA创建web项目</h3>\n<ol><li> <p>第一步</p> </li></ol>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d8fe6f4d0f469bf23291a5e7c1d20138.png\"/></p>\n<ol><li> <p>第二步</p> </li></ol>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\0be95142837c0ba0f937037a4e59257d.png\"/></p>\n<ol><li> <p>第三步</p> </li></ol>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d3e204eb58dc216500cd6153d079dc6e.png\"/></p>\n<ol><li> <p>第四步</p> </li></ol>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\2327a7db4456a9d8ce6de5e662b20641.png\"/></p>\n<ol><li> <p>d</p> </li><li> <p>d</p> </li><li> <p>d</p> </li></ol>\n<p></p>\n<h3>tomcat安装配置环境</h3>\n<p>鼠标右键“计算机”，点击“属性”，点击“高级系统设置”，点击“环境变量”，点击“新建”。</p>\n<p>设置变量名“CATALINA_BASE”。然后点击“确定”，再次点击“新建”，在变量名中输入“CATALINA_HOME”，再次点击“确定”，找到系统变量，在变量值里添加“CATALINA_HOME”，然后一直点击“确定”。</p>\n<p>最后打开“运行”输入“cmd”，然后点击“回车”即可。</p>\n<h3>IDEA中下载源码错误</h3>\n<p>修改maven配置文件.xml和仓库</p>\n<p></p>\n<p></p>\n<h3>maven环境安装</h3>\n<p>二、下载与安装</p>\n<p>1. 前往<a href=\"https://maven.apache.org/download.cgi\" title=\"Maven – Download Apache Maven\">Maven – Download Apache Maven</a>下载最新版的Maven程序：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\bd5b0c83a66294b7f6dc69afbbf9d18b.png\"/></p>\n<p>2. 将文件解压到D:\\Program Files\\Apache\\maven目录下:</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\bd5b0c83a66294b7f6dc69afbbf9d18b.png\"/></p>\n<p>3. 新建环境变量MAVEN_HOME，赋值D:\\Program Files\\Apache\\maven</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\e9ef00315668fd37541a20b35544ffe2.png\"/></p>\n<p>4. 编辑环境变量Path，追加%MAVEN_HOME%\\bin\\;</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\64629980a45922a76c92e9afd9ee4674.png\"/></p>\n<p>5. 至此，maven已经完成了安装，我们可以通过DOS命令检查一下我们是否安装成功：</p>\n<p>mvn -v</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d2c105dd7a39a0e477f6035300c84497.png\"/></p>\n<h3>IDEA创建maven项目</h3>\n<p>Maven 的41种骨架：</p>\n<p> ...&gt;mvn archetype:generate</p>\n<p>1: internal -&gt; appfuse-basic-jsf (创建一个基于Hibernate，Spring和JSF的Web应用程序的原型) </p>\n<p>2: internal -&gt; appfuse-basic-spring (创建一个基于Hibernate，Spring和Spring MVC的Web应用程序的原型) </p>\n<p>3: internal -&gt; appfuse-basic-struts (创建一个基于Hibernate，Spring和Struts 2的Web应用程序的原型) </p>\n<p>4: internal -&gt; appfuse-basic-tapestry (创建一个基于Hibernate, Spring 和 Tapestry 4的Web应用程序的原型) </p>\n<p>5: internal -&gt; appfuse-core (创建一个基于 Hibernate and Spring 和 XFire的jar应用程序的原型) </p>\n<p>6: internal -&gt; appfuse-modular-jsf (创建一个基于 Hibernate，Spring和JSF的模块化应用原型) </p>\n<p>7: internal -&gt; appfuse-modular-spring (创建一个基于 Hibernate, Spring 和 Spring MVC 的模块化应用原型) </p>\n<p>8: internal -&gt; appfuse-modular-struts (创建一个基于 Hibernate, Spring 和 Struts 2 的模块化应用原型) </p>\n<p>9: internal -&gt; appfuse-modular-tapestry (创建一个基于 Hibernate, Spring 和 Tapestry 4 的模块化应用原型) </p>\n<p>10: internal -&gt; maven-archetype-j2ee-simple (一个简单的J2EE的Java应用程序) </p>\n<p>11: internal -&gt; maven-archetype-marmalade-mojo (一个Maven的 插件开发项目 using marmalade) </p>\n<p>12: internal -&gt; maven-archetype-mojo (一个Maven的Java插件开发项目) </p>\n<p>13: internal -&gt; maven-archetype-portlet (一个简单的portlet应用程序) </p>\n<p>14: internal -&gt; maven-archetype-profiles () </p>\n<p>15: internal -&gt; maven-archetype-quickstart () </p>\n<p>16: internal -&gt; maven-archetype-site-simple (简单的网站生成项目) </p>\n<p>17: internal -&gt; maven-archetype-site (更复杂的网站项目) </p>\n<p>18: internal -&gt; maven-archetype-webapp (一个简单的Java Web应用程序) </p>\n<p>19: internal -&gt; jini-service-archetype (Archetype for Jini service project creation) </p>\n<p>20: internal -&gt; softeu-archetype-seam (JSF+Facelets+Seam Archetype) </p>\n<p>21: internal -&gt; softeu-archetype-seam-simple (JSF+Facelets+Seam (无残留) 原型) </p>\n<p>22: internal -&gt; softeu-archetype-jsf (JSF+Facelets 原型) </p>\n<p>23: internal -&gt; jpa-maven-archetype (JPA 应用程序) </p>\n<p>24: internal -&gt; spring-osgi-bundle-archetype (Spring-OSGi 原型) </p>\n<p>25: internal -&gt; confluence-plugin-archetype (Atlassian 聚合插件原型) </p>\n<p>26: internal -&gt; jira-plugin-archetype (Atlassian JIRA 插件原型) </p>\n<p>27: internal -&gt; maven-archetype-har (Hibernate 存档) </p>\n<p>28: internal -&gt; maven-archetype-sar (JBoss 服务存档) </p>\n<p>29: internal -&gt; wicket-archetype-quickstart (一个简单的Apache Wicket的项目) </p>\n<p>30: internal -&gt; scala-archetype-simple (一个简单的scala的项目) </p>\n<p>31: internal -&gt; lift-archetype-blank (一个 blank/empty liftweb 项目) </p>\n<p>32: internal -&gt; lift-archetype-basic (基本（liftweb）项目) </p>\n<p>33: internal -&gt; cocoon-22-archetype-block-plain ([http://cocoapacorg2/maven-plugins/]) </p>\n<p>34: internal -&gt; cocoon-22-archetype-block ([http://cocoapacorg2/maven-plugins/]) </p>\n<p>35: internal -&gt; cocoon-22-archetype-webapp ([http://cocoapacorg2/maven-plugins/]) </p>\n<p>36: internal -&gt; myfaces-archetype-helloworld (使用MyFaces的一个简单的原型) </p>\n<p>37: internal -&gt; myfaces-archetype-helloworld-facelets (一个使用MyFaces和Facelets的简单原型) </p>\n<p>38: internal -&gt; myfaces-archetype-trinidad (一个使用MyFaces和Trinidad的简单原型) </p>\n<p>39: internal -&gt; myfaces-archetype-jsfcomponents (一种使用MyFaces创建定制JSF组件的简单的原型) </p>\n<p>40: internal -&gt; gmaven-archetype-basic (Groovy的基本原型) </p>\n<p>41: internal -&gt; gmaven-archetype-mojo (Groovy mojo 原型)</p>\n<p></p>\n<h3>IDEA一个打开多个项目</h3>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\7d1c01636cf4a9a1913bda4d0728b42c.png\"/></p>\n<h3>IDEA切换工作目录</h3>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\05d3563a791063d4e836280e0065ad74.png\"/></p>\n<h3>IDEA导入maven项目</h3>\n<p></p>\n<h3>IDEA搭建maven</h3>\n<p>接下来打开Intellij IDEA环境，点击左上角的File菜单，在下拉菜单中选择Settings选项，如下图所示</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\9d54ab539aad86ed06d0180510e12526.png\"/></p>\n<p>在弹出的Settings界面中，我们在输入框里输入Maven，然后定位的Maven选项，如下图所示</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\7a69f064ce8f2fcfcd8b895795a48818.png\"/></p>\n<p></p>\n<p>接下点击右侧的Maven home directory设置按钮，如下图所示</p>\n<p>接下来点击配置文件右侧的设置按钮，如下图所示，注意一定不要用软件自带的配置文件</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\9f81d5d8c19596f3dc23e6093e07ccc0.png\"/></p>\n<p></p>\n<h3>IDEA没有maven怎么显现</h3>\n<p>方法1.你点击一下你idea界面最左下角的那个小框，maven应该从里面找到</p>\n<p>方法2.点击菜单栏View-&gt;Tool  Windows-&gt;Maven projects </p>\n<p>方法3.点击菜单栏Help-&gt;Find Action(Ctrl+Shift+A),输入Maven projects</p>\n<p></p>\n<p></p>\n<h3>创建SpringBoot项目</h3>\n<p>简介：介绍如何使用IDEA新建springboot工程</p>\n<p>ﬁle--》New--》Project</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\00d22fc59b08e037296f1165523b88a8.png\"/></p>\n<p></p>\n<p>选择Spring   Initializr，选择对应JDK版本之后，点击Next</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\b1d4e9cf63546c9b65cf8532da727db5.png\"/></p>\n<p>填写相应的Group Artifact之后点击【Next】</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\22338e882fbb4588878229270887f6b5.png\"/></p>\n<p></p>\n<p>选择对应的依赖，选中之后在右边有显示</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6aea98e1eb66ed811d3d7a36dff1ac7a.png\"/></p>\n<p><img alt=\"f4eef7200cdc6f0afe82569e5762b5c2.png\" src=\"image\\f4eef7200cdc6f0afe82569e5762b5c2.png\"/></p>\n<p></p>\n<p>填写项目名还有项目存放的地址，之后点击Finish</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\b16f526601e004ef63b93a909791c617.png\"/></p>\n<p>选择另开一个窗口来打开新建的项目</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\160e2c920dbcc15a962fcd7ed8d19ee2.png\"/></p>\n<p>在打开的新窗口中，基于maven     的springboot项目就已经新建完成</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1d1a541f36be23aca18e26c8d1affc59.png\"/></p>\n<p>如果前面选择三个那么</p>\n<p>  </p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1a0a4d27dfb4b50a422e3484535ee89d.png\"/></p>\n<p>编写一个简单的controller进行验证</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\cb04e91ef7078aa78eb98e89c470375d.png\"/></p>\n<p>打开浏览器访问  http://localhost:8080/hello</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\55b7746011fbb71c3c84293fea9ee47d.png\"/></p>\n<p></p>\n<h3>新建maven聚合工程之中大型项目必备</h3>\n<p>简介：介绍如何在IDEA中新建maven聚合工程</p>\n<p>工程简介及划分</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\406c2d1c30923acbc0ee0641e9659698.png\"/></p>\n<p>xdclass-parent      父工程，打包方式pom，管理jar包的版本号。项目中所有工程都应该继承父工程。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\b35cbea3029a1e8555999dee40bfb364.png\"/></p>\n<p>common 通用的工具类</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d3107bc34996b586d29d86a5da097b68.png\"/></p>\n<p>xdclass-manager   小D课堂工程，作为聚合工程</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\cea65e41624109fe8e3ba923f8496a17.png\"/></p>\n<p>xdclass-manager-dao 数据访问层</p>\n<p>xdclass-manager-pojo pojo层</p>\n<p>xdclass-manager-interface 接口定义</p>\n<p>xdclass-manager-service 接口实现</p>\n<p>xdclass-manager-web 表现层</p>\n<p></p>\n<p>首先在IDEA中新建一个空项目  File--》New--》Project</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\28074f7b1d32548c9edc06a33bc438f7.png\"/></p>\n<p>选择Empty Project之后，点击【Next】</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\023b0802da9094bf9b97863bd889529d.png\"/></p>\n<p>输入工程名及存放位置之后，点击Finish</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\ead26ea1b4aae94bd76bca4ccce53b9d.png\"/></p>\n<p>在新的窗口打开</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\58f27b7936372e4be5133c595619dbb8.png\"/></p>\n<p>在新打开的IDEA中，File--》New--》Module</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\45e87471136fb0362dcf5c244190ce35.png\"/></p>\n<p></p>\n<p>选择Maven之后，点击下一步</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\80c87bdc7c06d91fa61588f4daffc488.png\"/></p>\n<p>输入GroupId、ArtifactId、Version之后，点击Next</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\ab0068911d1bc5658c2994f281deec82.png\"/></p>\n<p></p>\n<p>模块新建完成之后如图</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\51303c1f65eac96c234fc5642ff8ff3f.png\"/></p>\n<p></p>\n<p>再次File--》New--》Module</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\45e87471136fb0362dcf5c244190ce35.png\"/></p>\n<p>选择Maven之后，点击下一步</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\80c87bdc7c06d91fa61588f4daffc488.png\"/></p>\n<p>点击①，选择父项目，之后点击ok，同时填写GroupId、ArtifactId，之后点击Next</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\be9f2645185306fa6ae55f0734c0ee2a.png\"/></p>\n<p></p>\n<p>修改下模块名，之后点击Finish</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\19b6014eea79177b90debd493ba99671.png\"/></p>\n<p></p>\n<p>同样的步骤，再创建xdclass-manager模块，创建完成之后如下</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\7380319d94ee64bb8ea7b9792b33b6d8.png\"/></p>\n<p></p>\n<p>右键xdclass-manager--》New--》Module</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\604f0c1f587050803049fe835cb8b475.png\"/></p>\n<p>同样选择Maven之后，再点击下一步</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\424c963138adb8e6652664fc1b1d8f7b.png\"/></p>\n<p>修改父工程，填入ArtifactId之后点击下一步</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6981a23747e6a740bf4bc2d5ddeee40c.png\"/></p>\n<p>修改Module name之后，点击Finish</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\b1698375123350c2cb74eaedf2749af9.png\"/></p>\n<p>同上，再新建xdclass-manager-pojo、xdclass-manager-interface、xdclass-manager-service、xdclass- manager-web，建成之后如下</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\3292d35ee57173998c70e857554c1ca2.png\"/></p>\n<p></p>\n<p>调整工程</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6170b48f277fde64eb5da373ddb47486.png\"/></p>\n<p>删除xdclass-parent工程下的src目录，并在pom文件中加入</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\7954c894b5d01dabae23016fe66ca06b.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6170b48f277fde64eb5da373ddb47486.png\"/></p>\n<p>同样的，删除xdclass-manager下的src目录</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\a07c0051ee23471eb267ab1a5fd9fba7.png\"/></p>\n<p></p>\n<p></p>\n<h3>IDEA中与本地git关联</h3>\n<p>IDEA中与本地git关联</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\90316369d672e8263a91af619fcc3dee.png\"/></p>\n<p>在IDEA中，按ctrl+alt+s，进入设置界面 找到git，我们看到默认自动跟git关联，如果没关联，则自行选择git安装位置下的git.exe文件</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\85cf691b735ac260885a51bbfabe1fb6.png\"/></p>\n<p>点击VCS--》import into version control--》create git repository</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1e668f98836d4b45cb5352a16a6378a6.png\"/></p>\n<p></p>\n<p>选择相应的项目，之后点击ok</p>\n<p>看到项目中文件名出现颜色，此时IDEA已为我们创建了一个git仓库</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d1da193fd1b87612fa855021ed6793c3.png\"/></p>\n<p>按ctrl+k，进行commit 选中要提交的文件，并填写提交信息之后点击Commit</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1655c0adb50e3e2d0c41ca22bc2814b9.png\"/></p>\n<p></p>\n<p>将本地项目提交到github上</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\8510a7161d04f315d622ffb6ae288f8c.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\8348274961c6b0c76914d3e3139133f2.png\"/></p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\fa61e0c1c827dc14c0d39f663386ac46.png\"/></p>\n<p>点击VCS--》Git--》Remotes</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\126f47ae32b7ed34857d86c2ffe56b71.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6170b48f277fde64eb5da373ddb47486.png\"/></p>\n<p>点击加号，添加一个远程仓库的地址</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\40acda5f5c37365de0224080dcf1102c.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6170b48f277fde64eb5da373ddb47486.png\"/></p>\n<p>填入相应的远程仓库地址之后点击OK</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\fa4340169407540cb80cf2f8e8364c7c.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6170b48f277fde64eb5da373ddb47486.png\"/></p>\n<p>按ctrl+shift+k，后点击push</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\df8eabdbcd04053d6cf572e4756fe701.png\"/></p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6170b48f277fde64eb5da373ddb47486.png\"/></p>\n<p>首次提交要输入GitHub的账号密码进行登录</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\b6de1173eed7e5305d69749e10a8f0f8.png\"/></p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6170b48f277fde64eb5da373ddb47486.png\"/></p>\n<p>登录完成之后，看到提交成功的信息，表示已经提交到远程了</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\604cce6ab3adef1be3b95afe6c30134b.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6170b48f277fde64eb5da373ddb47486.png\"/></p>\n<p>打开github，会发现项目代码已经在上面</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\04a52f30d458548272bdc6c0218b4b06.png\"/></p>\n<h3>IDEA中与公司git关联</h3>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d760f0956d689c00887d98a478a658e1.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6464463279ec912fdc8f8261c1321eaa.png\"/></p>\n<p>点击test</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\5718c98a183c8a3829559b0e5bdced2f.png\"/></p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\3ffa8cc5fc771db655fade20b73b6c82.png\"/></p>\n<h3>IDEA上传到码云</h3>\n<ol><li> <p>打开项目并点击菜单栏上的【CVS】--》【Import into version control】--》【Create Git Repository】创建本地仓库。</p> </li><li> <p style=\"text-align:center;\"><img alt=\"\" src=\"image\\2dee3938f48fc73fc83e1836f8336967.png\"/></p> <p>在打开的【Create Git Repository】对话框内选择本地仓库的位置，这里我选择项目的根目录。</p> </li></ol>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\c54cdd41677c62fb1e0966892bb17b06.png\"/></p>\n<p>3.右击项目点击【Git】--》【Add】，接着点击【Git】--》【Commit Directory】在打开的窗口中选择要上传到本地仓库的代码并添加注释后提交到本地仓库内。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\5684035133edc775b564295a57e97f24.png\"/></p>\n<p>4.右击项目点击【Git】--》【Repository】--》【Remotes...】。在打开的【Git Remotes】窗口中添加码云的远程仓库。码云的远程仓库地址可以在码云仓库内找到。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\29ddc8ee7e5da9282cef3f53ff36dc2b.png\"/></p>\n<p>点击【OK】后接5.输入码云的账号密码。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\713deaf5c3b46707879d0a9e0b7cbef1.png\"/></p>\n<p>6.上传代码到码云，右击项目点击【Git】--》【Repository】--》【Push...】在打开的【Push commits】内可以看到已提交到本地仓库的提交信息。点击【Push】按钮将本地仓库的代码上传到码云上，上传成功后就可以在码云上看到啦。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\4c7c8b71af6d2552ec83b611103a6570.png\"/></p>\n<p>7.如果上传时出现：Push rejected: Push to origin/master was rejected  错误。打开你要上传代码的文件夹右键git Bash Here然后直接运行下面的命令解决问题</p>\n<p>git pull </p>\n<p>git pull origin master </p>\n<p>git pull origin master –allow-unrelated-histories</p>\n<p></p>\n<h3>Idea导SpringBootMain方法右键不能run问题</h3>\n<p>使用Idea打开有导入的项目 main 入口的文件，准备启动的时候发现右键并没有 Run 和 Debug。</p>\n<p></p>\n<p>解决方法</p>\n<p>在Idea界面右侧 Maven Projects 工具栏</p>\n<p></p>\n<p>点击上方 “+” ，选择需要启动工程的 pom 文件，点击 ok</p>\n<p></p>\n<p>在右侧栏中就会出现该工程</p>\n<p></p>\n<p>点击展开需要启动的工程 Lifecycle</p>\n<p></p>\n<p>双击 instal 使之编译</p>\n<p>如果还不能运行，就是jdk版本不对。</p>\n<p></p>\n<h3>Idea中导入SpringBoot测试类Main方法右键不能run问题</h3>\n<p>如果新建项目里面src目录下已经就有test目录，那么你就可以跳过以下步骤。如果没有test目录，那么请看下面。首先新建一个test目录，然后在test目录下再建一个java目录，然后鼠标放在java目录上再右击，找到Mark Directory as ---&gt;Test Sources Root，这样生成的才是测试目录。。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\0dfd24801006bf2d487161a30fefaa0f.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1ee13a2b82898610eb0ffd6642d69af7.png\"/></p>\n<p>接着写测试类，要注意目录结构，即测试类的包路径要在SpringBoot入口类的子包中！原因的话自己看SpringBoot的HelloWorld应该是有讲的比较清楚。。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\69e12d2fc50b2e5f6368a89ca02ecb5f.png\"/></p>\n<h3>热部署spring-boot-devtools 实现热部署</h3>\n<p>1.devtools</p>\n<p>　　spring为开发者提供了一个名为spring-boot-devtools的模块来使Spring Boot应用支持热部署，提高开发者的开发效率，无需手动重启Spring Boot应用。</p>\n<p>2.项目搭建</p>\n<p>　　本文是采用IDEA搭建的Spring Boot应用，通过spring-boot-devtools配置，可以支持修改java文件会自动重启程序，一些资源无需触发重启，例如thymeleaf模板文件就可以实时编辑。默认情况下，更改/META-INF/maven，/META-INF/resources ，/resources ，/static ，/public 或/templates下的资源不会触发重启，而是触发livereload。devtools模块包含一个嵌入的livereload服务器，可以在资源变化时用来触发浏览器刷新。浏览器需要在livereload.com下载安装扩展。 例如Chrome浏览器在应用商店安装livereload插件后，在要自动刷新的页面点击对应的图标，启动应用后更新页面内容或者css等都会触发页面自动刷新。</p>\n<p>3.livereload</p>\n<p>　　livereload 通过引入的脚本livereload.js在 livereload 服务和浏览器之间建立了一个 WebSocket 连接。每当监测到文件的变动，livereload 服务就会向浏览器发送一个信号，浏览器收到信号后就刷新页面，实现了实时刷新的效果。每次启动时，需要点击对应的图标，如下图所示。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\3b4e8fd69058705648d33812448f7838.png\"/></p>\n<p>4.项目代码配置</p>\n<p>(1)pom.xml配置文件</p>\n<p></p>\n<p></p>\n<pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n&lt;optional&gt;true&lt;/optional&gt;\n&lt;/dependency&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n&lt;configuration&gt;\n&lt;fork&gt;true&lt;/fork&gt;&lt;!-- 如果没有该配置，devtools不会生效 --&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>\n<p></p>\n<p></p>\n<p>(2)yml配置</p>\n<p></p>\n<pre><code>devtools:\n  livereload:\n    enabled: true #是否支持livereload\n    port: 35729\n  restart:\n    enabled: true #是否支持热部署\n</code></pre>\n<p></p>\n<p></p>\n<p>5.IDEA配置</p>\n<p>(1)File-Settings-Compiler-Build project automatically</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d672773aab9bb2bb6d4b6eef9a4655e5.png\"/></p>\n<p>(2)ctrl + shift + alt + /,选择Registry,勾上 Compiler autoMake allow when app running</p>\n<p>6.安装livereload插件</p>\n<p>下载livereload插件，将其安装到chrome扩展程序中，并选中允许访问文件网址。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\f1587ed292255147e12070f7d344fd5f.png\"/></p>\n<p>7.测试</p>\n<p>(1)修改类 应用会重启</p>\n<p>(2)修改配置文件 应用会重启</p>\n<p>(3)修改静态文件（html、css等），应用不会重启，但是会调用livereload，浏览器会自动刷新，显示最新的修改内容。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<h3>Alibaba代码检查工具插件</h3>\n<ul><li> <p><a href=\"https://blog.csdn.net/lthyx/article/details/109175857#_5\" title=\"插件安装：\">插件安装：</a></p>\n<ul><li> <p><a href=\"https://blog.csdn.net/lthyx/article/details/109175857#_11\" title=\"使用方法：\">使用方法：</a></p> </li></ul></li></ul>\n<p>作为idea的小插件，阿里的这一款代码扫描工具能给与我们很大程度上的代码检测，书写规范的提示！！！(用过的都说香)</p>\n<p>插件安装：</p>\n<p></p>\n<p></p>\n<pre><code>点击File -&gt; Settings - &gt; Plugins 搜索Alibaba\n</code></pre>\n<p></p>\n<ul><li> <p>1</p> </li></ul>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\7a4200bd490c05585f5c74864e36e624.png\"/></p>\n<p>安装好以后重启IDEA就能使用拉！</p>\n<p>使用方法：</p>\n<p></p>\n<p></p>\n<pre><code>可以直接右键使用\n</code></pre>\n<p></p>\n<ul><li> <p>1</p> </li></ul>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\c0a1efa965218ff82b83ace9428a3785.png\"/></p>\n<p>在控制台上我们就能看到提示信息</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\c5d1d020c5ef1d9ca20a5337cbcfb49c.png\"/></p>\n<p></p>\n<p></p>\n<pre><code>或者点击TOOLS\n</code></pre>\n<p></p>\n<ul><li> <p>1</p> </li></ul>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d86e95f2960a6ae6a1902afde3362517.png\"/></p>\n<p>效果是一样的噻！！！！！</p>\n<p></p>\n<p></p>\n<pre><code>IDEA中还有什么实用的插件欢迎大家在评论区讨论，让我也感受一哈\n</code></pre>\n<p></p>\n<p></p>\n<p></p>\n<h3>末尾</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}