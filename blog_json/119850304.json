{"blogid": "119850304", "writerAge": "码龄5年", "writerBlogNum": "145", "writerCollect": "4216", "writerComment": "2283", "writerFan": "9471", "writerGrade": "7级", "writerIntegral": "14135", "writerName": "吾日三省贾斯汀", "writerProfileAdress": "writer_image\\profile_119850304.jpg", "writerRankTotal": "24456", "writerRankWeekly": "7518", "writerThumb": "3470", "writerVisitNum": "1150531", "blog_read_count": "22316", "blog_time": "于 2021-08-24 07:00:23 发布", "blog_title": "Java--反射机制原理、几种Class获取方式及应用场景", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_1\">📢学习背景</a></li><li><a href=\"#Java_5\">🎹一、Java反射机制是什么？</a></li><li><ul><li><a href=\"#11__6\">🎸1.1 反射原理</a></li><li><a href=\"#12__20\">📣1.2 反射例子</a></li></ul>\n</li><li><a href=\"#JavaClass_82\">🎵二、Java反射机制中获取Class的三种方式及区别？</a></li><li><ul><li><a href=\"#21_Class_85\">📀2.1 Class的几种获取方式</a></li><li><a href=\"#22__100\">🔊2.2 代码演示几种方式的区别</a></li></ul>\n</li><li><a href=\"#Java_274\">💥三、Java反射机制的应用场景有哪些？</a></li><li><ul><li><a href=\"#31__277\">🎶3.1 应用场景</a></li><li><a href=\"#32__282\">🎧3.2 简单工厂模式优化</a></li><li><ul><li><a href=\"#321__283\">📢3.2.1 什么是简单工厂模式？</a></li><li><a href=\"#322__288\">🎹3.2.2 简单工厂模式有什么用？</a></li><li><a href=\"#323__291\">🎸3.2.3 如何实现简单工程模式？</a></li><li><a href=\"#324__381\">📣3.2.4 简单工厂模式优化</a></li><li><a href=\"#325__451\">🎵3.2.5 简单工厂模式再次优化</a></li></ul>\n</li><li><a href=\"#33__517\">📀3.3 代理模式中的动态代理实现</a></li><li><ul><li><a href=\"#331__520\">🔊3.3.1 什么是代理模式？</a></li><li><a href=\"#332__532\">💥3.3.2 什么是静态代理？</a></li><li><a href=\"#332__537\">🎶3.3.2 什么是动态代理？</a></li><li><a href=\"#333_Java_671\">🎧3.3.3 动态代理中如何利用Java反射机制？</a></li></ul>\n</li><li><a href=\"#34_Java_JDBC_674\">📢3.4 Java JDBC数据库操作实现</a></li><li><ul><li><a href=\"#341_JDBC_675\">🎹3.4.1 利用反射加载JDBC驱动</a></li><li><a href=\"#342_Java_JDBC_686\">🎸3.4.2 Java JDBC连接示例</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_826\">面试总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>📢学习背景</h1>\n<p>学习Java的小伙伴，可能听过<code>Java反射机制</code>，但是熟悉又有点陌生，本文主要是通过思考面试中经常被问到的几个<code>Java反射机制</code>的问题，再通过<code>理论知识</code>结合<code>代码实例</code>及<code>应用场景</code>进行讲解，加深自己对<code>Java反射机制</code>的认知和理解，也希望能帮助到有需要的小伙伴~<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0e0bd64d390a44479653731f065c228e.png\"/></p>\n<h1><a id=\"Java_5\"></a>🎹一、Java反射机制是什么？</h1>\n<h2><a id=\"11__6\"></a>🎸1.1 反射原理</h2>\n<p><strong>（1）Java反射机制（<code>Java Reflection</code>）是Java语言中一种<code>动态（运行时）访问、检测 &amp; 修改它本身</code>的能力，主要作用是<code>动态（运行时）获取类的完整结构信息 &amp; 调用对象的方法</code>~<br/> 更简单点的说就是Java程序在运行时（动态）通过创建一个类的反射对象，再对类进行相关操作，比如：</strong></p>\n<ul><li>获取该对象的成员变量 &amp; 赋值</li><li>调用该对象的方法（含构造方法，有参/无参）</li><li>判断该对象所属的类</li></ul>\n<blockquote>\n<p><strong>PS：不过说实话，直接看比较官方的定义还是有点难理解，再来更加通俗点的说吧~</strong></p>\n</blockquote>\n<p><strong>（2）一般情况下，我们使用某个类，都会知道这个类，以及要用它来做什么，可以直接通过<code>new</code>实例化创建对象，然后使用这个对象对类进行操作，这个就属于<code>正射</code>~</strong></p>\n<p><strong>（3）而<code>反射</code>则是一开始并不知道要初始化的是什么类，无法使用<code>new</code>来实例化创建对象，主要是通过JDK提供的反射API来实现，在运行时才知道要操作的是什么类，并且可以获取到类的完整构造以及调用对应的方法，这就是<code>反射</code>~</strong></p>\n<h2><a id=\"12__20\"></a>📣1.2 反射例子</h2>\n<p><strong>代码如下：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>justin<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @program: Jdk1.8 Test\n * @description: 正射、反射简单调用示例\n * @author: JustinQin\n * @create: 2021/8/22 13:23\n * @version: v1.0.0\n **/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//一、正射调用过程</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正射调用过程Student id:\"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//二、反射调用过程</span>\n        <span class=\"token class-name\">Class</span> clz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.justin.java.lang.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span> studentConstructor <span class=\"token operator\">=</span> clz<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> studentObj <span class=\"token operator\">=</span> studentConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">Method</span> setIdMethod <span class=\"token operator\">=</span> clz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setId\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        setIdMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>studentObj<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> getIdMethod <span class=\"token operator\">=</span> clz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正射调用过程Student id:\"</span> <span class=\"token operator\">+</span> getIdMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>studentObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>输出结果：</strong></p>\n<pre><code class=\"prism language-java\">正射调用过程<span class=\"token class-name\">Student</span> id<span class=\"token operator\">:</span><span class=\"token number\">1</span>\n反射调用过程<span class=\"token class-name\">Student</span> id<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n</code></pre>\n<p><strong>上述例子反射的调用过程，可以看到获取一个类的<code>反射对象</code>，主要过程为：</strong></p>\n<ul><li>获取类的<code>Class</code>实例对象</li><li>根据<code>Class</code>实例对象获取<code>Constructor</code>对象</li><li>再根据<code>Constructor</code>对象的<code>newInstance</code>方法获取到类的<code>反射对象</code></li></ul>\n<p><strong>获取到类的<code>反射对象</code>后，就可以对类进行操作了~ 例如，上述示例中对类的方法进行调用过程为：</strong></p>\n<ul><li>根据<code>Class</code>实例对象获取到类的<code>Method</code>对象</li><li>再根据<code>Method</code>对象的<code>invoke</code>方法调用到具体类的方法</li></ul>\n<p><strong>前面一点也提到了获取到类的<code>Class</code>实例对象，上面示例<code>反向调用过程</code>中我们是通过<code>Class.forName(\"类的全局定名\")</code>这种方式来获取到类的<code>Class</code>实例对象，除了这种，常用的还有其他两种，往下讲解~</strong></p>\n<h1><a id=\"JavaClass_82\"></a>🎵二、Java反射机制中获取Class的三种方式及区别？</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\54f7a810b4514da790958ce554d9c826.png\"/></p>\n<h2><a id=\"21_Class_85\"></a>📀2.1 Class的几种获取方式</h2>\n<p><strong>（1）获取类的<code>java.lang.Class</code>实例对象，常见的三种方式分别为：</strong></p>\n<ul><li>通过<code>MyClass.class</code>获取，这里的MyClass指具体类~~</li><li>通过<code>Class.forName(\"类的全局定名\")</code>获取，全局定名为包名+类名</li><li>通过<code>new MyClass().getClass()</code>获取，这里的MyClass指具体类~</li></ul>\n<p><strong>（2）通过<code>MyClass.class</code>获取，JVM会使用<code>ClassLoader</code>类加载器将类加载到内存中，但并<mark>不会做任何类的初始化工作</mark>，返回<code>java.lang.Class</code>对象</strong></p>\n<p><strong>（3）通过<code>Class.forName(\"类的全局定名\")</code>获取，同样，类会被JVM加载到内存中，并且<mark>会进行类的静态初始化工作</mark>，返回<code>java.lang.Class</code>对象</strong></p>\n<p><strong>（4）通过<code>new MyClass().getClass()</code>获取，这种方式使用了<code>new</code>进行实例化操作，因此<mark>静态初始化和非静态初始化工作都会进行</mark>，<code>getClass</code>方法属于顶级<code>Object</code>类中的方法，任何子类对象都可以调用，哪个子类调用，就返回那个子类的<code>java.lang.Class</code>对象</strong></p>\n<blockquote>\n<p><strong>PS：</strong> 这3种方式，最终在JVM堆区对应类的<code>java.lang.Class</code>对象都属于同一个，也就是<mark>内存地址相同</mark>，进行<code>==</code>双等号比较结果为<code>true</code>，原因是JVM类加载过程中使用的是同一个<code>ClassLoader</code>类加载器加载某个类，不论加载多少次，生成到堆区的<code>java.lang.Class</code>对象始终只有一个，除非自定义类加载器，破坏JVM的双亲委派机制，使得同一个类被不同类加载器加载，JVM才会把它当做两个不同的<code>java.lang.Class</code>对象</p>\n</blockquote>\n<h2><a id=\"22__100\"></a>🔊2.2 代码演示几种方式的区别</h2>\n<p><strong>创建一个实体类，分别在实体类中创建类的<code>静态代码块</code>、<code>动态代码块</code>、<code>有参构造方法</code>、<code>无参构造方法</code>，方便测试几种方式的区别及内存地址是否相同~</strong></p>\n<p><strong>（1）实体类：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> staticStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> staticInt <span class=\"token operator\">=</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块：staticStr=\"</span> <span class=\"token operator\">+</span> staticStr <span class=\"token operator\">+</span> <span class=\"token string\">\",staticInt=\"</span> <span class=\"token operator\">+</span> staticInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动态代码块~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无参构造方法~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"有参构造方法~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"MyClass{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"id='\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>（2）单元测试类：</strong><br/> 通过<code>@Test</code>注解对三种方式分别进行单元测试，再对这三种方式的组合进行单元测试~</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>justin<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @program: Jdk1.8Test\n * @description: Java反射机制中获取类的Class实例对象的常见三种方式及区别对比\n * @author: JustinQin\n * @create: 2021/8/22 15:04\n * @version: v1.0.0\n **/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClassTest</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一、MyClass.class方式=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二、Class.forName方式=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.justin.java.lang.MyClass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"三、new MyClass().getClass方式=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test12</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一、MyClass.class方式=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二、Class.forName方式=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.justin.java.lang.MyClass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test13</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一、MyClass.class方式=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"三、new MyClass().getClass方式=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test23</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二、Class.forName方式=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.justin.java.lang.MyClass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"三、new MyClass().getClass方式=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"四、三种方式内存地址比较=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.justin.java.lang.MyClass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"比较结果=========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyClass.class和Class.forName内存地址比较是否相同：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>class1 <span class=\"token operator\">==</span> class2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyClass.class和new MyClass().getClass内存地址比较是否相同：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>class1 <span class=\"token operator\">==</span> class3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class.forName和new MyClass().getClass内存地址比较是否相同：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>class2 <span class=\"token operator\">==</span> class3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>逐个执行单元，得出测试结果为：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">*</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法\n一、<span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>方式<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n\n<span class=\"token operator\">*</span>  <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法\n二、<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName方式<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n静态代码块：staticStr<span class=\"token operator\">=</span><span class=\"token class-name\">Hi</span><span class=\"token punctuation\">,</span>staticInt<span class=\"token operator\">=</span><span class=\"token number\">2021</span>\n\n<span class=\"token operator\">*</span>  <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法\n三、<span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getClass方式<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n静态代码块：staticStr<span class=\"token operator\">=</span><span class=\"token class-name\">Hi</span><span class=\"token punctuation\">,</span>staticInt<span class=\"token operator\">=</span><span class=\"token number\">2021</span>\n动态代码块<span class=\"token operator\">~</span>\n无参构造方法<span class=\"token operator\">~</span>\n\n<span class=\"token operator\">*</span>  <span class=\"token function\">test12</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法\n一、<span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>方式<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n二、<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName方式<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n静态代码块：staticStr<span class=\"token operator\">=</span><span class=\"token class-name\">Hi</span><span class=\"token punctuation\">,</span>staticInt<span class=\"token operator\">=</span><span class=\"token number\">2021</span>\n\n<span class=\"token operator\">*</span>  <span class=\"token function\">test13</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法\n一、<span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>方式<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n三、<span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getClass方式<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n静态代码块：staticStr<span class=\"token operator\">=</span><span class=\"token class-name\">Hi</span><span class=\"token punctuation\">,</span>staticInt<span class=\"token operator\">=</span><span class=\"token number\">2021</span>\n动态代码块<span class=\"token operator\">~</span>\n无参构造方法<span class=\"token operator\">~</span>\n\n<span class=\"token operator\">*</span>  <span class=\"token function\">test23</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法\n二、<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName方式<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n静态代码块：staticStr<span class=\"token operator\">=</span><span class=\"token class-name\">Hi</span><span class=\"token punctuation\">,</span>staticInt<span class=\"token operator\">=</span><span class=\"token number\">2021</span>\n三、<span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getClass方式<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n动态代码块<span class=\"token operator\">~</span>\n无参构造方法<span class=\"token operator\">~</span>\n\n<span class=\"token operator\">*</span>  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法\n四、三种方式内存地址比较<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n静态代码块：staticStr<span class=\"token operator\">=</span><span class=\"token class-name\">Hi</span><span class=\"token punctuation\">,</span>staticInt<span class=\"token operator\">=</span><span class=\"token number\">2021</span>\n动态代码块<span class=\"token operator\">~</span>\n无参构造方法<span class=\"token operator\">~</span>\n比较结果<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>和<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName内存地址比较是否相同：<span class=\"token boolean\">true</span>\n<span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>和<span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getClass内存地址比较是否相同：<span class=\"token boolean\">true</span>\n<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName和<span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getClass内存地址比较是否相同：<span class=\"token boolean\">true</span>\n</code></pre>\n<p><strong>通过<code>test1</code>、<code>test2</code>、<code>test3</code>的测试结果验证了<code>2.1 三种方式及区别</code>中黄色标记部分的区别说明，即：</strong></p>\n<ul><li><code>MyClass.class</code>不会做任何类的初始化工作</li><li><code>Class.forName</code>会进行类的静态初始化工作</li><li><code>new MyClass().getClass</code>静态初始化和非静态初始化工作都会进行</li><li>使用这三种方式任意一种最终在JVM加载到内存中都会是<code>内存地址相同</code>的</li></ul>\n<p><strong>而<code>test23</code>组合得到的测试结果，说明<code>静态代码块只会被加载一次</code>~</strong></p>\n<p><strong>讲了这么多，除了知道基本原理和基本使用之外，更重要的还是要知道它的一些比较实际的<code>应用场景</code>，往下介绍~</strong></p>\n<h1><a id=\"Java_274\"></a>💥三、Java反射机制的应用场景有哪些？</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3a790d5d55bf44b1854eedb953c583d3.png\"/></p>\n<h2><a id=\"31__277\"></a>🎶3.1 应用场景</h2>\n<ul><li><code>工厂模式</code>中的简单工厂模式优化</li><li><code>代理模式</code>中的动态代理方式实现</li><li><code>Java JDBC</code>数据库操作</li></ul>\n<h2><a id=\"32__282\"></a>🎧3.2 简单工厂模式优化</h2>\n<h3><a id=\"321__283\"></a>📢3.2.1 什么是简单工厂模式？</h3>\n<blockquote>\n<p>Java中主要有23种设计模式，其中工厂模式就是其中一种，而简单工厂模式，顾名思义，也是属于工厂模式中的一种，只不过比较简单。简单工厂模式也可以叫做静态方法模式（因为工厂类一般都是在内部定义了一个静态方法）。<br/> 从现实生活角度来理解的话，工厂是专门负责生产产品的，同样在设计模式中，简单工厂模式我们可以理解为专门负责生产对象的一个类，称为“工厂类”。</p>\n</blockquote>\n<h3><a id=\"322__288\"></a>🎹3.2.2 简单工厂模式有什么用？</h3>\n<blockquote>\n<p>简单工厂模式通过创建一个对应的工厂类，将<code>类实例化的操作</code>与<code>使用对象的操作</code>进行分开，让使用者不用知道具体参数就可以实例化出所需要的<code>具体产品</code>类，从而避免了在客户端代码中显式指定，实现了解耦。即使用者可直接消费产品而不需要知道其生产的细节~</p>\n</blockquote>\n<h3><a id=\"323__291\"></a>🎸3.2.3 如何实现简单工程模式？</h3>\n<blockquote>\n<p>实现简单工程模式的核心是创建一个<code>工厂类</code>，并且在内部定义了一个静态方法，传入不同的<code>参数标识</code>通过<code>switch</code>进行分组，通过<code>new</code>实例化创建不同的子类对象返回~</p>\n</blockquote>\n<p><strong>实现例子：</strong></p>\n<p><strong>步骤1：创建抽象产品类</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>步骤2：创建具体产品类：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductA</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产了产品A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductB</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产了产品B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductC</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产了产品C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>步骤3：创建简单工厂类</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * 实现简单工厂模式\n     * @param pName 产品标识\n     * @return 返回具体的产品\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Product</span> <span class=\"token function\">createProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"A\"</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"B\"</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"C\"</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>步骤4：调用简单工厂类</strong></p>\n<pre><code class=\"prism language-bash\">public class SimpleFactoryTest <span class=\"token punctuation\">{<!-- --></span>\n    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        try <span class=\"token punctuation\">{<!-- --></span>\n            SimpleFactory.createProduct<span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span>.show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">(</span>NullPointerException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"没有A这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        try <span class=\"token punctuation\">{<!-- --></span>\n            SimpleFactory.createProduct<span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span>.show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">(</span>NullPointerException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"没有B这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        try <span class=\"token punctuation\">{<!-- --></span>\n            SimpleFactory.createProduct<span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span>.show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">(</span>NullPointerException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"没有C这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        try <span class=\"token punctuation\">{<!-- --></span>\n            SimpleFactory.createProduct<span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span>.show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">(</span>NullPointerException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"没有D这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"324__381\"></a>📣3.2.4 简单工厂模式优化</h3>\n<p><strong>（1）简单工厂模式弊端</strong></p>\n<ul><li>操作成本高：每增加一个接口的子类，必须修改工厂类的逻辑</li><li>系统复杂性提高：每增加一个接口的子类，都必须向工厂类添加逻辑</li></ul>\n<p>这两点弊端从前面的例子<code>SimpleFactory</code>工厂类的实现，可以看出<code>简单工厂模式</code>中对工厂类<code>SimpleFactory</code>的维护成本有点大，因为实际中可能会很频繁的去更新<code>具体产品类</code>，每一次变更都需要去修改工厂类，此时就可以利用<code>Java反射机制</code>对简单工厂模式进行优化~</p>\n<p><strong>（2）简单工厂模式的优化思路</strong><br/> 采用Java反射机制，通过传入<code>子类全局定名（包名+类名）</code> 动态的创建不同的<code>子类对象实例</code>，从而使得在不增加产品接口子类和修改工厂类的逻辑的情况下还能实现了工厂类对子类实例对象的统一创建~</p>\n<p><strong>（3）简单工厂模式的优化步骤</strong><br/> <strong>步骤1：创建工厂类</strong><br/> 采用Java反射机制对工厂类进行优化，主要是将<code>className</code>即<code>子类全局定名（包名+类名）</code>作为入参，通过<code>Class.forName</code>方式获取类的<code>java.lang.Class</code>实例对象，再通过<code>Class</code>实例对象的<code>getInstance</code>方法获取到具体子类的实例对象~</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Product</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Product</span> realProduct <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Class</span> pClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            realProduct <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">)</span> pClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> realProduct<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>步骤2：调用工厂类</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> productA <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.justin.java.lang.ProductA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            productA<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有A这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> productB <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.justin.java.lang.ProductB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            productB<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有B这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> productC <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.justin.java.lang.ProductC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            productC<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有C这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Product</span> productD <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.justin.java.lang.ProductD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            productD<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有D这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>优化结果：</strong></p>\n<blockquote>\n<p>使用<code>Java反射机制</code>优化简单工厂模式后，可以看到，不论<code>具体产品类</code>更新多频繁，都不需要再修改<code>工厂类</code>，从而解决了普通简单工厂模式<code>操作成本高</code>和<code>系统复杂性高</code>的问题~</p>\n</blockquote>\n<h3><a id=\"325__451\"></a>🎵3.2.5 简单工厂模式再次优化</h3>\n<p><strong>（1）再次优化背景</strong></p>\n<blockquote>\n<p>简单工厂模式的工厂类采用<code>Java反射机制</code>进行优化后，此时的仍然存在这样一个问题，<code>子类的全局定名（包名+类名）</code>是写死的，但是实际上开发者在写代码时是很难提前预知所有的<code>子类的全局定名（包名+类名）</code>的，因此需要进行二次优化~</p>\n</blockquote>\n<p><strong>（2）再次优化实现思路</strong></p>\n<blockquote>\n<p>通过<code>配置文件</code>方式，统一定义<code>类名对应全局定名（包名+类名）</code>，将配置文件存放到资源目录下，程序运行时通过<code>ClassLoader</code>类加载器动态获取到<code>配置文件</code>中定义的子类的全局定名~</p>\n</blockquote>\n<p><strong>（3）再次优化实现步骤</strong></p>\n<p><strong>再次优化步骤1：相关优化与第一次优化保持不变~</strong></p>\n<p><strong>再次优化步骤2：配置<code>类名对应全局定名（包名+类名）</code></strong><br/> 创建属性配置文件<code>Product.properties</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//产品抽象类Product相关子类的全局定名（包名+类名）定义</span>\n<span class=\"token class-name\">ProductA</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>justin<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>ProductA</span>\n<span class=\"token class-name\">ProductB</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>justin<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>ProductB</span>\n<span class=\"token class-name\">ProductC</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>justin<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>ProductC</span>\n</code></pre>\n<p><mark>注意</mark>：将<code>Product.properties</code>需要存放在<code>src/main/resources</code>资源目录下，若资源目录不存在则需要手动创建~</p>\n<p><strong>再次优化步骤3：修改调用工厂类</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Properties</span> prop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        prop<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Product.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            className <span class=\"token operator\">=</span> prop<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProductA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Product</span> productA <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            productA<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有A这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            className <span class=\"token operator\">=</span> prop<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProductB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Product</span> productA <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            productA<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有B这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            className <span class=\"token operator\">=</span> prop<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProductC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Product</span> productA <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            productA<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有C这款产品，无法生产~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong></p>\n<pre><code class=\"prism language-java\">生产了产品<span class=\"token class-name\">A</span>\n生产了产品<span class=\"token class-name\">B</span>\n生产了产品<span class=\"token class-name\">C</span>\n</code></pre>\n<h2><a id=\"33__517\"></a>📀3.3 代理模式中的动态代理实现</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\70d9c6bbc83448aab1a2a755fcc75987.png\"/></p>\n<h3><a id=\"331__520\"></a>🔊3.3.1 什么是代理模式？</h3>\n<blockquote>\n<p><code>代理（Proxy）模式</code>是一种<code>设计模式</code>，通过<code>代理对象</code>来访问<code>目标对象</code>，还可以在不修改<code>目标对象</code>的情况下，对<code>代理对象</code>进行拓展，增强<code>目标对象</code>的功能~</p>\n</blockquote>\n<p><strong>什么？还是不太理解？</strong></p>\n<blockquote>\n<p>更通俗一点的说代理模式，就是想做某件事（<code>买火车票</code>），<code>自己</code>能买（直接去<code>火车站</code>买），却委托别人去买（没空还是<code>代理点</code>买吧），还可以让别人帮自己做其他事（订好酒店）~</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bf70d190a42f4b74af640c330acbbc9b.png\"/></p>\n<p><strong>代理模式又分为静态代理、动态代理，往下介绍~</strong></p>\n<h3><a id=\"332__532\"></a>💥3.3.2 什么是静态代理？</h3>\n<blockquote>\n<p>（1）<code>静态代理</code>属于<code>代理模式</code>的一种代理方式，需要<code>代理对象</code>和<code>目标对象</code>实现相同的接口<br/> （2）<code>静态代理</code>的代理类是由程序员编写源码，编译后即可获取到代理类的class字节码文件，也就是在<code>程序运行前</code>就已经得到实际的代理类class字节码文件了</p>\n</blockquote>\n<h3><a id=\"332__537\"></a>🎶3.3.2 什么是动态代理？</h3>\n<p><strong>动态代理</strong></p>\n<blockquote>\n<p>（1）<code>动态代理</code>也属于<code>代理模式</code>的一种代理方式，不过只需要<code>目标对象</code>实现接口，<code>代理对象</code>不需要实现接口~<br/> （2）<code>动态代理</code>的代理类编译后是没有class字节码文件的，而是在运行时利用<code>Java反射机制</code>动态的生成代理类的class字节码文件~</p>\n</blockquote>\n<p>动态代理最常用的是<code>JDK原生动态代理</code>和<code>cglib动态代理</code>，往下介绍~</p>\n<p><strong>JDK 原生动态代理</strong></p>\n<p>JDK 原生动态代理，主要利用了<code>JDK API</code>的<br/> <code>java.lang.reflect.Proxy</code>和<code>java.lang.relfect.InnvocationHandler</code> 这两个类来实现~</p>\n<p>通过<code>java.lang.reflect.Proxy</code>代理类的<code>newProxyInstance</code>方法，传递3个参数，分别是：<br/> <code>目标对象的加载器</code> 通过<code>MyClass.getClass().getClassLoader</code>方式获取<br/> <code>目标对象的实现接口类型</code> 通过<code>Object.getClass().getInterfaces()</code>方式获取<br/> <code>InnvocationHandler事件处理器</code> 通过<code>new</code>实例化对象并重写<code>invoke</code>方法方式获取</p>\n<p><strong>例子：</strong></p>\n<p><strong>用户接口类<code>IUserDao</code></strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUserDao</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//添加数据</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>目标对象类<code>UserDao</code></strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * @program: DataStructures\n * @description:\n * @author: JustinQin\n * @create: 2021/8/23 23:32\n * @version: v1.0.0\n **/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDao</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IUserDao</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>动态代理类<code>UserProxy</code></strong></p>\n<pre><code class=\"prism language-java\">\n<span class=\"token comment\">/**\n * @program: Jdk1.8Test\n * @description: 动态代理类\n * @author: JustinQin\n * @create: 2021/8/23 23:31\n * @version: v1.0.0\n **/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProxy</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">;</span> <span class=\"token comment\">//目标对象</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 利用JDK API获取到代理对象\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//目标对象的加载器</span>\n        <span class=\"token class-name\">ClassLoader</span> loader <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//目标对象的实现接口类型</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//InnvocationHandler事件处理器实例对象</span>\n        <span class=\"token class-name\">InvocationHandler</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加数据前：手动开启事务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 执行目标对象方法</span>\n                <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加数据后：手动提交事务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//传入3个参数，创建代理类的实例对象，并返回</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> interfaces<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p><strong>动态代理单元测试类</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * @program: 动态代理单元测试类\n * @description:\n * @author: JustinQin\n * @create: 2021/8/23 23:42\n * @version: v1.0.0\n **/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProxyTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">IUserDao</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目标对象信息：\"</span> <span class=\"token operator\">+</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取代理类实例对象</span>\n        <span class=\"token class-name\">IUserDao</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IUserDao</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserProxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"代理对象信息：\"</span> <span class=\"token operator\">+</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//执行代理方法</span>\n        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>单元测试执行结果</strong></p>\n<pre><code class=\"prism language-java\">目标对象信息：<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>justin<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span>UserDao</span>\n代理对象信息：<span class=\"token keyword\">class</span> com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">.</span>$<span class=\"token class-name\">Proxy2</span>\n添加数据前：手动开启事务\n添加数据\n添加数据后：手动提交事务\n</code></pre>\n<p><strong>cglib动态代理</strong></p>\n<blockquote>\n<p><code>cglib (Code Generation Library )</code>是一个第三方代码生成类库，运行时在内存中动态生成一个子类对象从而实现对目标对象功能的扩展。</p>\n</blockquote>\n<p><code>Spring AOP</code>结合了<code>cglib动态代理</code>和<code>JDK原生动态代理</code>来实现，这里不过多介绍，有兴趣小伙伴可以查阅资料学习下~</p>\n<h3><a id=\"333_Java_671\"></a>🎧3.3.3 动态代理中如何利用Java反射机制？</h3>\n<blockquote>\n<p>JDK原生动态代理中，获取代理示例对象过程中，获取目标对象的类加载器，通过<code>target.getClass().getClassLoader(</code>获取到目标对象的类加载器，<code>target.getClass()</code>方式获取目标对象的Class实例对象使用的就是Java反射机制来实现的~</p>\n</blockquote>\n<h2><a id=\"34_Java_JDBC_674\"></a>📢3.4 Java JDBC数据库操作实现</h2>\n<h3><a id=\"341_JDBC_675\"></a>🎹3.4.1 利用反射加载JDBC驱动</h3>\n<p>相信很多小伙伴都知道<code>Java JDBC连接数据库</code>主要分为七大步骤，其中第一步<code>加载JDBC驱动</code>，利用Java反射机制通过传入不同的驱动名称，加载不同数据库的驱动~</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//加载MySQL驱动</span>\n<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oracle.jdbc.driver.OracleDriver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//加载Oracle驱动</span>\n</code></pre>\n<p><strong>链接：</strong><a href=\"https://pan.baidu.com/s/1p1aVlJShHt_mnpx6RDDDgg\">Mysql驱动架包mysql-connector-java-5.1.30.jar</a> <strong>提取码：pc63</strong></p>\n<p><strong>链接：</strong><a href=\"https://pan.baidu.com/s/1GdaoJPfrV8L8oV2dy4aaMg\">Oracle驱动架包ojdbc14-10.2.0.4.0.jar</a> <strong>免提取码</strong></p>\n<h3><a id=\"342_Java_JDBC_686\"></a>🎸3.4.2 Java JDBC连接示例</h3>\n<p><strong>创建测试库表及数据</strong></p>\n<pre><code class=\"prism language-java\">create <span class=\"token class-name\">DATABASE</span> test<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span> DROP TABLE IF EXISTS test<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\ncreate table test<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> primary key not <span class=\"token keyword\">null</span> auto_increment<span class=\"token punctuation\">,</span>\nname <span class=\"token function\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nsex <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nage <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>ENGINE<span class=\"token operator\">=</span><span class=\"token class-name\">InnoDB</span> <span class=\"token class-name\">DEFAULT</span> CHARSET<span class=\"token operator\">=</span>utf8 COLLATE<span class=\"token operator\">=</span>utf8_general_ci<span class=\"token punctuation\">;</span>\ninsert into TEST<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张一'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninsert into TEST<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张二'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninsert into TEST<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>Java MySQL JDBC连接七大步骤~</strong></p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//1.加载JDBC驱动</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.获取数据库的连接（Connection）对象</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"jdbc:mysql://localhost/test\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mysql连接url,test表示你要连接的数据库名</span>\n                <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//数据库用户名</span>\n                <span class=\"token string\">\"abc@123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//密码</span>\n        <span class=\"token comment\">//3.获取数据库的操作（PrepareStatement）对象</span>\n        <span class=\"token class-name\">PreparedStatement</span> prepareStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from TEST.user where id = ?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//4.设置传入参数</span>\n        prepareStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//5.上传sql语句到服务器执行（excute），并返回结果集（ResultSet）</span>\n        <span class=\"token class-name\">ResultSet</span> result <span class=\"token operator\">=</span> prepareStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//6.处理返回的ResultSet结果集</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//7.释放相关资源:Connection对象、PrepareStatement对象、ResultSet对象。</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        prepareStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>执行结果：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>张一<span class=\"token punctuation\">,</span>男<span class=\"token punctuation\">,</span><span class=\"token number\">21</span>\n</code></pre>\n<p><strong>Java Oracle JDBC连接七大步骤~</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcOracleTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//1.加载JDBC驱动</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oracle.jdbc.driver.OracleDriver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.获取数据库的连接（Connection）对象</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"jdbc:oracle:thin:@127.0.0.1:1521:orcl\"</span><span class=\"token punctuation\">,</span>\t<span class=\"token comment\">//oracle连接url</span>\n                <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//数据库用户名</span>\n                <span class=\"token string\">\"abc@123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//密码</span>\n        <span class=\"token comment\">//3.获取数据库的操作（PrepareStatement）对象</span>\n        <span class=\"token class-name\">PreparedStatement</span> prepareStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from TEST.user where id = ?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//4.设置传入参数</span>\n        prepareStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//5.上传sql语句到服务器执行（excute），并返回结果集（ResultSet）</span>\n        <span class=\"token class-name\">ResultSet</span> result <span class=\"token operator\">=</span> prepareStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//6.处理返回的ResultSet结果集</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//7.释放相关资源:Connection对象、PrepareStatement对象、ResultSet对象。</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        prepareStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>PS：上面通过Java JDBC连接数据库并进行操作，这里的连接是单一连接，直接通过DriverManager.getConnection这种Java原生的数据库连接方式建立的连接，现在实际的Java Spring项目当中，都是通过配置mybatis的数据库连接池来实现的，不过原理都是一样的，加载驱动也是利用了<code>Java反射机制</code>指定不同的驱动名称，实现不同数据库驱动的加载~</p>\n</blockquote>\n<p><strong>数据库连接池配置<code>spring-mybatis.xml</code></strong></p>\n<pre><code class=\"prism language-xml\">\t<span class=\"token comment\">&lt;!-- 基于tomcat jdbc连接池的数据源  --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.justin.datasource.TomcatDataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createPool<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token comment\">&lt;!-- 基于dbcp连接池的数据源\n\t\t&lt;bean id=\"dataSource\" class=\"com.justin.datasource.DbcpDataSource\" destroy-method=\"close\"&gt; --&gt;</span>\n\t\t<span class=\"token comment\">&lt;!-- 基于阿里druid连接池的数据源\n        &lt;bean id=\"dataSource\" class=\"com.justin.datasource.DruidDataSource\" destroy-method=\"close\"&gt; --&gt;</span>\n\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${app-data-source.driverClassName}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${app-data-source.url}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${app-data-source.username}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${app-data-source.password}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t\t<span class=\"token comment\">&lt;!-- 初始化连接大小 --&gt;</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>initialSize<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${app-data-source.initialSize}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t\t<span class=\"token comment\">&lt;!-- 连接池最大数量 --&gt;</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxActive<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${app-data-source.maxActive}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t\t<span class=\"token comment\">&lt;!-- 连接池最大空闲 --&gt;</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxIdle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${app-data-source.maxIdle}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t\t<span class=\"token comment\">&lt;!-- 连接池最小空闲 --&gt;</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>minIdle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${app-data-source.minIdle}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t\t<span class=\"token comment\">&lt;!-- 获取连接最大等待时间 --&gt;</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxWait<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${app-data-source.maxWait}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><strong>数据库配置信息<code>jdbc.propertis</code></strong></p>\n<pre><code class=\"prism language-java\">#数据库连接驱动\napp<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>source<span class=\"token punctuation\">.</span>driverClassName<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>Driver</span>\n#数据库连接url\napp<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>source<span class=\"token punctuation\">.</span>url<span class=\"token operator\">=</span>jdbc<span class=\"token operator\">:</span>mysql<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>test<span class=\"token operator\">?</span>useSSL<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token operator\">&amp;</span>characterEncoding<span class=\"token operator\">=</span>UTF<span class=\"token operator\">-</span><span class=\"token number\">8</span>\n#数据库用户\napp<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>source<span class=\"token punctuation\">.</span>username<span class=\"token operator\">=</span>root\n#数据库用户密码<span class=\"token punctuation\">(</span>加密<span class=\"token punctuation\">)</span>\napp<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>source<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span>abc<span class=\"token annotation punctuation\">@123456</span>\n#连接池初始化大小\napp<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>source<span class=\"token punctuation\">.</span>initialSize<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n#连接池最大数量\napp<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>source<span class=\"token punctuation\">.</span>maxActive<span class=\"token operator\">=</span><span class=\"token number\">50</span>\n#连接池最大空闲\napp<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>source<span class=\"token punctuation\">.</span>maxIdle<span class=\"token operator\">=</span><span class=\"token number\">20</span>\n#连接池最小空闲\napp<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>source<span class=\"token punctuation\">.</span>minIdle<span class=\"token operator\">=</span><span class=\"token number\">5</span>\n#获取连接最大等待时间\napp<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>source<span class=\"token punctuation\">.</span>maxWait<span class=\"token operator\">=</span><span class=\"token number\">30000</span>\n</code></pre>\n<h1><a id=\"_826\"></a>面试总结</h1>\n<p><strong>一、Java反射机制是什么？</strong><br/> 1、Java反射机制（<code>Java Reflection</code>）是Java语言中一种<code>动态（运行时）访问、检测 &amp; 修改它本身</code>的能力，主要作用是<code>动态（运行时）获取类的完整结构信息 &amp; 调用对象的方法</code>~<br/> 更简单点的说就是Java程序在运行时（动态）通过创建一个类的反射对象，再对类进行相关操作，比如：</p>\n<ul><li>获取该对象的成员变量 &amp; 赋值</li><li>调用该对象的方法（含构造方法，有参/无参）</li><li>判断该对象所属的类</li></ul>\n<p>2、更通俗点的说，我们使用某个类，都会知道这个类，以及要用它来做什么，可以直接通过<code>new</code>实例化创建对象，然后使用这个对象对类进行操作，这个就属于<code>正射</code>~</p>\n<p>3、而<code>反射</code>则是一开始并不知道要初始化的是什么类，无法使用<code>new</code>来实例化创建对象，主要是通过JDK提供的反射API来实现，在运行时才知道要操作的是什么类，并且可以获取到类的完整构造以及调用对应的方法，这就是<code>反射</code>~</p>\n<p><strong>二、Java反射机制中获取Class的三种方式及区别？</strong><br/> 1、获取类的<code>java.lang.Class</code>实例对象，常见的三种方式分别为：</p>\n<ul><li>通过<code>MyClass.class</code>获取</li><li>通过<code>Class.forName(\"类的全局定名\")</code>获取</li><li>通过<code>new MyClass().getClass()</code>获取</li></ul>\n<p>2、通过<code>MyClass.class</code>获取，JVM会使用<code>ClassLoader</code>类加载器将类加载到内存中，但并<mark>不会做任何类的初始化工作</mark>，返回<code>java.lang.Class</code>对象</p>\n<p>3、通过<code>Class.forName(\"类的全局定名\")</code>获取，同样，类会被JVM加载到内存中，并且<mark>会进行类的静态初始化工作</mark>，返回<code>java.lang.Class</code>对象</p>\n<p>4、通过<code>new MyClass().getClass()</code>获取，这种方式使用了<code>new</code>进行实例化操作，因此== 静态初始化和非静态初始化工作都会进行 == ，<code>getClass</code>方法属于顶级<code>Object</code>类中的方法，任何子类对象都可以调用，哪个子类调用，就返回那个子类的<code>java.lang.Class</code>对象</p>\n<p>5、这3种方式，最终在JVM堆区对应类的<code>java.lang.Class</code>对象都属于同一个，也就是<mark>内存地址相同</mark>，进行<code>==</code>双等号比较结果为<code>true</code>，原因是JVM类加载过程中使用的是同一个<code>ClassLoader</code>类加载器加载某个类，不论加载多少次，生成到堆区的<code>java.lang.Class</code>对象始终只有一个，除非自定义类加载器，破坏JVM的双亲委派机制，使得同一个类被不同类加载器加载，JVM才会把它当做两个不同的<code>java.lang.Class</code>对象</p>\n<p><strong>三、Java反射机制的应用场景有哪些？</strong></p>\n<ul><li><code>工厂模式</code>中的简单工厂模式优化</li><li><code>代理模式</code>中的动态代理方式实现</li><li><code>Java JDBC</code>数据库操作</li></ul>\n<p><strong>原创不易，觉得有用的小伙伴来个<code>一键三连（点赞+收藏+评论 ）+关注</code>支持一下，非常感谢~</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\97fce46ef9154377832dd10c3fec1580.png\"/><br/> <img alt=\"\" src=\"image\\74630c41de6a72bcea6c14c0bd97edbc.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}