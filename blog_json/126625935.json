{"blogid": "126625935", "writerAge": "码龄3年", "writerBlogNum": "918", "writerCollect": "18753", "writerComment": "1268", "writerFan": "13398", "writerGrade": "8级", "writerIntegral": "34700", "writerName": "嗨学编程", "writerProfileAdress": "writer_image\\profile_126625935.jpg", "writerRankTotal": "152", "writerRankWeekly": "540", "writerThumb": "3420", "writerVisitNum": "3022986", "blog_read_count": "8928", "blog_time": "已于 2022-08-31 20:09:33 修改", "blog_title": "这个Python读取文件的方法，堪称天花板级别...", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_2\"></a>序言</h1>\n<p>哈喽兄弟们，今天咱们来了解一下 fileinput 。</p>\n<p>说到fileinput，可能90%的码农表示没用过，甚至没有听说过。</p>\n<p>这不奇怪，因为在python界，既然open可以走天下，何必要fileinput呢？</p>\n<p>但是，今天我还是要介绍fileinput这个方法，因为太奈斯了。</p>\n<p>不止是香。是真香！</p>\n<p>接下来，就跟着我，一起fileinput，对，就是这个feel。</p>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/b316815fb73240a99ecb3157e9ea5fbc.gif#pic_center\"/></p>\n<h1><a id=\"_17\"></a>正文</h1>\n<h2><a id=\"1_19\"></a>1、方法介绍</h2>\n<p><strong>基本用法</strong></p>\n<p>先来看一下fileinput的基本功能：</p>\n<ul><li> <p>fileinput.filename()：返回当前被读取的文件名。<br/> —&gt;在第一行被读取之前，返回 None。</p> </li><li> <p>fileinput.fileno()：返回以整数表示的当前文件“文件描述符”。<br/> —&gt;当未打开文件时（处在第一行和文件之间），返回 -1。</p> </li><li> <p>fileinput.lineno()：返回已被读取的累计行号。<br/> —&gt;在第一行被读取之前，返回 0。在最后一个文件的最后一行被读取之后，返回该行的行号。</p> </li><li> <p>fileinput.filelineno()：返回当前文件中的行号。<br/> —&gt;在第一行被读取之前，返回 0。<br/> —&gt;在最后一个文件的最后一行被读取之后，返回此文件中该行的行号。</p> </li></ul>\n<p><strong>进阶用法</strong></p>\n<ul><li> <p>fileinput.isfirstline()：如果刚读取的行是其所在文件的第一行则返回 True，否则返回 False。</p> </li><li> <p>fileinput.isstdin()：如果最后读取的行来自 sys.stdin 则返回 True，否则返回 False。</p> </li><li> <p>fileinput.nextfile()：关闭当前文件以使下次迭代将从下一个文件（如果存在）读取第一行；不是从该文件读取的行将不会被计入累计行数。直到下一个文件的第一行被读取之后文件名才会改变。<br/> —&gt;在第一行被读取之前，此函数将不会生效；它不能被用来跳过第一个文件。<br/> —&gt;在最后一个文件的最后一行被读取之后，此函数将不再生效。</p> </li><li> <p>fileinput.close()：关闭序列。</p> </li></ul>\n<h2><a id=\"2__49\"></a>2、 默认读取</h2>\n<p><strong>代码示例</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> fileinput\n\n<span class=\"token string\">'当 Python 脚本没有传入任何参数时，fileinput 默认会以 stdin 作为输入源'</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>line<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>运行结果</strong></p>\n<p><img alt=\"\" src=\"image\\b450acb235404ce89c65593d0395e71a.png\"/></p>\n<p>你输入的内容，程序都会读取并再输出。</p>\n<pre><code>俗称：复读机\n</code></pre>\n<h2><a id=\"3_72\"></a>3、处理一个文件</h2>\n<p><strong>代码示例</strong></p>\n<pre><code class=\"prism language-python\">\n<span class=\"token keyword\">import</span> fileinput\n\n<span class=\"token string\">'files 输入打开文件的名称即可'</span>\n<span class=\"token keyword\">with</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>files<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'output.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>lineno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">行：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>line<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>运行结果</strong></p>\n<p><img alt=\"\" src=\"image\\e1ed147037814b79972ba4bdfce46d82.png\"/></p>\n<p>解析：</p>\n<ul><li>fileinput 有且仅有这两种读取模式：‘r’，‘rb’;</li><li>fileinput.input() 默认使用 mode=‘r’ 的模式读取文件，如果你的文件是二进制的，可以使用mode=‘rb’ 模式。</li></ul>\n<h2><a id=\"4_96\"></a>4、处理批量文件</h2>\n<p><strong>多文件序号连续排序</strong></p>\n<p>调用方法</p>\n<ul><li>fileinput.lineno()方法</li></ul>\n<p>代码示例</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> fileinput\n\n<span class=\"token string\">'files 输入打开文件的名称即可'</span>\n<span class=\"token keyword\">with</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>files<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'output.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'input.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#fileinput.lineno() 把两个文件的整合陈一个文件对象file，需要排序输出</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>lineno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">行: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>line<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># fileinput.filelineno()两个文件单独读取，需要单独排序</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>filelineno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">行: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>line<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>运行结果</strong></p>\n<p><img alt=\"\" src=\"image\\dde86cf2fbda404885b3f245026f99e4.png\"/></p>\n<p><strong>多文件序号单独排序</strong></p>\n<p>调用方法</p>\n<ul><li>fileinput.filelineno()方法</li></ul>\n<p>代码示例</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> fileinput\n\n<span class=\"token string\">'files 输入打开文件的名称即可'</span>\n<span class=\"token keyword\">with</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>files<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test1.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'test2.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>       \n        <span class=\"token comment\"># fileinput.filelineno()两个文件单独读取，需要单独排序</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>filelineno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">行: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>line<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果</p>\n<p><img alt=\"\" src=\"image\\fa2d579fe0b04915abf3f69f49017385.png\"/></p>\n<p><strong>与glob配合用法</strong></p>\n<p>在颜值的时代，上面的输出样式，已经无法满足我们的需要了，于是乎，我们就想到了glob。</p>\n<p>代码示例</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> fileinput\n<span class=\"token keyword\">import</span> glob\n\n<span class=\"token comment\">#glob 匹配te开头的txt文件</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">\"te*.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> fileinput<span class=\"token punctuation\">.</span>isfirstline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#输出读取文件</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string-interpolation\"><span class=\"token string\">f'读取文件</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">'='</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#fileinput.filelineno()方法读取</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>fileinput<span class=\"token punctuation\">.</span>filelineno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token string\">':'</span><span class=\"token operator\">+</span>line<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果<br/> <img alt=\"\" src=\"image\\74208c52b9c54d8aa56885552bd5823c.png\"/></p>\n<p>就这颜值，哪个小姐姐能不喜欢呢。</p>\n<h2><a id=\"5_173\"></a>5、读取与备份</h2>\n<p>调用方法</p>\n<ul><li>fileinput.input 的backup 参数，可以指定备份的后缀名，比如 .bak</li></ul>\n<p>代码示例</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> fileinput\n\n<span class=\"token comment\">#触发backup的动作，源文件内容被修改，对源文件进行backup</span>\n<span class=\"token keyword\">with</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>files<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test1.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> backup<span class=\"token operator\">=</span><span class=\"token string\">\".bak\"</span><span class=\"token punctuation\">,</span>inplace<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'111111'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'222222'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>lineno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">行: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>line<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果</p>\n<p><img alt=\"\" src=\"image\\f423a4ee79ca4ec9a4317dde9d3009c4.png\"/></p>\n<h2><a id=\"6_198\"></a>6、重定向替换</h2>\n<p>解析</p>\n<ul><li>上面的例子， 用到了 inplace参数，表示是否将标准输出的结果写回文件，默认不取代。</li></ul>\n<p>代码示例：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> fileinput\n\n<span class=\"token comment\">#触发backup的动作，源文件内容被修改，对源文件进行backup</span>\n<span class=\"token keyword\">with</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>files<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[INFO] task is started...\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>fileinput<span class=\"token punctuation\">.</span>lineno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">行: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>line<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[INFO] task is closed...\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果</p>\n<p><img alt=\"\" src=\"image\\fb4eed1949d448ea92c696635d47c637.png\"/></p>\n<p>注</p>\n<p>通过运行结果，可以看到：</p>\n<ul><li>在 for 循环体内的 print 内容会写回到原文件中了。</li><li>而在 for 循环体外的 print 则没有变化。</li></ul>\n<h2><a id=\"7_229\"></a>7、进阶</h2>\n<p><strong>openhook含义解析</strong></p>\n<ul><li>在 fileinput.input() 中有一个 openhook 的参数，它支持用户传入自定义的对象读取方法；</li><li>如果没有传入任何勾子，fileinput 默认使用的是 open 函数；</li></ul>\n<p><strong>方法介绍</strong></p>\n<p>fileinput 内置了两种勾子</p>\n<p>1、fileinput.hook_compressed(filename, mode)</p>\n<ul><li>使用 gzip 和 bz2 模块透明地打开 gzip 和 bzip2 压缩的文件（通过扩展名 ‘.gz’ 和 ‘.bz2’ 来识别）；</li><li>如果文件扩展名不是 ‘.gz’ 或 ‘.bz2’，文件会以正常方式打开（即使用 open() 并且不带任何解压操作）；</li><li>使用示例: fi = fileinput.FileInput(openhook=fileinput.hook_compressed)</li></ul>\n<p>2、fileinput.hook_encoded(encoding, errors=None)</p>\n<ul><li>返回一个通过 open() 打开每个文件的钩子，使用给定的 encoding 和 errors 来读取文件。</li><li>使用示例: fi = fileinput.FileInput(openhook=fileinput.hook_encoded(“utf-8”, “surrogateescape”))</li></ul>\n<p><strong>示例实战</strong></p>\n<p>假如我想要使用 fileinput 来读取网络上的文件，思路：</p>\n<ul><li>先使用 requests 下载文件到本地</li><li>再使用 open 去读取它；</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">online_open</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> requests\n    r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> \n    filename <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f1<span class=\"token punctuation\">:</span>\n        f1<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    f2 <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> f2\n</code></pre>\n<p>直接将这个函数传给 openhook 即可：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding:utf-8 -*-</span>\n<span class=\"token comment\"># @Time   : 2022-07-23</span>\n<span class=\"token comment\"># @Author : carl_DJ</span>\n\n<span class=\"token keyword\">import</span> fileinput\nfile_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.csdn.net/robots.txt'</span>\n<span class=\"token keyword\">with</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>files<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>file_url<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> openhook<span class=\"token operator\">=</span>online_open<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码整合：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding:utf-8 -*-</span>\n<span class=\"token comment\"># @Time   : 2022-07-23</span>\n<span class=\"token comment\"># @Author : carl_DJ</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">online_open</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> requests\n    r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    filename <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f1<span class=\"token punctuation\">:</span>\n        f1<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    f2 <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> f2\n\n<span class=\"token keyword\">import</span> fileinput\nfile_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.csdn.net/robots.txt'</span>\n<span class=\"token keyword\">with</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>files<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>file_url<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> openhook<span class=\"token operator\">=</span>online_open<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>小伙伴们在学习Python的过程中，有时候不知道怎么学，从哪里开始学。掌握了一些基本的知识或者做了一些案例后，不知道下一步怎么走，不知道如何去学习更加高深的知识。<br/> 那么对于这些大兄弟们，我准备了大量的免费视频教程，PDF电子书籍，以及源代码！<br/> 点击 <a href=\"http://m6z.cn/5PG6Jj\"><strong>蓝色字体</strong></a> 自取，我都放在这里了。<br/> 还会有大佬解答！</p>\n</blockquote>\n<p>运行结果</p>\n<p><img alt=\"\" src=\"image\\9f5b0fe5685d4e9b86c812ae22ece78c.png\"/></p>\n<h1><a id=\"_318\"></a>总结</h1>\n<p>关于fileinput的介绍，也就介绍到这里。</p>\n<p>fileinput本身是对 open 函数的再次封装，所以在读取的cc部分，就比open显得更专业，更优雅，这也是仅限于读取的方面。<br/> 在写的方面，相对于open，就不是那么的强悍。</p>\n<p>归根结底，fileinput还是一个不错的方法。值得你拥有。</p>\n<p>最后，再给大家推荐一套Python爬虫教程：<a href=\"https://www.bilibili.com/video/BV1SA4y1976A\">代码总是学完就忘记？100个爬虫实战项目！让你沉迷学习丨学以致用丨下一个Python大神就是你！<br/> </a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}