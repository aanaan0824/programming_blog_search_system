{"blogid": "126703180", "writerAge": "码龄1年", "writerBlogNum": "58", "writerCollect": "701", "writerComment": "2013", "writerFan": "2374", "writerGrade": "5级", "writerIntegral": "3419", "writerName": "小奔同学", "writerProfileAdress": "writer_image\\profile_126703180.jpg", "writerRankTotal": "7841", "writerRankWeekly": "13163", "writerThumb": "1400", "writerVisitNum": "64041", "blog_read_count": "217", "blog_time": "于 2022-09-06 08:08:41 发布", "blog_title": "用动图详细讲解——栈", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>栈</h3>\n<ul><li><ul><li><ul><li><a href=\"#_1\">栈的概念：</a></li><li><ul><li><ul><li><a href=\"#_4\">栈：</a></li><li><a href=\"#_12\">栈顶和栈底</a></li><li><a href=\"#_25\">压栈和出栈</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_33\">栈的实现</a></li><li><ul><li><ul><li><a href=\"#_52\">用结构体自定义一个栈的数据类型</a></li><li><a href=\"#_73\">初始化栈</a></li><li><a href=\"#_91\">检测栈的容量是否充足(不充足进行扩容)</a></li><li><a href=\"#_129\">入栈</a></li><li><a href=\"#00_146\">检测栈是否为空(为空返回非0结果，不为空返回0）</a></li><li><a href=\"#_158\">出栈</a></li><li><a href=\"#_173\">获取栈顶元素</a></li><li><a href=\"#_188\">获取栈中有效元素个数</a></li><li><a href=\"#_202\">销毁栈</a></li></ul>\n</li></ul>\n</li><li><a href=\"#C_216\">C语言实现栈的具体代码</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"_1\"></a>栈的概念：</h3>\n<hr/>\n<h5><a id=\"_4\"></a>栈：</h5>\n<p><strong>一种特殊的线性表，其只允许在固定的一端进行插入和删除元素操作，是操作受到限制的线性表，遵行后进先出LIFO（Last In First Out）的原则。</strong></p>\n<p>简单理解就是一个<strong>一端封口，另一端没有封口</strong>的管子，你往里面放直径与管子的直径相同的球，不管你放多少球，你先取的一定是最后放的球，最里面的球要把前面的球全部取出来才能取到。这个<strong>管子里的空间</strong>就相当于<strong>栈的空间</strong>，<strong>球</strong>就相当于你所要<strong>放入栈的数据</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\817099b37a07441a96d8db1008f3f1f6.jpeg\"/></p>\n<hr/>\n<h5><a id=\"_12\"></a>栈顶和栈底</h5>\n<p><strong>进行数据插入和删除操作的一端称为栈顶，另一端称为栈底，非空栈中的栈顶指针始终在栈顶元素的下一个位置上，空栈时，栈顶指针和栈底指针指向同一块位置。</strong></p>\n<p>借助管子和球的例子，简单理解就是管子封口那里就是栈底，管子中最外层的球的下一个可以存放球的空间，但还没有存放球的位置就是栈顶，<strong>不能</strong>直接理解为管口就是栈顶。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a7de4a76b3a94e5c81ead363bdcfd944.png\"/></p>\n<p>当管子中没有球时（空栈），栈顶和栈底所指向的位置相等，都指向管子最里面所能存放一个球的空间</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\455bbbe22dd84be78ace2e7426afdc70.png\"/></p>\n<hr/>\n<h5><a id=\"_25\"></a>压栈和出栈</h5>\n<p><strong>栈的插入操作叫做进栈/压栈/入栈，入数据在栈顶，栈的删除操作叫做出栈。出数据也在栈顶。</strong></p>\n<p>入栈gif动画<br/> <img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/da486f85bed54f77be32e80e50a9e7b9.gif\"/><br/> 出栈gif动画<img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/aeab5494b3954c2d97c7c349f4b05bfd.gif\"/></p>\n<hr/>\n<h3><a id=\"_33\"></a>栈的实现</h3>\n<p>栈的实现一般可以使用数组或者链表实现，相对而言<strong>数组的结构实现更优一些</strong>。因为数组在尾部插入数据的代价比较小，可以根据下标直接锁定尾部。<br/> 用链表(无头单向非循环链表)在尾部插入数据的代价比较大，需要先遍历一遍才能找到尾部，但也不是不可以，不过尽量用数组比较好一些。</p>\n<p>对于栈的实现，有这几个功能，</p>\n<ol><li>初始化栈</li><li>检测栈的容量是否充足(不充足进行扩容)</li><li>入栈</li><li>出栈</li><li>获取栈顶元素</li><li>获取栈中有效元素个数</li><li>检测栈是否为空(为空返回非0结果，不为空返回0）</li><li>销毁栈</li></ol>\n<p>我们将用函数对这些功能进行封装</p>\n<hr/>\n<h5><a id=\"_52\"></a>用结构体自定义一个栈的数据类型</h5>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 支持动态增长的栈</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> STDataType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSTDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 栈顶</span>\n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 容量 </span>\n<span class=\"token punctuation\">}</span>Stack<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>因为我们不知道存放在栈中的数据的类型，所以将存放数据的类型用<code>typedef</code>重命名为<code>STDataType</code>，以方便随时更改。（这里我们存放数据的类型是<code>int</code>）</p>\n<p><code>Stack</code>就是我们定义并重命名的栈的数据类型<br/> <code>STDataType* a</code>指向栈用数组存放数据的地方起始位置，即栈底<br/> <code>top</code>是栈顶，也是用来访问数组尾部的下标<br/> <code>capacity</code>是栈的容量，指栈所能容纳多少的数据</p>\n<hr/>\n<h5><a id=\"_73\"></a>初始化栈</h5>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>将栈的地址传过来，对其成员进行初始化</p>\n<p><code>assert(ps)</code>对传过来的地址进行空指针的判断，因为传过来的地址不能为空<br/> <code>ps-&gt;a = NULL</code>将指针为空，表明栈的容量为0<br/> <code>ps-&gt;top = ps-&gt;capacity = 0</code>top记录栈顶位置，capacity记录栈的容量，当容量不足时(也就是ps-&gt;top == ps-&gt;capacity)进行扩容</p>\n<hr/>\n<h5><a id=\"_91\"></a>检测栈的容量是否充足(不充足进行扩容)</h5>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">CheckCapacity</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传过来的指针不能为空</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span><span class=\"token comment\">//相等表明容量不足</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//创建一个新的变量，表示新的容量</span>\n\t\t<span class=\"token keyword\">int</span> newcapacity <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//对容量的不足类型判断：</span>\n\t\t<span class=\"token comment\">//第一种是未扩容过的空栈，则扩容为4个空间；</span>\n\t\t<span class=\"token comment\">//第二种是扩容过，但是容量不足，则扩容为原来容量的二倍</span>\n\t\tnewcapacity <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> newcapacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">//使用realloc函数对ps-&gt;a扩容为sizeof(STDataType) * newcapacity个字节的空间，并把扩容后空间的起始地址保存在tmp</span>\n\t\tSTDataType<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>STDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STDataType<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> newcapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//判断是否扩容成功，不成功则停止运行并报错</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"realloc fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tps<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span><span class=\"token comment\">//将扩容后空间的起始地址重新赋予给ps-&gt;a</span>\n\t\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> newcapacity<span class=\"token punctuation\">;</span><span class=\"token comment\">//把新的容量记录到ps的成员capacity中</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>未扩容过的空栈<br/> <img alt=\"在这里插入图片描述\" src=\"image\\abbbbe7f8489476cbee317eea6ee1dab.png\"/><br/> 扩容过的栈<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9564db0d9ad24fb8a84b2f56f8754410.png\"/><br/> 注：栈空间起始位置的下标为0</p>\n<hr/>\n<h5><a id=\"_129\"></a>入栈</h5>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> STDataType data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CheckCapacity</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//检查容量，容量不足则扩容</span>\n\n\tps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>ps<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>动画演示举例，对5个数据进行入栈，且此时的栈为空栈：<br/> <img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/c045a382801b48799e3599caff2c9f62.gif\"/></p>\n<hr/>\n<h5><a id=\"00_146\"></a>检测栈是否为空(为空返回非0结果，不为空返回0）</h5>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> ps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//栈顶指向下标0，则栈为空，返回非零，若不指向下标0，则栈不为空，返回假</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h5><a id=\"_158\"></a>出栈</h5>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断栈是否为空，为空则不能出栈</span>\n\n\tps<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>将栈顶<code>top-1</code>即可出栈，类似这个动画，但仅仅是出栈，未对出栈的数据进行存储<br/> <img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/aeab5494b3954c2d97c7c349f4b05bfd.gif\"/></p>\n<hr/>\n<h5><a id=\"_173\"></a>获取栈顶元素</h5>\n<pre><code class=\"prism language-c\">STDataType <span class=\"token function\">StackTop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断栈是否为空，为空则不能获取到元素</span>\n\n\tps<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获得栈顶元素的下标</span>\n\t<span class=\"token keyword\">return</span> ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>ps<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回栈顶的元素</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这一步对出栈的数据进行了返回，可以进行存储出栈返回的数据</p>\n<hr/>\n<h5><a id=\"_188\"></a>获取栈中有效元素个数</h5>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">StackSize</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> ps<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>把栈顶top的存储的下标返回，可获得栈中元素的个数</p>\n<hr/>\n<h5><a id=\"_202\"></a>销毁栈</h5>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">StackDestroy</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//free函数可以将从堆区开辟的空间释放，但不能反复释放，所以需要释放后置为空指针，防止再次释放</span>\n\tps<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//置为NULL，防止重复释放堆区开辟的空间</span>\n\tps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//空间释放，栈的容量为0</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"C_216\"></a>C语言实现栈的具体代码</h3>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//Stack.h</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token comment\">// 支持动态增长的栈</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> STDataType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSTDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 栈顶</span>\n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 容量 </span>\n<span class=\"token punctuation\">}</span>Stack<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 初始化栈 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 入栈 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> STDataType data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 出栈 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取栈顶元素 </span>\nSTDataType <span class=\"token function\">StackTop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取栈中有效元素个数 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">StackSize</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 检测栈是否为空，如果为空返回非零结果，如果不为空返回0 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 销毁栈 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackDestroy</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//Stack.c</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Stack.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">CheckCapacity</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传过来的指针不能为空</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span><span class=\"token comment\">//相等表明容量不足</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//创建一个新的变量，表示新的容量</span>\n\t\t<span class=\"token keyword\">int</span> newcapacity <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//对容量的不足类型判断：</span>\n\t\t<span class=\"token comment\">//第一种是未扩容过的空栈，则扩容为4个空间；</span>\n\t\t<span class=\"token comment\">//第二种是扩容过，但是容量不足，则扩容为原来容量的二倍</span>\n\t\tnewcapacity <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> newcapacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">//使用realloc函数对ps-&gt;a扩容为sizeof(STDataType) * newcapacity个字节的空间，并把扩容后空间的起始地址保存在tmp</span>\n\t\tSTDataType<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>STDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STDataType<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> newcapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//判断是否扩容成功，不成功则停止运行并报错</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"realloc fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tps<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span><span class=\"token comment\">//将扩容后空间的起始地址重新赋予给ps-&gt;a</span>\n\t\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> newcapacity<span class=\"token punctuation\">;</span><span class=\"token comment\">//把新的容量记录到ps的成员capacity中</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> STDataType data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token function\">CheckCapacity</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>ps<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackDestroy</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tps<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> ps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTDataType <span class=\"token function\">StackTop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tps<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>ps<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">StackSize</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> ps<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}