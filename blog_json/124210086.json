{"blogid": "124210086", "writerAge": "码龄2年", "writerBlogNum": "87", "writerCollect": "251", "writerComment": "100", "writerFan": "46", "writerGrade": "4级", "writerIntegral": "1191", "writerName": "旧林墨烟", "writerProfileAdress": "writer_image\\profile_124210086.jpg", "writerRankTotal": "21069", "writerRankWeekly": "281893", "writerThumb": "179", "writerVisitNum": "38232", "blog_read_count": "5691", "blog_time": "已于 2022-04-16 12:18:52 修改", "blog_title": "c++ set用法 入门必看 超详细", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>1、set的作用</strong><br/> set就是集合的意思，集合的特点就是不会出现重复的内容。一般用来作查重或去重操作，举个场景，给出一个表：</p>\n<table><thead><tr><th>姓名</th><th>爱好</th></tr></thead><tbody><tr><td>小明</td><td>打篮球</td></tr><tr><td>小刚</td><td>画画</td></tr><tr><td>小明</td><td>听音乐</td></tr></tbody></table>\n<p>问该表中出现了多少个人，学会了set，就可以很轻松地解决这个问题</p>\n<p><strong>2、set的定义</strong><br/> set&lt;储存的类型&gt; 容器名<br/> 如：<br/> 储存int型的值 set&lt;int&gt; s;<br/> 储存double型的值 set&lt;double&gt; s;<br/> 储存string型的值 set&lt;string&gt; s;<br/> 储存结构体或者类的值的值 set&lt;结构体名&gt; s;</p>\n<p>(1)set的一些基本的成员函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//常用函数（必学）</span>\n<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//插入元素</span>\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//判断容器中是否存在某个元素</span>\n<span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//返回容器的尺寸，也可以元素的个数</span>\n<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//删除集合中某个元素</span>\n<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//清空集合</span>\n<span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//判断是否为空</span>\n<span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//返回第一个节点的迭代器</span>\n<span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//返回最后一个节点加1的迭代器</span>\n<span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//反向迭代器</span>\n<span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//反向迭代器</span>\n\n<span class=\"token comment\">//功能函数（进阶）</span>\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//查找某个指定元素的迭代器</span>\n<span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//二分查找第一个不小于某个值的元素的迭代器</span>\n<span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//返回集合的分配器</span>\n<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//交换两个集合的变量</span>\n<span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//返回集合能容纳元素的最大限值</span>\n</code></pre>\n<p>代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span><span class=\"token comment\">//c++标准头文件，可以使用cout,cin等标准编译用法</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;set&gt;</span><span class=\"token comment\">//使用set需要带上这个文件</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><span class=\"token comment\">//命名空间，防止重名给程序带来各种隐患，使用cin,cout,map,set,vector,queue时都要使用</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//定义 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素1 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素3</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素2</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"现有的元素有\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">:</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//遍历set，注意set会将元素自动排序，插入的顺序是1、3、2，遍历的顺序是1、2、3 </span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span>c<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除元素3</span>\n\t\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"删除元素3后，现有的元素有\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">:</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//遍历set，注意set会将元素自动排序，插入的顺序是1、3、2，遍历的顺序是1、2、3 </span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span>c<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"现在s.size()==\"</span><span class=\"token punctuation\">;</span> \n\tcout<span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",即有两个元素\"</span> <span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"是否包含元素2:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"s.count(2)==\"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"即包含元素2\"</span><span class=\"token punctuation\">;</span> \n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"是否包含元素3:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"s.count(3)==\"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"即不包含元素3\"</span><span class=\"token punctuation\">;</span> \n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"s是否是空的:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"s.empty()==\"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"即s不为空\"</span><span class=\"token punctuation\">;</span> \n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//清空集合 </span>\n\t\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"s是否是空的:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"s.empty()==\"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"即s是空的\"</span><span class=\"token punctuation\">;</span> \n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\n\t\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"s是否是空的:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"s.size()==\"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"即s是空的\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//s.size()==0也可以判断集合是否为空，为了考虑代码可读性，一般不用size()代替empty() </span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-cpp\">现有的元素有\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\n\n删除元素<span class=\"token number\">3</span>后，现有的元素有\n<span class=\"token number\">1</span> <span class=\"token number\">2</span>\n\n现在s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>即有两个元素\n\n是否包含元素<span class=\"token number\">2</span><span class=\"token operator\">:</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span>即包含元素<span class=\"token number\">2</span>\n\n是否包含元素<span class=\"token number\">3</span><span class=\"token operator\">:</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span>即不包含元素<span class=\"token number\">3</span>\n\ns是否是空的<span class=\"token operator\">:</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span>即s不为空\n\ns是否是空的<span class=\"token operator\">:</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span>即s是空的\n\ns是否是空的<span class=\"token operator\">:</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span>即s是空的\n</code></pre>\n<p><strong>3、set的两种遍历方法</strong></p>\n<p>(1)迭代器iterator<br/> 代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;set&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//定义 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素1 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素3</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素2</span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><span class=\"token comment\">//使用迭代器</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\n</code></pre>\n<p>set有一个很重要的特性，那就是自动升序排序，在很多场景可以方便使用，那么当需要降序排序的时候需要怎样呢？<br/> 1、逆向思维<br/> 从end()-1到begin()遍历就是降序的了</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;set&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//定义 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素1 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素3</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素2</span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><span class=\"token comment\">//使用迭代器</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span><span class=\"token operator\">--</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span><span class=\"token operator\">--</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">3</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n</code></pre>\n<p>2、rbegin()和rend()<br/> 逆向迭代器本来就是实现逆向迭代的功能的，下面看用法</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;set&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//定义 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素1 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素3</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素2</span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>reverse_iterator it<span class=\"token punctuation\">;</span><span class=\"token comment\">//使用反向迭代器</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">3</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span>\n</code></pre>\n<p>(2)foreach遍历</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;set&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//定义 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素1 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素3</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素2</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">:</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span>it<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\n</code></pre>\n<p>这种写法简单易记，但是不能实现降序遍历</p>\n<p><strong>课外知识</strong><br/> auto用法，c++auto用法强大，当你无法确定变量的类型时，都可以用auto来代替，迭代器iterator很难记住，其实可以用auto来代替：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;set&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//定义 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素1 </span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素3</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素2</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\n</code></pre>\n<p>是不是很简单呢？</p>\n<p>刚接触肯定会觉得难，多些做题多些用，熟悉了就容易了，兄弟萌，加油！！！</p>\n<p>文章尚有不足，欢迎大牛们指正</p>\n<p>感谢观看，点个赞吧</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}