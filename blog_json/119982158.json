{"blogid": "119982158", "writerAge": "码龄5年", "writerBlogNum": "179", "writerCollect": "5296", "writerComment": "1487", "writerFan": "17465", "writerGrade": "6级", "writerIntegral": "7089", "writerName": "李子捌", "writerProfileAdress": "writer_image\\profile_119982158.jpg", "writerRankTotal": "21588", "writerRankWeekly": "4620", "writerThumb": "2162", "writerVisitNum": "752928", "blog_read_count": "28025", "blog_time": "于 2021-08-29 16:45:43 发布", "blog_title": "布隆(Bloom Filter)过滤器——全面讲解，建议收藏", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"text-align:center;\"><strong>本文已收录于专栏</strong></p>\n<p style=\"text-align:center;\"><a href=\"https://blog.csdn.net/qq_41125219/category_11179094.html\">❤️《Redis之大厂必备技能包》❤️</a></p>\n<p style=\"text-align:center;\"><strong>欢迎各位关注、三连博主的文章及专栏，全套Redis学习资料，大厂必备技能！</strong></p>\n<hr/>\n<p> <strong>目录</strong></p>\n<p id=\"h1-toc\" style=\"margin-left:40px;\"><a href=\"#h1\">1、什么是布隆过滤器</a></p>\n<p id=\"h2-toc\" style=\"margin-left:40px;\"><a href=\"#h2\">2、布隆过滤器的使用场景</a></p>\n<p id=\"h3-toc\" style=\"margin-left:40px;\"><a href=\"#h3\">3、布隆过滤器的原理</a></p>\n<p id=\"h31-toc\" style=\"margin-left:80px;\"><a href=\"#h31\">3.1 数据结构</a></p>\n<p id=\"h32-toc\" style=\"margin-left:80px;\"><a href=\"#h32\">3.2 空间计算</a></p>\n<p id=\"h33-toc\" style=\"margin-left:80px;\"><a href=\"#h33\">3.3 增加元素</a></p>\n<p id=\"h34-toc\" style=\"margin-left:80px;\"><a href=\"#h34\">3.4 查询元素</a></p>\n<p id=\"h35-toc\" style=\"margin-left:80px;\"><a href=\"#h35\">3.5 修改元素</a></p>\n<p id=\"h36-toc\" style=\"margin-left:80px;\"><a href=\"#h36\">3.6 删除元素</a></p>\n<p id=\"h4redis-toc\" style=\"margin-left:40px;\"><a href=\"#h4redis\">4、Redis集成布隆过滤器</a></p>\n<p id=\"h41-toc\" style=\"margin-left:80px;\"><a href=\"#h41\">4.1 版本要求</a></p>\n<p id=\"h42-toc\" style=\"margin-left:80px;\"><a href=\"#h42\">4.2 安装&amp;编译</a></p>\n<p id=\"h43redis-toc\" style=\"margin-left:80px;\"><a href=\"#h43redis\">4.3 Redis集成</a></p>\n<p id=\"h5redis-toc\" style=\"margin-left:40px;\"><a href=\"#h5redis\">5、Redis中布隆过滤器指令使用</a></p>\n<p id=\"h51bfadd-toc\" style=\"margin-left:80px;\"><a href=\"#h51bfadd\">5.1 bf.add</a></p>\n<p id=\"h52bfmadd-toc\" style=\"margin-left:80px;\"><a href=\"#h52bfmadd\">5.2 bf.madd</a></p>\n<p id=\"h53bfexists-toc\" style=\"margin-left:80px;\"><a href=\"#h53bfexists\">5.3 bf.exists</a></p>\n<p id=\"h53bfmexists-toc\" style=\"margin-left:80px;\"><a href=\"#h53bfmexists\">5.3 bf.mexists</a></p>\n<p id=\"h6java-toc\" style=\"margin-left:40px;\"><a href=\"#h6java\">6、Java本地内存使用布隆过滤器</a></p>\n<p id=\"h61pom-toc\" style=\"margin-left:80px;\"><a href=\"#h61pom\">6.1 引入pom依赖</a></p>\n<p id=\"h62-toc\" style=\"margin-left:80px;\"><a href=\"#h62\">6.2 编写测试代码</a></p>\n<p id=\"h63-toc\" style=\"margin-left:80px;\"><a href=\"#h63\">6.3 测试结果</a></p>\n<p id=\"h64-toc\" style=\"margin-left:80px;\"><a href=\"#h64\">6.4 参数说明</a></p>\n<p id=\"h65fppexpectedinsertions-toc\" style=\"margin-left:80px;\"><a href=\"#h65fppexpectedinsertions\">6.5 fpp&amp;expectedInsertions</a></p>\n<p id=\"h7javaredis-toc\" style=\"margin-left:40px;\"><a href=\"#h7javaredis\">7、Java集成Redis使用布隆过滤器</a></p>\n<p id=\"h71pom-toc\" style=\"margin-left:80px;\"><a href=\"#h71pom\">7.1 引入pom依赖</a></p>\n<p id=\"h72-toc\" style=\"margin-left:80px;\"><a href=\"#h72\">7.2 编写测试代码</a></p>\n<p id=\"h73-toc\" style=\"margin-left:80px;\"><a href=\"#h73\">7.3 测试结果</a></p>\n<hr id=\"hr-toc\"/>\n<h2 id=\"h1\">1、什么是布隆过滤器</h2>\n<p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。<br/> ​</p>\n<p>上面这句介绍比较全面的描述了什么是布隆过滤器，如果还是不太好理解的话，就可以把布隆过滤器理解为一个set集合，我们可以通过add往里面添加元素，通过contains来判断是否包含某个元素。由于本文讲述布隆过滤器时会结合Redis来讲解，因此类比为Redis中的Set数据结构会比较好理解，而且Redis中的布隆过滤器使用的指令与Set集合非常类似（后续会讲到）。<br/> ​</p>\n<p>学习布隆过滤器之前有必要先聊下它的优缺点，因为好的东西我们才想要嘛！<br/><strong>布隆过滤器的优点：</strong></p>\n<ul><li>时间复杂度低，增加和查询元素的时间复杂为O(N)，（N为哈希函数的个数，通常情况比较小）</li><li>保密性强，布隆过滤器不存储元素本身</li><li>存储空间小，如果允许存在一定的误判，布隆过滤器是非常节省空间的（相比其他数据结构如Set集合）</li></ul>\n<p><strong>布隆过滤器的缺点：</strong></p>\n<ul><li>有点一定的误判率，但是可以通过调整参数来降低</li><li>无法获取元素本身</li><li>很难删除元素</li></ul>\n<h2 id=\"h2\">2、布隆过滤器的使用场景</h2>\n<p>布隆过滤器可以告诉我们 <strong>“某样东西一定不存在或者可能存在”，也就是说布隆过滤器说这个数不存在则一定不存，布隆过滤器说这个数存在可能不存在</strong>（误判，后续会讲），**利用这个判断是否存在的特点可以做很多有趣的事情。</p>\n<ul><li><strong>解决Redis缓存穿透问题（面试重点）</strong></li><li>邮件过滤，使用布隆过滤器来做邮件黑名单过滤</li><li>对爬虫网址进行过滤，爬过的不再爬</li><li>解决新闻推荐过的不再推荐(类似抖音刷过的往下滑动不再刷到)</li><li>HBase\\RocksDB\\LevelDB等数据库内置布隆过滤器，用于判断数据是否存在，可以减少数据库的IO请求</li></ul>\n<h2 id=\"h3\">3、布隆过滤器的原理</h2>\n<h3 id=\"h31\">3.1 数据结构</h3>\n<p>布隆过滤器它实际上是一个很长的二进制向量和一系列随机映射函数。以Redis中的布隆过滤器实现为例，Redis中的布隆过滤器底层是<strong>一个大型位数组（二进制数组）+多个无偏hash函数。</strong><br/><strong>一个大型位数组（二进制数组）</strong>：</p>\n<p style=\"text-align:center;\"><img alt=\"位数组.png\" src=\"image\\e94e504adc5a75a2d7f562dc44166511.png\"/></p>\n<p><br/><strong>多个无偏hash函数：</strong><br/> 无偏hash函数就是能把元素的hash值计算的比较均匀的hash函数，能使得计算后的元素下标比较均匀的映射到位数组中。</p>\n<p>如下就是一个简单的布隆过滤器示意图，其中k1、k2代表增加的元素，a、b、c即为无偏hash函数，最下层则为二进制数组。</p>\n<p style=\"text-align:center;\"><img alt=\"布隆过滤器.png\" src=\"image\\9ebde5c11ad69447314c216acf188fc8.png\"/></p>\n<h3 id=\"h32\">3.2 空间计算</h3>\n<p>在布隆过滤器增加元素之前，首先需要初始化布隆过滤器的空间，也就是上面说的二进制数组，除此之外还需要计算无偏hash函数的个数。布隆过滤器提供了两个参数，分别是预计加入元素的大小n，运行的错误率f。布隆过滤器中有算法根据这两个参数会计算出二进制数组的大小l，以及无偏hash函数的个数k。<br/> 它们之间的关系比较简单：</p>\n<ul><li>错误率越低，位数组越长，控件占用较大</li><li>错误率越低，无偏hash函数越多，计算耗时较长</li></ul>\n<p><strong>如下地址是一个免费的在线布隆过滤器在线计算的网址：</strong></p>\n<blockquote>\n<p><a href=\"https://krisives.github.io/bloom-calculator/\">https://krisives.github.io/bloom-calculator/</a></p>\n</blockquote>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\d9cce086a7b9da8afeeb752bdbe8f96e.png\"/></p>\n<h3 id=\"h33\">3.3 增加元素</h3>\n<p>往布隆过滤器增加元素，添加的key需要根据k个无偏hash函数计算得到多个hash值，然后对数组长度进行取模得到数组下标的位置，然后将对应数组下标的位置的值置为1</p>\n<ul><li>通过k个无偏hash函数计算得到k个hash值</li><li>依次取模数组长度，得到数组索引</li><li>将计算得到的数组索引下标位置数据修改为1</li></ul>\n<p>例如，key = Liziba，无偏hash函数的个数k=3，分别为hash1、hash2、hash3。三个hash函数计算后得到三个数组下标值，并将其值修改为1.<br/> 如图所示：</p>\n<p style=\"text-align:center;\"><img alt=\"增加元素.png\" src=\"image\\a3e7d217ecb825e94bdc577a467eb29d.png\"/></p>\n<h3 id=\"h34\">3.4 查询元素</h3>\n<p>布隆过滤器最大的用处就在于判断某样东西一定不存在或者可能存在，而这个就是查询元素的结果。其查询元素的过程如下：</p>\n<ul><li>通过k个无偏hash函数计算得到k个hash值</li><li>依次取模数组长度，得到数组索引</li><li>判断索引处的值是否全部为1，如果全部为1则存在（这种存在可能是误判），如果存在一个0则必定不存在</li></ul>\n<p><strong>关于误判</strong>，其实非常好理解，hash函数在怎么好，也无法完全避免hash冲突，也就是说可能会存在多个元素计算的hash值是相同的，那么它们取模数组长度后的到的数组索引也是相同的，这就是误判的原因。例如李子捌和李子柒的hash值取模后得到的数组索引都是1，但其实这里只有李子捌，如果此时判断李子柒在不在这里，误判就出现啦！因此布隆过滤器最大的缺点误判只要知道其判断元素是否存在的原理就很容易明白了！</p>\n<h3 id=\"h35\">3.5 修改元素</h3>\n<p>无<br/> ​</p>\n<h3 id=\"h36\">3.6 删除元素</h3>\n<p>布隆过滤器对元素的删除不太支持，目前有一些变形的特定布隆过滤器支持元素的删除！关于为什么对删除不太支持，其实也非常好理解，hash冲突必然存在，删除肯定是很苦难的！<br/> ​</p>\n<h2 id=\"h4redis\">4、Redis集成布隆过滤器</h2>\n<h3 id=\"h41\">4.1 版本要求</h3>\n<ul><li><strong>推荐版本6.x，最低4.x版本，可以通过如下命令查看版本：</strong></li></ul>\n<pre><code>redis-server -v\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\6e773444634fc627a5aaab6263fbf848.png\"/></p>\n<p></p>\n<ul><li><strong>插件安装，网上大部分推荐v1.1.1，文章写的时候v2.2.6已经是release版本了，用户自己选择，地址全在下面(2.2.6官网介绍说是1.0版本的维护版本，如果不想使用新的功能，无需升级！)</strong></li></ul>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\f57516a57df20da8b8aa92145e72ce62.png\"/></p>\n<p><br/><strong>v1.1.1</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/RedisLabsModules/rebloom/archive/v1.1.1.tar.gz\">https://github.com/RedisLabsModules/rebloom/archive/v1.1.1.tar.gz</a></p>\n</blockquote>\n<p><strong>v2.2.6</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/RedisLabsModules/rebloom/archive/v2.2.6.tar.gz\">https://github.com/RedisLabsModules/rebloom/archive/v2.2.6.tar.gz</a></p>\n</blockquote>\n<h3 id=\"h42\">4.2 安装&amp;编译</h3>\n<p>以下安装全部在指定目录下完成，可以选择一个合适的统一目录进行软件安装和管理。</p>\n<p><strong>4.2.1 下载插件压缩包</strong></p>\n<pre><code>wget https://github.com/RedisLabsModules/rebloom/archive/v2.2.6.tar.gz\n</code></pre>\n<p><strong>4.2.2 解压</strong></p>\n<pre><code>tar -zxvf v2.2.6.tar.gz\n</code></pre>\n<p><strong>4.2.3 编译插件</strong></p>\n<pre><code>cd RedisBloom-2.2.6/\nmake\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\f11054f4f831b629a46b3d4e727b4c6d.png\"/></p>\n<p>编译成功后看到redisbloom.so文件即可<br/> ​</p>\n<h3 id=\"h43redis\">4.3 Redis集成</h3>\n<p><strong>4.3.1 Redis配置文件修改</strong></p>\n<ul><li>在<strong>redis.conf配置文件</strong>中加入如RedisBloom的redisbloom.so文件的地址</li><li>如果是<strong>集群</strong>则每个配置文件中都需要加入redisbloom.so文件的地址</li><li>添加完成后需要<strong>重启redis</strong></li></ul>\n<pre><code>loadmodule /usr/local/soft/RedisBloom-2.2.6/redisbloom.so\n</code></pre>\n<p><strong>redis.conf配置文件中预置了loadmodule的配置项，我们可以直接在这里修改，后续修改会更加方便。</strong></p>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\f69019f455492424ccb0fb7082ceb677.png\"/></p>\n<p>保存退出后一定要记得重启Redis！<br/> 保存退出后一定要记得重启Redis！<br/> 保存退出后一定要记得重启Redis！</p>\n<p></p>\n<p><strong>4.3.2 测试是否成功</strong></p>\n<p>Redis集成布隆过滤器的主要指令如下：</p>\n<ul><li>bf.add 添加一个元素</li><li>bf.exists 判断一个元素是否存在</li><li>bf.madd 添加多个元素</li><li>bf.mexists 判断多个元素是否存在</li></ul>\n<p>连接客户端进行测试，如果指令有效则证明集成成功</p>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\93ff2593a25df2d2e0df237eb54ee2ab.png\"/></p>\n<p>如果出现如下情况(error) ERR unknown command ，可以通过如下方法检查：</p>\n<ul><li>SHUTDOWN Redis实例，再重启实例，再次测试</li><li>检查配置文件是否配置redisbloom.so文件地址正确</li><li>检查Redis的版本是否过低</li></ul>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\0e82b96e2fe2f9bc869f10a0709a8677.png\"/></p>\n<p></p>\n<h2 id=\"h5redis\">5、Redis中布隆过滤器指令使用</h2>\n<h3 id=\"h51bfadd\">5.1 bf.add</h3>\n<p>bf.add表示添加单个元素，添加成功返回1</p>\n<pre><code>127.0.0.1:6379&gt; bf.add name liziba\n(integer) 1\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\3c51b61f0d3eb3cb36e5bd0dd00c1b97.png\"/></p>\n<p></p>\n<h3 id=\"h52bfmadd\">5.2 bf.madd</h3>\n<p>bf.madd表示添加多个元素</p>\n<pre><code>127.0.0.1:6379&gt; bf.madd name liziqi lizijiu lizishi\n1) (integer) 1\n2) (integer) 1\n3) (integer) 1\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\c0979853a63483b4b96a64013e24c216.png\"/></p>\n<h3 id=\"h53bfexists\">5.3 bf.exists</h3>\n<p>bf.exists表示判断元素是否存在，存在则返回1，不存在返回0</p>\n<pre><code>127.0.0.1:6379&gt; bf.mexists name liziba\n1) (integer) 1\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\4f483f31376dc8f1d60445e1be00c5d6.png\"/></p>\n<h3 id=\"h53bfmexists\">5.3 bf.mexists</h3>\n<p>bf.mexists表示判断多个元素是否存在，存在的返回1，不存在的返回0</p>\n<pre><code>127.0.0.1:6379&gt; bf.mexists name liziqi lizijiu liziliu\n1) (integer) 1\n2) (integer) 1\n3) (integer) 0\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\d5c0a83cd3b23fdb566537a5baeebaa1.png\"/></p>\n<h2 id=\"h6java\">6、Java本地内存使用布隆过滤器</h2>\n<p>使用布隆过滤器的方式有很多，还有很多大佬自己手写的，我这里使用的是谷歌guava包中实现的布隆过滤器，这种方式的布隆过滤器是在本地内存中实现。</p>\n<h3 id=\"h61pom\">6.1 引入pom依赖</h3>\n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;29.0-jre&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"h62\">6.2 编写测试代码</h3>\n<pre><code>package com.lizba.bf;\n\nimport com.google.common.hash.BloomFilter;\nimport com.google.common.hash.Funnels;\n\n/**\n * &lt;p&gt;\n *        布隆过滤器测试代码\n * &lt;/p&gt;\n *\n * @Author: Liziba\n * @Date: 2021/8/29 14:51\n */\npublic class BloomFilterTest {\n\n    /** 预计插入的数据 */\n    private static Integer expectedInsertions = 10000000;\n    /** 误判率 */\n    private static Double fpp = 0.01;\n    /** 布隆过滤器 */\n    private static BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), expectedInsertions, fpp);\n\n    public static void main(String[] args) {\n        // 插入 1千万数据\n        for (int i = 0; i &lt; expectedInsertions; i++) {\n            bloomFilter.put(i);\n        }\n\n        // 用1千万数据测试误判率\n        int count = 0;\n        for (int i = expectedInsertions; i &lt; expectedInsertions *2; i++) {\n            if (bloomFilter.mightContain(i)) {\n                count++;\n            }\n        }\n        System.out.println(\"一共误判了：\" + count);\n\n    }\n\n}\n</code></pre>\n<h3 id=\"h63\">6.3 测试结果</h3>\n<p>误判了100075次，大概是expectedInsertions（1千万）的0.01，这与我们设置的 <em>fpp </em>= 0.01非常接近。</p>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\dfac339413b1b414a07dd6841f25f624.png\"/></p>\n<h3 id=\"h64\">6.4 参数说明</h3>\n<p>在guava包中的BloomFilter源码中，构造一个BloomFilter对象有四个参数：</p>\n<ul><li><strong>Funnel funnel：</strong>数据类型，由Funnels类指定即可</li><li><strong>long expectedInsertions：</strong>预期插入的值的数量</li><li><strong>fpp：</strong>错误率</li><li><strong>BloomFilter.Strategy：</strong>hash算法</li></ul>\n<h3 id=\"h65fppexpectedinsertions\">6.5 fpp&amp;expectedInsertions</h3>\n<ul><li>当expectedInsertions=10000000&amp;&amp;fpp=0.01时，位数组的大小numBits=95850583，hash函数的个数numHashFunctions=7</li></ul>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\d19ea61540f341245d0a43f6997c94a3.png\"/></p>\n<ul><li>当expectedInsertions=10000000&amp;&amp;fpp=0.03时，位数组的大小numBits=72984408，hash函数的个数numHashFunctions=5</li></ul>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\2452aa80a08537832253d17c9750398d.png\"/></p>\n<ul><li>当expectedInsertions=100000&amp;&amp;fpp=0.03时，位数组的大小numBits=729844，hash函数的个数numHashFunctions=5</li></ul>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\e23d57abceb6ff575fdb12b819502f1f.png\"/></p>\n<p>综上三次测试可以得出如下结论：</p>\n<ul><li>当预计插入的值的数量不变时，偏差值fpp越小，位数组越大，hash函数的个数越多</li><li>当偏差值不变时，预计插入的中的数量越大，位数组越大，hash函数并没有变化（注意这个结论只是在guava实现的布隆过滤器中的算法符合，并不是说所有的算法都是这个结论，我做了多次测试，确实numHashFunctions在fpp相同时，是不变的！）</li></ul>\n<h2 id=\"h7javaredis\">7、Java集成Redis使用布隆过滤器</h2>\n<p>Redis经常会被问道缓存击穿问题，比较优秀的解决办法是使用布隆过滤器，也有使用空对象解决的，但是最好的办法肯定是布隆过滤器，我们可以通过布隆过滤器来判断元素是否存在，避免缓存和数据库都不存在的数据进行查询访问！在如下的代码中只要通过bloomFilter.contains(xxx)即可，我这里演示的还是误判率！</p>\n<h3 id=\"h71pom\">7.1 引入pom依赖</h3>\n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.redisson&lt;/groupId&gt;\n  &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;3.16.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"h72\">7.2 编写测试代码</h3>\n<pre><code>package com.lizba.bf;\n\nimport org.redisson.Redisson;\nimport org.redisson.api.RBloomFilter;\nimport org.redisson.api.RedissonClient;\nimport org.redisson.config.Config;\n\n/**\n * &lt;p&gt;\n *      Java集成Redis使用布隆过滤器防止缓存穿透方案\n * &lt;/p&gt;\n *\n * @Author: Liziba\n * @Date: 2021/8/29 16:13\n */\npublic class RedisBloomFilterTest {\n\n    /** 预计插入的数据 */\n    private static Integer expectedInsertions = 10000;\n    /** 误判率 */\n    private static Double fpp = 0.01;\n\n    public static void main(String[] args) {\n        // Redis连接配置，无密码\n        Config config = new Config();\n        config.useSingleServer().setAddress(\"redis://192.168.211.108:6379\");\n        // config.useSingleServer().setPassword(\"123456\");\n\n        // 初始化布隆过滤器\n        RedissonClient client = Redisson.create(config);\n        RBloomFilter&lt;Object&gt; bloomFilter = client.getBloomFilter(\"user\");\n        bloomFilter.tryInit(expectedInsertions, fpp);\n\n        // 布隆过滤器增加元素\n        for (Integer i = 0; i &lt; expectedInsertions; i++) {\n            bloomFilter.add(i);\n        }\n\n        // 统计元素\n        int count = 0;\n        for (int i = expectedInsertions; i &lt; expectedInsertions*2; i++) {\n            if (bloomFilter.contains(i)) {\n                count++;\n            }\n        }\n        System.out.println(\"误判次数\" + count);\n\n    }\n\n}\n</code></pre>\n<h3 id=\"h73\">7.3 测试结果</h3>\n<p style=\"text-align:center;\"><img alt=\"image.png\" src=\"image\\8ef4dd0de55a1da3d9d66298ddbd9d3f.png\"/></p>\n</div>\n</div>"}