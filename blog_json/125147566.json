{"blogid": "125147566", "writerAge": "码龄3年", "writerBlogNum": "174", "writerCollect": "143", "writerComment": "41", "writerFan": "89", "writerGrade": "5级", "writerIntegral": "1828", "writerName": "一只爱吃萝卜的小兔子", "writerProfileAdress": "writer_image\\profile_125147566.jpg", "writerRankTotal": "11118", "writerRankWeekly": "34413", "writerThumb": "36", "writerVisitNum": "81405", "blog_read_count": "2221", "blog_time": "已于 2022-06-07 15:43:07 修改", "blog_title": "前端之vue3使用WebSocket", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>vue3使用WebSocket</h3>\n<ul><li><a href=\"#WebSocket_1\">WebSocket</a></li><li><ul><li><a href=\"#WebSocket_2\">WebSocket说明</a></li><li><a href=\"#WebSocket_4\">WebSocket图示</a></li></ul>\n</li><li><a href=\"#WebSocket_6\">客户端使用WebSocket</a></li><li><ul><li><a href=\"#vue3_WebSocket_7\">vue3中, 客户端使用WebSocket步骤</a></li><li><a href=\"#_46\">更多方法</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"WebSocket_1\"></a>WebSocket</h1>\n<h2><a id=\"WebSocket_2\"></a>WebSocket说明</h2>\n<p>WebSocket 是全双工网络通信通信协议，实现了客户端和服务器的平等对话，任何一方都可以主动发送数据。并且在第一次建立后，就一直保持连接。</p>\n<h2><a id=\"WebSocket_4\"></a>WebSocket图示</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5b2a54ef4b1c414eaa2a383511079dec.png\"/></p>\n<h1><a id=\"WebSocket_6\"></a>客户端使用WebSocket</h1>\n<h2><a id=\"vue3_WebSocket_7\"></a>vue3中, 客户端使用WebSocket步骤</h2>\n<pre><code class=\"prism language-javascript\">  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 1.建立链接 -- 携带cookie参数</span>\n    <span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ws://localhost:9000/judge/submit?satoken=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>cookieValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 2. ws.send()给服务器发送信息</span>\n    <span class=\"token keyword\">let</span> submitCode <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">problemId</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>problemId<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">isDebug</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">lang</span><span class=\"token operator\">:</span> lang<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> code<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>submitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 3.服务器每次返回信息都会执行一次onmessage方法</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器返回的信息: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> <span class=\"token string\">\"judging\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        showTitleClass<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">;</span>\n        showTitle<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"judging...\"</span><span class=\"token punctuation\">;</span>\n        showRes<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> <span class=\"token string\">\"connected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        showTitleClass<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">;</span>\n        showTitle<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 4.卸载前, 关闭链接</span>\n    <span class=\"token function\">onUnmounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<h2><a id=\"_46\"></a>更多方法</h2>\n<p>使用构造函数,新建ws实例</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 执行完本语句,客户端就会与服务器进行连接。</span>\n<span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wss://echo.websocket.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>连接成功后的回调函数</p>\n<pre><code class=\"prism language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection open ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello WebSockets!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 若需要多个回调  实例.addEventListener</span>\n<span class=\"token comment\">// ws.addEventListener('open', function (event) {<!-- --></span>\n<span class=\"token comment\">//  ws.send('Hello Server!');</span>\n<span class=\"token comment\">// });</span>\n</code></pre>\n<p>用于指定收到服务器数据后的回调函数。<br/> 服务器数据可能是文本，也可能是二进制数据（blob对象或Arraybuffer对象）</p>\n<pre><code class=\"prism language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Received Message: \"</span> <span class=\"token operator\">+</span> evt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>指定连接关闭后的回调函数。用法同open</p>\n<pre><code class=\"prism language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection closed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>      \n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}