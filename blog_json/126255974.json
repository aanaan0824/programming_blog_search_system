{"blogid": "126255974", "writerAge": "码龄1年", "writerBlogNum": "44", "writerCollect": "1193", "writerComment": "2359", "writerFan": "1708", "writerGrade": "5级", "writerIntegral": "4039", "writerName": "蜡笔雏田学前端", "writerProfileAdress": "writer_image\\profile_126255974.jpg", "writerRankTotal": "4551", "writerRankWeekly": "58", "writerThumb": "1242", "writerVisitNum": "122236", "blog_read_count": "3101", "blog_time": "已于 2022-08-29 09:57:41 修改", "blog_title": "《React扩展知识二》PureComponent / render props / Error boundary /组件通信方式总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>前言</strong></p>\n<blockquote>\n<p>博主主页👉🏻<a href=\"https://blog.csdn.net/xuxuii?spm=1011.2415.3001.5343\">蜡笔雏田学代码</a><br/> 专栏链接👉🏻<a href=\"https://blog.csdn.net/xuxuii/category_11838680.html\">React专栏</a><br/> 接上一篇文章<a href=\"https://blog.csdn.net/xuxuii/article/details/126255881?spm=1001.2014.3001.5502\">react的扩展知识</a>，今天来学习React的另外一些扩展知识<br/> 感兴趣的小伙伴一起来看看吧~🤞</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" height=\"80%\" src=\"image\\80cb331b5e1e43ec84eb37d40acad767.jpeg\" width=\"80%\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1__10\">1. 组件优化</a></li><li><ul><li><a href=\"#Component2_12\">Component的2个问题</a></li><li><a href=\"#shouldComponentUpdate_26\">重写shouldComponentUpdate()方法</a></li><li><a href=\"#PureComponent_127\">使用PureComponent</a></li></ul>\n</li><li><a href=\"#2_render_props_159\">2. render props</a></li><li><ul><li><a href=\"#_161\">如何向组件内部动态传入带内容的结构(标签)?</a></li><li><a href=\"#children_props_179\">children props</a></li><li><a href=\"#render_props_231\">render props</a></li></ul>\n</li><li><a href=\"#3_Error_boundary_283\">3. 错误边界Error boundary</a></li><li><ul><li><a href=\"#_285\">理解</a></li><li><a href=\"#_291\">特点</a></li><li><a href=\"#_295\">使用方式</a></li></ul>\n</li><li><a href=\"#4__336\">4. 组件通信方式总结</a></li><li><ul><li><a href=\"#_338\">组件间的关系</a></li><li><a href=\"#_344\">几种通信方式</a></li><li><a href=\"#_356\">比较好的搭配方式</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1__10\"></a>1. 组件优化</h1>\n<h2><a id=\"Component2_12\"></a>Component的2个问题</h2>\n<blockquote>\n<p><code>问题1: </code>只要执行setState()，即使不改变状态数据 ( this.setState({}))，组件也会重新render() ==&gt; 效率低</p>\n<p><code>问题2: </code>只要当前组件重新render()，就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低</p>\n</blockquote>\n<p><strong>效率高的做法</strong></p>\n<blockquote>\n<p>只有<code>当组件的state或props数据发生改变</code>时才重新render()</p>\n</blockquote>\n<p><strong>原因</strong></p>\n<blockquote>\n<p>Component中的<strong>shouldComponentUpdate()总是返回true</strong></p>\n</blockquote>\n<h2><a id=\"shouldComponentUpdate_26\"></a>重写shouldComponentUpdate()方法</h2>\n<blockquote>\n<p><code>问题1: </code>只要执行setState()，即使不改变状态数据 ( this.setState({}))，组件也会重新render() ==&gt; 效率低</p>\n</blockquote>\n<blockquote>\n<p>比较新旧state或props数据，如果有变化才返回true，如果没有返回false</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">carName</span><span class=\"token operator\">:</span> <span class=\"token string\">'奔驰'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">changeCar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//目前的props和state</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span> <span class=\"token comment\">//接下来要变化的目标props，目标state</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>carName <span class=\"token operator\">===</span> nextState<span class=\"token punctuation\">.</span>carName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parent--render'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'parent'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是Parent组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span>我的车名字是：<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>carName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>changeCar<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>点我换车<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>效果</strong><br/> <img alt=\"在这里插入图片描述\" height=\"50%\" src=\"https://img-blog.csdnimg.cn/fcf49f94193043b5876b5e87c6e6f962.gif#pic_center\" width=\"50%\"/></p>\n<blockquote>\n<p>此时在点击完按钮之后，当前组件的state状态并没有发生变化，所以shouldComponentUpdate()里的if判断返回的是false，进而不会引起组件的重新渲染，不会调用render。</p>\n</blockquote>\n<p><code>问题2</code>和问题1一样重写shouldComponentUpdate()方法</p>\n<blockquote>\n<p>问题2: 只要当前组件重新render()，就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">carName</span><span class=\"token operator\">:</span> <span class=\"token string\">'奔驰'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">changeCar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">carName</span><span class=\"token operator\">:</span> <span class=\"token string\">'宝马'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// console.log(this.props, this.state)  //目前的props和state</span>\n    <span class=\"token comment\">// console.log(nextProps, nextState) //接下来要变化的目标props，目标state</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>carName <span class=\"token operator\">===</span> nextState<span class=\"token punctuation\">.</span>carName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parent--render'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'parent'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是Parent组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span>我的车名字是：<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>carName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>changeCar<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>点我换车<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Child carName<span class=\"token operator\">=</span><span class=\"token string\">'奥拓'</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//目前的props和state</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span> <span class=\"token comment\">//接下来要变化的目标props，目标state</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>carName <span class=\"token operator\">===</span> nextProps<span class=\"token punctuation\">.</span>carName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child--render'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'child'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是Child组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span>我接到的车是：<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>carName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>效果</strong><br/> <img alt=\"在这里插入图片描述\" height=\"50%\" src=\"https://img-blog.csdnimg.cn/2f834b8a565742139c7fc448ffbe2b52.gif#pic_center\" width=\"50%\"/></p>\n<blockquote>\n<p>此时子组件接收到的props数据是固定不变的 (<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         &lt;\n        \n       \n       \n        &lt;\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.5782em; vertical-align: -0.0391em;\"></span><span class=\"mrel\">&lt;</span></span></span></span></span>Child carName=‘奥拓’ /&gt;) ，所以子组件里的shouldComponentUpdate()里的if判断返回的是false，进而不会引起子组件的重新渲染，不会调用render。</p>\n</blockquote>\n<h2><a id=\"PureComponent_127\"></a>使用PureComponent</h2>\n<p>当state状态里有多组数据，那么shouldComponentUpdate()里就要进行多个判断，这样显然在真正开发里是不可行的。所以我们可以不用手动写shouldComponentUpdate()方法， <strong>使用PureComponent</strong>， 可以重写shouldComponentUpdate()里的逻辑， 只有state或props数据有变化才返回true。(项目中一般使用PureComponent来优化)</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> PureComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n</code></pre>\n<p>注意! 🔥 PureComponent只是<code>进行state和props数据的浅比较</code>，如果只是数据对象内部数据变了，返回false。 <code>不要直接修改state数据, 而是要产生新数据</code></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//错误写法</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\nobj<span class=\"token punctuation\">.</span>carName <span class=\"token operator\">=</span> <span class=\"token string\">'宝马'</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> \n</code></pre>\n<blockquote>\n<p>这样修改数据，只是<code>对原state对象内的值做了修改</code>，但是<code>对象的引用地址没变</code>！！<br/> 在PureComponent看来，引用地址没变时，组件内部的shouldComponentUpdate返回false，也就不会重新render，数据更新就失败了。</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//正确写法</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">carName</span><span class=\"token operator\">:</span> <span class=\"token string\">'宝马'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>这样修改数据，就是用一个新对象{ carName: ‘宝马’ }替换了原来的state对象，数据的引用地址变化了，那么PureComponent组件内部的shouldComponentUpdate返回true，组件重新render，数据更新成功。</p>\n</blockquote>\n<h1><a id=\"2_render_props_159\"></a>2. render props</h1>\n<h2><a id=\"_161\"></a>如何向组件内部动态传入带内容的结构(标签)?</h2>\n<p>Vue中:</p>\n<blockquote>\n<p>使用slot插槽技术，也就是通过组件标签体传入结构</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>React中:</p>\n<blockquote>\n<p>使用children props: 通过<code>组件标签体</code>传入结构</p>\n<p>使用render props: 通过<code>组件标签属性</code>传入结构，而且可以<code>携带数据</code>，一般用render函数属性</p>\n</blockquote>\n<h2><a id=\"children_props_179\"></a>children props</h2>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">&gt;</span>xxxx<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token constant\">B</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">问题</span><span class=\"token operator\">:</span> 如果<span class=\"token constant\">B</span>组件需要<span class=\"token constant\">A</span>组件内的数据<span class=\"token punctuation\">,</span> <span class=\"token operator\">==</span><span class=\"token operator\">&gt;</span> 做不到 \n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'parent'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是parent组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是<span class=\"token constant\">A</span>组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是<span class=\"token constant\">B</span>组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>效果</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f32fa279e5ab4be09dcf041e2d2a625f.png\"/></p>\n<h2><a id=\"render_props_231\"></a>render props</h2>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> render<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token constant\">C</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span>\n<span class=\"token constant\">A</span><span class=\"token literal-property property\">组件</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>内部state数据<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token constant\">C</span><span class=\"token literal-property property\">组件</span><span class=\"token operator\">:</span> 读取<span class=\"token constant\">A</span>组件传入的数据显示 <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>如果在children props写法的基础上, 若要将A组件state身上的name属性传给B组件, 我们就需要使用render props来写:</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'parent'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是parent组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> render<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span> name<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'jack'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是<span class=\"token constant\">A</span>组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是<span class=\"token constant\">B</span>组件<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>效果</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\beabc2d653ad4534805af7d2ea705257.jpeg\"/></p>\n<h1><a id=\"3_Error_boundary_283\"></a>3. 错误边界Error boundary</h1>\n<h2><a id=\"_285\"></a>理解</h2>\n<p>错误边界(Error boundary)：把错误控制在一定范围内，比如后端返回来的数据类型出错，或者一些其他的错误，我们可以在界面中提示用户一些“网络繁忙请稍后重试”信息，错误边界Error boundary就是用来捕获<mark>后代组件错误</mark>，渲染出备用页面。</p>\n<p><code>错误边界一般是在容易发生错误的组件的父组件中处理。</code></p>\n<h2><a id=\"_291\"></a>特点</h2>\n<p>只能捕获<strong>后代组件</strong><mark>生命周期产生的错误</mark>，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误。</p>\n<h2><a id=\"_295\"></a>使用方式</h2>\n<p><strong>getDerivedStateFromError配合componentDidCatch</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token comment\">//用于标识子组件是否产生错误</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 如果Parent组件的子组件出现了任何的报错，都会调用这个钩子函数，调用的时候传入error错误信息</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> error <span class=\"token punctuation\">}</span><span class=\"token comment\">// 返回新的state</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>我是Parent组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>当前网络不稳定，请稍后再试<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Child <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 如果组件在渲染的整个过程中，由于子组件出现了问题，引发一些错误，</span>\n<span class=\"token comment\">//就会调用此函数，用来统计错误，反馈给服务器，用于通知编码人员进行bug的解决</span>\n<span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 统计页面的错误。发送请求发送到后台去</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>效果</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8b88ba1888ec4ed6b903f0c39239f57e.jpeg\"/></p>\n<h1><a id=\"4__336\"></a>4. 组件通信方式总结</h1>\n<h2><a id=\"_338\"></a>组件间的关系</h2>\n<ul><li>父子组件</li><li>兄弟组件（非嵌套组件）</li><li>祖孙组件（跨级组件）</li></ul>\n<h2><a id=\"_344\"></a>几种通信方式</h2>\n<ol><li>props： \n  <ul><li>children props</li><li>render props</li></ul> </li><li>消息订阅-发布： \n  <ul><li>pubs-sub、event等等</li></ul> </li><li>集中式状态管理： \n  <ul><li>redux、dva等等</li></ul> </li><li>conText: \n  <ul><li>生产者-消费者模式</li></ul> </li></ol>\n<h2><a id=\"_356\"></a>比较好的搭配方式</h2>\n<blockquote>\n<p><mark>父子组件</mark>：props<br/> <mark>兄弟组件</mark>：消息订阅-发布、集中式管理<br/> <mark>祖孙组件(跨级组件)</mark>：消息订阅-发布、集中式管理、conText(开发用的少，封装插件用的多)</p>\n</blockquote>\n<blockquote>\n<p><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          今天的分享就到这里啦✨\n         \n        \n       \n       \n        \\textcolor{red}{今天的分享就到这里啦✨}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: red;\">今天的分享就到这里啦</span><span class=\"mord\" style=\"color: red;\">✨</span></span></span></span></span> <br/><br/> <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          原创不易，还希望各位大佬支持一下\n         \n        \n       \n       \n        \\textcolor{blue}{原创不易，还希望各位大佬支持一下}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: blue;\">原创不易，还希望各位大佬支持一下</span></span></span></span></span> <br/><br/> 🤞 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          点赞，你的认可是我创作的动力！\n         \n        \n       \n       \n        \\textcolor{green}{点赞，你的认可是我创作的动力！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">点赞，你的认可是我创作的动力！</span></span></span></span></span> <br/><br/> ⭐️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          收藏，你的青睐是我努力的方向！\n         \n        \n       \n       \n        \\textcolor{green}{收藏，你的青睐是我努力的方向！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">收藏，你的青睐是我努力的方向！</span></span></span></span></span> <br/><br/> ✏️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          评论，你的意见是我进步的财富！\n         \n        \n       \n       \n        \\textcolor{green}{评论，你的意见是我进步的财富！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">评论，你的意见是我进步的财富！</span></span></span></span></span> <br/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}