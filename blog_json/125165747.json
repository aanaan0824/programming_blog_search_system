{"blogid": "125165747", "writerAge": "码龄2年", "writerBlogNum": "4", "writerCollect": "58", "writerComment": "3", "writerFan": "3", "writerGrade": "1级", "writerIntegral": "66", "writerName": "java菜鸟1", "writerProfileAdress": "writer_image\\profile_125165747.jpg", "writerRankTotal": "135127", "writerRankWeekly": "1009867", "writerThumb": "22", "writerVisitNum": "14624", "blog_read_count": "12104", "blog_time": "于 2022-06-08 13:23:33 发布", "blog_title": "jpa详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>走进JPA</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_7\">前言</a></li><li><a href=\"#JPA_10\">一、JPA是什么？</a></li><li><a href=\"#_14\">二、使用步骤</a></li><li><ul><li><a href=\"#1_15\">1.配置数据源</a></li><li><a href=\"#2_27\">2.导入依赖</a></li><li><a href=\"#3_34\">3.创建实体类并通过注解方式让数据库知道我们的表长什么样</a></li><li><a href=\"#4_70\">4.启动测试类完成表创建(随便一个空的测试类就行)</a></li><li><a href=\"#5_78\">5.如何访问我们的表,也就是如何对表进行操作(这里用接口自带的方法,后面会讲自定义方法)</a></li><li><a href=\"#6SQL_134\">6.方法名称拼接自定义SQL语句(重点),写在接口中</a></li><li><a href=\"#7_181\">7.不使用方法名称拼接(自由度更高)</a></li><li><a href=\"#8_205\">8.关联查询一对一</a></li><li><a href=\"#9_292\">9.关联查询一对多(一个学生对应多个成绩),这里可以结合一对一进行操作</a></li></ul>\n</li><li><a href=\"#_321\">三、总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>前言</h1>\n<p>在SpringBoot环境下使用JPA。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f3de9bd06fb6404590c38ff86858bf49.png\"/></p>\n<h1><a id=\"JPA_10\"></a>一、JPA是什么？</h1>\n<p>JPA（Java Persistence API）和JDBC类似，也是官方定义的一组接口，但是它相比传统的JDBC，它是为了实现ORM而生的，即Object-Relationl Mapping，它的作用是在关系型数据库和对象之间形成一个映射，这样，我们在具体的操作数据库的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了。<br/> 在之前，我们使用JDBC或是Mybatis来操作数据，通过直接编写对应的SQL语句来实现数据访问，但是我们发现实际上我们在Java中大部分操作数据库的情况都是读取数据并封装为一个实体类，因此，为什么不直接将实体类直接对应到一个数据库表呢？也就是说，一张表里面有什么属性，那么我们的对象就有什么属性，所有属性跟数据库里面的字段一一对应，而读取数据时，只需要读取一行的数据并封装为我们定义好的实体类既可以，而具体的SQL语句执行，完全可以交给框架根据我们定义的映射关系去生成，不再由我们去编写，因为这些SQL实际上都是千篇一律的。<br/> 而实现JPA规范的框架一般最常用的就是<code>Hibernate</code>，它是一个重量级框架，学习难度相比Mybatis也更高一些，而SpringDataJPA也是采用Hibernate框架作为底层实现，并对其加以封装。</p>\n<h1><a id=\"_14\"></a>二、使用步骤</h1>\n<h2><a id=\"1_15\"></a>1.配置数据源</h2>\n<p>这里用的yml方式,里面的jpa就是数据库的名称,大家也可以写其他的,前提是这个数据库存在,用户名和密码写自己的就好。</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> wc\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/jpa\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n</code></pre>\n<h2><a id=\"2_27\"></a>2.导入依赖</h2>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-jpa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h2><a id=\"3_34\"></a>3.创建实体类并通过注解方式让数据库知道我们的表长什么样</h2>\n<p>这里就可以知道表的名称是users(当然你可以任意取名),表的创建一般都有主键和自增操作,这里全部通过注解来完成。这里第一次创建表的时候表名会爆红,我们需要给他手动指定数据库,也就是数据源配置时的数据库</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@Entity</span>   <span class=\"token comment\">//表示这个类是一个实体类</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//对应的数据库中表名称</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//生成策略，这里配置为自增</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//对应表中id这一列</span>\n    <span class=\"token annotation punctuation\">@Id</span>     <span class=\"token comment\">//此属性为主键</span>\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//对应表中username这一列</span>\n    <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//对应表中password这一列</span>\n    <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里我们还需要设置自动表定义ddl-auto</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">#开启SQL语句执行日志信息</span>\n    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token comment\">#配置为自动创建</span>\n      <span class=\"token key atrule\">ddl-auto</span><span class=\"token punctuation\">:</span> create\n</code></pre>\n<p><code>ddl-auto</code>属性用于设置自动表定义，可以实现自动在数据库中为我们创建一个表，表的结构会根据我们定义的实体类决定，它有4种</p>\n<ul><li>create 启动时删数据库中的表，然后创建，退出时不删除数据表</li><li>create-drop 启动时删数据库中的表，然后创建，退出时删除数据表 如果表不存在报错</li><li>update 如果启动时表格式不一致则更新表，原有数据保留</li><li>validate 项目启动表结构进行校验 如果不一致则报错</li></ul>\n<h2><a id=\"4_70\"></a>4.启动测试类完成表创建(随便一个空的测试类就行)</h2>\n<p>这时候可以看到控制台打印这两句话,就会发现表已经创建成功了(和我们自己去敲命令行十分类似,hibernate帮我们完成这些操作,是不是很方便)<br/> 删表是因为选择了create策略创建表,后面还会讲其他的策略。<br/> Hibernate: drop table if exits account<br/> Hibernate: create table users (id integer not null auto_increment, password varchar(255), username varchar(255), primary key (id)) engine=InnoDB<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0bc7a3b602f142fda93822a21f8c86fb.png\"/><br/> 我们可以添加一条记录测试一下表<br/> 发现没有问题<img alt=\"在这里插入图片描述\" src=\"image\\6e6f56e2528042d698d3993fd868aec1.png\"/></p>\n<h2><a id=\"5_78\"></a>5.如何访问我们的表,也就是如何对表进行操作(这里用接口自带的方法,后面会讲自定义方法)</h2>\n<p>这里我们需要自定义借口继承接口JpaRepository</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意JpaRepository有两个泛型，前者是具体操作的对象实体，也就是对应的表，后者是ID的类型，接口中已经定义了比较常用的数据库操作。编写接口继承即可，我们可以直接注入此接口获得实现类：<br/> 这是查操作</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JpaTestApplicationTests</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token class-name\">AccountRepository</span> repository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      \t<span class=\"token comment\">//直接根据ID查找</span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里需要注意把create策略改成update,因为create策略会删表中数据<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3e1be54932944c54993b89fe861a7633.png\"/><br/> 这是增操作</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">addAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    account<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    account<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    account <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//返回的结果会包含自动生成的主键值</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入时，自动生成的主键ID为：\"</span><span class=\"token operator\">+</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这是删操作</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">deleteAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    repository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//根据ID删除对应记录</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这是分页操作 每页只显示一个数据 ,大家可以先多添加几条记录后再来测试</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pageAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    repository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//直接分页</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>自带的方法肯定不止这几个,这里就是一一举例。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\564c70a464db46789d4a3848ff527192.png\"/></p>\n<h2><a id=\"6SQL_134\"></a>6.方法名称拼接自定义SQL语句(重点),写在接口中</h2>\n<p>6.1.模糊查询</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//按照表中的规则进行名称拼接，不用刻意去记，IDEA会有提示</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAllByUsernameLike</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>再去测试类里测试(这里就是查名字中带有T的记录)</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    repository<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByUsernameLike</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>6.2.同时根据用户名和ID一起查询：<br/> optional封装就可以使用ifPresent(System.out::println),大家自由选择</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token class-name\">Account</span> <span class=\"token function\">findByIdAndUsername</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//可以使用Optional类进行包装，Optional&lt;Account&gt; findByIdAndUsername(int id, String username);</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>repository<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndUsername</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>6.3. 判断数据库中是否存在某个ID的用户：<br/> 这里只需要用返回布尔值就可以了</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">existsAccountById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>repository<span class=\"token punctuation\">.</span><span class=\"token function\">existsAccountByUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"7_181\"></a>7.不使用方法名称拼接(自由度更高)</h2>\n<p>这里用到的?可以起到防止SQL注入的问题<br/> 7.1.改操作</p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">//自定义SQL语句必须在事务环境下运行 必须有DML支持(Modifying)  ?2表示下面的形参的第二个位置 这里不对表进行操作 直接对实体类进行操作 然后实体类映射到表中</span>\n   <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token comment\">//这个注解也可以加到测试类上面 但需要跟进一个@commit提交事务的注解 因为测试类会自动回滚事务</span>\n    <span class=\"token annotation punctuation\">@Modifying</span>\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update Account set password=?2 where id=?1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">updatePasswordById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> newPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-java\">repository<span class=\"token punctuation\">.</span><span class=\"token function\">updatePasswordById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>7.2.当然要是自定义sql语句看着不习惯,也可以使用原生sql语句,也就是对表进行操作</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Modifying</span>\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set password=?2 where name=?1\"</span><span class=\"token punctuation\">,</span>nativeQuery <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//开启原生SQL</span>\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">updatePasswordByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-java\">repository<span class=\"token punctuation\">.</span><span class=\"token function\">updatePasswordByUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"8_205\"></a>8.关联查询一对一</h2>\n<p>在实际开发中，比较常见的场景还有关联查询，也就是我们会在表中添加一个外键字段，而此外键字段又指向了另一个表中的数据，当我们查询数据时，可能会需要将关联数据也一并获取，比如我们想要查询某个用户的详细信息，一般用户简略信息会单独存放一个表，而用户详细信息会单独存放在另一个表中。当然，除了用户详细信息之外，可能在某些电商平台还会有用户的购买记录、用户的购物车，交流社区中的用户帖子、用户评论等，这些都是需要根据用户信息进行关联查询的内容。<br/> 这里我们在写一个账户详细信息表并启动测试类完成表创建</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"account_details\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountDetail</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span><span class=\"token comment\">//还是设置一个自增主键</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"address\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"real_name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> realName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>再去Account实体类中添加外键<br/> 这时候再启动测试类后就会发现account表的结构已经发生改变<br/> 对象数据类型也是为了更好的插入数据,设定数据时直接当做一个对象来插入</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//一对一</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"detail_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token comment\">//声明为一对一关系</span>\n    <span class=\"token class-name\">AccountDetail</span> detail<span class=\"token punctuation\">;</span><span class=\"token comment\">//对象类型,也可以理解这里写哪个实体类,外键就指向哪个实体类的主键</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\365344e4d26c4bacae2a4d427c72905b.png\"/><br/> 这里从日志中可以看出hibernate帮我们完成外键的创建</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Hibernate</span><span class=\"token operator\">:</span> alter table users add column detail_id integer\n<span class=\"token class-name\">Hibernate</span><span class=\"token operator\">:</span> create table users_detail <span class=\"token punctuation\">(</span>id integer not <span class=\"token keyword\">null</span> auto_increment<span class=\"token punctuation\">,</span> address <span class=\"token function\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> email <span class=\"token function\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> phone <span class=\"token function\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> real_name <span class=\"token function\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> primary key <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> engine<span class=\"token operator\">=</span><span class=\"token class-name\">InnoDB</span>\n<span class=\"token class-name\">Hibernate</span><span class=\"token operator\">:</span> alter table users add constraint <span class=\"token class-name\">FK7gb021edkxf3mdv5bs75ni6jd</span> foreign key <span class=\"token punctuation\">(</span>detail_id<span class=\"token punctuation\">)</span> references users_detail <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>但这还不能完成同时对两张表进行操作<br/> 设置懒加载完成想查什么就查什么功能,设置关联级别完成同时操作两张表</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"detail_id\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">,</span> cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">)</span> <span class=\"token comment\">//设置关联操作为ALL</span>\n<span class=\"token class-name\">AccountDetail</span> detail<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里的关联级别也是有多个,一般设置为all就行</p>\n<ul><li>ALL：所有操作都进行关联操作</li><li>PERSIST：插入操作时才进行关联操作</li><li>REMOVE：删除操作时才进行关联操作</li><li>MERGE：修改操作时才进行关联操作</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Transactional</span>   <span class=\"token comment\">//懒加载属性需要在事务环境下获取，因为repository方法调用完后Session会立即关闭</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pageAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    repository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>account <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//获取用户名</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">getDetail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//获取详细信息（懒加载）</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>现在我们就可以同时添加数据和删除了</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span><span class=\"token comment\">//一次性添加数据到两张表中</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        account<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nike\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        account<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AccountDetail</span> detail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AccountDetail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        detail<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重庆市渝中区解放碑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        detail<span class=\"token punctuation\">.</span><span class=\"token function\">setPhone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234567890\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        detail<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"73281937@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        detail<span class=\"token punctuation\">.</span><span class=\"token function\">setRealName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        account<span class=\"token punctuation\">.</span><span class=\"token function\">setDetail</span><span class=\"token punctuation\">(</span>detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里就是传入一个对象</span>\n        account <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入时，自动生成的主键ID为：\"</span><span class=\"token operator\">+</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"，外键ID为：\"</span><span class=\"token operator\">+</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">getDetail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span><span class=\"token comment\">//同时删除(建立在cascade = CascadeType.ALL的基础上)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"9_292\"></a>9.关联查询一对多(一个学生对应多个成绩),这里可以结合一对一进行操作</h2>\n<p>先创建成绩表,成绩表里设置两个外键<br/> <img alt=\"在这里插入图片描述\" src=\"image\\03229537eebb4f38a85012a4fc3257d9.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"account_score\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> score <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//成绩表，注意只存成绩，不存学科信息，学科信息id做外键</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@OneToOne</span>   <span class=\"token comment\">//一对一对应到学科表Subject上</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"cid\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"uid\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//哪个学生</span>\n    <span class=\"token keyword\">int</span> uid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f31ffd5f5b4e4402bd86fb237ac73283.png\"/><br/> 现在去表中插入数据<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4bdc2b62f2ab42b4b985fc417d2576c9.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b84b54d7a0c94ad0beda087b7d1148c5.png\"/><br/> 可以看到数据已经被查询出来</p>\n<h1><a id=\"_321\"></a>三、总结</h1>\n<p>以上就是今天要讲的内容，本文仅仅简单介绍了jpa的常用方法，而jpa还提供了大量能使我们快速便捷地处理数据的方法,就留给大家自己去探索吧。<br/> 官网：https://spring.io/projects/spring-data-jpa</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}