{"blogid": "126601397", "writerAge": "码龄115天", "writerBlogNum": "20", "writerCollect": "115", "writerComment": "135", "writerFan": "376", "writerGrade": "3级", "writerIntegral": "705", "writerName": "Y_^O^", "writerProfileAdress": "writer_image\\profile_126601397.jpg", "writerRankTotal": "25970", "writerRankWeekly": "1381", "writerThumb": "213", "writerVisitNum": "6661", "blog_read_count": "287", "blog_time": "已于 2022-09-07 07:15:11 修改", "blog_title": "【C指针详解】进阶篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#1__11\">1. 字符指针</a></li><li><a href=\"#2__81\">2. 指针数组</a></li><li><a href=\"#3__103\">3. 数组指针</a></li><li><ul><li><a href=\"#31__104\">3.1 数组指针的定义</a></li><li><a href=\"#32_VS_131\">3.2 &amp;数组名VS数组名</a></li><li><a href=\"#33__189\">3.3 数组指针的使用</a></li></ul>\n</li><li><a href=\"#4__265\">4. 数组参数、指针参数</a></li><li><ul><li><a href=\"#41__267\">4.1 一维数组传参</a></li><li><a href=\"#42__304\">4.2 二维数组传参</a></li><li><a href=\"#43__324\">4.3 一级指针传参</a></li><li><a href=\"#44__363\">4.4 二级指针传参</a></li></ul>\n</li><li><a href=\"#5__410\">5. 函数指针</a></li><li><ul><li><a href=\"#51_414\">5.1函数的地址</a></li><li><a href=\"#52_457\">5.2函数指针如何书写</a></li><li><a href=\"#53_480\">5.3函数指针如何使用</a></li><li><a href=\"#54_494\">5.4练习</a></li></ul>\n</li><li><a href=\"#6__534\">6. 函数指针数组</a></li><li><ul><li><a href=\"#61_535\">6.1如何定义</a></li><li><a href=\"#62_554\">6.2函数指针数组的使用</a></li></ul>\n</li><li><a href=\"#7__686\">7. 指向函数指针数组的指针</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>前言</h2>\n<blockquote>\n<p>指针的主题，我们在初级阶段的【C指针详解】初阶篇 章节已经接触过了，我们知道了指针的概念：</p>\n<ol><li>指针就是个变量，用来存放地址，地址唯一标识一块内存空间。</li><li>指针的大小是固定的4/8个字节（32位平台/64位平台）。</li><li>指针是有类型的，指针的类型决定了指针的±整数的步长，指针解引用操作的时候的权限。</li><li>指针的运算。</li><li>野指针。</li><li>二级指针。</li></ol>\n</blockquote>\n<p><font color=\"red\">这个章节，我们继续探讨指针的高级主题。</font></p>\n<h2><a id=\"1__11\"></a>1. 字符指针</h2>\n<p>我们知道在指针的类型中有一种指针类型为<em><strong>字符指针 char</strong></em>* ;</p>\n<p>顾名思义，字符指针就是用来存放字符的地址。</p>\n<p>一般使用：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'w'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token char\">'w'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>还有一种使用方式如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pstr <span class=\"token operator\">=</span> <span class=\"token string\">\"hello bit.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> pstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"red\">大家思考一下，这里是把一个字符串\"hello bit.\"放到pstr指针变量里了吗？</font></p>\n<blockquote>\n<p>应该不是的，pstr是一个字符指针，是用来存放字符的地址的，而\"hello bit.\"是一个字符串，即使我们想把它放到pstr中，也是不可行的。</p>\n</blockquote>\n<p>那这句代码的结果是啥呢？</p>\n<blockquote>\n<p>const char* pstr = “hello bit.”; ——<font color=\"red\">本质上是把字符串 “hello bit.” 首字符 h 的地址放到了pstr中，使得指针pstr指向该字符串。</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5943bed547854c0d89b9ff6e67470e74.png\"/></p>\n<p><em><strong>那就有这样的面试题：</strong></em></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello bit.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello bit.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello bit.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str4 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello bit.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 and str2 are same\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 and str2 are not same\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str3 and str4 are same\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str3 and str4 are not same\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>大家仔细思考一下，结果是什么？</p>\n<p>我们来看一下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d4386997719f474898b6ccb7cb1e9932.png\"/></p>\n<p><em><strong>结果说明str1和str2是不一样的，而str3和str4本质上是一样的，那为什么呢？</strong></em></p>\n<blockquote>\n<p>首先我们来分析一下\"hello bit.\"，这里的\"hello bit.\"是一个常量字符串，而<em><strong>常量字符串是不能被修改的，在内存中仅保留一份。</strong></em><br/> 这也是有时候在代码最前面加上const的原因（const char* str3 = “hello bit.”;）。<br/> <font color=\"red\">C/C++会把常量字符串存储到单独的一个内存区域，当几个指针指向同一个字符串的时候，他们实际会指向同一块内存。但是用相同的常量字符串去初始化不同的数组的时候会开辟出不同的内存块。</font></p>\n</blockquote>\n<p>了解了常量字符串的存储机制之后，我相信大家就明白结果是怎么回事了。</p>\n<blockquote>\n<p><font color=\"black\" face=\"楷体\" size=\"4\">1. 我们用相同的常量字符串\"hello bit.\"去初始化不同的数组str1和str2的时候，数组str1和str2会开辟出不同的内存块（相当于我们只是借用常量字符串\"hello bit.\"去初始化了两个数组，但这两个数组各自开辟了自己的空间），而数组名str1和str2表示的是数组首元素的地址，那两个数组的空间是不同的，它们首元素的地址自然也就不同了。</font></p>\n</blockquote>\n<blockquote>\n<p><font color=\"black\" face=\"楷体\" size=\"4\">2. 而指针str3和str4指向的是同一个常量字符串，它们存储的都是字符串\"hello bit.\"的首字符’h’的地址，所以str3和str4本质上是一样的</font></p>\n</blockquote>\n<h2><a id=\"2__81\"></a>2. 指针数组</h2>\n<p>先问大家一个问题，指针数组是指针还是数组？</p>\n<blockquote>\n<p>答案：是数组。是存放指针的数组。</p>\n</blockquote>\n<p>我们已经知道了整型数组，字符数组等。</p>\n<blockquote>\n<p>int arr1[5];<br/> char arr2[6];</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2bfd599057e44cc48e5ba587063d7bf2.png\"/></p>\n<p>那指针数组是什么样子的，我们举个例子，定义这样一个指针数组：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr3<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>应该是这样的意思：arr3是一个数组，有五个元素，每个元素是一个整形指针。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2a1723c226b74a0695163b1e93b9b7ea.png\"/><br/> 来看几个其它类型的指针数组：</p>\n<blockquote>\n<p>int* arr1[10]; //整形指针的数组<br/> char *arr2[4]; //一级字符指针的数组<br/> char **arr3 [5]; //二级字符指针的数组</p>\n</blockquote>\n<h2><a id=\"3__103\"></a>3. 数组指针</h2>\n<h3><a id=\"31__104\"></a>3.1 数组指针的定义</h3>\n<p>数组指针是指针？还是数组？</p>\n<blockquote>\n<p>答案是：指针。</p>\n</blockquote>\n<p>我们已经熟悉：</p>\n<blockquote>\n<p>整形指针： int * pint; 能够指向整形数据的指针。<br/> 浮点型指针： float * pf; 能够指向浮点型数据的指针。</p>\n</blockquote>\n<p><font color=\"red\">那数组指针应该是：能够指向数组的指针，用来存放数组的地址。</font><br/> 下面代码哪个是数组指针？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>答案是：<font color=\"orange\">int (*p2) [10]是数组指针，int *p1[10]是指针数组。</font></p>\n<blockquote>\n<p>解释：p先和*结合，说明p是一个指针变量，然后指向一个数组，数组有10个元素，每个元素的类型是 int 。<br/> 所以p是一个指针，指向一个数组，叫数组指针。<br/> 这里要注意： [ ]的优先级要高于 * 号的，所以必须加上（）来保证p先和 * 结合。</p>\n</blockquote>\n<p>当然，我们知道数组有很多类型，那自然就有不同类型的数组指针，比如：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"32_VS_131\"></a>3.2 &amp;数组名VS数组名</h3>\n<p>对于下面的数组：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>arr 和 &amp;arr 分别是啥？<br/> <font color=\"red\">我们知道arr是数组名，数组名表示数组首元素的地址。<br/> 那&amp;arr数组名到底是啥？</font><br/> 我们看一段代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果会是什么呢？<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ec455357c6bb4556ad1568e141178729.png\"/></p>\n<p><em><strong>可见数组名和&amp;数组名以地址的形式打印出来是一样的。</strong></em><br/> 难道两个是一样的吗？<br/> 我们再看一段代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr = %p\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;arr= %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr+1 = %p\\n\"</span><span class=\"token punctuation\">,</span> arr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;arr+1= %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这次结果还会一样吗？</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\dcaaee15f6d3477a8ee8d77f8580382d.png\"/></p>\n<blockquote>\n<p>我们看到，arr和&amp;arr打印出来虽然是一样，但是arr+1和&amp;arr+1，却完全不一样，这说明，<em><strong>&amp;arr和arr，虽然值是一样的，但是意义应该不一样的。</strong></em></p>\n</blockquote>\n<p><em><strong>实际上：</strong></em></p>\n<blockquote>\n<p><font color=\"red\" face=\"楷体\" size=\"4\">&amp;arr 表示的是整个数组的地址</font>，而arr是数组首元素的地址。<br/> 所以，arr和&amp;arr打印出来才会不一样。<br/> arr和arr+1的差值是4，即数组arr（整型数组）一个元素的大小，因为arr是一个整型元素的地址，是int * 类型的指针，步长为4个字节。<br/> <font color=\"black\" face=\"楷体\" size=\"4\">而本例中 &amp;arr 的类型是： int (*) [10] ，是一种数组指针类型，加1就应该跳过一个该数组的大小，而int arr[10]的大小是40个字节，我们看到&amp;arr和&amp;arr+1的差值是68-40=28，但我们要知道编译器给我们打印出来的地址是以16进制展示的，而16进制数28转换为10进制就是40（2x16 ^ 1+8x16 ^ 0=40) 。</font></p>\n</blockquote>\n<p><font color=\"red\">最后，再给大家补充一点：</font><br/> 补充：</p>\n<blockquote>\n<p><font color=\"black\" face=\"楷体\" size=\"4\">1. sizeof(数组名)，计算整个数组的大小，sizeof内部单独放一个数组名，数组名表示整个数组。<br/> 2. &amp;数组名，取出的是数组的地址。&amp;数组名，数组名表示整个数组。</font></p>\n</blockquote>\n<p><font color=\"red\" face=\"楷体\" size=\"4\">除此1,2两种情况之外，所有的数组名都表示数组首元素的地址。</font></p>\n<h3><a id=\"33__189\"></a>3.3 数组指针的使用</h3>\n<p>那数组指针是怎么使用的呢？</p>\n<blockquote>\n<p>既然数组指针指向的是数组，那数组指针中存放的应该是数组的地址。</p>\n</blockquote>\n<p>看代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//把数组arr的地址赋值给数组指针变量p</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em><strong>但是我们一般很少这样写代码，通常用在二维数组中。</strong></em></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print_arr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//数组指针的方法</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print_arr2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//等价于printf(\"%d \", *(*(arr + i) + j));</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">print_arr1</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">print_arr2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>大家先仔细看看这段代码，然后我们一起来分析一下：</p>\n<blockquote>\n<p>上面的代码我们实现了2个函数，功能都是打印数组arr [3][5]的元素，而且我们传过去的实参也一样，两个函数的不同之处在于接收参数arr 的方式不同：<br/> 函数print_arr1用的是还是数组来接收，我们知道这样当然是可以的。<br/> <em><strong>函数print_arr2用的是指针来接收，而且用的就是我们刚学的数组指针。</strong></em></p>\n</blockquote>\n<p><font color=\"red\">看到这里大家可能会有一个疑惑，我们传过去的是数组名arr，是数组首元素的地址，但是我们为什么用了一个数组指针（int(*arr)[5]）来接收呢？</font></p>\n<blockquote>\n<p><font color=\"black\" face=\"楷体\" size=\"4\">首先，数组名arr是数组int arr[3][5]首元素的地址，这肯定是没问题的。<br/> 但是，我们要注意，这里的int arr[3][5]是一个二维数组，二维数组的首元素是二维数组的第一行（相当于一个一维数组），所以这里传递的arr其实相当于第一行的地址，是一维数组的地址，既然是数组的地址，当然要用数组指针来接收了。<br/> 而数组int arr[3][5]的第一行有5个元素，每个元素的类型是int ，所以我们就用一个整型数组指针（int(*arr)[5]）来接收。然后我们就可以访问数组 int arr[3][5] 并打印它的元素了。</font></p>\n</blockquote>\n<p>学了指针数组和数组指针我们来一起回顾并看看下面代码的意思：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> arr <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parr1<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr3<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>我们一起看一下：</p>\n<blockquote>\n<ol><li>int arr [5] ——整型数组</li><li>int *parr1[10] ——整型指针数组，10个元素，每个元素类型为整型指针</li><li>int (*parr2) [10] ——数组指针，指向一个数组，10个元素，元素类型为int</li><li>int (*parr3[10]) [5] ——数组指针数组：parr3是一个存放数组指针的数组，能存放10个数组指针，每个数组指针指向一个整型数组，5个元素。</li></ol>\n</blockquote>\n<h2><a id=\"4__265\"></a>4. 数组参数、指针参数</h2>\n<p>在写代码的时候难免要把【数组】或者【指针】传给函数，那函数的参数该如何设计呢？</p>\n<h3><a id=\"41__267\"></a>4.1 一维数组传参</h3>\n<p>比如，有这样一个一维数组：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//一维整型数组</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//一维整型指针数组</span>\n</code></pre>\n<p>我们把它们作为参数传给两个函数：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>那现在函数test和test2的参数应该如何设计呢？</p>\n<p><font color=\"red\">1. 先来看函数test（接收arr）：</font></p>\n<blockquote>\n<p>test函数要接收arr，首先我们想到，arr是一个一维数组，那我们是不是可以用一个同类型一维数组来接收，这当然是没问题的，所以test（假设不需要返回值）的参数可以这样设计：<br/> <code>void test (int arr[10])</code><br/> 当然【】里的10其实可以省略的：<br/> <code>void test (int arr[])</code>，这样也是可以的，因为这里设计的形参我们只是写成数组的形式，本质上还是指针（因为接收的是地址），所以不要求必须指定大小。</p>\n</blockquote>\n<p>然后，</p>\n<blockquote>\n<p>因为arr是数组名，表示的是数组首元素的地址，所以我们当然也可以把直接设计成指针，那传过来的是数组首元素（整型变量）的地址，我们应当用一个整型指针变量来接收：<br/> <code>void test (int* arr)</code></p>\n</blockquote>\n<p>所以。函数test的形参，我们可以设计成这三种：</p>\n<blockquote>\n<p><code>void test (int arr[10])</code><br/> <code>void test (int arr[])</code><br/> <code>void test (int* arr)</code></p>\n</blockquote>\n<p><font color=\"red\">2. 然后我们来看函数test2（接收arr2）：</font></p>\n<blockquote>\n<p>那test2其实还是一个一维数组，只不过是整型指针数组，那我们的参数设计还是用同类型的数组数组，或者用指针：<br/> 同类型的指针数组：<br/> <code>void test2(int* arr[20]</code><br/> <code>void test2(int* arr[]</code><br/> 数组arr2的首元素是一个一级整型指针变量，一级指针的地址我们要用一个二级指针来接收：<br/> <code>void test2(int** arr)</code></p>\n</blockquote>\n<h3><a id=\"42__304\"></a>4.2 二维数组传参</h3>\n<p>那现在我们要把二维数组作为参数传递给函数：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时，函数test的参数可以如何设计呢？</p>\n<blockquote>\n<ol><li>首先，传过去的是二维数组，我们当然可以用一个同类型的二维数组来接收：<br/> <code>void test(int arr[3][5])</code><br/> 或<br/> <code>void test(int arr[][5]</code><br/> 但注意不能写成<code>int arr[][],</code>因为二维数组的列数是不能省略的，二维数组传参，函数形参的设计只能省略第一个[]的数字。</li><li>那然后我们当然也可以用指针接收。<br/> 在【3.3 数组指针的使用】我们已经知道了，二维数组的首元素是二维数组的第一行（相当于一个一维数组），所以这里传递的arr其实相当于第一行的地址，是一维数组的地址，既然是数组的地址，当然要用数组指针来接收了。<br/> 所以我们可以这样设计：<br/> <code>void test(int (*arr)[5])</code></li></ol>\n</blockquote>\n<h3><a id=\"43__324\"></a>4.3 一级指针传参</h3>\n<p><font color=\"red\">如果我们调用一个函数传过去的实参是一级指针，那当然要用一个同类型的一级指针作为形参来接收：</font><br/> 比如：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//一级指针p，传给函数</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e2c689f93e4c442fa6dc17ed014cb811.png\"/><br/> 那现在我们思考这样一个问题：<br/> <font color=\"red\">当一个函数的参数部分为一级指针的时候，函数能接收什么参数？</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em><strong>test1函数能接收什么参数？</strong></em></p>\n<blockquote>\n<ol><li>首先实参传一个同类型的一级指针变量，这肯定是没问题的。<br/> <code>int a=9; int *p=&amp;a; test1（p);</code></li><li>然后我们是不是还可以传一个变量的地址，形参为int *p，当然可以接收一个整型变量的地址了。<br/> <code>int b=0;test1(&amp;b);</code></li><li>那我们是不是还可以传一个一维数组的数组名，因为数组名也是一个地址，是数组首元素的地址，那形参为int *p，当然我们要传一个整型数组的数组名。<br/> <code>int arr[10];test1(arr);</code></li></ol>\n</blockquote>\n<h3><a id=\"44__363\"></a>4.4 二级指针传参</h3>\n<p><font color=\"red\">若实参为二级指针，那形参应该是同类型的二级指针，这样肯定是可以的。</font><br/> 举个例子：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> pp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"red\">那现在我们要讨论的是，当函数的参数（形参）为二级指针时，可以接收什么样的参数（实参）？</font></p>\n<p>看这段代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pc<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>ppc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Ok?</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"red\">调用test函数，我们可以传什么参数？</font></p>\n<blockquote>\n<p>1.形参为二级指针，实参也传二级指针，这样肯定可以：<br/> <code>test(ppc);</code><br/> 2. 二级指针，当然可以接收一级指针变量的地址：<br/> <code>test(&amp;pc);</code><br/> 我们是不是还可以传一个一级指针数组的数组名，因为它是该数组首元素的地址，即还是一级指针变量的地址：<br/> <code>test(arr);</code></p>\n</blockquote>\n<h2><a id=\"5__410\"></a>5. 函数指针</h2>\n<p>什么时函数指针呢？</p>\n<blockquote>\n<p><font color=\"red\">函数指针，即指向一个函数的指针，用来存放函数的地址。</font></p>\n</blockquote>\n<h3><a id=\"51_414\"></a>5.1函数的地址</h3>\n<p><font color=\"red\">那既然要存放函数的地址，那函数的地址怎么来表示呢？</font></p>\n<ol><li>首先，我们已经知道，对于数组来说，比如：</li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>数组名和&amp;数组名的意义是不同的：<br/> 数组名arr表示数组首元素地址，而&amp;arr才是整个数组的地址。</p>\n</blockquote>\n<ol start=\"2\"><li>那现在如果这里有一个函数，函数的地址要如何表示：</li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hehe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>函数test的地址要如何表示呢？<br/> 会不会像数组一样，&amp;test表示函数地址呢？那函数名test表示啥呢？函数可没有首元素这一说。</p>\n</blockquote>\n<p>我们来看一段代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hehe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们一起来看一下test和&amp;test打印出来是什么：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b1378ed9c8b2422fb87df8222113d820.png\"/></p>\n<p>输出的是两个地址，且两个地址都<em><strong>是 test 函数的地址。</strong></em></p>\n<blockquote>\n<p><font color=\"red\">因为对于函数来说，函数名和&amp;函数名表示的意义是完全一样的，都表示函数的地址。<br/> 即函数名==&amp;函数名</font></p>\n</blockquote>\n<h3><a id=\"52_457\"></a>5.2函数指针如何书写</h3>\n<p><font color=\"red\">那函数指针又应该怎么写呢？</font></p>\n<p>现在有这样一个函数：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果我们要写一个函数指针来存储上面add函数的地址，我们可以这样写：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>add<span class=\"token punctuation\">;</span>\n或\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>add<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里的P就是一个函数指针，解释一下：</p>\n<blockquote>\n<p>首先，p和*结合，说明p是一个指针变量，然后该指针指向的是一个函数，函数有两个参数，都是 int 类型，函数的返回值类型也是 int 。</p>\n</blockquote>\n<p><em><strong>其它类型的函数指针书写也是同样的方法，大家按函数自己的参数类型，返回值类型写就行了。</strong></em></p>\n<h3><a id=\"53_480\"></a>5.3函数指针如何使用</h3>\n<p><font color=\"red\">那么，接下来我们怎么通过函数指针去调用上面的add函数呢？</font><br/> 我们知道，如果我们要通过函数名调用的话，可以这样写：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> ret<span class=\"token operator\">=</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>那我们现在要通过函数指针调用add函数，怎么写呢？</p>\n<blockquote>\n<ol><li><code>int ret=(*p)(3,5);</code><br/> 解释一下：因为p里面存的是函数add的地址，所以我们先对p解引用找到函数add，然后就可以传参调用了。</li><li>但是我们要知道，在<em><strong>函数指针</strong></em>这一块，通过函数指针调用函数时，可以不对指针解引用，即我们可以直接写成这样：<code>int ret=p(3,5);</code><br/> 这样也可以成功调用函数。<br/> 不过带上解引用操作符的话可我们更容易理解。<br/> 但是要注意：如果加解引用操作符的话，必须加上括号。</li></ol>\n</blockquote>\n<h3><a id=\"54_494\"></a>5.4练习</h3>\n<p>我们一起来阅读两段有趣的代码：</p>\n<ol><li><code>(*(void (*)())0)();</code><br/> 大家思考一下，这段代码是什么意思。<br/> 这段代码的效果其实是：<font color=\"red\">调用首地址为0的地址处的函数</font></li></ol>\n<p>给大家解释一下：</p>\n<blockquote>\n<p>我们先来看中间这一部分<code>(void (*)())0</code>的意思：<br/> 数字0前面一个括号，括号里面放的是啥，是不是一个函数指针类型啊，首先一个(*)表明是一个指针，指针指向一个函数，该函数没有参数，也不需要返回值（void）。<br/> <font color=\"red\">也就是说将0强制类型转换为一个函数指针。</font><br/> 然后我们再看整个表达式， <code>(*(void (*)())0)();</code>：<br/> 其实是 <font color=\"red\">对该函数指针解引用，并调用该函数。</font></p>\n</blockquote>\n<p>在《<em><strong>C陷阱与缺陷</strong></em>》这本书中提及该代码，我们来看一下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\83e6db81d2c245cc847d4de3312e6c8f.png\"/></p>\n<ol start=\"2\"><li><code>void (*signal(int , void(*)(int)))(int);</code><br/> 这句代码看起来很复杂，大家思考一下它的意思。<br/> 这句代码其实是一个：<font color=\"red\">函数声明</font></li></ol>\n<p>解释一下：</p>\n<blockquote>\n<p>我们直接去看这句代码可能不容易理解，我们可以将这句代码写成这样：<br/> <code>void(*)(int)</code> <code>signal</code> <code>(int,void(*)(int));</code><br/> 函数返回类型 、函数名、 参数类型<br/> 这样相信大家很容易就看懂了，<em><strong>就是一个函数声明</strong></em>。<br/> 但是我们要知道，<font color=\"red\">这种写法是语法不支持的。</font></p>\n</blockquote>\n<p><code>void (*signal(int , void(*)(int)))(int);</code>这句代码看上去可能太复杂了，不过我们可以简化一下它：</p>\n<blockquote>\n<p>我们使用关键字 typedef 对 <code>void(*)(int)</code>进行一个类型重命名。<br/> <code>typedef void(*)(int) pfun_t;</code>，<br/> 将<code>void(*)(int)</code>重命名为<code>pfun_t</code>，这样写对吗？<br/> <font color=\"red\">错误的！！！</font><br/> 语法规定正确的写法是这样的：<br/> <font color=\"red\">正确的：<code>typedef void (*pfun_t) (int);</code></font><br/> 那现在我们就可以这样写了：<br/> <code>pfun_t signal (int, pfun_t);</code></p>\n</blockquote>\n<p>这句代码同样在《<em><strong>C陷阱与缺陷</strong></em>》中提及：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9a7e2b130f2c48a793db8f9f5c7d1e58.png\"/></p>\n<h2><a id=\"6__534\"></a>6. 函数指针数组</h2>\n<h3><a id=\"61_535\"></a>6.1如何定义</h3>\n<p>数组是一个存放相同类型数据的存储空间，那我们已经学习了<em><strong>指针数组</strong></em>。<br/> 比如：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//数组的每个元素是int*</span>\n</code></pre>\n<p><font color=\"red\">那函数指针数组就是存放函数指针（或函数地址）的数组，那函数指针的数组如何定义呢？</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr1<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parr2<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> parr3<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这3句代码那一句正确定义了一个函数指针数组？<br/> 答案是：<em><strong>parr1</strong></em></p>\n<blockquote>\n<p>parr1 先和 [] 结合，说明 parr1是数组，数组有10个元素，每个元素的类型是 <code>int (*)() </code>类型的函数指针。<br/> （把数组名及元素个数<code>parr1[10]</code>去掉剩下的就是元素类型。）</p>\n</blockquote>\n<h3><a id=\"62_554\"></a>6.2函数指针数组的使用</h3>\n<p><font color=\"red\">函数指针数组的用途：<em><strong>转移表</strong></em></font></p>\n<p>比如我们想要写代码实现一个<em><strong>计算器</strong></em>的功能（加减乘除），在没学函数指针数组之前，我们可能会这样写：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 1.add           2.sub \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 3:mul           4:div \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入操作数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret = %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入操作数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret = %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入操作数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret = %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入操作数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret = %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出程序\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选择错误\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>使用switch、case语句选择相应的功能，就去调用对应的函数来实现对操作数的加减乘除。<br/> 但这样写好像不是特别好。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d8018adcee83486f851ca8a1fccfb2a3.png\"/></p>\n</blockquote>\n<p><em><strong>那有没有更好的办法呢？</strong></em></p>\n<blockquote>\n<p>当然有，那我们就可以使用函数指针数组去实现。</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> mul<span class=\"token punctuation\">,</span> div <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//转移表</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 1.add           2.sub \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 3:mul           4:div \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> input <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入操作数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入有误\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret = %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<blockquote>\n<p>这次代码就没有那么多重复的部分了，更加简洁。<br/> 解释一下：我们定义了一个函数指针数组<code>int(*p[5])(int x, int y)</code>，5个元素，每个元素是一个函数指针，指向的函数两个参数为int类型，返回类型也是int。<br/> 然后对数组初始化：<code>{ 0, add, sub, mul, div }; </code>，把加减乘除4个函数的地址存入数组。<br/> 为啥数组最前面要加一个0呢？<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9cc6ee4c355b42f78780b1ee12791aaa.png\"/><br/> 因为我们四个函数对应的选项是1，2，3，4，这样使得它们的下标正好是1，2，3，4。<br/> 我们可以通过下标直接找到并调用函数。</p>\n</blockquote>\n<h2><a id=\"7__686\"></a>7. 指向函数指针数组的指针</h2>\n<p>什么是指向函数指针数组的指针？</p>\n<blockquote>\n<p>即指向函数指针数组的指针，用来存放函数指针数组的地址。</p>\n</blockquote>\n<p>那 指向函数指针数组的指针 如何定义呢？<br/> 举个例子：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//函数指针pfun</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//函数指针的数组pfunArr</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfunArr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpfunArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//指向函数指针数组pfunArr的指针ppfunArr</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppfunArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pfunArr<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>函数指针和函数指针数组我们已经知道怎么回事了。</p>\n<blockquote>\n<p>解释一下：<code>void (*(*ppfunArr)[5])(const char*)</code><br/> 首先，ppfunArr和<code>*</code>结合<code>(*ppfunArr)</code>，说明它是一个指针。<br/> 然后指向一个数组，数组有5个元素<code>(*ppfunArr)[5]</code>，每个元素是一个函数指针<code>void (*) (const char*)</code>。<br/> 该函数指针指向一个函数，函数一个参数，参数类型为<code>const char* str</code>类型，不需要返回值。</p>\n</blockquote>\n<p><em><strong>以上就是对指针进阶内容的讲解，希望能帮助到大家，如果有写的不好的地方，欢迎大家指正！！</strong></em>！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}