{"blogid": "124969357", "writerAge": "码龄1年", "writerBlogNum": "54", "writerCollect": "2628", "writerComment": "2224", "writerFan": "4023", "writerGrade": "6级", "writerIntegral": "5486", "writerName": "偷偷敲代码的青花瓷", "writerProfileAdress": "writer_image\\profile_124969357.jpg", "writerRankTotal": "4892", "writerRankWeekly": "42474", "writerThumb": "2249", "writerVisitNum": "100325", "blog_read_count": "18446", "blog_time": "已于 2022-05-31 23:35:32 修改", "blog_title": "JavaWeb项目—— 博客系统", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_4\">效果展示</a></li><li><ul><li><a href=\"#1__maven__16\">1. 创建 maven 项目</a></li><li><a href=\"#2__23\">2. 设计数据库</a></li><li><a href=\"#3__69\">3. 封装数据库的操作代码</a></li><li><ul><li><a href=\"#31__DBUtil__71\">3.1 创建 DBUtil 类</a></li><li><a href=\"#32__Blog_143\">3.2 创建 Blog（代表一篇博客）</a></li><li><a href=\"#33__User_206\">3.3 创建 User（代表一个用户）</a></li><li><a href=\"#34__BlogDao_240\">3.4 创建类 BlogDao（对博客表进行操作）</a></li><li><a href=\"#35__UserDao__383\">3.5 创建类 UserDao (对用户表进行操作)</a></li></ul>\n</li><li><a href=\"#4__463\">4. 导入之前已经写好的前端代码</a></li><li><a href=\"#5__466\">5. 实现博客主页界面</a></li><li><ul><li><a href=\"#51__467\">5.1 约定好前后端交互接口</a></li><li><a href=\"#52__BlogServlet_470\">5.2 实现 BlogServlet</a></li><li><a href=\"#53___503\">5.3 实现 前端代码</a></li></ul>\n</li><li><a href=\"#6__560\">6. 实现博客详情界面</a></li><li><ul><li><a href=\"#61__561\">6.1 约定好前后端交互接口</a></li><li><a href=\"#62_BlogServlet_565\">6.2 实现BlogServlet</a></li><li><a href=\"#63__617\">6.3 实现前端代码</a></li></ul>\n</li><li><a href=\"#7___664\">7. 实现登录界面</a></li><li><ul><li><a href=\"#71__671\">7.1 约定好前后端交互接口</a></li><li><a href=\"#72__LoginServlet_675\">7.2 实现 LoginServlet</a></li><li><a href=\"#73__729\">7.3 实现前端代码</a></li></ul>\n</li><li><a href=\"#8__789\">8. 实现登录状态判定功能</a></li><li><ul><li><a href=\"#81__792\">8.1 约定前后端交互接口</a></li><li><a href=\"#82__LoginServlet__798\">8.2 在 LoginServlet 进行代码添加</a></li><li><a href=\"#83__commonjs_881\">8.3 在前端代码中创建 common.js</a></li><li><a href=\"#84__915\">8.4 修改前端代码</a></li></ul>\n</li><li><a href=\"#9__922\">9. 实现显示用户信息功能</a></li><li><ul><li><a href=\"#91__923\">9.1 约定好前后端交互接口</a></li><li><a href=\"#92__AuthorServlet__924\">9.2 实现 AuthorServlet 代码</a></li><li><a href=\"#93__986\">9.3 实现前端代码</a></li><li><ul><li><a href=\"#_989\">针对博客列表页进行修改</a></li><li><a href=\"#_995\">针对博客详情页</a></li></ul>\n</li></ul>\n</li><li><a href=\"#10__1003\">10. 实现注销功能</a></li><li><ul><li><a href=\"#101__1005\">10.1 约定好前后端交互接口</a></li><li><a href=\"#102__LogouServlet_1008\">10.2 实现 LogouServlet</a></li><li><a href=\"#103__1036\">10.3 实现前端代码</a></li></ul>\n</li><li><a href=\"#11__1042\">11. 实现发布博客功能</a></li><li><ul><li><a href=\"#111__1046\">11.1 约定好前后端交互的接口</a></li><li><a href=\"#112_BlogServletdoPost_1050\">11.2 在BlogServlet中添加doPost方法</a></li><li><a href=\"#113__1093\">11.3 实现前端代码</a></li></ul>\n</li><li><a href=\"#12__1166\">12. 删除博客</a></li><li><ul><li><a href=\"#121__1168\">12.1 约定号前后端交互接口</a></li><li><a href=\"#121__1172\">12.1 实现前端代码</a></li><li><a href=\"#122_BlogDeleteServlet_1269\">12.2 实现BlogDeleteServlet</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_4\"></a>效果展示</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bfae7decc80448c4836099813d9a60f8.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3472e61e46c44b80939e7c85e3129637.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cc53bd380da54f85915f58ded0a3ee70.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2321e25616f54197bb7369538b83cc22.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\64ec1703628b443b9ce78c82733916cd.png\"/></p>\n<hr/>\n<h2><a id=\"1__maven__16\"></a>1. 创建 maven 项目</h2>\n<p>创建<strong>必要的目录</strong>，引入<strong>需要的依赖</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0de06631b6214d579d07874b07eedc23.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\4cb8941cd4fa49edae5a48c1fdef986b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c0da0691c0da48c680fb71af3651058f.png\"/></p>\n<h2><a id=\"2__23\"></a>2. 设计数据库</h2>\n<p>本系统要存入<font color=\"purple\">博客文章的信息</font>和<font color=\"purple\">用户的信息</font></p>\n<p>创建博客表：</p>\n<blockquote>\n<p><code>博客的 id，博客的标题，博客的内容，博客的日期，博文的博主 id</code></p>\n</blockquote>\n<p>创建用户表：</p>\n<blockquote>\n<p><code>用户 id 用户名 用户密码</code></p>\n</blockquote>\n<pre><code>-- 创建一个数据库\ncreate database if not exists java102_blog;\n\nuse java102_blog;\n\n-- 创建一个博客表.\ndrop table if exists blog;\ncreate table blog (\n    blogId int primary key auto_increment,\n    title varchar(1024),\n    content mediumtext,\n    userId int,         -- 文章作者的 id\n    postTime datetime   -- 发布时间\n);\n\n---- 给博客表中插入点数据, 方便测试.\ninsert into blog values(null, '这是第一篇博客', '从今天开始, 我要认真学 Java', 1, now());\ninsert into blog values(null, '这是第二篇博客', '从昨天开始, 我要认真学 Java', 1, now());\ninsert into blog values(null, '这是第三篇博客', '从前天开始, 我要认真学 Java', 1, now());\ninsert into blog values(null, '这是第一篇博客', '从今天开始, 我要认真学 C++', 2, now());\ninsert into blog values(null, '这是第二篇博客', '从昨天开始, 我要认真学 C++', 2, now());\ninsert into blog values(null, '这是第三篇博客', '# 一级标题\\n ### 三级标题\\n &gt; 这是引用内容', 2, now());\n\n-- 创建一个用户表\ndrop table if exists user;\ncreate table user (\n    userId int primary key auto_increment,\n    username varchar(128) unique,    -- 后续会使用用户名进行登录, 一般用于登录的用户名都是不能重复的.\n    password varchar(128)\n);\n\ninsert into user values(null, 'zhangsan', '123');\ninsert into user values(null, 'lisi', '123');\ninsert into user values(null, 'ling', '123');\n</code></pre>\n<h2><a id=\"3__69\"></a>3. 封装数据库的操作代码</h2>\n<p>创建包 model 用来存放数据库的代码</p>\n<h3><a id=\"31__DBUtil__71\"></a>3.1 创建 DBUtil 类</h3>\n<p>用于和数据库建立连接</p>\n<pre><code>package model;\n\nimport com.mysql.cj.jdbc.MysqlDataSource;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n/**\n *这个类 封装 和 建立 数据库 连接 的 操作\n */\npublic class DBUtil {\n    private static final String URL = \"jdbc:mysql://127.0.0.1:3306/java102_blog?characterEncoding=utf8&amp;useSSL=false\";\n    private static final String USERNAME = \"root\";\n    private static final String PASSWORD = \"707703\";\n\n    private volatile static DataSource dataSource = null;\n\n    private static DataSource getDataSource() {\n        if(dataSource == null) {\n            synchronized (DBUtil.class) {\n                if(dataSource == null) {\n                    dataSource = new MysqlDataSource();\n                    ((MysqlDataSource)dataSource).setUrl(URL);\n                    ((MysqlDataSource)dataSource).setUser(USERNAME);\n                    ((MysqlDataSource)dataSource).setPassword(PASSWORD);\n                }\n            }\n        }\n        return dataSource;\n    }\n\n    // 建立链接\n    public static Connection getConnection() throws SQLException {\n        return getDataSource().getConnection();\n    }\n\n    // 断开链接\n    public static void close(Connection connection, PreparedStatement statement, ResultSet resultSet)  {\n        if(resultSet != null) {\n            try {\n                resultSet.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n\n        if(statement != null) {\n            try {\n                statement.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n\n        if(connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n}\n\n\n</code></pre>\n<h3><a id=\"32__Blog_143\"></a>3.2 创建 Blog（代表一篇博客）</h3>\n<pre><code>package model;\n\nimport java.sql.Timestamp;\nimport java.text.SimpleDateFormat;\n\n// 每个 blog对象 ，对应 blog 表里的一条记录\npublic class Blog {\n    private int blogId;\n    private String title;\n    private String content;\n    private int userId;\n    private Timestamp postTime;\n\n    public int getBlogId() {\n        return blogId;\n    }\n\n    public void setBlogId(int blogId) {\n        this.blogId = blogId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public int getUserId() {\n        return userId;\n    }\n\n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n    \n    // 把这里 的 getter 方法给改了，不是返回一个 时间搓对象，而是返回一个 string（格式化的时间）\n    public String getPostTime() {\n        // 使用这个类 来完成时间戳到格式化日期的转换\n        // 这个 转换过程，需要构造方法中制定要转换的格式，然后调用 format 来进行转换\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        return simpleDateFormat.format(postTime);\n    }\n\n\n    public void setPostTime(Timestamp postTime) {\n        this.postTime = postTime;\n    }\n}\n\n</code></pre>\n<h3><a id=\"33__User_206\"></a>3.3 创建 User（代表一个用户）</h3>\n<pre><code>package model;\n\n// 每个 model.User 对象, 期望能够表示 user 表中的一条记录.\npublic class User {\n    private int userId = 0;\n    private String username = \"\";\n    private String password = \"\";\n    public int getUserId() {\n        return userId;\n    }\n\n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n}\n</code></pre>\n<h3><a id=\"34__BlogDao_240\"></a>3.4 创建类 BlogDao（对博客表进行操作）</h3>\n<p><strong>注意：</strong><br/> <strong>对数据进行插入删除操作时，执行 sql：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a1bbde23c62d4c4c9421645c09e2ccf6.png\"/><br/> <strong>其他操作：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\8313a3bd4eab458ba7a3fd46ec76a0af.png\"/><br/> <strong>插入顺序：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c37c0fbe85e24428bfc05baa8c3ad084.png\"/></p>\n<pre><code>package model;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * 这个类用于去封装博客表的 基本操作\n */\npublic class BlogDao {\n    // 1.往博客表里，插入一个博客\n    public void insert(Blog blog) {\n        // JDBC 代码\n        Connection connection = null;\n        PreparedStatement statement = null;\n        try {\n            // 1. 先和数据库建立连接\n            connection = DBUtil.getConnection();\n            // 2. 构造 sql 语句\n            String sql = \"insert into blog values(null,?,?,?,now())\";\n            statement = connection.prepareStatement(sql);\n            // 赋值\n            statement.setString(1, blog.getTitle());\n            statement.setString(2, blog.getContent());\n            statement.setInt(3,blog.getUserId());\n            // 3. 执行 sql\n            statement.executeUpdate();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }finally {\n            // 4. 关闭连接，释放资源\n            DBUtil.close(connection,statement,null);\n        }\n    }\n\n    // 2. 获取博客列表中的所有博客信息\n    public List&lt;Blog&gt; selectAll() {\n        List&lt;Blog&gt; blogs = new ArrayList&lt;&gt;();\n        // JDBC 代码\n        Connection connection = null;\n        PreparedStatement statement = null;\n        ResultSet resultSet = null;\n        try {\n            // 1. 先建立链接\n            connection = DBUtil.getConnection();\n            // 2. 构造 sql 语句\n            String sql = \"select * from blog order by postTime desc\";\n            statement = connection.prepareStatement(sql);\n            // 3. 执行 sql\n            resultSet = statement.executeQuery();\n            // 把查询到的数据 存储到 blogs 当中\n            while (resultSet.next()) {\n                Blog blog = new Blog();\n                blog.setBlogId(resultSet.getInt(\"blogId\"));\n                blog.setTitle(resultSet.getString(\"title\"));\n                // 这里需要针对内容进行截断（太长，就去掉后面的）\n                String content = resultSet.getString(\"content\");\n                if(content.length() &gt; 50) {\n                    content = content.substring(0,50) + \"..点进来吧我的宝\";\n                }\n                blog.setContent(content);\n                blog.setUserId(resultSet.getShort(\"userId\"));\n                blog.setPostTime(resultSet.getTimestamp(\"postTime\"));\n                blogs.add(blog);\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }finally {\n            DBUtil.close(connection,statement,resultSet);\n        }\n        return blogs;\n    }\n\n    // 3. 能够根据博客 id 获取到制定的博客内容（用于博客详情页）\n    public Blog selectOne(int blogId) {\n        Connection connection = null;\n        PreparedStatement statement = null;\n        ResultSet resultSet = null;\n        try{\n            // 1. 建立连接\n            connection = DBUtil.getConnection();\n            // 2. 构造 sql 语句\n            String sql = \"select * from blog where blogId = ?\";\n            statement = connection.prepareStatement(sql);\n            statement.setInt(1,blogId);\n            // 3. 执行 sql\n            resultSet = statement.executeQuery();\n            // 此处我们是使用 主键 来作为 查询条件，查询结果，要么是 1，要么是 0\n            if(resultSet.next()) {\n                Blog blog = new Blog();\n                blog.setBlogId(resultSet.getInt(\"blogId\"));\n                blog.setTitle(resultSet.getString(\"title\"));\n                blog.setContent(resultSet.getString(\"content\"));\n                blog.setUserId(resultSet.getShort(\"userId\"));\n                blog.setPostTime(resultSet.getTimestamp(\"postTime\"));\n                return blog;\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }finally {\n            // 4. 关闭连接 释放资源\n            DBUtil.close(connection,statement,resultSet);\n        }\n        return null;\n    }\n\n    // 4.  从博客列表中，根据博客 id 删除博客\n    public void delete(int blogId) {\n        Connection connection = null;\n        PreparedStatement statement = null;\n        try {\n            // 1. 建立 连接\n            connection = DBUtil.getConnection();\n            // 2. 构造 sql 语句\n            String sql = \"delete from blog where blogId = ？\";\n            statement = connection.prepareStatement(sql);\n            statement.setInt(1,blogId);\n            // 3. 执行 sql\n            statement.executeUpdate();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }finally {\n            DBUtil.close(connection,statement,null);\n        }\n    }\n}\n\n</code></pre>\n<h3><a id=\"35__UserDao__383\"></a>3.5 创建类 UserDao (对用户表进行操作)</h3>\n<pre><code>package model;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n/**\n * 这个类用于 封装 用户表的 基本操作\n */\npublic class UserDao {\n\n    // 1. 根据用户名 查找用户信息\n    public User selectByName(String username) {\n        Connection connection = null;\n        PreparedStatement statement = null;\n        ResultSet resultSet = null;\n        try{\n            // 1. 建立 连接\n            connection = DBUtil.getConnection();\n            // 2. 构造 sql 语句\n            String sql = \"select * from user where username = ?\";\n            statement = connection.prepareStatement(sql);\n            statement.setString(1,username);\n            // 3. 执行 sql\n            resultSet = statement.executeQuery();\n            if(resultSet.next()) {\n                User user = new User();\n                user.setUserId(resultSet.getInt(\"userId\"));\n                user.setUsername(resultSet.getString(\"username\"));\n                user.setPassword(resultSet.getString(\"password\"));\n                return user;\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }finally {\n            // 4. 关闭连接 释放资源\n            DBUtil.close(connection,statement,resultSet);\n        }\n        return null;\n    }\n\n    // 2. 根据 用户 id 来找 用户信息\n    // 博客详情页 就可以根据用户 id 来查询作者的名字，把作者名字显示出来\n    public User selectById(int userId) {\n        Connection connection = null;\n        PreparedStatement statement = null;\n        ResultSet resultSet = null;\n\n        try {\n            // 1. 建立连接\n            connection = DBUtil.getConnection();\n            // 2. 构造 sql 语句\n            String sql = \"select * from user where userId = ?\";\n            statement = connection.prepareStatement(sql);\n            statement.setInt(1,userId);\n            // 3. 执行sql\n            resultSet = statement.executeQuery();\n            // 此处的 username 使用 unique 约束，要么能查到一个，要么一个都查不到\n            // 4. 遍历结果集\n            if(resultSet.next()) {\n                User user = new User();\n                user.setUserId(resultSet.getInt(\"userId\"));\n                user.setUsername(resultSet.getString(\"username\"));\n                user.setPassword(resultSet.getString(\"password\"));\n                return user;\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }finally {\n            DBUtil.close(connection,statement,resultSet);\n        }\n        return null;\n    }\n}\n\n\n</code></pre>\n<h2><a id=\"4__463\"></a>4. 导入之前已经写好的前端代码</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bf41afd9576f4c1091b76c653e989665.png\"/></p>\n<h2><a id=\"5__466\"></a>5. 实现博客主页界面</h2>\n<h3><a id=\"51__467\"></a>5.1 约定好前后端交互接口</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bde0824166f44e669a30868db7b46cbe.png\"/></p>\n<h3><a id=\"52__BlogServlet_470\"></a>5.2 实现 BlogServlet</h3>\n<pre><code>import model.BlogDao;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\n\n// 通过这个类, 来处理 /blog 路径对应的请求\n@WebServlet(\"/blog\")\npublic class BlogServlet extends HttpServlet {\n    private ObjectMapper objectMapper = new ObjectMapper();\n\n    // 这个方法用来获取到数据库中的博客列表.\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\n        // 从数据库中查询到博客列表, 转成 JSON 格式, 然后直接返回即可.\n        BlogDao blogDao = new BlogDao();\n        List&lt;Blog&gt; blogs = blogDao.selectAll();\n         //把 blogs 对象转成 JSON 格式.\n        String respJson = objectMapper.writeValueAsString(blogs);\n        resp.setContentType(\"application/json; charset=utf8\");\n        resp.getWriter().write(respJson);\n    }\n}\n</code></pre>\n<h3><a id=\"53___503\"></a>5.3 实现 前端代码</h3>\n<p><strong>在 blog_list.html 中 实现 ajax</strong></p>\n<p><strong>注意：引入依赖</strong></p>\n<pre><code>&lt;script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        // 在页面加载的时候, 通过 ajax 给服务器发送数据, 获取到博客列表信息, 并且显示在界面上. \n        function getBlogList() {\n            $.ajax({\n                type: 'get',\n                url: 'blog',\n                success: function(body) {\n                    // 获取到的 body 就是一个 js 对象数组, 每个元素就是一个 js 对象, 根据这个对象构造 div\n                    // 1. 先把 .right 里原有的内容给清空\n                    let rightDiv = document.querySelector('.right');\n                    rightDiv.innerHTML = '';\n                    // 2. 遍历 body, 构造出一个个的 blogDiv\n                    for (let blog of body) {\n                        let blogDiv = document.createElement('div');\n                        blogDiv.className = 'blog';\n                        // 构造标题\n                        let titleDiv = document.createElement('div');\n                        titleDiv.className = 'title';\n                        titleDiv.innerHTML = blog.title;\n                        blogDiv.appendChild(titleDiv);\n                        // 构造发布时间\n                        let dateDiv = document.createElement('div');\n                        dateDiv.className = 'date';\n                        dateDiv.innerHTML = blog.postTime;\n                        blogDiv.appendChild(dateDiv);\n                        // 构造博客的摘要\n                        let descDiv = document.createElement('div');\n                        descDiv.className = 'desc';\n                        descDiv.innerHTML = blog.content;\n                        blogDiv.appendChild(descDiv);\n                        // 构造 查看全文\n                        let a = document.createElement('a');\n                        a.innerHTML = '查看全文 &amp;gt;&amp;gt;';\n                        // 此处希望点击之后能够跳转到 博客详情页 !!\n                        // 这个跳转过程需要告知服务器要访问的是哪个博客的详情页. \n                        a.href = 'blog_detil.html?blogId=' + blog.blogId;\n                        blogDiv.appendChild(a);\n\n                        // 把 blogDiv 挂到 dom 树上!\n                        rightDiv.appendChild(blogDiv);\n                    }\n                }, \n                error: function() {\n                    alert(\"获取博客列表失败!\");\n                }\n            });\n        }\n\n        getBlogList();\n        &lt;/script&gt;\n</code></pre>\n<h2><a id=\"6__560\"></a>6. 实现博客详情界面</h2>\n<h3><a id=\"61__561\"></a>6.1 约定好前后端交互接口</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\16695162a4fe40fa8f3d90432fbaf782.png\"/></p>\n<h3><a id=\"62_BlogServlet_565\"></a>6.2 实现BlogServlet</h3>\n<p><strong>这里后端代码和博客列表页的获取，基本相同，就直接放到一个方法中，来实现！使用blogId参数来区别是获取博客列表还是详情</strong><br/> <strong>这里注意：博客列表页在也在BlogServlet中实现的，我们如何去区别呢？：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\455eb5fe13be4cb2b447261868a45795.png\"/></p>\n<pre><code>package controller;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport model.Blog;\nimport model.BlogDao;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * // doGet 获取博客列表页\n */\n@WebServlet(\"/blog\")\npublic class BlogServlet extends HttpServlet {\n\n    private ObjectMapper objectMapper = new ObjectMapper();\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.setContentType(\"application/json; charset=utf8\");\n        BlogDao blogDao = new BlogDao();\n        // 先尝试获取到 req 中的 blogId 参数. 如果该参数存在, 说明是要请求博客详情\n        // 如果该参数不存在, 说明是要请求博客的列表.\n        String param = req.getParameter(\"blogId\");\n        if (param == null) {\n            // 不存在参数, 获取博客列表\n            List&lt;Blog&gt; blogs = blogDao.selectAll();\n            // 把 blogs 对象转成 JSON 格式.\n            String respJson = objectMapper.writeValueAsString(blogs);\n            resp.getWriter().write(respJson);\n        } else {\n            // 存在参数, 获取博客详情\n            int blogId = Integer.parseInt(param);\n            Blog blog = blogDao.selectOne(blogId);\n            String respJson = objectMapper.writeValueAsString(blog);\n            resp.getWriter().write(respJson);\n        }\n    }\n}\n\n</code></pre>\n<h3><a id=\"63__617\"></a>6.3 实现前端代码</h3>\n<p><strong>修改 <code>blog_detail.html</code>，让这个页面加载的时候，能够调用到上述的接口，来从服务器获取到博客数据</strong></p>\n<p><strong>注意：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\60fef7d5d57a43f89c4da023bc31ee12.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e19af2e1a8d844c3a4718b9825c96b5d.png\"/></p>\n<blockquote>\n<p><code> 在博客详情页中引入 editor</code></p>\n</blockquote>\n<hr/>\n<pre><code>&lt;script&gt;\n       \n       function getBlogDetail() {\n            $.ajax({\n                type: 'get',\n                // location.search 拿到了形如 '?blogId=5' 这样的一段内容\n                url: 'blog2' + location.search,\n                success: function(body) {\n                    // 根据 body 中的内容来构造页面\n                    \n                    // 1. 构造博客标题S\n                    let h3 = document.querySelector(\".blog-content&gt;h3\");\n                    h3.innerHTML = body.title;\n                    // 2. 构造博客发布时间\n                    let dateDiv = document.querySelector('.date');\n                    dateDiv.innerHTML = body.postTime;\n                    // 3. 构造博客正文\n                    // 如果直接把 content 设为 innerHTML, 此时展示在界面上的内容, 是原始的 markdown 字符串\n                    // 咱们需要的是渲染后的, 带有格式的效果\n                    // let content = document.querySelector('#content');\n                    // content.innerHTML = body.content;\n\n                    // 第一个参数对应 id=content 的 html 标签. 渲染后得到的 html 片段就会被放到这个 标签下. \n                    editormd.markdownToHTML('content', {\n                        markdown: body.content\n                    });\n                }\n            });\n        }\n\n        getBlogDetail();\n\n\n    &lt;/script&gt;\n</code></pre>\n<h2><a id=\"7___664\"></a>7. 实现登录界面</h2>\n<p><strong>这里需要注意：啥样才算是已经登录</strong></p>\n<blockquote>\n<p><strong>用户有一个 session，同时 session 有一个 user 属性 ~<br/> 两者同时具备，才叫登录状态</strong></p>\n</blockquote>\n<p><strong>这里先给注销做铺垫：理解一下注销是如何操作的：</strong></p>\n<blockquote>\n<p><strong>注销只要破坏掉上面的任意一个条件就行了</strong></p>\n</blockquote>\n<h3><a id=\"71__671\"></a>7.1 约定好前后端交互接口</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\df75f1cc7c4d4ca58997be85bffc9841.png\"/></p>\n<h3><a id=\"72__LoginServlet_675\"></a>7.2 实现 LoginServlet</h3>\n<pre><code>package controller;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport model.User;\nimport model.UserDao;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\n\n\n// 实现登录页面\n@WebServlet(\"/login\")\npublic class LoginServlet extends HttpServlet {\n    private  ObjectMapper objectMapper = new ObjectMapper();\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        req.setCharacterEncoding(\"utf-8\");\n        resp.setCharacterEncoding(\"utf-8\");\n        // 1. 获取到请求中的参数\n        String username = req.getParameter(\"username\");\n        String password = req.getParameter(\"password\");\n        if(username == null || \"\".equals(username) || password == null || \"\".equals(password)) {\n            // 请求内容缺失，登录失败\n            resp.setContentType(\"text/html; charset=utf8\");\n            resp.getWriter().write(\"当前的用户名或者密码为空\");\n            return;\n        }\n        // 2. 和数据库中的的内容进行比较\n        UserDao userDao = new UserDao();\n        User user = userDao.selectByName(username);\n        if(user == null || !user.getPassword().equals(password)) {\n            // 用户没有查到或者密码不匹配，登录失败\n            resp.setContentType(\"text/html;charset=utf8\");\n            resp.getWriter().write(\"用户名或密码错误\");\n            return;\n        }\n        // 3. 如果比较通过，则创建会话\n        HttpSession session = req.getSession(true);\n        // 把刚才的用户信息，存储到会话中\n        session.setAttribute(\"user\",user);\n\n        // 4. 返回一个重定向报文，跳转到博客列表页\n        resp.sendRedirect(\"blog_list.html\");\n    }\n }\n</code></pre>\n<h3><a id=\"73__729\"></a>7.3 实现前端代码</h3>\n<p><strong>修改</strong><code>blog_login.html </code><strong>这里只需要在原来登录操作上套上一层 form 标签就可以了</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a9c80c8d817243a1848e570b0813c701.png\"/></p>\n<p><strong>因为这里在原有的基础上填上了 form表单，我们在 css 中也会有一些改动</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3b024b0024de4c478e5d1d37a1dbeeb2.png\"/></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;登录页面&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/common.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/blog_login.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n     &lt;!--这是导航栏 nav--&gt;\n     &lt;div class = \"nav\"&gt;\n        &lt;img src=\"imge/ph.png\" alt=\"\"&gt;\n        &lt;!--标题 span--&gt;\n        &lt;span&gt;我的博客系统&lt;/span&gt;\n       &lt;!--这是一个空白元素用来占位置--&gt;\n        &lt;div class=\"spacer\"&gt;&lt;/div&gt;\n        &lt;!--链接标签&lt;a&gt;--&gt;\n        &lt;a href=\"blog_list.html\"&gt;主页&lt;/a&gt;\n        &lt;a href=\"blog_edit.html\"&gt;写博客&lt;/a&gt;\n        &lt;!--# 空链接--&gt; &lt;!--注销没必要显示在登录页面--&gt;&gt;\n        &lt;!-- &lt;a href=\"#\"&gt;注销&lt;/a&gt; --&gt;\n    &lt;/div&gt;\n    &lt;div class=\"login-container\"&gt;\n\n\n        &lt;form action=\"login\" method=\"post\"&gt;\n            &lt;!--空白页--&gt;\n        &lt;div class=\"login-dialog\"&gt;\n            &lt;h3&gt;登录&lt;/h3&gt;\n            &lt;div class=\"row\"&gt; &lt;!--一行--&gt;\n                &lt;span&gt;用户名&lt;/span&gt;\n                &lt;input type=\"text\" id=\"username\" name=\"username\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"row\"&gt;\n                &lt;span&gt;密码&lt;/span&gt;\n                &lt;input type=\"password\" id=\"password\" name=\"password\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"row\"&gt;\n                &lt;!-- &lt;button&gt;提交&lt;/button&gt; --&gt;\n                &lt;input type=\"submit\" id=\"submit\" value=\"提交\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;/form&gt;\n\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2><a id=\"8__789\"></a>8. 实现登录状态判定功能</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6e1ee60c6a5d4bbfa6ad40d3637b16e9.png\"/></p>\n<h3><a id=\"81__792\"></a>8.1 约定前后端交互接口</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a5057a18d3ce42fab838adb187d08675.png\"/></p>\n<h3><a id=\"82__LoginServlet__798\"></a>8.2 在 LoginServlet 进行代码添加</h3>\n<pre><code>package controller;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport model.User;\nimport model.UserDao;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\n\n\n// 实现登录页面\n@WebServlet(\"/login\")\npublic class LoginServlet extends HttpServlet {\n    private  ObjectMapper objectMapper = new ObjectMapper();\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        req.setCharacterEncoding(\"utf-8\");\n        resp.setCharacterEncoding(\"utf-8\");\n        // 1. 获取到请求中的参数\n        String username = req.getParameter(\"username\");\n        String password = req.getParameter(\"password\");\n        if(username == null || \"\".equals(username) || password == null || \"\".equals(password)) {\n            // 请求内容缺失，登录失败\n            resp.setContentType(\"text/html; charset=utf8\");\n            resp.getWriter().write(\"当前的用户名或者密码为空\");\n            return;\n        }\n        // 2. 和数据库中的的内容进行比较\n        UserDao userDao = new UserDao();\n        User user = userDao.selectByName(username);\n        if(user == null || !user.getPassword().equals(password)) {\n            // 用户没有查到或者密码不匹配，登录失败\n            resp.setContentType(\"text/html;charset=utf8\");\n            resp.getWriter().write(\"用户名或密码错误\");\n            return;\n        }\n        // 3. 如果比较通过，则创建会话\n        HttpSession session = req.getSession(true);\n        // 把刚才的用户信息，存储到会话中\n        session.setAttribute(\"user\",user);\n\n        // 4. 返回一个重定向报文，跳转到博客列表页\n        resp.sendRedirect(\"blog_list.html\");\n    }\n\n\n //   //  这个方法用来让前端检测当前的登录状态~~~~~~~~~~~~~~~~~~~~~~\n    // 1）检测有无会话 2）检测有无属性\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n       resp.setContentType(\"application/json;charset=utf8\");\n       HttpSession session =  req.getSession(false);\n\n       if(session == null) {\n           // 1) 检测有无会话，无说明未登录\n           // 创建对象--&gt; 里面为空\n           User user = new User();\n           resp.getWriter().write(objectMapper.writeValueAsString(user));\n           return;\n       }\n       User user = (User) session.getAttribute(\"user\");\n       if(user == null) {\n           // 2)虽然有会话，但是会话里如果没有 user 对象，也视为未登录\n           user = new User();\n           resp.getWriter().write(objectMapper.writeValueAsString(user));\n           return;\n       }\n       // 已经登录的状态！\n        // 注意，此处不要把密码返回到前端\n        user.setPassword(\"\");\n        resp.getWriter().write(objectMapper.writeValueAsString(user));\n    }\n}\n\n</code></pre>\n<h3><a id=\"83__commonjs_881\"></a>8.3 在前端代码中创建 common.js</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\931e2566441441b487a9dfd41978da03.png\"/></p>\n<pre><code>// 这个文件里放一些 页面公共的代码\n// 加上一个逻辑，通过 GET/login 这个接口来获取下当前的登录状态\nfunction getUserInfo() {\n    $.ajax({\n        type: 'get',\n        url: 'login',\n        success: function(body) {\n            // 判定此处的 body 是不是一个有效的 user 对象（userId 是否非 0）\n            if(body.userId &amp;&amp; body.userId &gt;0) {\n                // 登录成功\n                // 不做处理\n                console.log(\"当前用户登录成功！用户名：\" + body.username);\n            }else{\n                // 登录失败\n                // 让前端页面，跳转到 login.html\n                alert(\"当前你尚未登录！请登录后再访问博客列表！\");\n                location.assign('blog_login.html');\n            }\n        },\n        error: function() {\n            alert(\"当前你尚未登录！请登录后再访问博客列表！\");\n                location.assign('blog_login.html');\n        }\n    });\n    \n\n}\ngetUserInfo();\n</code></pre>\n<h3><a id=\"84__915\"></a>8.4 修改前端代码</h3>\n<blockquote>\n<p>在 <code>blog_list.html</code> <code>blog_detil.html</code> 中引入 js文件，就可以执行到里面的代码，也就进行了登录状态的监测了</p>\n</blockquote>\n<pre><code> &lt;script src=\"js/commom.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\51a789b8c1e141eab9b357b938690a84.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\18fba5877c4d438f9a52c6724cf25157.png\"/></p>\n<h2><a id=\"9__922\"></a>9. 实现显示用户信息功能</h2>\n<h3><a id=\"91__923\"></a>9.1 约定好前后端交互接口</h3>\n<h3><a id=\"92__AuthorServlet__924\"></a>9.2 实现 AuthorServlet 代码</h3>\n<pre><code>package controller;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport model.Blog;\nimport model.BlogDao;\nimport model.User;\nimport model.UserDao;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n\n/**\n * 根据博客 id 查 博客信息\n * 根据 博客信息里的 作者 id 查 作者信息\n */\n@WebServlet(\"/authorInfo\")\npublic class AuthorServlet  extends HttpServlet {\n    private ObjectMapper objectMapper = new ObjectMapper();\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.setContentType(\"application/json; charset=utf8\");\n        // 通过这个方法, 来获取到指定的博客的作者信息.\n        String param = req.getParameter(\"blogId\");\n        if (param == null || \"\".equals(param)) {\n            // 参数缺少了.\n            resp.getWriter().write(\"{ \\\"ok\\\": false, \\\"reason\\\": \\\"参数缺失!\\\" }\");\n            return;\n        }\n\n        // 根据当前 blogId 在数据库中进行查找, 找到对应的 Blog 对象, 再进一步的根据 blog 对象, 找到作者信息.\n        BlogDao blogDao = new BlogDao();\n        Blog blog = blogDao.selectOne(Integer.parseInt(param));\n        if (blog == null) {\n            resp.getWriter().write(\"{ \\\"ok\\\": false, \\\"reason\\\": \\\"要查询的博客不存在!\\\" }\");\n            return;\n        }\n\n        // 根据 blog 对象, 查询到用户对象\n        UserDao userDao = new UserDao();\n        User author = userDao.selectById(blog.getUserId());\n        if (author == null) {\n            resp.getWriter().write(\"{ \\\"ok\\\": false, \\\"reason\\\": \\\"要查询的用户不存在!\\\" }\");\n            return;\n        }\n\n        // 把 author 返回到浏览器这边\n        // 注意要把密码给干掉!\n        author.setPassword(\"\");\n        resp.getWriter().write(objectMapper.writeValueAsString(author));\n\n    }\n}\n\n</code></pre>\n<h3><a id=\"93__986\"></a>9.3 实现前端代码</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\298b0b316eca4042a7b47e82a2141f79.png\"/></p>\n<h4><a id=\"_989\"></a>针对博客列表页进行修改</h4>\n<p><strong>在 common.js 中 修改代码</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c3484cc769c84bdda9b32af1f8aada23.png\"/></p>\n<h4><a id=\"_995\"></a>针对博客详情页</h4>\n<pre><code>\n</code></pre>\n<h2><a id=\"10__1003\"></a>10. 实现注销功能</h2>\n<p><strong>在导航栏中安排一个“注销”按钮，当用户点击注销之后，就会在服务器上取消登录状态，并且能够跳转到登录页面</strong></p>\n<h3><a id=\"101__1005\"></a>10.1 约定好前后端交互接口</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e68a3892acc647aeb1525fa7bb3e80be.png\"/></p>\n<h3><a id=\"102__LogouServlet_1008\"></a>10.2 实现 LogouServlet</h3>\n<pre><code>package controller;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.*;\nimport java.io.IOException;\nimport java.util.Enumeration;\n\n@WebServlet(\"/logout\")\npublic class LogoutServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            // 先找到当前用户的会话,\n            HttpSession session = req.getSession(false);\n            if (session == null) {\n                // 用户没有登录!! 谈不上注销!\n                resp.getWriter().write(\"当前用户尚未登录! 无法注销!\");\n                return;\n            }\n            // 然后把这个用户的会话中的信息给删掉就行了!!\n            session.removeAttribute(\"user\");\n            resp.sendRedirect(\"blog_login.html\");\n        }\n}\n</code></pre>\n<h3><a id=\"103__1036\"></a>10.3 实现前端代码</h3>\n<p><strong>将 blog_detail.html blog_list.html bloh_edit.htm中的注销标签进行修改</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\774ee468c83e49aabeb95651935c315a.png\"/></p>\n<h2><a id=\"11__1042\"></a>11. 实现发布博客功能</h2>\n<p>在<code>博客编辑页</code>中，当用户输入<code>博客标题</code>，和<code>正文</code>之后，点击<code>发布</code><br/> 此时就会<code>把博客数据提交到服务器，由服务器存储到数据中</code></p>\n<h3><a id=\"111__1046\"></a>11.1 约定好前后端交互的接口</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f2870a2a82a8428d8c4ea24a2a11a3fb.png\"/></p>\n<h3><a id=\"112_BlogServletdoPost_1050\"></a>11.2 在BlogServlet中添加doPost方法</h3>\n<pre><code>@Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        HttpSession session = req.getSession(false);\n        if (session == null) {\n            // 当前用户未登录, 不能提交博客!\n            resp.setContentType(\"text/html;charset=utf8\");\n            resp.getWriter().write(\"当前用户未登录, 不能提交博客!\");\n            return;\n        }\n        User user = (User) session.getAttribute(\"user\");\n        if (user == null) {\n            // 当前用户未登录, 不能提交博客!\n            resp.setContentType(\"text/html;charset=utf8\");\n            resp.getWriter().write(\"当前用户未登录, 不能提交博客!\");\n            return;\n        }\n        // 一定要先指定好请求按照哪种编码来解析\n        req.setCharacterEncoding(\"utf8\");\n        // 先从请求中, 取出参数(博客的标题和正文)\n        String title = req.getParameter(\"title\");\n        String content = req.getParameter(\"content\");\n        if (title == null || \"\".equals(title) || content == null || \"\".equals(content)) {\n            // 直接告诉客户端, 请求参数不对\n            resp.setContentType(\"text/html;charset=utf8\");\n            resp.getWriter().write(\"提交博客失败! 缺少必要的参数!\");\n            return;\n        }\n        // 构造 Blog 对象, 把当前的信息填进去, 并插入数据库中\n        // 此处要给 Blog 设置的属性, 主要是 title, content, userId (作者信息)\n        // postTime 和 blogId 都不需要手动指定, 都是插入数据库的时候自动生成的.\n        Blog blog = new Blog();\n        blog.setTitle(title);\n        blog.setContent(content);\n        // 作者 id 就是当前提交这个博客的用户的身份信息!!\n        blog.setUserId(user.getUserId());\n        BlogDao blogDao = new BlogDao();\n        blogDao.insert(blog);\n        // 重定向到, 博客列表页!\n        resp.sendRedirect(\"blog_list.html\");\n    }\n</code></pre>\n<h3><a id=\"113__1093\"></a>11.3 实现前端代码</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ece70739000d4f8d8ef0cef5e383dd28.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\4f39156570f04066a1c5ea645d286b5b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\d509488551d74d769dcfa6d3d3455afe.png\"/></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;博客编辑页&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/common.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/blog_edit.css\"&gt;\n   \n\n    &lt;!-- 引入 editor.md 的依赖 --&gt;\n    &lt;link rel=\"stylesheet\" href=\"editor.md/css/editormd.min.css\" /&gt;\n    &lt;script src=\"js/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"editor.md/lib/marked.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"editor.md/lib/prettify.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"editor.md/editormd.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- 这是导航栏 --&gt;\n    &lt;div class=\"nav\"&gt;\n        &lt;img src=\"imge/ph.png\" alt=\"\"&gt;\n        &lt;span&gt;我的博客系统&lt;/span&gt;\n        &lt;!-- 空白元素, 用来占位置 --&gt;\n        &lt;div class=\"spacer\"&gt;&lt;/div&gt;\n        &lt;a href=\"blog_list.html\"&gt;主页&lt;/a&gt;\n        &lt;a href=\"blog_edit.html\"&gt;写博客&lt;/a&gt;\n        &lt;a href=\"logout\"&gt;注销&lt;/a&gt;\n    &lt;/div&gt;\n    &lt;!-- 包裹整个博客编辑页内容的顶级容器 --&gt;\n    \n    &lt;div class=\"blog-edit-container\"&gt;\n        &lt;form action=\"blog\" method=\"post\" style=\"height: 100%\"&gt;\n            &lt;div class=\"title\"&gt;\n                &lt;input type=\"text\" placeholder=\"在此处输入标题\" name=\"title\"&gt;\n                &lt;!-- &lt;button&gt;发布文章&lt;/button&gt; --&gt;\n                &lt;input type=\"submit\" value=\"发布文章\" id=\"submit\"&gt;\n            &lt;/div&gt;\n            &lt;!-- 放置 md 编辑器 --&gt;\n            &lt;div id=\"editor\"&gt;\n                    &lt;!-- 为了进行 form的提交，此处搞一下 textarea 多行编辑框，借助这个编辑框来实现表单的提交--&gt;\n                    &lt;textarea name=\"content\" style=\"display: none\"&gt;&lt;/textarea&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n\n\n\n\n    &lt;script&gt;\n        // 初始化编辑器\n        let editor = editormd(\"editor\", {\n            // 这里的尺寸必须在这里设置. 设置样式会被 editormd 自动覆盖掉. \n            width: \"100%\",\n            // 设定编辑器高度\n            height: \"calc(100% - 50px)\",\n            // 编辑器中的初始内容\n            markdown: \"# 在这里写下一篇博客\",\n            // 指定 editor.md 依赖的插件路径\n            path: \"editor.md/lib/\",\n            // 此处要加上一个重要的选项，然后 editr.md 就会自动把用户在编辑器输入的内容同步保存到 隐藏的 textarea中\n            saveHTMLToTextarea:true,\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2><a id=\"12__1166\"></a>12. 删除博客</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e43f2b6992084b088e4a102854f232fc.png\"/></p>\n<h3><a id=\"121__1168\"></a>12.1 约定号前后端交互接口</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2cd2f9264b9f404a9166a44025f02fb9.png\"/></p>\n<h3><a id=\"121__1172\"></a>12.1 实现前端代码</h3>\n<pre><code> &lt;script&gt;\n         function getBlogDetail() {\n            $.ajax({\n                type: 'get',\n                // location.search 拿到了形如 '?blogId=5' 这样的一段内容\n                url: 'blog' + location.search,\n                success: function(body) {\n                    // 根据 body 中的内容来构造页面\n                    // 1. 构造博客标题\n                    let h3 = document.querySelector(\".blog-content&gt;h3\");\n                    h3.innerHTML = body.title;\n                    // 2. 构造博客发布时间\n                    let dateDiv = document.querySelector('.date');\n                    dateDiv.innerHTML = body.postTime;\n                    // 3. 构造博客正文\n                    // 如果直接把 content 设为 innerHTML, 此时展示在界面上的内容, 是原始的 markdown 字符串\n                    // 咱们需要的是渲染后的, 带有格式的效果\n                    // let content = document.querySelector('#content');\n                    // content.innerHTML = body.content;\n\n                    // 第一个参数对应 id=content 的 html 标签. 渲染后得到的 html 片段就会被放到这个 标签下. \n                    editormd.markdownToHTML('content', {\n                        markdown: body.content\n                    });\n                }\n            });\n        }   \n\n  // 加上一个逻辑，通过 GET /login 这个接口来获取下当前的登录状态          \n    function getUserInfo(pageName) {\n        $.ajax({\n        type:'get',\n        url: 'login',\n        success: function(body) {\n            // 判断此处的 body 是不是一个有效的user 对象（userId 是否为0）\n            if(body.userId &amp;&amp; body.userId &gt; 0) {\n                // 登录成功\n                // 不做处理\n                console.log(\"当前用户登录成功！用户名：\" + body.username);\n\n                // 在getUserInfo 的回调函数中，来调用获取用户信息\n                getAuthorInfo(body);\n\n                \n            }else {\n                // 登录失败\n                // 让前端页面，跳转到 login.html\n                alert(\"当前您尚未登录！请登录后再访问博客列表\");\n                location.assign('blog_login.html');\n            }\n        },\n        error: function() {\n            alert(\"当前您尚未登录！请登录后再访问博客列表\");\n            location.assign('blog_login.html');\n        }\n        });\n    }\n  \n    // 判定用户的登录状态\n    getUserInfo('blog_detail.html');\n\n     // 从服务器获取一下当前博客的作者信息, 并显示到界面上. \n    // 参数 user 就是刚才从服务器拿到的当前登录用户的信息\n    \n        function getAuthorInfo(user) {\n                $.ajax({\n                   type: 'get',\n                   url: 'authorInfo' + location.search,\n                   success: function(body) {\n                       // 此处的body，就是服务器返回的User对象,是文章作者信息\n                       if(body.username) {\n                            getBlogDetail();\n                           changeUserName(body.username);\n                           if(body.username == user.username ) {\n                               // 作业和登录的用户是一个人，则显示 删除按钮\n                               let navDiv = document.querySelector('.nav');\n                               let a = document.createElement('a');\n                               a.innerHTML = '删除';\n                               // 点击删除，构造一个 形如 blogDelete？blogId = 6 这样的请求\n                               a.href = 'blogDelete' + location.search;\n                               navDiv.appendChild(a);\n                           }\n                       }else{\n                           console.log(\"获取信息失败\" + body.reason);\n                       }\n                   }\n                });\n            }\n\n            function changeUserName(username) {\n            let h3 = document.querySelector('.card&gt;h3');\n            h3.innerHTML = username;\n            }     \n    &lt;/script&gt;\n</code></pre>\n<h3><a id=\"122_BlogDeleteServlet_1269\"></a>12.2 实现BlogDeleteServlet</h3>\n<pre><code>package controller;\n\nimport model.Blog;\nimport model.BlogDao;\nimport model.User;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\n\n/**\n * 实现删除功能\n */\n@WebServlet(\"/blogDelete\")\npublic class BlogDeleteServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // 1. 检查当前用户是否登录\n        HttpSession session = req.getSession(false);\n        if (session == null) {\n            resp.setContentType(\"text/html; charset=utf8\");\n            resp.getWriter().write(\"当前尚未登录, 不能删除!\");\n            return;\n        }\n        User user = (User) session.getAttribute(\"user\");\n        if (user == null) {\n            resp.setContentType(\"text/html; charset=utf8\");\n            resp.getWriter().write(\"当前尚未登录, 不能删除!\");\n            return;\n        }\n\n        // 2. 获取到参数中的 blogId\n        String blogId = req.getParameter(\"blogId\");\n        if (blogId == null || \"\".equals(blogId)) {\n            resp.setContentType(\"text/html; charset=utf8\");\n            resp.getWriter().write(\"当前 blogId 参数不对!\");\n            return;\n        }\n\n        // 3. 获取要删除的博客信息.\n        BlogDao blogDao = new BlogDao();\n        Blog blog = blogDao.selectOne(Integer.parseInt(blogId));\n        if (blog == null) {\n            resp.setContentType(\"text/html; charset=utf8\");\n            resp.getWriter().write(\"当前要删除的博客不存在!\");\n            return;\n        }\n\n        // 4. 再次校验, 当前的用户是否就是博客的作者\n        if (user.getUserId() != blog.getUserId()) {\n            // 这一点在前端这里其实也处理过~~ 但是此处还是再校验一次, 不是坏事!!!\n            resp.setContentType(\"text/html; charset=utf8\");\n            resp.getWriter().write(\"当前登录的用户不是作者, 没有权限删除!\");\n            return;\n        }\n\n        // 5. 确认无误, 开始删除\n        blogDao.delete(Integer.parseInt(blogId));\n\n        // 6. 重定向到博客列表页\n        resp.sendRedirect(\"blog_list.html\");\n    }\n    \n}\n\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}