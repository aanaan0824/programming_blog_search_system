{"blogid": "123080893", "writerAge": "码龄9年", "writerBlogNum": "1073", "writerCollect": "813", "writerComment": "212", "writerFan": "8799", "writerGrade": "7级", "writerIntegral": "10921", "writerName": "Rust语言中文社区", "writerProfileAdress": "writer_image\\profile_123080893.jpg", "writerRankTotal": "1209", "writerRankWeekly": "3826", "writerThumb": "431", "writerVisitNum": "619137", "blog_read_count": "835", "blog_time": "于 2022-02-22 23:13:45 发布", "blog_title": "【Rust日报】2022-02-22 Slint - 为桌面和嵌入式设备创建一个新的GUI框架", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div id=\"js_content\">\n<h2><strong>SixtyFPS现已更名为Slint</strong></h2>\n<p>SixtyFPS becomes Slint — Slint Blog</p>\n<p>我们将<code>SixtyFPS</code>改名为<code>Slint</code>。</p>\n<p><strong>为什么要改变？</strong></p>\n<p>在2020年春天，我们启动了SixtyFPS，旨在为桌面和嵌入式设备创建一个新的GUI框架。</p>\n<p>在将近两年的时间里，我们已经发布了13个版本，赢得了许多用户，创建了一个贡献者社区，签署了一些客户，并获得了3k个GitHub star🤣。</p>\n<p>我们选择SixtyFPS这个名字是因为我们想传达我们的目标：即始终实现流畅的动画，这通常与每秒60帧的刷新率有关。</p>\n<p>许多旁观者从字面上理解这个名字。每当我们的项目出现在社交媒体上，我们就会收到关于我们名字的评论：考虑到现在的屏幕经常以更高的刷新率运行，这个名字显得过时了。</p>\n<p>我们考虑改变这个名字，并决定在开放源码社区讨论这个问题，以收集意见。我们在GitHub上展开了讨论，并收到了许多好的建议。</p>\n<p>@karoofish提出了<code>slant</code>，这成为投票率最高的建议，我们非常喜欢它。我们和一些朋友讨论了这个问题，包括一些讲母语的人，有些人建议，在某些情况下，它可以有一点负面的意思。我们所需要的只是一个小小的迭代。</p>\n<p>我们的新名字来自于<strong>S</strong>traightforward, <strong>L</strong>ightweight, <strong>N</strong>ative <strong>T</strong>oolkit，这也是我们的设计目标：<code>Slint</code>。</p>\n<p>衷心感谢每一个参与其中的人，尤其是@karoofish!</p>\n<p style=\"text-align:center;\"><img alt=\"d9eb7e54587b3e441fa89e352646af57.png\" src=\"image\\d9eb7e54587b3e441fa89e352646af57.png\"/></p>\n<p><strong>什么是Slint？</strong><br/></p>\n<p>对于那些从未听说过SixtyFPS <strong>Slint</strong>的人来说，它是一个用Rust编程语言实现的GUI工具箱。</p>\n<p>其核心是声明性的Slint标记语言，它代表了整个用户界面。Slint语言从Qt的QML获得了一些灵感。这很自然，因为我们来自那个生态系统。我们决定从头开始建立一个强大的类型系统，一个设计师友好的单元系统和完整的工具支持。用Slint标记语言编写用户界面，用 \"真正的\" 编程语言编写业务逻辑。</p>\n<p>你可以用不同的编程语言使用Slint，比如Rust、C++和JavaScript。我们为这些语言设计的API是直观和习惯性的，而不仅仅是一些自动生成的绑定(binding)。我们设计了这个工具包，以便我们可以将Python、Go或其他语言加入到这个组合中。</p>\n<p>我们自己的编译器可以解析Slint语言，并直接编译成本地的Rust或C++代码，具有本地性能和高效的内存布局。你也可以用我们的运行时解释器在运行时动态地加载<code>.slint</code>文件。</p>\n<p>我们的工具包括一个实现了语言服务器协议的语言服务器，可以方便的集成到各种IDE和编辑器中。它提供了自动完成、语义语法高亮和一个很酷的实时预览，正如下面的视频片段所演示的那样。</p>\n<p><strong>Slint 0.2.0版本</strong></p>\n<p>0.2.0版本的目的是为了反映这一名称的变化。</p>\n<p>我们也借此机会对我们的API进行了一些重要的修改，这些修改是我们从去年0.1.0版本开始收集的，在此感谢你们的反馈。</p>\n<p>下面是你如何升级你的应用程序：</p>\n<ul><li><p>确保你的编程环境符合我们更新的工具要求：Rust 1.56或更高版本。如果你使用的是C++，请使用支持C++ 20的编译器。</p></li><li><p>如果你使用的是Rust，把你的Cargo.toml改成依赖<code>slint</code>而不是 <code>sixtyfps</code>。如果你使用的是C++，修改你的CMakeLists.txt以找到Slint包，并针对Slint::Slint目标进行链接。</p></li><li><p>在你的应用程序代码中，用slint重命名所有出现的 sixtyfps 模块/命名空间。关于API的变化，请参阅我们的Rust（+解释器）和C++迁移指南。</p></li></ul>\n<p>在这个版本中，我们还释放了一个新的功能：你现在可以在Slint场景的渲染之前或之后集成自定义的OpenGL代码。新的OpenGL Underlay Example展示了如何在Rust和C++中做到这一点。</p>\n<p style=\"text-align:center;\"><img alt=\"7ad1b4083c409c452b71e8b0ac11eece.png\" src=\"image\\7ad1b4083c409c452b71e8b0ac11eece.png\"/></p>\n<p><strong>新的网站和设计</strong><br/></p>\n<p>你可能已经注意到，我们网站的位置、设计和标志都发生了变化。在Benedikt Wisbauer的帮助下，我们利用这个机会更新了我们的品牌形象；我们还移动了GitHub上的组织。</p>\n<p>你可以在这里找到我们新的GitHub仓库：github.com/slint-ui/slint。</p>\n<p>我们希望你能与我们的新名称、品牌和我们的最新版本联系起来。🚀❤️</p>\n<p>如果你对我们的旧网站感到好奇，它仍然可以在互联网档案中找到。</p>\n<h2><strong>Alacritty六周年生日快乐!</strong></h2>\n<p>Happy birthday Alacritty!</p>\n<p>六年前的2月21号(2016年2月21号)，<code>Joe Wilm</code>提交了第一个commit到<code>Alacritty</code>的Git仓库：</p>\n<pre class=\"has\"><code class=\"language-go\">commit 621776cd94890936b24f3abb8b7ec1f36dad9150\nAuthor: Joe Wilm &lt;joe@jwilm.com&gt;\nDate:   Sun Feb 21 08:15:41 2016 -0800\n\n    Initialize new cargo binary project</code></pre>\n<p>今天是<code>Alacritty</code>的6周岁生日，这篇文章使用Repography 分析和回顾了<code>Alacritty</code>的repo历史：</p>\n<p style=\"text-align:center;\"><img alt=\"30f266bee47b58a0d73d954b8afaa3fc.png\" src=\"image\\30f266bee47b58a0d73d954b8afaa3fc.png\"/></p>\n<h2><strong>Itertools：辅助的迭代器适配器、函数和宏。</strong><br/></h2>\n<p>rust-itertools/itertools: Extra iterator adaptors, iterator methods, free functions, and macros. (github.com)</p>\n<p><code>Itertools</code>是一个额外的Rust中迭代器适配器、函数和宏的集合，它提供了很多类似于<code>Python</code>中<code>itertools</code>模块的功能。</p>\n<p>例如生成一个指定大小的迭代器中元素排列的代码可以这样写：</p>\n<pre class=\"has\"><code class=\"language-go\">use itertools::Itertools;\n\nlet perms = (5..8).permutations(2);\nitertools::assert_equal(perms, vec![\n    vec![5, 6],\n    vec![5, 7],\n    vec![6, 5],\n    vec![6, 7],\n    vec![7, 5],\n    vec![7, 6],\n]);</code></pre>\n<h2><strong>Rust Meetup录屏（2022年2月3日在比利时）</strong></h2>\n<p>Belgium Rust Meetup (February 3 2022, recording): async Qt, bubbly bubblesorts and how to win hackathons.</p>\n<p>2022年2月3日在比利时举办的Rust Meetup录屏分享，内容包含：</p>\n<ul><li><p>async Qt</p></li><li><p>冒泡排序</p></li><li><p>如何赢得黑客松</p></li></ul>\n<p>视频地址：Belgium Rust Meetup (February 3 2022)</p>\n<hr/>\n<p>From 日报小组 odd-cat</p>\n<p>社区学习交流平台订阅：</p>\n<p>Rust.cc 论坛: 支持 rss</p>\n<p>微信公众号：Rust 语言中文社区</p>\n</div>\n</div>\n</div>"}