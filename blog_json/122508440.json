{"blogid": "122508440", "writerAge": "码龄5年", "writerBlogNum": "8", "writerCollect": "744", "writerComment": "89", "writerFan": "335", "writerGrade": "2级", "writerIntegral": "333", "writerName": "达莓的编程笔记", "writerProfileAdress": "writer_image\\profile_122508440.jpg", "writerRankTotal": "69714", "writerRankWeekly": "697588", "writerThumb": "60", "writerVisitNum": "142328", "blog_read_count": "60771", "blog_time": "已于 2022-04-11 10:02:16 修改", "blog_title": "2022年最新一篇文章教你青龙面板拉库,拉取单文件,安装依赖,设置环境变量,解决没有或丢失依赖can‘t find module之保姆教程(附带几十个青龙面板脚本仓库)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>没有安装青龙面板的先看我另外一篇教程<a class=\"link-info\" href=\"https://blog.csdn.net/qq_39997540/article/details/122363463?spm=1001.2014.3001.5501\" title=\"2022年青龙面板部署完整版教程(多图)\">2022年青龙面板部署完整版教程(多图)</a></h1>\n<h1>1.青龙面板拉库</h1>\n<p style=\"text-align:center;\">先把配置文件config.sh第20行改成我这样</p>\n<p style=\"text-align:center;\">GithubProxyUrl=\"https://pd.zwc365.com/cfworker/\"<img alt=\"\" src=\"image\\ba3e3b4163144635ab8957057a59a2a4.png\"/></p>\n<p></p>\n<p></p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:center;\">打开浏览器进入按照我的主页里的另一篇教程安装好的青龙面板,点击右上角的添加任务</p>\n<p> <img alt=\"\" src=\"image\\e2573c248fe148eeb2cf17eefc5479e0.png\"/></p>\n<p>编辑任务 1 0-23/1 * * *</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\68d7bb3f14144790b0723b245dbfd7d1.png\"/></p>\n<p>点击你添加好的拉库任务右边的运行按钮,过几分钟你要拉的库就下载到你的青龙面板了<img alt=\"\" src=\"image\\2a6e3cde404a4bbfb662243525d33810.png\"/></p>\n<h1>2.分享收集的青龙面板脚本仓库,建议选择拉一个就可以了</h1>\n<p>这里不提供拉库,要库的拉到文章最下面进群找精华消息,拉完库继续看教程!!!</p>\n<p><br/>  </p>\n<h1> 3.安装脚本所需要的依赖库</h1>\n<pre><code>docker exec -it qinglong bash -c \"npm install -g npm\"\ndocker exec -it qinglong bash -c \"npm install -g typescript\"\ndocker exec -it qinglong bash -c \"npm install axios date-fns\"\ndocker exec -it qinglong bash -c \"npm install crypto -g\"\ndocker exec -it qinglong bash -c \" npm install jsdom\"\ndocker exec -it qinglong bash -c \"npm install png-js\"\ndocker exec -it qinglong bash -c \"pnpm i png-js\"\ndocker exec -it qinglong bash -c \"pip3 install requests\"\ndocker exec -it qinglong bash -c \"apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source\"\ndocker exec -it qinglong bash -c \"apk add python3 zlib-dev gcc jpeg-dev python3-dev musl-dev freetype-dev\"\ndocker exec -it qinglong bash -c \"cd /ql/scripts/ &amp;&amp; apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; npm i &amp;&amp; npm i -S ts-node typescript @types/node date-fns axios png-js canvas --build-from-source\"\ndocker exec -it qinglong bash -c \"apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source\"\ndocker exec -it qinglong bash -c \"cd scripts &amp;&amp; npm i -S png-js\"</code></pre>\n<p> 把以上命令一行一行复制到你的ssh客户端的的输入框中,按下回车安装(docker exec直到那一条段落结束)(ssh就是我在另一篇文章中给的finalssh或其他ssh)</p>\n<p>在这里有的依赖安装会报错,方法是可以先装后面的依赖,装好了再试试装前面没装好的依赖,</p>\n<p>这些装完应该能运行大部分脚本了,下面我们再到浏览器青龙面板装一下依赖,建议我装的依赖读者也安装一下</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\fc98142292e945feab0060df5f3cc9e2.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\8ef058ab61504f1d83f69ef13dd95df1.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\2b133605d9c045a489d1011b933b897a.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\220d412debc14394adcbe8faaf3cf13d.png\"/></p>\n<p> 到次为止,已经安装了可以跑大部分脚本的依赖了</p>\n<h1>4.设置环境变量</h1>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\0c1b0bec0adf4633b3c2ba01b106aaa4.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\985e0e9448bd4d508c8de4770669ae20.png\"/></p>\n<p><img alt=\"\" src=\"image\\8b8653f2bd824fb28ad78c65ed63bcfc.png\"/></p>\n<p> 这种添加环境变量的方式可以满足大部分脚本的要求,但某些脚本(例如opencard等脚本则需要在青龙面板-配置文件-config,sh中添加环境变量,有时候使用这种方法是必要的</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\0a31d74fa2084b158fe617625a32350a.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\714d0aee35024d699a90b35b6d1c535b.png\"/></p>\n<p></p>\n<p> 建议读者在文件最下面添加我这些变量</p>\n<pre><code>export PMODE=\"off\"\nexport guaopencard=\"true\"\nexport guaopenwait_All=\"60\"\nexport guaopencard_All=\"true\"\nexport guaopencard_addSku_All=\"true\"\nexport guaopencardRun_All=\"true\"\nexport guaopencard_draw=\"true\"\nexport guaunknownTask_addSku_All=\"true\"\nexport JD_TRY=\"true\"\nexport exjxbeans=‘true’</code></pre>\n<p>到此,读者应该可以运行大部分脚本了,交流群 717585604,建议读者继续往下看</p>\n<h1>5.拉取单个文件,依赖修复方法</h1>\n<table><tbody><tr><td id=\"artContent\"> <h2>如何拉库：</h2> <pre><code>ql repo &lt;repourl&gt; &lt;path&gt; &lt;blacklist&gt; &lt;dependence&gt; &lt;branch&gt;\n</code></pre> <p>对应意思 “库地址” “拉哪些” “不拉哪些” “依赖文件” “分支”</p> <h2>拉取单个脚本</h2> <pre><code>ql raw &lt;fileurl&gt;\n</code></pre> <h2>使用方法：</h2> <p>一、添加库：进入面板-右上角“定时任务”-分别填入相关信息。提供个人设置，给大家参考。其中人物名、任务定时可自定义。<br/> 二、运行库任务添加脚本：分别点击每个库的运行按钮，稍等一下，让它飞一会儿。然后刷新页面，就能看到库的脚本了。</p> <h2>拉库出现的问题及解决方案</h2> <pre><code>1.出现这种错误：\nCannot find module 'xxxx'\n\n依赖不完整，解决方法：\ndocker exec -it qinglong(容器名称) bash\n\ncd /ql/scripts/\n\npnpm install 'xxxx'\n\nnpm install 'xxxx'\n\n这两个安装命令都可以用\n\n2.出现这种错误：\n\nCannot find module './xxxx'\n\n那就很有是拉库命令不完整，请检查或复制完整的拉库命令。</code></pre> </td></tr></tbody></table>\n<p></p>\n<p></p>\n<p>示范教程</p>\n<p>一些脚本依赖文件比如ql.js，sendNotify.js，jdCookie.js等没有下载到库文件夹，造成脚本运行提示module确失的错误。</p>\n<h2>解决办法：</h2>\n<h3><strong>方法1）复制对应缺失的&lt;module名称&gt;.js或.py到库文件夹</strong></h3>\n<p>有时你会发现有的文件，比如ccwav的极速脚本运行提示的JS_USER_AGENTS缺失，库本身并没有提供，那就需要从其他库里copy到ccwav文件夹下了</p>\n<h3><strong>方法2）完善ql repo命令的依赖部分，重新运行拉库命令：</strong>小白现需要了解命令中各部分的含义(可以对照前面给出的部分拉库命令理解)</h3>\n<pre>\n</pre>\n<pre><code>ql repo &lt;repourl库地址&gt; &lt;path拉那些文件&gt; &lt;blacklist不拉那些文件&gt; &lt;dependence依赖&gt; &lt;branch库分支&gt;</code></pre>\n<p>比如faker的库：</p>\n<pre><code>ql repo https://pd.zwc365.com/https://github.com/shufflewzc/faker2.git \"jd_|jx_|gua_|jddj_|getJDCookie\"\n </code></pre>\n<h1>6.结尾</h1>\n<p>后续安装机器人教程<a href=\"https://blog.csdn.net/qq_39997540/article/details/122608714?spm=1001.2014.3001.5501\" title=\"2022新版完整版青龙面板对接机器人,傻妞对接onebot(oicq)协议实现机器人功能_达莓的编程笔记的博客-CSDN博客\">2022新版完整版青龙面板对接机器人,傻妞对接onebot(oicq)协议实现机器人功能_达莓的编程笔记的博客-CSDN博客</a></p>\n<p>至此,读者已经学会如何运行青龙脚本了</p>\n<p>本期青龙面板的完整安装教程就到这里了,想了解更多青龙面板,对接qq机器人,elecv2p,fiddler,wireshark,httpcanry抓包的知识,请关住我,我会为各位持续更新.<br/> 交流群 717585604</p>\n</div>\n</div>"}