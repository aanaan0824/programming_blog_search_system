{"blogid": "121229756", "writerAge": "码龄8年", "writerBlogNum": "110", "writerCollect": "671", "writerComment": "113", "writerFan": "15614", "writerGrade": "5级", "writerIntegral": "3507", "writerName": "99Kies", "writerProfileAdress": "writer_image\\profile_121229756.jpg", "writerRankTotal": "24915", "writerRankWeekly": "4242", "writerThumb": "233", "writerVisitNum": "344549", "blog_read_count": "13769", "blog_time": "于 2021-11-14 23:22:21 发布", "blog_title": "ink 合约篇（一）| 部署 ink 合约", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>ink! 合约篇（一）| 部署 ink! 合约</h3>\n<ul><li><a href=\"#ink__9\">ink! 合约简介</a></li><li><ul><li><a href=\"#_10\">简介</a></li><li><a href=\"#WASM_13\">WASM简介</a></li></ul>\n</li><li><a href=\"#_Europa__19\">通过 Europa 启动一个合约编译沙盒环境</a></li><li><a href=\"#_45\">部署合约</a></li><li><ul><li><a href=\"#_56\">编译</a></li><li><a href=\"#_142\">部署</a></li><li><a href=\"#_164\">调用</a></li></ul>\n</li><li><a href=\"#_173\">参考链接</a></li><li><a href=\"#_181\">关于作者</a></li></ul>\n</div>\n<br/> 实验环境：\n<p></p>\n<ol><li>Ubuntu20.04</li><li>Europa <a href=\"https://github.com/patractlabs/europa\">https://github.com/patractlabs/europa</a></li><li>ink！<a href=\"https://github.com/paritytech/ink\">https://github.com/paritytech/ink</a></li><li>polkadot explorer <a href=\"https://polkadot.js.org/apps/#/explorer\">https://polkadot.js.org/apps/#/explorer</a></li><li>rust 开发环境。因为开发过程中会遇到rust的环境，可以根据这块的引导实现配置 <a href=\"https://docs.substrate.io/v3/getting-started/installation/\">https://docs.substrate.io/v3/getting-started/installation/</a></li><li></li></ol>\n<p>这篇博文主要是介绍部署ink！合约的一些流程，以及入坑的一些前提准备。</p>\n<h1><a id=\"ink__9\"></a>ink! 合约简介</h1>\n<h2><a id=\"_10\"></a>简介</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3a264707a58a438ebb5ae8b8ca4cc5d0.png\"/><br/> <strong>ink!</strong> 是构建在Substrate框架上的区块链智能合约。<strong>ink!</strong> 合约会被编译为 WebAssembly。它有着和传统 solidity 类似的逻辑，你也可以简单的把它理解为 Rust 版本的 Solidity。</p>\n<h2><a id=\"WASM_13\"></a>WASM简介</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6bd61d926b194dcbb08504e68fecee4c.png\"/></p>\n<p>ink！合约最大的特点就是它会编译为WebAssembly。至于为什么要选用WASM虚拟机来代替传统的EVM虚拟机并不在这篇文章的讨论范围内，感兴趣的可以移步<a href=\"https://www.bilibili.com/video/BV1HL411u772\">这里</a>。<br/> WebAssembly 就是运行在 Web 平台上的 Assembly。<br/> Assembly 是指汇编代码，是直接操作 CPU 的指令代码，比如 x86 指令集上的汇编代码有指令集、寄存器、栈等等设计，CPU 根据汇编代码的指导进行运算。汇编代码相当于 CPU 执行的机器码能够转换成的人类适合读的一种语言。一个典型的编译执行链路是 Cpp、Rust 等编译型语言编译成汇编指令，再转换成二进制机器码由 CPU 读取。</p>\n<h1><a id=\"_Europa__19\"></a>通过 Europa 启动一个合约编译沙盒环境</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\76fe2a90058645bf82d18b9dbe842a95.png\"/></p>\n<blockquote>\n<p>用于运行和调试智能合约的 <strong>沙箱</strong>，以及用于 Substrate runtime 的沙箱框架。</p>\n</blockquote>\n<p>我们可以通过 Europa 部署一个专门用来 部署和调试合约的沙盒环境。在关于合约调试方面的内容，Europa 会提供十分详细的log信息给我们，便于我们定位到合约代码的问题所在。<br/> 我们可以把启动 Europa 的过程理解为 以太坊开发solidity的时候在本地通过 geth 启动了一个本地的测试链，并且这个本地测试链还会提供有 Alice Bob 账户，以及详细的log信息。<br/> <strong>下载 Europa</strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> clone https://github.com/patractlabs/europa.git\n<span class=\"token operator\">&gt;</span> <span class=\"token builtin class-name\">cd</span> europa/vendor\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> submodule update --init --recursive\n</code></pre>\n<p><strong>编译 Europa</strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&gt;</span> cargo build --release\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">ln</span> -s target/release/europa /bin/europa\n</code></pre>\n<p><strong>运行 Europa</strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&gt;</span> europa --dev --tmp --ws-external --rpc-methods<span class=\"token operator\">=</span>unsafe\n<span class=\"token comment\"># 因为我是在wsl环境下部署的Europa，所以需要通过 --ws-external 启动了0.0.0.0监听，如果只需要暴露在127.0.0.1，可以自行省略。</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9c58d4419cfa4a52844870edbb9d3d94.png\"/><br/> 自此我们的Europa链搭建并运行成功了，之后我们的合约就会部署在Europa这条链上。</p>\n<h1><a id=\"_45\"></a>部署合约</h1>\n<p>把合约部署在链上之后，我们才能对链上的合约方法进行调用。<br/> 那合约调用前需要经历哪些步骤呢？<br/> —— <strong>编译合约</strong> 和 <strong>部署合约</strong><br/> 其实ink！合约调用的流程和以太坊调用合约的流程类似<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a8f42821067c4324bc887deef86719fe.png\"/><br/> 编译合约会生成在部署合约需要的 <code>xxx.contract</code>、<code>xxx.wasm</code>、<code>metadata.json</code><br/> 部署合约可以根据 <code>xxx.contract</code> 或者 <code>xxx.wasm</code> 和 <code>metadata.json</code> 实现部署。<br/> 部署完之后就可以找一个调用合约的工具进行调用。</p>\n<blockquote>\n<p>这里的metadata.json 可以理解为 以太坊里的 abi 文件，xxx.wasm 可以理解为 以太坊里的 bin 文件，至于xxx.contract 可以理解为 abi 文件+bin 文件的结合。</p>\n</blockquote>\n<h2><a id=\"_56\"></a>编译</h2>\n<p>我们可以通过ink！的cli工具（<code>cargo-contract</code>）实现编译合约的目的，并获得 <code>xxx.contract</code>、<code>xxx.wasm</code>、<code>metadata.json</code> 文件。<br/> <strong>环境配置</strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&gt;</span> rustup component <span class=\"token function\">add</span> rust-src --toolchain nightly\n<span class=\"token operator\">&gt;</span> rustup target <span class=\"token function\">add</span> wasm32-unknown-unknown --toolchain nightly\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> binaryen\n</code></pre>\n<p><strong>安装 <code>cargo-contract</code></strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&gt;</span> cargo <span class=\"token function\">install</span> cargo-contract --vers ^0.15 --force --locked\n</code></pre>\n<p><strong>通过 <code>cargo-contract</code> 获取 example例子</strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&gt;</span> cargo contract new flipper\n<span class=\"token operator\">&gt;</span> <span class=\"token builtin class-name\">cd</span> flipper/\n</code></pre>\n<p>只要是官方库内的<strong>example</strong>都可以通过 <code>cargo contract new xxx</code> 获取。这里我们以<strong>flipper</strong>合约为例。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b3595d9311994210a80a0e71cfd35210.png\"/><br/> <strong>flipper 合约内容</strong><br/> flipper合约是一个仅包含单个<strong>bool值</strong>的简单合约。它提供了方法 <strong>flip()</strong> 翻转它的值从 <strong>true</strong> 到 <strong>false</strong>（反之亦然）和 <strong>get()</strong> 返回当前<strong>bool值</strong>的状态。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#![cfg_attr(not(feature = <span class=\"token string\">\"std\"</span>), no_std)]</span>\n\n<span class=\"token keyword\">use</span> ink_lang <span class=\"token keyword\">as</span> ink<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[ink::contract]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">flipper</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/// Defines the storage of your contract.</span>\n    <span class=\"token comment\">/// Add new fields to the below struct in order</span>\n    <span class=\"token comment\">/// to add new static storage fields to your contract.</span>\n    <span class=\"token attribute attr-name\">#[ink(storage)]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Flipper</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/// Stores a single `bool` value on the storage.</span>\n        value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Flipper</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/// Constructor that initializes the `bool` value to the given `init_value`.</span>\n        <span class=\"token attribute attr-name\">#[ink(constructor)]</span>\n        <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>init_value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{<!-- --></span> value<span class=\"token punctuation\">:</span> init_value <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// Constructor that initializes the `bool` value to `false`.</span>\n        <span class=\"token comment\">///</span>\n        <span class=\"token comment\">/// Constructors can delegate to other constructors.</span>\n        <span class=\"token attribute attr-name\">#[ink(constructor)]</span>\n        <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Default</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// A message that can be called on instantiated contracts.</span>\n        <span class=\"token comment\">/// This one flips the value of the stored `bool` from `true`</span>\n        <span class=\"token comment\">/// to `false` and vice versa.</span>\n        <span class=\"token attribute attr-name\">#[ink(message)]</span>\n        <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// Simply returns the current value of our `bool`.</span>\n        <span class=\"token attribute attr-name\">#[ink(message)]</span>\n        <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// test file ... 被我省略了</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>编译flipper合约</strong><br/> 回到刚才flipper文件夹处。<br/> 开始编译合约</p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&gt;</span> cargo +nightly contract build --keep-debug-symbols --optimization-passes<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\04107db56e5a495c9342ee945ad79421.png\"/><br/> 编译完成之后，我们可以在 <strong>./target/ink</strong> 下找到 <code>flipper.contract</code>、<code>flipper.wasm</code>、<code>metadata.json</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\132ebbedc78b48eea63e257cd1ace3de.png\"/><br/> 自此编译工作就完成了，下面我们要利用这几个文件将合约部署在之前运行的 <strong>Europa 测试链</strong>上。</p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2f18de6318484121a1eae19b112d1c48.png\"/><br/> —— ink!-example <a href=\"https://github.com/paritytech/ink/tree/master/examples\">https://github.com/paritytech/ink/tree/master/examples</a></p>\n<h2><a id=\"_142\"></a>部署</h2>\n<p>接下来我们可以直接通过 polkadot explorer <a href=\"https://polkadot.js.org/apps/#/explorer\">https://polkadot.js.org/apps/#/explorer</a> 实现合约的部署了。<br/> <strong>切换网络到 Eruopa 链</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a4702b3254d54559b12cb8a0ad5ea27e.png\"/><br/> <strong>在Contract模块下实现合约的部署</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\48c21da1efca458b99a6baa778b8a363.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b6237f1aca7041e6a2ce754e4954d72c.png\"/><br/> 在这里需要注意一点，我们可以通过两种组合实现部署。<br/> 一种是通过 flipper.contract 实现部署<br/> <img alt=\"在这里插入图片描述\" src=\"image\\860b270e6dc9423698e12476c2870fe6.png\"/></p>\n<p>另外一种是通过 flipper.wasm 和 metadata.json 实现部署。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cd1fbd869dda477faf028e7186dd5820.png\"/><br/> 上传完之后就可以设置初始内容了。设置完之后就可以通过deploy实现部署<br/> <img alt=\"在这里插入图片描述\" src=\"image\\27faf40a9d2e4b63a29532dd43b17220.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\599743c49c864ba3aa24282432ca94b0.png\"/><br/> 自此我们的合约部署成功了。</p>\n<h2><a id=\"_164\"></a>调用</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9bebe97de6174d1b809701d986eb8e76.png\"/><br/> 通过Alice调用get方法，得知 <strong>bool值</strong> 是 <strong>true</strong>。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5c2093e903154b72971ace175e460319.png\"/><br/> 通过调用flip() 方法实现bool值的取反。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4b1f368c6d7745f5a8930c929e17b90d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\19b0f977283f4b768ef51bc72e04482f.png\"/><br/> 成功！下篇我会介绍如何通过go sdk来调用链上的合约，并介绍一下ink！范式下的合约调用三要素。</p>\n<h1><a id=\"_173\"></a>参考链接</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1HL411u772?spm_id_from=333.999.0.0\">https://www.bilibili.com/video/BV1HL411u772?spm_id_from=333.999.0.0</a><br/> <a href=\"https://www.bilibili.com/video/BV1RX4y1V7W9?spm_id_from=333.999.0.0\">https://www.bilibili.com/video/BV1RX4y1V7W9?spm_id_from=333.999.0.0</a><br/> <a href=\"https://docs.substrate.io/tutorials/v3/ink-workshop/pt1/#/0/setup\">https://docs.substrate.io/tutorials/v3/ink-workshop/pt1/#/0/setup</a><br/> <a href=\"https://docs.patract.io/en/europa/intro/europa-cli\">https://docs.patract.io/en/europa/intro/europa-cli</a><br/> <a href=\"https://mp.weixin.qq.com/s/lMj1MxYPJCaw7DFORctPLw\">https://mp.weixin.qq.com/s/lMj1MxYPJCaw7DFORctPLw</a><br/> <a href=\"https://mp.weixin.qq.com/s?__biz=MzI3MzYxNzQ0Ng==&amp;mid=2247485373&amp;idx=1&amp;sn=7953d3665e1170d1bfd7ce29853f8bed&amp;chksm=eb21c0f4dc5649e29945941821150e608a3a50269f509d8c34da3cce8725e62b0a1b88b3ca33&amp;scene=21#wechat_redirect\">https://mp.weixin.qq.com/s?__biz=MzI3MzYxNzQ0Ng==&amp;mid=2247485373&amp;idx=1&amp;sn=7953d3665e1170d1bfd7ce29853f8bed&amp;chksm=eb21c0f4dc5649e29945941821150e608a3a50269f509d8c34da3cce8725e62b0a1b88b3ca33&amp;scene=21#wechat_redirect</a></p>\n<h1><a id=\"_181\"></a>关于作者</h1>\n<div align=\"center\">\n<a href=\"https://blog.csdn.net/qq_19381989\" rel=\"noopener noreferrer\" target=\"_blank\"><img src=\"image\\a7acf46695554b99a9483daf8423ab2d.png\" width=\"40%\"/></a>\n</div>\n<p><strong>作者的联系方式：</strong></p>\n<p>微信：thf056<br/> qq：1290017556<br/> 邮箱：1290017556@qq.com</p>\n<p>你也可以通过 <strong><a href=\"https://github.com/99kies\" rel=\"noopener noreferrer\" target=\"_blank\">github</a></strong> | <strong><a href=\"https://blog.csdn.net/qq_19381989\" rel=\"noopener noreferrer\" target=\"_blank\">csdn</a></strong> | <strong><a href=\"https://weibo.com/99kies\" rel=\"noopener noreferrer\" target=\"_blank\">@新浪微博</a></strong> 关注我的动态</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}