{"blogid": "125121178", "writerAge": "码龄5年", "writerBlogNum": "93", "writerCollect": "1207", "writerComment": "1688", "writerFan": "2487", "writerGrade": "5级", "writerIntegral": "4343", "writerName": "半旧518", "writerProfileAdress": "writer_image\\profile_125121178.jpg", "writerRankTotal": "4089", "writerRankWeekly": "342", "writerThumb": "1003", "writerVisitNum": "67370", "blog_read_count": "5375", "blog_time": "已于 2022-07-11 20:49:21 修改", "blog_title": "Mysql进阶优化篇01——四万字详解数据库性能分析工具(深入、全面、详细，收藏备用)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/90b32c83dc7c484dbbb772658ff5167b.gif#pic_center\"/></p>\n<blockquote>\n<p><strong>前 言</strong><br/> 🍉 作者简介：半旧518，长跑型选手，立志坚持写10年博客，专注于java后端<br/> 🍌 专栏简介：mysql进阶，主要讲解mysql数据库进阶知识，包括索引、数据库调优、分库分表等<br/> 🌰 文章简介：本文将介绍数据库优化的步骤、思路、性能分析工具，比如慢查询、<code>EXPLAIN</code>,<code>SHOW PROFILING</code>等,并且对各个工具执行性能分析结果性能参数都有详细的介绍解释、建议收藏备用。<br/> 🍓 相关推荐：</p>\n<ul><li><a href=\"https://blog.csdn.net/qq_41708993/article/details/124517172\">MySql进阶索引篇01——深度讲解索引的数据结构：B+树 </a></li><li><a href=\"https://blog.csdn.net/qq_41708993/article/details/124530866\">Mysql进阶索引篇02——InnoDB存储引擎的数据存储结构</a></li><li><a href=\"https://blog.csdn.net/qq_41708993/article/details/124898091\">Mysql进阶索引篇03——2个新特性，11+7条设计原则教你创建索引 </a></li><li><a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_banjiu_sql\">大厂SQL面试真题大全</a></li></ul>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#1_13\">1.数据库服务器的优化步骤</a></li><li><a href=\"#2_21\">2.查看系统性能参数</a></li><li><a href=\"#3SQLlast_query_cost_64\">3.统计SQL的查询成本：last_query_cost</a></li><li><a href=\"#4_SQL_172\">4.定位执行慢的 SQL：慢查询日志</a></li><li><ul><li><a href=\"#41__175\">4.1 开启慢查询日志</a></li><li><ul><li><a href=\"#1slow_query_log_176\">1️⃣开启slow_query_log</a></li><li><a href=\"#2long_query_time_205\">2️⃣修改long_query_time阈值</a></li></ul>\n</li><li><a href=\"#42__239\">4.2 案例演示</a></li><li><ul><li><a href=\"#1__240\">1️⃣ 建表</a></li><li><a href=\"#2__log_bin_trust_function_creators_251\">2️⃣ 设置参数 log_bin_trust_function_creators</a></li><li><a href=\"#3_262\">3️⃣创建函数</a></li><li><a href=\"#4_297\">4️⃣创建存储过程</a></li></ul>\n</li><li><a href=\"#43_Mysqldumpslow_374\">4.3 慢查询日志分析工具：Mysqldumpslow</a></li><li><a href=\"#44__450\">4.4 关闭慢查询日志</a></li><li><ul><li><a href=\"#11_453\">1️⃣方式1：永久性方式</a></li><li><a href=\"#22_469\">2️⃣方式2：临时性方式</a></li></ul>\n</li><li><a href=\"#45__484\">4.5 删除与恢复慢查询日志</a></li></ul>\n</li><li><a href=\"#5_SQL_SHOW_PROFILE_498\">5.查看 SQL 执行成本：SHOW PROFILE</a></li><li><a href=\"#6EXPLAIN_553\">6.分析查询语句：EXPLAIN(重点)</a></li><li><ul><li><a href=\"#61_EXPLAIN_554\">6.1 EXPLAIN简介</a></li><li><ul><li><a href=\"#1_555\">1️⃣作用</a></li><li><a href=\"#2_561\">2️⃣官网介绍</a></li><li><a href=\"#3_567\">3️⃣版本说明</a></li></ul>\n</li><li><a href=\"#62__581\">6.2 基本语法</a></li><li><a href=\"#63__584\">6.3 数据准备</a></li><li><ul><li><a href=\"#1_585\">1️⃣.建表</a></li><li><a href=\"#2_622\">2️⃣创建存储函数</a></li><li><a href=\"#3_643\">3️⃣创建存储过程</a></li><li><a href=\"#4_691\">4️⃣调用存储过程</a></li></ul>\n</li><li><a href=\"#64_EXPLAIN_700\">6.4 EXPLAIN各列作用</a></li><li><ul><li><a href=\"#1_table_701\">1️⃣ table</a></li><li><a href=\"#2id_709\">2️⃣id</a></li><li><a href=\"#3select_type_748\">3️⃣select_type</a></li><li><a href=\"#4partitions__809\">4️⃣partitions (可略)</a></li><li><a href=\"#5type__828\">5️⃣type ☆</a></li><li><ul><li><a href=\"#1system_835\">(1)system</a></li><li><a href=\"#2Const_854\">(2)Const</a></li><li><a href=\"#4eq_ref_866\">（4）eq_ref</a></li><li><a href=\"#5ref_874\">（5）ref</a></li><li><a href=\"#6ref_or_null_896\">（6）ref_or_null</a></li><li><a href=\"#7index_merge_904\">（7）index_merge</a></li><li><a href=\"#8unique_subquery_918\">(8)unique_subquery</a></li><li><a href=\"#9range_925\">(9)range</a></li><li><a href=\"#10index_931\">(10)index</a></li><li><a href=\"#11ALL_938\">(11)ALL</a></li></ul>\n</li><li><a href=\"#6possible_keyskey_952\">6️⃣possible_keys和key</a></li><li><a href=\"#7key_len__960\">7️⃣key_len ☆</a></li><li><a href=\"#8ref_1015\">8️⃣.ref</a></li><li><a href=\"#9_rows__1035\">9️⃣ rows ☆</a></li><li><a href=\"#10filtered_1043\">1️⃣0️⃣filtered</a></li><li><a href=\"#11_Extra__1060\">1️⃣1️⃣ Extra ☆</a></li></ul>\n</li></ul>\n</li><li><a href=\"#7EXPLAIN_1152\">7.EXPLAIN的进一步使用</a></li><li><ul><li><a href=\"#71EXPLAIN_1153\">7.1、EXPLAIN四种输出格式</a></li><li><ul><li><a href=\"#1_1156\">1️⃣传统格式</a></li><li><a href=\"#2JSON_1163\">2️⃣JSON格式</a></li><li><a href=\"#3TREE_1273\">3️⃣TREE格式</a></li><li><a href=\"#4_1289\">4️⃣可视化输出</a></li></ul>\n</li><li><a href=\"#72_SHOW_WARNINGS_1296\">7.2 SHOW WARNINGS的使用</a></li></ul>\n</li><li><a href=\"#8trace_1320\">8.分析优化器执行计划：trace</a></li><li><a href=\"#9MySQLsys_schema_1560\">9.MySQL监控分析视图-sys schema</a></li><li><ul><li><a href=\"#91_Sys_schema_1561\">9.1 Sys schema视图摘要</a></li><li><a href=\"#92_Sys_schema_1565\">9.2 Sys schema视图使用场景</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_13\"></a>1.数据库服务器的优化步骤</h1>\n<p>数据库的优化整个流程划分成了 观察（Show status） 和 行动（Action） 两个部分。数据库的优化可以总结为下图。字母 S 的部分代表观察（会使用相应的分析工具），字母 A 代表的部分是行动（对应分析可以采取的行动）。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8d7495cc393d45fa82ba181b8c9f4ed6.png\"/><br/> 可以从图中看到，在整个流程中需要用到很多分析工具:比如慢查询，<code>EXPLAIN</code>,<code>SHOW PROFILING</code>等，这篇文章就会介绍这些数据库性能分析工具。<br/> 简单小结如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a2c6889431434f4e81c0c419ad22783c.png\"/><br/> 可以看到数据库调优的步骤中越往金字塔尖走，其成本越高，效果越差，因此我们在数据库调优的过程中，要重点把握金字塔底部的<strong>sql及索引调优</strong>，<strong>数据库表结构调优</strong>，<strong>系统配置参数调优</strong>等软件层面的调优。</p>\n<h1><a id=\"2_21\"></a>2.查看系统性能参数</h1>\n<p>可以使用<code>SHOW STATUS</code>语句查询一些数据库服务器的<strong>性能参数</strong>和<strong>使用频率</strong>。<br/> 其语法如下：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span><span class=\"token punctuation\">]</span> STATUES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'参数'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一些常用的性能参数如下：</p>\n<blockquote>\n<p>• <code>Connections</code>：连接MySQL服务器的次数。<br/> • <code>Uptime</code>：MySQL服务器的上线时间。<br/> • <code>Slow_queries</code>：慢查询的次数。<br/> •<code> Innodb_rows_read</code>：Select查询返回的行数<br/> •<code> Innodb_rows_inserted</code>：执行INSERT操作插入的行数<br/> • <code>Innodb_rows_updated</code>：执行UPDATE操作更新的行数<br/> • <code>Innodb_rows_deleted</code>：执行DELETE操作删除的行数<br/> • <code>Com_select</code>：查询操作的次数。<br/> •<code> Com_insert</code>：插入操作的次数。对于批量插入的 INSERT 操作，只累加一次。<br/> •<code> Com_update</code>：更新操作的次数。<br/> • <code>Com_delete</code>：删除操作的次数。</p>\n</blockquote>\n<p>举几个例子，玩一把。查看mysql的上线时间</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'connections'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------+</span>\n<span class=\"token operator\">|</span> Variable_name <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------+</span>\n<span class=\"token operator\">|</span> Connections   <span class=\"token operator\">|</span> <span class=\"token number\">9</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>看看存储引擎增删改查的行数。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span>  <span class=\"token string\">'innodb_rows_%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">----------------------+-------+</span>\n<span class=\"token operator\">|</span> Variable_name        <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">----------------------+-------+</span>\n<span class=\"token operator\">|</span> Innodb_rows_deleted  <span class=\"token operator\">|</span> <span class=\"token number\">0</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> Innodb_rows_inserted <span class=\"token operator\">|</span> <span class=\"token number\">0</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> Innodb_rows_read     <span class=\"token operator\">|</span> <span class=\"token number\">8</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> Innodb_rows_updated  <span class=\"token operator\">|</span> <span class=\"token number\">0</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">----------------------+-------+</span>\n<span class=\"token number\">4</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"3SQLlast_query_cost_64\"></a>3.统计SQL的查询成本：last_query_cost</h1>\n<p>先来造一下数据(友情提醒：上一篇文章已经造过，如果您是从上一篇文章跟着阅读过来的，不用重新造了哟。)</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> atguigudb1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">USE</span> atguigudb1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> rand_string<span class=\"token punctuation\">(</span>n <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#该函数会返回一个字符串</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">DECLARE</span> chars_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">DECLARE</span> return_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">WHILE</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token keyword\">DO</span>\n\t   <span class=\"token keyword\">SET</span> return_str <span class=\"token operator\">=</span>CONCAT<span class=\"token punctuation\">(</span>return_str<span class=\"token punctuation\">,</span>SUBSTRING<span class=\"token punctuation\">(</span>chars_str<span class=\"token punctuation\">,</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">RETURN</span> return_str<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> rand_num <span class=\"token punctuation\">(</span>from_num <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">,</span>to_num <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span> \n<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> FLOOR<span class=\"token punctuation\">(</span>from_num <span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>to_num <span class=\"token operator\">-</span> from_num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">RETURN</span> i<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n\n<span class=\"token comment\"># 存储过程1：创建插入课程表存储过程</span>\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_course<span class=\"token punctuation\">(</span> max_num <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span> \n\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">#设置手动提交事务</span>\n\t<span class=\"token keyword\">REPEAT</span>  <span class=\"token comment\">#循环</span>\n\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#赋值</span>\n\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> course <span class=\"token punctuation\">(</span>course_id<span class=\"token punctuation\">,</span> course_name <span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n\t<span class=\"token punctuation\">(</span>rand_num<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span><span class=\"token number\">10100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\tUNTIL i <span class=\"token operator\">=</span> max_num \n\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#提交事务</span>\n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 存储过程2：创建插入学生表存储过程</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_stu<span class=\"token punctuation\">(</span> max_num <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span> \n\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">#设置手动提交事务</span>\n\t<span class=\"token keyword\">REPEAT</span>  <span class=\"token comment\">#循环</span>\n\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#赋值</span>\n\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> student_info <span class=\"token punctuation\">(</span>course_id<span class=\"token punctuation\">,</span> class_id <span class=\"token punctuation\">,</span>student_id <span class=\"token punctuation\">,</span>NAME <span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n<span class=\"token punctuation\">(</span>rand_num<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span><span class=\"token number\">10100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_num<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span><span class=\"token number\">10200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_num<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">200000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\tUNTIL i <span class=\"token operator\">=</span> max_num \n\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#提交事务</span>\n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n\n<span class=\"token comment\"># 插入课程数据</span>\n<span class=\"token keyword\">CALL</span> insert_course<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#插入学生数据</span>\n<span class=\"token keyword\">CALL</span> insert_stu<span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行查询操作并且查看sql执行成本，<code>Value</code>表示I/O加载的数据页的页数。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student_info <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">900001</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------+------------+--------+-----------+----------+---------------------+</span>\n<span class=\"token operator\">|</span> id     <span class=\"token operator\">|</span> student_id <span class=\"token operator\">|</span> name   <span class=\"token operator\">|</span> course_id <span class=\"token operator\">|</span> class_id <span class=\"token operator\">|</span> create_time         <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------+------------+--------+-----------+----------+---------------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">900001</span> <span class=\"token operator\">|</span>     <span class=\"token number\">128284</span> <span class=\"token operator\">|</span> jbCKPX <span class=\"token operator\">|</span>     <span class=\"token number\">10080</span> <span class=\"token operator\">|</span>    <span class=\"token number\">10001</span> <span class=\"token operator\">|</span> <span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">31</span> <span class=\"token number\">11</span>:<span class=\"token number\">01</span>:<span class=\"token number\">54</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------+------------+--------+-----------+----------+---------------------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'last_query_cost'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+----------+</span>\n<span class=\"token operator\">|</span> Variable_name   <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+----------+</span>\n<span class=\"token operator\">|</span> Last_query_cost <span class=\"token operator\">|</span> <span class=\"token number\">1.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+----------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>再来个大的。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span>  <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student_info <span class=\"token keyword\">where</span> id <span class=\"token operator\">between</span> <span class=\"token number\">900001</span> <span class=\"token operator\">and</span> <span class=\"token number\">900100</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------+------------+--------+-----------+----------+---------------------+</span>\n<span class=\"token operator\">|</span> id     <span class=\"token operator\">|</span> student_id <span class=\"token operator\">|</span> name   <span class=\"token operator\">|</span> course_id <span class=\"token operator\">|</span> class_id <span class=\"token operator\">|</span> create_time         <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------+------------+--------+-----------+----------+---------------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">900001</span> <span class=\"token operator\">|</span>     <span class=\"token number\">128284</span> <span class=\"token operator\">|</span> jbCKPX <span class=\"token operator\">|</span>     <span class=\"token number\">10080</span> <span class=\"token operator\">|</span>    <span class=\"token number\">10001</span> <span class=\"token operator\">|</span> <span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">31</span> <span class=\"token number\">11</span>:<span class=\"token number\">01</span>:<span class=\"token number\">54</span> <span class=\"token operator\">|</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">900099</span> <span class=\"token operator\">|</span>      <span class=\"token number\">45120</span> <span class=\"token operator\">|</span> MZOSay <span class=\"token operator\">|</span>     <span class=\"token number\">10081</span> <span class=\"token operator\">|</span>    <span class=\"token number\">10026</span> <span class=\"token operator\">|</span> <span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">31</span> <span class=\"token number\">11</span>:<span class=\"token number\">01</span>:<span class=\"token number\">54</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">900100</span> <span class=\"token operator\">|</span>      <span class=\"token number\">83397</span> <span class=\"token operator\">|</span> lQyTXg <span class=\"token operator\">|</span>     <span class=\"token number\">10034</span> <span class=\"token operator\">|</span>    <span class=\"token number\">10058</span> <span class=\"token operator\">|</span> <span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">31</span> <span class=\"token number\">11</span>:<span class=\"token number\">01</span>:<span class=\"token number\">54</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------+------------+--------+-----------+----------+---------------------+</span>\n<span class=\"token number\">100</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'last_query_cost'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+-----------+</span>\n<span class=\"token operator\">|</span> Variable_name   <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+-----------+</span>\n<span class=\"token operator\">|</span> Last_query_cost <span class=\"token operator\">|</span> <span class=\"token number\">41.136003</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+-----------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>不知道大家有没有发现，上面的查询页的数量是刚才的 41 倍，但是查询的效率并没有明显的变化，实际上这两个 SQL 查询的时间基本上一样,查询<code>last_query_cost</code>对于比较开销是非常有用的，特别是我们有好几种查询方式可选的时候。</p>\n<blockquote>\n<p>🎈 SQL查询是一个动态的过程，从页加载的角度，我们可以得到以下两点结论：<br/> 1.<strong>位置决定效率</strong>:数据库缓冲池&gt;内存&gt;磁盘。<br/> 2.<strong>批量决定效率</strong>：顺序读取&gt;大于随机读取，有时候批量顺序读取多个页甚至会比随机加载一个页更快。<br/> 在实际生产中，我们可以利用这个特点，把经常用于查询的数据尽量放在<strong>缓冲池</strong>中，其次我们可以充分利用磁盘的吞吐能力，批量读取数据。</p>\n</blockquote>\n<h1><a id=\"4_SQL_172\"></a>4.定位执行慢的 SQL：慢查询日志</h1>\n<p>慢查询日志用来记录相应时间超过阈值的语句，它可以帮助我们发现那些执行时间特别长的sql语句，以期进行针对性优化。一般mysql的慢查询日志默认关闭，非调优情况不建议开启，避免影响数据库的性能。</p>\n<h2><a id=\"41__175\"></a>4.1 开启慢查询日志</h2>\n<h3><a id=\"1slow_query_log_176\"></a>1️⃣开启slow_query_log</h3>\n<p>查看</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%slow_query_log%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------+------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> Variable_name       <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span>                                                <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------+------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> slow_query_log      <span class=\"token operator\">|</span> <span class=\"token keyword\">OFF</span>                                                  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> slow_query_log_file <span class=\"token operator\">|</span> D:\\mysql<span class=\"token operator\">-</span><span class=\"token number\">5.7</span><span class=\"token number\">.26</span><span class=\"token operator\">-</span>winx64\\<span class=\"token keyword\">data</span>\\DESKTOP<span class=\"token operator\">-</span><span class=\"token number\">1</span>PB99O1<span class=\"token operator\">-</span>slow<span class=\"token punctuation\">.</span>log <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------+------------------------------------------------------+</span>\n<span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>修改,注意这里要加<code>global</code>，因为它是全局系统变量，否则会报错哟。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> slow_query_log<span class=\"token operator\">=</span><span class=\"token string\">'ON'</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>再查看。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%slow_query_log%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------+------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> Variable_name       <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span>                                                <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------+------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> slow_query_log      <span class=\"token operator\">|</span> <span class=\"token keyword\">ON</span>                                                   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> slow_query_log_file <span class=\"token operator\">|</span> D:\\mysql<span class=\"token operator\">-</span><span class=\"token number\">5.7</span><span class=\"token number\">.26</span><span class=\"token operator\">-</span>winx64\\<span class=\"token keyword\">data</span>\\DESKTOP<span class=\"token operator\">-</span><span class=\"token number\">1</span>PB99O1<span class=\"token operator\">-</span>slow<span class=\"token punctuation\">.</span>log <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------+------------------------------------------------------+</span>\n<span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h3><a id=\"2long_query_time_205\"></a>2️⃣修改long_query_time阈值</h3>\n<p>查看。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%long_query_time%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+-----------+</span>\n<span class=\"token operator\">|</span> Variable_name   <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+-----------+</span>\n<span class=\"token operator\">|</span> long_query_time <span class=\"token operator\">|</span> <span class=\"token number\">10.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+-----------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>修改。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> long_query_time <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>再查看。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">global</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%long_query_time%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+----------+</span>\n<span class=\"token operator\">|</span> Variable_name   <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+----------+</span>\n<span class=\"token operator\">|</span> long_query_time <span class=\"token operator\">|</span> <span class=\"token number\">1.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+----------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>🔊记得要加<code>global</code>，否则默认只在当前会话，不过，即使加<code>global</code>上面的修改还都只是临时的修改，当数据库服务器重启以后，以上修改就会失效。要想永久的生效，需要更改<code>my.cnf</code>文件，然后重启数据库服务器。</p>\n<pre><code>slow_query_log=ON\nslow_query_log_file=/var/lib/mysql/atguigu-slow.log\nlong_query_time=3\nlog_output=FILE\n</code></pre>\n<h2><a id=\"42__239\"></a>4.2 案例演示</h2>\n<h3><a id=\"1__240\"></a>1️⃣ 建表</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>student<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>stuno<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token punctuation\">,</span>\n\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>classId<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">INNODB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"2__log_bin_trust_function_creators_251\"></a>2️⃣ 设置参数 log_bin_trust_function_creators</h3>\n<p>(第3节已经完成)</p>\n<p>创建函数，假如报错</p>\n<pre><code>This function has none of DETERMINISTIC......\n</code></pre>\n<p>命令开启：允许创建函数设置：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> log_bin_trust_function_creators<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\"># 不加global只是当前窗口有效。</span>\n</code></pre>\n<h3><a id=\"3_262\"></a>3️⃣创建函数</h3>\n<p>(第3节已经完成)<br/> 随机产生字符串：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> rand_string<span class=\"token punctuation\">(</span>n <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#该函数会返回一个字符串</span>\n<span class=\"token keyword\">BEGIN</span>\n<span class=\"token keyword\">DECLARE</span> chars_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span>\n<span class=\"token string\">'abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DECLARE</span> return_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHILE</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token keyword\">DO</span>\n   <span class=\"token keyword\">SET</span> return_str <span class=\"token operator\">=</span>CONCAT<span class=\"token punctuation\">(</span>return_str<span class=\"token punctuation\">,</span>SUBSTRING<span class=\"token punctuation\">(</span>chars_str<span class=\"token punctuation\">,</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">RETURN</span> return_str<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#测试</span>\n<span class=\"token keyword\">SELECT</span> rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>产生随机数值(第3节已经完成)：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> rand_num <span class=\"token punctuation\">(</span>from_num <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">,</span>to_num <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span> \n<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> FLOOR<span class=\"token punctuation\">(</span>from_num <span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>to_num <span class=\"token operator\">-</span> from_num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">RETURN</span> i<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#测试：</span>\n<span class=\"token keyword\">SELECT</span> rand_num<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"4_297\"></a>4️⃣创建存储过程</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_stu1<span class=\"token punctuation\">(</span>  <span class=\"token keyword\">START</span> <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">,</span> max_num <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span> \n<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">#设置手动提交事务</span>\n<span class=\"token keyword\">REPEAT</span>  <span class=\"token comment\">#循环</span>\n<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#赋值</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> student <span class=\"token punctuation\">(</span>stuno<span class=\"token punctuation\">,</span> NAME <span class=\"token punctuation\">,</span>age <span class=\"token punctuation\">,</span>classId <span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">START</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_num<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_num<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nUNTIL i <span class=\"token operator\">=</span> max_num \n<span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#提交事务</span>\n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>步骤5：调用存储过程</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">#调用刚刚写好的函数, 4000000条记录,从100001号开始</span>\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">CALL</span> insert_stu1<span class=\"token punctuation\">(</span><span class=\"token number\">100001</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> min <span class=\"token number\">47.03</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>注意，这个时间会比较长，请耐心等待几分钟哟。结束后可以查询下是不是插入成功了。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>📘 有一个小细节在这里提下，就是上面查询数据量的语句在存储引擎使用<code>MyISAM</code>时会比使用<code>InnoDB</code>时快很多，这是因为MyISAM存储引擎会有字段专门表示记录数。</p>\n</blockquote>\n<p>接下来执行一下下面的查询操作，制造慢查询的场景。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">set</span>  long_query_time <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> stuno <span class=\"token operator\">=</span> <span class=\"token number\">3455655</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------+--------+------+---------+</span>\n<span class=\"token operator\">|</span> id      <span class=\"token operator\">|</span> stuno   <span class=\"token operator\">|</span> name   <span class=\"token operator\">|</span> age  <span class=\"token operator\">|</span> classId <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------+--------+------+---------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">3355654</span> <span class=\"token operator\">|</span> <span class=\"token number\">3455655</span> <span class=\"token operator\">|</span> QQFFkl <span class=\"token operator\">|</span>   <span class=\"token number\">57</span> <span class=\"token operator\">|</span>     <span class=\"token number\">904</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------+--------+------+---------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3.47</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'QQFFkl'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------+--------+------+---------+</span>\n<span class=\"token operator\">|</span> id      <span class=\"token operator\">|</span> stuno   <span class=\"token operator\">|</span> name   <span class=\"token operator\">|</span> age  <span class=\"token operator\">|</span> classId <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------+--------+------+---------+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">143213</span> <span class=\"token operator\">|</span>  <span class=\"token number\">243214</span> <span class=\"token operator\">|</span> qQffkL <span class=\"token operator\">|</span>   <span class=\"token number\">95</span> <span class=\"token operator\">|</span>     <span class=\"token number\">543</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">225733</span> <span class=\"token operator\">|</span>  <span class=\"token number\">325734</span> <span class=\"token operator\">|</span> qQffkL <span class=\"token operator\">|</span>   <span class=\"token number\">10</span> <span class=\"token operator\">|</span>     <span class=\"token number\">861</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">280275</span> <span class=\"token operator\">|</span>  <span class=\"token number\">380276</span> <span class=\"token operator\">|</span> QqfFKL <span class=\"token operator\">|</span>   <span class=\"token number\">50</span> <span class=\"token operator\">|</span>     <span class=\"token number\">118</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">1355465</span> <span class=\"token operator\">|</span> <span class=\"token number\">1455466</span> <span class=\"token operator\">|</span> QqfFKL <span class=\"token operator\">|</span>   <span class=\"token number\">52</span> <span class=\"token operator\">|</span>     <span class=\"token number\">195</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">1676763</span> <span class=\"token operator\">|</span> <span class=\"token number\">1776764</span> <span class=\"token operator\">|</span> qQffkL <span class=\"token operator\">|</span>   <span class=\"token number\">11</span> <span class=\"token operator\">|</span>     <span class=\"token number\">906</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">1766208</span> <span class=\"token operator\">|</span> <span class=\"token number\">1866209</span> <span class=\"token operator\">|</span> qqFfKl <span class=\"token operator\">|</span>   <span class=\"token number\">11</span> <span class=\"token operator\">|</span>     <span class=\"token number\">396</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">1870789</span> <span class=\"token operator\">|</span> <span class=\"token number\">1970790</span> <span class=\"token operator\">|</span> qqFfKl <span class=\"token operator\">|</span>   <span class=\"token number\">97</span> <span class=\"token operator\">|</span>     <span class=\"token number\">182</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2368740</span> <span class=\"token operator\">|</span> <span class=\"token number\">2468741</span> <span class=\"token operator\">|</span> QQFFkl <span class=\"token operator\">|</span>   <span class=\"token number\">51</span> <span class=\"token operator\">|</span>     <span class=\"token number\">645</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2386799</span> <span class=\"token operator\">|</span> <span class=\"token number\">2486800</span> <span class=\"token operator\">|</span> qQffkL <span class=\"token operator\">|</span>   <span class=\"token number\">11</span> <span class=\"token operator\">|</span>     <span class=\"token number\">875</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">3170932</span> <span class=\"token operator\">|</span> <span class=\"token number\">3270933</span> <span class=\"token operator\">|</span> QqfFKL <span class=\"token operator\">|</span>   <span class=\"token number\">50</span> <span class=\"token operator\">|</span>      <span class=\"token number\">92</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">3355654</span> <span class=\"token operator\">|</span> <span class=\"token number\">3455655</span> <span class=\"token operator\">|</span> QQFFkl <span class=\"token operator\">|</span>   <span class=\"token number\">57</span> <span class=\"token operator\">|</span>     <span class=\"token number\">904</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">3966226</span> <span class=\"token operator\">|</span> <span class=\"token number\">4066227</span> <span class=\"token operator\">|</span> qQffkL <span class=\"token operator\">|</span>   <span class=\"token number\">96</span> <span class=\"token operator\">|</span>     <span class=\"token number\">629</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------+--------+------+---------+</span>\n</code></pre>\n<p>查看下慢查询的记录。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'slow_queries'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------+</span>\n<span class=\"token operator\">|</span> Variable_name <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------+</span>\n<span class=\"token operator\">|</span> Slow_queries  <span class=\"token operator\">|</span> <span class=\"token number\">2</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>🎯补充：在Mysql中，还有另外一个变量<code>min_examined_row_limit</code>用来控制慢查询日志，他的含义是，在查询时，查询时间超过<code>long_query_time </code>的日志，还要保证查询扫描过的记录数满足<code>min_examined_row_limit</code>才会被记录到慢查询日志。一般它默认是0，我们也一般不会去修改它。</p>\n<pre><code>SHOW VARIABLES like 'min%'\nOK\n时间: 0.002s\n</code></pre>\n</blockquote>\n<h2><a id=\"43_Mysqldumpslow_374\"></a>4.3 慢查询日志分析工具：Mysqldumpslow</h2>\n<p>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。</p>\n<blockquote>\n<p>📑 注意:<br/> 1.该工具并不是mysql内置的，不要在mysql下执行，可以直接在根目录或者其他位置执行<br/> 2.该工具只有Linux下才是开箱可用的，实际上生产中mysql数据库一般也是部署在linux环境中的。如果您是windows环境下，可以参考博客https://www.cnblogs.com/-mrl/p/15770811.html。</p>\n</blockquote>\n<p>通过mysqldumpslow 可以查看慢查询日志帮助.</p>\n<pre><code class=\"prism language-cmd\">mysqldumpslow --help\n</code></pre>\n<p>其结果如下图。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7b38cb5539af4c3e8fc1e2d2aec4d5a5.png\"/><br/> 现在来使用下，先找到慢查询日志的位置。(注：笔者实际上是windows的环境，在使用时时参考上面注意中的博客，后不再赘述)</p>\n<pre><code class=\"prism language-sql\">\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%slow_query_log%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------+------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> Variable_name       <span class=\"token operator\">|</span> <span class=\"token keyword\">Value</span>                                                <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------+------------------------------------------------------+</span>\n<span class=\"token operator\">|</span> slow_query_log      <span class=\"token operator\">|</span> <span class=\"token keyword\">ON</span>                                                   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> slow_query_log_file <span class=\"token operator\">|</span> D:\\mysql<span class=\"token operator\">-</span><span class=\"token number\">5.7</span><span class=\"token number\">.26</span><span class=\"token operator\">-</span>winx64\\<span class=\"token keyword\">data</span>\\DESKTOP<span class=\"token operator\">-</span><span class=\"token number\">1</span>PB99O1<span class=\"token operator\">-</span>slow<span class=\"token punctuation\">.</span>log <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------------+------------------------------------------------------+</span>\n<span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>找到前10条记录。</p>\n<pre><code class=\"prism language-sql\">D:\\mysql<span class=\"token operator\">-</span><span class=\"token number\">5.7</span><span class=\"token number\">.26</span><span class=\"token operator\">-</span>winx64\\bin<span class=\"token operator\">&gt;</span>mysqldumpslow <span class=\"token operator\">-</span>s c <span class=\"token operator\">-</span>t <span class=\"token number\">10</span> D:\\mysql<span class=\"token operator\">-</span><span class=\"token number\">5.7</span><span class=\"token number\">.26</span><span class=\"token operator\">-</span>winx64\\<span class=\"token keyword\">data</span>\\DESKTOP<span class=\"token operator\">-</span><span class=\"token number\">1</span>PB99O1<span class=\"token operator\">-</span>slow<span class=\"token punctuation\">.</span>log\n\nReading mysql slow query log <span class=\"token keyword\">from</span> D:\\mysql<span class=\"token operator\">-</span><span class=\"token number\">5.7</span><span class=\"token number\">.26</span><span class=\"token operator\">-</span>winx64\\<span class=\"token keyword\">data</span>\\DESKTOP<span class=\"token operator\">-</span><span class=\"token number\">1</span>PB99O1<span class=\"token operator\">-</span>slow<span class=\"token punctuation\">.</span>log\nCount: <span class=\"token number\">1</span>  <span class=\"token keyword\">Time</span><span class=\"token operator\">=</span><span class=\"token number\">0.00</span>s <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>s<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">Lock</span><span class=\"token operator\">=</span><span class=\"token number\">0.00</span>s <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>s<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">Rows</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>users<span class=\"token variable\">@0hosts</span>\n  MySQL<span class=\"token punctuation\">,</span> Version: N<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">.</span>N <span class=\"token punctuation\">(</span>MySQL Community Server <span class=\"token punctuation\">(</span>GPL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> started <span class=\"token keyword\">with</span>:\n  TCP Port: N<span class=\"token punctuation\">,</span> Named Pipe: MySQL\n  <span class=\"token comment\"># Time: N-N-02T00:N:N.885803Z</span>\n  <span class=\"token comment\"># User@Host: root[root] @ localhost [::N]  Id:     N</span>\n  <span class=\"token comment\"># Query_time: N.N  Lock_time: N.N Rows_sent: N  Rows_examined: N</span>\n  <span class=\"token keyword\">use</span> atguigudb1<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">SET</span> <span class=\"token keyword\">timestamp</span><span class=\"token operator\">=</span>N<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">CALL</span> insert_stu1<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span>\n\nCount: <span class=\"token number\">1</span>  <span class=\"token keyword\">Time</span><span class=\"token operator\">=</span><span class=\"token number\">3.74</span>s <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>s<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">Lock</span><span class=\"token operator\">=</span><span class=\"token number\">0.00</span>s <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>s<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">Rows</span><span class=\"token operator\">=</span><span class=\"token number\">12.0</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token variable\">@localhost</span>\n  <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'S'</span>\n\nDied at mysqldumpslow<span class=\"token punctuation\">.</span>pl line <span class=\"token number\">161</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;&gt;</span> chunk <span class=\"token number\">2.</span>\n</code></pre>\n<p>可以看到上面sql中具体的数值类都被N代替，字符串都被使用S代替，如果想要显示真实的数据，可以加上参数<code>-a</code></p>\n<pre><code class=\"prism language-sql\">D:\\mysql<span class=\"token operator\">-</span><span class=\"token number\">5.7</span><span class=\"token number\">.26</span><span class=\"token operator\">-</span>winx64\\bin<span class=\"token operator\">&gt;</span> mysqldumpslow  <span class=\"token operator\">-</span>a <span class=\"token operator\">-</span>s c <span class=\"token operator\">-</span>t <span class=\"token number\">10</span> D:\\mysql<span class=\"token operator\">-</span><span class=\"token number\">5.7</span><span class=\"token number\">.26</span><span class=\"token operator\">-</span>winx64\\<span class=\"token keyword\">data</span>\\DESKTOP<span class=\"token operator\">-</span><span class=\"token number\">1</span>PB99O1<span class=\"token operator\">-</span>slow<span class=\"token punctuation\">.</span>log\n\nReading mysql slow query log <span class=\"token keyword\">from</span> D:\\mysql<span class=\"token operator\">-</span><span class=\"token number\">5.7</span><span class=\"token number\">.26</span><span class=\"token operator\">-</span>winx64\\<span class=\"token keyword\">data</span>\\DESKTOP<span class=\"token operator\">-</span><span class=\"token number\">1</span>PB99O1<span class=\"token operator\">-</span>slow<span class=\"token punctuation\">.</span>log\nCount: <span class=\"token number\">1</span>  <span class=\"token keyword\">Time</span><span class=\"token operator\">=</span><span class=\"token number\">3.74</span>s <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>s<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">Lock</span><span class=\"token operator\">=</span><span class=\"token number\">0.00</span>s <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>s<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">Rows</span><span class=\"token operator\">=</span><span class=\"token number\">12.0</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token variable\">@localhost</span>\n  <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'QQFFkl'</span>\n\nCount: <span class=\"token number\">1</span>  <span class=\"token keyword\">Time</span><span class=\"token operator\">=</span><span class=\"token number\">0.00</span>s <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>s<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">Lock</span><span class=\"token operator\">=</span><span class=\"token number\">0.00</span>s <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>s<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">Rows</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>users<span class=\"token variable\">@0hosts</span>\n  MySQL<span class=\"token punctuation\">,</span> Version: <span class=\"token number\">5.7</span><span class=\"token number\">.26</span> <span class=\"token punctuation\">(</span>MySQL Community Server <span class=\"token punctuation\">(</span>GPL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> started <span class=\"token keyword\">with</span>:\n  TCP Port: <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span> Named Pipe: MySQL\n  <span class=\"token comment\"># Time: 2022-06-02T00:27:36.885803Z</span>\n  <span class=\"token comment\"># User@Host: root[root] @ localhost [::1]  Id:     9</span>\n  <span class=\"token comment\"># Query_time: 647.031348  Lock_time: 0.000091 Rows_sent: 0  Rows_examined: 0</span>\n  <span class=\"token keyword\">use</span> atguigudb1<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">SET</span> <span class=\"token keyword\">timestamp</span><span class=\"token operator\">=</span><span class=\"token number\">1654129656</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">CALL</span> insert_stu1<span class=\"token punctuation\">(</span><span class=\"token number\">100001</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>最后罗列下工作中常用的一些查询。</p>\n<pre><code>#得到返回记录集最多的10个SQL\nmysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log\n\n#得到访问次数最多的10个SQL\nmysqldumpslow -s c -t 10 /var/lib/mysql/atguigu-slow.log\n\n#得到按照时间排序的前10条里面含有左连接的查询语句\nmysqldumpslow -s t -t 10 -g \"left join\" /var/lib/mysql/atguigu-slow.log\n\n#另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现爆屏情况\nmysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log | more\n</code></pre>\n<h2><a id=\"44__450\"></a>4.4 关闭慢查询日志</h2>\n<p>MySQL服务器停止慢查询日志功能有两种方法：</p>\n<h3><a id=\"11_453\"></a>1️⃣方式1：永久性方式</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">#配置文件</span>\n<span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span>\nslow_query_log<span class=\"token operator\">=</span><span class=\"token keyword\">OFF</span>\n</code></pre>\n<p>或者，把slow_query_log一项注释掉 或 删除</p>\n<pre><code class=\"prism language-sql\"><span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#slow_query_log =OFF</span>\n</code></pre>\n<p>重启MySQL服务，执行如下语句查询慢日志功能。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%slow%'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#查询慢查询日志所在目录</span>\n<span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%long_query_time%'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#查询超时时长</span>\n</code></pre>\n<h3><a id=\"22_469\"></a>2️⃣方式2：临时性方式</h3>\n<p>使用SET语句来设置。<br/> （1）停止MySQL慢查询日志功能，具体SQL语句如下。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SET</span> <span class=\"token keyword\">GLOBAL</span> slow_query_log<span class=\"token operator\">=</span><span class=\"token keyword\">off</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>（2）使用SHOW语句查询慢查询日志功能信息，具体SQL语句如下</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%slow%'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果如下。<img alt=\"在这里插入图片描述\" src=\"image\\0ecf5d4505e542f3aa1f8d43930b94ed.png\"/><br/> 重启MySQL服务,执行如下sql，会将<code>long_query_time</code>恢复至默认的10s，不演试了。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%long_query_time%'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"45__484\"></a>4.5 删除与恢复慢查询日志</h2>\n<p>调优结束可以及时删除慢查询日志节省磁盘空间哟。当然手工删除也是可以的。</p>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">rm</span> DESKTOP-1PB99O1-slow.log\n</code></pre>\n<p>如果误删了，而且还没有了备份或者回收站也没有了，可以使用下面的命令来重新恢复生成哟。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">#先要打开慢查询日志</span>\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">GLOBAL</span> slow_query_log<span class=\"token operator\">=</span><span class=\"token keyword\">ON</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#恢复慢查询日志</span>\nmysqladmin <span class=\"token operator\">-</span>u root <span class=\"token operator\">-</span>p flush<span class=\"token operator\">-</span>logs slow\n</code></pre>\n<h1><a id=\"5_SQL_SHOW_PROFILE_498\"></a>5.查看 SQL 执行成本：SHOW PROFILE</h1>\n<p>查看是否开启</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'profiling'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\05d97438e5fb41ad865ba0fee7621795.png\"/><br/> 如果没有开启，执行sql</p>\n<pre><code class=\"prism language-sql\">mysql <span class=\"token operator\">&gt;</span> <span class=\"token keyword\">set</span> profiling <span class=\"token operator\">=</span> <span class=\"token string\">'ON'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>使用下。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\"># 执行sql</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> stuno<span class=\"token operator\">=</span><span class=\"token number\">3453451</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> name<span class=\"token operator\">=</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>JnoEfP<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 分析性能</span>\n<span class=\"token keyword\">SHOW</span> PROFILES<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里笔者在当前会话执行过许多sql了。效果如下。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\92c63f3d938c486f8fba9f332c86a8f2.png\"/><br/> 如果只需要查看最近一条sql的性能细节。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SHOW</span> PROFILE<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果如下哟。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8b9604e7c07f46e1920cca8247e0b70c.png\"/></p>\n<p>可以查看指定sql的指定细节。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">show</span> profile cpu<span class=\"token punctuation\">,</span>block io <span class=\"token keyword\">for</span> query <span class=\"token number\">70</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果发现一条sql慢的原因在于执行慢(<code>executing</code>字段耗时多)，就可以接着用<code>Explain</code>进行分析具体的sql语句哦。</p>\n<blockquote>\n<p>🔊补充:<br/> show profile的常用查询参数：<br/> ① ALL：显示所有的开销信息。<br/> ② BLOCK IO：显示块IO开销。<br/> ③ CONTEXT SWITCHES：上下文切换开销。<br/> ④ CPU：显示CPU开销信息。<br/> ⑤ IPC：显示发送和接收开销信息。<br/> ⑥ MEMORY：显示内存开销信息。<br/> ⑦ PAGE FAULTS：显示页面错误开销信息。<br/> ⑧ SOURCE：显示和Source_function，Source_file，Source_line相关的开销信息。<br/> ⑨ SWAPS：显示交换次数开销信息。</p>\n</blockquote>\n<p>另外，在日常开发中， 如果在show profile的查询结果中，出现了以下任何一条。sql语句需要优化。</p>\n<blockquote>\n<p>🎨 sql语句需要优化的场景：<br/> <code> Coverting Heap to MyISAM</code>：查询结果太大，内存放不下，正在往磁盘中迁移<br/> <code>Creating tmp table</code>:创建临时表，先拷贝数据到临时表，用完再删除临时表<br/> <code>Coping to tmp table on disk</code>:把临时数据复制到磁盘上，警惕！<br/> <code>locked</code>。</p>\n</blockquote>\n<p>最后，还需要注意：<code>SHOW PROFILE</code>命令将被弃用，不过我们可以从<code>information_schema</code>中的<code>profiling</code>数据表进行查看。</p>\n<h1><a id=\"6EXPLAIN_553\"></a>6.分析查询语句：EXPLAIN(重点)</h1>\n<h2><a id=\"61_EXPLAIN_554\"></a>6.1 EXPLAIN简介</h2>\n<h3><a id=\"1_555\"></a>1️⃣作用</h3>\n<p>在定位了慢sql后，可以使用<code>Describe</code>或者<code>Explain</code>进行针对性的分析。</p>\n<p>如果想知道SQL的执行计划，比如是全表扫描，还是索引扫描，可以通过EXPLAIN去完成。EXPLAIN命令是查看优化器如何决定执行查询的主要方法。可以帮助我们深入了解MySQL的基于开销的优化器，还可以获得很多可能被优化器考虑到的访问策略的细节，以及当运行SQL语句时哪种策略预计会被优化器采用。</p>\n<h3><a id=\"2_561\"></a>2️⃣官网介绍</h3>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.7/en/explain-output.html\">5.7版本mysql</a><br/> <a href=\"https://dev.mysql.com/doc/refman/8.0/en/explain-output.html\">8.0版本mysql</a></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\abca2cb2f50b4ba8aa395f3f849a575c.png\"/></p>\n<h3><a id=\"3_567\"></a>3️⃣版本说明</h3>\n<p>(1)MySQL 5.6.3以前只能<code> EXPLAIN SELECT</code>；MYSQL 5.6.3以后就可以<code> EXPLAIN SELECT</code>，<code>EXPLAIN UPDATE</code>，<code>EXPLAIN DELETE</code><br/> 注意，EXPLAIN 仅仅是查看执行计划，不会真实的执行sql。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> student_info <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student_info <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面查询sql的结果如下哟。id为2的数据还在的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3737f7ab650a4996975d5c0c20483410.png\"/><br/> (2)在5.7以前的版本中，想要显示分区参数<code> partitions</code> 需要使用<code> explain partitions</code> 命令；想要显示<code>filtered</code> 需要使用<code> explain extended</code> 命令。在5.7版本后，默认explain直接显示<code>partitions</code>和<code>filtered</code>中的信息(如下图)。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2e206db940dd4c5994033bc11e3987ec.png\"/></p>\n<h2><a id=\"62__581\"></a>6.2 基本语法</h2>\n<p>先看看其显示的参数列表。后面会逐一进行介绍。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2de758c40da84bfa965bfe9c5360eaa3.png\"/></p>\n<h2><a id=\"63__584\"></a>6.3 数据准备</h2>\n<h3><a id=\"1_585\"></a>1️⃣.建表</h3>\n<p>建两个表方便联合查询</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> s1 <span class=\"token punctuation\">(</span>\n\t id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n\t key1 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t key2 <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n\t key3 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t key_part1 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t key_part2 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t key_part3 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t common_field <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">INDEX</span> idx_key1 <span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> idx_key2 <span class=\"token punctuation\">(</span>key2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">INDEX</span> idx_key3 <span class=\"token punctuation\">(</span>key3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">INDEX</span> idx_key_part<span class=\"token punctuation\">(</span>key_part1<span class=\"token punctuation\">,</span> key_part2<span class=\"token punctuation\">,</span> key_part3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">INNODB</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> s2 <span class=\"token punctuation\">(</span>\n\t id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n\t key1 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t key2 <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n\t key3 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t key_part1 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t key_part2 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t key_part3 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t common_field <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">INDEX</span> idx_key1 <span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> idx_key2 <span class=\"token punctuation\">(</span>key2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">INDEX</span> idx_key3 <span class=\"token punctuation\">(</span>key3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token keyword\">INDEX</span> idx_key_part<span class=\"token punctuation\">(</span>key_part1<span class=\"token punctuation\">,</span> key_part2<span class=\"token punctuation\">,</span> key_part3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">INNODB</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"2_622\"></a>2️⃣创建存储函数</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> rand_string1<span class=\"token punctuation\">(</span>n <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#该函数会返回一个字符串</span>\n<span class=\"token keyword\">BEGIN</span>\n<span class=\"token keyword\">DECLARE</span> chars_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">DECLARE</span> return_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">WHILE</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token keyword\">DO</span>\n\t\t<span class=\"token keyword\">SET</span> return_str <span class=\"token operator\">=</span>CONCAT<span class=\"token punctuation\">(</span>return_str<span class=\"token punctuation\">,</span>SUBSTRING<span class=\"token punctuation\">(</span>chars_str<span class=\"token punctuation\">,</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">RETURN</span> return_str<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>创建函数，假如报错，需设置参数 log_bin_trust_function_creators,允许创建函数设置</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> log_bin_trust_function_creators<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\"># 不加global只是当前窗口有效。</span>\n</code></pre>\n<h3><a id=\"3_643\"></a>3️⃣创建存储过程</h3>\n<p>创建往s1表中插入数据的存储过程：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_s1 <span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> min_num <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">IN</span> max_num <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">REPEAT</span>\n\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> s1 <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>\n\t <span class=\"token punctuation\">(</span>min_num <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t rand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token punctuation\">(</span>min_num <span class=\"token operator\">+</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t rand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t rand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t rand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t rand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t rand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tUNTIL i <span class=\"token operator\">=</span> max_num\n\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<p>创建往s2表中插入数据的存储过程：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_s2 <span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> min_num <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">IN</span> max_num <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">REPEAT</span>\n\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> s2 <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>min_num <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\trand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">(</span>min_num <span class=\"token operator\">+</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\trand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\trand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\trand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\trand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\trand_string1<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tUNTIL i <span class=\"token operator\">=</span> max_num\n\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span> <span class=\"token comment\">//</span>\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"4_691\"></a>4️⃣调用存储过程</h3>\n<p>s1表数据的添加：加入1万条记录：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CALL</span> insert_s1<span class=\"token punctuation\">(</span><span class=\"token number\">10001</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>s2表数据的添加：加入1万条记录：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CALL</span> insert_s2<span class=\"token punctuation\">(</span><span class=\"token number\">10001</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"64_EXPLAIN_700\"></a>6.4 EXPLAIN各列作用</h2>\n<h3><a id=\"1_table_701\"></a>1️⃣ table</h3>\n<p>不论我们的查询语句有多复杂，里边儿 包含了多少个表 ，到最后也是需要对每个表进行 单表访问 的，所以MySQL规定EXPLAIN语句输出的每条记录都对应着某个单表的访问方法，该条记录的table列代表着该表的表名（有时不是真实的表名字，可能是简称）。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> s2<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如下图，一张表对应一个记录。注：临时表也会有对应的记录哦。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dbb53ca4cbb143c4b9cb0d500a2682c8.png\"/></p>\n<h3><a id=\"2id_709\"></a>2️⃣id</h3>\n<p>一趟查询的标识。上面的查询结果，两个记录似乎id都是1.这是为什么呢？<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dbb53ca4cbb143c4b9cb0d500a2682c8.png\"/><br/> 实际上，一个 SELECT 关键字对应一个id。下面sql有两个select(子查询)。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> key1 <span class=\"token keyword\">FROM</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">OR</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>有两个不一样的id哟。其实就是一趟查询有一个id表示。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\183b982a4028422694a22e9919f104a9.png\"/><br/> 不过，这里有一个坑。看看下面语句。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> key2 <span class=\"token keyword\">FROM</span> s2 <span class=\"token keyword\">WHERE</span> common_field <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>两个记录的id都是1，小小的眼睛是否充满了大大的疑惑？<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dede8fc899a54a4a9d7776569937b06f.png\"/><br/> 这是因为优化器会对上面的sql语句进行优化，将其转换为多表连接，而不是子查询。因为子查询其实是一种嵌套查询的情况，其时间复杂度是O(n^m),其中m是嵌套的层数，而多表查询的时间复杂度是O(n*m)。而上面的语句两个查询并不需要存在依赖关系。</p>\n<p>再看看Union联合查询的情况。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s2<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果是这样。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\de21da63c34848aeb62155ae21e502ba.png\"/><br/> 这是因为Union是取表的并集，需要建临时表进行去重，因此会有三条记录。可以看到第三条记录的<code>Extra</code>就标识了它是一张临时表哦。临时表id是Null。</p>\n<p>再看看Union ALL。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s2<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>产生两条记录，因为它不会去重。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\958792dc4ec141eaa181a8dc272bf694.png\"/></p>\n<blockquote>\n<p>💌小结<br/> 1.id如果相同，可以认为是一组，从上往下顺序执行<br/> 2.在所有组中，id值越大，优先级越高，越先执行<br/> 3.关注点：id号每个号码，表示一趟独立的查询, 一个sql的查询趟数越少越好</p>\n</blockquote>\n<h3><a id=\"3select_type_748\"></a>3️⃣select_type</h3>\n<p>一个sql语句中可能存在多个查询。每个select小查询都有一个<code>select_type</code>,表示它在大查询中扮演什么角色。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a28b55c8745a42988c7d0ee74bcaccde.png\"/><br/> 先看一个简单的查询。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>select_type是<code>simple</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\1c6f5c6ab4f04b048138b5c36ddfd208.png\"/><br/> 看下连接查询。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> s2\n</code></pre>\n<p>还是simple<br/> <img alt=\"在这里插入图片描述\" src=\"image\\035b4d75dc6445c7b0cea06d99f2dea0.png\"/><br/> Union联合查询。其左边的查询是<code>Primary</code>,右边的查询类型是<code>Union</code>,去重的临时表查询类型是<code>Union Result</code>.</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s2<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\44bfe56f30eb4c4c876a7ed1d54d2e07.png\"/><br/> Union All.</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s2<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>不解释。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9c731ddc7d3046f7bf2e0967a309f71f.png\"/><br/> 子查询,如果不能被转换为多表连接的形式，也就是不会被优化器进行自动的优化。并且该子查询是不相关的子查询。</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> key1 <span class=\"token keyword\">FROM</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">OR</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>前面的查询，也就是外层查询是<code>Primary</code>，内层查询是<code>SUBQUERY</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\d9dd509848fd41ecafa636e2b39b94fd.png\"/><br/> 子查询,如果不能被转换为多表连接的形式，并且该子查询是相关的子查询。比如下面的查询在内部子查询使用了外部的表。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> key1 <span class=\"token keyword\">FROM</span> s2 <span class=\"token keyword\">WHERE</span> s1<span class=\"token punctuation\">.</span>key2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>key2<span class=\"token punctuation\">)</span> <span class=\"token operator\">OR</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>外层查询是<code>Primary</code>，内层查询是<code>DEPENDENT SUBQUERY</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\6ea11cb3cd4d4d79bd30f2f02a2f7688.png\"/><br/> 需要注意的是<code>DEPENDENT SUBQUERY</code>的查询语句可能会被执行多次，因为内存查询依赖于外层的查询，因此可能会是外层传一个值，内层就执行一次的模式哦。</p>\n<p>在包含<code>Union</code>或者<code>Union All</code>的子查询sql中，如果各个小查询都依赖于外查询，那么除了最左边的小查询外，各个小查询的类型都是<code>DEPENDENT UNION</code>哦。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> key1 <span class=\"token keyword\">FROM</span> s2 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> key1 <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>外查询是<code>Primary</code>,最左边的子查询是<code>DEPENDENT SUBQUERY</code>,后面的子查询是<code>DEPENDENT UNION</code>，临时去重表的类型是<code>Union Result</code>。这里大家可能要困惑，第一个子查询中也没有看到依赖s1啊。这其实也是优化器会在执行时进行优化，将<code>IN</code>改成<code>Exist</code>，并且把外部的表移到内部去。这里我们了解就行，以后会有文章给大家介绍优化器的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f3bab3e30d9743189e19a406adab2aa4.png\"/><br/> 还有，对于关于派生表的子查询。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> key1<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> c <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> key1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> derived_s1 <span class=\"token keyword\">where</span> c <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其查询类型时<code>DERIVED</code>.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d678d76073f444f385dce9786904f563.png\"/><br/> 当优化器在执行子查询时选择把子查询优化成为一张物化表，与外层查询进行连接查询时。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> key1 <span class=\"token keyword\">FROM</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>从下往上看，子查询的查询类型是<code>MATERIALIZED</code>；物化过程是基于id为2的查询结果表进行的，其table是<code>subquery 2</code>,查询类型是<code>SIMPLE</code>，而外层也相当于是与固定的直接值进行查询，其类型也是<code>SIMPLE</code>.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e3c1763f9bb243609d6b284a368dc23c.png\"/><br/> 上面的介绍都是一些基本的情况，还没有真正的介绍与索引相关的情况哦。觉得是不是晕晕的了，我们用一个表格进行下总结吧。</p>\n<h3><a id=\"4partitions__809\"></a>4️⃣partitions (可略)</h3>\n<p>如果想详细了解，可以如下方式测试。创建分区表：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">-- 创建分区表，</span>\n<span class=\"token comment\">-- 按照id分区，id&lt;100 p0分区，其他p1分区</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> user_partitions <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\n\tNAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> RANGE<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">PARTITION</span> p0 <span class=\"token keyword\">VALUES</span> less than<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">PARTITION</span> p1 <span class=\"token keyword\">VALUES</span> less than MAXVALUE\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查询id大于200（200&gt;100，p1分区）的记录</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DESC</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> user_partitions <span class=\"token keyword\">WHERE</span> id<span class=\"token operator\">&gt;</span><span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查看执行计划，partitions是p1，符合我们的分区规则<br/> <img alt=\"在这里插入图片描述\" src=\"image\\78ad168b86b24f1eae92719701c7d700.png\"/></p>\n<h3><a id=\"5type__828\"></a>5️⃣type ☆</h3>\n<p>type标明了执行一条查询时对于mysql中一张表的访问方法。这是一个重要的指标，表示我们究竟是通过什么方式访问获取数据的。</p>\n<p>完整的访问方法如下： system ， const ， eq_ref ， ref ， fulltext ， ref_or_null ，index_merge ， unique_subquery ， index_subquery ， range ， index ， ALL。</p>\n<p>下面将详细的讲解。</p>\n<h4><a id=\"1system_835\"></a>(1)system</h4>\n<p>当表中只有一条记录，并且该表中存储引擎统计数据是精确的，比如MYISAM，Memory,那么其访问方法就是<code>System</code>。这种方式几乎是性能最高的，当然我们几乎用不上。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t<span class=\"token punctuation\">(</span>i <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">Engine</span><span class=\"token operator\">=</span>MyISAM<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> t <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查询结果如下。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b8aa44d5ab434f949b33bf502893b6cc.png\"/><br/> 但凡我们再插入一条数据。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> t <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其访问方式就变成了性能最差的全表扫描<code>ALL</code>。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\372c36670a5b4808ace01b2cbc541cdb.png\"/><br/> 如果存储引擎是InnoDB，即使只有一条数据，其访问方式也是ALL，这是因为InnnoDB访问数据不是精确的。</p>\n<h4><a id=\"2Const_854\"></a>(2)Const</h4>\n<p>当我们根据主键或者唯一的耳机索引，与常数进行等值匹配时，对单表的访问方法就是<code>const</code>。这个访问方式的效率低于system，但也是很高效的。</p>\n<p>比如对主键与常数匹配，进行等值查询。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">10005</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>比如对Unique标识的唯一二级索引key2与常数匹配，进行等值查询。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key2 <span class=\"token operator\">=</span> <span class=\"token number\">10066</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4039775ffeec47ffa598356649e51da4.png\"/></p>\n<h4><a id=\"4eq_ref_866\"></a>（4）eq_ref</h4>\n<p>再进行<strong>连接查询</strong>时，如果<strong>被驱动表</strong>是通过主键或者唯一二级索引等值匹配的方式进行查询的，那么被驱动表的访问方式是<code>eq_ref</code>。这也是一种性能很不错的方式。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面连接查询语句，对于驱动表来说，就是对s1全表进行扫描，找到符合条件的数据，因此其<code>type</code>是<code>All</code>,对被驱动表来说，相于直接访问驱动表查询到的数据进行等值查询，因此其访问方式是<code>eq_ref</code>.</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\95c12896245444c1ac2ea6300b504abf.png\"/></p>\n<h4><a id=\"5ref_874\"></a>（5）ref</h4>\n<p>当使用普通的二级索引与常量进行等值匹配时，type是<code>ref</code>。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果如下。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b3f3468f9cc043cc8679718a68571bf6.png\"/><br/> 下面考考你。以下sql的引用类型是什么呢？</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key3 <span class=\"token operator\">=</span> <span class=\"token number\">10066</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>看看答案。你是不是猜错了。是All。这是因为key3的字段是varchar类型，但是我们这里常量值是整形，因此需要使用函数进行隐式的类型转换，一旦使用函数，索引就失效了，因此访问类型变成了全表扫描All<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dfcf7be9d7ea4b6eb4209b075c66ad2a.png\"/><br/> 我们常量使用对的类型。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'10066'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>就是期望的ref访问类型了。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f09077bbca7747b6977fecb6f9d934ac.png\"/></p>\n<h4><a id=\"6ref_or_null_896\"></a>（6）ref_or_null</h4>\n<p>当使用普通的二级索引进行等值匹配时，当索引值可以是Null时，type是<code>ref_or_null</code>。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">OR</span> key1 <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果如下。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e782d85984d042f78f306b0e1705d462.png\"/></p>\n<h4><a id=\"7index_merge_904\"></a>（7）index_merge</h4>\n<p>当进行单表访问时，如果多个查询字段分别建立了单列索引，使用OR连接，其访问类型是<code>index_merge</code>。</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">OR</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其结果如下。同时还可以看到key这一字段，是使用了两个索引。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\22a3949907d9483d8b5f0e67abdaa3c4.png\"/><br/> 猜猜下面sql的引用类型</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">AND</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>猜对了吗？答案是<code>ref</code>,这是因为用AND连接两个查询时，实际上只使用了key1的索引。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0a97fcc348464773af58b5d0c35258ff.png\"/></p>\n<h4><a id=\"8unique_subquery_918\"></a>(8)unique_subquery</h4>\n<p>针对一些包含<code>IN</code>的subcase，如果优化器决定将IN子查询优化为EXIST子查询，而且子查询可以使用主键进行等值匹配的话，子查询的执行计划的type就是<code>unique_subquery</code>。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key2 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> s2 <span class=\"token keyword\">where</span> s1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">)</span> <span class=\"token operator\">OR</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果如下。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\80784daeabd345c38a3da5e4babd2950.png\"/></p>\n<h4><a id=\"9range_925\"></a>(9)range</h4>\n<p>范围查找的访问计划类型是<code>range</code>.</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f2ae8f79a95e4ba6a6b16a33addcdff2.png\"/></p>\n<h4><a id=\"10index_931\"></a>(10)index</h4>\n<p>当我们可以使用<strong>索引覆盖</strong>，但是需要扫描的全部的索引记录时，该表的访问方式就是<code>index</code>.索引覆盖后面文章介绍优化器时会详细介绍，为了便于大家理解，先简单介绍如下。比如下面sql语句中，key_part2 ，key_part2 都属于联合索引<code> INDEX idx_key_part(key_part1, key_part2, key_part3)</code>的一部分,在查找数据时可以用上这个联合索引，而不用进行回表操作，这种情况即使索引覆盖。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> key_part2 <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key_part2 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果如下。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6e3075c983184557a02e7c1e1875dfe5.png\"/></p>\n<h4><a id=\"11ALL_938\"></a>(11)ALL</h4>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8a7467c034da496ea9158ef714e717be.png\"/></p>\n<blockquote>\n<p>❤温馨提示：这里很多小伙伴会觉得记不住，其实您可以收藏这篇博客，执行EXPLAIN时对应结果，反向查找博文对应内容，毕竟咱们只需要能够读懂性能分析的结果。</p>\n</blockquote>\n<p>最后进行下小结吧。</p>\n<blockquote>\n<p>结果值从最好到最坏依次是： <strong>system &gt; const &gt; eq_ref &gt; ref</strong> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL其中比较重要的几个提取出来（见加粗部分）。<br/> SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，最好是 consts级别。（阿里巴巴开发手册要求）</p>\n</blockquote>\n<h3><a id=\"6possible_keyskey_952\"></a>6️⃣possible_keys和key</h3>\n<p>分别表示可能被使用的索引与实际使用的索引。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">&gt;</span> <span class=\"token string\">'z'</span> <span class=\"token operator\">AND</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\dcc9e7ec93284776b6851ed8602aadd3.png\"/><br/> 对应优化器来说，可以选择的<code>possible_keys</code>越少越好，因为选项越多，进行过滤花的时间也就对应更多。另外，优化器会对各个索引进行查询的效率进行评估，以此来选择实际使用的<code>key</code>.而且由于优化器会对sql进行优化，完全可能会出现<code>possible_keys</code>是null，但是<code>key</code>不为null的情况。</p>\n<h3><a id=\"7key_len__960\"></a>7️⃣key_len ☆</h3>\n<p>实际使用的索引的长度，单位是字节。可以帮助你检查是否充分利用了索引，主要针对联合索引具有一定的参考，对同一索引来说，key_len值越大越好(与自己比较，后面将解释)。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">10005</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其结果如下，是4，这个结果怎么算出来的呢？<br/> <img alt=\"在这里插入图片描述\" src=\"image\\aa98d79b2fc540e1bdeb2ae6bb937490.png\"/><br/> 这是因为使用的是主键id作为索引，其类型是int，占4个字节。</p>\n<p>再来。猜猜下面的key_len是多少。</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key2 <span class=\"token operator\">=</span> <span class=\"token number\">10126</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>什么？你猜的是4，那你要给我一键三联了哦。因为答案是5.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\50c8ff6bac634dce9a6ed0a59c4d3e8e.png\"/><br/> 这是因为虽然key2也是int类型，但是它被unique修饰，并没有标识非空(而主键都是非空的)，因此加上空值标记，一共是5字节哟，看不懂可以自觉看这篇补课：<a href=\"https://blog.csdn.net/qq_41708993/article/details/124530866\">Mysql进阶索引篇02——InnoDB存储引擎的数据存储结构</a></p>\n<p>再来。</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>答案是303，因为类型是varchar(100)，100个字符，utf-8每个字符占3个字节，共300个字节，加上变长列表2个字节与一个空值标识占一个字节，共303字节。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ac2e71ea0f98404e8082be57f1418027.png\"/><br/> 看看联合索引的情况。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key_part1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其key_len还是303，不需要解释了吧。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a659e30ab63648bfa3a4961c0f5c1ecd.png\"/><br/> 再看看下面这个联合索引。</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key_part1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">AND</span> key_part2 <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其结果是606哦。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7ae2da7c761e43af9f1d1aaeb3fe34cd.png\"/><br/> 这个查询的key-len比上面的查询大，性能就比上面的好，怎么理解呢？其实只要你看过我之前介绍B+树的文章就很容易理解了。因为在目录页我除了考虑<code>key_part1</code> ，还会考虑<code>key_part12</code>，定位到的数据就更加精准，范围更小，需要加载I/O的数据页数量就会更少哦，这样是不是性能就比较好啊。<br/> <img alt=\"image-20220430153658627\" src=\"image\\236c41544e2c9f9df86e0a16d8e57dbf.png\"/><br/> 博客链接我也贴给你们:<a href=\"https://blog.csdn.net/qq_41708993/article/details/124517172?spm=1001.2014.3001.5502\">MySql进阶索引篇01——深度讲解索引的数据结构：B+树<br/> </a>,这么好的博主你不关注下吗？</p>\n<p>猜猜下面的sql执行后key_len是多少</p>\n<pre><code class=\"prism language-sql\">\t<span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key_part3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>是空哦，因为我们都不会使用到索引，这就是我们一直在提的<strong>最左前缀原则</strong>,后面会详细介绍的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\530425e5dd9e45899696f8e9b3730e0d.png\"/></p>\n<blockquote>\n<p>📚练习：key_len的长度计算公式：<br/> varchar(10)变长字段且允许NULL = 10 * ( character set：utf8=3,gbk=2,latin1=1)+1(NULL)+2(变长字段)<br/> varchar(10)变长字段且不允许NULL = 10 * ( character set：utf8=3,gbk=2,latin1=1)+2(变长字段)<br/> char(10)固定字段且允许NULL = 10 * ( character set：utf8=3,gbk=2,latin1=1)+1(NULL)<br/> char(10)固定字段且不允许NULL = 10 * ( character set：utf8=3,gbk=2,latin1=1)</p>\n</blockquote>\n<h3><a id=\"8ref_1015\"></a>8️⃣.ref</h3>\n<p>当索引列进行等值查询时，与索引列匹配的对象信息。</p>\n<p>与常量等值匹配。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其<code>ref</code>是<code>const</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f53db8f831414e69a095ecda9daac887.png\"/><br/> 再来。连接查询的情况。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>对被驱动表s2执行的查询引用了atguigudb1.s1.id字段进行等值查询。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\93053e50e4c34673b048e447288b11d8.png\"/><br/> 最后看看使用函数的情况。其<code>ref</code>就是<code>func</code>。</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s2<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> UPPER<span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"9_rows__1035\"></a>9️⃣ rows ☆</h3>\n<p>预估的需要读取的记录条目数。条目数越小越好。这是因为值越小，加载I/O的页数就越少。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">&gt;</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6c48828b8f29481789dfbe06622d67ab.png\"/></p>\n<h3><a id=\"10filtered_1043\"></a>1️⃣0️⃣filtered</h3>\n<p>经过搜索条件后过滤剩下的记录所占的百分比。百分比越高越好，比如同样rows是40，如果filter是100，则是从40条记录里进行查找，如果filter是10，则是从400条记录里进行查找，相比较而言当然是前者的效率更高哦。</p>\n<p>如果执行的是单表扫描，那么计算时需要估计除了对应搜索条件外的其他搜索条件满足的记录有多少条。晕了就看看下面的例子。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">&gt;</span> <span class=\"token string\">'z'</span> <span class=\"token operator\">AND</span> common_field <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果是10，表示有398条记录满足 key1 &gt; 'z’的条件，这398条记录的10%满足 common_field = 'a’条件。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d790c11f5fe44cdc889a761243f41307.png\"/></p>\n<p>实际上，对于单表查询，这个字段没有太大的意义，我们更加关注连接查询时的filtered值，它决定了被驱动表要执行的次数。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>key1 <span class=\"token keyword\">WHERE</span>\ns1<span class=\"token punctuation\">.</span>common_field <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果如下。在标明驱动表s1提供给被驱动表的记录数是9895条，其中989.5条满足过滤条件s1.key1 = s2.key1，那么被驱动表需要执行990次查询。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3d1e9994f402413b9d5b555066122abc.png\"/></p>\n<h3><a id=\"11_Extra__1060\"></a>1️⃣1️⃣ Extra ☆</h3>\n<p>提供一些额外信息，可以更精确的知道MySQL到底如何执行给定的查询语句。<br/> <code>No tables used</code>,不解释。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2b6a1c89dad3489ea33feeba728178c5.png\"/></p>\n<p><code> Impossible WHERE</code>,当查询条件永远不可能满足，查不到数据时会出现该信息。</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ba1964b94f6d49daa939ae16286d5d0f.png\"/><br/> <code>Using where</code>，没有使用索引，普通的where查询</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> common_field <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fb8396ade4b349178c5c1ee2e64dc1f5.png\"/><br/> 使用索引查询，则默默使用索引，什么额外信息也没有。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\42e5fe013124478f9db008045ae63ba2.png\"/></p>\n<p>索引加普通where，那还是using where</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">AND</span> common_field <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9407fcb386564edcbf666ea56feaac31.png\"/><br/> <code>No matching min/max row</code>.当查询语句中有MIN、MAX等聚合函数，但是并没有符合where条件的搜索记录时，会提供额外信息No matching min/max row。(表中根本没有满足where条件的字句，找min、max没有意义)</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'abcdefg'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\eade3520d8144f1d93551620c103a5f3.png\"/><br/> <code>Select tables optimized away</code>,当查询语句中有MIN、MAX等聚合函数，有符合where条件的搜索记录时.</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'vTilEo'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2460d698887e45d8b56d24ffe4dc1f02.png\"/><br/> <code>Using index</code>,在使用覆盖索引的情况提示。所谓覆盖索引，就是索引中覆盖了需要查询的所有字段，不需要再使用聚簇索引进行回表查找，比如下面的例子，使用key1作为查找条件，该字段建立了索引，B+树可以查找到key1字段和主键，因此下面只查找key1字段就不用进行回表操作，这是非常棒的情况。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token punctuation\">`</span><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> key1 <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fc35cf7de4c4487c890fe4dfaf6062d3.png\"/></p>\n<p><code>Using index condition</code>：搜索列中虽然出现了索引列，但是不能够使用索引，这是很坑的。</p>\n<p>比如下面的查询虽然出现了索引列作为查询条件，但是还是需要进行回表查找，回表操作是一个随机I/O，比较耗时。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">&gt;</span> <span class=\"token string\">'z'</span> <span class=\"token operator\">AND</span> key1 <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4fa024713a3c45c99a8b253403db5c3e.png\"/><br/> 上面这种情况可以使用<strong>索引下推</strong>(可以通过配置项进行配置)，使我们使用 WHERE key1 &gt; ‘z’ 得到的结果先进行模糊匹配key1 LIKE ‘%a’，然后再去回表，就可以减少回表的次数了。</p>\n<p><code>Using join buffer (Block Nested Loop)</code>：在连接查询中，当被驱动表不能够有效利用索引实现提升速度，数据库就使用缓存来尽可能提升一些性能。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s1<span class=\"token punctuation\">.</span>common_field <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>common_field<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9caa3e796cbe4ed1981e29ec725c4d03.png\"/><br/> <code>Not exists</code>:使用左外连接时，当被驱动表的搜索条件要求某个字段为null，而该字段又是非空的，就会提示.</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>key1 <span class=\"token keyword\">WHERE</span> s2<span class=\"token punctuation\">.</span>id <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8fff51fdd6094fd69e601592aad9c7df.png\"/><br/> <code>Using intersect(…) 、 Using union(…) 和 Using sort_union(…)</code>:索引合并。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">WHERE</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">OR</span> key3 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fac65c43230b4c12b1676e5805535670.png\"/><br/> <code>Zero limit</code></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f032d004475e48f79e90c857f6d32f43.png\"/><br/> <code>Using filesort</code>：排序时无法使用到索引，只能在内存(记录较少)或者磁盘中(记录数较多)进行排序，这种情况时比较悲壮的。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> common_field <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6ad6354f9bb24d149a27b0e7b63d5268.png\"/><br/> <code>Using temporary</code>:普通字段去重、分组，无法使用索引，使用临时表，这也是需要被优化的。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> common_field <span class=\"token keyword\">FROM</span> s1<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3e1e8948f99542d6928ce336a857d048.png\"/></p>\n<blockquote>\n<p>💘 补充<br/> EXPLAIN不考虑各种Cache<br/> EXPLAIN不能显示MySQL在执行查询时所作的优化工作<br/> EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况部分统计信息是估算的，并非精确值</p>\n</blockquote>\n<h1><a id=\"7EXPLAIN_1152\"></a>7.EXPLAIN的进一步使用</h1>\n<h2><a id=\"71EXPLAIN_1153\"></a>7.1、EXPLAIN四种输出格式</h2>\n<p>这里谈谈EXPLAIN的输出格式。EXPLAIN可以输出四种格式： <strong>传统格式</strong> ，<strong>JSON格式</strong>， <strong>TREE格式</strong> 以及 <strong>可视化输出</strong>。用户可以根据需要选择适用于自己的格式。</p>\n<h3><a id=\"1_1156\"></a>1️⃣传统格式</h3>\n<p>传统格式简单明了，输出是一个表格形式，概要说明查询计划。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span>  <span class=\"token keyword\">SELECT</span> s1<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span>key1 <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>key1 <span class=\"token keyword\">WHERE</span> s2<span class=\"token punctuation\">.</span>common_field <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3a615ebe1bc44fba92cf2c9e27702329.png\"/></p>\n<h3><a id=\"2JSON_1163\"></a>2️⃣JSON格式</h3>\n<p>在EXPLAIN单词和真正的查询语句中间加上 FORMAT=JSON 。<br/> 传统格式与json格式的各个字段存在如下表所示的对应关系(mysql5.7官方文档)。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3c9ce3363a75444787da6bb6b57d173f.png\"/><br/> demo如下。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">EXPLAIN</span> FORMAT<span class=\"token operator\">=</span>JSON <span class=\"token keyword\">SELECT</span> s1<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span>key1 <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>key1 <span class=\"token keyword\">WHERE</span> s2<span class=\"token punctuation\">.</span>common_field <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果如下。可以看到json格式的信息量会更加丰富。尤其是<strong>成本</strong>信息，是用于衡量一个执行计划的好坏的重要指标。</p>\n<pre><code class=\"prism language-sql\">{\n  <span class=\"token string\">\"query_block\"</span>: {\n    <span class=\"token string\">\"select_id\"</span>: <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"cost_info\"</span>: {\n      <span class=\"token string\">\"query_cost\"</span>: <span class=\"token string\">\"12766.44\"</span>\n    }<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"nested_loop\"</span>: <span class=\"token punctuation\">[</span>\n      {\n        <span class=\"token string\">\"table\"</span>: {\n          <span class=\"token string\">\"table_name\"</span>: <span class=\"token string\">\"s2\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"access_type\"</span>: <span class=\"token string\">\"ALL\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"possible_keys\"</span>: <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"idx_key1\"</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"rows_examined_per_scan\"</span>: <span class=\"token number\">9898</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"rows_produced_per_join\"</span>: <span class=\"token number\">8908</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"filtered\"</span>: <span class=\"token string\">\"90.00\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"cost_info\"</span>: {\n            <span class=\"token string\">\"read_cost\"</span>: <span class=\"token string\">\"294.96\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"eval_cost\"</span>: <span class=\"token string\">\"1781.64\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"prefix_cost\"</span>: <span class=\"token string\">\"2076.60\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"data_read_per_join\"</span>: <span class=\"token string\">\"15M\"</span>\n          }<span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"used_columns\"</span>: <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"common_field\"</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"attached_condition\"</span>: <span class=\"token string\">\"((`atguigudb1`.`s2`.`common_field` is not null) and (`atguigudb1`.`s2`.`key1` is not null))\"</span>\n        }\n      }<span class=\"token punctuation\">,</span>\n      {\n        <span class=\"token string\">\"table\"</span>: {\n          <span class=\"token string\">\"table_name\"</span>: <span class=\"token string\">\"s1\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"access_type\"</span>: <span class=\"token string\">\"ref\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"possible_keys\"</span>: <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"idx_key1\"</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"key\"</span>: <span class=\"token string\">\"idx_key1\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"used_key_parts\"</span>: <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"key1\"</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"key_length\"</span>: <span class=\"token string\">\"303\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"ref\"</span>: <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"atguigudb1.s2.key1\"</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"rows_examined_per_scan\"</span>: <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"rows_produced_per_join\"</span>: <span class=\"token number\">8908</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"filtered\"</span>: <span class=\"token string\">\"100.00\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"using_index\"</span>: <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"cost_info\"</span>: {\n            <span class=\"token string\">\"read_cost\"</span>: <span class=\"token string\">\"8908.20\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"eval_cost\"</span>: <span class=\"token string\">\"1781.64\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"prefix_cost\"</span>: <span class=\"token string\">\"12766.44\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"data_read_per_join\"</span>: <span class=\"token string\">\"15M\"</span>\n          }<span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"used_columns\"</span>: <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"key1\"</span>\n          <span class=\"token punctuation\">]</span>\n        }\n      }\n    <span class=\"token punctuation\">]</span>\n  }\n}\n\n</code></pre>\n<p>大家可能有疑问 “cost_info” 里边的成本看着怪怪的，它们是怎么计算出来的？</p>\n<p>先看s1表的 \"cost_info\"部分：</p>\n<pre><code>\"cost_info\": {\n  \"read_cost\": \"1840.84\",\n  \"eval_cost\": \"193.76\",\n  \"prefix_cost\": \"2034.60\",\n  \"data_read_per_join\": \"1M\"\n}\n</code></pre>\n<p><code>read_cost</code> 是由下边这两部分组成的：</p>\n<ul><li>IO成本</li><li>检测 rows × (1 - filter) 条记录的 CPU 成本</li></ul>\n<blockquote>\n<p>💚 rows和filter都是我们前边介绍执行计划的输出列，在JSON格式的执行计划中，rows相当于rows_examined_per_scan，filtered名称不变</p>\n</blockquote>\n<p><code>eval_cost </code>是这样计算的：</p>\n<ul><li>检测 rows × filter 条记录的成本。</li></ul>\n<p><code>prefix_cost</code>就是单独查询 s1 表的成本，也就是：read_cost + eval_cost<br/> data_read_per_join 表示在此次查询中需要读取的数据量。</p>\n<p>对于 s2 表的 “cost_info” 部分是这样的：</p>\n<pre><code>\"cost_info\": {\n  \"read_cost\": \"968.80\",\n  \"eval_cost\": \"193.76\",\n  \"prefix_cost\": \"3197.16\",\n  \"data_read_per_join\": \"1M\"\n}\n</code></pre>\n<p>由于 s2 表是被驱动表，所以可能被读取多次，这里的 read_cost 和 eval_cost 是访问多次 s2 表后累加起来的值，大家主要关注里边儿的 prefix_cost 的值代表的是整个连接查询预计的成本，也就是单次查询 s1 表和多次查询 s2 表后的成本的和，也就是：</p>\n<pre><code>968.80 + 193.76 + 2034.60 = 3197.16\n</code></pre>\n<h3><a id=\"3TREE_1273\"></a>3️⃣TREE格式</h3>\n<p>TREE格式是8.0.16版本之后引入的新格式，主要根据查询的 各个部分之间的关系 和 各部分的执行顺序 来描述如何查询。</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> FORMAT<span class=\"token operator\">=</span>tree <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>key2 <span class=\"token keyword\">WHERE</span>\ns1<span class=\"token punctuation\">.</span>common_field <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\\G\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token number\">1.</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">EXPLAIN</span>: <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Nested <span class=\"token keyword\">loop</span> <span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">1360.08</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">990</span><span class=\"token punctuation\">)</span>\n <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Filter: <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>common_field <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">1013.75</span>\n<span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">990</span><span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">Table</span> scan <span class=\"token keyword\">on</span> s1 <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">1013.75</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">9895</span><span class=\"token punctuation\">)</span>\n <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Single<span class=\"token operator\">-</span><span class=\"token keyword\">row</span> <span class=\"token keyword\">index</span> lookup <span class=\"token keyword\">on</span> s2 <span class=\"token keyword\">using</span> idx_key2 <span class=\"token punctuation\">(</span>key2<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">with</span> <span class=\"token keyword\">index</span>\ncondition: <span class=\"token punctuation\">(</span>cast<span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>key1 <span class=\"token keyword\">as</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> cast<span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span>key2 <span class=\"token keyword\">as</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">0.25</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h3><a id=\"4_1289\"></a>4️⃣可视化输出</h3>\n<p>可视化输出，可以通过MySQL Workbench可视化查看MySQL的执行计划。通过点击Workbench的放大镜图标，即可生成可视化的查询计划。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bdfa0eef9f964d9bb0228d0310728aaa.png\"/></p>\n<p>上图按从左到右的连接顺序显示表。红色框表示 全表扫描 ，而绿色框表示使用 索引查找<br/> 对于每个表，显示使用的索引。还要注意的是，每个表格的框上方是每个表访问所发现的行数的估计值以及访问该表的成本。</p>\n<h2><a id=\"72_SHOW_WARNINGS_1296\"></a>7.2 SHOW WARNINGS的使用</h2>\n<p>可以显示数据库真正执行的sql</p>\n<p>先使用<code>Explain</code>，我们写的sql按道理是使用s1作为驱动表</p>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> s1<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span>key1 <span class=\"token keyword\">FROM</span> s1 <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> s2 <span class=\"token keyword\">ON</span> s1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>key1 <span class=\"token keyword\">WHERE</span> s2<span class=\"token punctuation\">.</span>common_field <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行结果把s2作为了驱动表，s1作为了被驱动表<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9882481a85e748dc94a6bd54745f4d78.png\"/></p>\n<p>紧接着使用<code> SHOW WARNINGS</code></p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">WARNINGS</span>\\G\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token number\">1.</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n <span class=\"token keyword\">Level</span>: Note\n Code: <span class=\"token number\">1003</span>\nMessage: <span class=\"token comment\">/* select#1 */</span> <span class=\"token keyword\">select</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>atguigu<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>s1<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>key1<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">AS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>key1<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>atguigu<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>s2<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>key1<span class=\"token punctuation\">`</span></span>\n<span class=\"token keyword\">AS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>key1<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">from</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>atguigu<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>s1<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">join</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>atguigu<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>s2<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">where</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>atguigu<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>s1<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>key1<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span>\n<span class=\"token identifier\"><span class=\"token punctuation\">`</span>atguigu<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>s2<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>key1<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>atguigu<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>s2<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>common_field<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>上面message中显示的是数据库优化、重写后‘真正’执行的查询语句。果然它帮我们做了优化。</p>\n<h1><a id=\"8trace_1320\"></a>8.分析优化器执行计划：trace</h1>\n<p><code>OPTIMIZE_TRACE</code>是mysql5.6中引入的一个跟踪工具，它可以跟踪优化器做出的各种决策，比如访问表的方法，各种开销计算，各种转换，结果会被记录到<code>information_schema.optimizer_trace </code>中。</p>\n<p>开启。</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SET</span> optimizer_trace<span class=\"token operator\">=</span><span class=\"token string\">\"enabled=on\"</span><span class=\"token punctuation\">,</span>end_markers_in_json<span class=\"token operator\">=</span><span class=\"token keyword\">on</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">set</span> optimizer_trace_max_mem_size<span class=\"token operator\">=</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>开启后，可分析如下语句：</p>\n<ul><li>SELECT</li><li>INSERT</li><li>REPLACE</li><li>UPDATE</li><li>DELETE</li><li>EXPLAIN</li><li>SET</li><li>DECLARE</li><li>CASE</li><li>IF</li><li>RETURN</li><li>CALL</li></ul>\n<p>测试：执行如下SQL语句</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">where</span> id <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>最后， 查询 information_schema.optimizer_trace 就可以知道MySQL是如何执行SQL的</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span>optimizer_trace\\G\n</code></pre>\n<p>结果如下</p>\n<pre><code class=\"prism language-json\"><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">*</span> <span class=\"token number\">1.</span> row <span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">*</span>\n <span class=\"token comment\">//第1部分：查询语句</span>\n <span class=\"token constant\">QUERY</span><span class=\"token operator\">:</span> select <span class=\"token operator\">*</span> from student where id <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span>\n <span class=\"token comment\">//第2部分：QUERY字段对应语句的跟踪信息</span>\n <span class=\"token constant\">TRACE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token string-property property\">\"steps\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token string-property property\">\"join_preparation\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//预备工作</span>\n    <span class=\"token string-property property\">\"select#\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"steps\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"expanded_query\"</span><span class=\"token operator\">:</span> \"<span class=\"token comment\">/* select#1 */</span> select <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">student</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">id</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">AS</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">id</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">student</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">stuno</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">AS</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">stuno</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">student</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">AS</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">student</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">age</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">AS</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">age</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">student</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">classId</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">AS</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">classId</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">from</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">student</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token function\">where</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">student</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">id</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\"\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* steps */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* join_preparation */</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token string-property property\">\"join_optimization\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//进行优化</span>\n    <span class=\"token string-property property\">\"select#\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"steps\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"condition_processing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//条件处理</span>\n       <span class=\"token string-property property\">\"condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"WHERE\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token string-property property\">\"original_condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(`student`.`id` &lt; 10)\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token string-property property\">\"steps\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token string-property property\">\"transformation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"equality_propagation\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string-property property\">\"resulting_condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(`student`.`id` &lt; 10)\"</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token string-property property\">\"transformation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"constant_propagation\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string-property property\">\"resulting_condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(`student`.`id` &lt; 10)\"</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token string-property property\">\"transformation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"trivial_condition_removal\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string-property property\">\"resulting_condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(`student`.`id` &lt; 10)\"</span>\n       <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span> <span class=\"token comment\">/* steps */</span>\n     <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* condition_processing */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"substitute_generated_columns\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//替换生成的列</span>\n     <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* substitute_generated_columns */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"table_dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>   <span class=\"token comment\">//表的依赖关系</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string-property property\">\"table\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"`student`\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"row_may_be_null\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"map_bit\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"depends_on_map_bits\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* depends_on_map_bits */</span>\n      <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* table_dependencies */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"ref_optimizer_key_uses\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>   <span class=\"token comment\">//使用键</span>\n     <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* ref_optimizer_key_uses */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"rows_estimation\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>   <span class=\"token comment\">//行判断</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string-property property\">\"table\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"`student`\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"range_analysis\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token string-property property\">\"table_scan\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token string-property property\">\"rows\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3973767</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"cost\"</span><span class=\"token operator\">:</span> <span class=\"token number\">408558</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* table_scan */</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">//扫描表</span>\n         <span class=\"token string-property property\">\"potential_range_indexes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>   <span class=\"token comment\">//潜在的范围索引</span>\n         <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token string-property property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PRIMARY\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"usable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"key_parts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"id\"</span>\n          <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* key_parts */</span>\n         <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* potential_range_indexes */</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string-property property\">\"setup_range_conditions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>   <span class=\"token comment\">//设置范围条件</span>\n        <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* setup_range_conditions */</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string-property property\">\"group_index_range\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token string-property property\">\"chosen\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"cause\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"not_group_by_or_distinct\"</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* group_index_range */</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string-property property\">\"skip_scan_range\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token string-property property\">\"potential_skip_scan_indexes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string-property property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PRIMARY\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"usable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"cause\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"query_references_nonkey_column\"</span>\n          <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* potential_skip_scan_indexes */</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* skip_scan_range */</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string-property property\">\"analyzing_range_alternatives\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//分析范围选项</span>\n          <span class=\"token string-property property\">\"range_scan_alternatives\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token string-property property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PRIMARY\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"ranges\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n             <span class=\"token string\">\"id &lt; 10\"</span>\n           <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* ranges */</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"index_dives_for_eq_ranges\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"rowid_ordered\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"using_mrr\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"index_only\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"rows\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"cost\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1.91986</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"chosen\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* range_scan_alternatives */</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"analyzing_roworder_intersect\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token string-property property\">\"usable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"cause\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"too_few_roworder_scans\"</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* analyzing_roworder_intersect */</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* analyzing_range_alternatives */</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string-property property\">\"chosen_range_access_summary\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//选择范围访问摘要</span>\n          <span class=\"token string-property property\">\"range_access_plan\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token string-property property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"range_scan\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PRIMARY\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"rows\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"ranges\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"id &lt; 10\"</span>\n          <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* ranges */</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* range_access_plan */</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"rows_for_plan\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"cost_for_plan\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1.91986</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"chosen\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* chosen_range_access_summary */</span>\n       <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* range_analysis */</span>\n      <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* rows_estimation */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"considered_execution_plans\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  <span class=\"token comment\">//考虑执行计划</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string-property property\">\"plan_prefix\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* plan_prefix */</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"table\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"`student`\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"best_access_path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//最佳访问路径</span>\n         <span class=\"token string-property property\">\"considered_access_paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n         <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token string-property property\">\"rows_to_scan\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"access_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"range\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"range_details\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string-property property\">\"used_index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PRIMARY\"</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* range_details */</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"resulting_rows\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"cost\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2.81986</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">\"chosen\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n         <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* considered_access_paths */</span>\n       <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* best_access_path */</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"condition_filtering_pct\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//行过滤百分比</span>\n        <span class=\"token string-property property\">\"rows_for_plan\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"cost_for_plan\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2.81986</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"chosen\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* considered_execution_plans */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"attaching_conditions_to_tables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//将条件附加到表上</span>\n       <span class=\"token string-property property\">\"original_condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(`student`.`id` &lt; 10)\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token string-property property\">\"attached_conditions_computation\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* attached_conditions_computation */</span><span class=\"token punctuation\">,</span>\n       <span class=\"token string-property property\">\"attached_conditions_summary\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  <span class=\"token comment\">//附加条件概要</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token string-property property\">\"table\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"`student`\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string-property property\">\"attached\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(`student`.`id` &lt; 10)\"</span>\n       <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* attached_conditions_summary */</span>\n     <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* attaching_conditions_to_tables */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"finalizing_table_conditions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string-property property\">\"table\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"`student`\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"original_table_condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(`student`.`id` &lt; 10)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"final_table_condition  \"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(`student`.`id` &lt; 10)\"</span>\n      <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* finalizing_table_conditions */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"refine_plan\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  <span class=\"token comment\">//精简计划</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string-property property\">\"table\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"`student`\"</span>\n      <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* refine_plan */</span>\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* steps */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* join_optimization */</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token string-property property\">\"join_execution\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//执行</span>\n    <span class=\"token string-property property\">\"select#\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"steps\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n   <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* steps */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* join_execution */</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span> <span class=\"token comment\">/* steps */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//第3部分：跟踪信息过长时，被截断的跟踪信息的字节数。</span>\n<span class=\"token constant\">MISSING_BYTES_BEYOND_MAX_MEM_SIZE</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>  <span class=\"token comment\">//丢失的超出最大容量的字节</span>\n<span class=\"token comment\">//第4部分：执行跟踪语句的用户是否有查看对象的权限。当不具有权限时，该列信息为1且TRACE字段为空，一般在</span>\n调用带有<span class=\"token constant\">SQL</span> <span class=\"token constant\">SECURITY</span> <span class=\"token constant\">DEFINER</span>的视图或者是存储过程的情况下，会出现此问题。\n<span class=\"token constant\">INSUFFICIENT_PRIVILEGES</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>  <span class=\"token comment\">//缺失权限</span>\n<span class=\"token number\">1</span> row <span class=\"token keyword\">in</span> <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"9MySQLsys_schema_1560\"></a>9.MySQL监控分析视图-sys schema</h1>\n<h2><a id=\"91_Sys_schema_1561\"></a>9.1 Sys schema视图摘要</h2>\n<p><code>performace-schema</code>和<code>information-schema</code>可以用来分析数据库性能，mysql5.7还设计了-sys schema整合了上面两个schema,还让它们以视图方式显示，更易于理解<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8a3dfe963a254c63b42983f6a710cf05.png\"/></p>\n<h2><a id=\"92_Sys_schema_1565\"></a>9.2 Sys schema视图使用场景</h2>\n<p>索引情况</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">#1. 查询冗余索引</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>schema_redundant_indexes<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#2. 查询未使用过的索引</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>schema_unused_indexes<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#3. 查询索引的使用情况</span>\n<span class=\"token keyword\">select</span> index_name<span class=\"token punctuation\">,</span>rows_selected<span class=\"token punctuation\">,</span>rows_inserted<span class=\"token punctuation\">,</span>rows_updated<span class=\"token punctuation\">,</span>rows_deleted\n<span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>schema_index_statistics <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">'dbname'</span> <span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>表相关</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\"># 1. 查询表的访问量</span>\n<span class=\"token keyword\">select</span> table_schema<span class=\"token punctuation\">,</span>table_name<span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>io_read_requests<span class=\"token operator\">+</span>io_write_requests<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> io <span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>schema_table_statistics <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> table_schema<span class=\"token punctuation\">,</span>table_name <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> io <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 2. 查询占用bufferpool较多的表</span>\n<span class=\"token keyword\">select</span> object_schema<span class=\"token punctuation\">,</span>object_name<span class=\"token punctuation\">,</span>allocated<span class=\"token punctuation\">,</span><span class=\"token keyword\">data</span>\n<span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>innodb_buffer_stats_by_table <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> allocated <span class=\"token keyword\">limit</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 3. 查看表的全表扫描情况</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>statements_with_full_table_scans <span class=\"token keyword\">where</span> db<span class=\"token operator\">=</span><span class=\"token string\">'dbname'</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>语句相关</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">#1. 监控SQL执行的频率</span>\n<span class=\"token keyword\">select</span> db<span class=\"token punctuation\">,</span>exec_count<span class=\"token punctuation\">,</span>query <span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>statement_analysis\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> exec_count <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#2. 监控使用了排序的SQL</span>\n<span class=\"token keyword\">select</span> db<span class=\"token punctuation\">,</span>exec_count<span class=\"token punctuation\">,</span>first_seen<span class=\"token punctuation\">,</span>last_seen<span class=\"token punctuation\">,</span>query\n<span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>statements_with_sorting <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#3. 监控使用了临时表或者磁盘临时表的SQL</span>\n<span class=\"token keyword\">select</span> db<span class=\"token punctuation\">,</span>exec_count<span class=\"token punctuation\">,</span>tmp_tables<span class=\"token punctuation\">,</span>tmp_disk_tables<span class=\"token punctuation\">,</span>query\n<span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>statement_analysis <span class=\"token keyword\">where</span> tmp_tables<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span> <span class=\"token operator\">or</span> tmp_disk_tables <span class=\"token operator\">&gt;</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>tmp_tables<span class=\"token operator\">+</span>tmp_disk_tables<span class=\"token punctuation\">)</span> <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>IO相关</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">#查看消耗磁盘IO的文件</span>\n<span class=\"token keyword\">select</span> <span class=\"token keyword\">file</span><span class=\"token punctuation\">,</span>avg_read<span class=\"token punctuation\">,</span>avg_write<span class=\"token punctuation\">,</span>avg_read<span class=\"token operator\">+</span>avg_write <span class=\"token keyword\">as</span> avg_io\n<span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>io_global_by_file_by_bytes <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> avg_read  <span class=\"token keyword\">limit</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>Innodb 相关</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">#行锁阻塞情况</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span>innodb_lock_waits<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这篇文章就到这里结束了，建议大家在学习数据库的同时也要多刷题，这里推荐一款大厂刷题网站：<a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199&amp;fromPut=pc_csdncpt_banjiu_sql\">牛客网：sql必会40道真题</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}