{"blogid": "126698313", "writerAge": "码龄2年", "writerBlogNum": "50", "writerCollect": "10", "writerComment": "15", "writerFan": "89", "writerGrade": "3级", "writerIntegral": "578", "writerName": "Qinꦿ.๓", "writerProfileAdress": "writer_image\\profile_126698313.jpg", "writerRankTotal": "33010", "writerRankWeekly": "6713", "writerThumb": "40", "writerVisitNum": "4746", "blog_read_count": "97", "blog_time": "于 2022-09-05 10:01:23 发布", "blog_title": "Spring Boot概述", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>问题：</strong></p>\n<p>J2EE笨重的开发、繁多的配置、低下的开发效率、复杂的部署流程、第三方技术集成难度大。 </p>\n<p><strong>Spring Boot简介</strong></p>\n<p>简化Spring应用开发的一个框架；</p>\n<p>整个Spring技术栈的一个大整合；</p>\n<p>J2EE开发的一站式解决方案；</p>\n<p><strong>解决：</strong></p>\n<p>“Spring全家桶”时代。(整个Spring技术栈的一个大整合)</p>\n<p>Spring Boot   J2EE一站式解决方案</p>\n<p>Spring Cloud   分布式整体解决方案</p>\n<p><strong>优点：</strong></p>\n<p>– 快速创建独立运行的Spring项目以及与主流框架集成</p>\n<p>– 使用嵌入式的Servlet容器，应用无需打成WAR包</p>\n<p>– starters自动依赖与版本控制</p>\n<p>– 大量的自动配置，简化开发，也可修改默认值</p>\n<p>– 无需配置XML，无代码生成，开箱即用</p>\n<p>– 准生产环境的运行时应用监控</p>\n<p>– 与云计算的天然集成</p>\n<p><strong>缺点：</strong></p>\n<p>入门容易，精通难 </p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\9bbc23f7292147ba909a0b76fd8e8aba.png\"/></p>\n<h1><strong>搭建Spring Boot项目</strong> </h1>\n<p><span style=\"color:#fe2c24;\"><strong>准备环境</strong></span></p>\n<p>–jdk1.8：Spring Boot 推荐jdk1.7及以上； java version \"1.8.0_201\"</p>\n<p>–maven3.x：maven 3.3以上版本；Apache Maven 3.6.1</p>\n<p>–IntelliJIDEA2017：IntelliJ IDEA 2019 x64、STS</p>\n<p>–SpringBoot 2.3.4.RELEASE：2.3.4；(SNAPSHOT快照版还在开发中、RELEASE发布版稳定版本)</p>\n<p><span style=\"color:#fe2c24;\"><strong>1.新建Spring Boot项目</strong></span></p>\n<p><strong>使用IDEA创建项目模块</strong></p>\n<p style=\"text-align:center;\"><strong><img alt=\"\" src=\"image\\904edde7b0d74845b1e01ffe3df492e6.png\"/></strong></p>\n<p style=\"text-align:center;\"><strong>在Module窗口中，选择左侧菜单中的“Spring Initializr”，选择Module SDK为JDK1.8，再点击“Next”按钮</strong></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\b1798de47828491ebfdf69f08ae462a6.png\"/> </p>\n<p> 点击next时可能会出现的问题</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\54f08cccada7463faed9eb2a4ccc65d8.png\"/></p>\n<p> 解决方案：   <a href=\"https://blog.csdn.net/j080624/article/details/80975071\" title=\"Initialization failed for 'https://start.spring.io' Please check URL, network and proxy settings._流烟默的博客-CSDN博客\">Initialization failed for 'https://start.spring.io' Please check URL, network and proxy settings._流烟默的博客-CSDN博客</a></p>\n<p><span style=\"color:#4d4d4d;\"><strong>使用Maven进行项目构建，需要根据需求设置Maven坐标，设置项目的构建方式和打包方式，设置完成后单击“Next”按钮</strong></span> </p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\3b8d941127f54fa88a86e3e08f1a85e4.png\"/><span style=\"color:#4d4d4d;\"><strong>选择依赖的Spring Boot版本和组件。选择Spring Boot版本为2.1.5。除了选择版本之外，Spring Boot还提供了很多可供选择的组件，这里由于要搭建Web项目，选择与Web项目相关的组件。单击Next按钮</strong></span></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\0b1918d9612e4c01922b769fd946fd73.png\"/> </p>\n<p><span style=\"color:#4d4d4d;\"><strong>设置项目名称和项目的存储位置，但是“Finish”按钮，完成一个Spring Boot项目的构建操作</strong></span></p>\n<p style=\"text-align:center;\"><span style=\"color:#4d4d4d;\"><strong><img alt=\"\" src=\"image\\e5120fbd57e2456e883341d3be8acfd5.png\"/></strong></span> </p>\n<p><span style=\"color:#4d4d4d;\"><strong>创建完成的Spring Boot项目的结构如图所示：</strong></span></p>\n<p><span style=\"color:#4d4d4d;\"><strong><img alt=\"\" src=\"image\\cf85679758ec46ea8d537ecfad367696.png\"/></strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>2.编写java代码</strong></span></p>\n<p><span style=\"color:#4d4d4d;\"><strong>打开Spring Boot项目src/main/java目录，在此目录的包下创建controller包，并在该包中创建控制器类SayHelloController，如图：</strong></span></p>\n<p><img alt=\"\" src=\"image\\033f35d236554b28bfde92f9f9c8ee9e.png\"/> </p>\n<p><span style=\"color:#fe2c24;\"><strong>3.启动并测试</strong></span></p>\n<p><span style=\"color:#4d4d4d;\"><strong>现在可以启动项目进行测试了</strong></span></p>\n<p style=\"text-align:center;\"><span style=\"color:#4d4d4d;\"><strong><img alt=\"\" src=\"image\\9e67413aadc0437396a44419f536fd13.png\"/></strong></span></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\b147202e5d704618b91f3027c50ea323.png\"/> </p>\n<p><span style=\"color:#4d4d4d;\"><strong>项目启动完成后，打开浏览器，访问http://localhost:8080/sayHello</strong> </span>  </p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\7d6207db94ce4c04971c777b61f74c27.png\"/> </p>\n<h1><strong>Spring Boot项目的三个核心文件</strong></h1>\n<p>Spring Boot的三个核心文件（pom、启动类、application.properties）非常重要，这三个文件是Spring Boot能健康运行的关键</p>\n<p><span style=\"color:#fe2c24;\"><strong>1.pom文件</strong></span></p>\n<p style=\"text-align:center;\"><strong><img alt=\"\" src=\"image\\a904dd14157a475e8f3890c49e249d84.png\"/></strong></p>\n<blockquote>\n<blockquote>\n<table><tbody><tr><td style=\"vertical-align:middle;\"> <p><strong>注意：</strong></p> <p><strong>由于咱们在创建SpringBoot项目时，选择的是加入Web组件，所以pom文件&lt;dependencies&gt;中的第一个依赖是spring-boot-starter-web。在不选择添加任何组件的情况下，pom文件</strong><strong>&lt;dependencies&gt;中的第一个组件则会是spring-boot-starter。</strong></p> </td></tr></tbody></table>\n</blockquote>\n</blockquote>\n<p><span style=\"color:#fe2c24;\"> <strong>2.启动类</strong></span></p>\n<pre><code class=\"hljs\">/**\n\n * @SpringBootApplication 来标注一个主程序类，说明这是一个SpringBoot应用\n\n */\n\n@SpringBootApplication\n\npublic class Ch02Springboot1Application {\n\n    public static void main(String[] args) {\n\n        //Spring 应用启动起来\n\n        SpringApplication.run(Ch02Springboot1Application.class, args);\n\n    }\n\n}\n</code></pre>\n<p> <strong>@SpringBootApplication：</strong>SpringBoot应用标注在某个类上说明这个类是SpringBoot的主配置类，</p>\n<p>SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>\n<p>@SpringBootApplication注解是一个组合注解，它是由多个注解组合而成的注解；按住Ctrl键，单击@SpringBootApplication注解，可进入源码</p>\n<p> </p>\n<pre><code class=\"hljs\">\n@Target({ElementType.TYPE})  //java提供的注解\n\n@Retention(RetentionPolicy.RUNTIME)  //java提供的注解\n\n@Documented  //java提供的注解\n\n@Inherited  //java提供的注解\n\n@SpringBootConfiguration //SpringBoot提供的注解\n\n@EnableAutoConfiguration //SpringBoot提供的注解\n\n@ComponentScan( //Spring提供的注解\n\n    excludeFilters = {@Filter(\n\n    type = FilterType.CUSTOM,\n\n    classes = {TypeExcludeFilter.class}\n\n), @Filter(\n\n    type = FilterType.CUSTOM,\n\n    classes = {AutoConfigurationExcludeFilter.class}\n\n)}\n\n)\n\npublic @interface SpringBootApplication {\n\n\n</code></pre>\n<p> <strong>@SpringBootConfiguration：</strong>SpringBoot的配置类；标注在某个类上，表示这是一个SpringBoot的配置类。</p>\n<p>可替换Spring的applicationContext.xml配置文件，被注解的类内部可以包含有一个或多个被@Bean注解标注的方法，这些方法会被Spring的系统类扫描，并用于构建Bean定义，初始化Spring容器。</p>\n<p><strong>@EnableAutoConfiguration：</strong>开启自动配置功能；</p>\n<p>以前我们需要配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动配置功能；这样自动配置才能生效</p>\n<p><strong>@ComponentScan：</strong>扫描启动类同目录及子目录下的所有注解，使这些注解生效</p>\n<p><span style=\"color:#fe2c24;\"><strong>3.application.properties / application.yml</strong></span></p>\n<p>spring-boot-starter-parent中可以识别一些特定名称的文件，其中application.properties文件是SpringBoot项目的配置文件，关于SpringBoot项目的大部分配置信息可以在此文件中进行编写。需要注意，此文件必须在项目的resources资源路径的根路径下。</p>\n<h1> <strong>application.properties<strong>文</strong>件</strong></h1>\n<p>application.properties文件是SpringBoot项目能自定识别的文件，而且SpringBoot的大部分配置信息可以在此文件中编写。</p>\n<p><strong>SpringBoot项目默认启动的端口号是8080。如何修改？</strong></p>\n<p>就是在application.properties文件中添加配置。server.port=8082</p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\ecd375e7605e4d5c9588146bde50e28b.png\"/></p>\n<p style=\"text-align:center;\"> <strong>启动项目时，观察日志信息如图；可以发现现在的端口号已经变成8082了，说明端口号修改成功了。<img alt=\"\" src=\"image\\1c89531cbe47445487699e9f18a26472.png\"/></strong></p>\n<p><strong>除了修改端口号之外，还可以在application.properties文件中修改项目的访问路径和一些与日志相关的简单配置。</strong></p>\n<pre><code class=\"hljs\">\n# 端口号\n\nserver.port=8082\n\n# 配置项目的访问路径 http://localhost:8082/ch02/....\n\nserver.servlet.context-path=/ch02/\n\n# 配置日志的输出路径\n\n# 在电脑的D:\\logs路径下生成一个名为spring.log的日志文件。\n\n# spring.log是当没有指定日志文件名时，SpringBoot默认设定的一个名称\n\n# logging.file.path=D:/log\n\nlogging.file.path=D:\\\\logs\n\n# 绝对路径 手动指定日志的输出文件名 logging.file.name=D:\\\\logs\\\\日志文件名.log\n\n# logging.file.name=D:\\\\logs\\\\abc.log\n\n# 相对路径 只写文件名时，系统会以当前项目所在的盘符根路径作为起始目录，创建同名日志文件\n\nlogging.file.name=abc.log\n\n# 注意：logging.file.path和logging.file.name无法配合使用，\n\n# 当两者同时配置时，只有logging.file.name生效\n\n# 配置日志的输出格式 %d-%msg%n表示指定日志的输出格式为日期+日志内容+换行\n\nlogging.pattern.file=%d-%msg%n\n</code></pre>\n<h1><span style=\"color:#fe2c24;\"> </span></h1>\n<h1><span style=\"color:#fe2c24;\"><strong>application.yml<strong><strong>文</strong>件</strong></strong></span></h1>\n<p>在Spring Boot项目中，除了使用application.properties文件进行配置以外，还可以使用<strong>application.yml</strong>文件。</p>\n<p>application.yml属于YAML类型的文件，可以更直观地配置项目信息。如图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\a688add2374d456fa8f2f82fa6fbc888.png\"/></p>\n<p> YAML 是 \"YAML Ain't a Markup Language\"（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：\"Yet Another Markup Language\"（仍是一种标记语言）。</p>\n<p>以前的配置文件；大多都使用的是 xxxx.xml文件；</p>\n<p>YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>\n<p>YAML：配置例子</p>\n<blockquote>\n<pre>server: \nport: 8081</pre>\n</blockquote>\n<p> XML:</p>\n<blockquote>\n<pre>&lt;server&gt;\n &lt;port&gt;8081&lt;/port&gt; \n&lt;/server&gt;\n</pre>\n</blockquote>\n<p><strong>YAML语法</strong> </p>\n<p>– 使用缩进表示层级关系</p>\n<p>– 缩进时不允许使用Tab键，只允许使用空格。</p>\n<p>– 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</p>\n<p>– 大小写敏感</p>\n<p> </p>\n<pre><code class=\"hljs\">\nserver:\n\n  port: 8083\n\n  servlet:\n\n    context-path: /ch2/\n\nlogging:\n\n  file:\n\n    #path: D:\\\\logs #会在D:\\logs路径下生成一个名为spring.log的日志文件\n\n    #name: abc.log #系统会以当前项目所在的盘符根路径作为起始目录，创建同名日志文件\n\n    name: D:\\\\logs\\\\abc.log #绝对路径 D:\\logs路径下生成abc.log文件\n\n  pattern:\n\n      file: '%d-%msg%n' # yml格式配置日志输出格式识别不了%，应将值用单引号引起来\n\n      #file: '%d{yyyy-MM-dd hh:mm:ss} [%thread] %-5level %logger{50} - %msg%n'\n\n\n</code></pre>\n<p><strong>Spring Boot的Web项目的启动方式</strong></p>\n<p>Web项目一般需要部署到Web容器中运行，Spring Boot项目也不例外。但是上述的案例启动并没有进行部署，直接通过运行启动类就将项目启动了。原因是：Spring Boot项目自动完成了部署，部署到了Tomcat中。</p>\n<p></p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\c24c35e448644364b41f19b846f38a33.png\"/></p>\n<p> </p>\n<p>Spring Boot项目中会内置Web容器，默认的内置Web容器是Tomcat，当然也可以通过修改pom.xml文件来替换它的内置Web容器。</p>\n<p>Spring Boot支持3中内置容器：Tomcat、Jetty和Undertow。</p>\n<p><span style=\"color:#fe2c24;\"><strong>下面以Jetty为例，如何将默认的内置容器Tomcat修改为Jetty</strong></span></p>\n<p><span style=\"color:#4d4d4d;\"><strong>第一步：修改pom.xml文件，添加如下的配置，此配置的作用是禁用当前的Tomcat容器</strong></span></p>\n<pre><code class=\"hljs\">\n    &lt;!--此配置的作用是禁用当前的Tomcat容器--&gt;\n\n        &lt;dependency&gt;\n\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n\n            &lt;exclusions&gt;\n\n                &lt;exclusion&gt;\n\n                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\n                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;\n\n                &lt;/exclusion&gt;\n\n            &lt;/exclusions&gt;\n\n        &lt;/dependency&gt;\n\n\n</code></pre>\n<p> <span style=\"color:#4d4d4d;\"><strong>第二步：添加与Web容器Jetty相关的依赖</strong></span></p>\n<pre><code class=\"hljs\">  &lt;!--添加与Web容器Jetty相关的依赖--&gt;\n\n        &lt;dependency&gt;\n\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\n            &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;\n\n        &lt;/dependency&gt;\n</code></pre>\n<p> <span style=\"color:#4d4d4d;\"><strong>第三步：启动项目查看启动日志</strong></span></p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\b684d72de1e54b7484a373648e955b5f.png\"/></p>\n<p><span style=\"color:#fe2c24;\"> <strong><strong>如何将默认的内置容器Tomcat修改为Undertow</strong></strong></span></p>\n<p> </p>\n<pre><code class=\"hljs\">  &lt;!--此配置的作用是禁用当前的Tomcat容器--&gt;\n\n        &lt;dependency&gt;\n\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n\n            &lt;exclusions&gt;\n\n                &lt;exclusion&gt;\n\n                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\n                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;\n\n                &lt;/exclusion&gt;\n\n            &lt;/exclusions&gt;\n\n        &lt;/dependency&gt; \n\n        &lt;!--添加与Web容器Undertow相关的依赖--&gt;\n\n        &lt;dependency&gt;\n\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\n            &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;\n\n        &lt;/dependency&gt;\n</code></pre>\n<p><span style=\"color:#fe2c24;\"><strong>SpringBoot项目除了使用内置的Web容器启动外，还有其他多种启动方式：</strong> </span></p>\n<p><span style=\"color:#4d4d4d;\"><strong>第一种：在本地Web容器中启动</strong></span></p>\n<p><span style=\"color:#4d4d4d;\">通过Maven将项目打包成war文件，</span>将war文件拷贝至本地Web容器中部署运行</p>\n<p>1.首先打开pom文件，将原有的jar(默认为jar)修改为war</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\0370acb782784dc1a20710ce8841aa3f.png\"/> </p>\n<p style=\"text-align:center;\">2.然后将启动类继承SpringBootServletInitializer，重写configure方法</p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\772cb2185d0a44a0ab3677d0163d3e11.png\"/></p>\n<p> 3.然后去运行【package】进行打包</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1509cb119ab34718828e05b7b2ff1893.png\"/></p>\n<p> 4.然后把target目录下的war包放到tomcat的webapps目录下，启动tomcat，即可自动解压部署。最后在浏览器中输入http://localhost:[端口号]/[打包项目名]/</p>\n<p><span style=\"color:#4d4d4d;\"><strong>第二种：使用Maven启动项目</strong></span></p>\n<p><span style=\"color:#4d4d4d;\">进入项目根路径，</span>执行 mvn spring-boot:run 命令</p>\n<p><span style=\"color:#a2e043;\">使用命令行的形式/DOS窗口</span></p>\n<p style=\"text-align:center;\"><span style=\"color:#a2e043;\"><img alt=\"\" src=\"image\\48633f4daea041449147b984c8def6ac.png\"/></span></p>\n<p> <span style=\"color:#4d4d4d;\">使用IEDA的Terminal</span></p>\n<p style=\"text-align:center;\"><span style=\"color:#4d4d4d;\"><img alt=\"\" src=\"image\\e328ef9cfe8247e7b773c835e8535292.png\"/></span></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\dc3fab860e5d4dd7a7c15655ba581730.png\"/> </p>\n<p> <span style=\"color:#4d4d4d;\"><strong>第三种：使用Java命令启动项目</strong></span></p>\n<p><span style=\"color:#4d4d4d;\">通过Maven将项目打包成jar文件，</span>进入jar文件所在目录，使用 java -jar 命令运行jar文件</p>\n<p>java -jar 生成jar的文件名.jar</p>\n<p><span style=\"color:#a2e043;\">使用命令行的形式/DOS窗口</span></p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\42e76ed116c347b396e3ff2b9baa7dcd.png\"/></p>\n<p><span style=\"color:#a2e043;\"> 使用IEDA的Terminal</span></p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\d83d7a2d56274c2386462d95eba8f7f7.png\"/></p>\n<h1><strong>Maven的多模块<strong>项目</strong></strong> </h1>\n<p> </p>\n<p><strong>问题：</strong>复杂、庞大的企业级项目，开发和部署过程存在多种问题</p>\n<p>结构不够清晰，开发人员不易定位自己负责的模块</p>\n<p>项目庞大导致启动费时</p>\n<p>部署时无法按模块需要分配资源，造成资源的浪费</p>\n<p><strong>解决方案：</strong>Maven提出多模块项目的方案</p>\n<p>将一个大项目拆分成多个小的模块项目</p>\n<p>拆分后的模块项目任务明确，耦合度低，方便管理和维护</p>\n<p><strong>演示案例</strong></p>\n<p><strong>第一步：创建Maven父模块</strong></p>\n<p>1.左侧面板选择maven（不要选择Create from archetype选项），如下图，点击Next即可</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\d9d6be21555443398685702b629a79e2.png\"/>2.依次补全如下信息，点击Next</p>\n<p><img alt=\"\" src=\"image\\0d77c5bdff9e47d69f268a41254cf398.png\"/></p>\n<p>3.输入项目名字。如ch02_parent，我们主要是在这个项目下创建我们的子模块</p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\4c0fed4ba568473abc3c645b1585a2d4.png\"/></p>\n<p> 4.这样我们就创建好了一个普通项目，因为该项目是作为一个Parent project存在的，不需要编写任何代码,可以直接删除src文件夹</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\c44c7f0e615c4f74be6979f0132bd992.png\"/></p>\n<p> <strong>第二步：创建子模块，通常按职责划分子模块</strong></p>\n<p>beans：存放实体类</p>\n<p>common：存放工具类、枚举类等项目中的核心类</p>\n<p>dao：存放数据访问层代码</p>\n<p>service：存放业务层代码</p>\n<p>controller：存放控制器层代码</p>\n<p>1.在父模块上右键如下图操作，创建一个模块，该模块即为子模块</p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\e2aed52d2624421fb3c369a0a20f7280.png\"/></p>\n<p> 2.同样不选择Create from archetype选项，因为是普通模块，Next</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\8e053b5e24144a979a57776acd9dcaf2.png\"/></p>\n<p> 3.groupId和version继承自Parent project，这里只用ArtifactId，Next</p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\b06d0532667b4f548492b17660168bc3.png\"/></p>\n<p> 4.填写模块名称</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\2c457d616a5c493ab8cdc9755912665d.png\"/></p>\n<p> 5.创建完成后结构如下图</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\21a0e80fa10741a1a3fb25fcfd979263.png\"/></p>\n<p> 6.按照同样的方式创建，依次创建common、dao、service模块项目</p>\n<p>7.创建controller模块的方式有所区别</p>\n<p>      7.1-使用maven-archetype-webapp创建一个Web项目</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1b77541f8536498d9862ed77775c5174.png\"/></p>\n<p>      7.2-groupId和version继承自Parent project，这里只用ArtifactId，Next</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\7064343b25544f768afabfc4fda29c93.png\"/></p>\n<p>       7.3-设置maven项目的属性</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\84ee9919069c4e6f84173d398e13725f.png\"/></p>\n<p>     7.4-填写模块名称</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\a4de01473fec43e68d2f2adedd9086f6.png\"/></p>\n<p><strong>第三步：配置模块之间的依赖</strong></p>\n<p>Maven的依赖有两个特点：<strong>继承和传递</strong></p>\n<p><strong>继承</strong>：即当B项目依赖A项目时，B项目可继承A项目引入的全部依赖。除了这种情形外，在多模块项目中，子模块和父模块之间也存在继承关系，这类似于java中的继承关系，即子模块会继承父项目中的全部依赖。</p>\n<p><strong>传递</strong>：即当B项目依赖A项目，C项目依赖B项目时，C项目除了可以继承B项目引入的依赖之外，还会继承A项目引入的依赖。</p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\8f02aad6a4e340f9b0f31031247d4fed.png\"/></p>\n<p> 在多模块项目中，子模块继承父项目，所以可以在父项目中统一管理通用的依赖，比如Log4j、Junit这种每个项目都会用到的依赖。又由于Maven的依赖是传递的，所以子模块之间可以直接线性依赖，即controller依赖service，service依赖dao，dao依赖common，common依赖beans，这样controller中需要调用beans中的实体类时，也可以顺利调用。模块依赖关系如图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\c0eefd2ddbb94af3af41045450b44f34.png\"/></p>\n<p><span style=\"color:#fe2c24;\"> <strong>问题：</strong></span></p>\n<p>对于只是部分子模块会用到的依赖，不会放到父项目中</p>\n<p>而由子模块分别引入某个依赖，可能产生版本不一致的问题</p>\n<p><span style=\"color:#fe2c24;\"><strong>解决方案：</strong></span></p>\n<p>在父项目的pom文件中使用<strong>&lt;dependencyManagement&gt;</strong>标签管理依赖的版本号</p>\n<p> </p>\n<pre><code class=\"hljs\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    &lt;dependencyManagement&gt;\n\n        &lt;dependencies&gt;\n\n            &lt;dependency&gt;\n\n                &lt;groupId&gt;commons-logging&lt;/groupId&gt;\n\n                &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n\n                &lt;version&gt;1.1.1&lt;/version&gt;\n\n            &lt;/dependency&gt;\n\n        &lt;/dependencies&gt;\n\n    &lt;/dependencyManagement&gt;\n</code></pre>\n<p> </p>\n<p> 在父项目中添加了上面的示例代码后。</p>\n<p>子模块中引入commons-logging依赖不需要指定版本号，版本号都是1.1.1。</p>\n<p>子模块不需要commons-logging依赖的，则不会引入commons-logging依赖。这样就避免了版本冲突的问题。</p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\6490c484034d4db3aa4ddef5d7fc8dc1.png\"/></p>\n<p> </p>\n<p><span style=\"color:#fe2c24;\"><strong>此时，如果对父项目进行Maven的操作，子模块也会进行同样的操作。即当对父项目打包时，所有的子项目都会打包。这种通过父项</strong><strong>目来操作子项目进行Maven操作的情形，就叫聚合。</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>注意：使用聚合时，父项目的pom文件中packaging都是pom。</strong></span></p>\n<p><strong>使用Spring Initializr创建的Spring Boot项目也是Maven项目；可以使用Spring Initializr创建多模块项目，此时的每个模块都是Spring Boot项目\\</strong></p>\n<p style=\"text-align:center;\"><strong><img alt=\"\" src=\"image\\271c51f65f9947e89b4eabe894326dbd.png\"/></strong></p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:center;\"></p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p style=\"text-align:center;\"></p>\n<p> </p>\n<p> </p>\n<p style=\"text-align:center;\"> </p>\n<p> </p>\n<p style=\"text-align:center;\"> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p style=\"text-align:center;\"></p>\n<p> </p>\n<p> </p>\n</div>\n</div>"}