{"blogid": "123361432", "writerAge": "码龄4年", "writerBlogNum": "137", "writerCollect": "1779", "writerComment": "296", "writerFan": "173", "writerGrade": "5级", "writerIntegral": "3091", "writerName": "地球被支点撬走啦", "writerProfileAdress": "writer_image\\profile_123361432.jpg", "writerRankTotal": "6419", "writerRankWeekly": "24580", "writerThumb": "617", "writerVisitNum": "322827", "blog_read_count": "4150", "blog_time": "已于 2022-06-06 10:36:01 修改", "blog_title": "C++ 字符串（string）常用操作总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"0%E3%80%81%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%B1%87%E6%80%BB-toc\" style=\"margin-left:40px;\"><a href=\"#0%E3%80%81%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%B1%87%E6%80%BB\">0、常用功能汇总</a></p>\n<p id=\"1%E3%80%81%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2\">1、定义一个字符串</a></p>\n<p id=\"2%E3%80%81%E8%AF%BB%E5%86%99%20string%20%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E8%AF%BB%E5%86%99%20string%20%E6%93%8D%E4%BD%9C\">2、读写 string 操作</a></p>\n<p id=\"3%E3%80%81%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BF%A1%E6%81%AF%E3%80%81%E7%B4%A2%E5%BC%95-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BF%A1%E6%81%AF%E3%80%81%E7%B4%A2%E5%BC%95\">3、查询字符串信息、索引</a></p>\n<p id=\"4%E3%80%81%E6%8B%BC%E6%8E%A5%E3%80%81%E6%AF%94%E8%BE%83%E7%AD%89%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E6%8B%BC%E6%8E%A5%E3%80%81%E6%AF%94%E8%BE%83%E7%AD%89%E6%93%8D%E4%BD%9C\">4、拼接、比较等操作</a></p>\n<p id=\"5%E3%80%81cctype%20%E5%A4%B4%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81cctype%20%E5%A4%B4%E6%96%87%E4%BB%B6\">5、cctype 头文件(判断字符类型：大/小写字母、标点、数字等)</a></p>\n<p id=\"6%E3%80%81for%20%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81for%20%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86\">6、for 循环遍历</a></p>\n<p id=\"7%E3%80%81%E4%BF%AE%E6%94%B9%20string%20%E7%9A%84%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#7%E3%80%81%E4%BF%AE%E6%94%B9%20string%20%E7%9A%84%E6%93%8D%E4%BD%9C\">7、修改 string 的操作</a></p>\n<p id=\"8%E3%80%81string%20%E6%90%9C%E7%B4%A2%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#8%E3%80%81string%20%E6%90%9C%E7%B4%A2%E6%93%8D%E4%BD%9C\">8、string 搜索操作</a></p>\n<p id=\"9%E3%80%81%E6%95%B0%E5%80%BC%E8%BD%AC%E6%8D%A2-toc\" style=\"margin-left:40px;\"><a href=\"#9%E3%80%81%E6%95%B0%E5%80%BC%E8%BD%AC%E6%8D%A2\">9、string、char 型与数值的转换</a></p>\n<p id=\"10%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#10%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC%C2%A0\">10、字符串反转 </a></p>\n<p id=\"11%E3%80%81%E6%8F%90%E5%8F%96%E5%AD%97%E4%B8%B2-toc\" style=\"margin-left:40px;\"><a href=\"#11%E3%80%81%E6%8F%90%E5%8F%96%E5%AD%97%E4%B8%B2\">11、提取字串</a></p>\n<hr id=\"hr-toc\"/>\n<p>由<strong>单引号</strong>括起来的<strong>一个字符</strong>被称作 <strong>char 型字面值</strong>，<strong>双引号</strong>括起来的<strong>零个或多个字符</strong>则构成<strong>字符串型字面值</strong>。字符串字面值的类型实际上就是由常量字符构成的<strong>数组</strong>，，编译器在每一个字符串后面添加一个空字符（'\\0'），因此字符串的实际长度要比他的内容多1。</p>\n<p>如字面值 <strong>'A'</strong> 表示的就是单独字符 A ，而字符串 <strong>\"A\"</strong> 代表了一个包含两个字符的字符数组，分别是字母 A 和空字符。</p>\n<h2 id=\"0%E3%80%81%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%B1%87%E6%80%BB\">0、常用功能汇总</h2>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td style=\"width:231px;\">s.<strong>insert</strong>(pos, args)  </td><td style=\"width:267px;\">在 pos 之前插入 args 指定的字符</td></tr><tr><td style=\"width:231px;\">s.<strong>erase</strong>(pos, len)  </td><td style=\"width:267px;\">删除从 pos 开始的 len 个字符。如果 len 省略，则删除 pos 开始的后面所有字符。返回一个指向 s 的引用。</td></tr><tr><td style=\"width:231px;\">s.<strong>assign</strong>(args)  </td><td style=\"width:267px;\">将 s 中的字符替换为 args 指定的字符。返回一个指向 s 的引用。</td></tr><tr><td style=\"width:231px;\">s.<strong>append</strong>(args)  </td><td style=\"width:267px;\">将 args 追加到 s 。返回一个指向 s 的引用。args 必须是双引号字符串</td></tr><tr><td style=\"width:231px;\">s.<strong>replace</strong>(range, args) </td><td style=\"width:267px;\">将 s 中范围为 range 内的字符替换为 args 指定的字符</td></tr><tr><td style=\"width:231px;\">s.<strong>find</strong>(args) </td><td style=\"width:267px;\">查找 s 中 args 第一次出现的位置</td></tr><tr><td style=\"width:231px;\">s.<strong>rfind</strong>(args) </td><td style=\"width:267px;\">查找 s 中 args 最后一次出现的位置</td></tr><tr><td style=\"width:231px;\"><strong>to_string</strong>(val)</td><td style=\"width:267px;\">将数值 val 转换为 string 并返回。val 可以是任何算术类型（int、浮点型等）</td></tr><tr><td style=\"width:231px;\"><strong>stoi</strong>(s) / <strong>atoi</strong>(c)</td><td style=\"width:267px;\">字符串/字符 转换为整数并返回</td></tr><tr><td style=\"width:231px;\"><strong>stof</strong>(s) / <strong>atof</strong>(s)</td><td style=\"width:267px;\">字符串/字符 转换为浮点数并返回</td></tr><tr><td style=\"width:231px;\">s.<strong>substr</strong>(pos, n)</td><td style=\"width:267px;\">从索引 pos 开始，提取连续的 n 个字符，包括 pos 位置的字符</td></tr><tr><td style=\"width:231px;\"><strong>reverse</strong>(s2.begin(), s2.end())</td><td style=\"width:267px;\">反转 string 定义的字符串 s2 （加头文件 <strong>&lt;algorithm&gt;</strong> ）</td></tr></tbody></table>\n<h2 id=\"1%E3%80%81%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2\">1、定义一个字符串</h2>\n<p>使用标准库类型 string 声明并初始化一个字符串，需要包含头文件 <strong>string</strong>。可以初始化的方式如下：</p>\n<pre><code class=\"language-cpp\">    string s1;    // 初始化一个空字符串\n    string s2 = s1;   // 初始化s2，并用s1初始化\n    string s3(s2);    // 作用同上\n    string s4 = \"hello world\";   // 用 \"hello world\" 初始化 s4，除了最后的空字符外其他都拷贝到s4中\n    string s5(\"hello world\");    // 作用同上\n    string s6(6,'a');  // 初始化s6为：aaaaaa\n    string s7(s6, 3);  // s7 是从 s6 的下标 3 开始的字符拷贝\n    string s8(s6, pos, len);  // s7 是从 s6 的下标 pos 开始的 len 个字符的拷贝</code></pre>\n<p>使用 = 的是拷贝初始化，使用 () 的是直接初始化。当初始值只有一个时，两者都可。当初始值有多个时一般来说要使用直接初始化，如上述最后一个的形式。</p>\n<h2 id=\"2%E3%80%81%E8%AF%BB%E5%86%99%20string%20%E6%93%8D%E4%BD%9C\">2、读写 string 操作</h2>\n<p>输入时遇到空格或回车键将停止。但需要注意的是只有按下回车键时才会结束输入执行，当按下空格后还能继续输入，但最终存到字符串中的只是第一个空格之前输入的字符串（开头的空白除外，程序会自动忽略开头的空白的），空格操作可以用来同时对多个字符串进行初始化，如下例</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main(void)\n{\n    string s1, s2, s3;    // 初始化一个空字符串\n    // 单字符串输入，读入字符串，遇到空格或回车停止\n    cin &gt;&gt; s1;  \n    // 多字符串的输入，遇到空格代表当前字符串赋值完成，转到下个字符串赋值，回车停止\n    cin &gt;&gt; s2 &gt;&gt; s3;  \n    // 输出字符串 \n    cout &lt;&lt; s1 &lt;&lt; endl; \n    cout &lt;&lt; s2 &lt;&lt; endl;\n    cout &lt;&lt; s3 &lt;&lt; endl;   \n    return 0;\n}\n// 运行结果 //\n  abc def hig\nabc\ndef\nhig</code></pre>\n<p>如果希望在最终读入的字符串中保留空格，可以使用 <strong>getline </strong>函数，例子如下：</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main(void)\n{\n    string s1 ;    // 初始化一个空字符串\n    getline(cin , s1); \n    cout &lt;&lt; s1 &lt;&lt; endl;  // 输出\n    return 0;\n}\n// 结果输出 //\nabc def hi\nabc def hi</code></pre>\n<h2 id=\"3%E3%80%81%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BF%A1%E6%81%AF%E3%80%81%E7%B4%A2%E5%BC%95\">3、查询字符串信息、索引</h2>\n<p>可以用 empty size/length 查询字符串状态及长度，可以用下标操作提取字符串中的字符。 </p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main(void)\n{\n    string s1 = \"abc\";    // 初始化一个字符串\n    cout &lt;&lt; s1.empty() &lt;&lt; endl;  // s 为空返回 true，否则返回 false\n    cout &lt;&lt; s1.size() &lt;&lt; endl;   // 返回 s 中字符个数，不包含空字符\n    cout &lt;&lt; s1.length() &lt;&lt; endl;   // 作用同上\n    cout &lt;&lt; s1[1] &lt;&lt; endl;  // 字符串本质是字符数组\n    cout &lt;&lt; s1[3] &lt;&lt; endl;  // 空字符还是存在的\n    return 0;\n}\n// 运行结果 //\n0\n3\n3\nb\n</code></pre>\n<h2 id=\"4%E3%80%81%E6%8B%BC%E6%8E%A5%E3%80%81%E6%AF%94%E8%BE%83%E7%AD%89%E6%93%8D%E4%BD%9C\">4、拼接、比较等操作</h2>\n<pre><code class=\"language-cpp\">s1+s2          // 返回 s1 和 s2 拼接后的结果。加号两边至少有一个 string 对象，不能都是字面值\ns1 == s2       // 如果 s1 和 s2 中的元素完全相等则它们相等，区分大小写\ns1 != s2\n&lt;, &lt;=, &gt;, &gt;=   // 利用字符的字典序进行比较，区分大小写</code></pre>\n<h2 id=\"5%E3%80%81cctype%20%E5%A4%B4%E6%96%87%E4%BB%B6\">5、cctype 头文件(判断字符类型：大/小写字母、标点、数字等)</h2>\n<p>cctype 头文件中含有对 string 中字符操作的库函数，如下：</p>\n<pre><code class=\"language-cpp\">isalnum(c)  // 当是字母或数字时为真\nisalpha(c)  // 当是字母时为真\nisdigit(c)  // 当是数字是为真\nislower(c)  // 当是小写字母时为真\nisupper(c)  // 当是大写字母时为真\nisspace(c)  // 当是空白（空格、回车、换行、制表符等）时为真\nisxdigit(c) // 当是16进制数字是为真\nispunct(c)  // 当是标点符号时为真（即c不是 控制字符、数字、字母、可打印空白 中的一种）\nisprint(c)  // 当时可打印字符时为真（即c是空格或具有可见形式）\nisgraph(c)  // 当不是空格但可打印时为真\niscntrl(c)  // 当是控制字符时为真\ntolower(c)  // 若c是大写字母，转换为小写输出，否则原样输出\ntoupper(c)  // 类似上面的\n</code></pre>\n<h2 id=\"6%E3%80%81for%20%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86\">6、for 循环遍历</h2>\n<p>可以使用 c++11 标准的 <strong>for(declaration: expression)</strong> 形式循环遍历，例子如下：</p>\n<p>（<span style=\"color:#fe2c24;\"><strong>如果想要改变 string 对象中的值，必须把循环变量定义为引用类型</strong></span>）</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;cctype&gt;\nusing namespace std;\nint main(void)\n{\n    string s1 = \"nice to meet you~\";    // 初始化一个空字符串\n    // 如果想要改变 string 对象中的值，必须把循环变量定义为引用类型。引用只是个别名，相当于对原始数据进行操作\n    for(auto &amp;c : s1)  \n        c = toupper(c); \n    cout &lt;&lt; s1 &lt;&lt; endl; // 输出\n    return 0;\n}\n// 运行结果 //\nNICE TO MEET YOU~</code></pre>\n<h2 id=\"7%E3%80%81%E4%BF%AE%E6%94%B9%20string%20%E7%9A%84%E6%93%8D%E4%BD%9C\">7、修改 string 的操作</h2>\n<p>在 pos 之前插入 args 指定的字符。pos是一个下标或者迭代器。接受下标的版本返回一个指向 s 的引用；接受迭代器的版本返回一个指向第一个插入字符的迭代器 </p>\n<pre><code class=\"language-cpp\">s.insert(pos, args)  \n// 在 s 的位置 0 之前插入 s2 的拷贝\ns.insert(0, s2)  </code></pre>\n<p>删除从 pos 开始的 len 个字符。如果 len 省略，则删除 pos 开始的后面所有字符。返回一个指向 s 的引用。</p>\n<pre><code class=\"language-cpp\">s.erase(pos, len)  </code></pre>\n<p>将 s 中的字符替换为 args 指定的字符。返回一个指向 s 的引用。</p>\n<pre><code class=\"language-cpp\">s.assign(args)  </code></pre>\n<p>将 args 追加到 s 。返回一个指向 s 的引用。args 不能是单引号字符，若是单个字符则必须用双引号表示。如，可以是 s.append(<span style=\"color:#fe2c24;\"><strong>\"</strong></span>A<span style=\"color:#fe2c24;\"><strong>\"</strong></span>) 但不能是 s.append(<span style=\"color:#fe2c24;\"><strong>'</strong></span>A<span style=\"color:#fe2c24;\"><strong>'</strong></span>)    </p>\n<pre><code class=\"language-cpp\">s.append(args)  </code></pre>\n<p>将 s 中范围为 range 内的字符替换为 args 指定的字符。range 或者是一个下标或长度，或者是一对指向 s 的迭代器。返回一个指向 s 的引用。</p>\n<pre><code class=\"language-cpp\">s.replace(range, args) \n// 从位置 3 开始，删除 6 个字符，并插入 \"aaa\".删除插入的字符数量不必相等\ns.replace(3, 6, \"aaa\")  </code></pre>\n<h2 id=\"8%E3%80%81string%20%E6%90%9C%E7%B4%A2%E6%93%8D%E4%BD%9C\">8、string 搜索操作</h2>\n<p>搜索操作返回指定字符出现的下标，如果未找到返回 npos </p>\n<pre><code class=\"language-cpp\">s.find(args)  // 查找 s 中 args 第一次出现的位置\ns.rfind(args)  // 查找 s 中 args 最后一次出现的位置\n</code></pre>\n<p>在 s 中查找 args 中任何一个字符 最早/最晚 出现的位置</p>\n<pre><code class=\"language-cpp\">s.find_first_of(args)  // 在 s 中查找 args 中任何一个字符最早出现的位置\ns.find_last_of(args)  // 在 s 中查找 args 中任何一个字符最晚出现的位置\n例如：\nstring s1 = \"nice to meet you~\"; \ncout &lt;&lt; s1.find_first_of(\"mey\") &lt;&lt; endl; // 输出结果为 3，'e' 出现的最早\n\n</code></pre>\n<p>在 s 中查找 第一个/最后一个 不在 args 中的字符的位置</p>\n<pre><code class=\"language-cpp\">s.find_first_not_of(args)  // 查找 s 中 第一个不在 args 中的字符的位置\ns.find_last_not_of(args)  // 查找 s 中 最后一个不在 args 中的字符的位置\n例如：\nstring s1 = \"nice to meet you~\";  \ncout &lt;&lt; s1.find_first_not_of(\"nop\") &lt;&lt; endl; // 输出结果为 1 ，'i' 不在 \"nop\" 里</code></pre>\n<h2 id=\"9%E3%80%81%E6%95%B0%E5%80%BC%E8%BD%AC%E6%8D%A2\">9、string、char 型与数值的转换</h2>\n<p><strong>1、</strong>将数值 val 转换为 string 。val 可以是任何算术类型（int、浮点型等）。</p>\n<pre><code class=\"language-cpp\">string s = to_string(val)</code></pre>\n<p><strong>2、转换为整数并返回</strong>。返回类型分别是 int、long、unsigned long、long long、unsigned long long。<strong>b</strong> 表示转换所用的进制数，默认为10，即将字符串当作几进制的数转换，最终结果仍然是十进制的表示形式 。<strong>p</strong> 是 size_t  指针，用来保存 s 中第一个非数值字符的下标，默认为0，即函数不保存下标，该参数也可以是空指针，在这种情况下不使用。</p>\n<pre><code class=\"language-cpp\">stoi(s)\n// 函数原型 int stoi (const string&amp;  str, size_t* idx = 0, int base = 10);\nstoi(s, p, b)\nstol(s, p, b)\nstoul(s, p, b)\nstoll(s, p, b)\nstoull(s, p, b)\n// 例如\nstring s1 = \"11\";    // 初始化一个空字符串\nint a1 = stoi(s1);\ncout &lt;&lt; a1 &lt;&lt; endl; // 输出 11\nint a2 = stoi(s1, nullptr, 8);\ncout &lt;&lt; a2 &lt;&lt; endl; // 输出 9\nint a3 = stoi(s1, nullptr, 2);\ncout &lt;&lt; a3 &lt;&lt; endl; // 输出 3</code></pre>\n<p><strong>3、转换为浮点数并返回。</strong>返回类型分别是 float、double、long double 。<strong>p</strong> 是 size_t  指针，用来保存 s 中第一个非数值字符的下标，默认为0，即函数不保存下标，该参数也可以是空指针，在这种情况下不使用。</p>\n<pre><code class=\"language-cpp\">stof(s)\nstof(s, p)\nstod(s, p)\nstold(s, p)</code></pre>\n<p><strong>4、char 型转数值。</strong>注意传入的参数是指针类型，即要对字符取地址</p>\n<pre><code class=\"language-cpp\">atoi(c)\n// 函数原型 int atoi(const char *_Str)\natol(c)\natoll(c)\natof(c)</code></pre>\n<h2 id=\"10%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC%C2%A0\">10、字符串反转 </h2>\n<p>使用 &lt;algorithm&gt; 头文件中的 reverse() 方法：</p>\n<pre><code class=\"language-cpp\">    string s2 = \"12345\";    // 初始化一个字符串\n    reverse(s2.begin(), s2.end()); // 反转 string 定义的字符串 s2 \n    cout &lt;&lt; s2 &lt;&lt; endl; // 输出 54321</code></pre>\n<h2 id=\"11%E3%80%81%E6%8F%90%E5%8F%96%E5%AD%97%E4%B8%B2\">11、提取字串</h2>\n<p> 使用  <strong>string ss = s.substr(pos, n) </strong>。从索引 pos 开始，提取连续的 n 个字符，包括 pos 位置的字符。函数原型：</p>\n<pre><code class=\"language-cpp\">inline std::__cxx11::string std::__cxx11::string::substr(std::size_t __pos, std::size_t __n) const\n</code></pre>\n<p></p>\n</div>\n</div>"}