{"blogid": "126322038", "writerAge": "码龄100天", "writerBlogNum": "124", "writerCollect": "1175", "writerComment": "1770", "writerFan": "1158", "writerGrade": "6级", "writerIntegral": "5052", "writerName": "林有酒", "writerProfileAdress": "writer_image\\profile_126322038.jpg", "writerRankTotal": "3492", "writerRankWeekly": "55", "writerThumb": "1202", "writerVisitNum": "21340", "blog_read_count": "311", "blog_time": "于 2022-08-16 09:00:00 发布", "blog_title": "【TypeScript】中定义变量方式 | 数据类型详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#TypeScript_1\">TypeScript定义变量</a></li><li><ul><li><a href=\"#_3\">变量声明格式</a></li><li><a href=\"#_45\">变量类型推导</a></li></ul>\n</li><li><a href=\"#JSTS_61\">JS和TS的数据类型</a></li><li><ul><li><a href=\"#TSJS_72\">TS中使用JS的数据类型</a></li><li><ul><li><a href=\"#number_76\">🍤number类型</a></li><li><a href=\"#boolean_100\">🍤boolean类型</a></li><li><a href=\"#string_113\">🍤string类型</a></li><li><a href=\"#Array_135\">🍤Array类型</a></li><li><a href=\"#Object_158\">🍤Object类型</a></li><li><a href=\"#Symbol_185\">🍤Symbol类型</a></li><li><a href=\"#nullundefined_221\">🍤null和undefined类型</a></li></ul>\n</li><li><a href=\"#TS_234\">TS自身特有的数据类型</a></li><li><ul><li><a href=\"#any_236\">🍺any类型</a></li><li><a href=\"#unknown_265\">🍺unknown类型</a></li><li><a href=\"#void_332\">🍺void类型</a></li><li><a href=\"#never_354\">🍺never类型</a></li><li><a href=\"#tuple_372\">🍺tuple类型</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"TypeScript_1\"></a>TypeScript定义变量</h2>\n<h3><a id=\"_3\"></a>变量声明格式</h3>\n<p>我在前面强调过，在TypeScript中定义变量需要指定 <strong>标识符</strong> 的类型。</p>\n<p><strong>所以完整的声明格式如下</strong>：</p>\n<blockquote>\n<p>声明了类型后TypeScript就会进行<font color=\"red\">类型检测</font>，声明的类型可以称之为<font color=\"red\">类型注解</font>；</p>\n<p><code>var/let/const 标识符: 数据类型 = 赋值;</code></p>\n</blockquote>\n<p><strong>比如我们声明一个message，完整的写法如下</strong>：</p>\n<blockquote>\n<p>注意：这里的string的首字母是小写的，和String是有区别的</p>\n<p>string是TypeScript中定义的字符串类型， String是JavaScript的字符串包装类的类型</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>如果我们给message赋值其他类型的值，那么就会报错</strong>：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3c587dcbd49942d898c15958729b6fbf.png\"/></p>\n<p><strong>在TypeScript定义变量（标识符）和ES6之后一致，可以使用var、 let、 const来定义</strong>。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"chenyq\"</span>\n<span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token keyword\">const</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.88</span>\n</code></pre>\n<p><strong>当然，在tslint中并不推荐使用var来声明变量</strong>：</p>\n<blockquote>\n<p>可见，在TypeScript中并不建议再使用var关键字了，主要原因和ES6升级后let和var的区别是一样的， var是没 有块级作用域的，会引起很多的问题，这里不再展开探讨。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\efa26b7df5c8464f8e5067720189e0b0.png\"/></p>\n<hr/>\n<h3><a id=\"_45\"></a>变量类型推导</h3>\n<p><strong>在开发中，有时候为了方便起见我们并不会在声明每一个变量时都写上对应的数据类型，我们更希望可以通过TypeScript本身的特性帮助我们<font color=\"red\">推断出对应的变量类型</font>：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5423749571d8401eaabccd8eb0310182.png\"/></p>\n<p><strong>如果我们给age赋值其他的类型</strong>：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\64729e4eb8b242aeb051e1310c64d235.png\"/></p>\n<p><strong>这是因为在一个变量第一次赋值时，会将后面的赋值内容的类型，来作为前面标识符的类型, 这个过程称之为类型推导, 或者说类型推断</strong>：</p>\n<blockquote>\n<p>上面的age就是因为后面赋值的是一个number类型，所以age虽然没有明确的说明是number类型，但是依然是一个number类型；</p>\n</blockquote>\n<h2><a id=\"JSTS_61\"></a>JS和TS的数据类型</h2>\n<p><strong>我们经常说TypeScript是JavaScript的一个超集</strong>：</p>\n<blockquote>\n<p>下面这幅图很好的表示出JavaScript、ECMAScript、TypeScript的关系</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\002923a8f3d842f1a20a618b725397e6.png\"/></p>\n<blockquote>\n<p>可以看出TypeScript是包含JavaScript的数据类型的</p>\n</blockquote>\n<h3><a id=\"TSJS_72\"></a>TS中使用JS的数据类型</h3>\n<hr/>\n<h4><a id=\"number_76\"></a>🍤number类型</h4>\n<p><strong>数字类型是我们开发中经常使用的类型， TypeScript和JavaScript一样，不区分整数类型（ int）和浮点型 （ double），统一为number类型</strong>。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\nnum <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</code></pre>\n<p><strong>如果你学习过ES6应该知道， ES6新增了二进制和八进制的表示方法，而TypeScript也是支持二进制、八进制、十 六进制的表示</strong>：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\nnum <span class=\"token operator\">=</span> <span class=\"token number\">50</span> <span class=\"token comment\">// 十进制</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">0b110</span> <span class=\"token comment\">// 二进制</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">0o555</span> <span class=\"token comment\">// 八进制</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">0xf23</span> <span class=\"token comment\">// 十六进制</span>\n</code></pre>\n<hr/>\n<h4><a id=\"boolean_100\"></a>🍤boolean类型</h4>\n<p><strong>boolean类型只有两个取值： true和false，非常简单</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> flag<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\nflag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\nflag <span class=\"token operator\">=</span> <span class=\"token number\">30</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span>\n</code></pre>\n<hr/>\n<h4><a id=\"string_113\"></a>🍤string类型</h4>\n<p><strong>string类型是字符串类型，在TS中和JS一样可以使用单引号或者双引号表示</strong>：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello TS\"</span>\n\nmessage <span class=\"token operator\">=</span> <span class=\"token string\">'你好 TS'</span>\n</code></pre>\n<p><strong>同时也支持ES6的模板字符串来拼接变量和字符串</strong>：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"chenyq\"</span>\n<span class=\"token keyword\">const</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token keyword\">const</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.88</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我叫</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 年龄</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 身高</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>height<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<h4><a id=\"Array_135\"></a>🍤Array类型</h4>\n<p><strong>数组类型的定义也非常简单，有两种方式(推荐第一种写法)</strong>：</p>\n<blockquote>\n<p>因为第二种写法在jsx中会有冲突, 所以更推荐第一种写法</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 表示定义一个字符串类型的数组(推荐写法)</span>\n<span class=\"token keyword\">const</span> names<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 表示定义一个数字类型的数组</span>\n<span class=\"token keyword\">const</span> nums<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">789</span><span class=\"token punctuation\">]</span>\n\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">)</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>如果确定了类型, 再添加其他类型到数组中，那么会报错</strong>：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\71522804238743a09564cac465e82cd9.png\"/></p>\n<hr/>\n<h4><a id=\"Object_158\"></a>🍤Object类型</h4>\n<p><strong>在TypeScript中定义一个对象其实会默认推导出属性的类型的</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3396f2e6dc6b456f9023f8a88319381c.png\"/></p>\n<p><strong>object对象类型可以用于描述一个对象, 但是这样我们就无法从myinfo获取数据，设置数据</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> myinfo<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong><font color=\"red\">对象类型后面会详细讲解, 目前先了解到此即可</font></strong></p>\n<hr/>\n<h4><a id=\"Symbol_185\"></a>🍤Symbol类型</h4>\n<p>在ES5中，如果我们是不可以在对象中添加相同的属性名称的，比如下面的做法：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  identity<span class=\"token operator\">:</span> <span class=\"token string\">\"程序员\"</span><span class=\"token punctuation\">,</span>\n  identity<span class=\"token operator\">:</span> <span class=\"token string\">\"医生\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>通常我们的解决方案是定义两个不同的属性名字：比如identity1和identity2。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  identity1<span class=\"token operator\">:</span> <span class=\"token string\">\"程序员\"</span><span class=\"token punctuation\">,</span>\n  identity2<span class=\"token operator\">:</span> <span class=\"token string\">\"医生\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们还可以通过symbol来定义相同的名称，因为Symbol函数返回的是不同的值：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> s1<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> s2<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">[</span>s1<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"程序员\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>s2<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"医生\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h4><a id=\"nullundefined_221\"></a>🍤null和undefined类型</h4>\n<p>在JavaScript中， undefined 和 null 是两个基本数据类型。</p>\n<p>在TypeScript中，它们各自的类型也是undefined和null，也就意味着它们<strong>既是实际的值，也是自己的类型</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// null类型只有一个值就是null</span>\n<span class=\"token keyword\">let</span> nl<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token comment\">// undefined类型也只有一个值就是undefined</span>\n<span class=\"token keyword\">let</span> ud<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n</code></pre>\n<h3><a id=\"TS_234\"></a>TS自身特有的数据类型</h3>\n<h4><a id=\"any_236\"></a>🍺any类型</h4>\n<p><strong>在某些情况下，我们确实无法确定一个变量的类型，并且可能它会发生一些变化，这个时候我们可以使用any类型（类似 于Dart语言中的dynamic类型）</strong>。</p>\n<p><strong>any类型有点像一种讨巧的TypeScript手段</strong>：</p>\n<blockquote>\n<p>我们可以对any类型的变量进行任何的操作，包括获取不存在的属性、方法；</p>\n<p>我们给一个any类型的变量赋值任何的值，比如数字、字符串的值；</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"chenyq\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\na <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// any类型的数组可以存放不同的数据类型</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>如果对于某些情况的处理过于繁琐不希望添加规定的类型注解，或者在引入一些第三方库时，缺失了类型注解，这个时候 我们可以使用any</strong>：</p>\n<blockquote>\n<p>包括在Vue源码中，也会使用到any来进行某些类型的适配；</p>\n</blockquote>\n<hr/>\n<h4><a id=\"unknown_265\"></a>🍺unknown类型</h4>\n<p><strong>unknown是TypeScript中比较特殊的一种类型，它用于描述类型不确定的变量</strong>。</p>\n<p>这句话表达什么意思呢？我们来看下面这样的一个场景：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// foo返回string类型</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"aaa\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// bar返回number类型</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">123</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">let</span> result\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  result <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n  result <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>此时result是没有类型注解的, result是什么类型是不确定的, 需要根据flag的值进行判断</strong></p>\n<blockquote>\n<p>此时可以将result的类型注解设置为any类型, 但是开发中是不推荐使用any类型的</p>\n<p>在开发中推荐使用unknown类型</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span>\n</code></pre>\n<p><strong>那么any和unknown类型的区别是什么呢?</strong></p>\n<ul><li>any类型可以赋值给任意类型</li></ul>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aaa\"</span>\n\n<span class=\"token comment\">// any类型的值可以赋值给任何类型</span>\n<span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> result\n<span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> result\n<span class=\"token keyword\">let</span> isSHow<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">=</span> result\n</code></pre>\n<ul><li>unknown类型只能赋值给any类型和unknown类型</li></ul>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aaa\"</span>\n\n<span class=\"token comment\">// unknown类型的值只能赋值给any或unknown类型</span>\n<span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> result\n<span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> result\n<span class=\"token keyword\">let</span> isSHow<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> result\n</code></pre>\n<ul><li>赋值给其他类型的时候, 编译就会报错, 这是为了防止在其他地方乱用的情况</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ef58ff612f3c4bbab276cfbf5f07b7bb.png\"/></p>\n<hr/>\n<h4><a id=\"void_332\"></a>🍺void类型</h4>\n<p><strong>void通常用来指定一个函数是<font color=\"red\">没有返回值的</font>，那么它的返回值就是void类型</strong>：</p>\n<blockquote>\n<p>我们可以将null和undefined赋值给void类型，也就是函数可以返回null或者undefined</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是没有返回值的函数\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>如果一个函数我们没有写任何类型，那么它默认返回值的类型就是void的, 所以一般不写</strong>：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是没有返回值的函数\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h4><a id=\"never_354\"></a>🍺never类型</h4>\n<p><strong>never 表示<font color=\"red\">永远不会发生值的类型</font>，比如一个函数</strong>：</p>\n<blockquote>\n<p>如果一个函数中是一个死循环或者抛出一个异常，那么这个函数是永远不会返回东西的</p>\n<p>那么写void类型或者其他类型作为返回值类型都不合适，这个时候我们就可以使用never类型；</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"死循环\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h4><a id=\"tuple_372\"></a>🍺tuple类型</h4>\n<p><strong>tuple是元组类型，很多语言中也有这种数据类型，比如Python、 Swift等</strong>。</p>\n<blockquote>\n<p>元组的出现也是为了保证数组存放相同元素</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 例如使用元组存放个人信息</span>\n<span class=\"token keyword\">const</span> info<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.88</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 并且知道类型是string</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> info<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 并且知道类型是number</span>\n<span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> info<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 并且知道类型是number</span>\n\n</code></pre>\n<p><strong>那么tuple和数组有什么区别呢？</strong></p>\n<blockquote>\n<p>首先，数组中通常建议存放相同类型的元素，不同类型的元素是不推荐放在数组中。（可以放在对象或者元组中）</p>\n<p>其次，元组中每个元素都有自己特定的类型，根据索引值获取到的值可以确定对应的类型；而数组如果存放不同类型, 数组中每一个元素都是any类型</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}