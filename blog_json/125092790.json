{"blogid": "125092790", "writerAge": "码龄3年", "writerBlogNum": "928", "writerCollect": "107653", "writerComment": "7507", "writerFan": "131569", "writerGrade": "8级", "writerIntegral": "45714", "writerName": "川川菜鸟", "writerProfileAdress": "writer_image\\profile_125092790.jpg", "writerRankTotal": "61", "writerRankWeekly": "56", "writerThumb": "23854", "writerVisitNum": "3179468", "blog_read_count": "4757", "blog_time": "已于 2022-06-02 01:52:56 修改", "blog_title": "机器学习中的数据预处理方法与步骤", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>数据预处理是准备原始数据并使其适用于机器学习模型的过程。这是创建机器学习模型的第一步，也是至关重要的一步。</p>\n<p>在创建机器学习项目时，我们并不总是遇到干净且格式化的数据。并且在对数据进行任何操作时，必须对其进行清理并以格式化的方式放置。所以为此，我们使用数据预处理任务。</p>\n<h2><a id=\"_3\"></a>为什么我们需要数据预处理？</h2>\n<p>真实世界的数据通常包含噪声、缺失值，并且可能采用无法直接用于机器学习模型的不可用格式。数据预处理是清理数据并使其适用于机器学习模型的必要任务，这也提高了机器学习模型的准确性和效率。</p>\n<p>它涉及以下步骤：</p>\n<ol><li>获取数据集</li><li>导入相关库</li><li>导入数据集</li><li>查找缺失的数据</li><li>编码分类数据</li><li>将数据集拆分为训练集和测试集</li><li>特征缩放</li></ol>\n<h2><a id=\"_16\"></a>一、获取数据集</h2>\n<p>要创建机器学习模型，我们需要的第一件事是数据集，因为机器学习模型完全适用于数据。以适当格式收集的特定问题的数据称为<strong>数据集</strong>。</p>\n<p>数据集可能有不同的格式用于不同的目的，例如，如果我们想为商业目的创建关于肝病患者的机器学习模型，那么数据集将是肝病患者所需的数据集。数据集我们通常将其放入 CSV文件中。但是，有时，我们可能还需要使用 HTML 或 xlsx 文件。</p>\n<p>什么是 CSV 文件？CSV 代表“逗号分隔值”文件；它是一种文件格式，允许我们保存表格数据，例如电子表格。它对于庞大的数据集很有用，并且可以在程序中使用这些数据集。</p>\n<h2><a id=\"_22\"></a>二、导入常见库</h2>\n<p>为了使用 Python 进行数据预处理，我们需要导入一些预定义的 Python 库。这些库用于执行一些特定的工作。我们将使用三个特定的库进行数据预处理，它们是：</p>\n<ol><li>numpy</li><li>matplotlib</li><li>pandas</li></ol>\n<h2><a id=\"_29\"></a>三、导入数据集</h2>\n<h3><a id=\"31__30\"></a>3.1 读取数据</h3>\n<p>一般使用pandas来读取文件：</p>\n<pre><code class=\"prism language-c\">data_set <span class=\"token operator\">=</span>  pd <span class=\"token punctuation\">.</span><span class=\"token function\">read_csv</span><span class=\"token punctuation\">(</span><span class=\"token char\">'Dataset.csv'</span><span class=\"token punctuation\">)</span>  \n</code></pre>\n<p>data_set是存储数据集的变量的名称，在函数内部，我们传递了数据集的名称。一旦我们执行了上面这行代码，它将成功地在我们的代码中导入数据集。</p>\n<p>这里以心脏病数据集为例：</p>\n<pre><code class=\"prism language-c\">import pandas as pd\n\ndata<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span><span class=\"token function\">read_csv</span><span class=\"token punctuation\">(</span><span class=\"token char\">'heart.csv'</span><span class=\"token punctuation\">)</span>\n\ndata\n</code></pre>\n<p>读取如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a0a9a28f5bcd47dcbc8ce2bbb5070d9b.png\"/></p>\n<h3><a id=\"32_49\"></a>3.2提取因变量和自变量</h3>\n<p>在机器学习中，区分特征矩阵（自变量）和因变量与数据集很重要。在我们的数据集中，有三个自变量age,sex…其中target是因变量。</p>\n<p><strong>提取自变量</strong></p>\n<pre><code class=\"prism language-c\">x<span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values  \n\nx\n</code></pre>\n<p>如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\384a18ac9e084246be8501ae28470c4d.png\"/></p>\n<p>为了提取自变量，我们将使用Pandas 库的iloc[ ]方法。它用于从数据集中提取所需的行和列。在上面的代码中，第一个冒号(😃 用于获取所有行，第二个冒号(😃 用于获取所有列。这里我们使用了:-1，因为我们不想取最后一列，因为它包含因变量。因此，通过这样做，我们将获得特征矩阵。</p>\n<p><strong>提取因变量</strong><br/> 为了提取因变量，我们将再次使用 Pandas .iloc[] 方法:</p>\n<pre><code class=\"prism language-c\">y <span class=\"token operator\">=</span>  data <span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values  \n\ny\n</code></pre>\n<p>在这里，我们只取了最后一列的所有行。它将给出因变量数组。输出为：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>int64<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"33__77\"></a>3.3 处理缺失数据</h3>\n<p>数据预处理的下一步是处理数据集中缺失的数据。如果我们的数据集包含一些缺失的数据，那么它可能会给我们的机器学习模型带来巨大的问题。因此，有必要处理数据集中存在的缺失值。</p>\n<p><strong>处理缺失数据的方法：</strong> 处理缺失数据主要有两种方式，分别是：</p>\n<ol><li><strong>通过删除特定的行</strong>：第一种方法通常用于处理空值。这样，我们只需删除包含空值的特定行或列。但这种方式效率不高，删除数据可能会导致信息丢失，无法给出准确的输出。</li><li><strong>通过计算平均值</strong>：通过这种方式，我们将计算包含任何缺失值的列或行的平均值，并将其放在缺失值的位置。这种策略对于具有数字数据的特征很有用，例如年龄、薪水、年份等。在这里，我们将使用这种方法。</li></ol>\n<p>依然是处理心脏病数据集如下：</p>\n<pre><code class=\"prism language-c\">from sklearn<span class=\"token punctuation\">.</span>impute import SimpleImputer\nimport numpy as np\n\nimputer <span class=\"token operator\">=</span> <span class=\"token function\">SimpleImputer</span><span class=\"token punctuation\">(</span>missing_values<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">,</span> strategy<span class=\"token operator\">=</span><span class=\"token char\">'mean'</span><span class=\"token punctuation\">)</span>\n\nimputerimputer<span class=\"token operator\">=</span> imputer<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n\n\nx<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> imputer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n\nx\n</code></pre>\n<p>输出为：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">52.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">53.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">70.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">47.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">50.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">54.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"34__111\"></a>3.4 编码分类数据</h3>\n<p>为了便于介绍这个编码分类，这里我随意构造了一个数据集：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a0ae7975735e440fa905fe46314e64e7.png\"/><br/> 读取：</p>\n<pre><code class=\"prism language-c\">import pandas as pd\n\ndata<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span><span class=\"token function\">read_csv</span><span class=\"token punctuation\">(</span><span class=\"token char\">'ceshi.csv'</span><span class=\"token punctuation\">,</span>encoding<span class=\"token operator\">=</span><span class=\"token char\">'gbk'</span><span class=\"token punctuation\">)</span>\n\nx<span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values  \n\ny <span class=\"token operator\">=</span>  data <span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values  \n\nx\n</code></pre>\n<p>如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token char\">'中国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21504</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token char\">'美国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32102</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token char\">'德国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token char\">'法国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28740</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token char\">'中国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18750</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>object<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>查看目标：y</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token char\">'是'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'是'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'否'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'否'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'否'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>object<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这里没有缺失值，就不用处理了，但是为了演示这个过程，我还是假装有缺失值来处理下：</p>\n<pre><code class=\"prism language-c\">from sklearn<span class=\"token punctuation\">.</span>impute import SimpleImputer\nimport numpy as np\n\nimputer <span class=\"token operator\">=</span> <span class=\"token function\">SimpleImputer</span><span class=\"token punctuation\">(</span>missing_values<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">,</span> strategy<span class=\"token operator\">=</span><span class=\"token char\">'mean'</span><span class=\"token punctuation\">)</span>\n\nimputerimputer<span class=\"token operator\">=</span> imputer<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n\n\nx<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> imputer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n\nx\n</code></pre>\n<p>输出为：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token char\">'中国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21504</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token char\">'美国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32102</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token char\">'德国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token char\">'法国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28740</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token char\">'中国'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18750</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>object<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以看到处理与未处理之间是没有变化的，因为这个方法是用均值处理填充缺失值。</p>\n<p>现在开始讲<strong>编码分类</strong>：分类数据是具有某些类别的数据，例如在我们的数据集中；有两个分类变量：<strong>国家</strong>和<strong>购买</strong></p>\n<p>由于机器学习模型完全适用于数学和数字，但如果我们的数据集有一个分类变量（字符），那么在构建模型时可能会产生麻烦。因此有必要将这些分类变量编码为数字。这就是为啥需要编码。</p>\n<p><strong>对于国家变量：</strong><br/> 首先，我们将国家变量转换为分类数据。为此，我们将使用preprocessing库中LabelEncoder()类：</p>\n<pre><code class=\"prism language-c\">from sklearn<span class=\"token punctuation\">.</span>preprocessing import LabelEncoder  \n\nlabel_encoder_x<span class=\"token operator\">=</span> <span class=\"token function\">LabelEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n\nx<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> label_encoder_x<span class=\"token punctuation\">.</span><span class=\"token function\">fit_transform</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n\nx\n</code></pre>\n<p>输出为：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21504</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32102</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28740</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18750</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>object<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以看到国家这里被编码成了0，1，2，3三个数字，表示三种。如果这些国家有重复，数字就会重复。第一个国家与第五个国家都是中国，编码后数字都是0。</p>\n<p><strong>对于购买变量</strong><br/> 同样的到底对其进行编码：</p>\n<pre><code class=\"prism language-c\">labelencoder_y<span class=\"token operator\">=</span> <span class=\"token function\">LabelEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \ny<span class=\"token operator\">=</span> labelencoder_y<span class=\"token punctuation\">.</span><span class=\"token function\">fit_transform</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>  \ny\n</code></pre>\n<p>输出为：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以看到”是“被编码为1，”否“被编码为0。因为购买的变量只有两个类别是或否，所以自动编码为 0 和 1。</p>\n<h2><a id=\"_209\"></a>四、将数据集拆分为训练集和测试集</h2>\n<p>在机器学习数据预处理中，我们将数据集分为训练集和测试集。这是数据预处理的关键步骤之一，因为通过这样做，我们可以提高机器学习模型的性能。</p>\n<p>假设，如果我们通过一个数据集对我们的机器学习模型进行了训练，并且我们通过一个完全不同的数据集对其进行了测试。然后，这会给我们的模型理解模型之间的相关性带来困难。</p>\n<p>如果我们训练我们的模型非常好并且它的训练精度也非常高，但是我们给它提供了一个新的数据集，那么它会降低性能。因此，我们总是尝试制作一个在训练集和测试数据集上表现良好的机器学习模型。在这里，我们可以将这些数据集定义为：<strong>训练集</strong>和<strong>测试集</strong>。</p>\n<p><strong>训练集</strong>：用于训练机器学习模型的数据集子集，我们已经知道输出。</p>\n<p><strong>测试集</strong>：用于测试机器学习模型的数据集子集，并通过使用测试集，模型预测输出。</p>\n<p>为了拆分数据集，我们将使用以下代码行将数据集以8：2进行拆分：</p>\n<pre><code class=\"prism language-c\">from sklearn<span class=\"token punctuation\">.</span>model_selection import train_test_split  \nx_train<span class=\"token punctuation\">,</span> x_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test<span class=\"token operator\">=</span> <span class=\"token function\">train_test_split</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> test_size<span class=\"token operator\">=</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  \n</code></pre>\n<p>解释：</p>\n<ul><li>在上面的代码中，第一行用于导入将数据集的数组拆分为随机训练和测试子集。</li><li>x_train：训练数据的特征</li><li>x_test：测试数据的特征</li><li>y_train：训练数据的因变量</li><li>y_test：测试数据的自变量</li></ul>\n<p>在train_test_split() 函数中，我们传递了四个参数，其中前两个用于数据数组，test_size用于指定测试集的大小。test_size 可能是 0.5、0.3 或0 .2，它表示训练集和测试集的划分比率。一般采用0.3或者0.2。</p>\n<p>可以挨个查看一下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8f1cb18a950743cc9b52ea2ea7245f98.png\"/></p>\n<h2><a id=\"_238\"></a>五、特征缩放</h2>\n<p>特征缩放是机器学习中数据预处理的最后一步。它是一种将数据集的自变量标准化在特定范围内的技术。在特征缩放中，我们将变量放在相同的范围和相同的比例中，这样任何变量都不会支配另一个变量。</p>\n<p>正如我们所看到的，年龄和工资列的值不在同一个范围内。机器学习模型是基于欧几里德距离的，如果我们不对变量进行缩放，那么它会在我们的机器学习模型中引起一些问题。</p>\n<p>欧几里得距离为：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e78100ce629e4b65883e6e61fbd9af8c.png\"/><br/> 如果我们从年龄和薪水计算任何两个值，那么薪水值将支配年龄值，并且会产生不正确的结果。所以为了消除这个问题，我们需要为机器学习执行特征缩放。</p>\n<p>在机器学习中执行特征缩放有两种方法：</p>\n<ul><li>标准化</li><li>正常化</li></ul>\n<p>标准化方法：x为原始值，mean为平均值，a为标准差，x’为标准化后的值<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c9e7b543464744bfbb03b0c1cc06f345.png\"/><br/> 正常化方法：x为原始值，min为最小值，max为最大值,x’为正常化后的值<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ba739d4761f14611b27a8c93b43a93ba.png\"/></p>\n<p>在这里，我们将对数据集使用标准化方法，对于特征缩放，我们将sklearn.preprocessing库的StandardScaler类导入为：</p>\n<pre><code class=\"prism language-c\">from sklearn<span class=\"token punctuation\">.</span>preprocessing import StandardScaler  \n</code></pre>\n<p>现在，我们将为自变量或特征创建StandardScaler类的对象。然后我们将拟合和转换训练数据集。</p>\n<pre><code class=\"prism language-c\">from sklearn<span class=\"token punctuation\">.</span>preprocessing import StandardScaler  \n\nst_x<span class=\"token operator\">=</span> <span class=\"token function\">StandardScaler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \nx_train<span class=\"token operator\">=</span> st_x<span class=\"token punctuation\">.</span><span class=\"token function\">fit_transform</span><span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span>  \nx_train\n</code></pre>\n<p>查看输出：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">0.96225045</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.72760688</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.70185794</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span> <span class=\"token number\">1.34715063</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.21267813</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.2711634</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span> <span class=\"token number\">0.57735027</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.72760688</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.6452625</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">0.96225045</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.21267813</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.21456796</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>对于测试数据集，我们将直接应用transform()函数而不是fit_transform()因为它已经在训练集中完成了。</p>\n<pre><code class=\"prism language-c\">x_test <span class=\"token operator\">=</span>  st_x <span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">)</span>  \nx_test\n</code></pre>\n<p>输出为：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">0.19245009</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.24253563</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.65243796</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>通过执行上述代码行，我们将得到 x_train 和 x_test 的缩放值。正如我们在上面的输出中看到的，所有变量都在值 -1 到 1 之间缩放，不过还是会有几个值在缩放后远离这个范围，这是正常的。</p>\n<p>注意：</p>\n<blockquote>\n<p>在这里，我们没有对因变量进行缩放，因为只有两个值 0 和 1。但是如果这些变量的取值范围更大，那么我们还需要对这些变量进行缩放。</p>\n</blockquote>\n<p>注意，以上数据是我编的，不具有实际性，你应该是从这个里面学习对应方法。说白了，对于非字符变量需要编码，编码成数字，本来就是数字就不用编码了。</p>\n<p>如果你python基础不够好，可以参考我的基础专栏，其中有教程也有练习题。如果你觉得我专栏的题太少了，你需要更多的刷题，推荐一个免费刷题网站：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_cccn_python\">牛客网</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}