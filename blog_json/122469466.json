{"blogid": "122469466", "writerAge": "码龄5年", "writerBlogNum": "271", "writerCollect": "998", "writerComment": "97", "writerFan": "240", "writerGrade": "5级", "writerIntegral": "3013", "writerName": "RuiH.AI", "writerProfileAdress": "writer_image\\profile_122469466.jpg", "writerRankTotal": "6273", "writerRankWeekly": "17257", "writerThumb": "187", "writerVisitNum": "331874", "blog_read_count": "3664", "blog_time": "于 2022-01-13 14:45:14 发布", "blog_title": "CMakeLists学习一、find_package查找包", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>CMakeLists学习一、find_package查找包</h3>\n<ul><li><a href=\"#_2\">前言</a></li><li><a href=\"#_8\">引例</a></li><li><a href=\"#_20\">环境变量</a></li><li><a href=\"#find_package_30\">find_package查询路径</a></li><li><ul><li><a href=\"#_37\">设定查询路径</a></li><li><a href=\"#_51\">默认路径</a></li></ul>\n</li><li><a href=\"#_63\">链接库问题</a></li><li><a href=\"#find_package_89\">find_package()命令</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>前言</h1>\n<p>很久之前就想写关于CMakeLists相关的学习记录，但当时的重点在数学基础内容上，这一块就搁置了，现在重新记录一下。</p>\n<p>首先就是cmake中查找第三方包指令find_package()的原理</p>\n<h1><a id=\"_8\"></a>引例</h1>\n<p>图像相关的工程中，最常用的第三方包OpenCV需要通过CMakeLists来配置，常见写法如下：</p>\n<pre><code>find_package(OpenCV 4 REQUIRED)\n\ninclude_directories(${OpenCV_INCLUDE_DIRS})\n\nadd_executable(main src/main.cpp)\ntarget_link_libraries(main ${OpenCV_LIBRARIES})\n</code></pre>\n<p>上面的配置中，find_package从目录中寻找OpenCV，找到后将头文件目录设置为<code>${OpenCV_INCLUDE_DIRS}</code>，库文件设为<code>${OpenCV_LIBRARIES}</code>，然后在工程中包含OpenCV头文件目录，生成可执行文件，最后链接OpenCV库。</p>\n<h1><a id=\"_20\"></a>环境变量</h1>\n<p>首先需要知道本机的环境变量，可以使用export命令显示所有环境变量：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">export</span>\n</code></pre>\n<p>也可以使用echo命令显示某个环境变量，比如PATH：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token keyword\">echo</span> <span class=\"token variable\">$PATH</span>\n</code></pre>\n<h1><a id=\"find_package_30\"></a>find_package查询路径</h1>\n<p>cmake设置第三方包的头文件目录和库文件位置，是通过查询.cmake文件实现的，有两种命名形式，<code>Find&lt;Package&gt;.cmake</code>或者<code>&lt;Package&gt;Config.cmake</code>。</p>\n<p><code>.cmake</code>文件一般在第三方包编译和安装时会自动安装到<code>$CMAKE_PREFIX_PATH/lib/cmake/</code>等文件夹中，比如<code>/usr/lib/cmake/</code>，<code>/usr/local/lib/cmake</code>等等。</p>\n<p><code>find_package()</code>的工作就是在特定路径下查找第三方包<code>.cmake</code>文件。这些路径包括<strong>设定查询路径</strong>与<strong>默认查询路径</strong>。</p>\n<h2><a id=\"_37\"></a>设定查询路径</h2>\n<p>设定查询路径通过cmake中的<code>CMAKE_MODULE_PATH</code>关键字设置寻找<code>.cmake</code>的位置：</p>\n<pre><code>list(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\")\n</code></pre>\n<p>上面的指令把工程根目录下的cmake文件夹添加为<code>.cmake</code>文件搜索路径，是优先搜索的路径。</p>\n<p>另外，还可以直接设置某个包的<code>.cmake</code>位置：</p>\n<pre><code>set(OpenCV_DIR /path_to_opencv)\nfind_package(OpenCV)\n</code></pre>\n<p>上面的指令使<code>find_package()</code>寻找OpenCV时，最优先查找/path_to_opencv路径下的<code>.cmake</code>文件。</p>\n<h2><a id=\"_51\"></a>默认路径</h2>\n<p>如果没有设定查询路径，或者在设定查询路径没有找到合适的<code>.cmake</code>时，cmake继续在默认查询路径中寻找<code>.cmake</code>文件，这些默认查询路径有：</p>\n<pre><code>PATH\nCMAKE_PREFIX_PATH\nCMAKE_FRAMEWORK_PATH\nCMAKE_APPBUNDLE_PATH\n</code></pre>\n<p>如果PATH路径为<code>/bin</code>或<code>/sbin</code>文件夹，则从上一级目录查找。</p>\n<p>以默认路径为根目录，cmake将检查根目录下的<code>/lib/cmake</code>,<code>/lib/&lt;arch&gt;/cmake</code>,<code>/share/cmake</code>下寻找<code>.cmake</code>文件，根据.cmake生成对应的头文件目录和库文件路径。</p>\n<h1><a id=\"_63\"></a>链接库问题</h1>\n<p>find_package()后，include_directories()基本上不会出问题，常见问题在链接库。</p>\n<p>还是以OpenCV为例：</p>\n<pre><code>find_package(OpenCV 4 REQUIRED)\n\ninclude_directories(${OpenCV_INCLUDE_DIRS})\n\nadd_executable(main src/main.cpp)\ntarget_link_libraries(main ${OpenCV_LIBRARIES})\n</code></pre>\n<p>执行<code>cmake</code>成功，<code>make</code>编译时没有找到opencv的库是很常见的报错。明明在cmake中target_link_libraries()指定了链接库，那么为什么还是会报ld错误呢？</p>\n<p>这是因为，部分第三方包的<code>.cmake</code>文件提供给cmake的<code>${&lt;Package&gt;_LIBRARIES}</code>只是一个包名，比如OpenCV的就是</p>\n<pre><code>libopencv_calib3d\nlibopencv_core\n...\n</code></pre>\n<p>等一大串库文件的名字，而不是路径，编译器不知道库文件的路径在哪，找不到库，自然就会报ld链接错误了。</p>\n<p>解决方法就是给出链接库的路径，这里就涉及到一个ld问题。为了以后查询方便，ld将放在ubuntu指令学习中。</p>\n<p>还有一个更简单但也更麻烦的链接方法：直接把需要链接的库放在Makefile的根目录下，编译器就能直接看到库文件了。</p>\n<h1><a id=\"find_package_89\"></a>find_package()命令</h1>\n<p>最后回到find_package命令上，它的常用形式为：</p>\n<pre><code class=\"prism language-bash\">find_package<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>PackageName<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>version<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>EXACT<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>QUIET<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>REQUIRED<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>version: 版本合适（大版本号相同）<br/> EXACT: 版本必须一致<br/> QUIET: 没找到包也不会报错<br/> REQUIRED: 必须找到该包，否则停止</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}