{"blogid": "119334634", "writerAge": "码龄2年", "writerBlogNum": "55", "writerCollect": "5135", "writerComment": "529", "writerFan": "28035", "writerGrade": "5级", "writerIntegral": "2616", "writerName": "若oo尘", "writerProfileAdress": "writer_image\\profile_119334634.jpg", "writerRankTotal": "27221", "writerRankWeekly": "835", "writerThumb": "1405", "writerVisitNum": "233180", "blog_read_count": "127664", "blog_time": "已于 2022-07-25 10:25:51 修改", "blog_title": "【Yolov5】1.认真总结6000字Yolov5保姆级教程（2022.06.28全新版本v6.1）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E5%89%8D%E8%A8%80\">一、前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9\">二、学习内容</a></p>\n<p id=\"%E2%80%8B%E7%BC%96%E8%BE%91-toc\" style=\"margin-left:0px;\"><a href=\"#%E2%80%8B%E7%BC%96%E8%BE%91\">​编辑</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E7%89%88%E6%9C%AC%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%A3%B0%E6%98%8E-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E7%89%88%E6%9C%AC%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%A3%B0%E6%98%8E\">三、版本与配置声明</a></p>\n<p id=\"%E4%B8%89%E3%80%81Yolov5%E7%9A%84%E5%87%86%E5%A4%87-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81Yolov5%E7%9A%84%E5%87%86%E5%A4%87\">四、Yolov5的准备</a></p>\n<p id=\"1.%E5%9F%BA%E6%9C%AC%E7%9A%84Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%9F%BA%E6%9C%AC%E7%9A%84Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">1.基本的Python环境配置</a></p>\n<p id=\"1.%E4%B8%8B%E8%BD%BDYolov5-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%B8%8B%E8%BD%BDYolov5\">2.下载Yolov5</a></p>\n<p id=\"2.%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%BA%93\">3.安装依赖库</a></p>\n<p id=\"3.%E8%BF%90%E8%A1%8C%E6%A3%80%E6%B5%8B-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E8%BF%90%E8%A1%8C%E6%A3%80%E6%B5%8B\">4.初步测试：detect.py</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E8%AE%AD%E7%BB%83%E9%9B%86-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E8%AE%AD%E7%BB%83%E9%9B%86\">五、训练集要求及路径要求</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E5%88%B6%E4%BD%9C%E6%A0%87%E7%AD%BE-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E5%88%B6%E4%BD%9C%E6%A0%87%E7%AD%BE\">六、制作自己的数据集之制作标签</a></p>\n<p id=\"1.%E4%B8%8B%E8%BD%BDlabelme-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%B8%8B%E8%BD%BDlabelme\">1.下载labelme</a></p>\n<p id=\"2.%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%BA%93\">2.安装依赖库</a></p>\n<p id=\"3.labelme%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#3.labelme%E6%93%8D%E4%BD%9C\">3.labelme操作</a></p>\n<p id=\"%C2%A04.json%E8%BD%ACtxt-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A04.json%E8%BD%ACtxt\"> 4.json转txt</a></p>\n<p id=\"%C2%A05.xml%E8%BD%ACtxt-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A05.xml%E8%BD%ACtxt\"> 5.xml转txt</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">七、修改配置文件</a></p>\n<p id=\"1.coco128.yaml-toc\" style=\"margin-left:40px;\"><a href=\"#1.coco128.yaml\">1.coco128.yaml-&gt;wzry_parameter.yaml</a></p>\n<p id=\"2.yolov5%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#2.yolov5%E9%85%8D%E7%BD%AE\">2.yolov5x.yaml-&gt;wzry_model.yaml</a></p>\n<p id=\"%C2%A0%E5%85%AD%E3%80%81%E8%AE%AD%E7%BB%83train-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E5%85%AD%E3%80%81%E8%AE%AD%E7%BB%83train\">八、开始训练train</a></p>\n<p id=\"1.%E8%B0%83%E5%8F%82-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E8%B0%83%E5%8F%82\">1.调参</a></p>\n<p id=\"2.%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E7%BB%93%E6%9E%9C\">2.结果</a></p>\n<p id=\"%E4%B8%83%E3%80%81%E8%AF%86%E5%88%ABdetect-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81%E8%AF%86%E5%88%ABdetect\">九、识别检测detect.py</a></p>\n<p id=\"1.%E8%B0%83%E5%8F%82-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E8%B0%83%E5%8F%82\">1.调参</a></p>\n<p id=\"%C2%A02.%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A02.%E7%BB%93%E6%9E%9C\"> 2.结果</a></p>\n<p id=\"%E5%85%AB%E3%80%81debug-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AB%E3%80%81debug\">十、debug</a></p>\n<p id=\"%E5%8D%81%E4%B8%80%E3%80%81%E5%A6%82%E6%9E%9C%E8%87%AA%E5%B7%B1%E7%94%B5%E8%84%91%E7%AE%97%E5%8A%9B%E4%B8%8D%E5%A4%9F%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%B8%80%E3%80%81%E5%A6%82%E6%9E%9C%E8%87%AA%E5%B7%B1%E7%94%B5%E8%84%91%E7%AE%97%E5%8A%9B%E4%B8%8D%E5%A4%9F%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F\">十一、如果自己电脑算力不够怎么办？</a></p>\n<p id=\"%E5%8D%81%E4%BA%8C%E3%80%81%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E9%83%A8%E7%BD%B2%E8%87%B3%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%9F-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%BA%8C%E3%80%81%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E9%83%A8%E7%BD%B2%E8%87%B3%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%9F\">十二、是否可以部署至树莓派？</a></p>\n<p id=\"%E5%85%AB%E3%80%81%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AB%E3%80%81%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90\">十三、百度网盘资源</a></p>\n<p id=\"%E4%B9%9D%E3%80%81%E7%BB%93%E8%AF%AD-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B9%9D%E3%80%81%E7%BB%93%E8%AF%AD\">十四、结语</a></p>\n<p></p>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E5%89%8D%E8%A8%80\">一、前言</h1>\n<p>1.集成的资源我放在了文末，包括我自己做成的成品，可以直接train与detect。我发在百度网盘上。</p>\n<p><img alt=\"\" height=\"407\" src=\"image\\3900781b31454038bc29466cb53f03f5.png\" width=\"806\"/></p>\n<p> 2.本文目的<strong><span style=\"color:#fe2c24;\">主要是能够让读者复现，直接使用，而且少讲原理</span></strong>。如果想深入了解yolov5的原理，可以去看热度比较高的博主做的</p>\n<p>3.如果是制作自己的数据集，那么有一个自己给训练集打标签的过程，那么需要看第五部分；如果用公开的数据集，那么可跳过第五部分</p>\n<p>4.本次大更新，采用<span style=\"color:#fe2c24;\"><strong>2022.06.28版本，应该是v6.1</strong></span>，以下是我的基本配置</p>\n<p><img alt=\"\" height=\"41\" src=\"image\\7e534b4fae864915a56d8f3ae63fad31.png\" width=\"1192\"/></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9\">二、学习内容</h1>\n<p>2020年6月25日，Ultralytics发布了YOLOV5 的第一个正式版本，其性能与YOLO V4不相伯仲，同样也是现今最先进的对象检测技术，并在推理速度上是目前最强，yolov5按大小分为四个模型yolov5s、yolov5m、yolov5l、yolov5x。</p>\n<p>今天我们来学习一下如何简单使用这个算法</p>\n<p><span style=\"color:#ff9900;\">文章特点：一个完整的流程，从头教到尾，不讲冗长的理论，实操</span>，看完本篇文章，训练与识别都是没有问题的，我以<span style=\"color:#fe2c24;\">王者荣耀</span>作为训练集，可以先看看效果</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Qg41177G4/\" title=\"Yolov5展示视频（b站），可以直接戳这个也可以看下面俩\">Yolov5展示视频（b站），可以直接戳这个也可以看下面俩</a></p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"bilibili\" id=\"OnfqVlou-1627913300081\" src=\"https://player.bilibili.com/player.html?aid=504578297&amp;page=1\"></iframe>\n<p>Yolov5识别效果</p>\n</div>\n<p></p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"bilibili\" id=\"jHzZEX2S-1627913339803\" src=\"https://player.bilibili.com/player.html?aid=504578297&amp;page=2\"></iframe>\n<p>原视频</p>\n</div>\n<p></p>\n<p>以下是操作的<span style=\"color:#79c6cd;\">流程图</span></p>\n<p></p>\n<h1 id=\"%E2%80%8B%E7%BC%96%E8%BE%91\" style=\"text-align:center;\"><img alt=\"\" height=\"713\" src=\"image\\2021090914151250.jpg\" width=\"701\"/></h1>\n<h1 id=\"%E4%BA%8C%E3%80%81%E7%89%88%E6%9C%AC%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%A3%B0%E6%98%8E\">三、版本与配置声明</h1>\n<blockquote>\n<pre># YOLOv5 requirements\n# Usage: pip install -r requirements.txt\n\n# Base ----------------------------------------\nmatplotlib&gt;=3.2.2\nnumpy&gt;=1.18.5\nopencv-python&gt;=4.1.1\nPillow&gt;=7.1.2\nPyYAML&gt;=5.3.1\nrequests&gt;=2.23.0\nscipy&gt;=1.4.1  # Google Colab version\ntorch&gt;=1.7.0\ntorchvision&gt;=0.8.1\ntqdm&gt;=4.41.0\nprotobuf&lt;4.21.3  # https://github.com/ultralytics/yolov5/issues/8012\n\n# Logging -------------------------------------\ntensorboard&gt;=2.4.1\n# wandb\n\n# Plotting ------------------------------------\npandas&gt;=1.1.4\nseaborn&gt;=0.11.0\n\n# Export --------------------------------------\n# coremltools&gt;=4.1  # CoreML export\n# onnx&gt;=1.9.0  # ONNX export\n# onnx-simplifier&gt;=0.3.6  # ONNX simplifier\n# scikit-learn==0.19.2  # CoreML quantization\n# tensorflow&gt;=2.4.1  # TFLite export\n# tensorflowjs&gt;=3.9.0  # TF.js export\n# openvino-dev  # OpenVINO export\n\n# Extras --------------------------------------\nipython  # interactive notebook\npsutil  # system utilization\nthop  # FLOPs computation\n# albumentations&gt;=1.0.3\n# pycocotools&gt;=2.0  # COCO mAP\n# roboflow\n</pre>\n</blockquote>\n<p>联想小新Air 15</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\20210802224033608.png\"/></p>\n<h1 id=\"%E4%B8%89%E3%80%81Yolov5%E7%9A%84%E5%87%86%E5%A4%87\">四、Yolov5的准备</h1>\n<h2 id=\"1.%E5%9F%BA%E6%9C%AC%E7%9A%84Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">1.基本的Python环境配置</h2>\n<p>我采用的是<span style=\"color:#ff9900;\"><strong>Anaconda+Pycharm</strong></span>的配置，大家要了解一些关于pip的指令，方便管理包，这里就不赘述了。</p>\n<h2 id=\"1.%E4%B8%8B%E8%BD%BDYolov5\">2.下载Yolov5</h2>\n<p><a href=\"https://github.com/ultralytics/yolov5\" title=\"https://github.com/ultralytics/yolov5\">https://github.com/ultralytics/yolov5</a>，放在合理的位置，如果这个下的慢的话见文末资源</p>\n<h2 id=\"2.%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%BA%93\">3.安装依赖库</h2>\n<p>当我们下好yolov5后，可以发现有一个requirements.txt文件，我们可以使用Anaconda Prompt，切换到咱们Yolov5的位置，pip install -r requirements.txt即可一步到位全部下完。</p>\n<p><span style=\"color:#be191c;\"><strong>大部分都能pip install 。重点说两个</strong></span></p>\n<p>（1）对于Pytorch，如果文件较大没有办法下完的话，可以用我下面的网址单独下载whl文件，</p>\n<p><a href=\"https://download.pytorch.org/whl/torch_stable.html\" title=\"https://download.pytorch.org/whl/torch_stable.html\">https://download.pytorch.org/whl/torch_stable.html</a></p>\n<p>（2）对于wandb，<a href=\"https://blog.csdn.net/hhhhhhhhhhwwwwwwwwww/article/details/116124285?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162791597216780265438950%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=162791597216780265438950&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-8-116124285.first_rank_v2_pc_rank_v29&amp;utm_term=wandb&amp;spm=1018.2226.3001.4187\" title=\"wandb安装方法\">wandb安装方法</a>，这个好像不是必须的，但我还是下了，<span style=\"color:#0d0016;\">版本为</span><span style=\"color:#fe2c24;\"><strong>0.12.19</strong></span><span style=\"color:#0d0016;\">，刚好能兼容，作用就是对训练分析，如图所示</span></p>\n<p><span style=\"color:#0d0016;\">wandb实际上是非必须的，如果影响到了使用，那么在程序中可以把它禁止使用，不影响任何效果。在</span><span style=\"color:#fe2c24;\"><strong>yolov5/utils/loggers/wandb/wandb_utils.py</strong></span><span style=\"color:#0d0016;\">前面几行，加入如下图所示的第28行输入wandb=None</span></p>\n<p><img alt=\"\" height=\"343\" src=\"image\\a6109999d3be468ba80a9d79ffc3e498.png\" width=\"1200\"/></p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\20210803125721601.jpg\"/></p>\n<h2 id=\"3.%E8%BF%90%E8%A1%8C%E6%A3%80%E6%B5%8B\">4.初步测试：detect.py</h2>\n<p>下载完yolov5后，什么都不用改，运行<span style=\"color:#b95514;\"><strong>detect.py</strong></span></p>\n<p>这个是帮你<span style=\"color:#fe2c24;\">检测能不能正常运行的</span></p>\n<p>若正常：</p>\n<p><img alt=\"\" height=\"756\" src=\"image\\a821667906dc4a6e862750278e743678.png\" width=\"1200\"/></p>\n<p>在runs/detect/exp中能发现被处理过的标签，说明成功了！若程序报错，<span style=\"color:#fe2c24;\">大概率是因为有的库版本不正确或者还未安装</span>，这个自己调试一下即可，应该没有太大难度 </p>\n<p style=\"text-align:center;\"></p>\n<h1 id=\"%E5%9B%9B%E3%80%81%E8%AE%AD%E7%BB%83%E9%9B%86\">五、训练集要求及路径要求</h1>\n<p>训练集<span style=\"color:#0d0016;\">至少</span><strong><span style=\"color:#fe2c24;\">100张</span></strong><span style=\"color:#0d0016;\">起步才有效果。要想效果好，用公开的数据集，几千张才会有较好的效果。</span></p>\n<p>训练集就是你需要train并用于detect的东西，<span style=\"color:#fe2c24;\">我以王者荣耀作为例子，你可以跟着我来一遍，资源在文末。</span><span style=\"color:#0d0016;\">要做自己的训练集的话再看第五步。跟着我的话可以不用做标签，因为资源中已经做好了</span></p>\n<p>如下图所示创建文件夹，让操作更清晰方便</p>\n<p>、</p>\n<p class=\"img-center\"><img alt=\"\" height=\"225\" src=\"image\\17cfc2e85b824fbdbbc9b9d31c107d80.png\" width=\"309\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"599\" src=\"image\\a6f2f387e6ef46c08c6ac4052112d343.png\" width=\"989\"/></p>\n<p>images是图片，labels是标签，train的话是用于训练的，test就是用于测试的，这里<span style=\"color:#fe2c24;\"><strong>一定一定要照着我的格式去建文件夹</strong></span>（wzry指王者荣耀，这个可以改成你们的数据集的名字，但是其余的一定要一样），<span style=\"color:#fe2c24;\"><strong>不然后面训练会出现找不到文件的报错</strong></span></p>\n<h1 id=\"%E4%BA%94%E3%80%81%E5%88%B6%E4%BD%9C%E6%A0%87%E7%AD%BE\">六、制作自己的数据集之制作标签</h1>\n<p>可采用labelme和labelimg，前者需要<strong>json</strong>标注格式转txt，后者需要<strong>xml</strong>标注格式转txt。我只用过前者，只给出前者的用法。</p>\n<h2 id=\"1.%E4%B8%8B%E8%BD%BDlabelme\">1.下载labelme</h2>\n<p><a href=\"https://github.com/wkentaro/labelme\" title=\"https://github.com/wkentaro/labelme\">https://github.com/wkentaro/labelme</a>，如果下载得慢的话见文末资源</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\20210802201307278.png\"/></p>\n<p></p>\n<p>点Download Zip，下载后找到该文件，解压，无需配置环境变量 </p>\n<h2>2.安装依赖库</h2>\n<p>在Anaconda Prompt里pip install pyqt5和pip install labelme</p>\n<h2 id=\"3.labelme%E6%93%8D%E4%BD%9C\">3.labelme操作</h2>\n<p>然后在Anaconda Prompt里输入labelme，打开界面如下</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\20210802201634944.png\"/></p>\n<p> 可以选择打开一个文件或者文件夹，如果是打开文件夹的话就会是下面那样子</p>\n<p>右击，点击rectangle，即画矩形框，框选你要识别训练的东西，举王者荣耀的例子</p>\n<p><img alt=\"\" height=\"1039\" src=\"image\\20210802202010516.png\" width=\"1200\"/></p>\n<p> 框选之后输入标签的名字，注意，<span style=\"color:#ed7976;\">可以框选多个作为标签</span>。框选完一张图后保存，然后接着下一张图。保存的文件格式是.json</p>\n<h2 id=\"%C2%A04.json%E8%BD%ACtxt\"> 4.json转txt</h2>\n<p>由于<strong><span style=\"color:#fe2c24;\">yolov5只认txt而不认json，因此还要有一个转换的过程</span></strong></p>\n<p>在yolov5-master中创建一个.py文件，代码如下</p>\n<pre><code class=\"language-python\">import json\nimport os\n\nname2id =  {'hero':0,'sodier':1,'tower':2}#标签名称\n\n\ndef convert(img_size, box):\n    dw = 1. / (img_size[0])\n    dh = 1. / (img_size[1])\n    x = (box[0] + box[2]) / 2.0 - 1\n    y = (box[1] + box[3]) / 2.0 - 1\n    w = box[2] - box[0]\n    h = box[3] - box[1]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return (x, y, w, h)\n\n\ndef decode_json(json_floder_path, json_name):\n    txt_name = 'C:\\\\Users\\\\86189\\\\Desktop\\\\' + json_name[0:-5] + '.txt'\n    #存放txt的绝对路径\n    txt_file = open(txt_name, 'w')\n\n    json_path = os.path.join(json_floder_path, json_name)\n    data = json.load(open(json_path, 'r', encoding='gb2312',errors='ignore'))\n\n    img_w = data['imageWidth']\n    img_h = data['imageHeight']\n\n    for i in data['shapes']:\n\n        label_name = i['label']\n        if (i['shape_type'] == 'rectangle'):\n            x1 = int(i['points'][0][0])\n            y1 = int(i['points'][0][1])\n            x2 = int(i['points'][1][0])\n            y2 = int(i['points'][1][1])\n\n            bb = (x1, y1, x2, y2)\n            bbox = convert((img_w, img_h), bb)\n            txt_file.write(str(name2id[label_name]) + \" \" + \" \".join([str(a) for a in bbox]) + '\\n')\n\n\nif __name__ == \"__main__\":\n\n    json_floder_path = 'C:\\\\Users\\\\86189\\\\Desktop\\\\哈哈哈\\\\'\n    #存放json的文件夹的绝对路径\n    json_names = os.listdir(json_floder_path)\n    for json_name in json_names:\n        decode_json(json_floder_path, json_name)\n</code></pre>\n<p>标注地方是需要修改的，有<span style=\"color:#fe2c24;\">几个标签名就写几个标签名</span>，而且这是<span style=\"color:#fe2c24;\">一个文件夹里所有的json</span>一起转化，存放txt的路径改为labels的train中（还记得下面这张图吗）</p>\n<p><img alt=\"\" height=\"599\" src=\"image\\5ac530d5cf244539a8c10bea3e90d9d2.png\" width=\"989\"/></p>\n<p style=\"text-align:center;\"></p>\n<p> 转化完后大概会是这样子，如果一张图有多个标签的话，这个数据就会变多</p>\n<p><img alt=\"\" src=\"image\\20210802232344688.png\"/></p>\n<p>简单说明一下，第一个数字是数据集中第0个种类，其余均是与坐标相关的值，软件生成，可不用管。 </p>\n<h2 id=\"%C2%A05.xml%E8%BD%ACtxt\"> 5.xml转txt</h2>\n<p>如果使用别的打标签文件或者是原先已经打好的xml文件标签，那么我也给出相关的转换代码</p>\n<pre><code class=\"language-python\">import xml.etree.ElementTree as ET\nimport pickle\nimport os\nfrom os import listdir, getcwd\nfrom os.path import join\n\n\ndef convert(size, box):\n    # size=(width, height)  b=(xmin, xmax, ymin, ymax)\n    # x_center = (xmax+xmin)/2        y_center = (ymax+ymin)/2\n    # x = x_center / width            y = y_center / height\n    # w = (xmax-xmin) / width         h = (ymax-ymin) / height\n\n    x_center = (box[0] + box[1]) / 2.0\n    y_center = (box[2] + box[3]) / 2.0\n    x = x_center / size[0]\n    y = y_center / size[1]\n\n    w = (box[1] - box[0]) / size[0]\n    h = (box[3] - box[2]) / size[1]\n\n    # print(x, y, w, h)\n    return (x, y, w, h)\n\n\ndef convert_annotation(xml_files_path, save_txt_files_path, classes):\n    xml_files = os.listdir(xml_files_path)\n    # print(xml_files)\n    for xml_name in xml_files:\n        # print(xml_name)\n        xml_file = os.path.join(xml_files_path, xml_name)\n        out_txt_path = os.path.join(save_txt_files_path, xml_name.split('.')[0] + '.txt')\n        out_txt_f = open(out_txt_path, 'w')\n        tree = ET.parse(xml_file)\n        root = tree.getroot()\n        size = root.find('size')\n        w = int(size.find('width').text)\n        h = int(size.find('height').text)\n\n        for obj in root.iter('object'):\n            difficult = obj.find('difficult').text\n            cls = obj.find('name').text\n            # if cls not in classes or int(difficult) == 1:\n            #     continue\n            cls_id = classes.index(cls)\n            xmlbox = obj.find('bndbox')\n            b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text),\n                 float(xmlbox.find('ymax').text))\n            # b=(xmin, xmax, ymin, ymax)\n            # print(w, h, b)\n            bb = convert((w, h), b)\n            out_txt_f.write(str(cls_id) + \" \" + \" \".join([str(a) for a in bb]) + '\\n')\n\n\nif __name__ == \"__main__\":\n    # 把forklift_pallet的voc的xml标签文件转化为yolo的txt标签文件\n    # 1、需要转化的类别\n    classes = ['People', 'Car', 'Bus', 'Motorcycle', 'Lamp', 'Truck']\n    # 2、voc格式的xml标签文件路径\n    xml_files1 = r'D:\\Technology\\Python_File\\yolov5\\M3FD\\Annotation_xml'\n    # xml_files1 = r'C:/Users/GuoQiang/Desktop/数据集/标签1'\n\n    # 3、转化为yolo格式的txt标签文件存储路径\n    save_txt_files1 = r'D:\\Technology\\Python_File\\yolov5\\M3FD\\Annotation_txt'\n\n    convert_annotation(xml_files1, save_txt_files1, classes)\n</code></pre>\n<p></p>\n<h1 id=\"%E4%BA%94%E3%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">七、修改配置文件</h1>\n<h2 id=\"1.coco128.yaml\">1.coco128.yaml-&gt;<span style=\"color:#0d0016;\">wzry_parameter.yaml</span></h2>\n<p>在<span style=\"color:#be191c;\"><strong>yolov5/data/coco128.yaml</strong></span>中先复制一份，粘贴到wzry中，改名为<strong><span style=\"color:#fe2c24;\">wzry_parameter.yaml</span>（意义为wzry的参数配置）</strong></p>\n<p>wzry_parameter.yaml文件需要修改的参数是nc与names。nc是标签名个数，names就是标签的名字，王者荣耀的例子中有10个标签，标签名字都如下。</p>\n<p><img alt=\"\" height=\"724\" src=\"image\\7f5256e2d96a4411bafe6f5b14103a40.png\" width=\"950\"/></p>\n<p>说明：</p>\n<p>path是绝对路径</p>\n<p>train是在path绝对路径条件下的<strong><span style=\"color:#ad720d;\">训练集</span></strong>路径，即：wzry/datasets/images/train</p>\n<p>val同上，但是是<span style=\"color:#ad720d;\"><strong>验证集</strong></span>，这里我为了方便，让训练集和验证集是一个，也没啥大问题。</p>\n<p>test可不填</p>\n<p>关于训练集、验证集、测试集三者关系，如下：</p>\n<p><a class=\"has-card\" href=\"https://blog.csdn.net/nkwshuyi/article/details/94593053\" title=\"(191条消息) 如何正确使用机器学习中的训练集、验证集和测试集？_nkwshuyi的博客-CSDN博客\"><span class=\"link-card-box\"><span class=\"link-title\">(191条消息) 如何正确使用机器学习中的训练集、验证集和测试集？_nkwshuyi的博客-CSDN博客</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"image\\icon-default.png\"/>https://blog.csdn.net/nkwshuyi/article/details/94593053</span></span></a>nc是训练集中种类的个数，names是他们对应的名字，这个顺序不要混了，尤其是自己打标签时，会有对应的顺序的。</p>\n<h2 id=\"2.yolov5%E9%85%8D%E7%BD%AE\">2.yolov5x.yaml-&gt;wzry_model.yaml</h2>\n<p>yolov5有4种配置，不同配置的特性如下，<span style=\"color:#fe2c24;\">我这里选择yolov5x，效果较好，但是训练时间长，也比较吃显存</span></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\20210802234337256.png\"/></p>\n<p>在<span style=\"color:#be191c;\"><strong>yolov5/models</strong></span>先复制一份yolov5x.yaml至wzry，更名为<span style=\"color:#fe2c24;\"><strong>wzry_model.yaml</strong></span>（意为模型），只将如下的nc修改为训练集种类即可</p>\n<p><img alt=\"\" height=\"294\" src=\"image\\5745cbb0e7fa473ca765780e1285f8d4.png\" width=\"734\"/></p>\n<h1 id=\"%C2%A0%E5%85%AD%E3%80%81%E8%AE%AD%E7%BB%83train\">八、开始训练train</h1>\n<h2 id=\"1.%E8%B0%83%E5%8F%82\">1.调参</h2>\n<p>在train.py，找到def parse_opt(known=False)这行，这下面是我们要修改的程序部分</p>\n<p><img alt=\"\" height=\"771\" src=\"image\\ce403fda3657491f9ba43a9a8c25c1b5.png\" width=\"1200\"/></p>\n<p>我标注“<span style=\"color:#fe2c24;\"><strong>修改处</strong></span>”的，是<span style=\"color:#fe2c24;\"><strong>一定要修改的</strong></span>；其他的注释是一些较为重要的参数，对于小白而言不改也可。具体修改的地方为<strong>defalut</strong>后</p>\n<p>479行：是我们训练的<span style=\"color:#ff9900;\"><strong>初始权重</strong></span>的位置，是以.pt结尾的文件，第一次训练用别人已经训练出来的权重。可能有朋友会想，自己训练的数据集和别人训练的数据集不一样，怎么能通用呢？实际上他们是通用的，后面训练会调整过来。而如果不填已有权重，那么训练效果可能会不好；</p>\n<p>480行：<span style=\"color:#ff9900;\"><strong>训练模型文件</strong></span>，在本项目中对应wzry_model.yaml；</p>\n<p>481行：<span style=\"color:#ff9900;\"><strong>数据集参数文件</strong></span>，在本项目中对于wzry_parameter.yaml；</p>\n<p>482行：<span style=\"color:#ff9900;\"><strong>超参数设置</strong></span>，是人为设定的参数。包括学习率啥的等等，可不改；</p>\n<p>483行：<span style=\"color:#ff9900;\"><strong>训练轮数</strong></span>，决定了训练时间与训练效果。如果选择训练模型是yolov5x.yaml，那么大约200轮数值就稳定下来了（收敛）；</p>\n<p>484行：<span style=\"color:#ff9900;\"><strong>批量处理文件数</strong></span>，这个要设置地小一些，否则会out of memory。这个决定了我们训练的速度；</p>\n<p>485行：<span style=\"color:#ff9900;\"><strong>图片大小</strong></span>，虽然我们训练集的图片是已经固定下来了，但是传入神经网络时可以resize大小，太大了训练时间会很长，且有可能报错，这个根据自己情况调小一些；</p>\n<p>487行：<span style=\"color:#ff9900;\"><strong>断续训练</strong></span>，如果说在训练过程中意外地中断，那么下一次可以在这里填True，会接着上一次runs/exp继续训练</p>\n<p>496行：<span style=\"color:#ff9900;\"><strong>GPU加速</strong></span>，填0是电脑默认的CUDA，前提是电脑已经安装了CUDA才能GPU加速训练，安装过程可查博客</p>\n<p>501行：<span style=\"color:#ff9900;\"><strong>多线程设置</strong></span>，越大读取数据越快，但是太大了也会报错，因此也要根据自己状况填小。</p>\n<h2 id=\"2.%E7%BB%93%E6%9E%9C\">2.结果</h2>\n<p>运行效果正确的应该是这个样子：</p>\n<p><img alt=\"\" height=\"718\" src=\"image\\eee1983c28604f628a81f433fe0b5291.png\" width=\"1200\"/></p>\n<p>结果保存在runs/train/exp中，多次训练就会有exp1、exp2、等等</p>\n<p>best.pt和last.pt是我们训练出来的<span style=\"color:#ff9900;\"><strong>权重文件</strong></span>，比较重要，用于detect.py。last是最后一次的训练结果，best是效果最好的训练结果（只是看起来，但是泛化性不一定强）。</p>\n<p><img alt=\"\" height=\"179\" src=\"image\\1db9c0b09e994c929334fc830a7adf26.png\" width=\"323\"/></p>\n<p></p>\n<h1 id=\"%E4%B8%83%E3%80%81%E8%AF%86%E5%88%ABdetect\">九、识别检测detect.py</h1>\n<h2>1.调参</h2>\n<p>找到def parse_opt():这行，以下是我们要调参的位置</p>\n<p><img alt=\"\" height=\"264\" src=\"image\\ae33b4355da040908bb7a89c06ae243b.png\" width=\"1200\"/></p>\n<p>217行：填我们训练好的权重文件路径</p>\n<p>218行：我们要检测的文件，可以是图片、视频、摄像头。填0时为打开电脑默认摄像头</p>\n<p>219行：<span style=\"color:#ff9900;\"><strong>数据集参数文件</strong></span><span style=\"color:#0d0016;\">，同上</span></p>\n<p>220行：<span style=\"color:#ff9900;\"><strong>图片大小</strong></span>，同上</p>\n<p>221行：置信度，当检测出来的置信度大于该数值时才能显示出被检测到，就是显示出来的<strong>框框</strong></p>\n<p>222行：非极大抑制，具体不赘述了，自行查阅，可不改</p>\n<p>224行：<span style=\"color:#ff9900;\"><strong>GPU加速</strong></span>，同上</p>\n<h2 id=\"%C2%A02.%E7%BB%93%E6%9E%9C\"> 2.结果</h2>\n<p>结果在runs/detect/exp中</p>\n<p></p>\n<h1 id=\"%E5%85%AB%E3%80%81debug\">十、debug</h1>\n<p>我猜测大多数问题为：</p>\n<p>1.<span style=\"color:#fe2c24;\"><strong>xxx not found</strong></span>，明明自己做了标签但是没找到。那很有可能是你的文件路径没照着我去做。细心的朋友发现了，在wzry_parameter时只填了训练集的图片，没填标签，那它能检测到标签吗？可以检测到，是因为<span style=\"color:#ff9900;\"><strong>文件夹命名的原因，标签文件夹命名为labels就可</strong></span>。</p>\n<p>2.<span style=\"color:#fe2c24;\"><strong>显卡爆了</strong></span>，那就调低train中我列出来的那几行<strong><span style=\"color:#ff9900;\">default</span></strong></p>\n<p>3.有朋友说他在训练时，<span style=\"color:#fe2c24;\"><strong>box obj cls labels的值为0或nan</strong></span>。正常情况下是正常的数（我发了训练的时候的图片），我猜测可能是<span style=\"color:#ff9900;\"><strong>训练集标签没做好（数据集中存在标注错误的东西、训练难度大）</strong></span> 或者 <span style=\"color:#ff9900;\"><strong>路径没写对</strong></span> 或者 <span style=\"color:#ff9900;\"><strong>超参数</strong></span> 没调好</p>\n<p>4.<span style=\"color:#fe2c24;\"><strong>路径不要带中文</strong></span>，建议<span style=\"color:#ff9900;\"><strong>改成全英文</strong></span>，否则可能会出现意料之外的错误</p>\n<p>5.<span style=\"color:#fe2c24;\"><strong>pycharm闪退</strong></span>，很有可能是因为你电脑out of memory了，电脑寄了，<span style=\"color:#ff9900;\"><strong>调小batch size和workers</strong></span>。</p>\n<p>6.<span style=\"color:#fe2c24;\"><strong>index 9 is out of bounds for axis 1 with size 2</strong></span>之类的问题，可能是标签txt文件里的种类数字超过了在yaml配置文件中nc与names未配置好，标签文件与配置文件的classes未配对上。因此，<span style=\"color:#ff9900;\"><strong>txt标签文件与配置文件都要仔细检查一下</strong></span>。</p>\n<p>7.<span style=\"color:#fe2c24;\"><strong>No labels found</strong></span>之类的问题，1：要将数据集标签格式转化为<span style=\"color:#ff9900;\"><strong>txt格式</strong></span>，2：要将<span style=\"color:#ff9900;\"><strong>数据集的目录名字</strong></span>改成我写出来的那样，尤其是images和labels。</p>\n<h1 id=\"%E5%8D%81%E4%B8%80%E3%80%81%E5%A6%82%E6%9E%9C%E8%87%AA%E5%B7%B1%E7%94%B5%E8%84%91%E7%AE%97%E5%8A%9B%E4%B8%8D%E5%A4%9F%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F\">十一、如果自己电脑算力不够怎么办？</h1>\n<p>采用云服务器，具体见我的另一篇博客</p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/m0_53392188/article/details/124339442\" title=\"使用恒源云服务器跑深度学习（使用pycharm_professional，FileZilla，xshell）\">使用恒源云服务器跑深度学习（使用pycharm_professional，FileZilla，xshell）</a></p>\n<p></p>\n<h1 id=\"%E5%8D%81%E4%BA%8C%E3%80%81%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E9%83%A8%E7%BD%B2%E8%87%B3%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%9F\">十二、是否可以部署至树莓派？</h1>\n<p>我之前用yolov5x.yaml作网络，根本跑不动，三秒一帧。</p>\n<p>在B站上有很多演示，如果部署会非常卡，就算部署，也是采用最轻量级的yolov5s.yaml。</p>\n<p>目前我正在做这个事，最好的解决方法是采用darknet框架的yolo-fastest，fps能达到10。后续我会写一个教程</p>\n<p></p>\n<h1 id=\"%E5%85%AB%E3%80%81%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90\">十三、百度网盘资源</h1>\n<p>链接：https://pan.baidu.com/s/10yOdyRjVBLF8rZPghE_5OA <br/> 提取码：mvpx </p>\n<p></p>\n<h1 id=\"%E4%B9%9D%E3%80%81%E7%BB%93%E8%AF%AD\">十四、结语</h1>\n<ul><li>我也是个小白，可能存在很多不足之处，希望有不足之处可以包容，我会改正的(⸝⸝•‧̫•⸝⸝)</li><li>最后感谢我的hxd，很多都是他教的，我自己尝试过一遍并且成功了，整理排版才的来这篇文章</li><li>如果遇到出现错误的，自己先多找一找问题，能力在debug中会不断提高的</li></ul>\n<p><span style=\"color:#a5a5a5;\">你们的每个赞都能让我开心好几天✿✿ヽ(°▽°)ノ✿</span></p>\n</div>\n</div>"}