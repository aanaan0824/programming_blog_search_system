{"blogid": "126180483", "writerAge": "码龄1年", "writerBlogNum": "49", "writerCollect": "2356", "writerComment": "3511", "writerFan": "3880", "writerGrade": "6级", "writerIntegral": "8560", "writerName": "熬夜磕代码丶", "writerProfileAdress": "writer_image\\profile_126180483.jpg", "writerRankTotal": "1640", "writerRankWeekly": "32", "writerThumb": "3135", "writerVisitNum": "55028", "blog_read_count": "1200", "blog_time": "已于 2022-08-17 10:14:14 修改", "blog_title": "初识面向对象上", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/e5515fd976494947a3cf4d4616876a5e.gif#pic_center\"/></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 个人主页：<a href=\"https://blog.csdn.net/buhuisuanfa?spm=1018.2226.3001.5343\">熬夜磕代码丶</a><br/> <font color=\"black\" size=\"3\"> 作品专栏: <a href=\"https://blog.csdn.net/buhuisuanfa/category_11932688.html?spm=1001.2014.3001.5482\">java se</a><br/> <font color=\"yellowblue\" size=\"3\"> 我变秃了，也变强了<br/> <font color=\"yered\" size=\"3\">给大家介绍一款程序员必备刷题平台——牛客网<br/> <a href=\"https://www.nowcoder.com/link/pc_csdncpt_bhsf_jzsf\">点击注册一起刷题收获大厂offer吧</a></font></font></font></font></p>\n</blockquote>\n<blockquote>\n<p>💬 💬 💬<font color=\"violet\" size=\"3\">java是一门纯面向对象的语言，它不同于面向过程的C语言，在面向过程中,注重的是过程，在面向对象的世界里，一切皆为对象.面向对象是解决问题的一种思想，主要依靠对象之间的交互来完成一件事情.</font></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_16\">一、类</a></li><li><a href=\"#_42\">二、对象</a></li><li><ul><li><a href=\"#1_47\">1.类的实例化</a></li><li><a href=\"#2_64\">2.类和对象的关系</a></li><li><a href=\"#this_70\">三、this</a></li><li><a href=\"#1this_71\">1.this存在的意义</a></li><li><a href=\"#2this_108\">2.this的引入</a></li></ul>\n</li><li><a href=\"#_136\">四、构造方法</a></li><li><ul><li><a href=\"#1_137\">1.初始化对象</a></li><li><a href=\"#2_157\">2.构造方法</a></li><li><a href=\"#3_228\">3.对象初始化</a></li></ul>\n</li><li><a href=\"#_237\">五、打印对象</a></li><li><a href=\"#_290\">总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_16\"></a>一、类</h1>\n<blockquote>\n<p>java作为一种面向对象的语言。支持：多态 继承 封装 抽象 类 对象 实例 方法 重载<br/> 我们这节重点研究对象和类</p>\n</blockquote>\n<p><font color=\"yellowre\" size=\"3\">类可以看作创建对象的模板.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9ed996ee51974830be0f887fb1839a25.png\"/><br/> 我们简单创造一个类来理解一下：</font></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"汪汪叫！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"正在吃东西\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>类中包含的内容称为类的成员。属性主要是用来描述类的，称之为类的成员属性或者类成员变量。方法主要说明类<br/> 具有哪些功能，称为类的成员方法。</p>\n</blockquote>\n<h1><a id=\"_42\"></a>二、对象</h1>\n<blockquote>\n<p>对象：对象是类的一个实例（对象不是找个女朋友），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p>\n</blockquote>\n<h2><a id=\"1_47\"></a>1.类的实例化</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\723dcb4de3ec4246bef7e126ecf04ee7.png\"/><br/> 定义了一个类，就相当于在计算机中定义了一种新的类型，它是对对象的抽象。<br/> 用类类型创建对象的过程，成为类的实例化，在java中采用new关键字，实例化对象.</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过new实例化对象</span>\n        dog<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"旺财\"</span><span class=\"token punctuation\">;</span>\n        dog<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b716c52e0fbf4aa19c3ddb287be03d1c.png\"/></p>\n<h2><a id=\"2_64\"></a>2.类和对象的关系</h2>\n<p>1.类是一个模型,用来对一个实体进行描述，限制。<br/> 2.类是一种自定义类型，可以用来定义变量。<br/> 3.一个类可以实例化多个对象，类不占空间，只有实例化的对象才占真正的空间。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\501d3d7c3dd241f4af45be7e371765ed.png\"/></p>\n<h2><a id=\"this_70\"></a>三、this</h2>\n<h2><a id=\"1this_71\"></a>1.this存在的意义</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        x <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">;</span>\n        r <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>y<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        circle<span class=\"token punctuation\">.</span><span class=\"token function\">setCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        circle<span class=\"token punctuation\">.</span><span class=\"token function\">printCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样实例化一个对象，赋值，打印都没什么问题.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\08b53dc8e4cc4a1594389bba18736a36.png\"/><br/> 但是我们在类中的set方法形参给的太抽象了，我们给的具体一点看一下</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        r <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\059deabd589d42e0934c151beafa9518.png\"/><br/> 为啥？不是已经进行赋值了吗，怎么会打印出来0<br/> <img alt=\"在这里插入图片描述\" src=\"image\\58430a39c5234b748410f4c08487370d.png\"/></p>\n<h2><a id=\"2this_108\"></a>2.this的引入</h2>\n<p>this指向当前对象，在成员方法中调用成员变量都是运用的this去访问。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>this引用的是调用成员方法的对象.</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        circle<span class=\"token punctuation\">.</span><span class=\"token function\">setCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        circle<span class=\"token punctuation\">.</span><span class=\"token function\">printCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\04f05f1b019c4f06978c8afb0537c7d4.png\"/></p>\n<blockquote>\n<p>1.this的类型,那个对象调用就是那个对象的引用类型<br/> 2.this只能在成员方法中使用<br/> 3.this只能引用当前对象，不能在引用其他对象<br/> 4.this是成员方法第一个参数，编译器会自动传递，编译器会将对象的引用传递给该成员方法，this负责接收.</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\60c483ea0d6a43baa36b708d53696ccc.png\"/></p>\n<h1><a id=\"_136\"></a>四、构造方法</h1>\n<h2><a id=\"1_137\"></a>1.初始化对象</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面两段代码能否通过编译？<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9e253478df28452e9264e055deef9ad3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\41d2b2349a404284928b54981f09943b.png\"/></p>\n<blockquote>\n<p>1.为什么局部变量必须初始化才能使用，而对象可以不初始化？<br/> 2.对象赋值有没有简单的方法？</p>\n</blockquote>\n<h2><a id=\"2_157\"></a>2.构造方法</h2>\n<blockquote>\n<p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。<br/> 在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//无参的构造方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//带有两个参数的构造方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里证明：构造方法也可以重载.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cda7f7e31d464609bb8f683d39f844be.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7e754816819d411091eb774c675382f2.png\"/><br/> 这里报错了，因为我们自己写了一个带参数的构造方法，所以系统不在自己生成构造方法.</p>\n<p><strong>this的自我调用</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printCircle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Circle</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        circle<span class=\"token punctuation\">.</span><span class=\"token function\">printCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><font color=\"violet\" size=\"3\">在构造方法中可以使用this()去调用其他的构造方法，但this()必须在构造方法的首行，而且不能成环.</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c3da355cb75042d88f60afc66ee09dd1.png\"/></p>\n<h2><a id=\"3_228\"></a>3.对象初始化</h2>\n<p>为什么局部变量没有初始化无法编译，而成员变量可以.</p>\n<pre><code class=\"prism language-java\">    <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在这样的一个实例化过程中，虽然没有显式的初始化，但是JVM会替我们做很多.后面我们会学到很多，只简单介绍两点：<br/> 1.检测对象对应的类是否加载，如果没有加载进行加载<br/> 2.初始化空间：空间申请好之后，将成员变量设置为默认值.</p>\n<h1><a id=\"_237\"></a>五、打印对象</h1>\n<p>如果我们想打印对象该怎么打印？</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//无参的构造方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\451e53f7fb1e41ad868c46645f0eb514.png\"/></p>\n<p>我们可以看到打印对象打印出来的是一个像地址的东西.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f821e97aa16f4c3086f3e88d10fd6ecf.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\490441230087474a942ddcb7b3b08bde.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\7ed028c2c6d6462f88c7872ab0f08c6b.png\"/><br/> 我们可以层层剥皮发现,我们打印的是toString这个方法，那我们是不是可以自己写一下这个toString方法。</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Dog{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fa26bb7bdf904c58ae98f5b4e632fb93.png\"/><br/> 我们自动生成了一个toString（）方法，打印如上,当然我们也可以自己写一个toString()方法</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name  <span class=\"token operator\">+</span> <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cd6d1bd0cd634ec29e68132ca47b4c7c.png\"/></p>\n<h1><a id=\"_290\"></a>总结</h1>\n<blockquote>\n<p><font color=\"blue\" size=\"3\">今天初始面向对象上就到这里了，随后我会更新初始对象下，一起卷起来.<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/2b579f4de48b4865ab679dcaf3fe7c1d.gif#pic_center\"/></font></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}