{"blogid": "126743141", "writerAge": "码龄24天", "writerBlogNum": "53", "writerCollect": "1", "writerComment": "0", "writerFan": "18", "writerGrade": "3级", "writerIntegral": "530", "writerName": "web13185828298", "writerProfileAdress": "writer_image\\profile_126743141.jpg", "writerRankTotal": "38224", "writerRankWeekly": "12547", "writerThumb": "0", "writerVisitNum": "2617", "blog_read_count": "11", "blog_time": "于 2022-09-07 12:23:42 发布", "blog_title": "JVM - 内存模型", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_JVM_2\"></a># <code>JVM</code></h2>\n<blockquote>\n<p><code>JDK</code>版本：<code>1.8</code></p>\n</blockquote>\n<h3><a id=\"_1JVM_7\"></a># 1、<code>JVM</code>内存区域</h3>\n<p><code>JVM</code>在执行应用程序的过程中会将它管理的内存分为若干个不同的区域。其中一部分是线程私有的，一部分是线程共享的。<code>Java</code>内存区域也叫做运行时数据区。<code>JVM</code>内存内存结果如下图所示：</p>\n<p><img alt=\"JVM内存区域\" src=\"image\\7b8d444f38f3493aa5760a5f47751d0b.png\"/></p>\n<hr/>\n<h3><a id=\"_2Java_15\"></a># 2、<code>Java</code>代码执行流程</h3>\n<p><img alt=\"Java代码执行流程\" src=\"image\\e4b3defbb5384dad8b37612f696a7431.png\"/></p>\n<ul><li><code>Java</code>源码文件通过<code>Java</code>编译器生成字节码文件。</li><li>生成的字节码文件通过类加载器进行加载。</li><li>然后进行字节码校验器进行字节码校验。</li><li>最后通过执行引擎编译成机器指令。其中执行引擎分为两个部分： \n  <ul><li>翻译字节码：翻译字节码的作用主要是程序的响应时间。对字节码文件进行逐行的解释执行。</li><li><code>JIT</code>执行其：主要作用是应用程序的性能。将反复执行的热点代码由字节码文件直接编译成机器指令，缓存在方法区中，直接调用即可。</li></ul> </li><li>在操作系统上运行编译生成的机器指令。</li></ul>\n<p>大体步骤就是高级编程语言通过编译器编译成汇编语言，然后再将汇编语言翻译成机器指令，最后在操作系统上运行机器指令。</p>\n<blockquote>\n<p>操作系统只认识机器指令，即 0 1 0 1。</p>\n</blockquote>\n<hr/>\n<h3><a id=\"_3JVM_33\"></a># 3、<code>JVM</code>的架构模型</h3>\n<p><code>Java</code>编译器输入的指令流一种是<strong>基于栈的指令架构</strong>，另外一种指令集架构则是<strong>寄存器的指令集架构</strong>。</p>\n<p>两种架构之间的区别：</p>\n<p>1、基于栈的指令集架构：</p>\n<ul><li>设计和实现更为简单，适用于资源受限的系统。</li><li>避开了寄存器的分配难题，使用零地址指令方式分配。</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器更容易实现。</li><li>不需要硬件支持，可移植性更好，更好实现跨平台。</li></ul>\n<p>2、基于寄存器架构：</p>\n<ul><li>指令集构架完全依赖于硬件，可移植性差。</li><li>性能优秀，执行更加高效。</li><li>花费更少的指令去完成一项操作。</li><li>大部分情况下，基于寄存器架构的指令集往往都是以一地址指令、二地址指令和三地址指令为主。</li></ul>\n<p><code>Java</code>的<code>HotSpot</code>使用的是栈的指令架构。</p>\n<hr/>\n<h3><a id=\"_4JVM_57\"></a># 4、<code>JVM</code>的生命周期</h3>\n<h4><a id=\"_41_59\"></a># 4.1、虚拟机的启动</h4>\n<p><code>Java</code>虚拟机的启动是通过引导类加载器(bootstrap class loader)创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的。</p>\n<h4><a id=\"_42_63\"></a># 4.2、虚拟机的运行</h4>\n<p>一个运行中的<code>Java</code>虚拟机有着一个清晰的任务：执行<code>Java</code>程序。程序开始执行时它才执行，程序结束时它就结束。执行一个所谓的<code>Java</code>程序，真真正正在执行的是一个叫做<code>Java</code>虚拟机的进程。</p>\n<h4><a id=\"_43_67\"></a># 4.3、虚拟机的退出</h4>\n<p>虚拟机退出有如下几种情况：</p>\n<p>1、程序正常执行完毕结束。</p>\n<p>2、程序在执行过程中遇到了异常或错误而终止。</p>\n<p>3、由于操作系统错误而导致<code>Java</code>虚拟机进程终止。</p>\n<p>4、某一个线程调用<code>System</code>或<code>Runtime</code>类的<code>exit</code>方法，或<code>Runtime</code>类的<code>halt</code>方法，并且<code>Java</code>安全管理器也允许这次<code>exit</code>或<code>halt</code>操作。</p>\n<p>5、除以上之外，<code>JNI(Java Native Interface)</code>规范描述了用<code>JNI Invocation API</code>来加载或卸载<code>Java</code>虚拟机时，<code>Java</code>虚拟机进程退出的情况。</p>\n<hr/>\n<h3><a id=\"_5JVM_83\"></a># 5、<code>JVM</code>内存架构</h3>\n<p><img alt=\"JVM内存架构\" src=\"image\\01ce977c4ebb4dc59385c145b4ec2c71.png\"/></p>\n<p>方法区：存放常量信息，类信息，方法信息。</p>\n<ul><li><code>LV(Local Variables)</code>：局部变量表。</li><li><code>OS(Operand Stack)</code>：操作数栈。</li><li><code>DL(Dynamic Linking)</code>：动态连接。</li><li><code>RA(Return Address)</code>：方法返回值地址。</li><li><code>Interpreter</code>：解释器。</li><li><code>Intermediate Code Generator</code>：中间代码生成器。</li><li><code>Code Optimizer</code>：代码优化器。</li><li><code>Target Code Generator</code>：目标代码生成器。</li><li><code>Profiler</code>：分析器。</li></ul>\n<p><a href=\"https://github.com/kapbc/Java-Kapcb\">GitHub源码地址</a>：<code>https://github.com/kapbc/Java-Kapcb/tree/master/src/main/java/com/kapcb/ccc/jvm</code></p>\n<blockquote>\n<p>备注：此文为笔者学习<code>JVM</code>的笔记，鉴于本人技术有限，文中难免出现一些错误，感谢大家批评指正。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}