{"blogid": "125803181", "writerAge": "码龄4年", "writerBlogNum": "64", "writerCollect": "8", "writerComment": "4", "writerFan": "2", "writerGrade": "3级", "writerIntegral": "631", "writerName": "BLKNjy", "writerProfileAdress": "writer_image\\profile_125803181.jpg", "writerRankTotal": "32392", "writerRankWeekly": "11033", "writerThumb": "3", "writerVisitNum": "6062", "blog_read_count": "1400", "blog_time": "于 2022-07-15 14:01:28 发布", "blog_title": "JOOQ用法和实例", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>这里写目录标题</h3>\n<ul><li><ul><li><ul><li><a href=\"#JOOQ_1\">JOOQ简介</a></li><li><a href=\"#CRUD_12\">CRUD</a></li><li><ul><li><a href=\"#INSERT_28\">INSERT</a></li><li><a href=\"#update_72\">update</a></li><li><a href=\"#select_95\">select</a></li><li><a href=\"#Delete_146\">Delete</a></li></ul>\n</li><li><a href=\"#_164\">结果处理</a></li><li><ul><li><a href=\"#fetch_180\">fetch</a></li><li><a href=\"#fetch_246\">fetch</a></li><li><a href=\"#fetchgroup_266\">fetchgroup</a></li></ul>\n</li><li><a href=\"#_287\"></a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"JOOQ_1\"></a>JOOQ简介</h3>\n<blockquote>\n<p><a href=\"https://jooq.org/\">jOOQ</a>，是一个ORM框架，利用其生成的Java代码和流畅的API，可以快速构建有类型约束的安全的SQL语句 。</p>\n<p><strong>优点：</strong></p>\n<ol><li> <p>jOOQ的核心优势是可以将数据库表结构映射为Java类，包含表的基本描述和所有表字段。通过jOOQ提供的API，配合生成的Java代码，可以很方便的进行数据库操作</p> </li><li> <p>生成的Java代码字段类型是根据数据库映射成的Java类型，在进行设置和查询操作时，因为是Java代码，都会有强类型校验，所以对于数据的输入，是天然安全的，极大的减少了SQL注入的风险</p> </li><li> <p>jOOQ的代码生成策略是根据配置全量生成，任何对于数据库的改动，如果会影响到业务代码，在编译期间就会被发现，可以及时进行修复</p> </li></ol>\n</blockquote>\n<h3><a id=\"CRUD_12\"></a>CRUD</h3>\n<blockquote>\n<p>所有的操作jooq都提供两种方式， 第一种是使用 DSLContext API 以类SQL的语法进行调用，第二种是利用 Record API 进行调用 。这里面只记录第一种，了解第二种请点击<a href=\"https://jooq.diamondfsd.com/learn/section-2-base-curd.html\">这里</a></p>\n<p>了解：</p>\n<ul><li><code>dslContext</code> 代表<code>DSLContext</code>实例</li><li><code>S1_USER</code> 由jOOQ插件生成的表描述常量</li><li><code>S1_USER.*</code> 由jOOQ插件生成的表内字段常量</li></ul>\n<p>了解三个接口：</p>\n<ul><li><code>org.jooq.Result</code> 结果集接口，此接口实现了List接口，可以当做一个集合来操作，是一个数据库查询结果集的包装类，除了集合的相关方法，该接口还提供了一些结果集转换，格式化，提取字段等方法。通常我们查询出来的结果都是此接口的实现类，掌握好此接口是jOOQ的基础接口，基本所有的SQL查询操作，都会碰到这个接口</li><li><code>org.jooq.Record </code> 此接口再使用关系型数据库时，主要用于定义数据库表记录，储存的内容是一条表记录的字段和值，每个值会储存对应字段的类型，可以通过通用的 <code>getValue(Field field)</code> 方法，取到对应字段的值，也可以将这个接口看做是一条记录的字段/值映射</li><li><code>org.jooq.DSLContext</code> jOOQ的核心接口之一，可以理解为一个SQL执行器，通过静态方法 <code>DSL.using</code>，可以获取一个 <code>DSLContext</code> 实例，此实例抽象了所有对于SQL的操作API，可以通过其提供的API方便的进行SQL操作</li></ul>\n</blockquote>\n<h4><a id=\"INSERT_28\"></a>INSERT</h4>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 类SQL语法 insertInto 方法第一个参数通常是表常量</span>\ndslContext<span class=\"token punctuation\">.</span><span class=\"token function\">insertInto</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">,</span> S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">,</span> S1_USER<span class=\"token punctuation\">.</span>ADDRESS<span class=\"token punctuation\">,</span> S1_USER<span class=\"token punctuation\">.</span>EMAIL<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"demo-address1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamondfsd@gmail.com\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"demo-address2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamondfsd@gmail.com\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//批量插入</span>\n <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">&gt;</span></span> recordList <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToObj</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">S1UserRecord</span> s1UserRecord <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s1UserRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usernameBatchInsert\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s1UserRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"diamondfsd@gmail.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s1UserRecord<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndslContext<span class=\"token punctuation\">.</span><span class=\"token function\">batchInsert</span><span class=\"token punctuation\">(</span>recordList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//插入后获取主键</span>\n<span class=\"token comment\">//通过此方法插入数据，可以通过 returning API读取想要返回的数据，此语法支持返回多个值，通过fetchOne()方法可以取到一个Record对象</span>\n<span class=\"token class-name\">Integer</span> userId <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">insertInto</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">,</span>\n    S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">,</span> S1_USER<span class=\"token punctuation\">.</span>ADDRESS<span class=\"token punctuation\">,</span> S1_USER<span class=\"token punctuation\">.</span>EMAIL<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"demo-address1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamondfsd@gmail.com\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">returning</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetchOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//插入时主键重复的处理办法</span>\n<span class=\"token comment\">// 第一种 ：这里执行完，返回affecteRow影响行数为0，即不生效</span>\n<span class=\"token comment\">// 生成的SQL: insert ignore into `learn-jooq`.`s1_user` (`id`, `username`) values (1, 'username-1')</span>\n<span class=\"token keyword\">int</span> affecteRow <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">insertInto</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">,</span>\n    S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"username-1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">onDuplicateKeyIgnore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 第二种:更新主键所在列</span>\n<span class=\"token comment\">//生成SQL: insert into `learn-jooq`.`s1_user` (`id`, `username`, `address`) values (1, 'duplicateKey-update', 'hello world') on duplicate key update `learn-jooq`.`s1_user`.`username` = 'duplicateKey-update', `learn-jooq`.`s1_user`.`address` = 'update'</span>\ndslContext<span class=\"token punctuation\">.</span><span class=\"token function\">insertInto</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">,</span> <span class=\"token string\">\"duplicateKey-insert\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ADDRESS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">onDuplicateKeyUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">,</span> <span class=\"token string\">\"duplicateKey-update\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ADDRESS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h4><a id=\"update_72\"></a>update</h4>\n<pre><code class=\"prism language-java\">dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">,</span> <span class=\"token string\">\"apiUsername-1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ADDRESS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"update-address\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">//批量更新</span>\n  <span class=\"token class-name\">S1UserRecord</span> record1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrecord1<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrecord1<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"batchUsername-1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">S1UserRecord</span> record2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrecord2<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrecord2<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"batchUsername-2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">&gt;</span></span> userRecordList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuserRecordList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>record1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuserRecordList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>record2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndslContext<span class=\"token punctuation\">.</span><span class=\"token function\">batchUpdate</span><span class=\"token punctuation\">(</span>userRecordList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"select_95\"></a>select</h4>\n<blockquote>\n<p>基本查询方法，默认查询指定表的所有字段，返回一个结果集的包装，通过<code>Result.into</code>方法，可以将结果集转换为任意指定类型集合，当然也可以通过 <code>Record.getValue</code> 方法取得任意字段值，值类型依赖于字段类型</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// select `learn-jooq`.`s1_user`.`id`, `learn-jooq`.`s1_user`.`username`, `learn-jooq`.`s1_user`.`email`, `learn-jooq`.`s1_user`.`address`, `learn-jooq`.`s1_user`.`create_time`, `learn-jooq`.`s1_user`.`update_time` from `learn-jooq`.`s1_user`</span>\n<span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Record</span><span class=\"token punctuation\">&gt;</span></span> fetchResult <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> fetch<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// select `learn-jooq`.`s1_user`.`id`, `learn-jooq`.`s1_user`.`username`, `learn-jooq`.`s1_user`.`email`, `learn-jooq`.`s1_user`.`address`, `learn-jooq`.`s1_user`.`create_time`, `learn-jooq`.`s1_user`.`update_time` from `learn-jooq`.`s1_user` where `learn-jooq`.`s1_user`.`id` in (1, 2)</span>\n<span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Record</span><span class=\"token punctuation\">&gt;</span></span> fetchAll <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfetchAll<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">record</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Integer</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ADDRESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Timestamp</span> createTime <span class=\"token operator\">=</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>CREATE_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Timestamp</span> updateTime <span class=\"token operator\">=</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>UPDATE_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>jooq也支持关联查询</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//UserMessagePojo为新建的Pojo类，用于存储查询结果，可以忽略具体内容</span>\n<span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Record3</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> record3Result <span class=\"token operator\">=</span>\n        dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">,</span>\n        S2_USER_MESSAGE<span class=\"token punctuation\">.</span>MESSAGE_TITLE<span class=\"token punctuation\">,</span>\n        S2_USER_MESSAGE<span class=\"token punctuation\">.</span>MESSAGE_CONTENT<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S2_USER_MESSAGE<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>S2_USER_MESSAGE<span class=\"token punctuation\">.</span>USER_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserMessagePojo</span><span class=\"token punctuation\">&gt;</span></span> userMessagePojoList <span class=\"token operator\">=</span> record3Result<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMessagePojo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>Condition动态查询</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">Condition</span> condition<span class=\"token operator\">=</span>DSL<span class=\"token punctuation\">.</span><span class=\"token function\">trueCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//真实条件</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcondition<span class=\"token operator\">=</span>condition<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tables</span><span class=\"token punctuation\">.</span>STUDENT<span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcondition<span class=\"token operator\">=</span>condition<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tables</span><span class=\"token punctuation\">.</span>STUDENT<span class=\"token punctuation\">.</span>AGE<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> list<span class=\"token operator\">=</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tables</span><span class=\"token punctuation\">.</span>STUDENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h4><a id=\"Delete_146\"></a>Delete</h4>\n<pre><code class=\"prism language-java\">dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//批量删除</span>\n<span class=\"token class-name\">S1UserRecord</span> record1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrecord1<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">S1UserRecord</span> record2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrecord2<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndslContext<span class=\"token punctuation\">.</span><span class=\"token function\">batchDelete</span><span class=\"token punctuation\">(</span>record1<span class=\"token punctuation\">,</span> record2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// </span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S1UserRecord</span><span class=\"token punctuation\">&gt;</span></span> recordList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrecordList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>record1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrecordList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>record2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndslContext<span class=\"token punctuation\">.</span><span class=\"token function\">batchDelete</span><span class=\"token punctuation\">(</span>recordList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_164\"></a>结果处理</h3>\n<blockquote>\n<p>查询操作通常以fetch API 作为结束API，例如常用的有，所有的读取类方法都差不多，掌握一个就能很快的举一反三</p>\n<ul><li>读取多条 \n   <ul><li><code>fetch</code> 读取集合</li><li><code>fetchSet</code> 读取并返回一个Set集合，常用于去重</li><li><code>fetchArray</code> 读取并返回一个数组</li></ul> </li><li>读取单条 \n   <ul><li><code>fetchOne</code> 读取单条记录，如果记录超过一条会报错</li><li><code>fetchAny</code> 读取单条记录，如果有多条，会取第一条数据</li><li><code>fetchSingle</code> 读取单条记录，如果记录为空或者记录超过一条会报错</li></ul> </li><li>读取并返回Map \n   <ul><li><code>fetchMap</code> 读取并返回一个Map</li><li><code>fetchGroups</code> 读取并返回一个分组Map</li></ul> </li></ul>\n</blockquote>\n<h4><a id=\"fetch_180\"></a>fetch</h4>\n<ul><li> <p><code>fetch()</code><br/> 无参调用此方法，返回的是一个<code>Result</code>结果集对象</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Record</span><span class=\"token punctuation\">&gt;</span></span> records <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p><code>fetch(RecordMapper mapper)</code><br/> <code>RecordMapper</code>接口的提供<code>map</code>方法，用于来返回数据。<code>map</code> 方法传入一个 <code>Record</code> 对象。可以使用lambda表达式将 <code>Record</code> 对象转换成一个指定类型的POJO</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S1UserPojo</span><span class=\"token punctuation\">&gt;</span></span> userPojoList <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-&gt;</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S1UserPojo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>多表查询，字段相同时，直接用into方法将结果集转换为POJO时，相同字段名称的方法会以最后一个字段值为准。这时候，我们可以现将结果集通过 <code>into(Table table)</code> 方法将结果集转换为指定表的<code>Record</code>对象，然后再<code>into</code>进指定的POJO类中</p> <pre><code class=\"prism language-java\"><span class=\"token comment\">// 多表关联查询，查询s2_user_message.id = 2的数据，直接into的结果getId()却是1</span>\n<span class=\"token comment\">// 这是因为同时关联查询了s1_user表，该表的id字段值为1</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S2UserMessage</span><span class=\"token punctuation\">&gt;</span></span> userMessage <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S2_USER_MESSAGE<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>S2_USER_MESSAGE<span class=\"token punctuation\">.</span>USER_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>S2_USER_MESSAGE<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-&gt;</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S2UserMessage</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// userMessage.getId() == 1</span>\n\n<span class=\"token comment\">// 将结果集into进指定的表描述中，然后在into至指定的POJO类</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S2UserMessage</span><span class=\"token punctuation\">&gt;</span></span> userMessage2 <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S2_USER_MESSAGE<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>S2_USER_MESSAGE<span class=\"token punctuation\">.</span>USER_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>S2_USER_MESSAGE<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">S2UserMessage</span> fetchUserMessage <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span>S2_USER_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S2UserMessage</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fetchUserMessage<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> fetchUserMessage<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// userMessage.getId() == 2</span>\n</code></pre> </li><li> <p><code>fetch(Field field)</code><br/> <code>Field</code>是一个接口，代码生成器生成的表字段常量例如 <code>S1_USER.ID</code>, 都实现了 <code>Field</code> 接口，这个重载可以直接取出指定表字段，会自动根据传入的字段推测其类型</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> id <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p><code>fetch(String fieldName, Class type)</code><br/> 可以直接通过字段名称字符串获取指定字段值，可以通过第二个参数指定返回值，如果不指定，返回Object</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> idList <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p><code>fetch(int fieldIndex, Class type)</code><br/> 可以通过查询字段下标顺序进行查询指定字段，可以通过第二个参数指定返回值，如果不指定，返回Object</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> idList <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<h4><a id=\"fetch_246\"></a>fetch</h4>\n<p>此方法可以将结果集处理为一个Map格式，此方法有很多重载，这里介绍几个常用的，注意，此方法作为key的字段必须确定是在当前结果集中是唯一的，如果出现重复key，此方法会抛出异常</p>\n<ul><li> <p><code>fetchMap(Field field, Class type)</code><br/> 以表字段值为key，返回一个 <code>K:V</code> 的Map对象</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">S1UserPojo</span><span class=\"token punctuation\">&gt;</span></span> idUserPojoMap <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fetchMap</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token class-name\">S1UserPojo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p><code>fetchMap(Feild field, Field field)</code><br/> 以表字段值为key，返回一个 <code>K:V</code> 的Map对象</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> idUserNameMap <span class=\"token operator\">=</span> dslContext<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fetchMap</span><span class=\"token punctuation\">(</span>S1_USER<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> S1_USER<span class=\"token punctuation\">.</span>USERNAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<h4><a id=\"fetchgroup_266\"></a>fetchgroup</h4>\n<p>此方法可以将结果集处理为一个Map格式，和<code>fetchMap</code>类似，只不过这里的值为一个指定类型的集合，通常在处理一对多数据时会用到</p>\n<ul><li> <p><code>fetchGroups(Field field, Class type)</code><br/> 以表字段值为Key，返回一个<code>K:List</code> 的Map对象</p> <pre><code>Map&lt;Integer, List&lt;S2UserMessage&gt;&gt; userIdUserMessageMap = dslContext.select().from(S2_USER_MESSAGE)\n                .fetchGroups(S2_USER_MESSAGE.USER_ID, S2UserMessage.class);\n</code></pre> </li><li> <p><code>fetchGroups(Field keyField, Field valueField)</code></p> </li><li> <p>以表字段值为Key，返回一个K:List的Map对象</p> <pre><code>Map&lt;Integer, List&lt;Integer&gt;&gt; userIdUserMessageIdMap = dslContext.select().from(S2_USER_MESSAGE)\n                .fetchGroups(S2_USER_MESSAGE.USER_ID, S2_USER_MESSAGE.ID);\n</code></pre> </li></ul>\n<h3><a id=\"_287\"></a></h3>\n<p><a href=\"https://jooq.diamondfsd.com/learn/section-1-how-to-start.html\">参考JOOQ中文文档教程</a></p>\n<p><a href=\"https://blog.csdn.net/qq_39940674/article/details/93383177\">更多用法参考</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}