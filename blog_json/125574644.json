{"blogid": "125574644", "writerAge": "码龄4年", "writerBlogNum": "111", "writerCollect": "1098", "writerComment": "1427", "writerFan": "2441", "writerGrade": "5级", "writerIntegral": "3674", "writerName": "百思不得小赵", "writerProfileAdress": "writer_image\\profile_125574644.jpg", "writerRankTotal": "5296", "writerRankWeekly": "975", "writerThumb": "943", "writerVisitNum": "89164", "blog_read_count": "2935", "blog_time": "于 2022-07-19 07:45:00 发布", "blog_title": "Scala 高阶（七）：集合内容汇总（上篇）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<center>\n  大家好，我是百思不得小赵。\n </center>\n</blockquote>\n<blockquote>\n<p><em>创作时间：2022 年 7 月 5 日<br/> 博客主页： 🔍<a href=\"https://blog.csdn.net/Zp_insist?type=blog\">点此进入博客主页</a><br/> —— 新时代的农民工 🙊<br/> —— 换一种思维逻辑去看待这个世界 👀<br/> 今天是加入CSDN的第1221天。觉得有帮助麻烦👏点赞、🍀评论、❤️收藏</em></p>\n</blockquote>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_16\">一、概述</a></li><li><a href=\"#Array_50\">二、数组（Array）</a></li><li><ul><li><a href=\"#_51\">不可变数组</a></li><li><a href=\"#_135\">可变数组</a></li></ul>\n</li><li><a href=\"#List_246\">三、列表（List）</a></li><li><ul><li><a href=\"#List_247\">不可变List</a></li><li><a href=\"#ListBuffer_283\">可变ListBuffer</a></li></ul>\n</li><li><a href=\"#Set_299\">四、Set集合</a></li><li><ul><li><a href=\"#Set_301\">不可变Set</a></li><li><a href=\"#Set_338\">可变Set</a></li></ul>\n</li><li><a href=\"#Map_374\">五、Map集合</a></li><li><ul><li><a href=\"#Map_375\">不可变Map</a></li><li><a href=\"#Map_416\">可变Map</a></li></ul>\n</li><li><a href=\"#_455\">六、元组</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<p>Scala中的集合与Java中的集合相类似，但是又有很多的改变，接下来我们开启Scala集合篇的学习历程吧！</p>\n<h1><a id=\"_16\"></a>一、概述</h1>\n<ul><li> <p>在<code>Java</code>中的集合分为三大类：<code>List</code>集合、<code>Set</code>集合、<code>Map</code>集合。其中List集合、Set集合继承自<code>Collection</code>。它们都是接口。</p> </li><li> <p><code>Scala</code> 的集合有三大类：序列 <code>Seq</code>、集 <code>Set</code>、映射 <code>Map</code>，所有的集合都扩展自 <code>Iterable</code>特质。</p> </li><li> <p>对于几乎所有的集合类，Scala 都同时提供了可变和不可变的版本，分别位于以下两个包：不可变集合：<code>scala.collection.immutable</code>、可变集合： s<code>cala.collection.mutable</code></p> </li><li> <p>不可变集合，就是指该集合对象不可修改，每次修改就会返回一个新对象，而<br/> 不会对原对象进行修改。类似于 java 中的 String 对象。</p> </li><li> <p>可变集合，就是这个集合可以直接对原对象进行修改，而不会返回新的对象。类似<br/> 于 java 中 StringBuilder 对象</p> </li><li> <p>Scala中的集合都是引用类型，并不关心指向的对象中的内容，只关心当前指向的对象。</p> </li><li> <p>建议：在操作集合的时候，不可变用符号，可变用方法。</p> </li></ul>\n<p><strong>不可变集合</strong></p>\n<center>\n 整体继承图（来源于网络） \n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7bdd44ccae594c608c8dbcedf47a5570.png\"/></p>\n<ul><li>Scala中的Set 和 Map集合包含的类与Java相类似，不同的是Seq下面分为<code>IndexedSeq</code>和<code>LinearSeq</code>两个特质。</li><li>scala中的<code>String</code>就是j<code>ava.lang.String</code>，和集合无直接关系，所以是虚箭头，是通过<code>Perdef</code>中的低优先级隐式转换来做到的。经过隐式转换为一个包装类型后就可以当做集合了。</li><li><code>IndexedSeq</code> 是通过索引来查找和定位，因此速度快，比如 String 就是一个索引集合，通过索引即可定位</li><li><code>LinearSeq</code> 是线型的，即有头尾的概念，这种数据结构一般是通过遍历来查找.</li></ul>\n<p><strong>可变集合</strong></p>\n<center>\n 整体继承图（来源于网络） \n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6c2ccdad0df14781a281f0d70fb75664.png\"/></p>\n<p><strong>不可变和可变：</strong></p>\n<ul><li>不可变指的是对象大小不可变，但是可以修改元素的值，需要注意这一点。而如果用了val不变量存储，那么指向对象的地址也不可变。</li><li>不可变集合在原集合上不能进行插入删除数据，只能返回新的集合。</li></ul>\n<h1><a id=\"Array_50\"></a>二、数组（Array）</h1>\n<h2><a id=\"_51\"></a>不可变数组</h2>\n<p>如何定义？</p>\n<pre><code class=\"prism language-scala\"><span class=\"token keyword\">val</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>集合类型大多都支持泛型，语法是<code>[Type]</code>，不同于java的<code>&lt;Type&gt;</code>。</li><li><code>[Int]</code>是指定可以存放的数据类型，如果希望存放任意数据类型，则指定 <code>Any</code></li><li><code>(10)</code>，表示数组的大小，确定后就不可以变化</li></ul>\n<p>代码如下：</p>\n<pre><code class=\"prism language-scala\"><span class=\"token keyword\">object</span> Test01_ImmutableArray <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">// 创建数组</span>\n    <span class=\"token keyword\">val</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 另一种方式</span>\n    <span class=\"token keyword\">val</span> array2 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 访问数组中的元素</span>\n    println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">//  修改值</span>\n    array<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    array<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n\n    println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 数组遍历</span>\n    <span class=\"token comment\">// 1.普通for循环</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> until array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> array<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 2.增强for循环</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>elem <span class=\"token keyword\">&lt;-</span> array2<span class=\"token punctuation\">)</span> println<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 3.迭代器</span>\n    <span class=\"token keyword\">val</span> iterator <span class=\"token operator\">=</span> array2<span class=\"token punctuation\">.</span>iterator\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span>hasNext<span class=\"token punctuation\">)</span> println<span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 4.调用foreach方法</span>\n    array2<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=&gt;</span> println<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    array<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 5.转换为String</span>\n    println<span class=\"token punctuation\">(</span>array2<span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=============================\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 添加元素</span>\n    <span class=\"token comment\">// 加到数组后面</span>\n    <span class=\"token keyword\">val</span> newArray <span class=\"token operator\">=</span> array2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>array2<span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 加到数组前面</span>\n    <span class=\"token keyword\">val</span> newArray2 <span class=\"token operator\">=</span> newArray<span class=\"token punctuation\">.</span>+<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>newArray2<span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> newArray3 <span class=\"token operator\">=</span> newArray2 <span class=\"token operator\">:</span><span class=\"token operator\">+</span> <span class=\"token number\">18</span>\n    <span class=\"token keyword\">val</span> newArray4 <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token operator\">+</span><span class=\"token operator\">:</span>  <span class=\"token number\">28</span> <span class=\"token operator\">+</span><span class=\"token operator\">:</span> newArray3 <span class=\"token operator\">:</span><span class=\"token operator\">+</span> <span class=\"token number\">87</span> <span class=\"token operator\">:</span><span class=\"token operator\">+</span> <span class=\"token number\">98</span>\n    println<span class=\"token punctuation\">(</span>newArray4<span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>第二种创建方式使用 <code>apply</code> 方法创建数组对象</li><li>添加元素时<code>：</code>在前，对象在前，<code>：</code>在后，对象在后。</li><li>访问元素使用()运算符，通过a<code>pply/update</code>方法实现，源码中的实现只是抛出错误作为存根方法（stab method），具体逻辑由编译器填充。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cb3137e945e34fa498ae4470b307bc97.png\"/></li></ul>\n<h2><a id=\"_135\"></a>可变数组</h2>\n<p>如何定义？</p>\n<pre><code class=\"prism language-scala\"> <span class=\"token keyword\">val</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ArrayBuffer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li><code>[Int]</code>表示存放整型的数据</li><li><code>()</code>初始化的数据，整型默认为0</li><li><code>ArrayBuffer</code> 需要引入 <code>scala.collection.mutable.ArrayBuffer</code></li></ul>\n<p>代码实操：</p>\n<pre><code class=\"prism language-scala\">    <span class=\"token comment\">//1。 创建可变数组</span>\n    <span class=\"token keyword\">val</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ArrayBuffer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 另一种方式</span>\n    <span class=\"token keyword\">val</span> arr2 <span class=\"token operator\">=</span> ArrayBuffer<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>\n\n    println<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 2.访问元素</span>\n    println<span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 修改元素</span>\n    arr2<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    println<span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 3。向数组添加元素</span>\n    <span class=\"token comment\">// :+ 主要针对不可变数组来添加元素使用的，添加完元素后必须要将其赋给一个新的数组</span>\n    <span class=\"token keyword\">val</span> newArray1 <span class=\"token operator\">=</span> arr <span class=\"token operator\">:</span><span class=\"token operator\">+</span> <span class=\"token number\">15</span>\n    \n    println<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>newArray1<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> newArray1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//  false</span>\n\n    <span class=\"token comment\">// 可变数组添加元素调用 += 方法，添加完后无需赋给新的数组对象</span>\n    <span class=\"token comment\">// += 向后追加  +=: 向前追加</span>\n    arr <span class=\"token operator\">+=</span> <span class=\"token number\">19</span>\n    <span class=\"token number\">27</span> <span class=\"token operator\">+=</span><span class=\"token operator\">:</span> arr\n    <span class=\"token comment\">// 推荐使用append() 方法</span>\n    <span class=\"token comment\">// 向后追加</span>\n    arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 向前添加</span>\n    arr<span class=\"token punctuation\">.</span>prepend<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 在指定位置添加  arr.insert(索引位置,可变参数)</span>\n    arr<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//直接添加数组</span>\n    arr<span class=\"token punctuation\">.</span>insertAll<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//    arr.appendAll()</span>\n    <span class=\"token comment\">//    arr.prefixLength()</span>\n\n    <span class=\"token comment\">// 4.删除元素</span>\n    <span class=\"token comment\">// 删除某个位置的元素</span>\n    arr<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 从索引位置开始，删除xx个数</span>\n    <span class=\"token comment\">//    arr.remove(0,10)</span>\n    arr <span class=\"token operator\">-=</span> <span class=\"token number\">36</span>\n</code></pre>\n<p><strong>可变与不可变集合转换</strong></p>\n<ul><li>不可变数组转可变数组<code>arr1.toBuffer</code> 返回结果才是一个可变数组，<code>arr1</code> 本身没有变化</li><li>可变数组转不可变数组<code>arr2.toArray </code>返回结果才是一个不可变数组，<code>arr2</code> 本身没有变化</li></ul>\n<p>举个栗子:</p>\n<pre><code class=\"prism language-scala\">    <span class=\"token comment\">// 可变数组转为不可变数组</span>\n    <span class=\"token keyword\">val</span> array <span class=\"token operator\">=</span> ArrayBuffer<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> newArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>toArray\n    println<span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 不可变数组转为可变数组</span>\n    <span class=\"token keyword\">val</span> buffer <span class=\"token operator\">=</span> newArray<span class=\"token punctuation\">.</span>toBuffer\n    println<span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>多维数组</strong><br/> 定义：</p>\n<pre><code class=\"prism language-scala\">  <span class=\"token keyword\">val</span> array <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span>ofDim<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>举个栗子：</p>\n<pre><code class=\"prism language-scala\">\n    <span class=\"token comment\">// 创建二维数组</span>\n    <span class=\"token keyword\">val</span> array <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span>ofDim<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 访问元素</span>\n    array<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n    array<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">26</span>\n\n    <span class=\"token comment\">// 遍历</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> until array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> until array<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> array<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">;</span> j <span class=\"token keyword\">&lt;-</span> array<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      print<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> array<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> println<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    array<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>line <span class=\"token keyword\">=&gt;</span> line<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    array<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"List_246\"></a>三、列表（List）</h1>\n<h2><a id=\"List_247\"></a>不可变List</h2>\n<p>如何定义？</p>\n<pre><code class=\"prism language-scala\"><span class=\"token keyword\">val</span> list<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li><code>List</code> 默认为不可变集合,数据有序且可重复</li><li><code>sealed</code>修饰的一个抽象的密封类。提供了一个约束，打包密封在当前文件内，当前类的子类不能定义在文件之外。</li><li>本身是一个抽象类，不能使用<code>new</code>对象的方式，使用半生对象的<code>apply</code>方法进行创建</li><li>遍历集合</li></ul>\n<pre><code class=\"prism language-scala\">\tlist<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>访问元素</li></ul>\n<pre><code class=\"prism language-scala\">\tprintln<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>添加元素 <code>+: :+</code>首尾添加元素，<code>Nil</code>空列表，<code>::</code>添加元素到表头</li></ul>\n<pre><code class=\"prism language-scala\">    <span class=\"token keyword\">val</span> list2 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>+<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> list3 <span class=\"token operator\">=</span> list <span class=\"token operator\">:</span><span class=\"token operator\">+</span> <span class=\"token number\">20</span>\n    \n\t<span class=\"token keyword\">val</span> list4 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li><code>Nil.::(元素)</code>创建新的列表，<code>29 :: 99 :: 80 :: 43 :: Nil</code>相当于给列表头部一直添加元素，定义一个新列表。</li><li>合并连个列表：<code>list1 :: list2</code>将<code>list1</code>整个列表合并到<code>list2</code>。<br/> <code>list1 ::: list2</code> 或者<code>list1 ++ list2</code> 将<code>list1</code>的各个元素合并到<code>list2</code>。<code>++</code>底层也是调用<code>:::</code></li></ul>\n<h2><a id=\"ListBuffer_283\"></a>可变ListBuffer</h2>\n<p>如何定义？</p>\n<pre><code class=\"prism language-scala\">\t<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable</span>\n\n\t<span class=\"token keyword\">val</span> listBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ListBuffer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">val</span> buffer <span class=\"token operator\">=</span> mutable<span class=\"token punctuation\">.</span>ListBuffer<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>可以使用<code>new</code>对象的方式，也可使用伴生对象的<code>apply</code>方法创建</li><li>添加元素 <code>append prepend insert</code> 添加元素到头或尾：<code>+=: +=</code></li><li>合并集合：<code>list1 ++ list2</code> 或者 <code>list1 ++= list2</code> 前者得到新的列表，后者将元素合并到<code>list1</code></li><li>修改元素：<code>list(index) = value</code> 底层调用<code>update</code>方法</li><li>删除元素：<code>remove</code> 或者 <code>-=</code></li></ul>\n<h1><a id=\"Set_299\"></a>四、Set集合</h1>\n<p>默认情况下，Scala 使用的是不可变集合，如果你想使用可变集合，需要引用<code>scala.collection.mutable.Set</code> 包</p>\n<h2><a id=\"Set_301\"></a>不可变Set</h2>\n<p>如何创建？</p>\n<pre><code class=\"prism language-scala\"> <span class=\"token keyword\">val</span> set1 <span class=\"token operator\">=</span> Set<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>默认为不可变的Set，数据不可重复且无序。</li><li>初始化集合时数据会被去重，可以用做去重操作。</li><li>添加元素：<code>set + 元素</code></li><li>合并集合： <code>set1 ++ set2</code>得到新的Set集合</li><li>删除元素：<code>set - 元素</code></li></ul>\n<p>代码实操：</p>\n<pre><code class=\"prism language-scala\">    <span class=\"token comment\">// 1.创建Set</span>\n    <span class=\"token keyword\">val</span> set1 <span class=\"token operator\">=</span> Set<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 2。添加元素</span>\n    <span class=\"token keyword\">val</span> set2 <span class=\"token operator\">=</span> set1 <span class=\"token operator\">+</span> <span class=\"token number\">80</span>\n    println<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 3。合并set</span>\n    <span class=\"token keyword\">val</span> set3 <span class=\"token operator\">=</span> Set<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span><span class=\"token number\">91</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> set4 <span class=\"token operator\">=</span> set2 <span class=\"token operator\">++</span> set3\n    println<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>set3<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>set4<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 4.删除元素</span>\n    <span class=\"token keyword\">val</span> set5 <span class=\"token operator\">=</span> set3 <span class=\"token operator\">-</span> <span class=\"token number\">14</span>\n    println<span class=\"token punctuation\">(</span>set3<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>set5<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Set_338\"></a>可变Set</h2>\n<p>如何创建？</p>\n<pre><code class=\"prism language-scala\">    <span class=\"token keyword\">val</span> set1 <span class=\"token operator\">=</span> mutable<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>添加元素：<code>set += 元素</code> <code>调用add()</code></li><li>删除元素：<code>set -= 元素</code> <code>调用remove()</code></li><li>合并两个集合：<code>set1 ++= set2</code></li></ul>\n<p>代码实操：</p>\n<pre><code class=\"prism language-scala\">   <span class=\"token comment\">// 1.创建Set</span>\n    <span class=\"token keyword\">val</span> set1 <span class=\"token operator\">=</span> mutable<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">/// 2.添加元素</span>\n    <span class=\"token keyword\">val</span> set2 <span class=\"token operator\">=</span> set1 <span class=\"token operator\">+</span> <span class=\"token number\">32</span>\n    set1 <span class=\"token operator\">+=</span> <span class=\"token number\">88</span>\n    set1<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 3.删除元素</span>\n    set1 <span class=\"token operator\">-=</span> <span class=\"token number\">12</span>  \n    set1<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 4.合并两个集合</span>\n    <span class=\"token keyword\">val</span> set3 <span class=\"token operator\">=</span> mutable<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">39</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> set4 <span class=\"token operator\">=</span> set1 <span class=\"token operator\">++</span> set3\n    println<span class=\"token punctuation\">(</span>set4<span class=\"token punctuation\">)</span>\n    set1 <span class=\"token operator\">++</span><span class=\"token operator\">=</span> set3\n    println<span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"Map_374\"></a>五、Map集合</h1>\n<h2><a id=\"Map_375\"></a>不可变Map</h2>\n<p>如何创建？</p>\n<pre><code class=\"prism language-scala\"> <span class=\"token keyword\">val</span> map1<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>默认为不可变的Map。</li><li>元素<code>key -&gt; value</code> 键值对儿，为二元组类型。</li></ul>\n<p>代码实操：</p>\n<pre><code class=\"prism language-scala\"> \t<span class=\"token comment\">// 1.创建Map key -&gt; value 键值对儿</span>\n    <span class=\"token keyword\">val</span> map1<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">.</span>getClass<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 2.遍历元素</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>elem <span class=\"token keyword\">&lt;-</span> map1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      println<span class=\"token punctuation\">(</span>elem<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    map1<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 元组类型 (String, Int)</span>\n    map1<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>kv<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=&gt;</span> println<span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 3.取Map中所有对Key</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">&lt;-</span> map1<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">${<!-- --></span><span class=\"token expression\">key</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> ----&gt; </span><span class=\"token interpolation\"><span class=\"token punctuation\">${<!-- --></span><span class=\"token expression\">map1<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 4.访问某一个Key的value</span>\n    <span class=\"token comment\">// 不安全的，报空指针异常</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"v\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 推荐使用</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Map_416\"></a>可变Map</h2>\n<p>类似于不可变的Map，直接上代码实操。</p>\n<pre><code class=\"prism language-scala\">    <span class=\"token comment\">// 1。创建Map</span>\n    <span class=\"token keyword\">val</span> map1<span class=\"token operator\">:</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">.</span>getClass<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 2.添加元素</span>\n    map1<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    map1<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span>\n\n    map1 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 3.删除元素</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    map1 <span class=\"token operator\">-=</span> <span class=\"token string\">\"d\"</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 4.修改元素</span>\n    map1<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 5.合并集合</span>\n    <span class=\"token keyword\">val</span> map2<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 可变加不可变</span>\n    map1 <span class=\"token operator\">++</span><span class=\"token operator\">=</span> map2\n    println<span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 不可变加可变</span>\n    <span class=\"token keyword\">val</span> map3 <span class=\"token operator\">=</span> map2 <span class=\"token operator\">++</span> map1\n    println<span class=\"token punctuation\">(</span>map3<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_455\"></a>六、元组</h1>\n<p><em>元组也是可以理解为一个容器，可以存储相同或者不同类型的数据，换句话说就是将多个无关的数据封装为一个整体。</em></p>\n<ul><li>声明元组的方式：<code>(元素 1，元素 2，元素 3,......)</code></li><li>元组中最大能有22个元素，<code>Tuple1</code>定义到了<code>Tuple22</code>。</li><li>访问元组：<code>_顺序号</code></li><li>通过索引访问元素<code>tuple.productElement(index)</code></li><li>遍历元组：<code>for (elem &lt;- tuple.productIterator)</code></li></ul>\n<p>举个栗子：</p>\n<pre><code class=\"prism language-scala\"><span class=\"token keyword\">object</span> Test_Tuple <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 1。创建元祖</span>\n    <span class=\"token keyword\">val</span> tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 2.访问元祖数据</span>\n    println<span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_3<span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_4<span class=\"token punctuation\">)</span>\n\n    println<span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>productElement<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 3.遍历元祖</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>elem <span class=\"token keyword\">&lt;-</span> tuple<span class=\"token punctuation\">.</span>productIterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      println<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 4.嵌套元组</span>\n    <span class=\"token keyword\">val</span> mulTuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scala\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>mulTuple<span class=\"token punctuation\">.</span>_4<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>本次Scala集合内容汇总的上篇到这里就结束了，内容篇幅较长，干货满满，希望对大家学习Scala语言有所帮助！！！<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/bb3d17175fb14eb6b068cd96727a4740.webp#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}