{"blogid": "126682861", "writerAge": "码龄1年", "writerBlogNum": "46", "writerCollect": "2229", "writerComment": "2317", "writerFan": "3932", "writerGrade": "6级", "writerIntegral": "6163", "writerName": "懒羊羊.java", "writerProfileAdress": "writer_image\\profile_126682861.jpg", "writerRankTotal": "3004", "writerRankWeekly": "190", "writerThumb": "2124", "writerVisitNum": "46301", "blog_read_count": "120", "blog_time": "已于 2022-09-07 11:18:20 修改", "blog_title": "猿创征文 |【SpringBoot】SSM“加速器”SpringBoot初体验", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">前言</a></li><li><ul><li><a href=\"#SpringBoot_5\">一.SpringBoot</a></li><li><a href=\"#_31\">二.起步依赖的引入</a></li><li><a href=\"#_36\">三.服务器切换</a></li><li><a href=\"#_60\">四.多环境开发</a></li><li><a href=\"#Junit_88\">五.整合Junit</a></li><li><a href=\"#Mybatis_105\">六.整合Mybatis</a></li><li><ul><li><a href=\"#61_106\">6.1定义实体类</a></li><li><a href=\"#62dao_123\">6.2定义dao接口</a></li><li><a href=\"#63_134\">6.3定义测试类</a></li><li><a href=\"#64_153\">6.4编写配置</a></li><li><a href=\"#65_168\">6.5测试</a></li><li><a href=\"#66Druid_189\">6.6使用Druid数据源</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p><strong>整理完SSM的零零碎碎，也是按部就班开启了SpringBoot之旅，Boot的引入加速了传统的SSM开发，给我最深的一个印象就是它的内部自动集成了Tomcat，当我们运行Application类时，资源就被自动部署到了Tomcat中，其次，是起步依赖的引入，也极大的简化了SSM文件繁琐的配置工程。</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\5c045af22d504a008751166474aa6370.png\"/><br/> <strong>以前说过，<font color=\"green\">从繁至简是贯彻框架学习的原始真解，Boot的出现更是这一真理的进一步论证！</font></strong></p>\n<h2><a id=\"SpringBoot_5\"></a>一.SpringBoot</h2>\n<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b3a6fca4f7f34c57b68717bfb4e59600.png\"/><br/> 按下这个按钮，一切仿佛都被加速，相比于曾经的SSM开发<br/> 我们通过一个经典的MVC案例来好好感受一下Boot带给我们的极速体验吧</p>\n<p><strong>1.还是老套路，类头上写上注解配置请求路径，编写一个GET请求，并且return做出反馈</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BootController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id ==&gt; \"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello , spring boot!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>2.启动项目的引导类</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3fbd3aafc5d349caa6b26862dc8f17fd.png\"/><br/> <strong>3.启动SpringBoot项目过后的运行窗口</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\93cb1f3d03ce44388916d2f6e01dd029.png\"/><br/> <strong>4.我们利用Postman来进行一个简单的接口测试，测试一下项目功能是否健全</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\51b33f5349904f16bcc68cdf525fbc52.png\"/></p>\n<h2><a id=\"_31\"></a>二.起步依赖的引入</h2>\n<p>为了解决因插件版本不同而导致的冲突问题，<font color=\"green\"><strong>boot为我们事先配置好了许多不同版本的插件</strong></font>，当我们使用时，选择既定的boot版本即可自动匹配一套完美契合的插件，极大提高了配置难度。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6a671e10f85c4657b88d1110f625d8e0.png\"/><br/> <font color=\"orange\"><strong>曾经，懒羊羊刚学习Javaweb时，就因为忽略了tomcat和servlet—api的版本一致问题导致MVC的项目无论如何也运行不成功，可以说是走了很多弯路啊~</strong></font><br/> 不过现在看来SpringBoot的出现，提高开发效率的同时也为我们屏蔽掉了大量不必要的麻烦</p>\n<h2><a id=\"_36\"></a>三.服务器切换</h2>\n<p>我们都知道boot内置了tomcat，每当创建好一个web项目，默认都是他，如何更改内置的服务器呢？<br/> <strong>这需要用到maven中的<font color=\"green\">排除依赖，找到web插件所在的依赖</font></strong>，排除掉Tomcat即可，就像这样</p>\n<pre><code class=\"prism language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>然后我们更换上Jetty服务器的依赖即可完成boot项目服务器切换</p>\n<pre><code class=\"prism language-xml\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-jetty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h2><a id=\"_60\"></a>四.多环境开发</h2>\n<p>多环境开发配置也是必会的一项操作，以yaml格式的配置文件为例，分别对生产环境、测试环境、开发环境三者之间进行切换</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token comment\">#设置启用的环境</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{<!-- --></span>profile.active<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token comment\">#开发环境</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">55</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token comment\">#生产环境</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> pro\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">66</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token comment\">#测试环境</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> test\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">77</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<h2><a id=\"Junit_88\"></a>五.整合Junit</h2>\n<p>在SSM的基础上Spring boot整合junit就变得非常简单，注入测试的类，写上@Test注解即可</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringbootTestApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringbootTestApplicationTests</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        bookService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>为何会如此简便？<br/> <strong>那是因为我们的</strong><font color=\"gree\"><strong>boot引导类充当了配置类，@SpringBootApplication中封装了包扫描的注解（追源码还是会发现@Configuration注解），引导类所在位置的包会全部被扫描</strong></font><br/> <img alt=\"在这里插入图片描述\" src=\"image\\5eeca906ff524b73a13a60cede289162.png\"/><br/> 所以说boot在这方面并<strong>没有带来什么新颖的功能</strong>，而是<strong>进一步封装了SSM的配置</strong></p>\n<h2><a id=\"Mybatis_105\"></a>六.整合Mybatis</h2>\n<h3><a id=\"61_106\"></a>6.1定义实体类</h3>\n<p>在 <code>com.yu7daily.domain</code> 包下定义实体类 <code>Book</code>，内容如下</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//setter and  getter</span>\n    \n    <span class=\"token comment\">//toString</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"62dao_123\"></a>6.2定义dao接口</h3>\n<p>在 <code>com.yu7daily.dao</code> 包下定义 <code>BookDao</code> 接口，内容如下</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from ssm_db where id = #{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"63_134\"></a>6.3定义测试类</h3>\n<p>在 <code>test/java</code> 下定义包 <code>com.yu7daily</code> ，在该包下测试类，内容如下</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringbootMybatisApplicationTests</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">testGetById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"64_153\"></a>6.4编写配置</h3>\n<p>我们代码中并没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在 <code>SpringBoot</code> 的配置文件中进行配合。</p>\n<p>在 <code>application.yml</code> 配置文件中配置如下内容</p>\n<pre><code class=\"prism language-yml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.jdbc.Driver\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root\n</code></pre>\n<h3><a id=\"65_168\"></a>6.5测试</h3>\n<p>运行测试方法，我们会看到如下错误信息</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">org.springframework.beans .factory.UnsatisfiedDependencyException</span><span class=\"token punctuation\">:</span> Error creating bean with name\n</code></pre>\n<p><strong>错误信息显示在 <code>Spring</code> 容器中没有 <code>BookDao</code> 类型的 <code>bean</code>。为什么会出现这种情况呢？</strong><br/> MyBatis是通过扫描接口利用自动代理创建对象交给Spring的IOC来集中管理，我们<font color=\"green\"><strong>从始至终好像没有定义扫描的接口</strong></font>，所以我们需要指出扫描的接口！而我们要解决这个问题需要在<code>BookDao</code> 接口上使用 <strong><code>@Mapper</code></strong> ，<code>BookDao</code> 接口改进为</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from ssm_db where id = #{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><mark>注意：</mark></p>\n<p><code>SpringBoot</code> 版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题</p>\n</blockquote>\n<h3><a id=\"66Druid_189\"></a>6.6使用Druid数据源</h3>\n<p>现在我们并没有指定数据源，<code>SpringBoot</code> 有默认的数据源，我们也可以指定使用 <code>Druid</code> 数据源，按照以下步骤实现</p>\n<ul><li> <p>导入 <code>Druid</code> 依赖</p> <pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> </li><li> <p>在 <code>application.yml</code> 配置文件配置</p> <p>可以通过 <code>spring.datasource.type</code> 来配置使用什么数据源。配置文件内容可以改进为</p> <pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db<span class=\"token punctuation\">?</span>serverTimezone=UTC\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">284650</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource\n</code></pre> </li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}