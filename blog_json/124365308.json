{"blogid": "124365308", "writerAge": "码龄3年", "writerBlogNum": "17", "writerCollect": "24", "writerComment": "3", "writerFan": "0", "writerGrade": "2级", "writerIntegral": "176", "writerName": "PittDing", "writerProfileAdress": "writer_image\\profile_124365308.jpg", "writerRankTotal": "96446", "writerRankWeekly": "158155", "writerThumb": "3", "writerVisitNum": "8033", "blog_read_count": "1149", "blog_time": "已于 2022-05-11 09:33:32 修改", "blog_title": "C#常用异步方法调用（1）_Async/Await特性详细总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_9\">前言</a></li><li><a href=\"#AsyncAwait_31\">一、Async/Await特性语法结构</a></li><li><ul><li><a href=\"#1__35\">1. 异步调用方法:异步方法的调用，其返回类型有三种：</a></li><li><a href=\"#2__58\">2. 异步声明方法</a></li><li><a href=\"#3_Await_69\">3. 必要的Await表达式</a></li></ul>\n</li><li><a href=\"#WPFAsyncAwait_101\">二、在WPF如何使用Async/Await特性？</a></li><li><ul><li><a href=\"#1WPF_102\">1.先展示一个WPF示例</a></li></ul>\n</li><li><a href=\"#_156\">三、如何创建并使用自己的异步方法？</a></li><li><a href=\"#_191\">四、如何取消异步任务？</a></li><li><a href=\"#_307\">五、如何同步等待异步任务完成？</a></li><li><a href=\"#_400\">六、如何异步的等待任务完成</a></li><li><a href=\"#_491\">七、如何暂停异步任务而不影响主线程任务的执行？</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_9\"></a>前言</h1>\n<p><code>在总结之前需要了解什么是同步方法、异步方法</code></p>\n<p>同步方法：程序按照编写顺序进行执行，在调用方法时线程会等待方法返回后再继续执行下一步；<br/> 异步方法：与同步方法相反，程序在执行方法时在方法尚未完成就返回调用方法继续执行，在调用方法继续执行的时候等待异步方法完成。</p>\n<p>异步方法常用的几种方式：<br/> 1、Async/Await 特性<br/> 2、Bachground 类<br/> 3、Task Parallet library 并行库</p>\n<blockquote>\n<p><strong>为什么需要用异步方法，异步方法有什么好处？</strong></p>\n</blockquote>\n<blockquote>\n<p>在实际应用过程中当程序执行代码时如果按照顺序一个个执行语句并等待结束并没有什么问题，但当执行个别耗时比较大的语句时程序依旧等待语句结束再执行之后的语句，这样就导致用户的等待的时间过多并且如果是处理UI界面时用户对界面的操作只能等待语句结束时才可能被响应，这种情况我们可以把耗时比较长的语句在新的线程里执行而主线程可以继续响应之后的语句及事件，这样就能提高整个程序的效率以及用户的体验感。</p>\n</blockquote>\n<hr/>\n<p><strong>本次要总结的为Async/Await 类</strong></p>\n<h1><a id=\"AsyncAwait_31\"></a>一、Async/Await特性语法结构</h1>\n<h2><a id=\"1__35\"></a>1. 异步调用方法:异步方法的调用，其返回类型有三种：</h2>\n<pre><code>\t - Void:无返回类型\n\t - Task：能够返回Task类型可以检查Task信息\n\t - Task&lt;T&gt;：能够返回Task类型及额外一个返回参数\n</code></pre>\n<p>使用三种返回类型时的调用方法格式为：<br/> Void:</p>\n<pre><code class=\"prism language-csharp\">\t\t<span class=\"token function\">CountCharacters</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code>\tTask:\n</code></pre>\n<pre><code class=\"prism language-csharp\">\t\t<span class=\"token class-name\">Task</span> task1 <span class=\"token operator\">=</span> <span class=\"token function\">CountCharacters</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code>\tTask&lt;T&gt;:\n</code></pre>\n<pre><code class=\"prism language-csharp\">\t\t<span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> t1 <span class=\"token operator\">=</span> <span class=\"token function\">CountCharacters</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"2__58\"></a>2. 异步声明方法</h2>\n<pre><code>\t- 异步声明方法必须带有Async关键字\n\t- 异步声明方法参数中不能带有OUT或REF类型\n\t- 一个异步方法中可以有多个await，但是不能没有\n\t- 异步方法中可以使用匿名方法或Lambda表达式\n\t- 在异步方法中只有Await修饰的语句才为异步任务，Await之前的语句为同步执行\n\t- 异步调用的方法参数必须与声明方法的参数及返回类型一致\n\t- 带有返回参数类型&lt;T&gt;的返回值可以通过Task.result来获得\n</code></pre>\n<h2><a id=\"3_Await_69\"></a>3. 必要的Await表达式</h2>\n<pre><code>- 系统在官方提供了很多返回Task的方法，所以在调用官方方法时可检查是否有异步方法。如下面示例所调用的DownloadStringTaskAsync方法；\n- 尽管有很多的官方支持的方法，但在有时候仍需要创建自己的异步方法；\n</code></pre>\n<p><em>注意：<br/> 使用Async/Await 特性其实并没有创建新线程，异步里任务也是在主线程里完成的。</em></p>\n<p>看下一个Async/Await示例：此方法异步执行从设定的网站上下载并返回字符</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DownloadProgram</span>\n    <span class=\"token punctuation\">{<!-- --></span>        \n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>                    \t\n            <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> t1 <span class=\"token operator\">=</span> <span class=\"token function\">CountCharacters</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//异步调用字段，此处其返回类型为Task&lt;int&gt;，</span>\n            <span class=\"token comment\">//输入参数为String</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chars in https://www.baidu.com: {0}\"</span><span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CountCharacters</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> uriString<span class=\"token punctuation\">)</span><span class=\"token comment\">//异步声明方法，其定义异步方法的输入参数和返回类型，</span>\n        <span class=\"token comment\">//在声明方法中Async关键字是必要的</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">WebClient</span> wc1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting call {0} : {1, 10:N0} ms\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">.</span>TotalMilliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> wc1<span class=\"token punctuation\">.</span><span class=\"token function\">DownloadStringTaskAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span>uriString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Await关键字声明需要异步执行的步骤，其中 </span>\n             <span class=\"token comment\">//DownloadStringTaskAsync是官方提供的用于异步执行的语句，不可替换成其他的DowanLoadString语句</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Call {0} completed: {1, 10:N0} ms\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">.</span>TotalMilliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>   \n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h1><a id=\"WPFAsyncAwait_101\"></a>二、在WPF如何使用Async/Await特性？</h1>\n<h2><a id=\"1WPF_102\"></a>1.先展示一个WPF示例</h2>\n<blockquote>\n<p>l界面如下，当按下按钮Start开始执行异步方法，在下载完成网页内容将信息更新到上面的文本框中：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6cd44917e80f47299eb9358106e32934.png\"/></p>\n</blockquote>\n<p>新建一个WPF程序，并在XAML文件中插入下面语句，简单规划界面布局</p>\n<pre><code class=\"prism language-csharp\">\t <span class=\"token operator\">&lt;</span>Grid<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token class-name\">TextBox</span> Name<span class=\"token operator\">=</span><span class=\"token string\">\"ProcessTbox1\"</span> HorizontalAlignment<span class=\"token operator\">=</span><span class=\"token string\">\"Left\"</span> Height<span class=\"token operator\">=</span><span class=\"token string\">\"23\"</span> Margin<span class=\"token operator\">=</span><span class=\"token string\">\"0,53,0,0\"</span> TextWrapping<span class=\"token operator\">=</span><span class=\"token string\">\"Wrap\"</span> Text<span class=\"token operator\">=</span><span class=\"token string\">\"Null\"</span> VerticalAlignment<span class=\"token operator\">=</span><span class=\"token string\">\"Top\"</span> Width<span class=\"token operator\">=</span><span class=\"token string\">\"792\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token class-name\">Button</span> Name<span class=\"token operator\">=</span><span class=\"token string\">\"StartButton\"</span> Content<span class=\"token operator\">=</span><span class=\"token string\">\"Start\"</span> HorizontalAlignment<span class=\"token operator\">=</span><span class=\"token string\">\"Left\"</span> Margin<span class=\"token operator\">=</span><span class=\"token string\">\"209,189,0,0\"</span> VerticalAlignment<span class=\"token operator\">=</span><span class=\"token string\">\"Top\"</span> Width<span class=\"token operator\">=</span><span class=\"token string\">\"100\"</span> Height<span class=\"token operator\">=</span><span class=\"token string\">\"37\"</span> Click<span class=\"token operator\">=</span><span class=\"token string\">\"StartButton_Click\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token class-name\">Button</span> Name<span class=\"token operator\">=</span><span class=\"token string\">\"CancleButton\"</span> Content<span class=\"token operator\">=</span><span class=\"token string\">\"Cancle\"</span> HorizontalAlignment<span class=\"token operator\">=</span><span class=\"token string\">\"Left\"</span> Margin<span class=\"token operator\">=</span><span class=\"token string\">\"334,189,0,0\"</span> VerticalAlignment<span class=\"token operator\">=</span><span class=\"token string\">\"Top\"</span> Width<span class=\"token operator\">=</span><span class=\"token string\">\"102\"</span> Height<span class=\"token operator\">=</span><span class=\"token string\">\"37\"</span> Click<span class=\"token operator\">=</span><span class=\"token string\">\"CancleButton_Click\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Grid<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<p>在XAML.CS文件中插入执行语句如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainWindow</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Window</span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProcessReport</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Text<span class=\"token punctuation\">)</span><span class=\"token comment\">//异步声明方法</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">WebClient</span> Wc1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> strWebString <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Wc1<span class=\"token punctuation\">.</span><span class=\"token function\">DownloadStringTaskAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用官方异步方法DownLoadStringTaskAsync</span>\n            <span class=\"token keyword\">return</span> strWebString<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartButton_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RoutedEventArgs</span> e<span class=\"token punctuation\">)</span><span class=\"token comment\">//注意在按钮的Click事件前也添加了Async关键字，</span>\n        <span class=\"token comment\">//此为必须的否则在实际运行中系统会报警不能正常执行</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">WebClient</span> Wc1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> iWebStringLength <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">ProcessReport</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//利用Await声明异步任务，</span>\n            <span class=\"token comment\">//注意调用方法，Task.RUN()</span>\n            ProcessTbox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"The length of the web is\"</span> <span class=\"token operator\">+</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>iWebStringLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CancleButton_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RoutedEventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：</p>\n<ul><li>给按钮添加异步方法时有两个Awync/Await特性调用，这两个特性是必要的否则未为按钮添加特性会导致系统报警</li></ul>\n<hr/>\n<h1><a id=\"_156\"></a>三、如何创建并使用自己的异步方法？</h1>\n<p>看如下示例：</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DownloadProgram</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token class-name\">Stopwatch</span> sw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Stopwatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            sw<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> t1 <span class=\"token operator\">=</span> <span class=\"token function\">CountCharacters</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用异步方法</span>\n            \n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chars in https://www.baidu.com: {0}\"</span><span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CountCharacters</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> uriString<span class=\"token punctuation\">)</span><span class=\"token comment\">//声明异步方法</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">WebClient</span> wc1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting call {0} : {1, 10:N0} ms\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">.</span>TotalMilliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> wc1<span class=\"token punctuation\">.</span><span class=\"token function\">DownloadStringTaskAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span>uriString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Await声明异步任务调用DownloadStringTaskAsync</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Call {0} completed: {1, 10:N0} ms\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">.</span>TotalMilliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>     \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">DownloadProgram</span> D1 <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DownloadProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            D1<span class=\"token punctuation\">.</span><span class=\"token function\">DoRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_191\"></a>四、如何取消异步任务？</h1>\n<p>取消异步任务需要两个类：CancellationToken和CancellationTokenSource</p>\n<blockquote>\n<p>当需要取消单个任务时，可以使用CancellationToken，如果需要取消多个异步任务时需要使用CancellationTokenSource<br/> CancellationToken和CancellationTokenSource只包含了需要取消的信息，真正的取消需要在异步任务中去对输入参数做判断并停止任务<br/> 检查异步任务是否取消，需要在主任务中对CancellationToken或CancellationTokenSource进行判断，如果在异步任务中去做判断不能得到想要的结果</p>\n</blockquote>\n<p>如下示例中，分别在三个地方对异步任务是否取消进行检查并用Console.WriteLine进行输出，可以预测下在哪里可以判断出异步任务已经取消：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp_CancleAsync</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n       \n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">CancellationTokenSource</span> Cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">CancellationToken</span> Ct1 <span class=\"token operator\">=</span> Cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The calculation is begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Task</span> T1 <span class=\"token operator\">=</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Cts<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//Thread.Sleep(5000);//请注意当前线程主任务没有等待，如是加上此语句会有什么不同的结果？</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span><span class=\"token comment\">//1、在主线程执行的任务中进行取消检查</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main check: the AsyncTask is cancled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span><span class=\"token comment\">//2、在异步方法中进行取消检查</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The task have been cancled1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">CycleAdd</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n           \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span>  <span class=\"token function\">CycleAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\\\\<span class=\"token number\">3</span>、在异步任务方法中进行检查\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The task have been cancled2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                i1 <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The sum of int is {0}\"</span><span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最终输出为：</p>\n<pre><code class=\"prism language-csharp\">The calculation <span class=\"token keyword\">is</span> <span class=\"token class-name\">begin</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">3</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">6</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">10</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">15</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">21</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">28</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">36</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">45</span>\n<span class=\"token class-name\">Main</span> check<span class=\"token punctuation\">:</span> the AsyncTask <span class=\"token keyword\">is</span> <span class=\"token class-name\">cancled</span>\n</code></pre>\n<p>在测试中发现：如果在主任务完成的时候，异步任务仍没有完成，则异步任务也取消执行，如果在上面示例中在Cts.Cancel()后再添加一个阻塞则在输出结果中就会出现异步任务中的WriteLine输出</p>\n<pre><code class=\"prism language-csharp\">Cts<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nThread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//请注意当前线程主任务没有等待，如是加上此语句会有什么不同的结果？</span>\n</code></pre>\n<p>添加后的输出为：</p>\n<pre><code class=\"prism language-csharp\">The calculation <span class=\"token keyword\">is</span> <span class=\"token class-name\">begin</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">3</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">6</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">10</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">15</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">21</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">28</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">36</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">45</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">55</span>\nThe task have been cancled2\n<span class=\"token class-name\">Main</span> check<span class=\"token punctuation\">:</span> the AsyncTask <span class=\"token keyword\">is</span> <span class=\"token class-name\">cancled</span>\n</code></pre>\n<p>另外，如果在异步任务执行之前执行了Cts.Cancel();，则会直接显示出异步方法里的输出语句：</p>\n<pre><code class=\"prism language-csharp\">The calculation <span class=\"token keyword\">is</span> <span class=\"token class-name\">begin</span>\nThe task have been cancled1\n<span class=\"token class-name\">Main</span> check<span class=\"token punctuation\">:</span> the AsyncTask <span class=\"token keyword\">is</span> <span class=\"token class-name\">cancled</span>\n</code></pre>\n<h1><a id=\"_307\"></a>五、如何同步等待异步任务完成？</h1>\n<blockquote>\n<p>单个的异步任务可以调用Task.wait()来等待异步任务完成<br/> 如果需要多个异步任务完成则需要将多个异步任务合成数组，再调用Task数组的Waitall()或waitany()</p>\n</blockquote>\n<p>将上面示例进行改装如下：</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n       \n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">CancellationTokenSource</span> Cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">CancellationToken</span> Ct1 <span class=\"token operator\">=</span> Cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The calculation is begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n            <span class=\"token class-name\">Task</span> T1 <span class=\"token operator\">=</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//Cts.Cancel();</span>\n            T1<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//等待异步任务完成</span>\n            <span class=\"token comment\">//Console.WriteLine(\"Main check: the AsyncTask is completed\");</span>\n            <span class=\"token comment\">//Thread.Sleep(5000);</span>\n            \n            <span class=\"token comment\">//Thread.Sleep(5000);</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main check: the AsyncTask is cancled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main check: the AsyncTask is Completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The task have been cancled1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">CycleAdd</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n           \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span>  <span class=\"token function\">CycleAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The task have been cancled2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                i1 <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The sum of int is {0}\"</span><span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code class=\"prism language-csharp\">The calculation <span class=\"token keyword\">is</span> <span class=\"token class-name\">begin</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">3</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">6</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">10</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">15</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">21</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">28</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">36</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">45</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">55</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">66</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">78</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">91</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">105</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">120</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">136</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">153</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">171</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">190</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">210</span>\n<span class=\"token class-name\">Main</span> check<span class=\"token punctuation\">:</span> the AsyncTask <span class=\"token keyword\">is</span> <span class=\"token class-name\">Completed</span>\n</code></pre>\n<h1><a id=\"_400\"></a>六、如何异步的等待任务完成</h1>\n<blockquote>\n<p>异步等待任务与同步等待的区别在于异步等待不会占用主线程的时间<br/> 异步等待方法为task.WhenAll()和task.whenAny()<br/> 使用异步方法需要创建异步任务数组</p>\n</blockquote>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n       \n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">CancellationTokenSource</span> Cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">CancellationToken</span> Ct1 <span class=\"token operator\">=</span> Cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The calculation is begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n            <span class=\"token class-name\">Task</span> T1 <span class=\"token operator\">=</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Task</span> T2 <span class=\"token operator\">=</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Task<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Tasks <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> T1<span class=\"token punctuation\">,</span> T2 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建异步任务数组</span>\n\n            Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAll</span><span class=\"token punctuation\">(</span>Tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//异步等待任务完成</span>\n            \n            \n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//主线程需要阻塞，否则异步任务不能执行</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main check: the AsyncTask is cancled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main check: the AsyncTask is Completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The task have been cancled1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">CycleAdd</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n           \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span>  <span class=\"token function\">CycleAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The task have been cancled2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                i1 <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The sum of int is {0}\"</span><span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出如下：</p>\n<pre><code class=\"prism language-csharp\">The calculation <span class=\"token keyword\">is</span> <span class=\"token class-name\">begin</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">3</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">3</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">6</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">6</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">10</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">10</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">15</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">15</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">21</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">21</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">28</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">28</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">36</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">36</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">45</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">45</span>\n<span class=\"token class-name\">Main</span> check<span class=\"token punctuation\">:</span> the AsyncTask <span class=\"token keyword\">is</span> <span class=\"token class-name\">Completed</span>\n</code></pre>\n<h1><a id=\"_491\"></a>七、如何暂停异步任务而不影响主线程任务的执行？</h1>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n       \n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">CancellationTokenSource</span> Cts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">CancellationToken</span> Ct1 <span class=\"token operator\">=</span> Cts<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The calculation is begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n            <span class=\"token class-name\">Task</span> T1 <span class=\"token operator\">=</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Task</span> T2 <span class=\"token operator\">=</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Task<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Tasks <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> T1<span class=\"token punctuation\">,</span> T2 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAll</span><span class=\"token punctuation\">(</span>Tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//Cts.Cancel();</span>\n            <span class=\"token comment\">//T1.Wait();</span>\n            <span class=\"token comment\">//Console.WriteLine(\"Main check: the AsyncTask is completed\");</span>\n            <span class=\"token comment\">//Thread.Sleep(5000);</span>\n            \n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ct1<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main check: the AsyncTask is cancled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main check: the AsyncTask is Completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">AsyncAddSequence</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//异步Task 延迟2S时间</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The task have been cancled1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">CycleAdd</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n           \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span>  <span class=\"token function\">CycleAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The task have been cancled2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                i1 <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The sum of int is {0}\"</span><span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出如下：<br/> 刚才开始异步任务会有两秒的停顿，然后再运行</p>\n<pre><code class=\"prism language-csharp\">The calculation <span class=\"token keyword\">is</span> <span class=\"token class-name\">begin</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">3</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">3</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">6</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">6</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">10</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">10</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">15</span>\nThe sum of <span class=\"token keyword\">int</span> <span class=\"token keyword\">is</span> <span class=\"token number\">15</span>\n<span class=\"token class-name\">Main</span> check<span class=\"token punctuation\">:</span> the AsyncTask <span class=\"token keyword\">is</span> <span class=\"token class-name\">Completed</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}