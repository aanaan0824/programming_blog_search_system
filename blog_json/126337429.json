{"blogid": "126337429", "writerAge": "码龄1年", "writerBlogNum": "72", "writerCollect": "2610", "writerComment": "4589", "writerFan": "8349", "writerGrade": "6级", "writerIntegral": "8328", "writerName": "codeMak1r.小新", "writerProfileAdress": "writer_image\\profile_126337429.jpg", "writerRankTotal": "1737", "writerRankWeekly": "13", "writerThumb": "2774", "writerVisitNum": "208529", "blog_read_count": "1312", "blog_time": "于 2022-08-30 08:30:00 发布", "blog_title": "Vue/React实现路由鉴权/导航守卫/路由拦截(react-router v6)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/97e771e243f54675b3128989d52f551f.gif#pic_center\"/></p>\n<blockquote>\n<p><strong><font color=\"#FF7F50\"> 欢迎来到我的博客</font></strong><br/> <strong>📔博主是一名大学在读本科生，主要学习方向是前端。<br/> 🍭目前已经更新了<font color=\"#FF7F50\">【Vue】、【React–从基础到实战】、【TypeScript】等等系列专栏</font><br/> 🛠目前正在学习的是🔥<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          R\n         \n         \n          e\n         \n         \n          a\n         \n         \n          c\n         \n         \n          t\n         \n         \n          框架\n         \n        \n        \n         React框架\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0077em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">框架</span></span></span></span></span>🔥，中间穿插了一些基础知识的回顾<br/> 🌈博客主页👉<a href=\"https://blog.csdn.net/Svik_zy?type=blog\">codeMak1r.小新的博客</a></strong></p>\n<p></p>\n<div class=\"toc\">\n<h3>😇本文目录😇</h3>\n<ul><li><a href=\"#_15\">路由导航守卫</a></li><li><a href=\"#1_React_19\">1. React项目中</a></li><li><a href=\"#2_Vue_107\">2. Vue项目中</a></li></ul>\n</div>\n<p></p>\n<p><strong><font color=\"#FF7F50\">本文被专栏<a href=\"https://blog.csdn.net/svik_zy/category_11671445.html?spm=1001.2014.3001.5482\">【React–从基础到实战】</a>收录</font></strong></p>\n</blockquote>\n<blockquote>\n<p><strong><font color=\"#FF7F50\">🕹坚持创作✏️，一起学习📖，码出未来👨🏻‍💻！</font></strong></p>\n</blockquote>\n<h1><a id=\"_15\"></a>路由导航守卫</h1>\n<p><code>本节目标:</code> 能够实现未登录时访问拦截并跳转到登录页面（路由鉴权实现）</p>\n<h1><a id=\"1_React_19\"></a>1. React项目中</h1>\n<p><strong>实现思路</strong></p>\n<p>自己封装 <code>AuthRoute</code> 路由鉴权高阶组件，实现未登录拦截，并跳转到登录页面</p>\n<p>思路为：判断本地是否有token，如果有，就返回子组件，否则就重定向到登录Login</p>\n<p><strong>实现步骤</strong></p>\n<ol><li>在 components 目录中，创建 AuthRoute/index.js 文件</li><li>判断是否登录</li><li>登录时，直接渲染相应页面组件</li><li>未登录时，重定向到登录页面</li><li>将需要鉴权的页面路由配置，替换为 AuthRoute 组件渲染</li></ol>\n<p><strong>代码实现</strong></p>\n<p>components/AuthRoute/index.js</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 路由鉴权</span>\n<span class=\"token comment\">// 1. 判断token是否存在</span>\n<span class=\"token comment\">// 2. 如果存在 直接正常渲染</span>\n<span class=\"token comment\">// 3. 如果不存在 重定向到登录路由</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> Navigate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> getToken <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 高阶组件:把一个组件当成另外一个组件的参数传入 然后通过一定的判断 返回新的组件</span>\n<span class=\"token comment\">// 这里的AuthRoute就是一个高阶组件</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">AuthRoute</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{<!-- --></span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 获取token</span>\n  <span class=\"token keyword\">const</span> tokenStr <span class=\"token operator\">=</span> <span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 如果token存在 直接正常渲染</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokenStr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 如果token不存在，重定向到登录路由</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Navigate to<span class=\"token operator\">=</span><span class=\"token string\">'/login'</span> replace <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/*\n &lt;AuthRoute&gt; &lt;Layout /&gt; &lt;/AuthRoute&gt; \n 登录：&lt;&gt; &lt;Layout /&gt; &lt;/&gt;\n 非登录：&lt;Navigate to=\"/login\" replace /&gt;\n*/</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{<!-- --></span> AuthRoute <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注：utils工具函数<code>getToken</code>如下</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 从localstorage中取token</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getToken</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<p>src/routes/index.js路由表文件</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/pages/Layout\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Login <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/pages/Login\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> AuthRoute <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/AuthRoute\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// eslint-disable-next-line</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// 不需要鉴权的组件Login</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Login <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 需要鉴权的组件Layout</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>AuthRoute<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Layout <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>AuthRoute<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<h1><a id=\"2_Vue_107\"></a>2. Vue项目中</h1>\n<p><strong>实现思路</strong></p>\n<p>在Vue的router路由表文件中，存在官方封装好的API：<code>beforeEach</code>。</p>\n<p><strong>代码实现</strong></p>\n<p>/src/router/index.js</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token comment\">// 路由懒加载</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"login_home_welcome\" */</span> <span class=\"token string\">'../components/Login.vue'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Home</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"login_home_welcome\" */</span> <span class=\"token string\">'../components/Home.vue'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Welcome</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"login_home_welcome\" */</span> <span class=\"token string\">'../components/Welcome.vue'</span><span class=\"token punctuation\">)</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueRouter<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Login\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Home<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">'/welcome'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/welcome\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Welcome <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  routes\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 挂载路由导航守卫</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// to代表将要访问的路径</span>\n  <span class=\"token comment\">// from代表从哪个路径跳转而来</span>\n  <span class=\"token comment\">// next是一个函数，表示放行</span>\n  <span class=\"token comment\">//    next() 放行   next('/login') 强制跳转到login页面</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 获取token</span>\n  <span class=\"token keyword\">const</span> tokenStr <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tokenStr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router\n</code></pre>\n<blockquote>\n<p>代码解释：<br/> <code>router.beforeEach</code>用来设置Vue的路由导航守卫（路由拦截），其接收一个回调函数作为参数。<br/> 在回调函数内部，接收三个参数，顺序分别是：<code>to , from , next</code>。<br/> <strong>to代表将要访问的路径</strong><br/> <strong>from代表从哪个路径跳转而来</strong><br/> <strong>next是一个函数，表示放行</strong><br/> <code>next() =&gt; 放行</code> ， <code>next('/login') =&gt; 强制跳转到login页面</code></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}