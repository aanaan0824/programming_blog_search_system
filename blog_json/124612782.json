{"blogid": "124612782", "writerAge": "码龄4年", "writerBlogNum": "157", "writerCollect": "152", "writerComment": "22", "writerFan": "886", "writerGrade": "5级", "writerIntegral": "2020", "writerName": "强大的RGG", "writerProfileAdress": "writer_image\\profile_124612782.jpg", "writerRankTotal": "14081", "writerRankWeekly": "5805", "writerThumb": "63", "writerVisitNum": "74392", "blog_read_count": "3174", "blog_time": "已于 2022-06-29 20:34:31 修改", "blog_title": "关于vscode中配置c++环境的一些总结(launch.json task.json)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h4><a id=\"cVSCodec_0\"></a>首先如果你是初学者或者是对c++从源码到可执行程序过程不是很清楚的同学先不要用VSCode写c++，不然你会很痛苦。</h4>\n<h4><a id=\"vscodeVSCode_1\"></a>下面简单介绍下vscode配置的一些方法，授人以鱼不如授人以渔，我只记录下配置的原理，这样就能进行个性化配置，体会到VSCode的强大了：</h4>\n<p><a href=\"https://zhuanlan.zhihu.com/p/394595507\">本文参考链接</a></p>\n<ol><li>工程文件中的.vscode文件夹就是运行当前工程的配置文件，主要用到的是launch.json 和 task.json后面我将教你如何配置。task.json主要是在你编译时候用到的，它的作用是告诉 VS Code 如何构建（编译）程序，将调用 g++编译器从源代码创建一个可执行文件。launch.json主要是在调试程序的时候用到的。<br/> 终端-&gt;配置任务 进行创建task.json<br/> <a href=\"https://code.visualstudio.com/docs/editor/variables-reference\">task.json中关键字的说明</a><br/> 运行-&gt;添加配置 进行创建launch.json</li><li>ctrl+shift+p 输入edit可以对 c_cpp_properties.json 进行更改，这里面就可以进行一些编译器，头文件路径等的一些配置。</li><li>不用记每个<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n        \n         的\n        \n        \n         值\n        \n        \n         代\n        \n        \n         表\n        \n        \n         的\n        \n        \n         是\n        \n        \n         什\n        \n        \n         么\n        \n        \n         ，\n        \n        \n         可\n        \n        \n         以\n        \n        \n         直\n        \n        \n         接\n        \n        \n         用\n        \n       \n       \n        {}的值代表的是什么，可以直接用\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0em; vertical-align: 0em;\"></span><span class=\"mord\"></span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">什</span><span class=\"mord cjk_fallback\">么</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">直</span><span class=\"mord cjk_fallback\">接</span><span class=\"mord cjk_fallback\">用</span></span></span></span></span>{fileDirname}/…来进行替换，代表的就是当前的工作目录。</li></ol>\n<h3><a id=\"launchjson_11\"></a>launch.json</h3>\n<ol start=\"5\"><li>program:代表的是要调试的可执行文件的绝对路径</li><li>preLaunchTask: 代表的是在调试之前要执行的Task（与Task.json中label的一样，但是如果事先自己编译好了可以直接注释）。</li><li>重要的就是下面者两个<img alt=\"在这里插入图片描述\" src=\"image\\2ca47b7aa2674d5a86e8f1d1bd8ddbd3.png\"/></li></ol>\n<h3><a id=\"taskjson_17\"></a>task.json</h3>\n<p>这里面的args其实就相当于你在命令行中编译这个工程的时候所需要的。</p>\n<pre><code class=\"prism language-javascript\">\t\t\t<span class=\"token string-property property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token string\">\"-fdiagnostics-color=always\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"${fileDirname}/*.cpp\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"${fileDirname}/${fileBasenameNoExtension}\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"-lmysqlclient\"</span>\n\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p><strong>下面是使用CMake的task.json：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\1d1f8cbdf74b4ab98a2a8483c0a4ffea.png\"/><br/> 1，代表的是在执行launch.json开始调试之前要进行 Build的task<br/> 2，表示在执行task.json之前要进入到这个目录之下<br/> 3，这个里面的label要与launch.json中的preLaunchTask对应<br/> 4，表示在执行Build任务之前要执行前面的cmake 和 make任务</p>\n<h2><a id=\"CMakelaunchjsontaskjson_38\"></a>当使用CMake时候，launch.json和task.json的配置：</h2>\n<p><a href=\"https://blog.csdn.net/jackuylove/article/details/120614761?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165219507616782388022890%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165219507616782388022890&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-120614761-null-null.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&amp;utm_term=vscode%20%E7%94%A8cmake%E6%97%B6%E9%85%8D%E7%BD%AEjson&amp;spm=1018.2226.3001.4187\">参考链接</a></p>\n<p>在window中使用的时MinGW中的编译器，为了不让每次都加cmake -G “MinGW Makefiles” ，可以配置一个setting.json（对setting.json的配置可能需要重启后才能生效）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"cmake.preferredGenerators\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"MinGW Makefiles\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样就不用-G指定生成 MinGW Makefiles，<strong>还有就是make命令要变成 mingw32-make.exe</strong></p>\n<p>注意事项：<br/> <strong>如果报错信息是cmake找不到编译器时</strong>，<strong>在vscode搜索栏中输入 CMake：select a kit 来为cmake指定一个编译器（有时候可能需要删除掉build文件夹中之前生成的文件才能正常调试）</strong>。</p>\n<pre><code class=\"prism language-bash\">CMake：select a kit \n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}