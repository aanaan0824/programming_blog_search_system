{"blogid": "126726772", "writerAge": "码龄1年", "writerBlogNum": "404", "writerCollect": "239", "writerComment": "22", "writerFan": "9885", "writerGrade": "5级", "writerIntegral": "4288", "writerName": "前端的哭", "writerProfileAdress": "writer_image\\profile_126726772.jpg", "writerRankTotal": "4492", "writerRankWeekly": "731", "writerThumb": "50", "writerVisitNum": "201756", "blog_read_count": "42", "blog_time": "于 2022-09-06 15:45:02 发布", "blog_title": "Java中Map的 entrySet() 详解以及用法(四种遍历map的方式)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>Entry<br/> 由于Map中存放的元素均为键值对，故每一个键值对必然存在一个映射关系。<br/> Map中采用Entry内部类来表示一个映射项，映射项包含Key和Value (我们总说键值对键值对, 每一个键值对也就是一个Entry)<br/> Map.Entry里面包含getKey()和getValue()方法</p>\n<pre><code>Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; it=map.entrySet().iterator();\n    while(it.hasNext()) {\n        Map.Entry&lt;Integer,Integer&gt; entry=it.next();\n        int key=entry.getKey();\n        int value=entry.getValue();\n        System.out.println(key+\" \"+value);\n    }\n</code></pre>\n<h3><a id=\"entrySet_15\"></a>entrySet</h3>\n<p>entrySet是java中 键-值对的集合，Set里面的类型是Map.Entry，一般可以通过map.entrySet()得到。</p>\n<ul><li>entrySet实现了<strong>Set接口</strong>，里面存放的是键值对。一个K对应一个V。</li></ul>\n<p>用来遍历map的一种方法。</p>\n<pre><code>Set&lt;Map.Entry&lt;String, String&gt;&gt; entryseSet=map.entrySet();\n \nfor (Map.Entry&lt;String, String&gt; entry:entryseSet) {\n \n    System.out.println(entry.getKey()+\",\"+entry.getValue());\n \n}\n</code></pre>\n<p>即通过getKey（）得到K，getValue得到V。</p>\n<h3><a id=\"keySet_33\"></a>keySet</h3>\n<p>还有一种是keySet, keySet是键的集合，Set里面的类型即key的类型</p>\n<pre><code>Set&lt;String&gt; set = map.keySet();\n \nfor (String s:set) {\n \n    System.out.println(s+\",\"+map.get(s));\n \n}\n</code></pre>\n<h3><a id=\"Map_45\"></a>四种遍历Map方式:</h3>\n<pre><code>public static void main(String[] args) {\n \n    Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();\n    map.put(\"1\", \"value1\");\n    map.put(\"2\", \"value2\");\n    map.put(\"3\", \"value3\");\n  \n    //第一种：普遍使用，二次取值\n    System.out.println(\"通过Map.keySet遍历key和value：\");\n    for (String key : map.keySet()) {\n        System.out.println(\"key= \"+ key + \" and value= \" + map.get(key));\n    }\n  \n    //第二种\n    System.out.println(\"通过Map.entrySet使用iterator遍历key和value：\");\n    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();\n    while (it.hasNext()) {\n        Map.Entry&lt;String, String&gt; entry = it.next();\n        System.out.println(\"key= \" + entry.getKey() + \" and value= \" + entry.getValue());\n    }\n  \n    //第三种：推荐，尤其是容量大时\n    System.out.println(\"通过Map.entrySet遍历key和value\");\n    for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {\n        System.out.println(\"key= \" + entry.getKey() + \" and value= \" + entry.getValue());\n    }\n \n    //第四种\n    System.out.println(\"通过Map.values()遍历所有的value，但不能遍历key\");\n    for (String v : map.values()) {\n        System.out.println(\"value= \" + v);\n    }\n }\n</code></pre>\n<p>————————————————<br/> 版权声明：本文为CSDN博主「NO0b」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br/> 原文链接：https://blog.csdn.net/q5706503/article/details/85122343</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}