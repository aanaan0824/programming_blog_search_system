{"blogid": "126130852", "writerAge": "码龄1年", "writerBlogNum": "47", "writerCollect": "584", "writerComment": "568", "writerFan": "653", "writerGrade": "5级", "writerIntegral": "1612", "writerName": "沃和莱特", "writerProfileAdress": "writer_image\\profile_126130852.jpg", "writerRankTotal": "11287", "writerRankWeekly": "3169", "writerThumb": "357", "writerVisitNum": "76830", "blog_read_count": "1004", "blog_time": "于 2022-08-10 16:50:10 发布", "blog_title": "C++学习——前进（三）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>前言</h1>\n<p><mark>只有品尝过奋斗的滋味，才能体会人生的珍贵；只有勤耕不辍，才能不负韶华、不负自己。</mark><br/> 上一篇关于C++学习的文章 <a href=\"https://blog.csdn.net/weixin_64122448/article/details/125768521?spm=1001.2014.3001.5501\">C++学习——坚持（二）</a>主要学习了面向对象的一些基本概念，这篇文章主要对类和对象进行进一步的探讨。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a70486977a764990831b965f0d4c3aee.png\"/></p>\n<h2><a id=\"_5\"></a>一：构造函数</h2>\n<h3><a id=\"1_6\"></a>1：简单了解</h3>\n<p>对于编写程序来说，构造函数可谓是很关键的一部分了，在 c++中，为给对象进行初始化，就提供了一种叫做构造函数的机制，实际上就是为成员变量赋初值的。<br/> 构造函数是类中特殊的成员函数，属于类的一部分。当给出类的定义时，由程序员来编写构造函数，如果没有编写类的构造函数，就由系统添加一个参数表为空、函数体也为空的构造函数，也就是说任何类都至少有一个构造函数。<br/> 声明对象后，可以用运算符 new 为对象进行初始化，这时调用的是所属对象的构造函数。<code>构造函数的作用是完成对象的初始化工作，用来保证对象的初始状态是确定的</code>。</p>\n<h3><a id=\"2_11\"></a>2：如何定义构造函数</h3>\n<p>当我们在定义一个类时，需要为类定义一个相应的构造函数，构造函数的函数名与类名相同，并且没有返回值。同时构造函数允许重载（指在程序的同一范围内声明几个功能相似的同名函数）。</p>\n<blockquote>\n<p>构造函数的声明格式：<br/> <code>构造函数名（即类名）(形参1,形参2,......形参n);</code><br/> 我们假设一个类的成员变量是 X1，X2…Xn，那么在类体外定义构造函数时有以下几种方式：</p>\n</blockquote>\n<blockquote>\n<p>形式一：<br/> 类名::类名(形参1，形参2，…形参n);<br/> {<!-- --><br/> X1=形参1;<br/> X2=形参2;<br/> …<br/> Xn=形参n;<br/> }</p>\n</blockquote>\n<blockquote>\n<p>形式二：、<br/> 类名::类名()<br/> {<!-- --><br/> X1 = 初始化表达式1;<br/> X2 = 初始化表达式2;<br/> …<br/> Xn = 初始化表达式n;<br/> }</p>\n</blockquote>\n<blockquote>\n<p>形式三：<br/> 类名::类名(形参1,形参2,…形参n):X1(形参1),X2(形参2)…Xn(形参n){}<br/> 例如 ：使用固定值在初始化列表中为各个变量赋初值<br/> myDate::myDate():year(2022),month(2),day(2){} //三个函数的初始化均在初始化列表中完成<br/> 或使用带入的参数值通过初始化列表为各成员变量赋初值<br/> myDate::myDate(int y,int m,intd):year(y),month(m),day(d){}</p>\n</blockquote>\n<p><code>在编写构造函数时，能够赋初值的地方有两处：一处是在初始化列表中；一处是在构造函数体内部；构造函数中为成员变量初始化时，既不要有重复，也不要有遗漏</code></p>\n<h3><a id=\"3_45\"></a>3：怎么使用构造函数</h3>\n<p>当我们创建好一个对象时，系统就会根据创建对象的语句所提供的参数来选择调用哪一个构造函数去初始化该对象，系统在调用构造函数时是不需要程序员控制的。<br/> 假如没有提供参数，就调用无参的构造函数，并且类中定义了哪种构造函数，就决定了创建对象时可以使用那种形式。</p>\n<blockquote>\n<p>例如：定义一个myDate类，构造函数如下：<br/> myDate::myDate(int y = 2022,int m = 8,int d = 1)<br/> {<!-- --><br/> year = y;<br/> month = m;<br/> day = d;<br/> }<br/> //myDate类的三个参数都有默认值</p>\n</blockquote>\n<p>那么我们创建对象时，就可以采用以下形式：</p>\n<blockquote>\n<p>myDate d0; //输出2022/8/1<br/> myDate d1(2021); //输出 2021/8/1<br/> myDate d2(2021,9); //输出 2021/9/1<br/> myDate d3(2021,9,2); //输出 2021/9/2</p>\n</blockquote>\n<p><code>调用构造函数时，给定的实参从左至右与形参进行匹配，如果实参的个数少于形参的个数，则不足的形参使用默认值进行初始化。</code></p>\n<p>也可以通过构造函数创建对象指针</p>\n<blockquote>\n<p>假设在类体定义一个构造函数：<br/> myDate::myDate(int y,int m,int d)<br/> {<!-- --><br/> year = y;<br/> month = m;<br/> day = d;<br/> }<br/> 则创建对象时，可以采用：<br/> myData *pa = new myDate (2022,8,1);pa -&gt;printDate();</p>\n</blockquote>\n<p>比如我们声明了一个 Clock类，然后定义一个无参构造函数并调用它：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//声明无参构造函数 </span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//声明显示时间的成员函数 </span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">;</span><span class=\"token comment\">//声明表示小时的成员变量 </span>\n\t\t<span class=\"token keyword\">int</span> min<span class=\"token punctuation\">;</span> <span class=\"token comment\">//声明表示分钟的成员变量 </span>\n\t\t<span class=\"token keyword\">int</span> sec<span class=\"token punctuation\">;</span><span class=\"token comment\">//声明表示秒的成员变量\t </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//类外实现无参构造函数 </span>\n<span class=\"token punctuation\">{<!-- --></span>\n\thour<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化过程中直接给成员变量赋值 </span>\n\tmin<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsec<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//类外实现成员函数 </span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>hour<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\":\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token char\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>min<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\":\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token char\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>sec<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//setw(n)函数用于设置字段宽度为 n位；setfill()函数用于填充字符 </span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\tClock clock<span class=\"token punctuation\">;</span><span class=\"token comment\">//创建Clock对象clock </span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"clock\"</span><span class=\"token punctuation\">;</span>\n\tclock<span class=\"token punctuation\">.</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//对象调用成员函数 </span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ec48dddc18f545d894ed0618fc8f56d7.png\"/><br/> 同样的，我们定义一个有参构造函数并调用它;</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//声明有参构造函数 </span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//声明显示时间的成员函数 </span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> min<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> sec<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token comment\">//类外实现有参构造函数 </span>\n <span class=\"token punctuation\">{<!-- --></span>\n \thour<span class=\"token operator\">=</span>h<span class=\"token punctuation\">;</span><span class=\"token comment\">//将初始值赋给成员变量</span>\n\tmin<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>\n\tsec<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">void</span> <span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//类外声明成员函数 </span>\n <span class=\"token punctuation\">{<!-- --></span>\n \tcout<span class=\"token operator\">&lt;&lt;</span>hour<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\":\"</span><span class=\"token operator\">&lt;&lt;</span>min<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\":\"</span><span class=\"token operator\">&lt;&lt;</span>sec<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n  <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n  \tClock <span class=\"token function\">clock1</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建Clock对象 clock1，并传入初值</span>\n  \tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"clock1\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n  \tclock1<span class=\"token punctuation\">.</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//clock1调用成员函数showTime()，用于显示时间</span>\n  \tClock <span class=\"token function\">clock2</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建Clock对象 clock2，并传入初值</span>\n  \tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"clock2\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n  \tclock2<span class=\"token punctuation\">.</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//clock2调用成员函数showTime()</span>\n  \t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\50aac9c924564b13b647c90de9f51e04.png\"/></p>\n<p>那如果是定义一个含有成员对象的类的构造函数并调用呢?<br/> 我们举一个常用的学生和日期的例子，先定义一个日期类myDate，然后再定义一个学生类 Student，Student类中存放学生的姓名和出生日期，其中出生日期类的对象作为Student类的成员变量：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">myDate</span>  <span class=\"token comment\">//创建myDate类</span>\n<span class=\"token punctuation\">{<!-- --></span> \n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">myDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  \t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">myDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">day</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"myDate类构造函数\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> myDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"出生日期:\"</span><span class=\"token operator\">&lt;&lt;</span>year<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">&lt;&lt;</span>month<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">&lt;&lt;</span>day<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> \n <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token comment\">//创建Student类</span>\n <span class=\"token punctuation\">{<!-- --></span>\n \t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n \t\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>string n<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   \t \t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n   \t\tstring name<span class=\"token punctuation\">;</span>\n    \tmyDate date<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n <span class=\"token comment\">//类外实现构造函数</span>\n<span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>string n<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Student类构造函数\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//类外实现show()函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"姓名：\"</span><span class=\"token operator\">&lt;&lt;</span>name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    date<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Student <span class=\"token function\">stu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lili\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2003</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建学生对象stu</span>\n    stu<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//显示学生信息</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\33f75abdc3b94576812ed3262c59d499.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\e4093a9c077a473a93b20161ac7e3e26.png\"/></p>\n<h2><a id=\"_211\"></a>二：复制构造函数</h2>\n<p>复制构造函数也是构造函数的一种，它的作用是使用一个已存在的对象去初始化另一个正在创建的对象。</p>\n<p>复制构造函数的格式：<br/> <code>类名::类名(const 类名 &amp;)</code> 为了不改变原有的对象，通常用const 来限定。<br/> 或者<br/> <code>类名::类名(类名 &amp;)</code></p>\n<p>声明和实现复制构造函数的一般格式：</p>\n<blockquote>\n<p>class 类名<br/> {<!-- --><br/> public：<br/> 类名（形参表）; //构造函数<br/> 类名（类名 &amp; 对象名）; //复制构造函数<br/> …<br/> };<br/> 类名::类名(类名 &amp; 对象名) // 实现复制构造函数<br/> { <br/> 函数体<br/> }</p>\n</blockquote>\n<p>需要注意的是，如果类中没有自行定义复制构造函数，那么编译器就会自动生成一个复制构造函数，通常是使得目标对象的每个成员变量都和源对象相等。自动生成的复制构造函数也叫做默认复制构造函数。默认构造函数不一定存在，但是复制构造函数一定存在。</p>\n<h3><a id=\"1_233\"></a>1：调用默认的复制构造函数：</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">double</span> real<span class=\"token punctuation\">,</span>imag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t\treal<span class=\"token operator\">=</span>r<span class=\"token punctuation\">;</span>\n\t\timag<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tComplex <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//声明Complex的对象c1并赋值</span>\n\tComplex <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//c1作为c2的参数，并调用默认复制构造函数对c2进行初始化</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"c2：(\"</span><span class=\"token operator\">&lt;&lt;</span>c2<span class=\"token punctuation\">.</span>real<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span>c2<span class=\"token punctuation\">.</span>imag<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cc89fc0b77fa48888349f351e9404e84.png\"/><br/> 从输出结果可以看到没有自行定义一个复制构造函数时，编辑器就会调用默认的复制构造函数对c2初始化，此时c2就成为c1的复制品。</p>\n<p>当定义了复制构造函数时，编辑器就不会再生成默认的复制构造函数了</p>\n<h3><a id=\"2_261\"></a>2：调用自定义的复制构造函数：</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n   <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span> \n   <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">double</span> real<span class=\"token punctuation\">,</span> imag<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            real <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span> imag <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex <span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//复制构造函数的声明</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\">Complex</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex <span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//复制构造函数的实现 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n            real <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>real<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n            imag <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>imag<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"自定义复制构造函数\"</span><span class=\"token operator\">&lt;&lt;</span>endl <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tComplex <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用默认的复制构造函数 </span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"c1: (\"</span><span class=\"token operator\">&lt;&lt;</span>c1<span class=\"token punctuation\">.</span>real<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span>c1<span class=\"token punctuation\">.</span>imag<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\")\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tComplex <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用复制构造函数初始化c2</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"c2: (\"</span><span class=\"token operator\">&lt;&lt;</span>c2<span class=\"token punctuation\">.</span>real<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span>c2<span class=\"token punctuation\">.</span>imag<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\")\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>或者是在类体内完成复制构造函数的声明和实现：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> real<span class=\"token punctuation\">,</span> imag<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        real <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span> \n        imag <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex <span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        real <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>real<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        imag <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>imag<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Copy Constructor called\"</span><span class=\"token operator\">&lt;&lt;</span>endl <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\26a4b011139344f38a756d0d1380f49a.png\"/></p>\n<blockquote>\n<p>自动调用复制构造函数的情况有：<br/> 1：当用一个对象去初始化本类的另一个对象时，就会调用复制构造函数：<br/> 类名 对象名2(对象名1);<br/> 类名 对象名2=对象名1;<br/> 2：如果函数F的参数是类A的对象，那么调用F的时候，就会调用类A的复制构造函数；<br/> 3：如果函数的返回值是类A的对象，那么当函数返回时，会调用类A的复制构造函数。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b7d3ca4e08b240db8783b9b9c037e3b4.png\"/></p>\n<h2><a id=\"_324\"></a>三：析构函数</h2>\n<p>析构函数也是成员函数的一种，它的名字和类名相同，类名前面要加一个字符“~”，用于区分构造函数。析构函数没有参数也没有返回值，一个类中有且仅有一个析构函数。若程序中没有定义析构函数，编辑器会自动生成一个函数体为空的默认析构函数，<br/> 它的作用是在对象销毁之前，做一个清理善后的工作，保证空间的可利用性。</p>\n<p><code>析构函数会在对象销毁时被调用</code>，举个简单的例子：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Deom</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token operator\">~</span><span class=\"token function\">Deom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"调用析构函数\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tDeom deo<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//局部变量在超出局部作用域后对象销毁，这时调用析构函数 </span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"调用完毕\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1d01853d4a5e4f348e04256cd466f178.png\"/></p>\n<blockquote>\n<p>当使用new运算符生成对象指针时，编辑器会自动调用本类的析构函数；使用delete删除这个对象时，首先为这个动态对象调用本类的析构函数，然后再释放占用的空间。</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"A的构造函数\"</span>\t<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"A的析构函数\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tA <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//在B中定义一个指针 </span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"B的构造函数\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> A<span class=\"token punctuation\">;</span><span class=\"token comment\">//指针指向堆区空间 ，使用new生成对象指针时，自动调用本类的构造函数 </span>\n\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">~</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"B的析构函数\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">delete</span> a<span class=\"token punctuation\">;</span><span class=\"token comment\">//使用关键字new 创建的对象，用delete来撤销 ；使用delete删除这个对象时，首先调用本类的析构函数，再释放占用的内存。 </span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tB b<span class=\"token punctuation\">;</span><span class=\"token comment\">//B的对象b定义在栈区，出栈之后自动调用本类的析构函数 </span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f2372eca12304aa38c22dca75230aa39.png\"/></p>\n<p>假如将“delete a；”注释掉，那么就会出现内存泄露的情况，而析构函数可以清理类中有指针、并且指向堆区空间的成员,释放指针指向的堆区空间,防止内存泄露。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\af1a3b1e0da549e4a27920e0997ca99a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\9d27d521ce344c10a444a1dd14738691.png\"/></p>\n<h2><a id=\"this_394\"></a>四：this指针</h2>\n<p>类的每个成员函数中都包含 this这个特殊的指针，this 实际上是成员函数的一个形参，在调用成员函数时将对象的地址作为实参传递给 this。它指向当前的对象，通过它可以访问当前对象的所有成员。</p>\n<p>在类的成员函数中，当形参的名字和与变量的名字相同时，通常要在成员变量名前面加上“this-&gt;”，用于区分成员变量名和形参名。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">double</span> real<span class=\"token punctuation\">,</span>imag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">imag</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tComplex <span class=\"token function\">AddReal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tComplex <span class=\"token function\">AddImag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">outPut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Complex</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> real<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> imag<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>real<span class=\"token operator\">=</span>real<span class=\"token punctuation\">;</span> <span class=\"token comment\">//在Complex带参构造函数中，根据变量前是否使用 “this-&gt;”，区分是类的成员变量还是构造函数的参数 </span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>imag<span class=\"token operator\">=</span>imag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Complex</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">outPut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"(\"</span><span class=\"token operator\">&lt;&lt;</span>real<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span>imag<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nComplex <span class=\"token class-name\">Complex</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AddReal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>real<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//“this”代表的是函数所作用的对象，这里在进入AddReal() 函数后，“*this ”就是c1，它的类型就是类Complex 。并且修改的是c1的值。 </span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回的是c1对象本身 </span>\n<span class=\"token punctuation\">}</span>\nComplex <span class=\"token class-name\">Complex</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AddImag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>imag<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tComplex <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">,</span>c3<span class=\"token punctuation\">;</span>\n\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">outPut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tc2<span class=\"token punctuation\">.</span><span class=\"token function\">outPut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tc3<span class=\"token punctuation\">.</span><span class=\"token function\">outPut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"分界线\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tc2<span class=\"token operator\">=</span>c1<span class=\"token punctuation\">.</span><span class=\"token function\">AddReal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将c1进入AddReal（）函数后的返回对象赋给c2 </span>\n\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">outPut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tc3<span class=\"token operator\">=</span>c1<span class=\"token punctuation\">.</span><span class=\"token function\">AddImag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将c1进入AddReal()函数后再进入AddImag()的返回对象 赋给c3 </span>\n\tc2<span class=\"token punctuation\">.</span><span class=\"token function\">outPut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tc3<span class=\"token punctuation\">.</span><span class=\"token function\">outPut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\767678a0fc4e4f1d9063e55a5e306a77.png\"/><br/> 需要注意的是：</p>\n<blockquote>\n<ol><li>this 是 const 指针，它的值是不能被修改的；</li><li>this 只能在成员函数内部使用，用在其他地方没有意义，也是非法的；</li><li>只有当对象被创建后 this 才有意义，类的静态成员函数是没有 this 指针的。</li></ol>\n</blockquote>\n<h1><a id=\"_454\"></a>总结</h1>\n<p>山一程，水一程，走过的都是风景。愿你付出有所得，所想皆成真，在这个秋季，收获更好的自己。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\76fcfa86ac234f139b0cf76a9c2c7e68.png\"/><br/> 初学乍道，如有不足，望前辈们指正，感谢！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}