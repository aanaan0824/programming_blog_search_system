{"blogid": "125517245", "writerAge": "码龄3年", "writerBlogNum": "63", "writerCollect": "296", "writerComment": "405", "writerFan": "1464", "writerGrade": "4级", "writerIntegral": "1517", "writerName": "准Java全栈开发工程师", "writerProfileAdress": "writer_image\\profile_125517245.jpg", "writerRankTotal": "15737", "writerRankWeekly": "21610", "writerThumb": "400", "writerVisitNum": "14769", "blog_read_count": "910", "blog_time": "已于 2022-07-06 18:08:15 修改", "blog_title": "【MyBatis-Plus】DQL", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>👉 博客主页：<a href=\"https://blog.csdn.net/Coder_Farmer\">准Java全栈开发工程师</a><br/> 👉 00年出生，即将进入职场闯荡，目标赚钱，可能会有人觉得我格局小、觉得俗，但不得不承认这个世界已经不再是以一条线来分割的平面，而是围绕财富旋转的球面，成为有钱人不是为了去掌控球体的转向，而是当有人恶意掌控时，努力保护好家人和自己。</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>DQL</h3>\n<ul><li><a href=\"#_4\">一、条件查询</a></li><li><ul><li><ul><li><a href=\"#1_QueryWrapper_7\">1、方式一：使用 QueryWrapper</a></li><li><a href=\"#2_lambda__22\">2、方式二：使用 lambda 格式</a></li><li><a href=\"#3_LambdaQueryWrapper_33\">3、方式三（推荐）：使用 LambdaQueryWrapper</a></li><li><a href=\"#4__and_45\">4、多条件查询 — and</a></li><li><a href=\"#5__or_66\">5、多条件查询 — or</a></li><li><a href=\"#6null__79\">6、null 值判定</a></li><li><a href=\"#7_85\">7、查询条件</a></li><li><ul><li><ul><li><a href=\"#groupBy__86\">groupBy 分组查询</a></li><li><a href=\"#between__89\">between 范围查询</a></li><li><a href=\"#like__92\">like 模糊查询</a></li><li><a href=\"#orderBy__97\">orderBy 顺序查询</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_106\">二、查询投影</a></li><li><ul><li><ul><li><a href=\"#1_QueryWrapper__108\">1、方式一：使用 QueryWrapper 查询</a></li><li><a href=\"#2_LambdaQueryWrapper__122\">2、方式二：使用 LambdaQueryWrapper 查询</a></li><li><a href=\"#3_133\">3、聚合查询</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_147\">三、映射匹配兼容问题</a></li><li><ul><li><ul><li><a href=\"#_1__148\">问题 1 ：表字段与实体类属性不一致</a></li><li><a href=\"#_2__152\">问题 2 ：实体类中添加了数据库表中未定义的字段</a></li><li><a href=\"#_3__156\">问题 3 ：查询时取消查询某个字段</a></li><li><a href=\"#_4__161\">问题 4 ：表名与实体类名不一致</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_4\"></a>一、条件查询</h1>\n<ul><li>在前面介绍标准的 CRUD 操作时，我们就涉及到了 Wrapper 的内容，当时并没有做过多的介绍，现在来简单介绍一下。</li><li>在进行查询操作时，我们通常都会涉及到一些条件的设定，如：年龄大于18小于30，性别为男等，这些条件我们可以在 SQL 语句中通过 where 条件指定，但是因为我们现在使用了 MP 提供的方法，有些方法我们不再手动书写 SQL 语句，如果还想要指定一些查询条件，我们就需要使用 Wrapper 来实现。</li></ul>\n<h3><a id=\"1_QueryWrapper_7\"></a>1、方式一：使用 QueryWrapper</h3>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> qw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 查询年龄小于25岁的记录</span>\n        qw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>qw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0efe38a706964e96a88787ab14e4f771.png\"/></p>\n<ul><li>使用 lt 方法，第一个参数 column 指定列名，第二个参数 val 指定具体的数值，相当于在 SQL 语句中指定了 where age &lt; 25 条件。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\341c300d7d2f42b19324fcce7617ef64.png\"/></li></ul>\n<h3><a id=\"2_lambda__22\"></a>2、方式二：使用 lambda 格式</h3>\n<ul><li>使用方式一指定列名时，可能会出现列名编写错误问题，所以提出了使用 lambda 格式 “User::getAge” 的方式指定，使用该方式不会存在编写错误问题，但是要求在实体类中定义。</li></ul>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> qw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qw<span class=\"token punctuation\">.</span><span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>qw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"3_LambdaQueryWrapper_33\"></a>3、方式三（推荐）：使用 LambdaQueryWrapper</h3>\n<ul><li>方式二虽然使用了 lambda 格式，但是仍然使用的是 QueryWrapper 对象，每次指定条件时都需要加上 lambda() ，显得非常的繁琐，所以又推出了 LambdaQueryWrapper ，可直接调用需要的查询条件。</li></ul>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>除此之外，还提供了许多其他查询条件，可根据自己的业务需要进行调用。</li></ul>\n<h3><a id=\"4__and_45\"></a>4、多条件查询 — and</h3>\n<ul><li>需求：查询出年龄大于18小于30的用户信息。</li></ul>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>该种情况属于 and 并的情况，需要同时满足两个条件，就相当于 where age &gt; 18 and age &lt; 30。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\11a5cd818201463f946aecb3d6274745.png\"/></li><li>链式编写规则。</li></ul>\n<pre><code class=\"prism language-java\">lqw<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用链式规则可写为：</span>\nlqw<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"5__or_66\"></a>5、多条件查询 — or</h3>\n<p>需求：查询年龄小于18或大于30的用户信息。</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>同样，如果是 或 的关系，只需要加上 or() 方法的调用即可。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1608e84eb3bb4714972c5a93201d38c7.png\"/></li></ul>\n<h3><a id=\"6null__79\"></a>6、null 值判定</h3>\n<ul><li>如果我们的查询条件的值不是直接进行赋值指定的，而是通过 getXxx 方法获得，那么就有可能会出现获取到 null 值的情况，这个时候再去进行查询操作就无法正确得到我们想要的结果。那应该怎么办呢？按照我们之前的做法，会选择使用 if 条件判断，如果不为空再添加上该查询条件，但是如果涉及到很多这种可能为空的情况，那我们岂不是得写好多 if 语句啊，有没有什么简单点的写法呢？这肯定是有的，不然我前面也不用说那么并不是很重要的废话。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7c90f47871a74f139bf51054b604765a.png\"/></p>\n<ul><li>注意观察第三行 gt 方法，第一个参数为 boolean 型的条件，之后才是列名，所以我们就可以将 if 条件中的判空语句写至该处，之后再书写列名等内容，使用一行代码就能够解决问题。</li><li>很多方法的第一个参数都提供了 condition 条件判断，只有为 true 时才能完成指定工作。</li></ul>\n<h3><a id=\"7_85\"></a>7、查询条件</h3>\n<h5><a id=\"groupBy__86\"></a>groupBy 分组查询</h5>\n<ul><li>column 指明按照哪个字段查询。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\925799c2c0824504a3677ef93e9baeee.png\"/></li></ul>\n<h5><a id=\"between__89\"></a>between 范围查询</h5>\n<ul><li>第一个参数 column 指明列名，第二、三个参数指定数值，between 的效果为小于第二个参数值大于第三个参数值，注意顺序不要弄反。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c6a21daa48d84ce6bb9b3187640b3a74.png\"/></li></ul>\n<h5><a id=\"like__92\"></a>like 模糊查询</h5>\n<ul><li>like 方法的第一个参数 column 指定列名，第二个参数 val 指定值，前后都会加 % ，如：指定值为 J ，则会模糊查询 %J% 。</li><li>likeLeft 表示在前面加 %，如：%J。</li><li>likeRight 表示在后面加 %，如：J%。与 likeLeft 还是有本质上的区别的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0260cd95c53646578a10ba922123a5ad.png\"/></li></ul>\n<h5><a id=\"orderBy__97\"></a>orderBy 顺序查询</h5>\n<ul><li>orderBy排序 \n  <ul><li>condition：条件，true 则进行排序，false 则不进行排序。</li><li>isAsc：是否为升序，true升序，false降序。</li><li>columns：排序字段，可以有多个。</li></ul> </li><li>orderByAsc / Desc（单个 column ）：按照指定字段进行升序 / 降序。</li><li>orderByAsc / Desc（多个 column ）：按照多个字段进行升序/降序。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\29bd8a75e9a043c9a4df4d42494d4497.png\"/></li><li>除此之外，还有其他的方法可以使用，在此就不再一一介绍，感兴趣的可以去官网提供的 <a href=\"https://baomidou.com/pages/10c804/#abstractwrapper\">条件构造器</a> 中查看，不仅是中文，而且还非常的详细。</li></ul>\n<h1><a id=\"_106\"></a>二、查询投影</h1>\n<ul><li>何为查询投影，说白了就是在查询操作时，指定查询的字段内容。</li></ul>\n<h3><a id=\"1_QueryWrapper__108\"></a>1、方式一：使用 QueryWrapper 查询</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f05f0744f38c40bca67e5a70e27eb05c.png\"/></p>\n<ul><li>使用 select 方法指定需要查询的字段名，字段名需要和数据库表中的字段名保持一致，可以填写多个，每个字段名以字符串的方式指定，该方式由 QueryWrapper 提供。</li></ul>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> qw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qw<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>qw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>因为并没有指定查询 password 的信息，所以查询出的数据中 password 值均为 null。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a4fad6d6fe744fb189966cc2b4ccf584.png\"/></li></ul>\n<h3><a id=\"2_LambdaQueryWrapper__122\"></a>2、方式二：使用 LambdaQueryWrapper 查询</h3>\n<ul><li>虽然使用的都是 select 方法，但是传入的参数类型确是不同的，使用的是 lambda 格式风格，使用该方式不会出现字段名写错问题，但是只能写实体类中定义的数据。</li></ul>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> lqw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lqw<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lqw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"3_133\"></a>3、聚合查询</h3>\n<ul><li>如果我们想要使用一些函数获取信息，如使用 count方法 获得数据总和条目信息等，这种方式只能使用 QueryWrapper 实现。</li></ul>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> qw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qw<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count(*) as count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> maps <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectMaps</span><span class=\"token punctuation\">(</span>qw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>同样使用的是 select 方法，然后不再写字段名，而是写所涉及到的函数即可。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\caec220c9b5a4dd6ba6b5e2aab5aa657.png\"/></li></ul>\n<h1><a id=\"_147\"></a>三、映射匹配兼容问题</h1>\n<h3><a id=\"_1__148\"></a>问题 1 ：表字段与实体类属性不一致</h3>\n<ul><li>当表的列名和实体类的属性名不一致时，如：表中字段名为 pwd，实体类属性名为 password，就会导致数据封装不到模型对象，这个时候就需要其中一方做出修改，那如果双方均不想修改或不能修改时该如何解决?</li><li>使用 @TableField 注解解决映射关系不一致问题，value 指定与表中哪个字段映射。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2d19d7f6b409471889ed72eab45ebe08.png\"/></li></ul>\n<h3><a id=\"_2__152\"></a>问题 2 ：实体类中添加了数据库表中未定义的字段</h3>\n<ul><li>当实体类中定义了 online 在线人数属性但数据库对应的表中并没有定义该字段时，如果我们什么也不做在进行 CRUD 操作时就会报错，为了能够正常操作，除了在数据库表中添加相应的字段外，我们还可以通过什么方式解决该问题呢？</li><li>仍然使用 @TableField 注解，将 exist 赋值为 false，则代表该字段可以不出现在数据库表中。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d02b8114a85642e68346b6b16696ef9e.png\"/></li></ul>\n<h3><a id=\"_3__156\"></a>问题 3 ：查询时取消查询某个字段</h3>\n<ul><li>通常情况下，我们都会将所有字段查询出来，但是如果我们想在查询时取消某个或某些字段的查询，如：password 密码字段，应该怎么做呢。</li><li>仍然使用 @TableField 注解，将 select 赋值为 false，表示查询时不查询该字段信息。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1b63d1fa31cb41d58d876a8bdf8bbda0.png\"/></p>\n<h3><a id=\"_4__161\"></a>问题 4 ：表名与实体类名不一致</h3>\n<ul><li>表名为 “ tbl_user ”，而实体类名为 “ user ”，这时两者并不能完成映射关系，在不修改双方的前提下该如何解决呢？</li><li>使用 @TableName 注解指定该实体类所映射的表名，完成映射。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\208a8fcead3545cda49aa738959f96c8.png\"/></li></ul>\n<blockquote>\n<p>👉 以上就是文章的全部内容啦，诸佬如果有任何建议都可以提哦。<br/> 👉 创作不易，如果觉得对您有帮助的话，欢迎关注✨点赞👍收藏📂哦。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}