{"blogid": "125397600", "writerAge": "码龄4年", "writerBlogNum": "2", "writerCollect": "22", "writerComment": "1", "writerFan": "60", "writerGrade": "1级", "writerIntegral": "28", "writerName": "迷糊虫子l", "writerProfileAdress": "writer_image\\profile_125397600.jpg", "writerRankTotal": "170448", "writerRankWeekly": "488531", "writerThumb": "6", "writerVisitNum": "2252", "blog_read_count": "1258", "blog_time": "已于 2022-07-01 15:47:33 修改", "blog_title": "海康VisionMaster-脚本模块", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>VM是海康机器人自主研发的机器视觉软件，将一系列的图像算法、逻辑工具和通讯协议等封装成图形化模块，致力于帮助客户提供快速搭建视觉应用、解决视觉难题，能够满足视觉定位、尺寸测量、缺陷检测以及信息识别等机器视觉应用。<br/> 转自：<a href=\"https://www.v-club.com/home\">机器视觉技术交流社区</a></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#1__5\">1 引言</a></li><li><a href=\"#2__8\">2 脚本模块</a></li><li><ul><li><a href=\"#21__16\">2.1 接口介绍</a></li><li><a href=\"#22__48\">2.2 引用和调试</a></li><li><a href=\"#23_VM42_56\">2.3 VM4.2的更新</a></li></ul>\n</li><li><a href=\"#3__60\">3 案例演示</a></li><li><a href=\"#4__157\">4 总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1__5\"></a>1 引言</h1>\n<p>在VM的工具箱中，虽然已经包含了一百多个算法模块可供用户通过连线组合的方式来完成相应的视觉需求，但仍存在一些数据处理逻辑是工具箱中的模块所不涵盖的。此时，脚本模块就可以体现数据处理的灵活性。<strong>脚本使用的常用场景包括：日志打印、坐标排序、定位偏差计算、检测结果分类、图像格式转换、联合OpenCV开发等等。</strong><br/> 脚本模块主要是需要确定输入变量、输出变量以及数据处理逻辑。可导入或导出已经编写的脚本内容，脚本文本格式的后缀为cs；可编辑程序集来调用第三方库；可直接在脚本编辑页面编写代码、预编译和执行；也可导出当前脚本的工程，直接就会打开工程所在文件夹，再用VS打开工程、附加进程就可以进行脚本的调试，具体介绍见脚本模块章节。</p>\n<h1><a id=\"2__8\"></a>2 脚本模块</h1>\n<p>双击打开脚本模块，界面如下所示，可以分为五个区域：变量输入区、变量输出区、菜单栏、C#编程区、提示区。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\418ca3a4fbc54710878757ebaa5cfaed.png\"/></p>\n<p>C#编程区的代码可分为三部分：命名空间、初始化函数、执行函数。Init()函数为初始化函数，Process()为执行函数。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\359887a6cde64fdf8c37bae9a18af107.png\"/></p>\n<h2><a id=\"21__16\"></a>2.1 接口介绍</h2>\n<p>使用脚本模块的目的，主要是为了处理数据，那么就需要获取脚本输入的数据以及通过设置数据将脚本某些结果进行输出，因此需要了解相应的获取和设置数据的接口函数。针对不同类型的数据有不同的接口函数，如：string、float、int、byte、image等数据类型的获取和设置接口大同小异。另外，还可以使用通信的发送数据接口，全局变量获取及设置接口，模块的结果获取和运行参数设置。</p>\n<ol><li>数据类型接口</li></ol>\n<table><thead><tr><th align=\"left\">功能</th><th>函数方法</th><th>参数说明</th></tr></thead><tbody><tr><td align=\"left\">获取int型</td><td>GetIntValue(string paramName, ref int paramValue)</td><td>输入：变量名paramName；输出：变量值paramValue</td></tr><tr><td align=\"left\">获取float型</td><td>GetFloatValue (string paramName, ref float paramValue)</td><td>输入：变量名paramName；输出：变量值paramValue</td></tr><tr><td align=\"left\">获取string型</td><td>GetStringValue (string paramName, ref string paramValue)</td><td>输入：变量名paramName；输出：变量值paramValue</td></tr><tr><td align=\"left\">获取byte型</td><td>GetBytesValue (string paramName,ref byte[] paramValue)</td><td>输入：变量名paramName；输出：变量值paramValue</td></tr><tr><td align=\"left\">获取图像数据</td><td>GetIMAGEValue (string paramName, ref Image paramValue)</td><td>输入：变量名paramName；输出：变量值paramValue</td></tr><tr><td align=\"left\">获取int型数组</td><td>GetIntArrayValue(string paramName, ref int[] paramValue，out int arrayCount)</td><td>输入：变量名paramName；输出：变量值paramValue，数组个数arrayCount</td></tr><tr><td align=\"left\">获取float型数组</td><td>GetFloatArrayValue(string paramName, ref float[] paramValue，out int arrayCount)</td><td>输入：变量名paramName；输出：变量值paramValue，数组个数arrayCount</td></tr><tr><td align=\"left\">获取string型数组</td><td>GetStringArrayValue(string paramName, ref string[] paramValue，out int arrrayCount)</td><td>输入：变量名paramName；输出：变量值paramValue，数组个数arrayCount</td></tr><tr><td align=\"left\">设置int型</td><td>SetIntValue(string key, int value)</td><td>输入：变量名key，变量值value</td></tr><tr><td align=\"left\">设置float型</td><td>SetFloatValue (string key, float value)</td><td>输入：变量名key，变量值value</td></tr><tr><td align=\"left\">设置string型</td><td>SetStringValue (string key, string value)</td><td>输入：变量名key，变量值value</td></tr><tr><td align=\"left\">设置byte型</td><td>SetBytesValue (string key, byte[] value)</td><td>输入：变量名key，变量值value</td></tr><tr><td align=\"left\">设置图像数据</td><td>SetImageValue (string key, Image value)</td><td>输入：变量名key，变量值value</td></tr><tr><td align=\"left\">设置int型数组</td><td>SetIntValueByIndex(string key, int[] value, int index, int total)</td><td>输入：变量名key，变量值value，数组索引index，数组元素个数total</td></tr><tr><td align=\"left\">设置float型数组</td><td>SetFloatValueByIndex (string key, float[] value, int index, int total)</td><td>输入：变量名key，变量值value，数组索引index，数组元素个数total</td></tr><tr><td align=\"left\">设置string型数组</td><td>SetStringValueByIndex(string key, string[] value, int index, int total)</td><td>输入：变量名key，变量值value，数组索引index，数组元素个数total</td></tr></tbody></table>\n<ol start=\"2\"><li>其它接口</li></ol>\n<table><thead><tr><th align=\"left\">功能</th><th>函数方法</th><th>参数说明</th></tr></thead><tbody><tr><td align=\"left\">设置全局变量</td><td>GlobalVariableModule.SetValue(string paramName,string paramValue)</td><td>输入：变量名paramName，变量值paramValue</td></tr><tr><td align=\"left\">获取全局变量</td><td>GlobalVariableModule.GetValue (string paramName)</td><td>输入：变量名paramName</td></tr><tr><td align=\"left\">获取模块结果数据</td><td>CurrentProcess.GetModule(string paramModuleName).GetValue(string paramValueName)</td><td>输入：模块名paramModuleName，结果名paramValueName</td></tr><tr><td align=\"left\">设置模块运行参数</td><td>CurrentProcess.GetModule(string paramModuleName).SetValue(string paramValueName，string paramValue)</td><td>输入：模块名paramModuleName，变量名paramValueName，变量值paramValue</td></tr><tr><td align=\"left\">PLC、Modbus发送数据</td><td>GlobalCommunicateModule.GetDevice(int deviceID).GetAddress(int addressID).SendData(string data,DataType dataType)</td><td>输入：设备deviceID，设备地址addressID，待发送数组data，待发送数据类型dataType</td></tr><tr><td align=\"left\">TCP、UDP、串口发送数据</td><td>GlobalCommunicateModule.GetDevice(int deviceID).SendData(string data)</td><td>输入：设备deviceID，待发送数据data</td></tr></tbody></table>\n<h2><a id=\"22__48\"></a>2.2 引用和调试</h2>\n<ol><li> <p>添加引用<br/> 在脚本界面点击【编辑程序集】进入程序集界面，点击【添加】根据需求进行程序集动态库的添加，仅支持C#程序集添加，到需要的第三方程序集路径下找到想要添加的.dll点击打开即可添加，添加完成后在脚本中调用即可。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1fefb58abb294197804a55edf003608d.png\"/></p> </li><li> <p>调试步骤<br/> 在脚本界面点击【导出工程】，选择.sln文件使用VS打开，设置断点并且重新生成，然后点击【调试】中的【附加到进程】，VM4.2版本是选择VmModuleProxy.exe(VM4.0版本是附加ShellMouleManager.exe)附加，最后在VM中单次执行方案或者单次执行流程或者脚本模块来查看是否能进入断点。小小提示：<code>断点调试时，每次修改代码都需要重新编译，VS每次重新编译后，只有第一次运行会进入初始化函数Init()。</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\cf85c8c1e297407c8e680169d01e5e0a.png\"/></p> </li></ol>\n<h2><a id=\"23_VM42_56\"></a>2.3 VM4.2的更新</h2>\n<ol><li> <p>VM4.2虽然保留了VM4.0的一系列接口函数，但VM4.2的脚本模块提供了更简单更方便的编程写法，不需要使用接口函数，直接在脚本中用等于号（=）来获取输入变量的值或用等于号（=）给输出变量赋值。</p> </li><li> <p>VM4.2在调试的时候，相比较VM4.0，附件的进程由ShellMouleManager.exe变为VmModuleProxy.exe。这是因为当一个方案中包含多个脚本，我们对每个脚本进行调试附加进程时，每个脚本得附加进程名都是ShellMouleManager.exe，因此得打开任务管理器，需要在进程中来查看每个脚本对应的PID，然后通过ID编号来确定当前脚本调试需要附加的是哪个ShellMouleManager.exe。这一步查看比较繁琐，因此提出附加VmModuleProxy.exe，无论时哪个脚本进行调试，都只需要附加这个进程即可。</p> </li></ol>\n<h1><a id=\"3__60\"></a>3 案例演示</h1>\n<p>需求：获取下图中条码信息和二维码信息，然后通过编写脚本打印日志到本地。<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/6f294faf6b264449815d0d22ea75a7b4.bmp#pic_center\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f300a53e1bf34fe6bf37463019e739d1.bmp#pic_center\"/></p>\n<p>根据案例需求，步骤如下:</p>\n<ol><li>使用条码识别模块和二维码识别模块获取识别信息；</li><li>用GetStringValue函数分别获取条码和二维码信息；</li><li>通过FileStream类操作流写入信息到本地；</li><li>并通过SetstringValue函数输出打印日志的状态信息给到下一个模块。</li></ol>\n<p>效果如下所示，确定输入输出变量，然后编写代码，执行之后将输出相应得结果。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b14a7756a8ac4bacb4f4d27ed5935b06.png\"/></p>\n<p>完整代码如下所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Script<span class=\"token punctuation\">.</span>Methods</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserScript</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">ScriptMethods</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">IProcessMethods</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">//********输入变量**********   </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Barcode<span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">//条码 </span>\n\t<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> TwoD_Code<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//二维码\t    </span>\n    <span class=\"token comment\">//*******输出变量**********    </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> writeSucceedOrFailed<span class=\"token punctuation\">;</span> \t<span class=\"token comment\">//日志写入状态；</span>\n    \n    <span class=\"token comment\">/// &lt;summary&gt;</span>\n    <span class=\"token comment\">/// 预编译时变量初始化</span>\n    <span class=\"token comment\">/// &lt;/summary&gt;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//变量初始化，其余变量可在该函数中添加      </span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary&gt;</span>\n    <span class=\"token comment\">/// Enter the process function when running code once</span>\n\t<span class=\"token comment\">/// 流程执行一次进入Process函数</span>\n    <span class=\"token comment\">/// &lt;/summary&gt;</span>\n    <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//每次执行将进入该函数，此处添加所需的逻辑流程处理           </span>\n        <span class=\"token function\">GetStringValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"barcode\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">ref</span> Barcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//获取条码信息</span>\n        <span class=\"token function\">GetStringValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"twoD_Code\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> TwoD_Code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//获取二维码信息        </span>\n        <span class=\"token keyword\">try</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n       \t   <span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileStream</span> fsWrite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"E:\\\\Log.txt\"</span><span class=\"token punctuation\">,</span>FileMode<span class=\"token punctuation\">.</span>Append<span class=\"token punctuation\">,</span>FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">{<!-- --></span>\n       \t\t  <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str<span class=\"token operator\">=</span> <span class=\"token string\">\"条码信息：\"</span><span class=\"token operator\">+</span> Barcode <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"二维码信息：\"</span> <span class=\"token operator\">+</span> TwoD_Code<span class=\"token punctuation\">;</span>\n       \t\t  <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer<span class=\"token operator\">=</span>Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n       \t\t  fsWrite<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\n           <span class=\"token punctuation\">}</span>\n           writeSucceedOrFailed<span class=\"token operator\">=</span><span class=\"token string\">\"写入OKAY\"</span><span class=\"token punctuation\">;</span>    \n       <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">catch</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n\t\t\twriteSucceedOrFailed<span class=\"token operator\">=</span><span class=\"token string\">\"写入失败\"</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token function\">SetStringValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stateOutput\"</span><span class=\"token punctuation\">,</span>writeSucceedOrFailed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t  <span class=\"token comment\">//输出日志打印状态</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>由于我们可以直接使用等于号（=）进行赋值，不需要使用不同类型的接口函数获取变量（GetxxxxValue）和赋值变量（SetxxxxValue），上述Process()函数中的代码也可以用如下方式实现。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//每次执行将进入该函数，此处添加所需的逻辑流程处理           </span>\n    Barcode<span class=\"token operator\">=</span>barcode<span class=\"token punctuation\">;</span><span class=\"token comment\">//获取条码信息</span>\n    TwoD_Code<span class=\"token operator\">=</span>twoD_Code<span class=\"token punctuation\">;</span><span class=\"token comment\">//获取二维码信息</span>\n        \n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n       \t<span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileStream</span> fsWrite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"E:\\\\Log.txt\"</span><span class=\"token punctuation\">,</span>FileMode<span class=\"token punctuation\">.</span>Append<span class=\"token punctuation\">,</span>FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n       \t\t<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str<span class=\"token operator\">=</span> <span class=\"token string\">\"条码信息：\"</span><span class=\"token operator\">+</span> Barcode <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"二维码信息：\"</span> <span class=\"token operator\">+</span> TwoD_Code<span class=\"token punctuation\">;</span>\n       \t\t<span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer<span class=\"token operator\">=</span>Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n       \t\tfsWrite<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\n        <span class=\"token punctuation\">}</span>\n        writeSucceedOrFailed<span class=\"token operator\">=</span><span class=\"token string\">\"写入OKAY\"</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t\twriteSucceedOrFailed<span class=\"token operator\">=</span><span class=\"token string\">\"写入失败\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//输出日志打印状态</span>\n    stateOutput<span class=\"token operator\">=</span>writeSucceedOrFailed<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"4__157\"></a>4 总结</h1>\n<p>作为VM中的逻辑模块之一，脚本模块能够灵活的按照需求处理数据，只要简单的模仿写过一遍，就能掌握其中规则，随后就能在实际项目中拓展使用。根据经验，有以下两点需要注意：</p>\n<ol><li>无法进入到断点位置。建议调试过程中，导出工程后关闭脚本模块编辑界面，只使用vs修改代码和编译，然后附加进程。</li><li>全局变量与局部变量的差异，在函数外定义的是全局变量，在process函数定义的是局部变量。</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}