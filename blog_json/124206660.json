{"blogid": "124206660", "writerAge": "码龄1年", "writerBlogNum": "108", "writerCollect": "9464", "writerComment": "5183", "writerFan": "23626", "writerGrade": "7级", "writerIntegral": "16278", "writerName": "热爱编程的小白白", "writerProfileAdress": "writer_image\\profile_124206660.jpg", "writerRankTotal": "549", "writerRankWeekly": "28", "writerThumb": "6443", "writerVisitNum": "229745", "blog_read_count": "11408", "blog_time": "已于 2022-05-19 10:48:49 修改", "blog_title": "MySQL基础（约束 多表查询）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<blockquote>\n<p><strong> </strong><img alt=\"6c077b7a8d9e4ee8a2176b4d2f267b7e.png\" src=\"image\\6c077b7a8d9e4ee8a2176b4d2f267b7e.png\"/> 个人主页：<a href=\"https://blog.csdn.net/Javascript_tsj?type=blog\" title=\"个人主页\">个人主页</a><br/><img alt=\"78ebf3e975d74a4ab1d20c57ee7b2791.png\" src=\"image\\78ebf3e975d74a4ab1d20c57ee7b2791.png\"/>​ 系列专栏：<a href=\"https://blog.csdn.net/javascript_tsj/category_11678200.html?spm=1001.2014.3001.5482\" title=\"MySQL数据库\">MySQL数据库</a></p>\n<p><strong>温馨提示：本篇博客较为全面，收藏以防找不到</strong></p>\n<p><strong>挑灯夜战3点半，奋笔疾书4w字，只为博君看两眼！</strong></p>\n</blockquote>\n<p></p>\n<p></p>\n<p></p>\n<p><strong>上节目录</strong></p>\n<hr/>\n<p><a href=\"https://blog.csdn.net/Javascript_tsj/article/details/123804090#t0\" title=\"一.Mysql下载安装启动（适合没有下载按照好MySQL的小伙伴，超详图文教程）\">一.Mysql下载安装启动（适合没有下载按照好MySQL的小伙伴，超详图文教程）</a></p>\n<p><a href=\"https://blog.csdn.net/Javascript_tsj/article/details/123804090#t1\" title=\"二.图形化界面工具（更方便操作数据库,超详细图文安装教程）\">二.图形化界面工具（更方便操作数据库,超详细图文安装教程）</a></p>\n<p><a href=\"https://blog.csdn.net/Javascript_tsj/article/details/123804090#t2\" title=\"三.SQL（MySQL的核心）\">三.SQL（MySQL的核心）</a></p>\n<p> <a href=\"https://blog.csdn.net/Javascript_tsj/article/details/123401332#t13\" title=\"1.DDL （数据库操作，表操作，表操作-数据类型，表操作-案例）\">1.DDL （数据库操作，表操作，表操作-数据类型，表操作-案例）</a></p>\n<p> <a href=\"https://blog.csdn.net/Javascript_tsj/article/details/123508466#t4\" title=\"2.DML（添加数据，修改数据，删除数据）\">2.DML（添加数据，修改数据，删除数据）</a></p>\n<p> <a href=\"https://blog.csdn.net/Javascript_tsj/article/details/123508466#t10\" title=\"3.DQL（基本语法，基础查询，条件查询，聚合函数，分组查询，排序查询，分页查询，案例，执行顺序）\">3.DQL（基本语法，基础查询，条件查询，聚合函数，分组查询，排序查询，分页查询，案例，执行顺序）</a></p>\n<p> <a href=\"https://blog.csdn.net/Javascript_tsj/article/details/123804090#t6\" title=\"4.DCL（管理用户，权限控制）\">4.DCL（管理用户，权限控制）</a></p>\n<p><a href=\"https://blog.csdn.net/Javascript_tsj/article/details/123804090#t9\" title=\"四.函数（字符串函数，数值函数，日期函数，流程函数）\">四.函数（字符串函数，数值函数，日期函数，流程函数）</a></p>\n<hr/>\n<p><strong>目录</strong></p>\n<p style=\"margin-left:0px;\"><a href=\"#1.%E7%BA%A6%E6%9D%9F\">1.约束</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%E7%BA%A6%E6%9D%9F%E6%BC%94%E7%A4%BA\">约束演示</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%20%C2%A0\">外键约束  </a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%E4%BB%8B%E7%BB%8D\">介绍</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%E8%AF%AD%E6%B3%95\">语法</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p style=\"margin-left:80px;\"><a href=\"#%E5%88%A0%E9%99%A4%2F%E6%9B%B4%E6%96%B0%E8%A1%8C%E4%B8%BA\">删除/更新行为</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#2.%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\">2.多表查询</a></p>\n<p style=\"margin-left:40px;\"></p>\n<p style=\"margin-left:40px;\"></p>\n<p style=\"margin-left:40px;\"><a href=\"#%E5%A4%9A%E8%A1%A8%E5%85%B3%E7%B3%BB\">多表关系</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#1.%E4%B8%80%E5%AF%B9%E5%A4%9A\">1.一对多</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#2.%E5%A4%9A%E5%AF%B9%E5%A4%9A\">2.多对多</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#3.%E4%B8%80%E5%AF%B9%E4%B8%80\">3.一对一</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#3.%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%A6%82%E8%BF%B0\">3.多表查询概述</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#1.%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87\">1.数据准备</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#2.%E6%A6%82%E8%BF%B0\">2.概述</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#5.%E5%88%86%E7%B1%BB\">4.分类</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#1.%E5%86%85%E8%BF%9E%E6%8E%A5\">1.内连接</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p style=\"margin-left:40px;\"><a href=\"#2.%E5%A4%96%E8%BF%9E%E6%8E%A5%20%C2%A0\">2.外连接  </a></p>\n<p style=\"margin-left:80px;\"></p>\n<p style=\"margin-left:40px;\"><a href=\"#3.%E8%87%AA%E8%BF%9E%E6%8E%A5\">3.自连接</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#1.%E8%87%AA%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2\">1.自连接查询</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%C2%A02.%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2\"> 2.联合查询</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#4.%E5%AD%90%E6%9F%A5%E8%AF%A2\">4.子查询</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#1.%E6%A6%82%E8%BF%B0\">1.概述</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#2.%E6%A0%87%E9%87%8F%E5%AD%90%E6%9F%A5%E8%AF%A2\">2.标量子查询</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#3.%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A2\">3.列子查询</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#4.%E8%A1%8C%E5%AD%90%E6%9F%A5%E8%AF%A2\">4.行子查询</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p style=\"margin-left:80px;\"><a href=\"#5.%E8%A1%A8%E5%AD%90%E6%9F%A5%E8%AF%A2\">5.表子查询</a></p>\n<hr/>\n<p></p>\n<p></p>\n<h1><strong>1.约束</strong></h1>\n<p></p>\n<h2><strong>概述 </strong></h2>\n<p></p>\n<p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p>\n<p>目的：保证数据库中数据的正确、有效性和完整性。</p>\n<p></p>\n<p></p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\ad994ee81b8441d38b61f1afa9deb2af.png\"/>​​​</p>\n<blockquote>\n<p>注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</p>\n</blockquote>\n<h3><strong>约束演示 </strong></h3>\n<p>上面我们介绍了数据库中常见的约束，以及约束涉及到的关键字，那这些约束我们到底如何在创建表、</p>\n<p>修改表的时候来指定呢，接下来我们就通过一个案例，来演示一下。</p>\n<p>案例需求： 根据需求，完成表结构的创建。需求如下：</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_15,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\e25b711ecd8e4f13ab9151b5b56916de.png\"/>​​​</p>\n<p> 对应的建表语句为：</p>\n<div>\n<pre><code class=\"language-sql\">CREATE TABLE tb_user\n(\n    id     int AUTO_INCREMENT PRIMARY KEY COMMENT 'ID唯一标识',\n    name   varchar(10) NOT NULL UNIQUE COMMENT '姓名',\n    age     tinyint unsigned  COMMENT '年龄',\n    status char(1) default '1' COMMENT '状态',\n    gender char(1) COMMENT '性别'\n);</code></pre>\n</div>\n<p> 如果你的Mysql是8版本之后  age可以这样创建</p>\n<div>\n<pre><code class=\"language-sql\">age int check (age &gt; 0 &amp;&amp; age &lt;= 120) COMMENT '年龄' ,</code></pre>\n</div>\n<p>在为字段添加约束时，我们只需要在字段之后加上约束的关键字即可，需要关注其语法。我们执行上面的SQL把表结构创建完成，然后接下来，就可以通过一组数据进行测试，从而验证一下，约束是否可以生效。</p>\n<div>\n<pre><code class=\"language-sql\">insert into tb_user(name, age, status, gender)\nvalues ('Tom1', 19, '1', '男'),\n       ('Tom2', 25, '0', '男');\ninsert into tb_user(name, age, status, gender)\nvalues ('Tom3', 19, '1', '男');\ninsert into tb_user(name, age, status, gender)\nvalues (null, 19, '1', '男');\ninsert into tb_user(name, age, status, gender)\nvalues ('Tom3', 19, '1', '男');\ninsert into tb_user(name, age, status, gender)\nvalues ('Tom4', 80, '1', '男');\ninsert into tb_user(name, age, status, gender)\nvalues ('Tom5', -1, '1', '男');\ninsert into tb_user(name, age, status, gender)\nvalues ('Tom5', 121, '1', '男');\ninsert into tb_user(name, age, gender)\nvalues ('Tom5', 120, '男');</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\108ba7a3aa034e91b0b81748344e5cac.png\"/>​​​</p>\n<p> <img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_9,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\c78abeb94c0f4c63ae039bc8034fd06d.png\"/>​​​</p>\n<p>可见 对于我们设置name的约束： 非空 且唯一  生效。</p>\n<p></p>\n<p></p>\n<p>上面，我们是通过编写SQL语句的形式来完成约束的指定，那加入我们是通过图形化界面来创建表结构时，又该如何来指定约束呢？ 只需要在创建表的时候，根据我们的需要选择对应的约束即可。</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\4e613ee4a8464f0991bb1a8a7f608483.png\"/>​​​</p>\n<p></p>\n<p></p>\n<h2><strong>外键约束 </strong> </h2>\n<h3><strong>介绍 </strong></h3>\n<p>外键：用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p>\n<p>我们来看一个例子：</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\639a3c60fbaf4d8d94fc8a46cceec88a.png\"/>​​​</p>\n<p></p>\n<p>左侧的emp表是员工表，里面存储员工的基本信息，包含员工的ID、姓名、年龄、职位、薪资、入职日 期、上级主管ID、部门ID，在员工的信息中存储的是部门的ID dept_id，而这个部门的ID是关联的部门表dept的主键id，那emp表的dept_id就是外键,关联的是另一张表的主键。</p>\n<p></p>\n<blockquote>\n<p>注意：目前上述两张表，只是在逻辑上存在这样一层关系；在数据库层面，并未建立外键关联，所以是无法保证数据的一致性和完整性的。</p>\n</blockquote>\n<p>没有数据库外键关联的情况下，能够保证一致性和完整性呢，我们来测试一下。</p>\n<p></p>\n<p>准备数据</p>\n<div>\n<pre><code class=\"language-sql\">create table dept\n(\n    id   int auto_increment comment 'ID' primary key,\n    name varchar(50) not null comment '部门名称'\n) comment '部门表';\nINSERT INTO dept (id, name)\nVALUES (1, '研发部'),\n       (2, '市场部'),\n       (3, '财务部'),\n       (4, '销售部'),\n       (5, '总经办');\ncreate table emp\n(\n    id        int auto_increment comment 'ID' primary key,\n    name      varchar(50) not null comment '姓名',\n    age       int comment '年龄',\n    job       varchar(20) comment '职位',\n    salary    int comment '薪资',\n    entrydate date comment '入职时间',\n    managerid int comment '直属领导ID',\n    dept_id   int comment '部门ID'\n) comment '员工表';\nINSERT INTO emp (id, name, age, job, salary, entrydate, managerid, dept_id)\nVALUES (1, '金庸', 66, '总裁', 20000, '2000-01-01', null, 5),\n       (2, '张无忌', 20, '项目经理', 12500, '2005-12-05', 1, 1),\n       (3, '杨逍', 33, '开发', 8400, '2000-11-03', 2, 1),\n       (4, '韦一笑', 48, '开 发', 11000, '2002-02-05', 2, 1),\n       (5, '常遇春', 43, '开发', 10500, '2004-09-07', 3, 1),\n       (6, '小昭', 19, '程 序员鼓励师', 6600, '2004-10-12', 2, 1);</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_6,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\f50c4aa5c7fb4824b68e4acf05ede324.png\"/>​​​</p>\n<p> <img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\b02b9b05424f4622b49ef561fcf18760.png\"/>​​​</p>\n<p></p>\n<p>接下来，我们可以做一个测试，删除id为1的部门信息。</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\e7d76c5728594f588e562637eb2d2532.png\"/>​​​</p>\n<p></p>\n<p></p>\n<p>结果，我们看到删除成功，而删除成功之后，部门表不存在id为1的部门，而在emp表中还有很多的员工，关联的为id为1的部门，此时就出现了数据的不完整性。 而要想解决这个问题就得通过数据库的外键约束。</p>\n<h3><strong>语法 </strong></h3>\n<p></p>\n<p><strong>1). 添加外键</strong></p>\n<div>\n<pre><code class=\"language-sql\">CREATE TABLE 表名\n(\n    字段名 数据类型, ... [\n    CONSTRAINT] [\n    外键名称]\n    FOREIGN\n    KEY\n(\n    外键字段名\n) REFERENCES 主表\n(\n    主表列名\n) );</code></pre>\n</div>\n<div>\n<pre><code class=\"language-sql\">ALTER TABLE 表名\n    ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表 (主表列名);</code></pre>\n</div>\n<p></p>\n<p>案例:</p>\n<p>为emp表的dept_id字段添加外键约束,关联dept表的主键id。</p>\n<div>\n<pre><code class=\"language-sql\">alter table emp\n    add constraint fk_emp_dept_id foreign key (dept_id) references dept (id);</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\0f041bd94edf4043b2ed5f0ac2d90f5a.png\"/>​​​</p>\n<p></p>\n<p>添加了外键约束之后，我们再到dept表(父表)删除id为1的记录，然后看一下会发生什么现象。 此时</p>\n<p>将会报错，不能删除或更新父表记录，因为存在外键约束。</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\3a60a1d6e40642dea55c6786cbc8dad9.png\"/>​​​</p>\n<p></p>\n<p></p>\n<p><strong>2). 删除外键</strong></p>\n<div>\n<pre><code class=\"language-sql\">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</code></pre>\n</div>\n<p>案例：</p>\n<p>删除emp表的外键fk_emp_dept_id</p>\n<div>\n<pre><code class=\"language-sql\">alter table emp drop foreign key fk_emp_dept_id; 1</code></pre>\n</div>\n<p></p>\n<p></p>\n<h3></h3>\n<h3><strong>删除</strong><strong>/</strong><strong>更新行为</strong></h3>\n<p></p>\n<p></p>\n<p>添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除/更新行为。具体的删除/更新行为有以下几种:</p>\n<p></p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_15,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\e957fb3c3caf4a80b0fe16fc747619cd.png\"/>​​​</p>\n<p>具体语法为:</p>\n<div>\n<pre><code class=\"language-sql\">\nALTER TABLE 表名\n    ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名 (主表字段名) ON UPDATE CASCADE ON DELETE CASCADE;</code></pre>\n</div>\n<p> 演示如下：</p>\n<p>由于NO ACTION 是默认行为，我们前面语法演示的时候，已经测试过了，就不再演示了，这里我们再</p>\n<p>演示其他的两种行为：CASCADE、SET NULL。</p>\n<p><strong>1). CASCADE </strong></p>\n<div>\n<pre><code class=\"language-sql\">alter table emp\n    add constraint fk_emp_dept_id foreign key (dept_id) references dept (id) on update cascade on delete cascade;</code></pre>\n</div>\n<p>A. 修改父表id为1的记录，将id修改为6</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\ee913ce7833749e6aaa90224e2141e78.png\"/>​​​</p>\n<p> 我们发现，原来在子表中dept_id值为1的记录，现在也变为6了，这就是cascade级联的效果</p>\n<blockquote>\n<p> 在一般的业务系统中，不会修改一张表的主键值。</p>\n</blockquote>\n<p> B. 删除父表id为6的记录</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\5fc0754ca570453f93de0734b8f11919.png\"/>​​​</p>\n<p> 我们发现，父表的数据删除成功了，但是子表中关联的记录也被级联删除了。</p>\n<p></p>\n<p></p>\n<p><strong>2). SET NULL </strong></p>\n<p>在进行测试之前，我们先需要删除上面建立的外键 fk_emp_dept_id。然后再通过数据脚本，将 emp、dept表的数据恢复了。</p>\n<div>\n<pre><code class=\"language-sql\">alter table emp\n    add constraint fk_emp_dept_id\n        foreign key (dept_id) references dept (id) on update set null on delete set null;</code></pre>\n</div>\n<p>接下来，我们删除id为1的数据，看看会发生什么样的现象。</p>\n<p></p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\b2ea5d1c66214d3f9a2bd4b13d6b489c.png\"/>​​​</p>\n<p></p>\n<p>我们发现父表的记录是可以正常的删除的，父表的数据删除之后，再打开子表 emp，我们发现子表emp 的dept_id字段，原来dept_id为1的数据，现在都被置为NULL了</p>\n<p></p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\facfd66981074bde9b209fa5722b16c4.png\"/>​​​</p>\n<p>这就是SET NULL这种删除/更新行为的效果。</p>\n<h1><strong>2.多表查询</strong><strong> </strong></h1>\n<p></p>\n<p>我们之前在讲解SQL语句的时候，讲解了DQL语句，也就是数据查询语句，但是之前讲解的查询都是单表查询，而本章节我们要学习的则是多表查询操作，主要从以下几个方面进行讲解。</p>\n<h2></h2>\n<h2></h2>\n<h2><strong>多表关系</strong></h2>\n<p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结 构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p>\n<p><strong>一对多(多对一)     </strong><strong>多对多      </strong><strong>一对一 </strong></p>\n<h3><strong>1.一对多</strong><strong> </strong></h3>\n<p></p>\n<p>案例: 部门 与 员工的关系</p>\n<p>关系: 一个部门对应多个员工，一个员工对应一个部门</p>\n<p>实现: 在多的一方建立外键，指向一的一方的主键</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\29554ba66d684d4790949581074191c2.png\"/>​​​</p>\n<p></p>\n<p></p>\n<h3><strong>2.多对多</strong></h3>\n<p></p>\n<p></p>\n<p>案例: 学生 与 课程的关系</p>\n<p>关系: 一个学生可以选修多门课程，一门课程也可以供多个学生选择</p>\n<p>实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\b31cfa93d7ba4e11b06e4cfbdac747d8.png\"/>​​​</p>\n<p></p>\n<p>对应的SQL脚本:</p>\n<div>\n<pre><code class=\"language-sql\">create table student\n(\n    id   int auto_increment primary key comment '主键ID',\n    name varchar(10) comment '姓名',\n    no   varchar(10) comment '学号'\n) comment '学生表';\ninsert into student\nvalues (null, '黛绮丝', '2000100101'),\n       (null, '谢逊', '2000100102'),\n       (null, '殷天正', '2000100103'),\n       (null, '韦一笑', '2000100104');\ncreate table course\n(\n    id   int auto_increment primary key comment '主键ID',\n    name varchar(10) comment '课程名称'\n) comment '课程表';\ninsert into course\nvalues (null, 'Java'),\n       (null, 'PHP'),\n       (null, 'MySQL'),\n       (null, 'Hadoop');\ncreate table student_course\n(\n    id        int auto_increment comment '主键' primary key,\n    studentid int not null comment '学生ID',\n    courseid  int not null comment '课程ID',\n    constraint fk_courseid foreign key (courseid) references course (id),\n    constraint fk_studentid foreign key (studentid) references student (id)\n) comment '学生课程中间表';\ninsert into student_course\nvalues (null, 1, 1),\n       (null, 1, 2),\n       (null, 1, 3),\n       (null, 2, 2),\n       (null, 2, 3),\n       (null, 3, 4);</code></pre>\n</div>\n<p></p>\n<h3>3.<strong>一对一 </strong></h3>\n<p></p>\n<p>案例: 用户 与 用户详情的关系</p>\n<p>关系: 一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</p>\n<p>实现: 在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\b8666a3e93db4befaf437f351ac7e001.png\"/>​​​</p>\n<p></p>\n<p>对应的SQL脚本:</p>\n<div>\n<pre><code class=\"language-sql\">create table tb_user\n(\n    id     int auto_increment primary key comment '主键ID',\n    name   varchar(10) comment '姓名',\n    age    int comment '年龄',\n    gender char(1) comment '1: 男 , 2: 女',\n    phone  char(11) comment '手机号'\n) comment '用户基本信息表';\ncreate table tb_user_edu\n(\n    id            int auto_increment primary key comment '主键ID',\n    degree        varchar(20) comment '学历',\n    major         varchar(50) comment '专业',\n    primaryschool varchar(50) comment '小学',\n    middleschool  varchar(50) comment '中学',\n    university    varchar(50) comment '大学',\n    userid        int unique comment '用户ID',\n    constraint fk_userid foreign key (userid) references tb_user (id)\n) comment '用户教育信息表';\ninsert into tb_user(id, name, age, gender, phone)\nvalues (null, '黄渤', 45, '1', '18800001111'),\n       (null, '冰冰', 35, '2', '18800002222'),\n       (null, '码云', 55, '1', '18800008888'),\n       (null, '李彦宏', 50, '1', '18800009999');\ninsert into tb_user_edu(id, degree, major, primaryschool, middleschool, university, userid)\nvalues (null, '本科', '舞蹈', '静安区第一小学', '静安区第一中学', '北京舞蹈学院', 1),\n       (null, '硕士', '表演', '朝阳区第一小学', '朝阳区第一中学', '北京电影学院', 2),\n       (null, '本科', '英语', '杭州市第一小学', '杭州市第一中学', '杭州师范大学', 3),\n       (null, '本科', '应用数学', '阳泉第一小学', '阳泉区第一中学', '清华大学', 4);</code></pre>\n</div>\n<h1><strong>3.多表查询概述 </strong></h1>\n<p></p>\n<h2><strong>1.数据准备 </strong></h2>\n<p>1). 删除之前 emp, dept表的测试数据</p>\n<p>2). 执行如下脚本，创建emp表与dept表并插入测试数据</p>\n<div>\n<pre><code>-- 创建dept表，并插入数据\ncreate table dept\n(\n    id   int auto_increment comment 'ID' primary key,\n    name varchar(50) not null comment '部门名称'\n) comment '部门表';\nINSERT INTO dept (id, name)\nVALUES (1, '研发部'),\n       (2, '市场部'),\n       (3, '财务部'),\n       (4, '销售部'),\n       (5, '总经办'),\n       (6, '人事部');\n-- 创建emp表，并插入数据\ncreate table emp\n(\n    id        int auto_increment comment 'ID' primary key,\n    name      varchar(50) not null comment '姓名',\n    age       int comment '年龄',\n    job       varchar(20) comment '职位',\n    salary    int comment '薪资',\n    entrydate date comment '入职时间',\n    managerid int comment '直属领导ID',\n    dept_id   int comment '部门ID'\n) comment '员工表';\n-- 添加外键\nalter table emp\n    add constraint fk_emp_dept_id foreign key (dept_id) references dept (id);\nINSERT INTO emp (id, name, age, job, salary, entrydate, managerid, dept_id)\nVALUES (1, '金庸', 66, '总裁', 20000, '2000-01-01', null, 5),\n       (2, '张无忌', 20, '项目经理', 12500, '2005-12-05', 1, 1),\n       (3, '杨逍', 33, '开发', 8400, '2000-11-03', 2, 1),\n       (4, '韦一笑', 48, '开发', 11000, '2002-02-05', 2, 1),\n       (5, '常遇春', 43, '开发', 10500, '2004-09-07', 3, 1),\n       (6, '小昭', 19, '程序员鼓励师', 6600, '2004-10-12', 2, 1),\n       (7, '灭绝', 60, '财务总监', 8500, '2002-09-12', 1, 3),\n       (8, '周芷若', 19, '会计', 48000, '2006-06-02', 7, 3),\n       (9, '丁敏君', 23, '出纳', 5250, '2009-05-13', 7, 3),\n       (10, '赵敏', 20, '市场部总监', 12500, '2004-10-12', 1, 2),\n       (11, '鹿杖客', 56, '职员', 3750, '2006-10-03', 10, 2),\n       (12, '鹤笔翁', 19, '职员', 3750, '2007-05-09', 10, 2),\n       (13, '方东白', 19, '职员', 5500, '2009-02-12', 10, 2),\n       (14, '张三丰', 88, '销售总监', 14000, '2004-10-12', 1, 4),\n       (15, '俞莲舟', 38, '销售', 4600, '2004-10-12', 14, 4),\n       (16, '宋远桥', 40, '销售', 4600, '2004-10-12', 14, 4),\n       (17, '陈友谅', 42, null, 2000, '2011-10-12', 1, null)</code></pre>\n</div>\n<p>dept表共6条记录，emp表共17条记录。</p>\n<h2><strong>2.概述</strong></h2>\n<p>多表查询就是指从多张表中查询数据。</p>\n<blockquote>\n<p>原来查询单表数据，执行的SQL形式为：select * from emp;</p>\n<p>那么我们要执行多表查询，就只需要使用逗号分隔多张表即可，如：<strong> </strong><strong>select * from emp , dept ; </strong>具体的执行结果如下:</p>\n</blockquote>\n<p></p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\7c6aaf203bb248aaaea61c2535d4d5d5.png\"/>​​​</p>\n<blockquote>\n<p>此时,我们看到查询结果中包含了大量的结果集，总共102条记录，而这其实就是员工表emp所有的记录 (17) 与 部门表dept所有记录(6) 的所有组合情况，这种现象称之为笛卡尔积。接下来，就来简单 介绍下笛卡尔积。</p>\n</blockquote>\n<p>笛卡尔积: 笛卡尔乘积是指在数学中，两个集合A集合 和 B集合的所有组合情况。</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\0d1f08c400684b33863d825ab14772d1.png\"/>​​​</p>\n<p> 而在多表查询中，我们是需要消除无效的笛卡尔积的，只保留两张表关联部分的数据。</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\64af7cb2f8ba45e3be72b1ddfeeca47a.png\"/>​​​</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\05f440256e30460fac9c64885056cbf1.png\"/>​​​</p>\n<blockquote>\n<p> 在SQL语句中，如何来去除无效的笛卡尔积呢？ 我们可以给多表查询加上连接查询的条件即可。</p>\n</blockquote>\n<div>\n<pre><code> select * from emp , dept where emp.dept_id = dept.id;</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\9edf088065f648cab13a03f04eeec019.png\"/>​​​</p>\n<blockquote>\n<p> 而由于id为17的员工，没有dept_id字段值，所以在多表查询时，根据连接查询的条件并没有查询到。</p>\n</blockquote>\n<h1><strong>4.分类</strong></h1>\n<p></p>\n<p><strong>连接查询 </strong></p>\n<blockquote>\n<p><strong>内连接</strong>：相当于查询A、B交集部分数据</p>\n<p><strong>外连接</strong>：</p>\n<p>           左外连接：查询左表所有数据，以及两张表交集部分数据</p>\n<p>           右外连接：查询右表所有数据，以及两张表交集部分数据</p>\n<p>           自连接：当前表与自身的连接查询，自连接必须使用表别名</p>\n<p><strong>子查询 </strong></p>\n<p></p>\n</blockquote>\n<p></p>\n<p></p>\n<h2><strong>1.内连接 </strong></h2>\n<blockquote>\n<p></p>\n<p>内连接查询的是两张表交集部分的数据。(也就是绿色部分的数据)</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_8,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\322dec6289894ef9bfda747c4787a2ff.png\"/>​​​</p>\n</blockquote>\n<p>内连接的语法分为两种: 隐式内连接、显式内连接。先来学习一下具体的语法结构。</p>\n<p><strong> 1). 隐式内连接 </strong></p>\n<div>\n<pre><code>SELECT 字段列表 FROM 表1 , 表2 WHERE 条件 ... ;</code></pre>\n</div>\n<p><strong>2). 显式内连接 </strong></p>\n<div>\n<pre><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ... ;</code></pre>\n</div>\n<blockquote>\n<p>案例:</p>\n<p>A. 查询每一个员工的姓名 , 及关联的部门的名称 (隐式内连接实现)</p>\n<p>表结构: emp , dept</p>\n<p>连接条件: emp.dept_id = dept.id</p>\n</blockquote>\n<div>\n<pre><code>select emp.name, dept.name\nfrom emp,\n     dept\nwhere emp.dept_id = dept.id; \n-- 为每一张表起别名,简化SQL编写\n select e.name,d.name from emp e , dept d where e.dept_id = d.id;</code></pre>\n</div>\n<blockquote>\n<p>B. 查询每一个员工的姓名 , 及关联的部门的名称 (显式内连接实现) --- INNER JOIN ...</p>\n<p>ON ...</p>\n<p>表结构: emp , dept</p>\n<p>连接条件: emp.dept_id = dept.id</p>\n</blockquote>\n<div>\n<pre><code>select e.name, d.name\nfrom emp e\n         inner join dept d on e.dept_id = d.id;\n-- 为每一张表起别名,简化SQL编写\nselect e.name, d.name from emp e join dept d on e.dept_id = d.id;</code></pre>\n</div>\n<blockquote>\n<p> 表的别名:</p>\n<p>①. tablea as 别名1 , tableb as 别名2 ;</p>\n<p>②. tablea 别名1 , tableb 别名2 ;</p>\n<p><strong>注意事项:</strong><strong>一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字</strong><strong>段。</strong></p>\n</blockquote>\n<h3></h3>\n<h2>2.<strong>外连接 </strong> </h2>\n<blockquote>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_7,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\594504d262ca4637a8558fb78db1dcae.png\"/>​​​</p>\n<p>外连接分为两种，分别是：左外连接 和 右外连接。具体的语法结构为：</p>\n</blockquote>\n<p><strong>1). 左外连接  </strong></p>\n<div>\n<pre><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ... ;</code></pre>\n</div>\n<blockquote>\n<p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p>\n</blockquote>\n<p><strong>2). 右外连接</strong></p>\n<div>\n<pre><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ... ;</code></pre>\n</div>\n<blockquote>\n<p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p>\n</blockquote>\n<blockquote>\n<p>案例:</p>\n<p>A. 查询emp表的所有数据, 和对应的部门信息</p>\n<p>由于需求中提到，要查询emp的所有数据，所以是不能内连接查询的，需要考虑使用外连接查询。</p>\n<p>表结构: emp, dept</p>\n<p>连接条件: emp.dept_id = dept.id</p>\n</blockquote>\n<div>\n<pre><code>select e.*, d.name\nfrom emp e\n         left outer join dept d on e.dept_id = d.id;\nselect e.*, d.name\nfrom emp e\n         left join dept d on e.dept_id = d.id;</code></pre>\n</div>\n<p> <img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\aaf3de2fbdeb451983a8d257a2793884.png\"/>​​​</p>\n<p></p>\n<blockquote>\n<p> B. 查询dept表的所有数据, 和对应的员工信息(右外连接)</p>\n<p>由于需求中提到，要查询dept表的所有数据，所以是不能内连接查询的，需要考虑使用外连接查询。</p>\n<p>表结构: emp, dept</p>\n<p>连接条件: emp.dept_id = dept.id</p>\n</blockquote>\n<p></p>\n<div>\n<pre><code>select d.*, e.*\nfrom emp e\n         right outer join dept d on e.dept_id = d.id;\nselect d.*, e.*\nfrom dept d\n         left outer join emp e on e.dept_id = d.id;</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\6f14812fe12641ecb6889c644a0586e4.png\"/>​​​</p>\n<blockquote>\n<p> 注意事项：</p>\n<p>左外连接和右外连接是可以相互替换的，只需要调整在连接查询时SQL中，表结构的先后顺</p>\n<p>序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p>\n</blockquote>\n<p></p>\n<h3></h3>\n<h2><strong>3.自连接 </strong></h2>\n<p></p>\n<h3><strong>1.自连接查询</strong></h3>\n<blockquote>\n<p>自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。我们先来学习一下自连接的查询语法：</p>\n<div>\n<pre><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ... ;</code></pre>\n</div>\n<p>而对于自连接查询，可以是内连接查询，也可以是外连接查询</p>\n</blockquote>\n<p>案例：</p>\n<p>A. 查询员工 及其 所属领导的名字</p>\n<p>表结构: emp</p>\n<div>\n<pre><code>select a.name , b.name from emp a , emp b where a.managerid = b.id;</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_6,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\c4d89d9fe81c48af97ca4e6c23c60fdc.png\"/>​​​</p>\n<p></p>\n<p></p>\n<blockquote>\n<p>B. 查询所有员工 emp 及其领导的名字 emp , 如果员工没有领导, 也需要查询出来</p>\n<p>表结构: emp a , emp b</p>\n</blockquote>\n<p></p>\n<div>\n<pre><code>select a.name '员工', b.name '领导'\nfrom emp a\n         left join emp b on a.managerid = b.id;</code></pre>\n</div>\n<blockquote>\n<p><strong>注意事项: </strong></p>\n<p><strong>在自连接查询中，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，到底 </strong></p>\n<p><strong>是哪一张表的字段。 </strong></p>\n</blockquote>\n<h3> 2.<strong>联合查询 </strong></h3>\n<p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p>\n<div>\n<pre><code>SELECT 字段列表\nFROM 表A... UNION [ ALL ]\nSELECT 字段列表\nFROM 表B....;</code></pre>\n</div>\n<blockquote>\n<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</p>\n<p>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重。</p>\n</blockquote>\n<p></p>\n<blockquote>\n<p>案例:</p>\n<p>A. 将薪资低于 5000 的员工 , 和 年龄大于 50 岁的员工全部查询出来.</p>\n<p>当前对于这个需求，我们可以直接使用多条件查询，使用逻辑运算符 or 连接即可。 那这里呢，我们 也可以通过union/union all来联合查询.</p>\n</blockquote>\n<div>\n<pre><code>select *\nfrom emp\nwhere salary &lt; 5000\nunion all\nselect *\nfrom emp\nwhere age &gt; 50;</code></pre>\n</div>\n<blockquote>\n<p>union all查询出来的结果，仅仅进行简单的合并，并未去重。</p>\n</blockquote>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\f46a729070d549ee8c82ba3fadf39a79.png\"/>​​​</p>\n<p></p>\n<div>\n<pre><code>select *\nfrom emp\nwhere salary &lt; 5000\nunion\nselect *\nfrom emp\nwhere age &gt; 50;</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\a58e379ce2454391890fe01e7329a615.png\"/>​​​</p>\n<p> union 联合查询，会对查询出来的结果进行去重处理。</p>\n<p></p>\n<p><strong>注意： </strong></p>\n<p>如果多条查询语句查询出来的结果，字段数量不一致，在进行union/union all联合查询时，将会报</p>\n<p>错。如：</p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\a1a3d8cae8c54b06838d8f732f27175e.png\"/>​​​</p>\n<p></p>\n<p></p>\n<h2><strong>4.子查询</strong><strong> </strong></h2>\n<p></p>\n<h3>1.<strong>概述 </strong></h3>\n<p>1). 概念</p>\n<p>SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询。</p>\n<div>\n<pre><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2 );</code></pre>\n</div>\n<blockquote>\n<p>子查询外部的语句可以是INSERT / UPDATE / DELETE / SELECT 的任何一个。</p>\n</blockquote>\n<p>2). 分类</p>\n<blockquote>\n<p>根据子查询结果不同，分为：</p>\n<p>A. 标量子查询（子查询结果为单个值）</p>\n<p>B. 列子查询(子查询结果为一列)</p>\n<p>C. 行子查询(子查询结果为一行)</p>\n<p>D. 表子查询(子查询结果为多行多列)</p>\n<p>根据子查询位置，分为：</p>\n<p>A. WHERE之后</p>\n<p>B. FROM之后</p>\n<p>C. SELECT之后</p>\n</blockquote>\n<p></p>\n<p></p>\n<h3><strong>2.标量子查询 </strong></h3>\n<blockquote>\n<p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为标量子查询。</p>\n<p>常用的操作符：= &lt;&gt; &gt; &gt;= &lt; &lt;=</p>\n</blockquote>\n<p>案例:</p>\n<p>A. 查询 \"销售部\" 的所有员工信息</p>\n<p>完成这个需求时，我们可以将需求分解为两步：</p>\n<p>①. 查询 \"销售部\" 部门ID</p>\n<div>\n<pre><code>select id from dept where name = '销售部';</code></pre>\n</div>\n<p>②. 根据 \"销售部\" 部门ID, 查询员工信息</p>\n<p></p>\n<div>\n<pre><code>select * from emp where dept_id = (select id from dept where name = '销售部');</code></pre>\n</div>\n<p></p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\dfc846aa877f43dbb204d3bc5be857e3.png\"/>​​​</p>\n<p></p>\n<p>B. 查询在 \"方东白\" 入职之后的员工信息</p>\n<p>完成这个需求时，我们可以将需求分解为两步：</p>\n<p>①. 查询 方东白 的入职日期</p>\n<div>\n<pre><code>select entrydate from emp where name = '方东白';</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_9,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\b0e4ad216fef4185ab475f989df51a5d.png\"/>​​​</p>\n<p></p>\n<p>②. 查询指定入职日期之后入职的员工信息</p>\n<div>\n<pre><code>select * from emp where entrydate &gt; (select entrydate from emp where name = '方东白');</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\c19ce6341a07499b96df1a617165b8fe.png\"/>​​​</p>\n<p></p>\n<p></p>\n<h3><strong>3.列子查询 </strong></h3>\n<blockquote>\n<p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。</p>\n<p>常用的操作符：IN 、NOT IN 、 ANY 、SOME 、 ALL</p>\n</blockquote>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_14,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\7eae5b3bb68c483c9c084167e8c6609c.png\"/>​​​</p>\n<p></p>\n<p>案例:</p>\n<p>A. 查询 \"销售部\" 和 \"市场部\" 的所有员工信息</p>\n<p>分解为以下两步:</p>\n<p>①. 查询 \"销售部\" 和 \"市场部\" 的部门ID</p>\n<div>\n<pre><code>select id from dept where name = '销售部' or name = '市场部';</code></pre>\n</div>\n<p></p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_12,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\55ec8baeac8c4258b1d463847e757d13.png\"/>​​​</p>\n<p></p>\n<p>②. 根据部门ID, 查询员工信息</p>\n<div>\n<pre><code>select *\nfrom emp\nwhere dept_id in (select id from dept where name = '销售部' or name = '市场部');</code></pre>\n</div>\n<p></p>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\b3e0b78d96824ddeacf1ed85c0708dc4.png\"/>​​​</p>\n<p></p>\n<p></p>\n<p></p>\n<p>B. 查询比 财务部 所有人工资都高的员工信息</p>\n<p>分解为以下两步:</p>\n<p>①. 查询所有 财务部 人员工资</p>\n<div>\n<pre><code>select salary from emp where dept_id = (select id from dept where name = '财务部');</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_8,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\67fd73ec7a2d4335904a27b25d2c2d8f.png\"/>​​​</p>\n<p></p>\n<p>②. 比 财务部 所有人工资都高的员工信息</p>\n<div>\n<pre><code>select *\nfrom emp\nwhere salary &gt; all (select salary from emp where dept_id = (select id from dept where name = '财务部'));</code></pre>\n</div>\n<p></p>\n<p>C. 查询比研发部其中任意一人工资高的员工信息</p>\n<p>分解为以下两步:</p>\n<p>①. 查询研发部所有人工资</p>\n<div>\n<pre><code>select salary from emp where dept_id = (select id from dept where name = '研发部');</code></pre>\n</div>\n<p>②. 比研发部其中任意一人工资高的员工信息</p>\n<div>\n<pre><code>select *\nfrom emp\nwhere salary &gt; any (select salary from emp where dept_id = (select id from dept where name = '研发部'));</code></pre>\n</div>\n<p></p>\n<p></p>\n<h3>4.<strong>行子查询 </strong></h3>\n<blockquote>\n<p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。</p>\n<p>常用的操作符：= 、&lt;&gt; 、IN 、NOT IN</p>\n</blockquote>\n<p>案例:</p>\n<p>A. 查询与 \"张无忌\" 的薪资及直属领导相同的员工信息 ;</p>\n<p>这个需求同样可以拆解为两步进行:</p>\n<p>①. 查询 \"张无忌\" 的薪资及直属领导</p>\n<div>\n<pre><code>select salary, managerid from emp where name = '张无忌';</code></pre>\n</div>\n<p>②. 查询与 \"张无忌\" 的薪资及直属领导相同的员工信息 ;</p>\n<div>\n<pre><code>select *\nfrom emp\nwhere (salary, managerid) = (select salary, managerid from emp where name = '张无忌');</code></pre>\n</div>\n<p><img alt=\"watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Liq54Ot54ix57yW56iL55qE5bCP55m955m9,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\861646c3feb24e9ea83949b83258412e.png\"/>​​​</p>\n<p></p>\n<h3></h3>\n<h3><strong>5.表子查询 </strong></h3>\n<blockquote>\n<p>子查询返回的结果是多行多列，这种子查询称为表子查询。</p>\n<p>常用的操作符：IN</p>\n</blockquote>\n<p>案例:</p>\n<p>A. 查询与 \"鹿杖客\" , \"宋远桥\" 的职位和薪资相同的员工信息</p>\n<p>分解为两步执行:</p>\n<p>①. 查询 \"鹿杖客\" , \"宋远桥\" 的职位和薪资</p>\n<div>\n<pre><code>select job, salary from emp where name = '鹿杖客' or name = '宋远桥';</code></pre>\n</div>\n<p>②. 查询与 \"鹿杖客\" , \"宋远桥\" 的职位和薪资相同的员工信息</p>\n<div>\n<pre><code>select *\nfrom emp\nwhere (job, salary) in (select job, salary from emp where name = '鹿杖客' or name = '宋远桥');</code></pre>\n</div>\n<p></p>\n<p>B. 查询入职日期是 \"2006-01-01\" 之后的员工信息 , 及其部门信息</p>\n<p>分解为两步执行:</p>\n<p>①. 入职日期是 \"2006-01-01\" 之后的员工信息</p>\n<p></p>\n<div>\n<pre><code>select * from emp where entrydate &gt; '2006-01-01';</code></pre>\n</div>\n<p>②. 查询这部分员工, 对应的部门信息;</p>\n<div>\n<pre><code>select e.*, d.*\nfrom (select * from emp where entrydate &gt; '2006-01-01') e\n         left join dept d on e.dept_id = d.id;</code></pre>\n</div>\n<p></p>\n<p></p>\n<blockquote>\n<p>下一篇博客会讲到：<strong>事务   </strong><br/><img alt=\"78ebf3e975d74a4ab1d20c57ee7b2791.png\" src=\"image\\78ebf3e975d74a4ab1d20c57ee7b2791.png\"/>​​​ 系列专栏：<a href=\"https://blog.csdn.net/javascript_tsj/category_11678200.html?spm=1001.2014.3001.5482\" title=\"MySQL数据库\">MySQL数据库</a></p>\n</blockquote>\n<p></p>\n</div>\n</div>"}