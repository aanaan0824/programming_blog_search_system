{"blogid": "126410517", "writerAge": "码龄1年", "writerBlogNum": "103", "writerCollect": "5474", "writerComment": "4194", "writerFan": "7302", "writerGrade": "7级", "writerIntegral": "13155", "writerName": "三分苦", "writerProfileAdress": "writer_image\\profile_126410517.jpg", "writerRankTotal": "783", "writerRankWeekly": "296", "writerThumb": "4504", "writerVisitNum": "116739", "blog_read_count": "605", "blog_time": "于 2022-09-04 20:48:31 发布", "blog_title": "＜ Linux ＞ 进度条小程序 + git三板斧", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"Linux%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%8D%E8%BF%9B%E5%BA%A6%E6%9D%A1-toc\" style=\"margin-left:80px;\"><a href=\"#Linux%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%8D%E8%BF%9B%E5%BA%A6%E6%9D%A1\">1、Linux第一个小程序－进度条</a></p>\n<p id=\"%5Cr%20%26%26%20%5Cn-toc\" style=\"margin-left:80px;\"><a href=\"#%5Cr%20%26%26%20%5Cn\">        </a><a href=\"#%5Cr%20%26%26%20%5Cn\">行缓冲区概念</a></p>\n<p id=\"%E8%A1%8C%E7%BC%93%E5%86%B2%E5%8C%BA%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%A1%8C%E7%BC%93%E5%86%B2%E5%8C%BA%E6%A6%82%E5%BF%B5\">        </a><a href=\"#%E8%A1%8C%E7%BC%93%E5%86%B2%E5%8C%BA%E6%A6%82%E5%BF%B5\">\\r &amp;&amp; \\n</a></p>\n<p id=\"%E8%BF%9B%E5%BA%A6%E6%9D%A1%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%9B%E5%BA%A6%E6%9D%A1%E4%BB%A3%E7%A0%81\">        </a><a href=\"#%E8%BF%9B%E5%BA%A6%E6%9D%A1%E4%BB%A3%E7%A0%81\">进度条代码</a></p>\n<p id=\"11-toc\" style=\"margin-left:80px;\"><a href=\"#11\">2、git</a></p>\n<p id=\"22-toc\" style=\"margin-left:80px;\"><a href=\"#22\">        </a><a href=\"#22\">创建仓库</a></p>\n<p id=\"33-toc\" style=\"margin-left:80px;\"><a href=\"#33\">        </a><a href=\"#33\">克隆仓库到本地</a></p>\n<p id=\"44-toc\" style=\"margin-left:80px;\"><a href=\"#44\">        </a><a href=\"#44\">三板斧第一招: git add</a></p>\n<p id=\"55-toc\" style=\"margin-left:80px;\"><a href=\"#55\">        </a><a href=\"#55\">三板斧第二招: git commit</a></p>\n<p id=\"66-toc\" style=\"margin-left:80px;\"><a href=\"#66\">        </a><a href=\"#66\">三板斧第三招: git push</a></p>\n<p id=\"77-toc\" style=\"margin-left:80px;\"><a href=\"#77\">        </a><a href=\"#77\">git pull</a></p>\n<p id=\"88-toc\" style=\"margin-left:80px;\"><a href=\"#88\">        </a><a href=\"#88\">补充</a></p>\n<hr/>\n<h3>1、Linux第一个小程序－进度条</h3>\n<h3 id=\"%5Cr%20%26%26%20%5Cn\">行缓冲区概念</h3>\n<blockquote>\n<p>先来看下如下两段相似度近99.99%的代码：</p>\n<p><img alt=\"\" height=\"246\" src=\"image\\93580993c5f14360bb0e3b0fca1121bd.png\" width=\"688\"/></p>\n<p>我们针对这两段代码的可执行程序进行运行，得到的结果如下：</p>\n<ul><li>第<span style=\"color:#fe2c24;\">一</span>段：<span style=\"color:#956fe7;\">先休眠</span><span style=\"color:#0d0016;\">2秒</span>，<span style=\"color:#956fe7;\">随后输出</span>hello Linux，结束运行</li><li>第<span style=\"color:#fe2c24;\">二</span>段：<span style=\"color:#956fe7;\">先输出</span>hello Linux，<span style=\"color:#956fe7;\">随后休眠</span>2秒，结束运行</li></ul>\n<p> 这两段代码唯一的差距就在于输出的字符串后面有无\\n，可是带来的差距竟是如此之大，学过C语言的都清楚，<span style=\"color:#956fe7;\">代码自上而下运行</span>，无论上面哪种情况，<span style=\"color:#956fe7;\">理应先输出字符，再休眠</span>，事实也是这样的（尽管第一幅图肉眼是先休眠，再输出）。</p>\n<p>下面解释出现图一先休眠后输出字符的原因：</p>\n<ul><li>其实printf输出的字符早就被执行了，只不过没有被立马显示出来，究其原因在于此时的字符串在<span style=\"color:#fe2c24;\">缓冲区</span>里头</li></ul>\n<p>缓冲区就是一段内存空间，它有如下特点：</p>\n<ul><li>立马将内存中的空间显示出来（<span style=\"color:#956fe7;\">刷新策略</span>），此刷新策略的标准是<span style=\"color:#956fe7;\">行刷新</span>，它要看你要输出的字符串是不是一个<span style=\"color:#fe2c24;\">完整行</span>，<span style=\"color:#956fe7;\">只要是，就立马刷新出来，不是就一直带着，直到缓冲区变满或者程序退出了或者遇到了换行符才把你刷新出去</span>，而<span style=\"color:#fe2c24;\">完整行的标准是是否有'\\n'换行符</span>。</li></ul>\n<p>根据缓冲区的概念，现在就不难理解为什么图一会先休眠再输出了趴，因为图一没有'\\n'换行符，导致其不是一个完整行，直到程序退出才显现出来。而图二有换行符是完整行，所以立马刷新，先输出再休眠。</p>\n<p><strong><span style=\"color:#ff9900;\">如果我不想用\\n就能立马刷新呢？有何办法？</span></strong></p>\n<p>换成下面的代码试试看：</p>\n<p><img alt=\"\" height=\"230\" src=\"image\\1bda5fa79d674e2caa60ac6a69419c59.png\" width=\"448\"/></p>\n<p>上面的代码仅仅是手动刷新标准输入输出流，就实现了不用\\n也能立马刷新的效果（先输出，再休眠）。如上既是对缓冲区的理解。 </p>\n</blockquote>\n<hr/>\n<h3 id=\"%E8%A1%8C%E7%BC%93%E5%86%B2%E5%8C%BA%E6%A6%82%E5%BF%B5\">\\r &amp;&amp; \\n</h3>\n<blockquote>\n<p>先来理解下回车和换行。</p>\n<ul><li><span style=\"color:#fe2c24;\">\\r</span><span style=\"color:#0d0016;\">（回车）</span>：将光标<span style=\"color:#956fe7;\">回到当前行的最开始</span></li><li><span style=\"color:#fe2c24;\">\\n</span><span style=\"color:#0d0016;\">（换行）</span>：<span style=\"color:#956fe7;\">新起一行</span></li></ul>\n<p>综合回车与换行的概念集合在一起就是我们键盘上的<span style=\"color:#956fe7;\">enter回车键</span><span style=\"color:#0d0016;\">（</span><span style=\"color:#fe2c24;\">\\r </span><span style=\"color:#0d0016;\">+</span><span style=\"color:#fe2c24;\"> \\n</span><span style=\"color:#0d0016;\">）</span>。既新起一行，又把光标回到当前行最开始。</p>\n<p>针对这里的 \\r，我们可以实现一个倒计时小程序，其规则是在同一行的相同光标位置处不断更新数字，这里就可以巧用\\r了，因为其可以让光标回到当前行的最开始，不过还少一个刷新标准输入输出流的操作，以此满足缓冲区行刷新的要求，代码如下：</p>\n<p><img alt=\"\" height=\"269\" src=\"image\\fbac547774d34e60b1647e7264f8d916.png\" width=\"377\"/></p>\n<p>效果如下：</p>\n<p style=\"text-align:center;\"><img alt=\"\" class=\"left\" src=\"https://img-blog.csdnimg.cn/0cbf8083f9ff4881baa22aad0a07e1a0.gif\"/></p>\n<p> 做好了如上的准备，下面就可以来实现我们的进度条了。</p>\n</blockquote>\n<hr/>\n<h3 id=\"%E8%BF%9B%E5%BA%A6%E6%9D%A1%E4%BB%A3%E7%A0%81\">进度条代码</h3>\n<blockquote>\n<p>代码如下：</p>\n<p><img alt=\"\" height=\"499\" src=\"image\\4fbc5cc08f264872a250791861e08047.png\" width=\"596\"/></p>\n<p>效果如下：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/5ec8abe328d64f1da4336dc141f6366d.gif\"/></p>\n</blockquote>\n<hr/>\n<h3 id=\"11\">2、git</h3>\n<h3 id=\"22\">创建仓库</h3>\n<blockquote>\n<p>进入gitee，按图示新建仓库：</p>\n<p><img alt=\"\" height=\"909\" src=\"image\\02dde11294154bc883015109585ec175.png\" width=\"938\"/></p>\n</blockquote>\n<hr/>\n<h3 id=\"33\">克隆仓库到本地</h3>\n<blockquote>\n<p>进入创建好的仓库，点击<span style=\"color:#956fe7;\">克隆/下载</span>，复制那一串地址。</p>\n<p><img alt=\"\" height=\"392\" src=\"image\\7902b22e5ce443d19820143869a9045c.png\" width=\"1162\"/></p>\n<p>进入xshell，输入以下指令：</p>\n<pre><code class=\"language-cpp\">git clone “远程仓库的链接”\n</code></pre>\n<p>随后输入你gitee的账号密码即可完成克隆到本地。可以使用<span style=\"color:#956fe7;\">git status</span>来查看本地仓库和远端仓库之间的关系：</p>\n<p><img alt=\"\" height=\"136\" src=\"image\\c90b62b246064183b1254b7db26da2aa.png\" width=\"698\"/></p>\n<p>此时就会看到它提示你有一个没有被管理的文件叫test.c。接下来即可进入git三板斧： </p>\n</blockquote>\n<hr/>\n<h3 id=\"44\">三板斧第一招: git add</h3>\n<blockquote>\n<p>方式：</p>\n<pre><code class=\"language-cpp\">git add [文件名]</code></pre>\n<p>示例：</p>\n<p><img alt=\"\" height=\"45\" src=\"image\\1c10bfe2f6994ba882f89aeb708b6784.png\" width=\"472\"/></p>\n</blockquote>\n<hr/>\n<h3 id=\"55\">三板斧第二招: git commit</h3>\n<blockquote>\n<p>方式：</p>\n<pre><code class=\"language-cpp\">git commit -m \"输入你的日志内容\"</code></pre>\n<p>示例：</p>\n<p><img alt=\"\" height=\"80\" src=\"image\\f310910d78c146ab851c51ca3c760b6b.png\" width=\"578\"/></p>\n</blockquote>\n<hr/>\n<h3 id=\"66\">三板斧第三招: git push</h3>\n<blockquote>\n<p>这一步是同步到远端服务器上，执行下面的指令：</p>\n<pre><code class=\"language-cpp\">git push</code></pre>\n<p>需要再次填入gitee用户名和密码，示例：</p>\n<p><img alt=\"\" height=\"213\" src=\"image\\32e393b5fe6c4ab8b81193f03a2ceab8.png\" width=\"532\"/></p>\n<p>同步成功后, 刷新 Github 页面就能看到代码改动了：</p>\n<p><img alt=\"\" height=\"340\" src=\"image\\66b6a8fc2dec4f078a105c69d6fc682d.png\" width=\"1024\"/></p>\n</blockquote>\n<hr/>\n<h3 id=\"77\">git pull</h3>\n<blockquote>\n<p>下面是我test.c的代码：</p>\n<p><img alt=\"\" height=\"136\" src=\"image\\7e5e252c276f45988b91e6f0e82c9c34.png\" width=\"387\"/></p>\n<p>但是提交的test.c文件在gitee仓库上是可以进行修改的：</p>\n<p><img alt=\"\" height=\"265\" src=\"image\\b4b50d94c59d458bba19e77f366a16c0.png\" width=\"531\"/></p>\n<ul><li>不过远端仓库的修改不会影响本地仓库，如若修改后，你现在在本地仓库上又创建了一个新的文件，想把它三板斧传到gitee上是会报错的，因为你<span style=\"color:#956fe7;\">要确保先前的git三板斧文件的本地仓库内容和远端仓库内容是相一致的，这样才能二次git三板斧</span>。</li></ul>\n<p>为了能够二次git，我们输入<strong><span style=\"color:#fe2c24;\">git pull</span></strong> 这条命令，就会发现我远端仓库修改过的内容被拉到本地仓库了：</p>\n<p><img alt=\"\" height=\"194\" src=\"image\\f940ab3b999846d990923cf74f0a8ab2.png\" width=\"530\"/></p>\n<p>下面我们再对新创建的文件进行第二次git三板斧就没问题了。 </p>\n<p><img alt=\"\" height=\"289\" src=\"image\\7882ae37d31042359e89a0000bc42d8b.png\" width=\"1007\"/></p>\n</blockquote>\n<hr/>\n<h3 id=\"88\">补充</h3>\n<blockquote>\n<ul><li>1、可能没有git命令，手动输入：<span style=\"color:#956fe7;\">sudo yum install -y git</span></li><li>2、第一次使用git的时候，可能会让你配置一下你的用户名和邮箱</li><li>3、<span style=\"color:#956fe7;\">.gitignore</span>：就是一个<span style=\"color:#fe2c24;\">黑名单</span>，可以手动添加指定黑名单后缀名，这样后续git三板斧就不会上传黑名单里头的。</li></ul>\n</blockquote>\n</div>\n</div>"}