{"blogid": "124487596", "writerAge": "码龄1年", "writerBlogNum": "43", "writerCollect": "874", "writerComment": "1078", "writerFan": "3152", "writerGrade": "5级", "writerIntegral": "3456", "writerName": "二球悬铃木丶", "writerProfileAdress": "writer_image\\profile_124487596.jpg", "writerRankTotal": "6788", "writerRankWeekly": "2604", "writerThumb": "1256", "writerVisitNum": "40147", "blog_read_count": "1049", "blog_time": "已于 2022-04-29 09:52:17 修改", "blog_title": "leedcode.203移除链表元素", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>系列文章目录</h1>\n<p><a href=\"https://blog.csdn.net/m0_63742310/article/details/124396559?spm=1001.2014.3001.5501\">初识单链表</a></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_0\">系列文章目录</a></li><li><a href=\"#tangerine_33\">方法一：该我删的我就删:tangerine:</a></li><li><a href=\"#peach_103\">方法二：不该删的我留下:peach:</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<hr/>\n<p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。<br/> <strong>示例 1：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\6e2190680e4b44339d48e9970bc4305e.png\"/></p>\n<blockquote>\n<p>输入：head = [1,2,6,3,4,5,6], val = 6<br/> 输出：[1,2,3,4,5]</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：head = [], val = 1</p>\n<p>输出：[]</p>\n</blockquote>\n<p><strong>示例 3：</strong></p>\n<blockquote>\n<p>输入：head = [7,7,7,7], val = 7</p>\n<p>输出：[]</p>\n</blockquote>\n<h1><a id=\"tangerine_33\"></a>方法一：该我删的我就删🍊</h1>\n<p>当遇到Node.val==val时，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2f3a62960c9b45e6b869a495816442b3.png\"/><br/> 为了将cur结点移除，cur的前一个结点prev应该存放cur的后一个结点的地址，free掉用删除的结点，并且cur向后移动一位。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a26bb22767734f318b19c5aef3c3c15c.png\"/><br/> 当Node.val != val时,prev和cur都向后移，<br/> 这样遍历完之后就可以删完。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> prev<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        prev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0b3f0b86ab2e4fecb0d09dc77687e41f.png\"/><br/> 错辣！<br/> 我们看执行用例，7，7，7，7，<br/> 再创建一个1，7，7，7<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e8b610e632544a08b9121a95a96f6628.png\"/><br/> 看来是头删的问题，那就加个头删。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token comment\">//头删单独处理</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">==</span>head<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            head <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">else</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n        prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> prev<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        prev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"peach_103\"></a>方法二：不该删的我留下🍑</h1>\n<p>遍历一遍，把不是val的尾插。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\29ab92110a914b0abf5d10f60e04688e.png\"/><br/> 代码如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n      cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token comment\">//尾插</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tail <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            head <span class=\"token operator\">=</span> tail <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            tail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">)</span>\n        tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>今天的分享就到这里辣。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4e4b6302f4b14fb99504fc6d075d2afa.png\"/></p>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}