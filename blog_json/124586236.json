{"blogid": "124586236", "writerAge": "码龄3年", "writerBlogNum": "102", "writerCollect": "111", "writerComment": "5", "writerFan": "93", "writerGrade": "4级", "writerIntegral": "1078", "writerName": "@seven@", "writerProfileAdress": "writer_image\\profile_124586236.jpg", "writerRankTotal": "17804", "writerRankWeekly": "34393", "writerThumb": "33", "writerVisitNum": "50758", "blog_read_count": "3461", "blog_time": "已于 2022-05-06 18:42:37 修改", "blog_title": "c++操作mysql（详解）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>1.安装mysql</h1>\n<p>具体安装看下面这个连接</p>\n<p><a href=\"https://blog.csdn.net/m0_46392035/article/details/124547528?spm=1001.2014.3001.5501\" title=\"(18条消息) Mysql使用详解_@seven@的博客-CSDN博客\">(18条消息) Mysql使用详解_@seven@的博客-CSDN博客</a></p>\n<h1>2.接口介绍</h1>\n<h2>2.1.初始化函数</h2>\n<blockquote>\n<p>MYSQL *mysql_init(MYSQL *mysql);</p>\n<p id=\"uf8b3901a\">mysql 可以传 NULL</p>\n<p id=\"ud1ed4f07\"><strong>返回值：mysql</strong>句柄 </p>\n</blockquote>\n<h2>2.2设置连接选项配置</h2>\n<blockquote>\n<p>int mysql_options(MYSQL *mysql, enum mysql_option option, const char *arg)</p>\n<p id=\"uf426a664\"><strong>描述</strong></p>\n<p id=\"u33835229\">可用于设置额外的连接选项，并影响连接的行为。可多次调用该函数来设置数个选项。</p>\n<p id=\"u859297fe\">应在mysql_init()之后、以及mysql_connect()或mysql_real_connect()之前调用mysql_options()。</p>\n<p id=\"udb077668\">选项参量指的是你打算设置的选项。Arg参量是选项的值。如果选项是整数，那么arg应指向整数的值。</p>\n<p>如：</p>\n<p><br/> mysql_options(m_mysql, MYSQL_OPT_RECONNECT, &amp;reconnect);配合mysql_ping实现自动重连<br/> mysql_options(m_mysql, MYSQL_SET_CHARSET_NAME, \"utf8mb4\");//编码设置</p>\n</blockquote>\n<h2> 2.3连接数据库</h2>\n<blockquote>\n<p>MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char *user, <br/>                           const char *passwd, const char *db, unsigned int port, <br/>                           const char *unix_socket, unsigned long client_flag)</p>\n<p id=\"uc33e22de\"><strong>参数介绍</strong></p>\n<ul><li id=\"ub9a020d0\">mysql 初始化的句柄指针</li><li id=\"uce8581a0\">host 主机地址</li><li id=\"u6a207a34\">user 用户名 – mysql数据库 root</li><li id=\"u049ece97\">passwd 用户的密码</li><li id=\"ua4b3f6f4\">db 要连接的数据库</li><li id=\"u9600e3be\">port 端口 一般填0,mysql默认端口 3306</li><li id=\"u69937a16\">unix_socket 本地套接字 ,一般填NULL</li><li id=\"uee7a7fb2\">client_flag 连接标志 一般填0</li></ul>\n<p id=\"u820beb9e\"></p>\n<p id=\"uf1d5d8da\"><strong>返回值</strong>：成功返回 连接句柄,失败返回 NULL</p>\n</blockquote>\n<h2> 2.4释放连接资源</h2>\n<blockquote>\n<p>  mysql_close（MYSQY* conn）;</p>\n<p>释放conn连接资源</p>\n</blockquote>\n<h2>2.5数据库操作</h2>\n<blockquote>\n<p>int mysql_query(MYSQL *mysql, const char *query)</p>\n<p id=\"u868f37e0\"><strong>参数介绍:</strong></p>\n<ul><li id=\"u7f14d9bb\">mysql 连接句柄</li><li id=\"u6ba995c7\">query 执行的sql</li></ul>\n<p id=\"u9bdf0df1\"><strong>反回值：</strong></p>\n<ul><li id=\"ub9ba031a\">成功 返回 0</li><li id=\"u9b9ceaab\">失败 返回 非0</li></ul>\n</blockquote>\n<h2>2.6获得结果集的函数</h2>\n<blockquote>\n<h2>MYSQL_RES *mysql_store_result(MYSQL *mysql)</h2>\n<p id=\"u68830146\"><strong>返回值</strong>： </p>\n<p id=\"u53a4672b\">如果读取结果集失败，mysql_store_result()还会返回Null指针。</p>\n<p id=\"ud282a8c0\">通过检查mysql_error()是否返回非空字符串，mysql_errno()是否返回非0值，或mysql_field_count()是否返回0，可以检查是否出现了错误。</p>\n<p id=\"ud009aab2\">如：</p>\n<p>MYSQL_RES* res = mysql_store_result(m_mysql);</p>\n</blockquote>\n<h2 id=\"u48d4f58d\">2.7释放结果集</h2>\n<blockquote>\n<p>void mysql_free_result(MYSQL_RES *result)</p>\n<p>如：</p>\n<p> mysql_free_result(m_res);<br/>     m_res = NULL;</p>\n</blockquote>\n<h2>2.8取出一行信息</h2>\n<blockquote>\n<h2>MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)</h2>\n<h2></h2>\n<p id=\"u518e36eb\"><strong>描述</strong></p>\n<p id=\"u796f5595\">检索结果集的下一行。在mysql_store_result()之后使用时，如果没有要检索的行，mysql_fetch_row()返回NULL。在mysql_use_result()之后使用时，如果没有要检索的行或出现了错误，mysql_fetch_row()返回NULL。</p>\n<p id=\"u3ddb205b\">行内值的数目由mysql_num_fields(result)给出。如果行中保存了调用mysql_fetch_row()返回的值，将按照row[0]到row[mysql_num_fields(result)-1]，访问这些值的指针。行中的NULL值由NULL指针指明。</p>\n<p id=\"u96c09aa4\">可以通过调用mysql_fetch_lengths()来获得行中字段值的长度。对于空字段以及包含NULL的字段，长度为0。通过检查字段值的指针，能够区分它们。如果指针为NULL，字段为NULL，否则字段为空。</p>\n<p id=\"ub25f0721\"></p>\n<p id=\"u938e8ff7\"><strong>返回值</strong></p>\n<p id=\"u2a3b91b2\">下一行的MYSQL_ROW结构。如果没有更多要检索的行或出现了错误，返回NULL。</p>\n</blockquote>\n<h2>2.9.获取查询的显示列的长度 </h2>\n<blockquote>\n<p>unsigned int mysql_num_fields(MYSQL_RES *result)</p>\n<p></p>\n<p id=\"ub94153a3\"><strong>描述</strong>：返回结果集中的列数。</p>\n<p id=\"u7d2d0f80\">注意，你可以从指向结果集的指针或指向连接句柄的指针获得行数。如果mysql_store_result()或mysql_use_result()返回NULL，应使用连接句柄（因而没有结果集指针）。在该情况下，可调用mysql_field_count()来判断mysql_store_result()是否生成了非空结果。这样，客户端程序就能采取恰当的行动，而不需要知道查询是否是SELECT语句（或类似SELECT的语句）。在下面的示例中，介绍了执行该操作的方式。</p>\n<p id=\"u71d100f0\"><span style=\"color:#fe2c24;\"><strong>行数直接判断MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)是否为空</strong></span></p>\n<p id=\"u6ad1d09c\">如：</p>\n<p>int num_fields = mysql_num_fields(m_res);</p>\n</blockquote>\n<h2>2.10.获取列信息 </h2>\n<blockquote>\n<p>MYSQL_FIELD *mysql_fetch_field(MYSQL_RES *result)</p>\n<p></p>\n<p id=\"u41469bc8\"><strong>描述</strong></p>\n<p id=\"u4bf83cbe\">返回采用MYSQL_FIELD结构的结果集的列。重复调用该函数，以检索关于结果集中所有列的信息。未剩余字段时，mysql_fetch_field()返回NULL。</p>\n<p id=\"u7ceba23b\">每次执行新的SELECT查询时，将复位mysql_fetch_field()，以返回关于第1个字段的信息。调用mysql_field_seek()也会影响mysql_fetch_field()返回的字段。</p>\n<p id=\"u2d8dcee4\">如果调用了mysql_query()以在表上执行SELECT，但未调用mysql_store_result()，如果调用了mysql_fetch_field()以请求BLOB字段的长度，MySQL将返回默认的Blob长度（8KB）。之所以选择8KB是因为MySQL不知道BLOB的最大长度。应在日后使其成为可配置的。一旦检索了结果集，field-&gt;max_length将包含特定查询中该列的最大值的长度。</p>\n<p id=\"u732038b3\"></p>\n<p id=\"u6d71c7dc\"><strong>返回值</strong></p>\n<p id=\"uf0334631\">当前列的MYSQL_FIELD结构。如果未剩余任何列，返回NULL。</p>\n</blockquote>\n<p></p>\n<p></p>\n</div>\n</div>"}