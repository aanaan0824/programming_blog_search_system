{"blogid": "124100537", "writerAge": "码龄177天", "writerBlogNum": "50", "writerCollect": "255", "writerComment": "68", "writerFan": "2203", "writerGrade": "3级", "writerIntegral": "708", "writerName": "SYBH.", "writerProfileAdress": "writer_image\\profile_124100537.jpg", "writerRankTotal": "22824", "writerRankWeekly": "962", "writerThumb": "98", "writerVisitNum": "20803", "blog_read_count": "12835", "blog_time": "已于 2022-07-06 22:25:46 修改", "blog_title": "AI识别教程 yolov5 （穿越火线，csgo等FPS游戏识别）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%BA%8C%E3%80%81%E8%A7%86%E9%A2%91%E8%AF%86%E5%88%AB-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E8%A7%86%E9%A2%91%E8%AF%86%E5%88%AB\">二、视频识别</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E7%89%88%E6%9C%AC%E5%92%8C%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E7%89%88%E6%9C%AC%E5%92%8C%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83\">三、版本和配置环境</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\">四、准备工作</a></p>\n<p id=\"1.yolov5%20%E6%A8%A1%E6%9D%BF%E4%B8%8B%E8%BD%BD-toc\" style=\"margin-left:40px;\"><a href=\"#1.yolov5%20%E6%A8%A1%E6%9D%BF%E4%B8%8B%E8%BD%BD\">1.yolov5 模板下载</a></p>\n<p id=\"2.%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E5%BA%93\">2.安装所需库</a></p>\n<p id=\"%C2%A0(1)%E5%AE%89%E8%A3%85pytorch%EF%BC%88%E5%BB%BA%E8%AE%AE%E5%AE%89%E8%A3%85gpu%E7%89%88%E6%9C%ACcpu%E7%89%88%E6%9C%AC%E5%A4%AA%E6%85%A2%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%281%29%E5%AE%89%E8%A3%85pytorch%EF%BC%88%E5%BB%BA%E8%AE%AE%E5%AE%89%E8%A3%85gpu%E7%89%88%E6%9C%ACcpu%E7%89%88%E6%9C%AC%E5%A4%AA%E6%85%A2%EF%BC%89\"> (1)安装pytorch（建议安装gpu版本cpu版本太慢）</a></p>\n<p id=\"3.%E8%BF%90%E8%A1%8C%E6%A3%80%E6%B5%8B-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E8%BF%90%E8%A1%8C%E6%A3%80%E6%B5%8B\">3.运行检测</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E6%95%B0%E6%8D%AE%E9%9B%86-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E6%95%B0%E6%8D%AE%E9%9B%86\">五、数据集</a></p>\n<p id=\"1.%E5%88%B6%E4%BD%9C%E6%A0%87%E7%AD%BE-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%88%B6%E4%BD%9C%E6%A0%87%E7%AD%BE\">1.制作标签</a></p>\n<p id=\"2.%E8%BD%AC%E6%A0%BC%E5%BC%8F%EF%BC%88json%E8%BD%ACtxt%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E8%BD%AC%E6%A0%BC%E5%BC%8F%EF%BC%88json%E8%BD%ACtxt%EF%BC%89\">2.转格式（json转txt）</a></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"%E5%85%AD%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AD%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">六、配置文件</a></p>\n<p id=\"1.mydata.yaml-toc\" style=\"margin-left:40px;\"><a href=\"#1.mydata.yaml\">1.mydata.yaml</a></p>\n<p id=\"2.mydata_1.yaml-toc\" style=\"margin-left:40px;\"><a href=\"#2.mydata_1.yaml\">2.mydata_1.yaml</a></p>\n<p id=\"%E4%B8%83%E3%80%81%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B\">七、训练模型</a></p>\n<p id=\"%E5%85%AB%E3%80%81%E6%B5%8B%E8%AF%95%E8%A7%86%E9%A2%91-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AB%E3%80%81%E6%B5%8B%E8%AF%95%E8%A7%86%E9%A2%91\">八、测试视频</a></p>\n<p id=\"%E4%B9%9D%E3%80%81%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B9%9D%E3%80%81%E6%80%BB%E7%BB%93\">九、总结</a></p>\n<p></p>\n<h1 id=\"%E8%B5%84%E6%BA%90%E9%93%BE%E6%8E%A5%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81\"></h1>\n<h1 id=\"%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%88%E9%99%84%E6%9C%89%E5%90%8E%E7%BB%AD%E6%93%8D%E4%BD%9C%E5%86%85%E5%AE%B9%E5%90%8E%E7%BB%AD%E6%93%8D%E4%BD%9C%E5%9C%A8pdf%E8%A7%A3%E5%8E%8B%E5%90%8E%E7%9A%84pdf%E4%B8%AD%E3%80%82yolov5%E6%A8%A1%E5%9E%8B%E7%A9%BF%E8%B6%8A%E7%81%AB%E7%BA%BF%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%EF%BC%8C%EF%BC%88%E9%80%82%E7%94%A8%E4%BA%8Ecsgo%E7%AD%89fps%E6%B8%B8%E6%88%8F%EF%BC%89%E6%9C%80%E6%96%B0%E7%89%88_yolov5%E6%B8%B8%E6%88%8F%E6%A8%A1%E5%9E%8B-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%E7%B1%BB%E8%B5%84%E6%BA%90-CSDN%E6%96%87%E5%BA%93%C2%A0%E4%B8%80%E3%80%81%E5%89%8D%E8%A8%80\"><a href=\"https://download.csdn.net/download/m0_68036862/85709610\" title=\"yolov5穿越火线识别-深度学习文档类资源-CSDN文库\">yolov5穿越火线识别-深度学习文档类资源-CSDN文库</a></h1>\n<h1><strong>一、前言</strong></h1>\n<p>1.代码在我的资源里下载。</p>\n<p>2.本文不会讲解关于yolov5的理论问题，只是教大家实操，这篇文章可以帮助大家学会yolov5的训练与识别，本文使用穿越火线（cf）为例。</p>\n<p></p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E8%A7%86%E9%A2%91%E8%AF%86%E5%88%AB\">二、视频识别</h1>\n<p>我们先看视频效果。</p>\n<p><img alt=\"7af24b28840d4176934078931a41a3fb.png\" src=\"image\\7af24b28840d4176934078931a41a3fb.png\"/></p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"vMRfJCZt-1651215292014\" src=\"https://live.csdn.net/v/embed/203365\"></iframe>\n<p>yolov5 穿越火线角色识别</p>\n</div>\n<p></p>\n<p></p>\n<h1><span style=\"color:#fe2c24;\"><strong>后续链接</strong></span></h1>\n<h1><strong><span style=\"color:#fe2c24;\"><a href=\"https://mianbaoduo.com/o/bread/YpyXmZhs\" title=\"yolov5后续（参考v3） (mianbaoduo.com)\">yolov5后续（参考v3） (mianbaoduo.com)</a></span></strong></h1>\n<p></p>\n<p></p>\n<h1 id=\"%E4%B8%89%E3%80%81%E7%89%88%E6%9C%AC%E5%92%8C%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83\">三、版本和配置环境</h1>\n<p># pip install -r requirements.txt</p>\n<p># Base ----------------------------------------<br/> matplotlib&gt;=3.2.2<br/> numpy&gt;=1.18.5<br/> opencv-python&gt;=4.1.2<br/> Pillow&gt;=7.1.2<br/> PyYAML&gt;=5.3.1<br/> requests&gt;=2.23.0<br/> scipy&gt;=1.4.1<br/> torch&gt;=1.7.0<br/> torchvision&gt;=0.8.1<br/> tqdm&gt;=4.41.0</p>\n<p># Logging -------------------------------------<br/> tensorboard&gt;=2.4.1<br/> # wandb</p>\n<p># Plotting ------------------------------------<br/> pandas&gt;=1.1.4<br/> seaborn&gt;=0.11.0</p>\n<p># Export --------------------------------------<br/> # coremltools&gt;=4.1  # CoreML export<br/> # onnx&gt;=1.9.0  # ONNX export<br/> # onnx-simplifier&gt;=0.3.6  # ONNX simplifier<br/> # scikit-learn==0.19.2  # CoreML quantization<br/> # tensorflow&gt;=2.4.1  # TFLite export<br/> # tensorflowjs&gt;=3.9.0  # TF.js export<br/> # openvino-dev  # OpenVINO export</p>\n<p># Extras --------------------------------------<br/> # albumentations&gt;=1.0.3<br/> # Cython  # for pycocotools https://github.com/cocodataset/cocoapi/issues/172<br/> # pycocotools&gt;=2.0  # COCO mAP<br/> # roboflow<br/> thop  # FLOPs computation<br/>  </p>\n<p></p>\n<p></p>\n<h1 id=\"%E5%9B%9B%E3%80%81%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\">四、准备工作</h1>\n<h2 id=\"1.yolov5%20%E6%A8%A1%E6%9D%BF%E4%B8%8B%E8%BD%BD\">1.yolov5 模板下载</h2>\n<p>第一步：将整个代码从<a href=\"https://so.csdn.net/so/search?q=github&amp;spm=1001.2101.3001.7020\" title=\"github\">github</a>上下载下来，</p>\n<p> 网址：<a href=\"https://github.com/ultralytics/yolov5\" title=\"GitHub - ultralytics/yolov5: YOLOv5 🚀 in PyTorch &gt; ONNX &gt; CoreML &gt; TFLite\">GitHub - ultralytics/yolov5: YOLOv5 🚀 in PyTorch &gt; ONNX &gt; CoreML &gt; TFLite</a></p>\n<p>也可以直接到GitHub上搜yolov5</p>\n<p><img alt=\"2b5f74c76530407e85965cad789b9200.png\" src=\"image\\2b5f74c76530407e85965cad789b9200.png\"/></p>\n<p> 然后点code（绿色） 最后点下面的Download ZIP (最好不要下到C盘，如果C盘够用也没关系)</p>\n<h2 id=\"2.%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E5%BA%93\">2.安装所需库</h2>\n<p>主要是安装版本与配置声明中所需在库。<br/> matplotlib&gt;=3.2.2<br/> numpy&gt;=1.18.5<br/> opencv-python&gt;=4.1.2<br/> Pillow<br/> PyYAML&gt;=5.3.1<br/> scipy&gt;=1.4.1<br/> torch&gt;=1.7.0<br/> torchvision&gt;=0.8.1<br/> tqdm&gt;=4.41.0<br/> tensorboard&gt;=2.4.1<br/> seaborn&gt;=0.11.0<br/> pandas<br/> pycocotools&gt;=2.0  # COCO mAP<br/> albumentations&gt;=1.0.2</p>\n<h3 id=\"%C2%A0(1)%E5%AE%89%E8%A3%85pytorch%EF%BC%88%E5%BB%BA%E8%AE%AE%E5%AE%89%E8%A3%85gpu%E7%89%88%E6%9C%ACcpu%E7%89%88%E6%9C%AC%E5%A4%AA%E6%85%A2%EF%BC%89\"><br/>  (1)安装pytorch（建议安装gpu版本cpu版本太慢）</h3>\n<p>这些库中可能就pytorch比较难安装，其他库用pip install 基本能实现。</p>\n<p>可直接在Anaconda Prompt里输入：</p>\n<pre><code>pip install torch==1.7.0+cu101 torchvision==0.8.1+cu101 torchaudio===0.7.0 -f https://download.pytorch.org/whl/torch_stable.html</code></pre>\n<p>很大几率会不成功</p>\n<p>如果不成功，可以参考一下下面的网址。<a href=\"https://blog.csdn.net/weixin_45621014/article/details/121264651\" title=\"安装Pytorch-gpu版本（第一次安装 或 已经安装Pytorch-cpu版本后）_js_dxx的博客-CSDN博客_pytorchgpu版本\">安装Pytorch-gpu版本（第一次安装 或 已经安装Pytorch-cpu版本后）_js_dxx的博客-CSDN博客_pytorchgpu版本</a></p>\n<p></p>\n<h2 id=\"3.%E8%BF%90%E8%A1%8C%E6%A3%80%E6%B5%8B\">3.运行检测</h2>\n<p>下载完yolov5后，运行detect，可以帮助我们检查上面的环境是不是安装成功。</p>\n<p><img alt=\"6db88901610046e9b861ed7de890c0a0.png\" src=\"image\\6db88901610046e9b861ed7de890c0a0.png\"/></p>\n<p>如果运行不报错，我们会在runs//detect//exp 文件夹下看到两张已经预测出的照片。</p>\n<p></p>\n<p><img alt=\"9428397704f54ecbbbec1dc57aad1b51.png\" src=\"image\\9428397704f54ecbbbec1dc57aad1b51.png\"/><img alt=\"d73b038e0d08457ba215021458d553b7.png\" src=\"image\\d73b038e0d08457ba215021458d553b7.png\"/></p>\n<p>如果报错，问题也不大，看就是安装的环境版本比较低或者没安装，我们稍微调试一下就OK了。</p>\n<p></p>\n<h1 id=\"%E4%BA%94%E3%80%81%E6%95%B0%E6%8D%AE%E9%9B%86\" style=\"margin-left:0px;\">五、数据集</h1>\n<p>我们先要创建几个文件夹用来存放数据和模型。</p>\n<p>在yolov5-master如下图所示文件夹</p>\n<p> <img alt=\"0acda85eb693447ab0616fa310a7c036.png\" src=\"image\\0acda85eb693447ab0616fa310a7c036.png\"/></p>\n<p></p>\n<h2 id=\"1.%E5%88%B6%E4%BD%9C%E6%A0%87%E7%AD%BE\" style=\"margin-left:0px;\">1.制作标签</h2>\n<p>这里我是以穿越火线为例，提供100个已经标记好的数据（放在文末）。你也可以自己标记，一百张效果不是很好，可以多标记几张。</p>\n<p></p>\n<p>(1)安装labelme</p>\n<p>在Anaconda Prompt里pip install labelme</p>\n<p></p>\n<p>(2)使用labelme</p>\n<p>在Anaconda Prompt里输入labelme，会弹出一个窗口。</p>\n<p><img alt=\"bcd7d760c1c74314bce8b8c45c16f9d4.png\" src=\"image\\bcd7d760c1c74314bce8b8c45c16f9d4.png\"/></p>\n<p>然后打开图片所在的文件夹</p>\n<p>点击rectangle，标记想要识别的东西。</p>\n<p>我们这里用了两个标签（保卫者：'Global Risk'  、潜伏者： 'Black List'）</p>\n<p> <img alt=\"cd25aa0ef67643d29adf2c72698a6a95.png\" src=\"image\\cd25aa0ef67643d29adf2c72698a6a95.png\"/></p>\n<p> 标记完后保存到一个新的文件夹下，保存的文件格式是.json</p>\n<p></p>\n<h2 id=\"2.%E8%BD%AC%E6%A0%BC%E5%BC%8F%EF%BC%88json%E8%BD%ACtxt%EF%BC%89\" style=\"margin-left:0px;\">2.转格式（json转txt）</h2>\n<p>要修改代码中标签名称，存放json文件的绝对路径和保存txt文件的绝对路径。</p>\n<p>我们将生成的txt放在my_dates//labels//train中</p>\n<p>将原来的图片放在my_dates//images//train中</p>\n<pre><code>import json\nimport os\nname2id =  {'Global Risk':0,'Black List':1}    #标签名称\ndef convert(img_size, box):\n    dw = 1. / (img_size[0])\n    dh = 1. / (img_size[1])\n    x = (box[0] + box[2]) / 2.0 - 1\n    y = (box[1] + box[3]) / 2.0 - 1\n    w = box[2] - box[0]\n    h = box[3] - box[1]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return (x, y, w, h)\ndef decode_json(json_floder_path, json_name):\n    txt_name = 'C:\\\\img \\\\' + json_name[0:-5] + '.txt'\n    #存放txt的绝对路径\n    txt_file = open(txt_name, 'w')\n    json_path = os.path.join(json_floder_path, json_name)\n    data = json.load(open(json_path, 'r', encoding='gb2312',errors='ignore'))\n    img_w = data['imageWidth']\n    img_h = data['imageHeight']\n    for i in data['shapes']:\n        label_name = i['label']\n        if (i['shape_type'] == 'rectangle'):\n            x1 = int(i['points'][0][0])\n            y1 = int(i['points'][0][1])\n            x2 = int(i['points'][1][0])\n            y2 = int(i['points'][1][1])\n \n            bb = (x1, y1, x2, y2)\n            bbox = convert((img_w, img_h), bb)\n            txt_file.write(str(name2id[label_name]) + \" \" + \" \".join([str(a) for a in bbox]) + '\\n')\n\nif __name__ == \"__main__\":\n    json_floder_path = 'G:\\\\img\\\\'\n    #存放json的文件夹的绝对路径\n    json_names = os.listdir(json_floder_path)\n    for json_name in json_names:\n        decode_json(json_floder_path, json_name)</code></pre>\n<h1 style=\"margin-left:0px;\"></h1>\n<h1 id=\"%E5%85%AD%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" style=\"margin-left:0px;\">六、配置文件</h1>\n<h2 id=\"1.mydata.yaml\">1.mydata.yaml</h2>\n<p>copy一下coco128.yaml文件到my_dates下并改名为mydata</p>\n<p><img alt=\"8e908652c6ab4f8298c0b2789522aeee.png\" src=\"image\\8e908652c6ab4f8298c0b2789522aeee.png\"/></p>\n<p><img alt=\"e8602b31370a4becbe058e2fdbdee509.png\" src=\"image\\e8602b31370a4becbe058e2fdbdee509.png\"/></p>\n<p> 然后修改里面的参数：</p>\n<p>（1）先将path注释掉（别忘记注释） ，然后将train和val改为存放训练集图片的位置</p>\n<pre>train: my_dates/images/train \nval: my_dates/images/train</pre>\n<p> （2）然后将nc 改为标签个数（我们这里是2）,names里面改为我们的标签名。</p>\n<p><img alt=\"2f986c2963df4b43a74b8b3ba0d46b70.png\" src=\"image\\2f986c2963df4b43a74b8b3ba0d46b70.png\"/></p>\n<p>别忘了注释path</p>\n<h2 id=\"2.mydata_1.yaml\">2.mydata_1.yaml</h2>\n<p>copy一下yolov5s.yaml文件到my_dates下并改名为mydata_1。（yolov5s效果最差但速度最快我们可以根据自己的情况选择模型）</p>\n<p><img alt=\"59888c7d237547b6a42672168c9fb049.png\" src=\"image\\59888c7d237547b6a42672168c9fb049.png\"/></p>\n<p><img alt=\"5dceb493fe1f4cd7b466b154908f28ce.png\" src=\"image\\5dceb493fe1f4cd7b466b154908f28ce.png\"/></p>\n<p></p>\n<p>  然后修改里面的参数：</p>\n<p>这里只需要将第四行的nc改为2（标签个数） 。</p>\n<p><img alt=\"63a56cca7b2e4ab3a0458549e55b5310.png\" src=\"image\\63a56cca7b2e4ab3a0458549e55b5310.png\"/></p>\n<h1 id=\"%E4%B8%83%E3%80%81%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B\" style=\"margin-left:0px;\">七、训练模型</h1>\n<p>我们要对train.py文件进行修改。</p>\n<p>1.为了防止编码出错，with open后面要加上encoding='utf-8'，要改好几处，可以用ctrl+F查找with open。</p>\n<p><img alt=\"d0c278f6cb8b4833b2da3e6a64133972.png\" src=\"image\\d0c278f6cb8b4833b2da3e6a64133972.png\"/></p>\n<p> 2.我们还要改多处default的值，在代码的480行左右。（改的全是default的值）。</p>\n<p>一共要修改六处，最后一处稍微靠下一点。</p>\n<p>第四处如果电脑配置好的话可以不用修改。</p>\n<p><img alt=\"687e6a71c7c24f8785cb58b358ee1a5e.png\" src=\"image\\687e6a71c7c24f8785cb58b358ee1a5e.png\"/></p>\n<p><img alt=\"7d4c994181eb42a98bc22c86be880ca8.png\" src=\"image\\7d4c994181eb42a98bc22c86be880ca8.png\"/></p>\n<p> 最后运行：</p>\n<p><img alt=\"7c9512333c1b4a939f4b9b5639ef6331.png\" src=\"image\\7c9512333c1b4a939f4b9b5639ef6331.png\"/></p>\n<p>时间有点长（一小时左右）！！！！</p>\n<p>如果报错根据实际情况修改一下就ok</p>\n<p>结果会放在下面路径下</p>\n<p><img alt=\"e7baa2e265ee4d9081ea9d08455c3d34.png\" src=\"image\\e7baa2e265ee4d9081ea9d08455c3d34.png\"/></p>\n<p></p>\n<h1 id=\"%E5%85%AB%E3%80%81%E6%B5%8B%E8%AF%95%E8%A7%86%E9%A2%91\" style=\"margin-left:0px;\">八、测试视频</h1>\n<p>我们只需修改detect.py文件夹下的权重路径和测试路径。（210行左右）</p>\n<p><img alt=\"d0fcc8a8a8974018b26e84a44df92099.png\" src=\"image\\d0fcc8a8a8974018b26e84a44df92099.png\"/></p>\n<p></p>\n<p>只需要将需要预测的视频或图片放在下面文件夹下，</p>\n<p><img alt=\"0e6039114bca4ebdad2433a70f51a14f.png\" src=\"image\\0e6039114bca4ebdad2433a70f51a14f.png\"/></p>\n<p>然后运行detect.py就ok了！！！！！！</p>\n<p><img alt=\"b945b33bccd1415b87a1172855b6c2d9.png\" src=\"image\\b945b33bccd1415b87a1172855b6c2d9.png\"/></p>\n<p></p>\n<p>结果放在 （每次运行都会生成一个新的exp,所以我这是exp7）</p>\n<p><img alt=\"f7091cf6dd67433cb37eb72e03a13ad8.png\" src=\"image\\f7091cf6dd67433cb37eb72e03a13ad8.png\"/></p>\n<h1 id=\"%E4%B9%9D%E3%80%81%E6%80%BB%E7%BB%93\">九、总结</h1>\n<p> 我们本次只是识别穿越火线中的人物，还没有实现自动瞄准，我只用了一百张图片进行预测，预测效果不是很好，你可以增加些图片进行训练。</p>\n<p>后期还会更新！！！！！！！！！！！！！！！！！！！</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}