{"blogid": "119851952", "writerAge": "码龄1年", "writerBlogNum": "237", "writerCollect": "216", "writerComment": "13", "writerFan": "83", "writerGrade": "5级", "writerIntegral": "2422", "writerName": "优秀的邓宗磊", "writerProfileAdress": "writer_image\\profile_119851952.jpg", "writerRankTotal": "9174", "writerRankWeekly": "14302", "writerThumb": "39", "writerVisitNum": "177318", "blog_read_count": "7221", "blog_time": "于 2021-08-22 15:19:08 发布", "blog_title": "error C2039,不是类成员 问题出现的原因之一与解决方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"error_C2039_______0\"></a><strong>error C2039,不是类成员</strong> 问题出现的原因之一与解决方法</h2>\n<p>在visual stdio中编代码时，编译器有时会给代码报出 <strong>不是类成员 的错误，错误为error C2039。</strong></p>\n<p><strong>场景</strong>：<strong>例如观察者模式中，两个类相互需要以对方做为自己函数的参数或本身包含对方类的指针，也需要在自己类的方法定义中调用另一个类的函数</strong></p>\n<p><strong>报错原因</strong>：<strong>使用了<em>未被声明</em> 的类或函数，即类和函数被<em>调用前必须声明</em>。不然报错error C2039,不是类成员</strong></p>\n<p><strong>正确步骤</strong>：<br/> <strong>1.写出两个类的声明<br/> 2.写出两个类中成员与函数的声明（此时已经被声明的类就可以作为指针参数了）<br/> 3.写出类外依次定义函数成员（此时被声明的函数就可以作为其他类定义函数时的调用对象了）</strong></p>\n<p><strong>代码示范</strong></p>\n<pre><code class=\"prism language-cpp\">\n\n<span class=\"token comment\">//第一步先声明类存在，使得该类对象或指针可以作为参数</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第二步声明类中成员，使得该类中的成员与函数可以被调用而不报错</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//在观察对象B中注册自己</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">RegisterB</span><span class=\"token punctuation\">(</span>B<span class=\"token operator\">*</span> Target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//B类因为已经被声明过，因此此处可以作为指针参数传入</span>\n\n\t<span class=\"token comment\">//应对观察对象的消息作出反应</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//观察对象B</span>\n\tB<span class=\"token operator\">*</span> mTarget<span class=\"token punctuation\">;</span><span class=\"token comment\">//B类因为已经被声明过，因此此处可以有指针存在</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//向观察者发送消息</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//添加自己的观察者</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">GetWatcher</span><span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span> Watcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//观察者A</span>\n\tA<span class=\"token operator\">*</span> mWatcher<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第三步定义类中成员，要在被使用的函数都已经被声明的条件下，</span>\n<span class=\"token comment\">//才能使定义中调用函数而不报错，否则调用违背声明的函数时，</span>\n<span class=\"token comment\">//会出现 error C2039,不是类成员  问题</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token operator\">::</span><span class=\"token function\">RegisterB</span><span class=\"token punctuation\">(</span>B<span class=\"token operator\">*</span> Target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//向观察对象B注册自己</span>\n\tTarget<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetWatcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token operator\">::</span><span class=\"token function\">Action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//干了些事情</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我收到了通知并干了点活\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">B</span><span class=\"token operator\">::</span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//通知观察者办事</span>\n\tmWatcher<span class=\"token operator\">-&gt;</span><span class=\"token function\">Action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">B</span><span class=\"token operator\">::</span><span class=\"token function\">GetWatcher</span><span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span> _Watcher<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//获取到观察者指针</span>\n\tmWatcher <span class=\"token operator\">=</span> _Watcher<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tA<span class=\"token operator\">*</span> Watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> A<span class=\"token punctuation\">;</span>\n\tB<span class=\"token operator\">*</span> Target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> B<span class=\"token punctuation\">;</span>\n\tWatcher<span class=\"token operator\">-&gt;</span><span class=\"token function\">RegisterB</span><span class=\"token punctuation\">(</span>Target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tTarget<span class=\"token operator\">-&gt;</span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> Watcher<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> Target<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在比较大的工程中遇到需要用到观察者模式这种，在两个或两个以上的类中成员函数相互调用，类作为相互函数参数时，就有必要在<strong>一个头文件中做好所有相关类的声明，相关类中函数的声明</strong>，剩下所有相关类的定义实现则可以用其他cpp文件包含这个<strong>头文件</strong>来分别实现。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}