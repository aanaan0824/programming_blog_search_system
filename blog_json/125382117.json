{"blogid": "125382117", "writerAge": "码龄5年", "writerBlogNum": "34", "writerCollect": "9", "writerComment": "0", "writerFan": "3", "writerGrade": "2级", "writerIntegral": "346", "writerName": "Harry小黄", "writerProfileAdress": "writer_image\\profile_125382117.jpg", "writerRankTotal": "63850", "writerRankWeekly": "495513", "writerThumb": "6", "writerVisitNum": "7869", "blog_read_count": "1767", "blog_time": "于 2022-06-20 22:44:21 发布", "blog_title": "JS中的原型链(超清晰理解)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>什么是原型链</h2>\n<p>原型链，所有的原型构成了一个链条，这个链条我们称之为原型链（prototype chain)。</p>\n<h2><a id=\"_3\"></a>原型链的案例</h2>\n<p>如果我们执行下面这段代码,因为没有定义address这个属性，程序结果理所当然的是undefined。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'harry'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//undefined</span>\n</code></pre>\n<p>这个时候经历了什么呢？JS引擎线从Obj.address里寻找，发现没有找到，然后接着去找obj.__ proto __ 里面寻找，发现还是没找到，所以结果为undefined。我们可以给obj.__ proto __ 赋值</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'harry'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//上海</span>\n</code></pre>\n<p>或者这样</p>\n<pre><code class=\"prism language-js\">obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//这里一定要开辟一个空间，不能直接写obj.__proto__.__proto__ = {}</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//上海</span>\n</code></pre>\n<p>接着套娃</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'harry'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//上海</span>\n</code></pre>\n<p><strong>js引擎会顺着这些原型不断的往上找，直到address这个属性。这些原型构成了原型链。</strong></p>\n<h2><a id=\"_56\"></a>原型链的顶层</h2>\n<p>那如果我们一直找，哪里是头呢？先看一段代码。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'harry'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[Object: null prototype] {}顶层原型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">//null</span>\n</code></pre>\n<p>这里的Object就是顶层原型，如果再往上找，结果就是null了（已经到了末尾，这个链表指向为null）。</p>\n<h3><a id=\"Object_69\"></a>Object是从哪来的</h3>\n<p>创建对象有如下的两种用法，Object也就来自于这里</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">//创建了一个对象</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//创建了一个对象，针对object也有new这个过程</span>\n</code></pre>\n<h4><a id=\"objectnew_75\"></a>针对object也有new这个过程</h4>\n<p>针对object也有new这个过程,这里怎么理解呢？在我之前写的两篇文章里都有介绍过，这里我再解释一下，如果没看过我之前两篇文章的朋友，可以访问<a href=\"https://juejin.cn/post/7109016539520565285\">JS批量创建对象的方案与构造函数</a>、<a href=\"https://juejin.cn/post/7109048118053715982\">JS中对象的原型与函数的原型</a> 进行阅读。</p>\n<h4><a id=\"new_77\"></a>此处new操作符经历的过程</h4>\n<ol><li>现在内存中创建一个对象 let moni = {}</li><li>this指向这个对象，也就是this = moni</li><li>将函数的显示原型prototype赋值给前面创建出来的对象的隐式原型,这里也就是obj2.__ proto __ = Object.prototype</li><li>如果构造函数没有对象，则返回空值。反之返回创建出来的新对象（moni）。这里也就是return this。</li></ol>\n<p>验证一下</p>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>并且大家要知道Object是所有对象的父类，（它是最顶层的原型）</p>\n<h4><a id=\"Objectprototype_89\"></a>研究一下Object.prototype里有什么</h4>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>打印出来我们会发现，有非常多的值。</p>\n<pre><code>{\n  constructor: {\n    value: [Function: Object],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  __defineGetter__: {\n    value: [Function: __defineGetter__],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  __defineSetter__: {\n    value: [Function: __defineSetter__],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  hasOwnProperty: {\n    value: [Function: hasOwnProperty],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  __lookupGetter__: {\n    value: [Function: __lookupGetter__],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  __lookupSetter__: {\n    value: [Function: __lookupSetter__],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  isPrototypeOf: {\n    value: [Function: isPrototypeOf],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  propertyIsEnumerable: {\n    value: [Function: propertyIsEnumerable],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  toString: {\n    value: [Function: toString],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  valueOf: {\n    value: [Function: valueOf],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  },\n  ['__proto__']: {\n    get: [Function: get __proto__],\n    set: [Function: set __proto__],\n    enumerable: false,\n    configurable: true\n  },\n  toLocaleString: {\n    value: [Function: toLocaleString],\n    writable: true,\n    enumerable: false,\n    configurable: true\n  }\n}\n</code></pre>\n<p>重点关注一下，打印的这么多值里也有<code>constructor</code>，在我的上一篇文章已经分析过了，这里<code>constructor</code>指向的就是构造函数本身，此处也就是Object。</p>\n<blockquote>\n<p>来自本人掘金内容 https://juejin.cn/post/7111332278805987364/</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}