{"blogid": "126338589", "writerAge": "码龄100天", "writerBlogNum": "124", "writerCollect": "1175", "writerComment": "1770", "writerFan": "1158", "writerGrade": "6级", "writerIntegral": "5052", "writerName": "林有酒", "writerProfileAdress": "writer_image\\profile_126338589.jpg", "writerRankTotal": "3492", "writerRankWeekly": "55", "writerThumb": "1202", "writerVisitNum": "21339", "blog_read_count": "304", "blog_time": "于 2022-08-23 00:00:00 发布", "blog_title": "【TypeScript】中接口的详细介绍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#TypeScript_1\">TypeScript接口的使用</a></li><li><ul><li><a href=\"#_3\">🧊接口定义对象类型</a></li><li><a href=\"#_86\">🧊接口定义索引类型</a></li><li><a href=\"#_140\">🧊接口定义函数类型</a></li><li><a href=\"#_172\">🧊接口的继承</a></li><li><a href=\"#_221\">🧊交叉类型</a></li><li><a href=\"#_281\">🧊接口的实现</a></li><li><a href=\"#type_365\">🧊接口和type的区别</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"TypeScript_1\"></a>TypeScript接口的使用</h2>\n<h3><a id=\"_3\"></a>🧊接口定义对象类型</h3>\n<p><strong>在前面我们通过type可以用来声明一个对象类型</strong>：</p>\n<blockquote>\n<p>通过类型别名(type), 声明一个对象类型</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">InfoType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> info<span class=\"token operator\">:</span> InfoType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"chnyq\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>对象类型的另外一种声明方式, 就是通过接口来声明</strong>：</p>\n<blockquote>\n<p>通过接口, 声明一个对象类型</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">InfoType</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> info<span class=\"token operator\">:</span> InfoType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"chnyq\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>使用接口定义时, 有一个规范, 接口名前面加上一个\"I\", 这个是规范, 遵不遵守看个人意愿</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 接口名前面加上一个大写的I </span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IInfoType</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> info<span class=\"token operator\">:</span> IInfoType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"chnyq\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>接口定义对象类型时, 同样可以定义可选类型, 使用方式和之前是一样的</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">InfoType</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token comment\">// 添加可选类型</span>\n  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> info<span class=\"token operator\">:</span> InfoType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"chnyq\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// age: 18</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>接口也可以定义只读属性, readonly</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">InfoType</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 定义只读属性</span>\n  <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> info<span class=\"token operator\">:</span> InfoType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"chnyq\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>两种定义对象类型的方式在使用上的区别，我会在下面讲到, 接下来我们继续学习一下接口的其他特性</strong>。</p>\n<hr/>\n<h3><a id=\"_86\"></a>🧊接口定义索引类型</h3>\n<p><strong>前面我们使用interface来定义对象类型，这个时候其中的属性名、类型、方法都是确定的，但是有时候我们会遇 到类似下面的对象</strong>：</p>\n<blockquote>\n<p>例如我想使用一个对象(正常用数组, 在这里我偏要用对象o.0), 来存放我们前端需要学习的部分技术</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">const</span> frontLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vue\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TypeScript\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>此时我们对象中key是number类型, value是string类型</p>\n<p>如果我们想要限制对象后续增加的属性, key也是number类型, value也是string类型的话, 我们可以使用接口定义索引类型进行限制</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IndexLanguage</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 表示索引key为number类型, value为string类型</span>\n  <span class=\"token comment\">// index相当于是形参, 可以自己取名的</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> frontLanguage<span class=\"token operator\">:</span> IndexLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vue\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TypeScript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 再添加其他类型的话就会报错</span>\n  <span class=\"token comment\">// \"abc\": \"12\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>当然, key不是只能为number类型, value也不是只能为string类型, 这个都是可以自定义的</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LanguageBirth</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> language<span class=\"token operator\">:</span> LanguageBirth <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string-property property\">\"Java\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1995</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"JavaScript\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1996</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"C\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1972</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_140\"></a>🧊接口定义函数类型</h3>\n<p><strong>前面我们都是通过interface来定义对象中普通的属性和方法的，实际上它也可以用来<font color=\"red\">定义函数类型</font></strong>：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 接口定义函数类型</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CalcFun</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 固定的语法</span>\n  <span class=\"token punctuation\">(</span>n1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> n2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> add<span class=\"token operator\">:</span> <span class=\"token function-variable function\">CalcFun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> n2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> mul<span class=\"token operator\">:</span> <span class=\"token function-variable function\">CalcFun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">*</span> num2\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 30</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 200</span>\n</code></pre>\n<p><strong>当然，除非特别的情况，函数类型还是推荐大家使用类型别名的方式来定义</strong>：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CalcFun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> n2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">number</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_172\"></a>🧊接口的继承</h3>\n<p><strong>接口和类一样是可以进行继承的，也是使用extends关键字</strong>：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Swim</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">swimming</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Action接口继承自Swim接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Action</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Swim</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 由于Action继承自Swim, 意味着使用Action类型, 同样需要对swimming方法实现</span>\n<span class=\"token keyword\">const</span> action<span class=\"token operator\">:</span> Action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swimming\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>并且我们会发现，<font color=\"red\">接口是支持多继承</font>的（类不支持多继承）</strong></p>\n<blockquote>\n<p>例如下面代码, 我定义两个接口: Swim和Fly, 我们使用一个接口继承自这两个接口</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Swim</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">swimming</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fly</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">flying</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Action接口继承自Swim和Fly接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Action</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Swim</span><span class=\"token punctuation\">,</span> Fly <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 意味着使用Action类型, 需要对swimming和flying方法都进行实现</span>\n<span class=\"token keyword\">const</span> action<span class=\"token operator\">:</span> Action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swimming\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">flying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flying\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_221\"></a>🧊交叉类型</h3>\n<p><strong>前面我们学习了联合类型</strong>：</p>\n<blockquote>\n<p>联合类型表示多个类型中一个即可</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IDType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span>\n</code></pre>\n<p><strong>还有另外一种类型合并方式，就是交叉类型（ Intersection Types）</strong>：</p>\n<blockquote>\n<p>交叉类似表示需要满足多个类型的条件；</p>\n<p>交叉类型使用 &amp; 符号；</p>\n</blockquote>\n<p><strong>我们来看下面的交叉类型</strong>：</p>\n<blockquote>\n<p>表达的含义是<font color=\"red\">number和string要同时满足</font>；</p>\n<p>但是有同时满足是一个number又是一个string的值吗？其实是没有的，所以MyType其实是一个never类型；</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IDType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span>\n</code></pre>\n<p><strong>交叉类型的应用</strong></p>\n<blockquote>\n<p>在开发中，我们使用交叉类型时，通常是对对象类型进行交叉的</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Swim</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">swimming</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fly</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">flying</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 定义一个交叉类型</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">myType</span> <span class=\"token operator\">=</span> Swim <span class=\"token operator\">&amp;</span> Fly\n<span class=\"token comment\">// 使用交叉类型, 需要同时实现Swim和Fly类型的方法</span>\n<span class=\"token keyword\">const</span> obj<span class=\"token operator\">:</span> myType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swimming\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">flying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flying\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>也就是说, 我们组合接口就有了两种方式</strong></p>\n<blockquote>\n<p>方式一: 使用接口的多继承</p>\n<p>方式二: 交叉类型来结合</p>\n</blockquote>\n<hr/>\n<h3><a id=\"_281\"></a>🧊接口的实现</h3>\n<p><strong>接口定义后不仅可以作为类型，接口也是可以被类实现的</strong>：</p>\n<blockquote>\n<p>实现接口是使用的<code>implements关键字</code></p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Swim</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">swimming</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 类实现接口</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Action</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Swim</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swimming\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>类实现接口也是可以进行多实现的</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Swim</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">swimming</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fly</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">flying</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 类多实现接口</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Action</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Swim</span><span class=\"token punctuation\">,</span> Fly <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swimming\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">flying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flying\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>如果被一个类实现，那么在之后需要传入接口的地方，都可以将这个类传入；</p>\n<p>这就是面向接口开发；</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 函数要求传入一个接口</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span>swimmer<span class=\"token operator\">:</span> Swim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  swimmer<span class=\"token punctuation\">.</span><span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> act <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 由于Action类实现了接口, 所以类可以直接传入</span>\n<span class=\"token function\">swim</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>一个类, 是可以同时继承父类, 又实现或者多实现接口</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Swim</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">swimming</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fly</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">flying</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 继承父类的同时, 又实现接口</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Action</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Swim</span><span class=\"token punctuation\">,</span> Fly <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swimming\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">flying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flying\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"type_365\"></a>🧊接口和type的区别</h3>\n<p><strong>我们会发现interface和type都可以用来定义对象类型，那么在开发中定义对象类型时，到底选择哪一个呢？</strong></p>\n<blockquote>\n<p>如果是定义<font color=\"red\">非对象类型</font>，通常推荐使用type，比如Direction、 Alignment、一些Function；</p>\n</blockquote>\n<p><strong>如果是定义对象类型，那么他们是有区别的</strong>：</p>\n<ul><li>interface可以重复的对某个接口来定义属性和方法；</li></ul>\n<blockquote>\n<p>对于名称相同的接口, 会将属性进行合并</p>\n</blockquote>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// name和age都需要定义</span>\n<span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>而type定义的是别名，别名是不能重复的；</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ed0f62a891a443bb808295d9d1c005b2.png\"/></p>\n<p><strong>对于定义对象类型, 建议使用interface(官方给的建议也是interface), 也可以根据自己的爱好选择</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}