{"blogid": "120498014", "writerAge": "码龄6年", "writerBlogNum": "1197", "writerCollect": "3816", "writerComment": "1460", "writerFan": "12952", "writerGrade": "7级", "writerIntegral": "18215", "writerName": "红目香薰", "writerProfileAdress": "writer_image\\profile_120498014.jpg", "writerRankTotal": "496", "writerRankWeekly": "740", "writerThumb": "2784", "writerVisitNum": "1052373", "blog_read_count": "2492", "blog_time": "于 2021-09-26 22:42:44 发布", "blog_title": "socket通信(C#)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><img alt=\"\" height=\"645\" src=\"image\\20210926223620992.png\" width=\"1145\"/></p>\n<p> <strong>通信两端分别为客户端(Client)和服务器(Server):</strong></p>\n<p><strong>统一编码格式：【Encoding.UTF8】</strong></p>\n<p><strong>测试环境：</strong></p>\n<p><img alt=\"\" height=\"400\" src=\"image\\20210926215722610.png\" width=\"519\"/></p>\n<p><strong>需要启动谁就将谁设为启动项： </strong></p>\n<p><strong>(先启动Server，后启动Client</strong><strong>)</strong></p>\n<p> <img alt=\"\" height=\"228\" src=\"image\\20210926220529643.png\" width=\"205\"/></p>\n<h2>服务器(Server)：</h2>\n<p>1：建立一个Socket对像；</p>\n<p>2：用socket对像的Bind()方法绑定EndPoint；</p>\n<p>3：用socket对像的Listen()方法开始监听；</p>\n<p>4：接受到客户端的连接，用socket对像的Accept()方法创建新的socket对像用于和请求的客户端进行通信;</p>\n<p>5：用新的socket对象接收（Receive）和发送（Send）消息。</p>\n<p><strong>服务器编码：</strong></p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Socket_Server\n{\n    class Program\n    {\n        static Socket ReceiveSocket;\n        static void Main(string[] args)\n        {\n            int port = 8885;\n            //侦听所有网络客户接口的客活动\n            IPAddress ip = IPAddress.Any;\n            //使用指定的地址簇协议、套接字类型和通信协议   &lt;br&gt;            ReceiveSocket.SetSocketOption(SocketOptionLevel.Socket,SocketOptionName.ReuseAddress,true);\n            //有关套接字设置\n            ReceiveSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n            IPEndPoint endPoint = new IPEndPoint(ip, port);\n            ReceiveSocket.Bind(new IPEndPoint(ip, port)); //绑定IP地址和端口号\n            ReceiveSocket.Listen(10);  //设定最多有10个排队连接请求\n            Console.WriteLine(\"建立连接\");\n            Socket socket = ReceiveSocket.Accept();\n\n            byte[] receive = new byte[1024];\n            socket.Receive(receive);\n            Console.WriteLine(\"接收到消息：\" + Encoding.UTF8.GetString(receive));\n            byte[] send = Encoding.UTF8.GetBytes(\"成功接收消息，并回发消息。\");\n            socket.Send(send);\n            Console.WriteLine(\"发送消息为：\" + Encoding.UTF8.GetString(send));\n        }\n    }\n}\n</code></pre>\n<h2><img alt=\"\" height=\"934\" src=\"image\\20210926222141825.png\" width=\"1200\"/></h2>\n<p><strong>启动Server等待客户端访问：需要安全权限，点击【允许访问即可】</strong></p>\n<p><img alt=\"\" height=\"747\" src=\"image\\20210926220813726.png\" width=\"1200\"/></p>\n<h2>客户端(Client)：</h2>\n<p>1：建立一个Socket对像；</p>\n<p>2：用socket对像的Connect()方法以上面建立的EndPoint对像做为参数，向服务器发出连接请求；</p>\n<p>3：如果连接成功，就用socket对像的Send()方法向服务器发送信息；</p>\n<p>4：用socket对像的Receive()方法接受服务器发来的信息 ;</p>\n<p>5：通信结束后一定记得关闭socket；</p>\n<p><strong>客户端编码：</strong></p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Socket_demo\n{\n    class Program\n    {\n        static Socket ClientSocket;\n        static void Main(string[] args)\n        {\n            string IP = \"127.0.0.1\";\n            int port = 8885;\n            //将IP地址字符串转换成IPAddress实例\n            IPAddress ip = IPAddress.Parse(IP);  \n            //使用指定的地址簇协议、套接字类型和通信协议\n            ClientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n            // 用指定的ip和端口号初始化IPEndPoint实例\n            IPEndPoint endPoint = new IPEndPoint(ip, port); \n            ClientSocket.Connect(endPoint);  //与远程主机建立连接\n\n            Console.WriteLine(\"开始发送消息\");\n            //通信时实际发送的是字节数组，所以要将发送消息转换字节\n            byte[] message = Encoding.UTF8.GetBytes(\"客户端链接127.0.0.1:8885服务器\");  \n            ClientSocket.Send(message);\n            Console.WriteLine(\"发送消息为:\" + Encoding.UTF8.GetString(message));\n            byte[] receive = new byte[1024];\n            int length = ClientSocket.Receive(receive);//length 接收字节数组长度\n            Console.WriteLine(\"接收消息为：\" + Encoding.UTF8.GetString(receive));\n            ClientSocket.Close();//关闭连接\n        }\n    }\n}\n</code></pre>\n<p><strong>启动Client客户端，访问服务器：</strong></p>\n<p><img alt=\"\" height=\"932\" src=\"image\\20210926222235131.png\" width=\"1200\"/></p>\n<p> <strong>访问成功：</strong> </p>\n<p><img alt=\"\" height=\"788\" src=\"image\\20210926222302663.png\" width=\"997\"/></p>\n<p> <strong>如果Server服务端未启动则为：</strong></p>\n<p><img alt=\"\" height=\"472\" src=\"image\\2021092622132074.png\" width=\"1200\"/></p>\n<p><strong>服务端Server接收到的消息：</strong></p>\n<p><img alt=\"\" height=\"770\" src=\"image\\20210926222342953.png\" width=\"988\"/></p>\n<h2>创建socket线程</h2>\n<blockquote>\n<p>Thread t = new Thread(()=&gt;{});</p>\n<p>//将监听放在死循环内</p>\n<p>while(true){<!-- --></p>\n<p>        socket监听</p>\n<p>}</p>\n<p>//启动线程<br/> t.Start();</p>\n</blockquote>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace Socket_Server\n{\n    class Program\n    {\n        static Socket ReceiveSocket;\n        static void Main(string[] args)\n        {\n            //创建socket线程\n            Thread t = new Thread(()=&gt; {\n                int port = 8885;\n                //侦听所有网络客户接口的客活动\n                IPAddress ip = IPAddress.Any;\n                //使用指定的地址簇协议、套接字类型和通信协议   &lt;br&gt;            ReceiveSocket.SetSocketOption(SocketOptionLevel.Socket,SocketOptionName.ReuseAddress,true);\n                //有关套接字设置\n                ReceiveSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n                IPEndPoint endPoint = new IPEndPoint(ip, port);\n                ReceiveSocket.Bind(new IPEndPoint(ip, port)); //绑定IP地址和端口号\n                ReceiveSocket.Listen(10);  //设定最多有10个排队连接请求\n                Console.WriteLine(\"建立连接\");\n                while (true)\n                {\n                    Socket socket = ReceiveSocket.Accept();\n\n                    byte[] receive = new byte[1024];\n                    socket.Receive(receive);\n                    Console.WriteLine(\"接收到消息：\" + Encoding.UTF8.GetString(receive));\n                    byte[] send = Encoding.UTF8.GetBytes(\"成功接收消息，并回发消息。\");\n                    socket.Send(send);\n                    Console.WriteLine(\"发送消息为：\" + Encoding.UTF8.GetString(send));\n                }\n            });\n            //启动线程\n            t.Start();\n        }\n    }\n}\n</code></pre>\n<p><strong>启动服务器，服务器端可以无限次数的接收客户端信息了。</strong></p>\n<p><img alt=\"\" height=\"671\" src=\"image\\20210926223155342.png\" width=\"864\"/></p>\n<p>到这里，Socket的基础技能讲解就完毕了，可以通过这个技能在工作中主要会进行推送功能编码，【推送】是一个非常重要的功能，你手机里的各种推送广告、APP的各种消息推送、最最基础的QQ、微信的聊天功能都依赖于此项技术。后面会对【Web Socket】进行讲解，关注好，后面直接查看此【分类专栏】即可。</p>\n<p>作业项目，通过此demo，自行搭建Winform项目，进行Socket服务器端，与Client客户端，进行信息交互。</p>\n<p>可以分开两个机器，使用【ipconfig】查看各自的IP，使用【ping】命令测试网络是否通畅，设置好对应的端口号进行相互访问即可完成通信功能。</p>\n</div>\n</div>"}