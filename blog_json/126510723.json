{"blogid": "126510723", "writerAge": "码龄1年", "writerBlogNum": "104", "writerCollect": "1978", "writerComment": "1988", "writerFan": "4670", "writerGrade": "6级", "writerIntegral": "5990", "writerName": "爱吃豆的土豆", "writerProfileAdress": "writer_image\\profile_126510723.jpg", "writerRankTotal": "2569", "writerRankWeekly": "69", "writerThumb": "1957", "writerVisitNum": "45655", "blog_read_count": "284", "blog_time": "于 2022-08-24 19:03:18 发布", "blog_title": "Maven知识【IDEA使用Maven&依赖管理】第三章", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<blockquote>\n<ul><li><strong>💂 个人主页:</strong> <a href=\"https://blog.csdn.net/m0_64550837?type=blog\" title=\"爱吃豆的土豆\">爱吃豆的土豆</a></li><li> <p>🌈欢迎加入社区，福利多多哦！<a href=\"https://bbs.csdn.net/forums/tudou?spm=1001.2014.3001.6682\" title=\"土豆社区\">土豆社区</a></p> </li><li><strong>🤟数据库专栏更新完毕：</strong><a href=\"https://blog.csdn.net/m0_64550837/category_11975024.html?spm=1001.2014.3001.5482\" title=\"数据库知识\">数据库知识</a></li><li><strong>🤟JDBC专栏更新完毕：</strong><a href=\"https://blog.csdn.net/m0_64550837/category_11978727.html?spm=1001.2014.3001.5482\" title=\"JDBC知识\">JDBC知识</a></li><li>💬 如果文章对你有帮助、<strong>欢迎关注、点赞、收藏(一键三连)和订阅专栏哦</strong></li><li> <p>🏆<strong>人必有所执，方能有所成！</strong></p> </li></ul>\n</blockquote>\n<p id=\"1%EF%BC%8CIDEA%E4%BD%BF%E7%94%A8Maven-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%BC%8CIDEA%E4%BD%BF%E7%94%A8Maven\">1，IDEA使用Maven</a></p>\n<p id=\"1.1%EF%BC%9AIDEA%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83-toc\" style=\"margin-left:80px;\"><a href=\"#1.1%EF%BC%9AIDEA%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83\">1.1：IDEA配置Maven环境</a></p>\n<p id=\"1.2%EF%BC%9AMaven%E5%9D%90%E6%A0%87%E8%AF%A6%E8%A7%A3-toc\" style=\"margin-left:80px;\"><a href=\"#1.2%EF%BC%9AMaven%E5%9D%90%E6%A0%87%E8%AF%A6%E8%A7%A3\">1.2：Maven坐标详解</a></p>\n<p id=\"1.3%EF%BC%9AIDEA%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:80px;\"><a href=\"#1.3%EF%BC%9AIDEA%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE\">1.3：IDEA创建Maven项目</a></p>\n<p id=\"1.4%EF%BC%9AIDEA%E5%AF%BC%E5%85%A5Maven%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:80px;\"><a href=\"#1.4%EF%BC%9AIDEA%E5%AF%BC%E5%85%A5Maven%E9%A1%B9%E7%9B%AE\">1.4：IDEA导入Maven项目</a></p>\n<p id=\"2%EF%BC%8C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86-toc\" style=\"margin-left:40px;\"><a href=\"#2%EF%BC%8C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86\">2，依赖管理</a></p>\n<p id=\"2.1%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%9D%90%E6%A0%87%E5%BC%95%E5%85%A5jar%E5%8C%85-toc\" style=\"margin-left:80px;\"><a href=\"#2.1%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%9D%90%E6%A0%87%E5%BC%95%E5%85%A5jar%E5%8C%85\">2.1：使用坐标引入jar包</a></p>\n<p id=\"2.2%EF%BC%9A%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4-toc\" style=\"margin-left:80px;\"><a href=\"#2.2%EF%BC%9A%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4\">2.2：依赖范围</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"1%EF%BC%8CIDEA%E4%BD%BF%E7%94%A8Maven\">1，IDEA使用Maven</h2>\n<p>以后开发中我们肯定会在高级开发工具中使用Maven管理项目，而我们常用的高级开发工具是IDEA，所以接下来我们会讲解Maven在IDEA中的使用。</p>\n<h3 id=\"1.1%EF%BC%9AIDEA%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83\">1.1：IDEA配置Maven环境</h3>\n<p>我们需要先在IDEA中配置Maven环境：</p>\n<ul><li> <p>选择 IDEA中 File --&gt; Settings</p> </li><li> <p><img alt=\"\" height=\"396\" src=\"image\\71a033c2a6054a64afa69a0eaccfb331.png\" width=\"322\"/></p> <p>搜索 maven  </p> </li><li> <p>设置 IDEA 使用本地安装的 Maven，并修改配置文件路径</p> </li><li> <p><img alt=\"\" height=\"189\" src=\"image\\7d3deaa572914a0683b9fe6fba44239f.png\" width=\"792\"/></p> <p> </p> </li></ul>\n<h3 id=\"1.2%EF%BC%9AMaven%E5%9D%90%E6%A0%87%E8%AF%A6%E8%A7%A3\">1.2：Maven坐标详解</h3>\n<p><strong>什么是坐标？</strong></p>\n<ul><li> <p>Maven 中的坐标是==资源的唯一标识==</p> </li><li> <p>使用坐标来定义项目或引入项目中需要的依赖</p> </li></ul>\n<p><strong>Maven 坐标主要组成</strong></p>\n<ul><li> <p>groupId：定义当前Maven项目隶属组织名称（通常是域名反写）</p> </li><li> <p>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</p> </li><li> <p>version：定义当前项目版本号</p> </li></ul>\n<p>如下图就是使用坐标表示一个项目：</p>\n<p><img alt=\"\" height=\"158\" src=\"image\\59a900af52f94828a204b56b2da6cb88.png\" width=\"403\"/></p>\n<p>==注意：==</p>\n<ul><li> <p>上面所说的资源可以是插件、依赖、当前项目。</p> </li><li> <p>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</p> </li></ul>\n<h3 id=\"1.3%EF%BC%9AIDEA%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE\">1.3：IDEA创建Maven项目</h3>\n<p>创建模块，选择Maven，点击Next</p>\n<p><img alt=\"\" height=\"592\" src=\"image\\35792fe87bcf4be2b05349069b05e8a6.png\" width=\"615\"/></p>\n<p> 填写模块名称，坐标信息，点击finish，创建完成</p>\n<p><img alt=\"\" height=\"315\" src=\"image\\f44c539175074b118a426e3b7d7f61ba.png\" width=\"716\"/></p>\n<p>创建好的项目目录结构如下：</p>\n<p>、<img alt=\"\" height=\"243\" src=\"image\\4d40271a92a54903a7897db347d6083e.png\" width=\"481\"/> </p>\n<ul><li> <p>编写 HelloWorld，并运行  </p> </li></ul>\n<h3 id=\"1.4%EF%BC%9AIDEA%E5%AF%BC%E5%85%A5Maven%E9%A1%B9%E7%9B%AE\">1.4：IDEA导入Maven项目</h3>\n<p>大家在学习时可能需要看老师的代码，当然也就需要将老师的代码导入到自己的IDEA中。我们可以通过以下步骤进行项目的导入：</p>\n<p>选择右侧Maven面板，点击 + 号</p>\n<p><img alt=\"\" height=\"255\" src=\"image\\348b396b25904874a651c4da84e1ce5f.png\" width=\"591\"/></p>\n<p>选中对应项目的pom.xml文件，双击即可</p>\n<p><img alt=\"\" height=\"354\" src=\"image\\5ee3095c36614e67aef19539f855521e.png\" width=\"521\"/> </p>\n<p>如果没有Maven面板，选择</p>\n<p>View --&gt; Appearance --&gt; Tool Window Bars</p>\n<p><img alt=\"\" height=\"258\" src=\"image\\7ccb3932548a402fbdeb1454fe9e22ed.png\" width=\"572\"/>可以通过下图所示进行命令的操作：  </p>\n<p> <img alt=\"\" height=\"329\" src=\"image\\c7e8a79380144007a5739a83a115c027.png\" width=\"520\"/></p>\n<p><strong>配置 Maven-Helper 插件</strong></p>\n<ul><li> <p>选择 IDEA中 File --&gt; Settings</p> </li></ul>\n<p><img alt=\"\" height=\"300\" src=\"image\\dc3c0dd266b444fc81d6881541a3c49b.png\" width=\"409\"/> </p>\n<p>选择 Plugins</p>\n<p><img alt=\"\" height=\"269\" src=\"image\\405f15f353804730a1cfd8ddf7a4a23f.png\" width=\"580\"/> </p>\n<p>搜索 Maven，选择第一个 Maven Helper，点击Install安装，弹出面板中点击Accept <img alt=\"\" height=\"239\" src=\"image\\4f7f77f26a5c44f18b2d802ded9c61db.png\" width=\"668\"/> </p>\n<ul><li> <p>重启 IDEA</p> </li></ul>\n<p>安装完该插件后可以通过 选中项目右键进行相关命令操作，如下图所示：</p>\n<p><img alt=\"\" height=\"549\" src=\"image\\72aad4dfa15b4d9a858ba173659894b0.png\" width=\"529\"/> </p>\n<p> </p>\n<h2 id=\"2%EF%BC%8C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86\">2，依赖管理</h2>\n<h3 id=\"2.1%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%9D%90%E6%A0%87%E5%BC%95%E5%85%A5jar%E5%8C%85\">2.1：使用坐标引入jar包</h3>\n<p><strong>使用坐标引入jar包的步骤：</strong></p>\n<ul><li> <p>在项目的 pom.xml 中编写 &lt;dependencies&gt; 标签</p> </li><li> <p>在 &lt;dependencies&gt; 标签中 使用 &lt;dependency&gt; 引入坐标</p> </li><li> <p>定义坐标的 groupId，artifactId，version</p> </li></ul>\n<p><img alt=\"\" height=\"221\" src=\"image\\567fc4cc9d4a41af92ef2b1e97161b57.png\" width=\"542\"/></p>\n<p>点击刷新按钮，使坐标生效</p>\n<p><img alt=\"\" height=\"199\" src=\"image\\9fa1d620cfbb4d37a0794f4533c59637.png\" width=\"317\"/> </p>\n<p>注意：</p>\n<ul><li> <p>具体的坐标我们可以到如下网站进行搜索</p> </li><li> <p><a href=\"https://mvnrepository.com/\" title=\"https://mvnrepository.com/\">https://mvnrepository.com/</a></p> </li></ul>\n<p><strong>快捷方式导入jar包的坐标：</strong></p>\n<p>每次需要引入jar包，都去对应的网站进行搜索是比较麻烦的，接下来给大家介绍一种快捷引入坐标的方式</p>\n<ul><li> <p>在 pom.xml 中 按 alt + insert，选择 Dependency</p> </li></ul>\n<p> <img alt=\"\" height=\"288\" src=\"image\\42b0cf19f87647c994f13890e5ba9fe6.png\" width=\"366\"/></p>\n<p>在弹出的面板中搜索对应坐标，然后双击选中对应坐标</p>\n<p><img alt=\"\" height=\"198\" src=\"image\\078c8f72d85e4bdc9f11056654a0e511.png\" width=\"511\"/> </p>\n<p>点击刷新按钮，使坐标生效</p>\n<p><img alt=\"\" height=\"208\" src=\"image\\243046435a0f4aab81f394779e2659a6.png\" width=\"320\"/> </p>\n<p><strong>自动导入设置：</strong></p>\n<p>上面每次操作都需要点击刷新按钮，让引入的坐标生效。当然我们也可以通过设置让其自动完成</p>\n<ul><li> <p>选择 IDEA中 File --&gt; Settings</p> </li></ul>\n<p><img alt=\"\" height=\"293\" src=\"image\\b34e2355f17b4fd9a7bf0a1c76f5c0fa.png\" width=\"338\"/> </p>\n<p>在弹出的面板中找到 Build Tools</p>\n<p><img alt=\"\" height=\"245\" src=\"image\\d19c11f31b8343268abae67527d70a42.png\" width=\"653\"/> </p>\n<ul><li> <p>选择 Any changes，点击 ok 即可生效</p> </li></ul>\n<p> </p>\n<h3 id=\"2.2%EF%BC%9A%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4\">2.2：依赖范围</h3>\n<p>通过设置坐标的依赖范围(scope)，可以设置 对应jar包的作用范围：编译环境、测试环境、运行环境。</p>\n<p>如下图所示给 <code>junit</code> 依赖通过 <code>scope</code> 标签指定依赖的作用范围。 那么这个依赖就只能作用在测试环境，其他环境下不能使用。</p>\n<p><img alt=\"\" height=\"162\" src=\"image\\6676d7ca3a62474ea1a3c12759d8d144.png\" width=\"390\"/></p>\n<p>那么 <code>scope</code> 都可以有哪些取值呢？ <img alt=\"\" height=\"265\" src=\"image\\7d27aeaf947e4bf6b1031bd6e7091fa9.png\" width=\"1158\"/> </p>\n<ul><li> <p>compile ：作用于编译环境、测试环境、运行环境。</p> </li><li> <p>test ： 作用于测试环境。典型的就是Junit坐标，以后使用Junit时，都会将scope指定为该值</p> </li><li> <p>provided ：作用于编译环境、测试环境。我们后面会学习 <code>servlet-api</code> ，在使用它时，必须将 <code>scope</code> 设置为该值，不然运行时就会报错</p> </li><li> <p>runtime ： 作用于测试环境、运行环境。jdbc驱动一般将 <code>scope</code> 设置为该值，当然不设置也没有任何问题</p> </li></ul>\n<blockquote>\n<p>注意：</p>\n<ul><li> <p>如果引入坐标不指定 <code>scope</code> 标签时，默认就是 compile 值。以后大部分jar包都是使用默认值。</p> </li></ul>\n</blockquote>\n<p> </p>\n</div>\n</div>"}