{"blogid": "125858868", "writerAge": "码龄3年", "writerBlogNum": "11", "writerCollect": "738", "writerComment": "380", "writerFan": "1170", "writerGrade": "4级", "writerIntegral": "818", "writerName": "算法小学徒", "writerProfileAdress": "writer_image\\profile_125858868.jpg", "writerRankTotal": "23428", "writerRankWeekly": "3022", "writerThumb": "338", "writerVisitNum": "37802", "blog_read_count": "6559", "blog_time": "已于 2022-07-21 09:31:40 修改", "blog_title": "C/C++后端学习秘籍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"CC_0\"></a>C/C++后端学习秘籍</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#CC_0\">C/C++后端学习秘籍</a></li><li><a href=\"#_6\">前言</a></li><li><a href=\"#_18\">一、算法训练</a></li><li><ul><li><a href=\"#1_27\">1.拓扑顺序</a></li><li><a href=\"#2_128\">2.功夫传人</a></li><li><a href=\"#3_178\">3.二叉树中的最低公共祖先</a></li></ul>\n</li><li><a href=\"#_293\">二、工程项目训练</a></li><li><ul><li><a href=\"#day1Qt_301\">day1.Qt(串口的使用)</a></li></ul>\n</li><li><a href=\"#_328\">三、总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<blockquote>\n<p>今天继续由算法小学徒给大家带来C/C++后端实习经验大礼包的第二弹,<br/> (今天的奖品是C++后端学习秘籍膜膜膜膜%%%%)，<br/> 希望大家喜欢,撒花~~~</p>\n</blockquote>\n<h1><a id=\"_18\"></a>一、算法训练</h1>\n<blockquote>\n<p>首先给大家带来校招程序员考察的核心技能训练:算法,不管你用什么语言,<br/> 数据结构与算法一定是最核心的基本功。说得实际和功利一点，<br/> 算法是你进入大厂的敲门砖，还能帮你在工作中快速地弯道超车，<br/> 所以一定得搞懂哦~~~<br/> 另外现在现在大厂的笔试很多采用ACM模式,面试手撕代码则多为力扣模式<br/> (核心代码模式)今天给大家带来中大厂笔试训练</p>\n</blockquote>\n<h2><a id=\"1_27\"></a>1.拓扑顺序</h2>\n<p>这是 2018 年研究生入学考试中给出的一个问题：</p>\n<p>以下哪个选项不是从给定的有向图中获得的拓扑序列？<br/> <img alt=\"在这里插入图片描述\" src=\"image\\61e0b651c0b64b9797920757e42091a5.png\"/></p>\n<pre><code class=\"prism language-cpp\">现在，请你编写一个程序来测试每个选项。\n输入格式\n第一行包含两个整数 N 和 M，分别表示有向图的点和边的数量。\n\n接下来 M 行，每行给出一条边的起点和终点。\n\n点的编号从 <span class=\"token number\">1</span> 到 N。\n\n再一行包含一个整数 K，表示询问次数。\n\n接下来 K 行，每行包含一个所有点的排列。\n\n一行中的数字用空格隔开。\n\n输出格式\n在一行中输出所有不是拓扑序列的询问序列的编号。\n\n询问序列编号从 <span class=\"token number\">0</span> 开始。\n\n行首和行尾不得有多余空格，保证存在至少一个解。\n\n数据范围\n<span class=\"token number\">1</span>≤N≤<span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">1</span>≤M≤<span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">1</span>≤K≤<span class=\"token number\">100</span>\n输入样例：\n<span class=\"token number\">6</span> <span class=\"token number\">8</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span>\n<span class=\"token number\">1</span> <span class=\"token number\">3</span>\n<span class=\"token number\">5</span> <span class=\"token number\">2</span>\n<span class=\"token number\">5</span> <span class=\"token number\">4</span>\n<span class=\"token number\">2</span> <span class=\"token number\">3</span>\n<span class=\"token number\">2</span> <span class=\"token number\">6</span>\n<span class=\"token number\">3</span> <span class=\"token number\">4</span>\n<span class=\"token number\">6</span> <span class=\"token number\">4</span>\n<span class=\"token number\">5</span>\n<span class=\"token number\">1</span> <span class=\"token number\">5</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">6</span> <span class=\"token number\">4</span>\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">6</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span>\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">6</span> <span class=\"token number\">4</span>\n<span class=\"token number\">5</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span> <span class=\"token number\">6</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span>\n输出样例：\n<span class=\"token number\">3</span> <span class=\"token number\">4</span>\n</code></pre>\n<p><strong>小学徒解析:首先了解一下拓扑排序的定义:在图论中，拓扑排序（Topological Sorting）是一个有向无环图（DAG, Directed Acyclic Graph）的所有顶点的线性序列。且该序列必须满足下面两个条件：<br/> 1.每个顶点出现且只出现一次。<br/> 2.若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。<br/> 有向无环图（DAG）才有拓扑排序，非DAG图没有拓扑排序一说。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//这题根据条件性质解题即可</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">10050</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> nodes<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;&gt;</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">&gt;&gt;</span>k<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t <span class=\"token punctuation\">{<!-- --></span>\n\t\t \tcin<span class=\"token operator\">&gt;&gt;</span>nodes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t \tp<span class=\"token punctuation\">[</span>nodes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n\t\t <span class=\"token punctuation\">}</span>\n\t\t <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>p<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tflag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span>\n\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_128\"></a>2.功夫传人</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7428291a456d427d87509db75be4c90e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\372712184fb54c94815e684c5123caf8.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//这题用邻接表存储一下信息,然后再dfs配合回溯即可</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> z<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tsum<span class=\"token operator\">+=</span>p<span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>r<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token operator\">&gt;&gt;</span>z<span class=\"token operator\">&gt;&gt;</span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n      cin<span class=\"token operator\">&gt;&gt;</span>k<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  \n      <span class=\"token punctuation\">{<!-- --></span>\n      \t st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      \t cin<span class=\"token operator\">&gt;&gt;</span>x<span class=\"token punctuation\">;</span>\n         v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        cin<span class=\"token operator\">&gt;&gt;</span>x<span class=\"token punctuation\">;</span>\n        v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_178\"></a>3.二叉树中的最低公共祖先</h2>\n<pre><code class=\"prism language-cpp\">树中两个结点 U 和 V 的最低公共祖先（LCA）是指同时具有 U 和 V 作为后代的最深结点。\n\n给定二叉树中的任何两个结点，请你找到它们的 LCA。\n\n输入格式\n第一行包含两个整数 M 和 N，分别表示询问结点对数以及二叉树中的结点数量。\n\n接下来两行，每行包含 N 个不同的整数，分别表示二叉树的中序和前序遍历。\n\n保证二叉树可由给定遍历序列唯一确定。\n\n接下来 M 行，每行包含两个整数 U 和 V，表示一组询问。\n\n所有结点权值均在 <span class=\"token keyword\">int</span> 范围内。\n\n输出格式\n对于每对给定的 U 和 V，输出一行结果。\n\n如果 U 和 V 的 LCA 是 A，且 A 不是 U 或 V，则输出 LCA of U <span class=\"token operator\">and</span> V is A<span class=\"token punctuation\">.</span>\n\n如果 U 和 V 的 LCA 是 A，且 A 是 U 或 V 中的一个，则输出 X is an ancestor of Y<span class=\"token punctuation\">.</span>其中 X 表示 A，Y 表示另一个结点。\n\n如果 U 或 V 没有在二叉树中找到，则输出 ERROR<span class=\"token operator\">:</span> U is <span class=\"token operator\">not</span> found<span class=\"token punctuation\">.</span> 或 ERROR<span class=\"token operator\">:</span> V is <span class=\"token operator\">not</span> found<span class=\"token punctuation\">.</span> 或 ERROR<span class=\"token operator\">:</span> U <span class=\"token operator\">and</span> V are <span class=\"token operator\">not</span> found<span class=\"token punctuation\">.</span>\n\n数据范围\n<span class=\"token number\">1</span>≤M≤<span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">1</span>≤N≤<span class=\"token number\">10000</span>\n输入样例：\n<span class=\"token number\">6</span> <span class=\"token number\">8</span>\n<span class=\"token number\">7</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">6</span> <span class=\"token number\">5</span> <span class=\"token number\">1</span> <span class=\"token number\">8</span>\n<span class=\"token number\">5</span> <span class=\"token number\">3</span> <span class=\"token number\">7</span> <span class=\"token number\">2</span> <span class=\"token number\">6</span> <span class=\"token number\">4</span> <span class=\"token number\">8</span> <span class=\"token number\">1</span>\n<span class=\"token number\">2</span> <span class=\"token number\">6</span>\n<span class=\"token number\">8</span> <span class=\"token number\">1</span>\n<span class=\"token number\">7</span> <span class=\"token number\">9</span>\n<span class=\"token number\">12</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span>\n<span class=\"token number\">0</span> <span class=\"token number\">8</span>\n<span class=\"token number\">99</span> <span class=\"token number\">99</span>\n输出样例：\nLCA of <span class=\"token number\">2</span> <span class=\"token operator\">and</span> <span class=\"token number\">6</span> is <span class=\"token number\">3.</span>\n<span class=\"token number\">8</span> is an ancestor of <span class=\"token number\">1.</span>\nERROR<span class=\"token operator\">:</span> <span class=\"token number\">9</span> is <span class=\"token operator\">not</span> found<span class=\"token punctuation\">.</span>\nERROR<span class=\"token operator\">:</span> <span class=\"token number\">12</span> <span class=\"token operator\">and</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span> are <span class=\"token operator\">not</span> found<span class=\"token punctuation\">.</span>\nERROR<span class=\"token operator\">:</span> <span class=\"token number\">0</span> is <span class=\"token operator\">not</span> found<span class=\"token punctuation\">.</span>\nERROR<span class=\"token operator\">:</span> <span class=\"token number\">99</span> <span class=\"token operator\">and</span> <span class=\"token number\">99</span> are <span class=\"token operator\">not</span> found<span class=\"token punctuation\">.</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//常规方法建树再按题目要求做即可</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span>  <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">1e4</span><span class=\"token operator\">+</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> in<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>depth<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> il<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> ir<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pl<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> root<span class=\"token operator\">=</span>pre<span class=\"token punctuation\">[</span>pl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>root<span class=\"token punctuation\">;</span>\n\tdepth<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>il<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">)</span> p<span class=\"token punctuation\">[</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">,</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>pl<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>pl<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>il<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>root<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">&lt;</span>ir<span class=\"token punctuation\">)</span> p<span class=\"token punctuation\">[</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ir<span class=\"token punctuation\">,</span>pl<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>il<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>pr<span class=\"token punctuation\">,</span>d<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>root<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nunordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> pos<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcin<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n   \t  cin<span class=\"token operator\">&gt;&gt;</span>in<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t  pos<span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n   \t  cin<span class=\"token operator\">&gt;&gt;</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t  pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pos<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n   <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n     \tcin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token punctuation\">;</span>\n\t    x<span class=\"token operator\">=</span>a<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">{<!-- --></span>\n\t    \ta<span class=\"token operator\">=</span>pos<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span>pos<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t    \tx<span class=\"token operator\">=</span>a<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n\t          <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span>b<span class=\"token punctuation\">)</span>\n\t    \t<span class=\"token punctuation\">{<!-- --></span>\n\t    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>depth<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t    \t\ta<span class=\"token operator\">=</span>p<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t    \t\t<span class=\"token keyword\">else</span>\n\t    \t\tb<span class=\"token operator\">=</span>p<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span>x<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token operator\">!=</span>y<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LCA of %d and %d is %d.\\n\"</span><span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>x<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is an ancestor of %d.\\n\"</span><span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is an ancestor of %d.\\n\"</span><span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR: %d and %d are not found.\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR: %d is not found.\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR: %d is not found.\\n\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_293\"></a>二、工程项目训练</h1>\n<p><strong>项目&amp;实习对于秋招来说意义重大,一份好的实习可以让招聘方看到你的工作能力：</strong><br/> <strong>Tips:工作能力:工作能力指的是你工作相关的能力，是在目标岗位上的专业能力，通过实习可以积累你的实战经验，也可以向公司表明你在实际工作中的实操能力。</strong><br/> <strong>但是没有实习也并不代表你秋招无法找到一份好的工作:<br/> 你可以将在校期间的社团、竞赛等相关在校经历补充在简历上；另外如果掌握某种和工作相关的知识或技能，也要尽可能写得详细一些，一定要表明你是如何把上述这些知识技能运用于工作中的。这样可以表现出你很善于学习新知识的特点，给自己加印象分。另外要勤做项目,使自己的项目经历与自己求职的目标岗位相契合,当我们能在简历中通过自己过往的经历证明自己的能力优势，并且这个能力优势又是企业需要的，那么我们拿到面试机会的可能性就会很大。</strong><br/> <strong>下面由小学徒给大家带来Qt的项目学习秘籍,希望大家喜欢。</strong></p>\n<h2><a id=\"day1Qt_301\"></a>day1.Qt(串口的使用)</h2>\n<p><strong>这里必须夸下Qt Creator的帮助(不同于其他IDE帮助需要联网)</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8c35116f531e4690abfbbae476389de3.png\"/><br/> <strong>学习图形界面开发，肯定离不开帮助文档的使用，因为它不像 C 语言那样就那么几个函数接口(api)，图形接口的接口可以用海量来形容，但我们只需要记住常用的几个即可,君子性非异也，善假于物也。<br/> 大家要善于借助外物的力量，遇到不熟悉的直接去帮助文挡查看用法。</strong><br/> <strong>我们在日常使用中使用 Qt 帮助文档，有几个需要关注的点:</strong></p>\n<p><strong>1)类使用的相关介绍</strong></p>\n<p><strong>2)查看部件的信号</strong></p>\n<p><strong>3)查看部件的事件(其所对应的虚函数如何编写)</strong></p>\n<p><strong>4)查看所用部件(类)的相应成员函数(功能，参数，返回值)</strong></p>\n<p><strong>1)类使用的相关介绍</strong></p>\n<p><strong>Qt另一个方便之处在于光标移动到类名字的地方，接着按“F1”即可跳转到所对应的帮助文件：</strong> <img alt=\"在这里插入图片描述\" src=\"image\\e473473ed6e34b1987b7afa9c1c8dc7b.png\"/><br/> <strong>可将光标移到类名字这里,然后按F1即可跳转到所对应的帮助文档。</strong><br/> <strong>2)查看部件的信号</strong></p>\n<p><strong>以QplainTextEdit(纯文本输入框)为例我们来看到它的公有函数</strong>　<img alt=\"在这里插入图片描述\" src=\"image\\a5837fa150824766ab5097551715dde3.png\"/></p>\n<p><strong>公有函数:共有成员可以被程序中的任何代码访问等等</strong><br/> <strong>Summary:Qt上手还是非常的容易，自带的帮助文档中的内容非常详细，还有示例代码，如果想着重学习UI的话:Qt Designer能让你通过以拖动控件放置的方式，可视化的设计UI界面，当你设计好界面编译完成后，在构建目录中会找到文件名形如“ui_XXXX.h”的头文件，这是Qt根据你的UI，自动帮你生成的C++代码，内容就是UI的C++实现方式，大家可以跟着它自动生成的这段代码学来学习UI是怎么实现的，这个比自己看文档要来的直观很多。而且对于初学者来说一个可拖拽位置可改变尺寸的有趣窗口要比一个黑框控制台程序要有意思的多。</strong></p>\n<h1><a id=\"_328\"></a>三、总结</h1>\n<p><strong>很多事情不是因为看到希望了才去坚持，而是因为坚持才能看到希望!人生永远的主题:贵在坚持，重在执着。后续小学徒会继续更新C/C++后端实习经验大礼包系列,希望大家喜欢,一起努力~~~</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}