{"blogid": "126675958", "writerAge": "None", "writerBlogNum": "123", "writerCollect": "1429", "writerComment": "42", "writerFan": "13113", "writerGrade": "4级", "writerIntegral": "1451", "writerName": "大数据老司机", "writerProfileAdress": "writer_image\\profile_126675958.jpg", "writerRankTotal": "11138", "writerRankWeekly": "422", "writerThumb": "160", "writerVisitNum": "171550", "blog_read_count": "269", "blog_time": "于 2022-09-04 07:30:00 发布", "blog_title": "【云原生】K8s pod 动态弹性扩缩容 HAP（metrics-server）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_1\">一、概述</a></li><li><a href=\"#_metricsserver_15\">二、安装 metrics-server</a></li><li><ul><li><a href=\"#1HAP__16\">1）HAP 前提条件</a></li><li><a href=\"#2_API_Aggregator_33\">2）开启 API Aggregator</a></li><li><a href=\"#3_metricsserver_42\">3）开始安装 metrics-server</a></li></ul>\n</li><li><a href=\"#Horizontal_Pod_Autoscaler__86\">三、Horizontal Pod Autoscaler 工作原理</a></li><li><ul><li><a href=\"#1_87\">1）原理架构图</a></li><li><a href=\"#2HPA_93\">2）HPA扩缩容算法</a></li><li><ul><li><a href=\"#1_99\">1、扩容</a></li><li><a href=\"#2_101\">2、缩容</a></li><li><a href=\"#3_103\">3、特殊处理</a></li></ul>\n</li><li><a href=\"#3HPA__109\">3）HPA 对象定义</a></li></ul>\n</li><li><a href=\"#_162\">四、示例演示</a></li><li><ul><li><a href=\"#1yaml_163\">1）编排yaml</a></li><li><a href=\"#2_ab__238\">2）使用 ab 工具进行压测</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>一、概述</h2>\n<blockquote>\n<p><code>Horizontal Pod Autoscaler</code>（<code>HPA</code>，<strong>Pod水平自动伸缩</strong>），根据<strong>平均 CPU 利用率</strong>、<strong>平均内存利用率</strong>或你指定的任何其他<strong>自定义指标</strong>自动调整 <code>Deployment</code> 、<code>ReplicaSet</code> 或 <code>StatefulSet</code> 或其他类似资源，实现部署的自动扩展和缩减，让部署的规模接近于实际服务的负载。HPA<strong>不适用于无法缩放的对象</strong>，例如<code>DaemonSet</code>。</p>\n</blockquote>\n<p>官方文档：<a href=\"https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale/\">https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale/</a></p>\n<p>实际生产中，一般使用这四类指标：</p>\n<ol><li> <p><code>Resource metrics</code>——CPU核 和 内存利用率指标。</p> </li><li> <p><code>Pod metrics</code>——例如网络利用率和流量。</p> </li><li> <p><code>Object metrics</code>——特定对象的指标，比如Ingress, 可以按每秒使用请求数来扩展容器。</p> </li><li> <p><code>Custom metrics</code>——自定义监控，比如通过定义服务响应时间，当响应时间达到一定指标时自动扩容。</p> </li></ol>\n<h2><a id=\"_metricsserver_15\"></a>二、安装 metrics-server</h2>\n<h3><a id=\"1HAP__16\"></a>1）HAP 前提条件</h3>\n<p>默认情况下，Horizontal Pod Autoscaler 控制器会从一系列的 API 中检索度量值。 集群管理员需要确保下述条件，以保证 HPA 控制器能够访问这些 API：</p>\n<ul><li> <p><strong>对于资源指标</strong>，将使用 metrics.k8s.io API，一般由 <code>metrics-server</code> 提供。 它可以作为集群插件启动。</p> </li><li> <p><strong>对于自定义指标</strong>，将使用 custom.metrics.k8s.io API。 它由其他度量指标方案厂商的“适配器（Adapter）” API 服务器提供。 检查你的指标管道以查看是否有可用的 Kubernetes 指标适配器。</p> </li><li> <p><strong>对于外部指标</strong>，将使用 external.metrics.k8s.io API。可能由上面的自定义指标适配器提供。</p> </li></ul>\n<p><strong>Kubernetes Metrics Server：</strong></p>\n<ul><li>Kubernetes Metrics Server 是 Cluster 的核心监控数据的聚合器，kubeadm 默认是不部署的。</li><li>Metrics Server 供 Dashboard 等其他组件使用，是一个扩展的 APIServer，依赖于 API Aggregator。所以，在安装 Metrics Server 之前需要先在 kube-apiserver 中开启 <a href=\"https://kubernetes.io/zh-cn/docs/tasks/extend-kubernetes/configure-aggregation-layer/\">API Aggregator</a>。</li><li>Metrics API 只可以查询当前的度量数据，并不保存历史数据。</li><li>Metrics API URI 为 /apis/metrics.k8s.io/，在 k8s.io/metrics 下维护。</li><li>必须部署 metrics-server 才能使用该 API，metrics-server 通过调用 kubelet Summary API 获取数据。</li></ul>\n<h3><a id=\"2_API_Aggregator_33\"></a>2）开启 API Aggregator</h3>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 添加这行</span>\n<span class=\"token comment\"># --enable-aggregator-routing=true</span>\n<span class=\"token comment\">### 修改每个 API Server 的 kube-apiserver.yaml 配置开启 Aggregator Routing：修改 manifests 配置后 API Server 会自动重启生效。</span>\n<span class=\"token function\">cat</span> /etc/kubernetes/manifests/kube-apiserver.yaml\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b2042303dfaa49a9897afa68c0ab0098.png\"/></p>\n<h3><a id=\"3_metricsserver_42\"></a>3）开始安装 metrics-server</h3>\n<p>GitHub地址：<a href=\"https://github.com/kubernetes-sigs/metrics-server/releases\">https://github.com/kubernetes-sigs/metrics-server/releases</a><br/> 下载</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">wget</span> https://github.com/kubernetes-sigs/metrics-server/releases/download/metrics-server-helm-chart-3.8.2/components.yaml\n</code></pre>\n<p>修改</p>\n<pre><code class=\"prism language-bash\"><span class=\"token punctuation\">..</span>.\n  template:\n    metadata:\n      labels:\n        k8s-app: metrics-server\n    spec:\n      containers:\n      - args:\n        - --cert-dir<span class=\"token operator\">=</span>/tmp\n        - --secure-port<span class=\"token operator\">=</span><span class=\"token number\">4443</span>\n        - --kubelet-preferred-address-types<span class=\"token operator\">=</span>InternalIP,ExternalIP,Hostname\n        - --kubelet-use-node-status-port\n        - --kubelet-insecure-tls                    <span class=\"token comment\">#   加上该启动参数，不加可能会报错</span>\n        image: registry.aliyuncs.com/google_containers/metrics-server:v0.6.1   <span class=\"token comment\"># 镜像地址根据情况修改</span>\n        imagePullPolicy: IfNotPresent\n<span class=\"token punctuation\">..</span>.\n</code></pre>\n<blockquote>\n<p>metrics-server pod无法启动，出现日志<code>unable to fully collect metrics: ... x509: cannot validate certificate for because ... it doesn't contain any IP SANs ...</code><br/> 解决方法：在metrics-server中添加<code>--kubelet-insecure-tls</code>参数<strong>跳过证书校验</strong></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4a0bb1e91cfc4e679b670fcd24a38dba.png\"/></p>\n<p>开始安装</p>\n<pre><code class=\"prism language-bash\">kubectl apply -f components.yaml\nkubectl get pod -n kube-system <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> metrics-server\n<span class=\"token comment\"># 查看</span>\nkubectl get pod -n kube-system <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> metrics-server\n<span class=\"token comment\"># 查看node和pod资源使用情况</span>\nkubectl <span class=\"token function\">top</span> nodes\nkubectl <span class=\"token function\">top</span> pods\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0e6f62693a2f479cb5c6c4a583c52e41.png\"/></p>\n<h2><a id=\"Horizontal_Pod_Autoscaler__86\"></a>三、Horizontal Pod Autoscaler 工作原理</h2>\n<h3><a id=\"1_87\"></a>1）原理架构图</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0fb685e0600d43a5accf9a719118b94f.png\"/></p>\n<ul><li>自动检测周期由 kube-controller-manager 的 <code>--horizontal-pod-autoscaler-sync-period</code> 参数设置（默认间隔为 <code>15 秒</code>）。</li><li>metrics-server 提供 metrics.k8s.io API 为pod资源的使用提供支持。</li><li>15s/周期 -&gt; 查询metrics.k8s.io API -&gt; 算法计算 -&gt; 调用scale 调度 -&gt; 特定的扩缩容策略执行。</li></ul>\n<h3><a id=\"2HPA_93\"></a>2）HPA扩缩容算法</h3>\n<blockquote>\n<p>从最基本的角度来看，Pod 水平自动扩缩控制器根据当前指标和期望指标来计算扩缩比例。</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">期望副本数 <span class=\"token operator\">=</span> ceil<span class=\"token punctuation\">[</span>当前副本数 * <span class=\"token punctuation\">(</span>当前指标 / 期望指标<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h4><a id=\"1_99\"></a>1、扩容</h4>\n<ul><li>如果计算出的扩缩比例接近 1.0, 将会放弃本次扩缩, 度量指标 / 期望指标接近1.0。</li></ul>\n<h4><a id=\"2_101\"></a>2、缩容</h4>\n<ul><li>冷却/延迟: 如果延迟（冷却）时间设置的太短，那么副本数量有可能跟以前一样出现抖动。 默认值是 5 分钟（5m0s）–horizontal-pod-autoscaler-downscale-stabilization</li></ul>\n<h4><a id=\"3_103\"></a>3、特殊处理</h4>\n<ul><li>丢失度量值：缩小时假设这些 Pod 消耗了目标值的 100%， 在需要放大时假设这些 Pod 消耗了 0% 目标值。 这可以在一定程度上抑制扩缩的幅度。</li><li>存在未就绪的pod的时候：我们保守地假设尚未就绪的 Pod 消耗了期望指标的 0%，从而进一步降低了扩缩的幅度。</li><li>未就绪的 Pod 和缺少指标的 Pod 考虑进来再次计算使用率。 如果新的比率与扩缩方向相反，或者在容忍范围内，则跳过扩缩。 否则，我们使用新的扩缩比例。</li><li>指定了多个指标， 那么会按照每个指标分别计算扩缩副本数，取最大值进行扩缩。</li></ul>\n<h3><a id=\"3HPA__109\"></a>3）HPA 对象定义</h3>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> autoscaling/v2beta2\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> HorizontalPodAutoscaler\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">behavior</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">scaleDown</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">policies</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Pods\n      <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Percent\n      <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>\n    <span class=\"token key atrule\">stabilizationWindowSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>\n  \n  <span class=\"token key atrule\">scaleTargetRef</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n    <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">minReplicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">maxReplicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token key atrule\">metrics</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Resource\n    <span class=\"token key atrule\">resource</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cpu\n      <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Utilization\n        <span class=\"token key atrule\">averageUtilization</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>\n</code></pre>\n<p>HPA对象默认行为</p>\n<pre><code class=\"prism language-bash\">behavior:\n  scaleDown:\n    stabilizationWindowSeconds: <span class=\"token number\">300</span>\n    policies:\n    - type: Percent\n      value: <span class=\"token number\">100</span>\n      periodSeconds: <span class=\"token number\">15</span>\n  scaleUp:\n    stabilizationWindowSeconds: <span class=\"token number\">0</span>\n    policies:\n    - type: Percent\n      value: <span class=\"token number\">100</span>\n      periodSeconds: <span class=\"token number\">15</span>\n    - type: Pods\n      value: <span class=\"token number\">4</span>\n      periodSeconds: <span class=\"token number\">15</span>\n    selectPolicy: Max\n</code></pre>\n<h2><a id=\"_162\"></a>四、示例演示</h2>\n<h3><a id=\"1yaml_163\"></a>1）编排yaml</h3>\n<pre><code class=\"prism language-bash\">apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: hap-nginx\nspec:\n  maxReplicas: <span class=\"token number\">10</span> <span class=\"token comment\"># 最大扩容到10个节点（pod）</span>\n  minReplicas: <span class=\"token number\">1</span> <span class=\"token comment\"># 最小扩容1个节点（pod）</span>\n  metrics:\n  - resource:\n      name: cpu\n      target:\n        averageUtilization: <span class=\"token number\">40</span> <span class=\"token comment\"># CPU 平局资源使用率达到40%就开始扩容，低于40%就是缩容</span>\n        <span class=\"token comment\"># 设置内存</span>\n        <span class=\"token comment\"># AverageValue：40</span>\n        type: Utilization\n    type: Resource\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: hap-nginx\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hap-nginx\nspec:\n  type: NodePort\n  ports:\n    - name: <span class=\"token string\">\"http\"</span>\n      port: <span class=\"token number\">80</span>\n      targetPort: <span class=\"token number\">80</span>\n      nodePort: <span class=\"token number\">30080</span>\n  selector:\n    service: hap-nginx\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hap-nginx\nspec:\n  replicas: <span class=\"token number\">1</span>\n  selector:\n    matchLabels:\n      service: hap-nginx\n  template:\n    metadata:\n      labels:\n        service: hap-nginx\n    spec:\n      containers:\n        - name: hap-nginx\n          image: nginx:latest\n          resources:\n            requests:\n              cpu: 100m\n              memory: 100Mi\n            limits:\n              cpu: 200m\n              memory: 200Mi\n</code></pre>\n<p>主要参数解释如下：</p>\n<ul><li>`scaleTargetRef：目标作用对象，可以是Deployment、ReplicationController或ReplicaSet。</li><li><code>minReplicas</code>和<code>maxReplicas</code>：Pod副本数量的最小值和最大值，系统将在这个范围内进行自动扩缩容操作，并维持每个Pod的内存使用率为<code>40%</code>，这个值就是上面设置的阈值<code>averageUtilization</code>。</li><li>metrics：目标指标值。在metrics中通过参数type定义指标的类型；通过参数target定义相应的指标目标值，系统将在指标数据达到目标值时（考虑容忍度的区间，见前面算法部分的说明）触发扩缩容操作。</li><li>对于CPU使用率，在target参数中设置<code>averageUtilization</code>定义目标平均<strong>CPU使用率</strong>。</li><li>对于内存资源，在target参数中设置<code>AverageValue</code>定义目标平均内存使用值。</li></ul>\n<p>执行</p>\n<pre><code class=\"prism language-bash\">kubectl apply -f test.yaml\n</code></pre>\n<h3><a id=\"2_ab__238\"></a>2）使用 ab 工具进行压测</h3>\n<p>进入apache官网 <a href=\"http://httpd.apache.org/\">http://httpd.apache.org/</a> 下载apache即可，或者直接通过yum安装apache都行，这里选择最简单的方式yum安装</p>\n<pre><code class=\"prism language-bash\">yum <span class=\"token function\">install</span> httpd -y\n</code></pre>\n<p>开始压测</p>\n<pre><code class=\"prism language-bash\">ab -n <span class=\"token number\">100000</span> -c <span class=\"token number\">800</span> http://local-168-182-112:30080/\n\n<span class=\"token comment\">#-c：并发数</span>\n<span class=\"token comment\">#-n：总请求数</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\00fccd4ac6ef4cc19ff2ea0b40b32f9c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b70b86f1052d40a19b70b5561dce9028.png\"/><br/> 从上图发现已经实现了根据CPU 动态扩容了，关于更多 HAP相关的知识点，可以先查看<a href=\"https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale/\">官方文档</a>，后面会在实战项目里使用，请小伙伴耐心等待；有疑问的小伙伴，欢迎给我留言，后续会持续分享【云原生和大数据】相关的文章，请小伙伴耐心等待哦~</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}