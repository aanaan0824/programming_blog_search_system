{"blogid": "126743620", "writerAge": "码龄1年", "writerBlogNum": "462", "writerCollect": "281", "writerComment": "15", "writerFan": "9703", "writerGrade": "6级", "writerIntegral": "4847", "writerName": "egegerhn", "writerProfileAdress": "writer_image\\profile_126743620.jpg", "writerRankTotal": "3832", "writerRankWeekly": "802", "writerThumb": "40", "writerVisitNum": "180124", "blog_read_count": "16", "blog_time": "于 2022-09-07 13:14:08 发布", "blog_title": "JVM从零到一系列：01--JVM概述【初识JVM】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"0x01JVM_2\"></a>0x01.什么是JVM？</h1>\n<h4><a id=\"JVMJava_Virtual_MachineJava_5\"></a>JVM（Java Virtual Machine）：Java虚拟机</h4>\n<h4><a id=\"Virtual_Machine_7\"></a>虚拟机（Virtual Machine）：</h4>\n<ul><li> <p>虚拟机是一款软件，用来执行一系列虚拟的计算机指令。</p> </li><li> <p>虚拟机分为<strong>系统虚拟机</strong>和<strong>程序虚拟机</strong>。</p>\n<ul><li>系统虚拟机是对物理计算机的仿真，提供一个可运行完整操作系统的平台。</li><li>软件虚拟机是专门为执行单个计算机程序而设计的。</li></ul> </li><li> <p><strong>在虚拟机上运行的软件所拥有的资源都被限制于虚拟机提供的资源。</strong></p> </li></ul>\n<h4><a id=\"Java_18\"></a>Java虚拟机：</h4>\n<ul><li>Java虚拟机是一台执行Java字节码的虚拟计算机。【就是二进制字节码的运行环境】</li><li>它拥有独立的运行机制，其运行的Java字节码不一定是Java编译的。</li><li><strong>所有Java程序都运行在Java虚拟机的内部。</strong></li><li>JVM运行于操作系统之上，并没有与硬件有直接的交互。</li></ul>\n<h1><a id=\"0x02JVM_25\"></a>0x02.JVM特性</h1>\n<h4><a id=\"JVM_28\"></a>JVM是一个跨语言的平台</h4>\n<ul><li>对于字节码，是【一次编译，到处运行】。</li><li>对于JVM，只关心字节码， 并不关心是何种语言编译而成的字节码，任何语言，只要按照JVM字节码的规范去编译，都可以被JVM识别，并解释运行。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20200607110447812.png\"/></li></ul>\n<h4><a id=\"JVM_34\"></a>JVM强大之处：</h4>\n<ul><li>JVM的自动内存管理。</li><li>JVM的自动垃圾回收机制。</li></ul>\n<h1><a id=\"0x03JVM_39\"></a>0x03.JVM发展历史</h1>\n<ul><li>2000年，JDK 1.3 发布，Java HotSpot Virtual Machine 正式发布，成为Java的默认虚拟机。</li><li>2002年，JDK 1.4 发布，Classic虚拟机退出历史舞台。</li><li>2006年，JDK 6 发布，Java开源并建立了 OpenJDK。HotSpot 虚拟机成为OpenJDK中默认的虚拟机。</li><li>2008年，Oracle 收购 BEA，得到 JRockit虚拟机。</li><li>2010年，Oracle 收购了Sun，获得了Java和HotSpot。</li><li>2011年，JDK 7 发布，正式启用了新的垃圾回收机制G1。</li><li>2014年，JDK 8 发布，整合了JRockit和HotSpot。</li><li>2017年，JDK 9 发布，将G1设置为默认的GC，替代了CMS。</li><li>2018年，JDK 11 发布，发布了革命性的ZGC。</li><li>2019年，JDK 12 发布，加入RedHat领导开发的 Shenandoah GC。</li></ul>\n<h1><a id=\"0x04JVM_53\"></a>0x04.JVM的整体结构</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20200607113109682.png\"/></p>\n<h1><a id=\"0x05JVM_58\"></a>0x05.JVM架构模型</h1>\n<ul><li> <p>Java编译器输入的指令流基本上是一种基于<strong>栈的指令集结构</strong>。（由其跨平台性决定的）</p> </li><li> <p><strong>基于栈式架构的特点：</strong></p>\n<ul><li>设计和实现更加简单，适用于资源受限的系统。</li><li>使用零地址指令方式分配，指令集更小。（指令更多）</li><li>不需要硬件支持，可移植性更好。</li></ul> </li><li> <p><strong>基于寄存器架构的特点：</strong></p>\n<ul><li>性能优秀，执行更高效。</li><li>花费更少的指令去执行一项操作。</li><li>指令集完全依赖硬件，可移植性差。</li></ul> </li></ul>\n<h1><a id=\"0x06JVM_74\"></a>0x06.JVM的生命周期</h1>\n<h3><a id=\"_77\"></a>虚拟机启动：</h3>\n<ul><li>Java虚拟机的启动是通过<strong>引导类加载器</strong>创建一个初始类来完成的，这个类是由虚拟机的具体实现指定的。</li></ul>\n<h3><a id=\"_81\"></a>虚拟机的执行：</h3>\n<ul><li>程序开始执行时，虚拟机运行。</li><li>程序结束时，虚拟机停止。</li><li>执行Java程序，真正意义上是在执行Java虚拟机的一个进程。</li><li>运行的Java虚拟机的目的：执行Java程序。</li></ul>\n<h3><a id=\"_88\"></a>虚拟机的退出：</h3>\n<ul><li> <p>可能退出的情况：</p>\n<ul><li>程序正常结束。</li><li>程序执行过程中遇到异常或错误。</li><li>操作系统出现错误。</li><li>某一个线程调用Runtime或System类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit火灾halt操作。</li></ul> </li></ul>\n<h1><a id=\"0x07JVM_97\"></a>0x07.JVM发展历程</h1>\n<h3><a id=\"Classic_VM_100\"></a>Classic VM：</h3>\n<ul><li>1996年JDK1.0的时候，SUN公司发布的Java虚拟机。</li><li>世界上第一款商用的Java虚拟机，于JDK1.4时被完全淘汰。</li><li>这款虚拟机只提供了解释器。解释器和编译器不能配合工作。</li><li>现在的hotspot内置了这款虚拟机。</li></ul>\n<h3><a id=\"Exact_VM_107\"></a>Exact VM：</h3>\n<ul><li> <p>为了解决解释器和编译器不能配合工作的问题，SUN 在JDK1.2时提供的虚拟机。</p> </li><li> <p>Exact Memory Management ：准确式内存管理。</p>\n<ul><li>虚拟机可以知道内存中耨个位置的数据具体是什么类型。</li></ul> </li><li> <p>此款虚拟机具备现代高性能虚拟机的雏形：</p>\n<ul><li>热点探测。</li><li>编译器和解释器混合工作模式。</li></ul> </li><li> <p>最终被HotSpot替代。</p> </li></ul>\n<h3><a id=\"HotSpot_VM_121\"></a>HotSpot VM：</h3>\n<ul><li> <p>HotSpot是JDK1.3时发布的，是其默认的虚拟机。</p> </li><li> <p>在服务器端，桌面端，嵌入式，都有应用。</p> </li><li> <p>HotSpot指的是它的热点代码探测技术。</p>\n<ul><li>通过计数器找到最具编译价值的代码，除法即时编译或栈上替换。</li><li>通过解释器和编译器协同工作，在最优化的程序响应时间与最佳执行性能中取得平衡。</li></ul> </li><li> <p>最有影响力的三大商用虚拟机之一。</p> </li></ul>\n<h3><a id=\"JRockit_VM_134\"></a>JRockit VM：</h3>\n<ul><li>专注服务器端应用。JRockit内部不包含解析器的实现，全都代码都靠即时编译器编译后执行。</li><li>JRockit JVM被认为是世界上最快的JVM。</li><li>JRockit提供全面的Java运行时解决方案的组合。</li><li>在JDK8中整合了HotSpot和JRockit，整合的方式是在HotSpot的基础上加入JRockit的优秀性能。</li><li>最有影响力的三大商用虚拟机之一。</li></ul>\n<h3><a id=\"J9IBM_142\"></a>J9（IBM）：</h3>\n<ul><li>IBM technology for Java Virtual Machine ，简称IT4J，也叫J9。</li><li>市场定位与HotSpot接近，在服务器端，桌面应用，嵌入式等多用途的VM。</li><li>广泛应用于IBM的各种Java产品。</li><li>最有影响力的三大商用虚拟机之一。</li></ul>\n<h3><a id=\"CDCCLDC_HotSpotKVM_149\"></a>CDC/CLDC HotSpot（KVM）：</h3>\n<ul><li>是Oracle在Java ME产品线上的虚拟机，另一款为Implementation VM。</li><li>KVM是CLDC-HI的早期产品。</li><li>KVM在更低端的设备上还有应用，比如智能控制器，传感器，老年手机，功能手机等。</li></ul>\n<h3><a id=\"Microsoft_JVM_155\"></a>Microsoft JVM：</h3>\n<ul><li>只能在windows平台下运行。是当时windows下性能最好的Java VM。</li><li>1997年，微软因为败诉取消了windows中的VM。</li></ul>\n<h3><a id=\"Taobao_JVM_160\"></a>Taobao JVM：</h3>\n<ul><li>AliJVM团队发布。</li><li>阿里基于OpenJDK开发了自己的定制版本AlibabaJDK，简称AJDK，是整个阿里Java体系的基石。</li><li>TaobaoJVM是基于OpenJDK HotSpot VM 发布的国内第一个优化，深度定制且开源的高性能服务器版Java虚拟机。</li><li>Taobao VM应用在阿里产品上性能高，硬件高度依赖intel的cpu，损失了兼容性，提高了性能。</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}