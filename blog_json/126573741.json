{"blogid": "126573741", "writerAge": "码龄4年", "writerBlogNum": "36", "writerCollect": "59", "writerComment": "30", "writerFan": "42", "writerGrade": "3级", "writerIntegral": "530", "writerName": "小猪宝宝哦", "writerProfileAdress": "writer_image\\profile_126573741.jpg", "writerRankTotal": "31759", "writerRankWeekly": "5632", "writerThumb": "49", "writerVisitNum": "14974", "blog_read_count": "3689", "blog_time": "已于 2022-08-30 08:54:48 修改", "blog_title": "第3章 动态SQL", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录/Contents</h3>\n<ul><li><ul><li><a href=\"#3__SQL_1\">第3章 动态SQL</a></li><li><ul><li><a href=\"#_2\">学习目标</a></li><li><ul><li><a href=\"#MyBatisSQL_3\">掌握MyBatis中动态SQL元素的使用</a></li><li><a href=\"#MyBatis_4\">掌握MyBatis的条件查询操作</a></li><li><a href=\"#MyBatis_5\">掌握MyBatis的更新操作</a></li><li><a href=\"#MyBatis_6\">掌握MyBatis的复杂查询操作</a></li></ul>\n</li><li><a href=\"#_7\">学习内容</a></li><li><ul><li><a href=\"#1_SQL_8\">1 动态SQL中的元素</a></li><li><ul><li><a href=\"#11_SQL_9\">1.1 使用动态SQL的好处</a></li><li><a href=\"#12__SQL_12\">1.2 动态SQL常用元素</a></li></ul>\n</li><li><a href=\"#2__14\">2 条件查询操作</a></li><li><ul><li><a href=\"#21_if_15\">2.1 \\&lt;if&gt;元素</a></li><li><a href=\"#22__choosewhenotherwise_31\">2.2 \\&lt;choose&gt;、\\&lt;when&gt;、\\&lt;otherwise&gt;元素</a></li><li><a href=\"#23__wheretrim_51\">2.3 \\&lt;where&gt;、\\&lt;trim&gt;元素</a></li></ul>\n</li><li><a href=\"#3__96\">3 更新操作</a></li><li><ul><li><a href=\"#31_set_97\">3.1 \\&lt;set&gt;元素</a></li></ul>\n</li><li><a href=\"#4__118\">4 复杂查询操作</a></li><li><ul><li><a href=\"#41_foreach_120\">4.1 \\&lt;foreach&gt;元素的属性</a></li><li><a href=\"#42_collection_122\">4.2 \\&lt;collection&gt;属性的取值</a></li><li><a href=\"#43_foreach_128\">4.3 \\&lt;foreach&gt;元素迭代数组</a></li><li><a href=\"#44_foreachList_160\">4.4 \\&lt;foreach&gt;元素迭代List</a></li><li><a href=\"#45_foreachMap_193\">4.5 \\&lt;foreach&gt;元素迭代Map</a></li></ul>\n</li><li><a href=\"#5__228\">5 案例：学生信息查询系统</a></li><li><ul><li><a href=\"#51__229\">5.1 需求</a></li><li><a href=\"#52__236\">5.2 项目搭建</a></li><li><a href=\"#53__238\">5.3 数据准备</a></li><li><a href=\"#54_POJO_251\">5.4 POJO类准备</a></li><li><a href=\"#55__266\">5.5 创建映射文件</a></li><li><a href=\"#56_mybatisconfigxml_282\">5.6 修改mybatis-config.xml核心配置文件</a></li><li><a href=\"#57_MyBatisUtils_290\">5.7 编写MyBatisUtils工具类</a></li><li><a href=\"#58__305\">5.8 编写测试方法</a></li><li><a href=\"#59__322\">5.9 查看运行结果</a></li><li><a href=\"#510__328\">5.10 多条件查询案例结果分析</a></li><li><a href=\"#511__331\">5.11 修改映射文件</a></li><li><a href=\"#512__345\">5.12 编写测试方法</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"3__SQL_1\"></a>第3章 动态SQL</h2>\n<h3><a id=\"_2\"></a>学习目标</h3>\n<h4><a id=\"MyBatisSQL_3\"></a>掌握MyBatis中动态SQL元素的使用</h4>\n<h4><a id=\"MyBatis_4\"></a>掌握MyBatis的条件查询操作</h4>\n<h4><a id=\"MyBatis_5\"></a>掌握MyBatis的更新操作</h4>\n<h4><a id=\"MyBatis_6\"></a>掌握MyBatis的复杂查询操作</h4>\n<h3><a id=\"_7\"></a>学习内容</h3>\n<h4><a id=\"1_SQL_8\"></a>1 动态SQL中的元素</h4>\n<h5><a id=\"11_SQL_9\"></a>1.1 使用动态SQL的好处</h5>\n<blockquote>\n<p>动态SQL是MyBatis的强大特性之一，MyBatis采用了功能强大的基于OGNL（Object Graph Navigation Language）的表达式来完成动态SQL。在MyBatis的映射文件中，开发人员可通过动态SQL元素灵活组装SQL语句，这在很大程度上避免了单一SQL语句的反复堆砌，提高了SQL语句的复用性。</p>\n</blockquote>\n<h5><a id=\"12__SQL_12\"></a>1.2 动态SQL常用元素</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9d6ed7ea0e3640759749d32411bf4858.png\"/></p>\n<h4><a id=\"2__14\"></a>2 条件查询操作</h4>\n<h5><a id=\"21_if_15\"></a>2.1 &lt;if&gt;元素</h5>\n<blockquote>\n<p><strong>&lt;if&gt;元素的应用</strong><br/> 在MyBatis中，&lt;if&gt;元素是最常用的判断元素，它类似于Java中的if语句，主要用于实现某些简单的条件判断。在实际应用中，我们可能会通过某个条件查询某个数据。例如，要查找某个客户的信息，可以通过姓名或者年龄来查找客户，也可以不填写年龄直接通过姓名来查找客户，还可以都不填写而查询出所有客户，此时姓名和年龄就是非必须条件。类似于这种情况，在MyBatis中就可以通过&lt;if&gt;元素来实现。</p>\n</blockquote>\n<blockquote>\n<p><strong>根据客户姓名和年龄组合条件查询客户信息，使用元素编写该组合条件的动态SQL。</strong></p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>– 该xml文件中只列出了<span class=\"token keyword\">if</span>元素的动态SQL<span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span>\"username <span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> and username <span class=\"token operator\">!=</span>‘’“<span class=\"token operator\">&gt;</span>\n       and username like <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token char\">'%'</span><span class=\"token punctuation\">,</span>#<span class=\"token punctuation\">{<!-- --></span>username<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'%'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span>\"jobs <span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> and jobs <span class=\"token operator\">!=</span>‘’“<span class=\"token operator\">&gt;</span>\n     and jobs<span class=\"token operator\">=</span> #<span class=\"token punctuation\">{<!-- --></span>jobs<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h5><a id=\"22__choosewhenotherwise_31\"></a>2.2 &lt;choose&gt;、&lt;when&gt;、&lt;otherwise&gt;元素</h5>\n<blockquote>\n<p><strong>&lt;choose&gt;&lt;when&gt;&lt;otherwise&gt;使用场景</strong><br/> 在使用&lt;if&gt;元素时，只要test属性中的表达式为true，就会执行元素中的条件语句，但是在实际应用中，有时只需要从多个选项中选择一个去执行。<br/> 例如下面的场景：“当客户名称不为空，则只根据客户名称进行客户筛选；当客户名称为空，而客户职业不为空，则只根据客户职业进行客户筛选。当客户名称和客户职业都为空，则要求查询出所有电话不为空的客户信息。”<br/> 针对上面情况，使用&lt;if&gt;元素进行处理是不合适的。MyBatis提供了&lt;choose&gt;、&lt;when&gt;、&lt;otherwise&gt;元素进行处理，这三个元素往往组合在一起使用，作用相当于Java语言中的if…else if…else。</p>\n</blockquote>\n<pre><code class=\"prism language-java\">       <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 只展示三个组合元素的部分<span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>choose<span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token operator\">&lt;</span>when test<span class=\"token operator\">=</span><span class=\"token string\">\"username !=null and username !=''\"</span><span class=\"token operator\">&gt;</span>\n            and username like <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token char\">'%'</span><span class=\"token punctuation\">,</span>#<span class=\"token punctuation\">{<!-- --></span>username<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'%'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>when<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>when test<span class=\"token operator\">=</span><span class=\"token string\">\"jobs !=null and jobs !=''\"</span><span class=\"token operator\">&gt;</span>\n            and jobs<span class=\"token operator\">=</span> #<span class=\"token punctuation\">{<!-- --></span>jobs<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>when<span class=\"token operator\">&gt;</span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>otherwise<span class=\"token punctuation\">&gt;</span></span>and phone is not <span class=\"token keyword\">null</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>otherwise<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>choose<span class=\"token operator\">&gt;</span> \n</code></pre>\n<h5><a id=\"23__wheretrim_51\"></a>2.3 &lt;where&gt;、&lt;trim&gt;元素</h5>\n<blockquote>\n<p><strong>&lt;where&gt;&lt;trim&gt;使用场景</strong><br/> 在映射文件中，编写的SQL后面加入了“where 1=1”的条件的话，既保证了where后面的条件成立，又避免了where后面第一个词是and或者or之类的关键字。<br/> 例如下面这条Mybatis拼接出的SQL语句是不正确的。<br/> <strong>select * from t_customer where and username like concat(‘%’,?, ‘%’) and jobs = #{jobs}</strong><br/> 上述SQL语句中，where后直接跟的是and，这在运行时会报SQL语法错误，针对这种情况，可以使用MyBatis提供的元素和元素进行处理。</p>\n</blockquote>\n<blockquote>\n<p><strong>&lt;where&gt;元素</strong></p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"findCustomerByNameAndJobs\"</span> \n          parameterType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Customer\"</span>\n          resultType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Customer\"</span><span class=\"token operator\">&gt;</span>\n    select <span class=\"token operator\">*</span> from t_customer\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>where<span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"username !=null and username !=''\"</span><span class=\"token operator\">&gt;</span>\n            and username like <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token char\">'%'</span><span class=\"token punctuation\">,</span>#<span class=\"token punctuation\">{<!-- --></span>username<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"jobs !=null and jobs !=''\"</span><span class=\"token operator\">&gt;</span>\n            and jobs<span class=\"token operator\">=</span> #<span class=\"token punctuation\">{<!-- --></span>jobs<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>where<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p>上述代码配置中，&lt;where&gt;元素会自动判断由组合条件拼装的SQL语句，只有&lt;where&gt;元素内的某一个或多个条件成立时，才会在拼接SQL中加入where关键字，否则将不会添加；即使where之后的内容有多余的“AND”或“OR”，&lt;where&gt;元素也会自动将他们去除。</p>\n</blockquote>\n<blockquote>\n<p><strong>&lt;trim&gt;元素</strong><br/> 元素用于删除多余的关键字，它可以直接实现元素的功能。元素包含4个属性。<br/> <strong>prefix</strong> 指定给SQL语句增加的前缀<br/> <strong>prefixOverrides</strong> 指定SQL语句中要去掉的前缀字符串<br/> <strong>suffix</strong> 指定给SQL语句增加的后缀<br/> <strong>suffixOverrides</strong> 指定SQL语句中要去掉的后缀字符串</p>\n</blockquote>\n<pre><code class=\"prism language-java\">     <span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"findCustomerByNameAndJobs\"</span> \n          parameterType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Customer\"</span>\n          resultType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Customer\"</span><span class=\"token operator\">&gt;</span>\n    select <span class=\"token operator\">*</span> from t_customer\n   <span class=\"token operator\">&lt;</span>trim prefix<span class=\"token operator\">=</span><span class=\"token string\">\"where\"</span> prefixOverrides<span class=\"token operator\">=</span><span class=\"token string\">\"and\"</span> <span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"username !=null and username !=''\"</span><span class=\"token operator\">&gt;</span>\n            and username like <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token char\">'%'</span><span class=\"token punctuation\">,</span>#<span class=\"token punctuation\">{<!-- --></span>username<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"jobs !=null and jobs !=''\"</span><span class=\"token operator\">&gt;</span>\n            and jobs<span class=\"token operator\">=</span> #<span class=\"token punctuation\">{<!-- --></span>jobs<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>trim<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p>上述配置代码中，&lt;trim&gt;元素的作用是去除一些多余的前缀字符串，它的prefix属性代表的是语句的前缀（where），而prefixOverrides属性代表的是需要去除的前缀字符串（SQL中的“AND”或“OR”）。</p>\n</blockquote>\n<h4><a id=\"3__96\"></a>3 更新操作</h4>\n<h5><a id=\"31_set_97\"></a>3.1 &lt;set&gt;元素</h5>\n<blockquote>\n<p><strong>&lt;set&gt;元素使用场景</strong><br/> 在Hibernate框架中，如果想要更新某一个对象，就需要发送所有的字段给持久化对象，然而在实际应用中，大多数情况下都是更新某一个或几个字段。如果更新的每一条数据都要将其所有的属性都更新一遍，那么执行效率是非常差的。为了解决更新数据的效率问题，MyBatis提供了元素。元素主要用于更新操作，它可以在动态SQL语句前输出一个SET关键字，并将SQL语句中最后一个多余的逗号去除。元素与元素结合可以只更新需要更新的字段。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span>update id<span class=\"token operator\">=</span><span class=\"token string\">\"updateCustomerBySet\"</span> parameterType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Customer\"</span><span class=\"token operator\">&gt;</span>update t_customer \n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>set<span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"username !=null and username !=''\"</span><span class=\"token operator\">&gt;</span>\n            username<span class=\"token operator\">=</span>#<span class=\"token punctuation\">{<!-- --></span>username<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"jobs !=null and jobs !=''\"</span><span class=\"token operator\">&gt;</span>  jobs<span class=\"token operator\">=</span>#<span class=\"token punctuation\">{<!-- --></span>jobs<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"phone !=null and phone !=''\"</span><span class=\"token operator\">&gt;</span>phone<span class=\"token operator\">=</span>#<span class=\"token punctuation\">{<!-- --></span>phone<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>set<span class=\"token operator\">&gt;</span> where id<span class=\"token operator\">=</span>#<span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>update<span class=\"token operator\">&gt;</span> \n</code></pre>\n<blockquote>\n<p><strong>&lt;set&gt;元素字段非空</strong><br/> 在映射文件中使用&lt;set&gt;元素和&lt;if&gt;元素组合进行update语句动态SQL组装时，如果&lt;set&gt;元素内包含的内容都为空，则会出现SQL语法错误。因此，在使用&lt;set&gt;元素进行字段信息更新时，要确保传入的更新字段不能都为空。</p>\n</blockquote>\n<blockquote>\n<p><strong>使用&lt;trim&gt;元素更新</strong><br/> 除了使用&lt;set&gt;元素外，还可以通过&lt;trim&gt;元素来实现更新操作。其中, &lt;trim&gt;元素的prefix属性指定要添加的&lt;trim&gt;元素所包含内容的前缀为set，suffixOverrides属性指定去除的&lt;trim&gt;元素所包含内容的后缀为逗号 。</p>\n</blockquote>\n<h4><a id=\"4__118\"></a>4 复杂查询操作</h4>\n<h5><a id=\"41_foreach_120\"></a>4.1 &lt;foreach&gt;元素的属性</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\690bb678f9cc4831a4d3bc103bc3ff04.png\"/></p>\n<h5><a id=\"42_collection_122\"></a>4.2 &lt;collection&gt;属性的取值</h5>\n<blockquote>\n<p>在遍历参数时，&lt;collection&gt;属性的值是必须指定的。不同情况下，该属性的取值也是不一样的，主要有以下三种情况：List类型、数值类型、Map类型。<br/> 若入参为单参数且参数类型是一个<strong>List</strong>，collection属性值为list。<br/> 若入参为单参数且参数类型是一个<strong>数组</strong>，collection属性值为array。<br/> 若传入参数为<strong>多参数</strong>，就需要把参数封装为一个Map进行处理，collection属性值为Map。若传入参数为多参数，就需要把参数封装为一个Map进行处理，collection属性值为Map。</p>\n</blockquote>\n<h5><a id=\"43_foreach_128\"></a>4.3 &lt;foreach&gt;元素迭代数组</h5>\n<blockquote>\n<p>&lt;foeeach&gt;实现入参为数组类型的遍历<br/> 例如，要从数据表t_customer中查询出id为1、2、3的客户信息，就可以利用数组作为参数，存储id的属性值1、2、3，并通过&lt;foreach&gt;元素迭代数组完成客户信息的批量查询操作。</p>\n</blockquote>\n<blockquote>\n<p>在映射文件CustomerMapper.xml中，添加使用元素迭代数组执行批量查询操作的动态SQL。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"findByArray\"</span> parameterType<span class=\"token operator\">=</span><span class=\"token string\">\"java.util.Arrays\"</span>\n         resultType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Customer\"</span><span class=\"token operator\">&gt;</span>select <span class=\"token operator\">*</span> from t_customer where id in\n    <span class=\"token operator\">&lt;</span>foreach item<span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span> index<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span> collection<span class=\"token operator\">=</span><span class=\"token string\">\"array\"</span> \n               <span class=\"token keyword\">open</span><span class=\"token operator\">=</span><span class=\"token string\">\"(\"</span> separator<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span> close<span class=\"token operator\">=</span><span class=\"token string\">\")\"</span><span class=\"token operator\">&gt;</span>\t#<span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>foreach<span class=\"token operator\">&gt;</span>\nselect<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p>在测试类MyBatisTest中，编写测试方法findByArrayTest()方法，实现客户信息的批量查询。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findByArrayTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MyBatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取SqlSession</span>\n    <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> roleIds <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建数组，封装查询id</span>\n    <span class=\"token comment\">// 执行SqlSession的查询方法，返回结果集</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">&gt;</span></span> customers <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.mapper\"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\".CustomerMapper.findByArray\"</span><span class=\"token punctuation\">,</span> roleIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span> customer <span class=\"token operator\">:</span> customers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>执行MyBatisTest测试类的findByArrayTest()方法，控制台会输出结果。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a0acd31341424637910f41a18250183d.png\"/></p>\n<h5><a id=\"44_foreachList_160\"></a>4.4 &lt;foreach&gt;元素迭代List</h5>\n<blockquote>\n<p>元素迭代List的实现步骤具体如下。<br/> 在映射文件CustomerMapper.xml中，添加使用元素迭代List集合执行批量查询操作的动态SQL。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"findByList\"</span> parameterType<span class=\"token operator\">=</span><span class=\"token string\">\"java.util.Arrays\"</span>\n         resultType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Customer\"</span><span class=\"token operator\">&gt;</span>\n    select <span class=\"token operator\">*</span> from t_customer where id in\n    <span class=\"token operator\">&lt;</span>foreach item<span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span> index<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span> collection<span class=\"token operator\">=</span><span class=\"token string\">\"list\"</span> \n               <span class=\"token keyword\">open</span><span class=\"token operator\">=</span><span class=\"token string\">\"(\"</span> separator<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span> close<span class=\"token operator\">=</span><span class=\"token string\">\")\"</span><span class=\"token operator\">&gt;</span>\n        #<span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>foreach<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p>在测试类MyBatisTest中，编写测试方法findByListTest()，用于批量查询客户信息。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findByListTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MyBatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> ids<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ids<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  ids<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">&gt;</span></span> customers <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.mapper\"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\".CustomerMapper.findByList\"</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span> customer <span class=\"token operator\">:</span> customers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>执行MyBatisTest测试类的findByListTest()方法，控制台会输出结果。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8100cb5ca502428ba55e1df752dd5647.png\"/></p>\n<h5><a id=\"45_foreachMap_193\"></a>4.5 &lt;foreach&gt;元素迭代Map</h5>\n<blockquote>\n<p>下面通过一个案例演示如何使用元素迭代Map集合，实现多参数入参查询操作，案例具体实 现步骤如下。<br/> 在映射文件CustomerMapper.xml中，添加使用元素迭代Map集合执行批量查询操作的动态SQL。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"findByMap\"</span> parameterType<span class=\"token operator\">=</span><span class=\"token string\">\"java.util.Map\"</span>\n        resultType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Customer\"</span><span class=\"token operator\">&gt;</span>\n    select <span class=\"token operator\">*</span> from t_customer where jobs<span class=\"token operator\">=</span>#<span class=\"token punctuation\">{<!-- --></span>jobs<span class=\"token punctuation\">}</span> and id in\n    <span class=\"token operator\">&lt;</span>foreach item<span class=\"token operator\">=</span><span class=\"token string\">\"roleMap\"</span> index<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span> collection<span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span> <span class=\"token keyword\">open</span><span class=\"token operator\">=</span><span class=\"token string\">\"(\"</span> \tseparator<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span> close<span class=\"token operator\">=</span><span class=\"token string\">\")\"</span><span class=\"token operator\">&gt;</span> #<span class=\"token punctuation\">{<!-- --></span>roleMap<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>foreach<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p>在测试类MyBatisTest中，编写测试方法findByMapTest()，用于批量查询客户信息。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findByMapTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MyBatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> ids<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ids<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> conditionMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        conditionMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>“id<span class=\"token string\">\",ids); conditionMap.put(\"</span>jobs<span class=\"token string\">\",\"</span>teacher\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">&gt;</span></span> customers <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.mapper\"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\".CustomerMapper.findByMap\"</span><span class=\"token punctuation\">,</span> conditionMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span> customer <span class=\"token operator\">:</span> customers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n       session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>执行MyBatisTest测试类的findByMapTest()方法，控制台会输出结果。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0685ef5d15f648889d24426515d1e937.png\"/></p>\n<h4><a id=\"5__228\"></a>5 案例：学生信息查询系统</h4>\n<h5><a id=\"51__229\"></a>5.1 需求</h5>\n<blockquote>\n<p><strong>多条件查询</strong><br/> 当用户输入的学生姓名不为空，则只根据学生姓名进行学生信息的查询；<br/> 当用户输入的学生姓名为空，而学生专业不为空，则只根据学生专业进行学生的查询；<br/> <strong>单条件查询</strong><br/> 查询出所有id值小于5的学生的信息；</p>\n</blockquote>\n<h5><a id=\"52__236\"></a>5.2 项目搭建</h5>\n<blockquote>\n<p>创建一个名称为mybatis-demo03的项目</p>\n</blockquote>\n<h5><a id=\"53__238\"></a>5.3 数据准备</h5>\n<blockquote>\n<p>在名称为mybatis的数据库中，创建一个dm_student表，并插入几条测试数据。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">USE</span> mybatis<span class=\"token punctuation\">;</span>\nCREATE <span class=\"token class-name\">TABLE</span> <span class=\"token function\">dm_student</span><span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> PRIMARY <span class=\"token class-name\">KEY</span> AUTO_INCREMENT<span class=\"token punctuation\">,</span>\n    name <span class=\"token function\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n    major <span class=\"token function\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    \n    sno <span class=\"token function\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    # 插入<span class=\"token number\">7</span>条数据，其他省略\nINSERT INTO dm_student VALUES <span class=\"token punctuation\">(</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'数学'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'10001'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"54_POJO_251\"></a>5.4 POJO类准备</h5>\n<blockquote>\n<p>创建持久化类Student，在类中声明id、name、major和sno属性，以及属性对应的getter/setter方法。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">// 定义变量主键id，姓名name，专业major，学号sno</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> major<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sno<span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">// 省略getter/setter方法    </span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> “<span class=\"token class-name\">Student</span><span class=\"token punctuation\">{<!-- --></span>” <span class=\"token operator\">+</span> “id<span class=\"token operator\">=</span>” <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> “<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>‘” <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> “<span class=\"token punctuation\">,</span>           major<span class=\"token operator\">=</span><span class=\"token string\">\" + major  + \"</span><span class=\"token punctuation\">,</span> sno<span class=\"token operator\">=</span>\" <span class=\"token operator\">+</span> sno <span class=\"token operator\">+</span> <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"55__266\"></a>5.5 创建映射文件</h5>\n<blockquote>\n<p>创建映射文件StudentMapper.xml，编写根据学生姓名和专业组合成的条件查询学生信息的动态SQL。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span>mapper namespace<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.mapper.StudentMapper\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span>“findStudentByNameAndMajor” parameterType<span class=\"token operator\">=</span>“<span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span>Student</span>” resultType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Student\"</span><span class=\"token operator\">&gt;</span>\n        select <span class=\"token operator\">*</span> from dm_student where <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>choose<span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token operator\">&lt;</span>when test<span class=\"token operator\">=</span><span class=\"token string\">\"name !=null and name !=''\"</span><span class=\"token operator\">&gt;</span>\n                and name like <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token char\">'%'</span><span class=\"token punctuation\">,</span>#<span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>when<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>when test<span class=\"token operator\">=</span><span class=\"token string\">\"major !=null and major !=''\"</span><span class=\"token operator\">&gt;</span> and major<span class=\"token operator\">=</span> #<span class=\"token punctuation\">{<!-- --></span>major<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>when<span class=\"token operator\">&gt;</span>\n       <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>otherwise<span class=\"token punctuation\">&gt;</span></span> and sno is not <span class=\"token keyword\">null</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>otherwise<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>choose<span class=\"token operator\">&gt;</span> \n   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>mapper<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h5><a id=\"56_mybatisconfigxml_282\"></a>5.6 修改mybatis-config.xml核心配置文件</h5>\n<blockquote>\n<p>在mybatis-config.xml映射文件的元素下添加StudentMapper.xml映射文件路径的配置，用于将StudentMapper.xml映射文件加载到程序中。具体配置代码如下。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span>mapper resource<span class=\"token operator\">=</span><span class=\"token string\">\"com/itheima/mapper/StudentMapper.xml\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h5><a id=\"57_MyBatisUtils_290\"></a>5.7 编写MyBatisUtils工具类</h5>\n<blockquote>\n<p>创建MyBatisUtils工具类，该类用于封装读取配置文件信息的代码。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisUtils</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{<!-- --></span>\t \n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Reader</span> reader <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsReader</span><span class=\"token punctuation\">(</span>“mybatis<span class=\"token operator\">-</span>config<span class=\"token punctuation\">.</span>xml”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t                           <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> \t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SqlSession</span> <span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token keyword\">return</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"58__305\"></a>5.8 编写测试方法</h5>\n<blockquote>\n<p>在测试类MyBatisTest中，编写测试方法findStudentByNameOrMajorTest()，该方法用于根据学生姓名或专业查询学生信息。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findStudentByNameOrMajorTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">SqlSession</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">MyBatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Student</span> student<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setMajor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.mapper\"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\".StudentMapper.findStudentByNameAndMajor\"</span><span class=\"token punctuation\">,</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student2 <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"59__322\"></a>5.9 查看运行结果</h5>\n<blockquote>\n<p>执行测试类MyBatisTest的findStudentByNameOrMajorTest()方法，控制台会输出结果。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\80b0649fab284cd2adabbb5a3cfe3f7b.png\"/></p>\n</blockquote>\n<h5><a id=\"510__328\"></a>5.10 多条件查询案例结果分析</h5>\n<blockquote>\n<p>由输出结果分析可知，在查询学生信息时，虽然同时传入了姓名和专业两个查询条件，但MyBatis所生成的SQL只是动态组装了学生姓名条件进行查询。如果将案例代码中的student.setName(“张三”)删除或者注释掉，使SQL只按专业进行查询。再次执行findStudentByNameOrMajorTest()方法，MyBatis生成的SQL会组装学生职业进行条件查询，同样查询出了学生信息。如果学生姓名和专业都为空，MyBatis的SQL便会组装元素中的SQL片段进行条件查询。</p>\n</blockquote>\n<h5><a id=\"511__331\"></a>5.11 修改映射文件</h5>\n<blockquote>\n<p>在映射文件StudentMapper.xml中的元素下，编写查询所有id值小于5的学生信息的动态SQL。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"findByList\"</span> parameterType<span class=\"token operator\">=</span><span class=\"token string\">\"java.util.List\"</span>\n        resultType<span class=\"token operator\">=</span><span class=\"token string\">\"com.itheima.pojo.Student\"</span><span class=\"token operator\">&gt;</span>\n    \t\tselect <span class=\"token operator\">*</span> from dm_student where id in\n    <span class=\"token operator\">&lt;</span>foreach item<span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span> index<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span> collection<span class=\"token operator\">=</span><span class=\"token string\">\"list\"</span>\n             <span class=\"token keyword\">open</span><span class=\"token operator\">=</span><span class=\"token string\">\"(\"</span> separator<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span> close<span class=\"token operator\">=</span><span class=\"token string\">\")\"</span><span class=\"token operator\">&gt;</span>\n        #<span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>foreach<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h5><a id=\"512__345\"></a>5.12 编写测试方法</h5>\n<blockquote>\n<p>在测试类MyBatisTest中，编写测试方法findByListTest()。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findByListTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MyBatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> ids<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\tids<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima.mapper\"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\".StudentMapper.findByList\"</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}