{"blogid": "124348708", "writerAge": "码龄3年", "writerBlogNum": "21", "writerCollect": "22", "writerComment": "0", "writerFan": "4", "writerGrade": "2级", "writerIntegral": "222", "writerName": "妮妮学代码", "writerProfileAdress": "writer_image\\profile_124348708.jpg", "writerRankTotal": "96595", "writerRankWeekly": "542231", "writerThumb": "6", "writerVisitNum": "12186", "blog_read_count": "1311", "blog_time": "已于 2022-04-24 09:06:22 修改", "blog_title": "C#GetHashCode()方法的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"GetHashCode_0\"></a>GetHashCode()方法</h1>\n<h1><a id=\"_1\"></a>问题描述</h1>\n<p>往往我们会看到Equals（）与GetHashCode（）方法体一起使用，但对于为什么要使用却是迷迷糊糊，很多时候都是套用别人的，现在我就具体写写我的一些看法，如有写得不好的地方，请给予指正！</p>\n<p>例如：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\87f70ec405344435bcf9d67808ef627a.png\"/></p>\n<pre><code> public class DComparer : IEqualityComparer&lt;double&gt; \n {\n public bool Equals(double b1, double b2)\n        {\n            return (Math.Abs(b1 - b2) &lt; CommonData.modifyControl); //去重\n        }\n        public int GetHashCode(double b)\n        {\n            return b.ToString().GetHashCode();\n        }\n        }\n</code></pre>\n<p>解析：上述代码中可理解为如果两个Equals的值b1和b2返回的true，并且GetHashCode返回相同的哈希码,则认为两个对象相等；如果如果两个对象的比较结果不相等，则这两个对象的 GetHashCode 方法不一定返回不同的值。</p>\n<p>对于Equals()具有以下行为:<br/> 如果实例是引用类型，则只有引用相同时， Equals才会返回true。<br/> 如果实例是值类型，则仅当类型和值相同时， Equals才会返回true。</p>\n<p>对于GetHashCode()的具有以下行为：<br/> 1.一个对象的 GetHashCode 方法必须总是返回同一个哈希代码，但前提是没有修改过对象状态，对象状态用来确定对象的 Equals 方法的返回值。<br/> 2.GetHashCode方法返回的哈希码能作为全局唯一的标识，但是值类型基类的GetHashCode方法则使用了反射，效率也比较低。<br/> 3.如果两个对象根据 Equals 方法比较不相等时，那么调用这两个对象中任意一个对象的 GetHashCode 方法，不一同的整数。但不同的对象，产生不同整数，有可能提高散列表的性能</p>\n<p>注意：对于IEqualityComparer接口 是因为我们使用了Linq操作我们自定义的对像数组时，我们会发现有些方法直接使用的话根本不起作用，我们自定义的对象的比较，我们必须实现IEqualityComparer接口来判断两个对象的相等性。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}