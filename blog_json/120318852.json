{"blogid": "120318852", "writerAge": "码龄9年", "writerBlogNum": "99", "writerCollect": "472", "writerComment": "98", "writerFan": "56", "writerGrade": "5级", "writerIntegral": "3082", "writerName": "潘高", "writerProfileAdress": "writer_image\\profile_120318852.jpg", "writerRankTotal": "10637", "writerRankWeekly": "44290", "writerThumb": "234", "writerVisitNum": "350988", "blog_read_count": "9692", "blog_time": "于 2021-09-15 22:46:24 发布", "blog_title": "跨域问题的4种解决方案", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>更多内容，请访问我的 <a href=\"https://blog.pangao.vip/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%844%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/\">个人博客</a>。</p>\n<hr/>\n<h3><a id=\"_5\"></a>前言</h3>\n<p>难以置信，我居然被跨域问题折磨了一上午。相信很多程序员都遇到过跨域问题，当然，解决方案也有很多种。但我今天尝试了无数种办法，依旧没有解决。直到最后我媳妇儿给了我个提示，会不会跨域问题只是表象，真正的bug在其他地方。后来，经过我仔细排查，终于发现原来是PhalApi框架中的一个小问题，引发了跨域报错（文末再说PhalApi框架中的问题是啥）。那我也借这个机会，来和大伙聊聊啥是跨域问题，和有哪些常见的解决方案。</p>\n<h3><a id=\"_10\"></a>什么是跨域</h3>\n<p>什么是快乐星球，呸，什么是跨域呢？</p>\n<p>简单来讲，跨域是指从一个域名的网页去请求另一个域名的资源。比如从百度(baidu.com)页面去请求我的博客(blog.pangao.vip)的资源。但由于有<strong>同源策略</strong>的关系，一般是不允许这么直接访问的。</p>\n<h3><a id=\"_17\"></a>什么是同源策略</h3>\n<p>一言蔽之，同源就是协议、域名和端口都相同。</p>\n<table><thead><tr><th>URL1</th><th>URL2</th><th>说明</th><th>是否同源</th></tr></thead><tbody><tr><td>http://blog.pangao.vip/a.js</td><td>http://blog.pangao.vip/123/b.js</td><td>协议、域名、端口均相同</td><td>同源</td></tr><tr><td>http://blog.pangao.vip/a.js</td><td>https://blog.pangao.vip/b.js</td><td>协议不同，域名和端口相同</td><td>非同源</td></tr><tr><td>http://blog.pangao.vip/a.js</td><td>http://pangao.vip/b.js</td><td>域名不同，协议和端口相同</td><td>非同源</td></tr><tr><td>http://blog.pangao.vip:80/a.js</td><td>http://blog.pangao.vip:8080/b.js</td><td>端口不同，域名和协议和相同</td><td>非同源</td></tr></tbody></table>\n<h3><a id=\"_30\"></a>为什么要有同源策略</h3>\n<p>试想，如果你刚刚在网银输入账号密码，查看了自己还有1万块钱，紧接着访问一些不规矩的网站，这个网站可以访问刚刚的网银站点，并且获取账号密码，那后果可想而知。所以，从安全的角度来讲，同源策略是有利于保护网站信息的。</p>\n<h3><a id=\"_35\"></a>为什么要跨域</h3>\n<p>然而，有一些情况下，我们是需要跨域访问的。比如，程序员开发网站，就有可能需要在本地访问服务器的数据。再比如某公司的A页面(a.pangao.vip)有可能需要获取B页面(b.pangao.vip)。</p>\n<h3><a id=\"4_40\"></a>跨域问题的4种解决方案</h3>\n<h4><a id=\"1_42\"></a>1、浏览器插件</h4>\n<p>谷歌浏览器有一款允许跨域的插件 <strong>Allow CORS: Access-Control-Allow-Origin</strong>。这款插件可以在web应用程序中轻松执行跨域Ajax请求。请注意，将加载项添加到浏览器时，默认情况下它处于非活动状态（工具栏图标为灰色C字母）。如果要激活加载项，请按一下工具栏上的图标。图标将变为橙色C字母。</p>\n<p>如果你没有梯子，谷歌打不开，那么请试试这个<a href=\"https://www.extfans.com/productivity/lhobafahddgcelffkeicbaginigeejlf/\">Allow CORS: Access-Control-Allow-Origin </a>。在第三方网站下载插件，然后离线安装到谷歌浏览器。</p>\n<h4><a id=\"2web_47\"></a>2、web服务器软件</h4>\n<p>以 <strong>Nginx</strong> 为例，只需要在Nginx的配置文件中配置以下参数：</p>\n<pre><code>location / {  \n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\n\n    if ($request_method = 'OPTIONS') {\n        return 204;\n    }\n} \n</code></pre>\n<h4><a id=\"3_62\"></a>3、后端框架操作</h4>\n<p>以 <strong>PHP</strong> 为例，只需要在文件开头添加如下代码即可：</p>\n<pre><code>header('Access-Control-Allow-Origin:*');\nheader('Access-Control-Allow-Methods:OPTIONS, GET, POST');\nheader('Access-Control-Allow-Headers:x-requested-with');\n\n</code></pre>\n<p>由于我使用的是 <a href=\"https://www.phalapi.net\">PhalApi框架</a>，按照这个<a href=\"https://github.com/gongshunkai/phalapi-cors\">教程</a>操作，就可以很容易的解决跨域问题。</p>\n<p><img alt=\"image\" src=\"image\\7e82c579341e147331e137f5ceb569f1.png\"/></p>\n<h4><a id=\"4_75\"></a>4、前端框架操作</h4>\n<p>以 <strong>Vue</strong> 为例，修改 vue.config.js 文件如下：</p>\n<pre><code>devServer: {\n    open: true,\n    host: 'localhost',\n    port: 8080,\n    overlay: {\n        warnings: false,\n        errors: true\n    },\n    proxy: {\n        '/api': {\n            target: 'http://blog.pangao.vip',\n            ws: true,\n            changOrigin: true,\n            pathRewrite: {\n            '^/api': ''\n            }\n        }\n    }\n}\n</code></pre>\n<p>在需要用到 <code>http://blog.pangao.vip</code> 的地方，均用 <code>api</code> 替代，比如修改 .env.development 文件如下：</p>\n<pre><code>VUE_APP_BASE_API = 'api'\n</code></pre>\n<h3><a id=\"_105\"></a>后记</h3>\n<p>最后，再来说说PhalApi框架中的问题。用过PhalApi框架的朋友肯定都知道，url路由访问方式是：</p>\n<pre><code>http://dev.phalapi.net/?service=App.Usre.Login\n</code></pre>\n<p>但由于某些原因，我需要以以下方式访问：</p>\n<pre><code>http://dev.phalapi.net/App/User/Login\n</code></pre>\n<p>当然，PhalApi框架官网也是写得很清楚需要做哪些操作，以达到这种效果。结果我忘记设置了。</p>\n<p><img alt=\"image\" src=\"image\\6e8d5c645d1350a971bdc102c640873c.png\"/></p>\n<p><img alt=\"image\" src=\"image\\8e532ea3a194e9f0fd77dd050ee84493.png\"/></p>\n<h3><a id=\"_124\"></a>结尾</h3>\n<p>媳妇说一就是一，事业发达开飞机；<br/> 媳妇说五就是五，这样才能开路虎。</p>\n<hr/>\n<p>更多编程教学请关注公众号：<strong>潘高陪你学编程</strong></p>\n<p><img alt=\"image\" src=\"image\\75e3bc61c38943e31b50af58c089bec8.png\"/></p>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}