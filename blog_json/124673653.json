{"blogid": "124673653", "writerAge": "码龄4年", "writerBlogNum": "29", "writerCollect": "68", "writerComment": "8", "writerFan": "1140", "writerGrade": "2级", "writerIntegral": "333", "writerName": "了不起的小瑜儿", "writerProfileAdress": "writer_image\\profile_124673653.jpg", "writerRankTotal": "44439", "writerRankWeekly": "4077", "writerThumb": "37", "writerVisitNum": "10738", "blog_read_count": "3917", "blog_time": "已于 2022-06-28 16:59:02 修改", "blog_title": "JavascriptACM模式牛客输入输出", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>JavascriptACM模式牛客输入输出</h3>\n<ul><li><ul><li><ul><li><a href=\"#JavascriptACM_2\">JavascriptACM模式输入输出</a></li></ul>\n</li><li><a href=\"#JavascriptV8_6\">Javascript(V8)</a></li><li><ul><li><a href=\"#_14\">处理单行输入</a></li><li><a href=\"#_65\">处理多行输入</a></li><li><ul><li><a href=\"#_69\">多行输入且多行输出</a></li><li><a href=\"#_109\">输入结果为矩阵</a></li></ul>\n</li></ul>\n</li><li><a href=\"#JavascriptNode_140\">Javascript(Node)</a></li><li><ul><li><a href=\"#_144\">处理单行输入</a></li><li><a href=\"#_170\">处理多行输入</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"JavascriptACM_2\"></a>JavascriptACM模式输入输出</h3>\n<p>在机试时往往都需要用ACM模式，也就是需要自己处理输入和输出（注意：力扣为核心模式）。Javascript主要有Javascript(V8)和Javascript(Node）两种，下面将分别结合具体实列进行演示。</p>\n<h2><a id=\"JavascriptV8_6\"></a>Javascript(V8)</h2>\n<p>V8主要是用readline()来读取输入，但是需要注意的是这个值是字符串，有时可能需要转换成数值（根据题目要求）。</p>\n<p><strong>由于每次readline()就会读取一行代码，所以如果输入的行数不多，其实可以多次readline()。</strong></p>\n<h3><a id=\"_14\"></a>处理单行输入</h3>\n<p>对于只有一行输入，我们直接用<code>let line = readline();</code>即可。</p>\n<p>我们以牛客华为<a href=\"https://www.nowcoder.com/practice/22948c2cad484e0291350abad86136c3?tpId=37&amp;tqId=21331&amp;rp=1&amp;ru=/exam/oj&amp;qru=/exam/oj&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26pageSize%3D50%26search%3D%25E6%25B1%2582%25E6%259C%2580%25E5%25B0%258F%25E5%2585%25AC%25E5%2580%258D%25E6%2595%25B0%26tab%3D%25E5%2590%258D%25E4%25BC%2581%25E7%25AC%2594%25E8%25AF%2595%25E7%259C%259F%25E9%25A2%2598%26topicId%3D37&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=%E6%B1%82%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0\">真题HJ108</a>为例</p>\n<p>正整数A和正整数B 的最小公倍数是指 能被A和B整除的最小的正整数值，设计一个算法，求输入A和B的最小公倍数。</p>\n<p><strong>输入两个正整数A和B</strong>，如：</p>\n<pre><code class=\"prism language-js\"><span class=\"token number\">5</span>  <span class=\"token number\">7</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> line <span class=\"token operator\">=</span> <span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> nums <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span>data <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">%</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        res <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>也可以将解题<strong>核心函数</strong>放入函数，函数内的写法就和力扣的一样。</p>\n<p><strong>这里以求a+b的和为例</strong></p>\n<p>输入</p>\n<pre><code class=\"prism language-js\"><span class=\"token number\">1</span>  <span class=\"token number\">5</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>line<span class=\"token operator\">=</span><span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">var</span> lines <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">//.map(Number)可以直接将字符串数组变为数字数组</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_65\"></a>处理多行输入</h3>\n<h4><a id=\"_69\"></a>多行输入且多行输出</h4>\n<p>这里我们以牛客上华为<a href=\"https://www.nowcoder.com/practice/3245215fffb84b7b81285493eae92ff0?tpId=37&amp;tqId=21226&amp;rp=1&amp;ru=/exam/oj&amp;qru=/exam/oj&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26pageSize%3D50%26search%3D%25E6%2598%258E%25E6%2598%258E%25E7%259A%2584%25E9%259A%258F%25E6%259C%25BA%25E6%2595%25B0%26tab%3D%25E5%2590%258D%25E4%25BC%2581%25E7%25AC%2594%25E8%25AF%2595%25E7%259C%259F%25E9%25A2%2598%26topicId%3D37&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=%E6%98%8E%E6%98%8E%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0\">HJ3明明的随机数</a>为例</p>\n<p>明明生成了N个1到500之间的随机整数。请你删去其中重复的数字，即相同的数字只保留一个，把其余相同的数去掉，然后再把这些数从小到大排序，按照排好的顺序输出。</p>\n<p>数据范围： 1 \\le n \\le 1000 \\1≤<em>n</em>≤1000 ，输入的数字大小满足 1 \\le val \\le 500 \\1≤<em>v<strong>a</strong>l</em>≤500</p>\n<p>输入描述：</p>\n<p>第一行先输入随机整数的个数 N 。 接下来的 N 行每行输入一个整数，代表明明生成的随机数。如：</p>\n<pre><code class=\"prism language-js\"><span class=\"token number\">3</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">1</span>\n</code></pre>\n<p>输出描述：</p>\n<p>输出多行，表示输入数据处理后的结果</p>\n<p><strong>具体代码：</strong></p>\n<p>可以看到我们这里用数组inputs来存放输入。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> <span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    line <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//！！！！注意</span>\n    inputs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//多行输出！</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=&gt;</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"_109\"></a>输入结果为矩阵</h4>\n<p>如牛客网华为<a href=\"https://www.nowcoder.com/practice/cf24906056f4488c9ddb132f317e03bc?tpId=37&amp;tqId=21266&amp;rp=1&amp;ru=/exam/oj&amp;qru=/exam/oj&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26pageSize%3D50%26search%3D%25E8%25BF%25B7%25E5%25AE%25AB%25E9%2597%25AE%25E9%25A2%2598%26tab%3D%25E5%2590%258D%25E4%25BC%2581%25E7%25AC%2594%25E8%25AF%2595%25E7%259C%259F%25E9%25A2%2598%26topicId%3D37&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98\">HJ43迷宫问题</a></p>\n<p>输入描述：</p>\n<p>第一行为两个整数，分别表示二维数组的行数和列数。再输入相应的数组。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a134405eb2d341aeab3b10dc24ce8c91.png\"/></p>\n<p><strong>这里只介绍输入的获取</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//矩阵的输入</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> <span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> nums <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读取第一行</span>\n    <span class=\"token keyword\">var</span> row <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//第一行的第一个数为行数</span>\n    <span class=\"token keyword\">var</span> col <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//第一行的第二个数为列数</span>\n    <span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//用于存放矩阵</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> mapline <span class=\"token operator\">=</span> <span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>mapline<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"JavascriptNode_140\"></a>Javascript(Node)</h2>\n<p>华为只可以采用Javascript(Node)，所以如果是要做华为机试的同学一定要学会Javascript(Node)如何进行输入输出。</p>\n<h3><a id=\"_144\"></a>处理单行输入</h3>\n<p>我们还是以求a+b为例</p>\n<p>输入：</p>\n<pre><code class=\"prism language-js\"><span class=\"token number\">1</span>  <span class=\"token number\">5</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readline'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 创建读取行接口对象</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">监听换行，接受数据</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//line为输入的单行字符串，split函数--通过空格将该行数据转换为数组。</span>\n  <span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n <span class=\"token comment\">//数组arr的每一项都是字符串格式，如果我们需要整型，则需要parseInt将其转换为数字</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_170\"></a>处理多行输入</h3>\n<p>通用模板</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readline'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inputArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存放输入的数据</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//line是输入的每一行，为字符串格式</span>\n    inputArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将输入流保存到inputArr中（注意为字符串数组）</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>inputArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//调用函数并输出</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//解决函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\txxxxxxxx\n\t<span class=\"token keyword\">return</span> xx\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}