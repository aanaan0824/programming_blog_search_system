{"blogid": "123114227", "writerAge": "码龄4年", "writerBlogNum": "12", "writerCollect": "109", "writerComment": "0", "writerFan": "5", "writerGrade": "2级", "writerIntegral": "142", "writerName": "kykangyuky", "writerProfileAdress": "writer_image\\profile_123114227.jpg", "writerRankTotal": "164660", "writerRankWeekly": "317313", "writerThumb": "20", "writerVisitNum": "16718", "blog_read_count": "13884", "blog_time": "于 2022-02-24 16:07:25 发布", "blog_title": "Spring中bean的生命周期", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"流程\" src=\"image\\cfbab93142834a37803ba692fcd8f0fa.png\"/></p>\n<ol><li> <p>Spring中的bean的生命周期主要包含四个阶段：实例化Bean --＞ Bean属性填充 --＞ 初始化Bean --＞销毁Bean</p> </li><li> <p>首先是实例化Bean，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚末初始化的依赖时，容器就会调用doCreateBean()方法进行实例化，实际上就是通过反射的方式创建出一个bean对象</p> </li><li> <p>Bean实例创建出来后，接着就是给这个Bean对象进行属性填充，也就是注入这个Bean依赖的其它bean对象</p> </li><li> <p>属性填充完成后，进行初始化Bean操作，初始化阶段又可以分为几个步骤：</p>\n<ol><li> <p>执行Aware接口的方法</p>\n<blockquote>\n<p>Spring会检测该对象是否实现了<strong>xxxAware</strong>接口，通过Aware类型的接口，可以让我们拿到Spring容器的些资源。如实现<br/> BeanNameAware接口可以获取到BeanName，实现BeanFactoryAware接口可以获取到工厂对象BeanFactory等</p>\n</blockquote> </li><li> <p>执行BeanPostProcessor的前置处理方法postProcessBeforelnitialization()，对Bean进行一些自定义的前置处理</p> </li><li> <p>判断Bean是否实现了InitializingBean接口，如果实现了，将会执行lnitializingBean的afeterPropertiesSet()初始化方法；</p> </li><li> <p>执行用户自定义的初始化方法，如init-method等；</p> </li><li> <p>执行BeanPostProcessor的后置处理方法postProcessAfterinitialization()</p> </li></ol> </li><li> <p>初始化完成后，Bean就成功创建了，之后就可以使用这个Bean， 当Bean不再需要时，会进行销毁操作，</p>\n<ol><li>首先判断Bean是否实现了DestructionAwareBeanPostProcessor接口，如果实现了，则会执行DestructionAwareBeanPostProcessor后置处理器的销毁回调方法</li><li>其次会判断Bean是否实现了DisposableBean接口，如果实现了将会调用其实现的destroy()方法</li><li>最后判断这个Bean是否配置了dlestroy-method等自定义的销毁方法，如果有的话，则会自动调用其配置的销毁方法；</li></ol> </li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}