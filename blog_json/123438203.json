{"blogid": "123438203", "writerAge": "码龄3年", "writerBlogNum": "80", "writerCollect": "85", "writerComment": "21", "writerFan": "16", "writerGrade": "4级", "writerIntegral": "1402", "writerName": "whuhewei", "writerProfileAdress": "writer_image\\profile_123438203.jpg", "writerRankTotal": "71245", "writerRankWeekly": "74470", "writerThumb": "120", "writerVisitNum": "77906", "blog_read_count": "3025", "blog_time": "于 2022-03-12 11:41:58 发布", "blog_title": "在Dart中使用FFI调用Rust函数", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"FFI_0\"></a>什么是FFI</h2>\n<p>外部函数接口 (FFI) 是一种机制，通过该机制，以一种编程语言编写的程序可以调用以另一种编程语言编写的服务。当你需要额外的速度🚀或需要使用其他语言的库时，应用FFI会很方便。</p>\n<h2><a id=\"FFI_2\"></a>为什么需要FFI</h2>\n<p>Dart是Flutter底层的语言，Dart引入FFI机制很大程度上是为了帮Flutter在桌面开发领域铺路。<br/> 假设你像我一样是一个懒惰的程序员，并且你现在需要一个库来在你的计算机上播放音乐/音频。不幸的是，Flutter/Dart 中不存在这样的东西，因为它是一个相对年轻的生态系统（语言实际上并不那么年轻）。 那么，我们在这里有什么选择？</p>\n<ul><li>使用C从头开始编写一个库来播放音频文件？No！正如我所说的我是一个懒惰的程序员。</li><li>明智的选择是选择一种以跨平台和丰富的库生态系统而闻名的语言。</li><li>Golang？No… 主要是因为 Golang 没有很多好的存储库来以跨平台方式读取音频文件。那是什么语言呢？</li></ul>\n<p>Rust!<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d1fdfbfcc4734de9a55307eca7e71bce.png\"/></p>\n<h2><a id=\"Rust__Dart_FFI_13\"></a>Rust + Dart FFI</h2>\n<p>下面我们使用Rust的<a href=\"https://crates.io/crates/rodio\">rodio</a>库来播放音频。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\093d89d2baf1427d8704f8ce993764ad.png\"/><br/> 如果你想继续请确保你在电脑上安装了Rust和Flutter。</p>\n<h3><a id=\"Rust_17\"></a>Rust项目</h3>\n<h4><a id=\"1Rust_19\"></a>1.新建一个Rust项目</h4>\n<pre><code class=\"prism language-bash\">cargo new rust_ffi\n</code></pre>\n<p>项目目录如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\880131dfb696486cbd1b7860b0c3587b.png\"/><br/> 此时运行<code>cargo run</code>就可以在控制台打印\"Hello, world!\"了。</p>\n<h4><a id=\"2Cargotoml_27\"></a>2.将音频库添加到Cargo.toml</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token punctuation\">[</span>package<span class=\"token punctuation\">]</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"rust_ffi\"</span>\nversion <span class=\"token operator\">=</span> <span class=\"token string\">\"0.1.0\"</span>\nedition <span class=\"token operator\">=</span> <span class=\"token string\">\"2021\"</span>\n\n# See more keys and their definitions at https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>doc<span class=\"token punctuation\">.</span>rust<span class=\"token operator\">-</span>lang<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>cargo<span class=\"token operator\">/</span>reference<span class=\"token operator\">/</span>manifest<span class=\"token punctuation\">.</span>html\n\n<span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span>\nrodio <span class=\"token operator\">=</span> <span class=\"token string\">\"0.15.0\"</span> #added rodio library\n</code></pre>\n<p>让我们播放一段音频试试看！根据Radio的文档，播放一个beep.wav：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> rodio<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span>source<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Source<span class=\"token punctuation\">,</span> Decoder<span class=\"token punctuation\">,</span> OutputStream<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>fs<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>File<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>io<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>BufReader<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">play_once</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Get a output stream handle to the default physical sound device</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>_stream<span class=\"token punctuation\">,</span> stream_handle<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> OutputStream<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">try_default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Load a sound from a file, using a path relative to Cargo.toml</span>\n    <span class=\"token keyword\">let</span> file <span class=\"token operator\">=</span> BufReader<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Decode that sound file into a source</span>\n    <span class=\"token keyword\">let</span> source <span class=\"token operator\">=</span> Decoder<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Play the sound directly on the device</span>\n    stream_handle<span class=\"token punctuation\">.</span><span class=\"token function\">play_raw</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">convert_samples</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The sound plays in a separate audio thread,</span>\n    <span class=\"token comment\">// so we need to keep the main thread alive while it's playing.</span>\n    std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>thread<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>time<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Duration<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">play_once</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beep.wav\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时运行<code>cargo run</code>你应该能听到音频在播放。</p>\n<h4><a id=\"3Rust_66\"></a>3.重构Rust项目</h4>\n<p>首先把我们的项目从一个应用转为一个库，将<code>main.rs</code>改写成<code>lib.rs</code>。Cargo.toml中添加：</p>\n<pre><code class=\"prism language-rust\"># 省略<span class=\"token punctuation\">...</span>\n\n<span class=\"token punctuation\">[</span>lib<span class=\"token punctuation\">]</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"play_once\"</span>\n<span class=\"token keyword\">crate</span><span class=\"token operator\">-</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">]</span> #dynamic library\n</code></pre>\n<p>接着导出C API，将lib.rs改造一下：</p>\n<pre><code class=\"prism language-rust\"># 省略<span class=\"token punctuation\">...</span>\n\n<span class=\"token keyword\">use</span> std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>ffi<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>CStr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>os<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>raw<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>c_char<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">play_once</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> c_char<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// here is the trick</span>\n    <span class=\"token keyword\">let</span> cstr <span class=\"token operator\">=</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{<!-- --></span> CStr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">from_ptr</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// just two lines changed</span>\n    <span class=\"token comment\">// Get a output stream handle to the default physical sound device</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>_stream<span class=\"token punctuation\">,</span> stream_handle<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> OutputStream<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">try_default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Load a sound from a file, using a path relative to Cargo.toml</span>\n    <span class=\"token keyword\">let</span> file <span class=\"token operator\">=</span> BufReader<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cstr<span class=\"token punctuation\">.</span><span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Decode that sound file into a source</span>\n    <span class=\"token keyword\">let</span> source <span class=\"token operator\">=</span> Decoder<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Play the sound directly on the device</span>\n    stream_handle<span class=\"token punctuation\">.</span><span class=\"token function\">play_raw</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">convert_samples</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The sound plays in a separate audio thread,</span>\n    <span class=\"token comment\">// so we need to keep the main thread alive while it's playing.</span>\n    std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>thread<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>time<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Duration<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时运行<code>cargo build</code>，如果你是Mac系统你应该能在target/debug目录下找到<code>libplay_once.dylib</code>动态库。<br/> 至此，我们已经完成了Rust部分的准备工作！我们准备了一个.dylib动态库供后续Dart调用，该库的作用是接受一个字符串格式的音频文件名，并播放该音频文件。</p>\n<h3><a id=\"Dart_103\"></a>Dart项目</h3>\n<h4><a id=\"1Dart_104\"></a>1.新建一个Dart项目</h4>\n<pre><code class=\"prism language-bash\">dart create dart_ffi\n</code></pre>\n<p>项目目录如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4ef0a2cc85a14a76adee325c954100a0.png\"/></p>\n<p>此时运行<code>dart run</code>就可以在控制台打印\"Hello, world!\"了。</p>\n<h4><a id=\"2Dart_112\"></a>2.重构Dart项目</h4>\n<pre><code class=\"prism language-rust\">import <span class=\"token lifetime-annotation symbol\">'dart:ffi</span>' <span class=\"token keyword\">as</span> ffi<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Utilities for working with ffi like String</span>\nimport <span class=\"token lifetime-annotation symbol\">'package:ffi/ffi.dart</span><span class=\"token lifetime-annotation symbol\">';</span>\n\n<span class=\"token comment\">// Create a typedef with the FFI type signature of the C function.</span>\n<span class=\"token comment\">// Commonly used types defined by dart:ffi library include Double, Int32, NativeFunction, Pointer, Struct, Uint8, and Void.</span>\ntypedef play_once_func <span class=\"token operator\">=</span> ffi<span class=\"token punctuation\">.</span>Void <span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>ffi<span class=\"token punctuation\">.</span>Pointer<span class=\"token operator\">&lt;</span>Utf8<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a typedef for the variable that you’ll use when calling the C function.</span>\ntypedef PlayOnce <span class=\"token operator\">=</span> void <span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>ffi<span class=\"token punctuation\">.</span>Pointer<span class=\"token operator\">&lt;</span>Utf8<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvoid <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  ffi<span class=\"token punctuation\">.</span>DynamicLibrary dylib <span class=\"token operator\">=</span> ffi<span class=\"token punctuation\">.</span>DynamicLibrary<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token lifetime-annotation symbol\">'libplay_once.dylib</span><span class=\"token lifetime-annotation symbol\">');</span>\n\n  <span class=\"token comment\">// Get a reference to the C function, and put it into a variable. This code uses the typedefs defined in steps 2 and 3, along with the dynamic library variable from step 4.</span>\n  <span class=\"token keyword\">final</span> PlayOnce play_once <span class=\"token operator\">=</span> dylib\n      <span class=\"token punctuation\">.</span>lookup<span class=\"token operator\">&lt;</span>ffi<span class=\"token punctuation\">.</span>NativeFunction<span class=\"token operator\">&lt;</span>play_once_func<span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span><span class=\"token lifetime-annotation symbol\">'play_once</span><span class=\"token lifetime-annotation symbol\">')</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">asFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> String file_name <span class=\"token operator\">=</span> <span class=\"token lifetime-annotation symbol\">'beep.wav</span><span class=\"token lifetime-annotation symbol\">';</span>\n\n  <span class=\"token comment\">// Convert a Dart [String] to a Utf8-encoded null-terminated C string.</span>\n  <span class=\"token keyword\">final</span> ffi<span class=\"token punctuation\">.</span>Pointer<span class=\"token operator\">&lt;</span>Utf8<span class=\"token operator\">&gt;</span> charPointer <span class=\"token operator\">=</span> file_name<span class=\"token punctuation\">.</span><span class=\"token function\">toNativeUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// // Call the C function.</span>\n  <span class=\"token function\">play_once</span><span class=\"token punctuation\">(</span>charPointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>与此同时，运行<code>dart pub add ffi</code>安装ffi模块，将之前构建好的.dylib动态库和.wav音频文件拷贝到Dart项目的根目录。<br/> 此时运行<code>dart run</code>你就可以播放音频文件了。<br/> 至此，我们完成了Dart项目中通过FFI机制调用Rust模块并播放音乐的功能！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}