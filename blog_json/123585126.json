{"blogid": "123585126", "writerAge": "码龄3年", "writerBlogNum": "45", "writerCollect": "441", "writerComment": "90", "writerFan": "6660", "writerGrade": "3级", "writerIntegral": "675", "writerName": "lw只吃亿点.", "writerProfileAdress": "writer_image\\profile_123585126.jpg", "writerRankTotal": "23038", "writerRankWeekly": "771", "writerThumb": "156", "writerVisitNum": "70088", "blog_read_count": "8099", "blog_time": "已于 2022-08-11 23:06:12 修改", "blog_title": "Qt互斥锁(QMutex)的使用、QMutexLocker的使用（含源码+注释）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#QMutexLockerQMutex_1\">一、QMutexLocker和QMutex实现示例图</a></li><li><a href=\"#QMutexQMutexLocker_7\">二、QMutex和QMutexLocker的关系（个人理解）</a></li><li><a href=\"#QMutexQMutexLocker_11\">三、QMutex使用和QMutexLocker使用</a></li><li><ul><li><a href=\"#1QMutex_12\">1.QMutex的使用</a></li><li><a href=\"#2QMutexLocker_25\">2.QMutexLocker的使用</a></li></ul>\n</li><li><a href=\"#QMutexLocker_37\">四、检验QMutexLocker是否将传入的互斥锁锁定</a></li><li><ul><li><a href=\"#1_38\">1.操作解释</a></li><li><a href=\"#2CMoveFuncClassmoveToThreadQMutexLocker_44\">2.CMoveFuncClass（使用moveToThread实现，使用QMutexLocker）</a></li><li><a href=\"#3CThreadQThreadQMutex_108\">3.CThread类（继承QThread实现，单纯使用QMutex）</a></li><li><a href=\"#4CMainWindow_174\">4.CMainWindow调用类</a></li></ul>\n</li><li><a href=\"#_282\">总结</a></li><li><a href=\"#_285\">相关文章</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"QMutexLockerQMutex_1\"></a>一、QMutexLocker和QMutex实现示例图</h1>\n<p>下图为检测QMutexLocker是否上锁成功的示例图（两个线程使用同一个QMutex），源码在文章第四节（源码含详细注释）。<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/b31984ca18ed480c8c558484ddc88cd3.gif#pic_center\"/><br/> 下图为不同QMutex运行时的效果（该图表明两个线程无关，并非sleep影响了另一个线程的运行）<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/d3c3a7a88b6f4267b1d6b279e75ff2f8.gif#pic_center\"/></p>\n<h1><a id=\"QMutexQMutexLocker_7\"></a>二、QMutex和QMutexLocker的关系（个人理解）</h1>\n<p>互斥锁（QMutex）在使用时需要在进入和结束的时候使用对应的函数锁定和解锁。在简单的程序中还好，但是在结构复杂的程序中因为需要手动锁定和解锁，很容易忽略细节而出现问题，于是为了应对这种情况QMutexLocker便诞生了（为了简化简化互斥锁的锁定和解锁）。<br/> QMutexLocker通常创建为局部变量，QMutexLocker在创建时传入一个并未锁定（若是锁定可用relock重新锁定或unlock解锁）的QMutex指针变量，并且会将QMutex变量锁定，在释放时会将QMutex变量解锁。（QMutexLocker创建时将传入的QMutex锁定，释放时将传入的QMutex解锁）</p>\n<h1><a id=\"QMutexQMutexLocker_11\"></a>三、QMutex使用和QMutexLocker使用</h1>\n<h2><a id=\"1QMutex_12\"></a>1.QMutex的使用</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">CThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//互斥锁锁定</span>\n        m_mutex<span class=\"token operator\">-&gt;</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//输出当前线程的线程ID</span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//互斥锁解锁</span>\n        m_mutex<span class=\"token operator\">-&gt;</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2QMutexLocker_25\"></a>2.QMutexLocker的使用</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">CThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//创建QMutexLocker的局部变量，并将类中互斥锁指针传入（此处互斥锁被locker锁定）</span>\n        QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//当locker作用域结束locker将互斥锁解锁</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>通过1、2的代码比较，我们会发现QMutexLocker的代码中没有手动调用锁定和解锁，由此可看出QMutexLocker简化了互斥锁的锁定和解锁</p>\n<h1><a id=\"QMutexLocker_37\"></a>四、检验QMutexLocker是否将传入的互斥锁锁定</h1>\n<h2><a id=\"1_38\"></a>1.操作解释</h2>\n<ol><li>使用两种实现方法完全不同线程测试</li><li>两个线程使用同一个互斥锁</li><li>一个线程使用QMutexLocker一个线程单纯使用QMutex</li></ol>\n<h2><a id=\"2CMoveFuncClassmoveToThreadQMutexLocker_44\"></a>2.CMoveFuncClass（使用moveToThread实现，使用QMutexLocker）</h2>\n<p>CMoveFuncClass.h</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CMOVEFUNCCLASS_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CMOVEFUNCCLASS_H</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QObject&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMutex&gt;</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CMoveFuncClass</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">explicit</span> <span class=\"token function\">CMoveFuncClass</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">CMoveFuncClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setMutex</span><span class=\"token punctuation\">(</span>QMutex <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    QMutex <span class=\"token operator\">*</span> m_mutex<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//定义一个互斥锁变量</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// CMOVEFUNCCLASS_H</span></span>\n</code></pre>\n<p>CMoveFuncClass.cpp</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CMoveFuncClass.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread&gt;</span></span>\n\n<span class=\"token class-name\">CMoveFuncClass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CMoveFuncClass</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">CMoveFuncClass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">CMoveFuncClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">CMoveFuncClass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//创建QMutexLocker的局部变量，并将类中互斥锁指针传入（此处互斥锁被locker锁定）</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我的实现方法为moveToThread\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"开始3秒睡眠\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"使用QMutexLocker\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程ID：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//设置线程睡眠3秒（单位为秒）</span>\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我的实现方法为moveToThread\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"线程运行完成，结束睡眠\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//当locker作用域结束locker将互斥锁解锁</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">CMoveFuncClass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setMutex</span><span class=\"token punctuation\">(</span>QMutex <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    m_mutex <span class=\"token operator\">=</span> mutex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3CThreadQThreadQMutex_108\"></a>3.CThread类（继承QThread实现，单纯使用QMutex）</h2>\n<p>CThread.h</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CTHREAD_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CTHREAD_H</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QObject&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMutex&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QWaitCondition&gt;</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CThread</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QThread</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">explicit</span> <span class=\"token function\">CThread</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">CThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setMutex</span><span class=\"token punctuation\">(</span>QMutex <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    QMutex <span class=\"token operator\">*</span>            m_mutex<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//定义一个线程锁变量</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// CTHREAD_H</span></span>\n</code></pre>\n<p>CThread.cpp</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CThread.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug&gt;</span></span>\n\n<span class=\"token class-name\">CThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CThread</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">CThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">CThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">CThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//互斥锁上锁</span>\n    m_mutex<span class=\"token operator\">-&gt;</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我的实现方法为继承QThread\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"开始3秒睡眠\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"单纯使用QMutex\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程ID：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//设置线程睡眠3秒（单位为秒）</span>\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我的实现方法为继承QThread\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"线程运行完成，结束睡眠\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//互斥锁解锁</span>\n    m_mutex<span class=\"token operator\">-&gt;</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">CThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setMutex</span><span class=\"token punctuation\">(</span>QMutex <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    m_mutex <span class=\"token operator\">=</span> mutex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"4CMainWindow_174\"></a>4.CMainWindow调用类</h2>\n<p>CMainWindow.h</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CMAINWINDOW_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CMAINWINDOW_H</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CThread.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CMoveFuncClass.h\"</span></span>\n\n<span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Q_OBJECT\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">explicit</span> <span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsignals<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">startMoveThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">on_startBtn_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//触发方法二函数的信号</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    Ui<span class=\"token double-colon punctuation\">::</span>CMainWindow <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span>\n\n    CThread         <span class=\"token operator\">*</span>m_cThread<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//方法一指针</span>\n\n    CMoveFuncClass  <span class=\"token operator\">*</span>m_moveFunc<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//方法二指针</span>\n\n    QThread         <span class=\"token operator\">*</span>m_thread<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//方法二所移至的线程指针</span>\n\n    QMutex          <span class=\"token operator\">*</span>m_mutex<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//两个线程使用的线程锁</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// CMAINWINDOW_H</span></span>\n</code></pre>\n<p>CMainWindow.cpp</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CMainWindow.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_CMainWindow.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug&gt;</span></span>\n\n<span class=\"token class-name\">CMainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>CMainWindow<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    ui<span class=\"token operator\">-&gt;</span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/方法一///</span>\n    <span class=\"token comment\">//new出CThread对象</span>\n    m_cThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CThread<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">/方法二///</span>\n    <span class=\"token comment\">//new一个moveToThread的接收线程并启动</span>\n    m_thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QThread<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//new出CMoveFuncClass对象</span>\n    m_thread<span class=\"token operator\">-&gt;</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//一定记得启动，否则运行不了</span>\n    m_moveFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CMoveFuncClass<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//连接相应信号槽</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMainWindow<span class=\"token double-colon punctuation\">::</span>startMoveThread<span class=\"token punctuation\">,</span> m_moveFunc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CMoveFuncClass<span class=\"token double-colon punctuation\">::</span>doSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_thread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QThread<span class=\"token double-colon punctuation\">::</span>finished<span class=\"token punctuation\">,</span> m_moveFunc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QObject<span class=\"token double-colon punctuation\">::</span>deleteLater<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//将对象移至线程</span>\n    m_moveFunc<span class=\"token operator\">-&gt;</span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>m_thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//创建线程共用的互斥锁</span>\n    m_mutex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QMutex<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//下方为m_mutex的地方更改为new QMutex，则能实现第一节，第二张图的效果</span>\n    m_cThread<span class=\"token operator\">-&gt;</span><span class=\"token function\">setMutex</span><span class=\"token punctuation\">(</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_moveFunc<span class=\"token operator\">-&gt;</span><span class=\"token function\">setMutex</span><span class=\"token punctuation\">(</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">CMainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">delete</span> m_mutex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span> m_moveFunc<span class=\"token punctuation\">;</span>\n    m_thread<span class=\"token operator\">-&gt;</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_thread<span class=\"token operator\">-&gt;</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> m_thread<span class=\"token punctuation\">;</span>\n\n    m_cThread<span class=\"token operator\">-&gt;</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_cThread<span class=\"token operator\">-&gt;</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> m_cThread<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_startBtn_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//通过start启动方法一线程</span>\n    m_cThread<span class=\"token operator\">-&gt;</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//发送信号启动方法二线程</span>\n    emit <span class=\"token function\">startMoveThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行上方的代码（第一节，第一张效果图）可看出，使用QMutexLocker的线程首先运行，且代码中无锁定和解锁的操作，但另外一个线程依然等该线程运行完成后运行，由此可看出，使用QMutexLocker是实现了互斥锁的锁定和解锁的。</p>\n<h1><a id=\"_282\"></a>总结</h1>\n<p>QMutexLocker提供的简化互斥锁锁定和解锁的机制在很多时候时蛮方便的，在使用互斥锁的地方使用QMutexLocker会减去许多安全隐患；不过在多线程循环输出ABC的时候好像就不适合该方法。所以使用类似的类还得按情况而定</p>\n<h1><a id=\"_285\"></a>相关文章</h1>\n<p><a href=\"https://blog.csdn.net/wj584652425/article/details/123514850\">启动QThread线程的两种方法（含源码+注释）</a><br/> <a href=\"https://blog.csdn.net/wj584652425/article/details/123562675\">Qt互斥锁(QMutex)、条件变量(QWaitCondition)讲解+QMutex实现多线程循环输出ABC（含源码+注释）</a><br/> <a href=\"https://blog.csdn.net/wj584652425/article/details/123604268\">QSemaphore的使用+QSemaphore实现循环输出ABC（含源码+注释）</a><br/> <a href=\"https://blog.csdn.net/wj584652425/article/details/123624441\">QRunnable线程、QThreadPool（线程池）的使用（含源码+注释）</a><br/> <a href=\"https://blog.csdn.net/wj584652425/article/details/123832801\">Qt读写锁（QReadWriteLock）的使用、读写锁的验证（含源码+注释）</a><br/> <a href=\"https://blog.csdn.net/wj584652425/article/details/123834155\">Qt读写锁（QWriteLocker、QReadLocker）的理解和使用（含部分源码）</a></p>\n<p>友情提示——哪里看不懂可私哦，让我们一起互相进步吧<br/> （创作不易，请留下一个免费的赞叭 谢谢 ^o^/)</p>\n<p>注：文章为作者编程过程中所遇到的问题和总结，内容仅供参考，若有错误欢迎指出。<br/> 注：如有侵权，请联系作者删除</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}