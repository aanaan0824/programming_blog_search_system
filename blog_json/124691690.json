{"blogid": "124691690", "writerAge": "码龄19年", "writerBlogNum": "56", "writerCollect": "26", "writerComment": "15", "writerFan": "28", "writerGrade": "3级", "writerIntegral": "795", "writerName": "Coding到灯火阑珊", "writerProfileAdress": "writer_image\\profile_124691690.jpg", "writerRankTotal": "31430", "writerRankWeekly": "129340", "writerThumb": "74", "writerVisitNum": "55819", "blog_read_count": "1599", "blog_time": "于 2022-05-10 17:05:00 发布", "blog_title": "用Rust实现区块链 - 6 点对点网络(P2P)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>截止到目前，我们在单机上实现了区块链的几乎所有关键特性：随机生成的地址、安全、持久化、工作量证明、UTXO交易。接下来我们将使用rust-libp2p库来实现区块链的p2p网络。</p>\n<p></p>\n<h2><strong>P2P网络</strong></h2>\n<p>P2P 网络拓扑结构有很多种，有些是中心化拓扑，有些是半中心化拓扑，有些是全分布式拓扑结构。</p>\n<p>区块链网络中的全节点就是全分布式拓扑结构，即去中心化的，端到端的网络，节点直接连接到其他节点，它的拓扑结构是扁平的。</p>\n<p>SPV节点(简单支付验证节点)，随机选择一个全节点进行连接，依赖这个全节点来获取数据,更接近半中心化的拓扑结构。</p>\n<p>在这里我们先实现全节点，后面再逐渐完善矿工节点和SPV节点，在本地网络中通过 MDNS 做节点发现，使用 Gossip协议 做消息传播。</p>\n<p></p>\n<h2><strong>数据结构</strong></h2>\n<p><span style=\"color:#6eaad7;\"><strong>Node</strong></span></p>\n<p>Node节点的功能包括启动P2P网络节点的消息监听，处理来自命令行的命令消息及其他节点的请求消息。</p>\n<pre><code class=\"language-rust\">pub struct Node&lt;T = SledDb&gt; {\n    bc: Blockchain&lt;T&gt;,\n    utxos: UTXOSet&lt;T&gt;,\n    msg_receiver: mpsc::UnboundedReceiver&lt;Messages&gt;,\n    swarm: Swarm&lt;BlockchainBehaviour&gt;,\n}</code></pre>\n<ul><li> <p>bc：区块链</p> </li><li> <p>utxos：UTXO集合</p> </li><li> <p>msg_receiver：通道的接收端，接收其他节点的请求消息。</p> </li><li> <p>swarm：rust-libp2p的Swarm</p> </li></ul>\n<p></p>\n<p><span style=\"color:#6eaad7;\"><strong>BlockchainBehaviour</strong></span></p>\n<p>接收到其他节点的请求消息</p>\n<pre><code class=\"language-rust\">#[derive(NetworkBehaviour)]\n#[behaviour(event_process = true)]\npub struct BlockchainBehaviour {\n    pub gossipsub: Gossipsub,\n    pub mdns: Mdns,\n    #[behaviour(ignore)]\n    pub msg_sender: mpsc::UnboundedSender&lt;Messages&gt;,\n}</code></pre>\n<ul><li> <p>gossipsub：使用 Gossip协议 做消息传播</p> </li><li> <p>mdns：节点发现</p> </li><li> <p>msg_sender：接收到其他节点的请求消息后，发送到通道中。</p> </li></ul>\n<p></p>\n<p><span style=\"color:#6eaad7;\"><strong>命令行消息</strong></span></p>\n<pre><code class=\"language-rust\">#[derive(Debug, Serialize, Deserialize)]\npub enum Commands {\n    Genesis(String),\n    Blocks(String),\n    Sync(String),\n    CreateWallet(String),\n    GetAddress(String),\n    Trans {\n        from: String,\n        to: String,\n        amount: String,\n    },\n}</code></pre>\n<ul><li> <p>Genesis：创建区块链</p> </li><li> <p>Blocks：显示区块链信息</p> </li><li> <p>Sync：同步区块</p> </li><li> <p>CreateWallet：创建钱包</p> </li><li> <p>GetAddress：获取地址</p> </li><li> <p>Trans：创建交易</p> </li></ul>\n<p></p>\n<p><span style=\"color:#6eaad7;\"><strong>节点消息</strong></span></p>\n<pre><code class=\"language-rust\">#[derive(Debug, Serialize, Deserialize)]\npub enum Messages {\n    Version {\n        best_height: usize,\n        from_addr: String,\n    },\n    Blocks {\n        blocks: Vec&lt;Block&gt;,\n        height: usize,\n        to_addr: String,\n    },\n    Block {\n        block: Block,\n    }\n}\n</code></pre>\n<ul><li> <p>Version：向其他节点发送本地节点的区块链高度，同步本地节点。</p> </li><li> <p>Blocks：向其他节点发送本地区块链信息。</p> </li><li> <p>Block：向其他节点发送新加入的区块。</p> </li></ul>\n<p></p>\n<h2><strong>消息处理</strong></h2>\n<p>无论是命令行消息，还是节点消息都采用serde_json进行序列化处理。</p>\n<p></p>\n<p><span style=\"color:#6eaad7;\"><strong>创建区块链</strong></span></p>\n<pre><code class=\"language-rust\">Commands::Genesis(addr) =&gt; {\n    if self.bc.get_tip().is_empty() {\n        self.bc.create_genesis_block(addr.as_str());\n        self.utxos.reindex(&amp;self.bc)?;\n        info!(\"Genesis block was created success!\");\n    }else {\n        info!(\"Already exists blockchain, don't need genesis block!\");\n        continue;\n    }\n},</code></pre>\n<p></p>\n<p><span style=\"color:#6eaad7;\"><strong>同步区块</strong></span></p>\n<p>处理命令行的同步命令</p>\n<pre><code class=\"language-rust\">async fn sync(&amp;mut self) -&gt; Result&lt;()&gt; {\n    let version = Messages::Version { \n        best_height: self.bc.get_height(), \n        from_addr: PEER_ID.to_string(),\n    };\n    \n    let line = serde_json::to_vec(&amp;version)?;\n    self.swarm.behaviour_mut().gossipsub\n        .publish(BLOCK_TOPIC.clone(), line).unwrap();\n\n    Ok(())\n}</code></pre>\n<p>节点接收到Version消息，如果本地区块链的高度大于其他节点的高度，则向其发送区块链信息。</p>\n<pre><code class=\"language-rust\">async fn process_version_msg(&amp;mut self, best_height: usize, from_addr: String) -&gt; Result&lt;()&gt; {\n    if self.bc.get_height() &gt; best_height {\n        let blocks = Messages::Blocks { \n            blocks: self.bc.get_blocks(),\n            height: self.bc.get_height(),\n            to_addr: from_addr,\n        };\n        let msg = serde_json::to_vec(&amp;blocks)?;\n        self.swarm.behaviour_mut().gossipsub\n            .publish(BLOCK_TOPIC.clone(), msg).unwrap();\n    }\n    Ok(())\n}</code></pre>\n<p>节点接收到区块链信息后，同步到本地节点。</p>\n<pre><code class=\"language-rust\">async fn process_blocks_msg(&amp;mut self, blocks: Vec&lt;Block&gt;, to_addr: String, height: usize) -&gt; Result&lt;()&gt; {\n    if PEER_ID.to_string() == to_addr &amp;&amp; self.bc.get_height() &lt; height {\n        for block in blocks {\n            self.bc.add_block(block)?;\n        }\n\n        self.utxos.reindex(&amp;self.bc).unwrap();\n    }\n    Ok(())\n}</code></pre>\n<p></p>\n<p><span style=\"color:#6eaad7;\"><strong>创建交易、挖矿</strong></span></p>\n<p>由于是全节点，为了简便，在这里交易的创建与挖矿放在一起处理了。</p>\n<pre><code class=\"language-rust\">async fn mine_block(&amp;mut self, from: &amp;str, to: &amp;str, amount: i32) -&gt; Result&lt;()&gt; {\n    let tx = Transaction::new_utxo(from, to, amount, &amp;self.utxos, &amp;self.bc);\n    let txs = vec![tx];\n    let block = self.bc.mine_block(&amp;txs);\n    self.utxos.reindex(&amp;self.bc).unwrap();\n\n    let b = Messages::Block { block };\n    let line = serde_json::to_vec(&amp;b)?;\n    self.swarm.behaviour_mut().gossipsub\n        .publish(BLOCK_TOPIC.clone(), line).unwrap();        \n    Ok(())\n}</code></pre>\n<p></p>\n<h2><strong>验证</strong></h2>\n<p><span style=\"color:#6eaad7;\"><strong>启动第一个节点</strong></span></p>\n<pre><code class=\"language-rust\">RUST_LOG=info cargo run --quiet  server data\nLocal peer id: PeerId(\"12D3KooWHn6sTgQU7bwKfPQHXi2oo4dDUEneoVFWtfur7bufXuZ7\")\nListening on \"/ip4/127.0.0.1/tcp/53664\"</code></pre>\n<p>执行命令后，可以看到节点已经启动，生成了唯一的节点ID，在本地53664端口监听消息。</p>\n<p></p>\n<p>1，查看区块链信息</p>\n<pre><code class=\"language-rust\">{\"Blocks\":\"\"}\nINFO blockchain_rust_part_6::networks::node: tip: \nINFO blockchain_rust_part_6::networks::node: height: 0</code></pre>\n<p>可以看到这个节点上还没有区块链。</p>\n<p></p>\n<p>2，创建一个用户的钱包地址</p>\n<pre><code class=\"language-rust\">{\"CreateWallet\":\"justin\"} \nINFO blockchain_rust_part_6::networks::node: justin's address is 1KooomKwhgPCfB2YfnKT7yMUxGcVWqS3ns</code></pre>\n<p>地址已经创建，我们把这个地址记录下来。</p>\n<p></p>\n<p>3，下面执行创建区块链命令</p>\n<pre><code class=\"language-rust\">{\"Genesis\":\"1KooomKwhgPCfB2YfnKT7yMUxGcVWqS3ns\"}\nINFO blockchain_rust_part_6::networks::node: Genesis block was created success!</code></pre>\n<p>区块链创建成功。</p>\n<p></p>\n<p>再次查看</p>\n<pre><code class=\"language-rust\">{\"Blocks\":\"\"}\nINFO blockchain_rust_part_6::blocks::blockchain: Block {\n    header: BlockHeader {\n        ......\n    },\n    tranxs: [\n        Transaction {\n            id: \"24cde4a1782d23fda6ec353959f9197450078a1d79126c82e83898d92015ec96\",\n            vin: [\n                Txinput {\n                    txid: \"\",\n                    vout: 0,\n                    signature: [],\n                    pub_key: [],\n                },\n            ],\n            vout: [\n                Txoutput {\n                    value: 10,\n                    pub_key_hash: [\n                        ......\n                    ],\n                },\n            ],\n        },\n    ],\n    hash: \"00ca23fdb684b0ebf29eb344e2f9c1ee2ba8325aceba8a7474dbcb77549a2bc9\",\n}\nINFO blockchain_rust_part_6::networks::node: tip: 00ca23fdb684b0ebf29eb344e2f9c1ee2ba8325aceba8a7474dbcb77549a2bc9\nINFO blockchain_rust_part_6::networks::node: height: 1</code></pre>\n<p></p>\n<p><strong><span style=\"color:#6eaad7;\">启动第二个节点</span></strong></p>\n<pre><code class=\"language-rust\">RUST_LOG=info cargo run --quiet server data1\nPeerId(\"12D3KooWDknz5ScSw8Ye2ULheq3DHUexhRkH9z1y7N7a27XyWphs\")\nListening on \"/ip4/127.0.0.1/tcp/53891\"</code></pre>\n<p>第二个节点节点启动成功，生成了唯一的节点ID，在本地53891端口监听消息。</p>\n<p></p>\n<p>1，查看区块链信息</p>\n<pre><code class=\"language-rust\">{\"Blocks\":\"\"}\nINFO blockchain_rust_part_6::networks::node: tip: \nINFO blockchain_rust_part_6::networks::node: height: 0</code></pre>\n<p>在第二个节点上还没有区块链。</p>\n<p></p>\n<p>2，同步区块链</p>\n<pre><code class=\"language-rust\">{\"Sync\":\"\"}\nINFO blockchain_rust_part_6::networks::behaviour: Got message with id: 37343836383930393039373131393933343631 from peer: PeerId(\"12D3KooWHn6sTgQU7bwKfPQHXi2oo4dDUEneoVFWtfur7bufXuZ7\")</code></pre>\n<p>从第一个节点：12D3KooWHn6sTgQU7bwKfPQHXi2oo4dDUEneoVFWtfur7bufXuZ7，同步区块链成功。</p>\n<p></p>\n<p>再次查看</p>\n<pre><code class=\"language-rust\">{\"Blocks\":\"\"}\nApr 19 14:00:53.136  INFO blockchain_rust_part_6::blocks::blockchain: Block {\n    header: BlockHeader {\n        ......\n    },\n    tranxs: [\n        Transaction {\n            id: \"24cde4a1782d23fda6ec353959f9197450078a1d79126c82e83898d92015ec96\",\n            vin: [\n                Txinput {\n                    txid: \"\",\n                    vout: 0,\n                    signature: [],\n                    pub_key: [],\n                },\n            ],\n            vout: [\n                Txoutput {\n                    value: 10,\n                    pub_key_hash: [\n                       ......\n                    ],\n                },\n            ],\n        },\n    ],\n    hash: \"00ca23fdb684b0ebf29eb344e2f9c1ee2ba8325aceba8a7474dbcb77549a2bc9\",\n}\nApr 19 14:00:53.136  INFO blockchain_rust_part_6::networks::node: tip: 00ca23fdb684b0ebf29eb344e2f9c1ee2ba8325aceba8a7474dbcb77549a2bc9\nApr 19 14:00:53.137  INFO blockchain_rust_part_6::networks::node: height: 1</code></pre>\n<p>与第一个节点的区块链一致。</p>\n<p></p>\n<p>启动第三个节点，步骤同第二个节点</p>\n<p></p>\n<p><strong><span style=\"color:#6eaad7;\">创建交易</span></strong></p>\n<p>1，在第二个节点创建一个用户的钱包地址</p>\n<pre><code class=\"language-rust\">{\"CreateWallet\":\"Bob\"}\nINFO blockchain_rust_part_6::networks::node: Bob's address is 1EuM1UEhJFTDR5UfWzfghzv82bCdwRWk9E</code></pre>\n<p>2，在第一个节点创建交易</p>\n<p>由Justin向Bob发送4单位货币</p>\n<pre><code class=\"language-rust\">{\"Trans\": {\"from\":\"1KooomKwhgPCfB2YfnKT7yMUxGcVWqS3ns\",\"to\":\"1EuM1UEhJFTDR5UfWzfghzv82bCdwRWk9E\",\"amount\":\"4\"}}</code></pre>\n<p>3，在所有节点查看区块链信息</p>\n<pre><code class=\"language-rust\">{\"Blocks\":\"\"}\nApr 19 14:11:38.410  INFO blockchain_rust_part_6::blocks::blockchain: Block {\n    header: BlockHeader {\n        ......\n    },\n    tranxs: [\n        Transaction {\n            id: \"1578eda9b3ba5f5be584ddb65389ac5172befa1ba50cf03a90fcdafdb5ce4bea\",\n            vin: [\n                Txinput {\n                    txid: \"24cde4a1782d23fda6ec353959f9197450078a1d79126c82e83898d92015ec96\",\n                    vout: 0,\n                    signature: [\n                       ......\n                    ],\n                    pub_key: [\n                       ......\n                    ],\n                },\n            ],\n            vout: [\n                Txoutput {\n                    value: 4,\n                    pub_key_hash: [\n                        ......\n                    ],\n                },\n                Txoutput {\n                    value: 6,\n                    pub_key_hash: [\n                        ......\n                    ],\n                },\n            ],\n        },\n    ],\n    hash: \"0056d99918490fd8d650d247722234c1d17f18d9073a39d2eacb16550d9737df\",\n}\nApr 19 14:11:38.411  INFO blockchain_rust_part_6::blocks::blockchain: Block {\n    header: BlockHeader {\n        ......\n    },\n    tranxs: [\n        Transaction {\n            id: \"24cde4a1782d23fda6ec353959f9197450078a1d79126c82e83898d92015ec96\",\n            vin: [\n                Txinput {\n                    txid: \"\",\n                    vout: 0,\n                    signature: [],\n                    pub_key: [],\n                },\n            ],\n            vout: [\n                Txoutput {\n                    value: 10,\n                    pub_key_hash: [\n                        ......\n                    ],\n                },\n            ],\n        },\n    ],\n    hash: \"00ca23fdb684b0ebf29eb344e2f9c1ee2ba8325aceba8a7474dbcb77549a2bc9\",\n}\nINFO blockchain_rust_part_6::networks::node: tip: 0056d99918490fd8d650d247722234c1d17f18d9073a39d2eacb16550d9737df\nINFO blockchain_rust_part_6::networks::node: height: 2</code></pre>\n<p>所有节点都已经同步了区块信息。</p>\n<p></p>\n<h2><strong>工程结构</strong></h2>\n<p class=\"img-center\"><img alt=\"\" height=\"425\" src=\"image\\852080b6c78fb99d3b59c0be2ac36bfa.png\" width=\"169\"/></p>\n<p></p>\n<p><strong><span style=\"color:#6eaad7;\">完整代码：</span></strong> </p>\n<p><a class=\"link-info\" href=\"https://github.com/Justin02180218/blockchain_rust\" title=\"https://github.com/Justin02180218/blockchain_rust\">https://github.com/Justin02180218/blockchain_rust</a></p>\n<hr/>\n<p><strong>更多文章，请关注公众号：coding到灯火阑珊</strong></p>\n<p><img alt=\"\" src=\"image\\20190204204525201.jpg\"/></p>\n</div>\n</div>"}