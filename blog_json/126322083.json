{"blogid": "126322083", "writerAge": "码龄4年", "writerBlogNum": "47", "writerCollect": "70", "writerComment": "153", "writerFan": "228", "writerGrade": "3级", "writerIntegral": "728", "writerName": "H.Y_C", "writerProfileAdress": "writer_image\\profile_126322083.jpg", "writerRankTotal": "24226", "writerRankWeekly": "1263", "writerThumb": "124", "writerVisitNum": "37899", "blog_read_count": "446", "blog_time": "已于 2022-08-18 17:57:35 修改", "blog_title": "【C++】基于Easyx的UI库（2022-8-14 V1）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>简介</h1>\n<p><strong>实现语言：C++</strong></p>\n<p><strong>项目名称：UI.h</strong></p>\n<p><strong>项目类型：控制台应用</strong></p>\n<p><strong>项目版本：2022-8-14 V1</strong></p>\n<p><strong>开发环境：Visual Studio 2022 Community 17.3.0  &amp;  Easyx 2022-6-10</strong></p>\n<hr/>\n<h1>项目介绍</h1>\n<p>前段时间我研究了C#，就想把C#窗体应用中的控件搬到C++上，于是就有了这篇文章。</p>\n<hr/>\n<h1>更新历史</h1>\n<ul><li>2022-8-14 优化已有的控件，将init()初始化函数改为构造函数；增加复选框（Checked List Box）</li><li>2022-8-13 增加单选框（Check Box），优化按钮（Button）和文本（Label）</li><li>2022-8-7 完成按钮（Button）和文本（Label）</li><li>2022-8-5 创建UI.h</li></ul>\n<hr/>\n<h1>代码</h1>\n<p>这个代码只要是懂一点Easyx的应该都看得懂（因为Easyx本身并不难），并且我还在里面加了一些注释，应该大部分人阅读起来都是没问题的。</p>\n<p>UI.h</p>\n<pre><code class=\"language-cpp\">/***************************************************************\n *                                                             *\n * UI.h                                                        *\n * UI Library for C++ Base on Easyx.                           *\n * Version : 2022-8-14 V1                                      *\n * https://easyx.cn                                            *\n * https://blog.csdn.net/qq_43546083?spm=1000.2115.3001.5343   *\n *                                                             *\n ***************************************************************/\n\n#pragma once\n\n#if __has_include(&lt;graphics.h&gt;)\n\n#include &lt;graphics.h&gt;\n\nnamespace UI {\n\t/**** 按钮 ****/\n\tclass Button {\n\tpublic:\n\t\t/**** 控件左上角的x坐标 ****/\n\t\tint x = -1,\n\n\t\t/**** 控件左上角的y坐标 ****/\n\t\ty = -1;\n\n\t\t/**** 控件的宽度 ****/\n\t\tint width = -1,\n\n\t\t/**** 控件的高度 ****/\n\t\theight = -1;\n\n\t\t/**** 控件所显示的文本 ****/\n\t\tLPCTSTR text = L\"\";\n\n\t\t/**** 控件显示的文本高度 ****/\n\t\tint size = 16;\n\n\t\t/**** 控件是否可见，可见为true，否则为false ****/\n\t\tbool visible = false;\n\n\t\t/**** 构造函数，初始化控件左上角的坐标、宽度、高度、显示的文本与文本的高度（默认为16） ****/\n\t\tButton(int x, int y, int width, int height, LPCTSTR text, int size = 16) {\n\t\t\tthis-&gt;x = x;\n\t\t\tthis-&gt;y = y;\n\t\t\tthis-&gt;width = width;\n\t\t\tthis-&gt;height = height;\n\t\t\tthis-&gt;text = text;\n\t\t\tthis-&gt;size = size;\n\t\t\treturn;\n\t\t}\n\n\t\t/**** 显示控件,成功返回true，出现异常返回false ****/\n\t\tbool show() {\n\t\t\tif (visible) {\n\t\t\t\t//当前控件可见\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tint temp = getbkmode();\n\t\t\tsetbkmode(TRANSPARENT);\n\t\t\tLOGFONT* temp1 = new LOGFONT();\n\t\t\tLOGFONT* temp2 = new LOGFONT();\n\t\t\tgettextstyle(temp1);\n\t\t\tgettextstyle(temp2);\n\t\t\ttemp2-&gt;lfHeight = size;\n\t\t\tsettextstyle(temp2);\n\t\t\tif (width - textwidth(text) &lt;= 0 || height - textheight(text) &lt;= 0) {\n\t\t\t\t//文字过大\n\t\t\t\tsettextstyle(temp1);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfillrectangle(x, y, x + width - 1, y + height - 1);\n\t\t\touttextxy(x + (width - textwidth(text)) / 2, y + (height - textheight(text)) / 2, text);\n\t\t\tsettextstyle(temp1);\n\t\t\tsetbkmode(temp);\n\t\t\tdelete temp1;\n\t\t\tdelete temp2;\n\t\t\tvisible = true;\n\t\t\treturn true;\n\t\t}\n\n\t\t/**** 隐藏控件 ****/\n\t\tvoid hide() {\n\t\t\tCOLORREF temp = getfillcolor();\n\t\t\tsetfillcolor(getbkcolor());\n\t\t\tsolidrectangle(x, y, x + width - 1, y + height - 1);\n\t\t\tsetfillcolor(temp);\n\t\t\tvisible = false;\n\t\t\treturn;\n\t\t}\n\n\t\t/**** 判断按钮是否被按下，被按下返回true，没有按下或出现异常返回false ****/\n\t\tbool click(ExMessage m) {\n\t\t\tif ((x == -1 || y == -1 || width == -1 || height == -1) || !visible) {\n\t\t\t\t//未初始化控件或当前控件不可见\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn m.message == WM_LBUTTONUP &amp;&amp; (m.x &gt;= x &amp;&amp; m.x &lt;= x + width - 1) &amp;&amp; (m.y &gt;= y &amp;&amp; m.y &lt;= y + height - 1);\n\t\t}\n\n\t\t/**** 刷新插件（显示状态下） ****/\n\t\tvoid reload() {\n\t\t\tvisible = false;\n\t\t\tshow();\n\t\t}\n\t};\n\n\t/**** 文本（该控件为自动调整大小） ****/\n\tclass Label {\n\tprivate:\n\t\tint width, height;\n\tpublic:\n\t\t/**** 控件左上角的x坐标 ****/\n\t\tint x = -1,\n\n\t\t\t/**** 控件左上角的y坐标 ****/\n\t\t\ty = -1;\n\n\t\t/**** 控件所显示的文本 ****/\n\t\tLPCTSTR text = L\"\";\n\n\t\t/**** 控件显示的文本高度 ****/\n\t\tint size = 16;\n\n\t\t/**** 控件是否可见，可见为true，否则为false ****/\n\t\tbool visible = false;\n\n\t\t/**** 构造函数，初始化控件左上角的坐标、显示的文本与文本的高度（默认为16） ****/\n\t\tLabel(int x, int y, LPCTSTR text, int size = 16) {\n\t\t\tthis-&gt;x = x;\n\t\t\tthis-&gt;y = y;\n\t\t\tthis-&gt;text = text;\n\t\t\tthis-&gt;size = size;\n\t\t\twidth = 0;\n\t\t\theight = 0;\n\t\t\treturn;\n\t\t}\n\n\t\t/**** 显示控件,成功返回true，出现异常返回false ****/\n\t\tbool show() {\n\t\t\tif (visible) {\n\t\t\t\t//当前控件可见\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tint temp = getbkmode();\n\t\t\tsetbkmode(TRANSPARENT);\n\t\t\tLOGFONT* temp1 = new LOGFONT();\n\t\t\tLOGFONT* temp2 = new LOGFONT();\n\t\t\tgettextstyle(temp1);\n\t\t\tgettextstyle(temp2);\n\t\t\ttemp2-&gt;lfHeight = size;\n\t\t\tsettextstyle(temp2);\n\t\t\touttextxy(x, y, text);\n\t\t\twidth = textwidth(text);\n\t\t\theight = textheight(text);\n\t\t\tsettextstyle(temp1);\n\t\t\tdelete temp1;\n\t\t\tdelete temp2;\n\t\t\tsetbkmode(temp);\n\t\t\tvisible = true;\n\t\t\treturn true;\n\t\t}\n\n\t\t/**** 隐藏控件 ****/\n\t\tvoid hide() {\n\t\t\tCOLORREF temp = getfillcolor();\n\t\t\tsetfillcolor(getbkcolor());\n\t\t\tsolidrectangle(x, y, x + width - 1, y + height - 1);\n\t\t\tsetfillcolor(temp);\n\t\t\tvisible = false;\n\t\t\treturn;\n\t\t}\n\n\t\t/**** 刷新插件（显示状态下） ****/\n\t\tvoid reload() {\n\t\t\tvisible = false;\n\t\t\tshow();\n\t\t}\n\t};\n\n\t/**** 勾选框（该控件为自动大小） ****/\n\tclass CheckBox {\n\tprivate:\n\t\t//勾选框=按钮+文本\n\t\tButton* button;\n\t\tLabel* label;\n\n\tpublic:\n\t\t/**** 控件左上角的x坐标 ****/\n\t\tint x = -1,\n\n\t\t/**** 控件左上角的y坐标 ****/\n\t\t\ty = -1;\n\n\t\t/**** 控件所显示的文本 ****/\n\t\tLPCTSTR text = L\"\";\n\n\t\t/**** 是否已被勾选 ****/\n\t\tbool state = false;\n\n\t\t/**** 构造函数，初始化控件左上角的坐标与显示的文本 ****/\n\t\tCheckBox(int x, int y, LPCTSTR text) {\n\t\t\tthis-&gt;x = x;\n\t\t\tthis-&gt;y = y;\n\t\t\tthis-&gt;text = text;\n\t\t\tbutton = new Button(x, y, 18, 18, L\"\");\n\t\t\tlabel = new Label(x + 20, y, text, 18);\n\t\t\treturn;\n\t\t}\n\n\t\t/**** 显示控件,成功返回true，出现异常返回false ****/\n\t\tbool show() {\n\t\t\tif (!button-&gt;show() || !label-&gt;show()) {\n\t\t\t\thide();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**** 隐藏控件 ****/\n\t\tvoid hide() {\n\t\t\tbutton-&gt;hide();\n\t\t\tlabel-&gt;hide();\n\t\t\treturn;\n\t\t}\n\n\t\t/**** 控件是否被勾选，按下则切换效果，出现异常返回false ****/\n\t\tbool check(ExMessage m) {\n\t\t\tif ((button-&gt;x == -1 || button-&gt;y == -1 || button-&gt;width == -1 || button-&gt;height == -1) || (label-&gt;x == -1 || label-&gt;y == -1) || !(button-&gt;visible &amp;&amp; label-&gt;visible)) {\n\t\t\t\t//未初始化控件或当前控件不可见\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (button-&gt;click(m)) {\n\t\t\t\tstate = !state;\n\t\t\t\tbutton-&gt;text = state ? L\"√\" : L\"\";\n\t\t\t\treload();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**** 刷新插件（显示状态下） ****/\n\t\tvoid reload() {\n\t\t\tbutton-&gt;reload();\n\t\t\tlabel-&gt;reload();\n\t\t}\n\n\t\t~CheckBox()\n\t\t{\n\t\t\tdelete button;\n\t\t\tdelete label;\n\t\t}\n\t};\n\n\t/**** 复式勾选框（最多15项，该控件为自动大小） ****/\n\tclass CheckedListBox {\n\tpublic:\n\t\t//复式勾选框=多个勾选框\n\t\tCheckBox* checkbox[15] = { nullptr };\n\n\t\t/**** 项数 ****/\n\t\tint num = 0;\n\n\t\t/**** 构造函数，初始化控件左上角的坐标与显示的文本 ****/\n\t\tCheckedListBox(int x, int y, int num, LPCTSTR text[]) {\n\t\t\tif (num &gt; 15) {\n\t\t\t\tMessageBox(0, L\"项数过多！\", L\"UI.h\", MB_OK | MB_ICONSTOP);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis-&gt;num = num;\n\t\t\tfor (int i = 0; i &lt; num; i++) {\n\t\t\t\tcheckbox[i] = new CheckBox(x + 5, y + i * 20, text[i]);\n\t\t\t}\n\t\t}\n\t\tCheckedListBox(int num, CheckBox checkbox[]) {\n\t\t\tif (num &gt; 15) {\n\t\t\t\tMessageBox(0, L\"项数过多！\", L\"UI.h\", MB_OK | MB_ICONSTOP);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis-&gt;num = num;\n\t\t\tfor (int i = 0; i &lt; num; i++) {\n\t\t\t\tthis-&gt;checkbox[i] = &amp;checkbox[i];\n\t\t\t}\n\t\t}\n\n\t\t/**** 显示控件,成功返回true，出现异常返回false ****/\n\t\tbool show() {\n\t\t\tint maxlen = -1;\n\t\t\tfor (int i = 0; i &lt; num; i++) {\n\t\t\t\tmaxlen = max(maxlen, textwidth(checkbox[i]-&gt;text));\n\t\t\t\tif (!checkbox[i]-&gt;show()) {\n\t\t\t\t\tfor (int j = 0; j &lt; i; j++) {\n\t\t\t\t\t\tcheckbox[j]-&gt;hide();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\trectangle(checkbox[0]-&gt;x - 5, checkbox[0]-&gt;y - 5, checkbox[0]-&gt;x + maxlen + 25, checkbox[0]-&gt;y + num * 20 + 3);\n\t\t\treturn true;\n\t\t}\n\n\t\t/**** 隐藏控件 ****/\n\t\tvoid hide() {\n\t\t\tfor (int i = 0; i &lt; num; i++) checkbox[i]-&gt;hide();\n\t\t}\n\n\t\t/**** 控件是否被勾选，按下则切换效果，出现异常返回false ****/\n\t\tbool check(ExMessage m) {\n\t\t\tfor (int i = 0; i &lt; num; i++) {\n\t\t\t\tif (!checkbox[i]-&gt;check(m))return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**** 刷新插件（显示状态下） ****/\n\t\tvoid relad() {\n\t\t\tfor (int i = 0; i &lt; num; i++)checkbox[i]-&gt;reload();\n\t\t\treturn;\n\t\t}\n\n\t\t~CheckedListBox()\n\t\t{\n\t\t\tdelete[] &amp;checkbox;\n\t\t}\n\t};\n}\n#else\n\t#error 请先安装Easyx库，下载地址：https://easyx.cn\n#endif</code></pre>\n<p>在这里，为了让大家简单了解一下这些类使用的方法，给了一段参考代码：</p>\n<p>text.cpp</p>\n<pre><code class=\"language-cpp\">#include \"UI.h\"\nint main() {\n\tinitgraph(640,480);\n\tsettextcolor(BLACK);\n\tsetbkcolor(RGB(240, 240, 240));\n\tsetlinecolor(BLACK);\n\tsetfillcolor(RGB(230, 230, 230));\n\tcleardevice();\n\tLPCTSTR text[3] = { L\"这是\",L\"一个\",L\"Checked List Box\" };\n\tUI::Button button(5, 5, 200, 60, L\"这是一个Button\");\n\tUI::CheckBox checkbox(5, 70, L\"这是一个Check Box\");\n\tUI::CheckedListBox checkedlistbox(5, 155, 3, text);\n\tUI::Label label1(5, 95, L\"这是一个Label\"), label2(5, 115, L\"这是一个彩蛋\", 32);\n\tbutton.show();\n\tcheckbox.show();\n\tcheckedlistbox.show();\n\tlabel1.show();\n\tExMessage m;\n\twhile (true) {\n\t\tm = getmessage(EM_MOUSE);\n\t\tcheckbox.check(m);\n\t\tcheckedlistbox.check(m);\n\t\tif (checkbox.state == true)label2.show();\n\t\telse label2.hide();\n\t\tif (button.click(m)){\n\t\t\tif (label1.visible)label1.hide();\n\t\t\telse label1.show();\n\t\t}\n\t}\n\treturn 0;\n}</code></pre>\n<p> 运行效果：</p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"Rx6MjKBd-1660468764226\" src=\"https://live.csdn.net/v/embed/231750\"></iframe>\n<p>UI.h 2022-8-14版本 效果</p>\n</div>\n<hr/>\n<p>好了，今天就到这里了。如果大家有对这篇文章有不懂或有建议可以告诉我。拜拜！</p>\n</div>\n</div>"}