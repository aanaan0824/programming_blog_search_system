{"blogid": "125356601", "writerAge": "码龄4年", "writerBlogNum": "14", "writerCollect": "11", "writerComment": "3", "writerFan": "1", "writerGrade": "2级", "writerIntegral": "152", "writerName": "兔子团", "writerProfileAdress": "writer_image\\profile_125356601.jpg", "writerRankTotal": "79124", "writerRankWeekly": "114580", "writerThumb": "8", "writerVisitNum": "4944", "blog_read_count": "1843", "blog_time": "于 2022-06-20 00:56:58 发布", "blog_title": "组件通信的6种方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>什么是组件通信</h2>\n<p>vue组件中关系说明:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d8e47cc688e64ca195bf0cbed6bff5e5.png\"/><br/> 如上图所示, A与B、A与C、B与D、C与E组件之间是父子关系； B与C之间是兄弟关系；A与D、A与E之间是隔代关系； D与E是堂兄关系（非直系亲属）</p>\n<p>针对以上关系我们归类为：</p>\n<ul><li>父子组件之间通信</li><li>非父子组件之间通信(兄弟组件、隔代关系组件等)</li></ul>\n<p>因此介绍在不同的场景下如何选择有效方式实现的组件间通信方式，以更好理解组件间的通信。</p>\n<h2><a id=\"_12\"></a>组件通信的方式有哪些</h2>\n<blockquote>\n<p>1、<strong>props</strong>：用于父=》子组件通信</p>\n</blockquote>\n<ul><li>父组件通过props的方式向子组件传递数据，而子组件通过$emit 可以向父组件通信。</li><li>举例：子组件的props选项能够接收来自父组件数据。没错，仅仅只能接收，props是单向绑定的，即只能父组件向子组件传递，不能反向。而传递的方式也分为两种：</li></ul>\n<p><strong>1、<strong>静态传递</strong></strong></p>\n<pre><code>子组件通过props选项来声明一个自定义的属性，然后父组件就可以在嵌套标签的时候，通过这个属性往子组件传递数据了。\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 父组件 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>我是父组件！<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>child message<span class=\"token operator\">=</span><span class=\"token string\">\"我是子组件一！\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">&gt;</span> <span class=\"token comment\">//通过自定义属性传递数据</span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n \n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> Child <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/child.vue'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>Child<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 子组件 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n \n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>message<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//声明一个自定义的属性</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>2、动态传递</strong></p>\n<p>我们已经知道了可以像上面那样给 props 传入一个静态的值，但是我们更多的情况需要动态的数据。这时候就可以用 v-bind 来实现。通过v-bind绑定props的自定义的属性，传递去过的就不是静态的字符串了，它可以是一个表达式、布尔值、对象等等任何类型的值。</p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 父组件 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>我是父组件！<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>child message<span class=\"token operator\">=</span><span class=\"token string\">\"我是子组件一！\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">&gt;</span>\n\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 这是一个 JavaScript 表达式而不是一个字符串。<span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>child v<span class=\"token operator\">-</span>bind<span class=\"token operator\">:</span>message<span class=\"token operator\">=</span><span class=\"token string\">\"a+b\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">&gt;</span>\n\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 用一个变量进行动态赋值。<span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>child v<span class=\"token operator\">-</span>bind<span class=\"token operator\">:</span>message<span class=\"token operator\">=</span><span class=\"token string\">\"msg\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> Child <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/child.vue'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>Child<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token string\">'我是子组件二！'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">112233</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'我是子组件三！'</span><span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 子组件 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>message<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n\n</code></pre>\n<p>效果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\90f58f3a176a43c28359a88a534e1251.png\"/></p>\n<p><strong>总结</strong>: prop 只可以从<code>上一级</code>组件传递到<code>下一级</code>组件（父子组件），即所谓的单向数据流。而且 prop 只读，不可被修改，所有修改都会失效并警告。</p>\n<blockquote>\n<p>2、<strong>自定义事件</strong>：@on，@emit 可以实现子给父通信即<code>vm.$emit( event, arg )</code></p>\n</blockquote>\n<ul><li>$emit绑定一个自定义事件event，当这个这个语句被执行到的时候，就会将参数arg传递给父组件，父组件通过@event监听并接收参数。</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//父组件</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>child @getMessage<span class=\"token operator\">=</span><span class=\"token string\">\"showMsg\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n <span class=\"token keyword\">import</span> Child <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/child.vue'</span>\n <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>Child<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span><span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span>title<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是子组件！<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token function-variable function\">mounted</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getMessage'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'我是父组件！'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<blockquote>\n<p>3、<strong>全局事件总线eventBus</strong>：$bus 全能</p>\n</blockquote>\n<ul><li>对于比较小型的项目，没有必要引入 vuex 的情况下，可以使用 eventBus。</li><li>它的实现思想也很好理解，在要相互通信的两个组件中，都引入同一个新的vue实例，然后在两个组件中通过分别调用这个实例的事件触发和监听来实现通信。</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//eventBus.js</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>组件<span class=\"token constant\">A</span><span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> Bus <span class=\"token keyword\">from</span> <span class=\"token string\">'eventBus.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            Bus<span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sayHello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>组件<span class=\"token constant\">B</span><span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> Bus <span class=\"token keyword\">from</span> <span class=\"token string\">'eventBus.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Bus<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sayHello'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">target</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// =&gt; 'hello'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p>4、<strong>pubsub-js</strong>：vue当中几乎不用（因为vue中有全局事件总线和这个第三方提供的库功能重复） 但全能</p>\n</blockquote>\n<ul><li> <p><strong>含义</strong>：消息订阅与发布<br/> -（由于原生js实现较困难，推荐用第三方库pubsub-js （<code>npm i pubsub-js</code>）</p> </li><li> <p><strong>理解</strong>：需要消息的人=》订阅消息subscribe，<br/> 发布消息的人=》发布消息publish</p> </li><li> <p><strong>实现</strong>：需要消息的人：<code>import pubsub from \"pubsub-js\"</code>,并在mouted（）{this.pubId=pubsub.subscribe('hello‘，function（msgName，data）{console.log(‘有人发布了hello消息，hello消息的回调执行了’，msgName，data) })}<br/> 发布消息的人：<code>import pubsub from \"pubsub-js\"</code>，在事件函数里methods：{xxxx事件（）{ pubsub.publish(‘hello’,666)}}<br/> <strong>效果</strong>：有人发布了hello消息，hello消息的回调执行了 hello 666</p> </li><li> <p><strong>取消订阅：</strong> <code>pubsub.unsubscribe('this.pubId')</code>（即需要指定哪个id的消息被取消订阅）</p> </li></ul>\n<blockquote>\n<p>5、<strong>插槽</strong></p>\n</blockquote>\n<ul><li>插槽就是子组件中的提供给父组件使用的一个占位符，用<code>&lt;slot&gt;&lt;/slot&gt;</code> 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签。</li></ul>\n<p>1、以最简单插槽为例：在子组件中放一个占位符</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//子组件</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>今天天气状况：<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>slot<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'child'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>2、在父组件中给这个占位符填充内容</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//父组件</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>使用slot分发内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>child<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token string\">\"margin-top: 30px\"</span><span class=\"token operator\">&gt;</span>多云，最高气温<span class=\"token number\">34</span>度，最低气温<span class=\"token number\">28</span>度，微风<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">import</span> child <span class=\"token keyword\">from</span> <span class=\"token string\">\"./child.vue\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'father'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n            child\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>3、展示效果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ad1649a3019d402bbb5b841d4d6d758d.png\"/></p>\n<ul><li>但如果没有用插槽，则数据传递不进来，没有多云那一行</li></ul>\n<p><font color=\"red\" face=\"Times New Roman体\" size=\"4\"><strong>总结</strong>：如果子组件没有使用插槽，父组件如果需要往子组件中填充模板或者html, 是没法做到的。</font></p>\n<h2><a id=\"___261\"></a>插槽使用 - 具名插槽</h2>\n<p>描述：<strong>具名插槽</strong>其实就是给插槽取个名字。一个子组件可以放多个插槽，而且可以放在不同的地方，而父组件填充内容时，可以根据这个名字把内容填充到对应插槽中。代码如下：</p>\n<p>1、子组件的代码，设置了两个插槽(header和footer)：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"header\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>我是页头标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"header\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"footer\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>我是页尾标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"footer\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n \n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"child1\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n \n<span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">&gt;</span>\n \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>2、父组件填充内容, 父组件通过 v-slot:[name] 的方式指定到对应的插槽中</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>slot内容分发<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>child1<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>template slot<span class=\"token operator\">=</span><span class=\"token string\">\"header\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>我是页头的具体内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>template slot<span class=\"token operator\">=</span><span class=\"token string\">\"footer\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>我是页尾的具体内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child1<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n \n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">import</span> child1 <span class=\"token keyword\">from</span> <span class=\"token string\">\"./child1.vue\"</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"father1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n            child1\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n \n<span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">&gt;</span>\n \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><em>展示效果如下：</em><br/> <img alt=\"在这里插入图片描述\" src=\"image\\97371977f37841958daa4f93cbc990b4.png\"/></p>\n<blockquote>\n<p><strong>6、vuex</strong></p>\n</blockquote>\n<p><strong>Vuex 核心</strong></p>\n<ul><li>State：保存所有组件的共享状态</li><li>Getters：类似状态值的计算属性</li><li>Mutations：修改 State中状态值的唯一方法，里面包含状态变化监听器和记录器</li><li>Actions：用于异步处理 State中状态值，异步函数结束后调用Mutations</li><li>Modules：当一个 State 对象比较庞大时，可以将 State 分割成多个Modules 模块。</li></ul>\n<h2><a id=\"_339\"></a>总结</h2>\n<p>1.可以实现任意组件的通信的方法有两个：<code>事件总线</code> 和 <code>Vuex</code>，事件总线难维护数据但轻量，Vux维护数据方便但比较重量。<br/> 2.可以实现父与子孙跨越层级通信的方法也有两个：<code>$attrs/$listeners</code> 和 <code>provide/inject</code> ，<code>$attrs/$listeners</code> 具有响应性且可以双向通信， <code>provide/inject</code> 无响应性且只能单向通信（父传子）<br/> 3.只能实现父与子组件通信的方法有一个：<code>props/emit</code>，方法比较基础，适合只有父子组件通信的方法，若想跨层级通信需要中间组件做转发，比较麻烦。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}