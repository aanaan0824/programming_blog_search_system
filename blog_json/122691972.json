{"blogid": "122691972", "writerAge": "码龄2年", "writerBlogNum": "4", "writerCollect": "20", "writerComment": "1", "writerFan": "3", "writerGrade": "1级", "writerIntegral": "53", "writerName": "文明_code", "writerProfileAdress": "writer_image\\profile_122691972.jpg", "writerRankTotal": "119209", "writerRankWeekly": "1100475", "writerThumb": "10", "writerVisitNum": "14563", "blog_read_count": "6444", "blog_time": "已于 2022-01-26 07:50:09 修改", "blog_title": "如何使用vscode运行和调试c/c++程序", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<p>众所周知</p>\n<p>vscode是个万金油，而且体型轻巧，拓展插件多，非常适合初学者编程</p>\n<p>那么如何使用vscode进行c/c++程序的运行？</p>\n<p>首先必须确保mingw64正确安装</p>\n<p>通过以下链接下载解压到c盘根目录即可，然后添加修改path：“C:\\mingw64\\bin”</p>\n<p>然后win+r 输入cmd 回车 输入gcc -v 出现版本号即代表path设置正确</p>\n<p><a href=\"https://download.csdn.net/download/awenming/77866800\" title=\"mingw64下载，C语言学习，gcc-C/C++文档类资源-CSDN下载\">mingw64下载，C语言学习，gcc-C/C++文档类资源-CSDN下载</a></p>\n<p>然后打开vscode 安装插件code runner,c/c++这俩插件即可</p>\n<p>然后打开文件-首选项-设置-搜索Run In Terminal，去勾选</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\4c86f388e9a24afd9f3e6a563d04b464.png\"/></p>\n<p></p>\n<p>然后搜索Code-runner: Executor Map，第一个选择在settings.json中编辑</p>\n<pre><code>\"c\": \"chcp 65001 &amp;&amp; cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n\"cpp\": \"chcp 65001 &amp;&amp; cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\de0fb0214de74b94a3193932359bbeea.png\"/></p>\n<p> 如果找不到code-runner.executorMap，请在最后一行手打输入code-runner.executorMap，打一半软件会提示然后莫名其妙自动补全然后出现下面的一堆语言设置，然后在c和cpp行换成这俩行代码，加了chcp 65001确保code runner不会中文乱码错误发生</p>\n<p>设置好以后就可以正常使用code runner即实现c/c++在vscode中的运行</p>\n<h3></h3>\n<p>接下来实现c/c++在vscode中的调试实现</p>\n<p>首先你需要在vscode中打开一个文件夹，然后创建一个test.c文件，然后创建个.vscode文件夹，在里面创建四个文件</p>\n<p><strong>c_cpp_properties.json：将这段代码复制进去</strong></p>\n<blockquote>\n<pre><code>{\n  \"configurations\": [\n    {\n      \"name\": \"windows-gcc-x64\",\n      \"includePath\": [\n        \"${workspaceFolder}/**\"\n      ],\n      \"compilerPath\": \"C:/mingw64/bin/gcc.exe\",\n      \"cStandard\": \"${default}\",\n      \"cppStandard\": \"${default}\",\n      \"intelliSenseMode\": \"windows-gcc-x64\",\n      \"compilerArgs\": []\n    }\n  ],\n  \"version\": 4\n}</code></pre>\n<p></p>\n</blockquote>\n<p><strong>launch.json：复制粘贴</strong></p>\n<pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"(gdb) Launch\",\n      \"type\": \"cppdbg\",\n      \"request\": \"launch\",\n      \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n      \"args\": [],\n      \"stopAtEntry\": false,\n      \"cwd\": \"${workspaceFolder}\",\n      \"environment\": [],\n      \"externalConsole\": true,\n      \"internalConsoleOptions\": \"neverOpen\",\n      \"MIMode\": \"gdb\",\n      \"miDebuggerPath\": \"gdb.exe\",\n      \"setupCommands\": [\n        {\n          \"description\": \"Enable pretty-printing for gdb\",\n          \"text\": \"-enable-pretty-printing\",\n          \"ignoreFailures\": false\n        }\n      ],\n      \"preLaunchTask\": \"Compile\"\n    },\n    {\n      \"name\": \"C/C++ Runner: Debug Session\",\n      \"type\": \"cppdbg\",\n      \"request\": \"launch\",\n      \"args\": [\n        \"\"\n      ],\n      \"stopAtEntry\": false,\n      \"cwd\": \"c:\\\\Users\\\\Rise\\\\Desktop\\\\c\\\\book\",\n      \"environment\": [],\n      \"program\": \"c:/Users/Rise/Desktop/c/book/build/Debug/outDebug\",\n      \"internalConsoleOptions\": \"openOnSessionStart\",\n      \"MIMode\": \"gdb\",\n      \"miDebuggerPath\": \"gdb\",\n      \"externalConsole\": false,\n      \"setupCommands\": [\n        {\n          \"description\": \"Enable pretty-printing for gdb\",\n          \"text\": \"-enable-pretty-printing\",\n          \"ignoreFailures\": true\n        }\n      ]\n    }\n  ]\n}</code></pre>\n<p>自行更改</p>\n<p>\"cwd\": \"c:\\\\Users\\\\Rise\\\\Desktop\\\\c\\\\book\",</p>\n<p>\"program\": \"c:/Users/Rise/Desktop/c/book/build/Debug/outDebug\",</p>\n<p>改成自己的目录</p>\n<p><strong>tasks.json：复制粘贴</strong></p>\n<pre><code>\n\n// https://code.visualstudio.com/docs/editor/tasks\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n        \"label\": \"Compile\", // 任务名称，与launch.json的preLaunchTask相对应\n        \"command\": \"gcc\",   // 要使用的编译器，C++用g++\n        \"args\": [\n            \"${file}\",\n            \"-o\",    // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out\n            \"${fileDirname}/${fileBasenameNoExtension}.exe\",\n            \"-g\",    // 生成和调试有关的信息\n            \"-m64\",  // 不知为何有时会生成16位程序而无法运行，此条可强制生成64位的\n            \"-Wall\", // 开启额外警告\n            \"-static-libgcc\",     // 静态链接libgcc，一般都会加上\n            \"-fexec-charset=GBK\", // 生成的程序使用GBK编码，不加这条会导致Win下输出中文乱码；繁体系统改成BIG5\n            \"-D__USE_MINGW_ANSI_STDIO\", // 用MinGW写C时留着，否则不需要，用于支持printf的%zd和%Lf等\n        ], // 编译的命令，其实相当于VSC帮你在终端中输了这些东西\n        \"type\": \"process\", // process是把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍\n        \"group\": {\n            \"kind\": \"build\",\n            \"isDefault\": true // 不为true时ctrl shift B就要手动选择了\n        },\n        \"presentation\": {\n            \"echo\": true,\n            \"reveal\": \"always\", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档，即使设为never，手动点进去还是可以看到\n            \"focus\": false,     // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义\n            \"panel\": \"shared\"   // 不同的文件的编译信息共享一个终端面板\n        },\n        \"problemMatcher\":\"$gcc\" // 捕捉编译时终端里的报错信息到问题面板中，修改代码后需要重新编译才会再次触发\n        // 本来有Lint，再开problemMatcher就有双重报错，但MinGW的Lint效果实在太差了；用Clangd可以注释掉\n    }]\n}</code></pre>\n<p></p>\n<p><strong>setting.json复制粘贴</strong></p>\n<pre><code>{\n  \"files.defaultLanguage\": \"c\",\n  \"editor.formatOnType\": true,\n  \"editor.suggest.snippetsPreventQuickSuggestions\": false,\n  \"editor.acceptSuggestionOnEnter\": \"off\",\n  \"code-runner.runInTerminal\": true,\n  \"code-runner.executorMap\": {\n    \"c\": \"gcc '$fileName' -o '$fileNameWithoutExt.exe' -Wall -O2 -m64 -lm -static-libgcc -fexec-charset=GBK -D__USE_MINGW_ANSI_STDIO &amp;&amp; &amp;'./$fileNameWithoutExt.exe'\",\n    \"cpp\": \"g++ '$fileName' -o '$fileNameWithoutExt.exe' -Wall -O2 -m64 -static-libgcc -fexec-charset=GBK &amp;&amp; &amp;'./$fileNameWithoutExt.exe'\"\n  },\n  \"code-runner.saveFileBeforeRun\": true,\n  \"code-runner.preserveFocus\": true,\n  \"code-runner.clearPreviousOutput\": false,\n  \"code-runner.ignoreSelection\": true,\n  \"code-runner.fileDirectoryAsCwd\": true,\n  \"C_Cpp.clang_format_sortIncludes\": true,\n  \"C_Cpp_Runner.cCompilerPath\": \"C:/mingw64/bin/gcc.exe\",\n  \"C_Cpp_Runner.cppCompilerPath\": \"C:/mingw64/bin/g++.exe\",\n  \"C_Cpp_Runner.debuggerPath\": \"gdb\",\n  \"C_Cpp_Runner.cStandard\": \"\",\n  \"C_Cpp_Runner.cppStandard\": \"\",\n  \"C_Cpp_Runner.msvcBatchPath\": \"\",\n  \"C_Cpp_Runner.warnings\": [\n    \"-Wall\",\n    \"-Wextra\",\n    \"-Wpedantic\"\n  ],\n  \"C_Cpp_Runner.enableWarnings\": true,\n  \"C_Cpp_Runner.warningsAsError\": false,\n  \"C_Cpp_Runner.compilerArgs\": [],\n  \"C_Cpp_Runner.linkerArgs\": [],\n  \"C_Cpp_Runner.includePaths\": [],\n  \"C_Cpp_Runner.includeSearch\": [\n    \"*\",\n    \"**/*\"\n  ],\n  \"C_Cpp_Runner.excludeSearch\": [\n    \"**/build\",\n    \"**/build/**\",\n    \"**/.*\",\n    \"**/.*/**\",\n    \"**/.vscode\",\n    \"**/.vscode/**\"\n  ]\n}</code></pre>\n<p>然后就可以在test.c中编辑代码按f5进行调试</p>\n<p>上述gcc路径和工作区路径自行更改即可</p>\n<p></p>\n</div>\n</div>"}