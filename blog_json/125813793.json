{"blogid": "125813793", "writerAge": "码龄1年", "writerBlogNum": "91", "writerCollect": "6696", "writerComment": "12539", "writerFan": "13070", "writerGrade": "7级", "writerIntegral": "19607", "writerName": "微凉秋意", "writerProfileAdress": "writer_image\\profile_125813793.jpg", "writerRankTotal": "415", "writerRankWeekly": "1", "writerThumb": "7501", "writerVisitNum": "121950", "blog_read_count": "1540", "blog_time": "已于 2022-07-18 09:09:48 修改", "blog_title": "C/C++牛客网刷题练习之翻转链表篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>✅作者简介：C/C++领域新星创作者，正在奋斗C领域和Java中<br/> ✨个人主页：<a href=\"https://blog.csdn.net/m0_58618795\">叶落秋白的主页</a><br/> 🔥系列专栏：<a href=\"https://blog.csdn.net/m0_58618795/category_11905274.html?\">牛客刷题专栏</a><br/> 📃推荐一款模拟面试、刷题神器👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_ylqb_c\">注册免费刷题</a></p>\n</blockquote>\n<p>🔥前言</p>\n<blockquote>\n<p>书接上文，上篇文章分享了<code>vector</code>容器的本质和基本使用。那么今天就来一个vector实战，就用<code>牛客网题库算法专栏</code>的题目来巩固加深vector容器的使用，旨在感受vector容器的多样化使用和牛客网题库<code>高质量</code>的特点。另外提一下本篇博客共讲解三道算法题，即一道简单和两道中等，分别考察链表的基础知识，vector容器的使用以及递归的综合应用，内容还是很<code>丰富</code>的，那就让我们开始吧！</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_10\">一、反转链表</a></li><li><ul><li><a href=\"#_11\">题目要求</a></li><li><a href=\"#_13\">我的题解</a></li><li><a href=\"#_16\">具体代码</a></li></ul>\n</li><li><a href=\"#_42\">二、链表内指定区间反转</a></li><li><ul><li><a href=\"#_43\">题目要求</a></li><li><a href=\"#_45\">我的题解</a></li><li><a href=\"#_49\">具体代码</a></li></ul>\n</li><li><a href=\"#k_90\">三、链表中的节点每k个一组翻转</a></li><li><ul><li><a href=\"#_91\">题目要求</a></li><li><a href=\"#_93\">我的题解</a></li><li><a href=\"#_96\">具体代码</a></li><li><ul><li><a href=\"#_126\">动态图解</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_128\">📃结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_10\"></a>一、反转链表</h1>\n<h2><a id=\"_11\"></a>题目要求</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0acd756a1751496faf0d8947cf2d90a4.png\"/></p>\n<h2><a id=\"_13\"></a>我的题解</h2>\n<blockquote>\n<p>既然是使用<code>vector</code>容器来做这道题，那么就在判断链表不为空的情况下把链表的结点全部放进vector容器中，然后调用<code>reverse(v.begin(),v.end());</code>函数将容器的元素<code>反转</code>，最后将容器中的元素赋值给一个新创建的链表并返回该链表即可。</p>\n</blockquote>\n<h2><a id=\"_16\"></a>具体代码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">ReverseList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pHead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pHead<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span>v<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pHead<span class=\"token operator\">=</span>pHead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ListNode <span class=\"token operator\">*</span>head<span class=\"token operator\">=</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ListNode <span class=\"token operator\">*</span>ptr<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            ptr<span class=\"token operator\">=</span>ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><code>ListNode *head=*v.begin(); </code>这段代码的意思是新建的head结点指向反转后容器中的第一个元素，因为<code>v.begin()</code>是一个迭代器，只有加上<code>\"*\"</code>解引用之后才是结点。最后让ptr的指针指向<code>NULL</code>，这样做是防止测试代码的时候不能正常的停止遍历，防止死循环。</p>\n</blockquote>\n<h1><a id=\"_42\"></a>二、链表内指定区间反转</h1>\n<h2><a id=\"_43\"></a>题目要求</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\984568abb7124dd889d247e50dcd892c.png\"/></p>\n<h2><a id=\"_45\"></a>我的题解</h2>\n<blockquote>\n<p>这题的意思就是在链表中<code>指定一段区间</code>进行反转，我还利用<code>vector</code>容器来操作。<br/> 首先排除区间为一的情况，如果区间为一，也就是<code>m==n</code>，直接返回链表即可；然后将链表全部存进<code>vector</code>中，然后把m和n的区间表示出来，通过一个<code>while</code>循环把指定区间的结点值反转；最后再把容器中的元素取出来放进新建的链表并返回即可。</p>\n</blockquote>\n<h2><a id=\"_49\"></a>具体代码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">/**\n     * @param head ListNode类 \n     * @param m int整型 \n     * @param n int整型 \n     * @return ListNode类\n     */</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverseBetween</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">==</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l<span class=\"token operator\">=</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            head<span class=\"token operator\">=</span>head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>val<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>val<span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span>\n            l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ListNode <span class=\"token operator\">*</span>L<span class=\"token operator\">=</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ListNode <span class=\"token operator\">*</span>ptr<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            ptr<span class=\"token operator\">=</span>ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>这样的思路很好理解吧，和第一题的步骤几乎一样，只是多了一个<code>while</code>循环来把指定区间的元素值进行反转，这样循序渐进可以加深这个借助<code>vector</code>容器来辅助解决问题的思想。</p>\n</blockquote>\n<h1><a id=\"k_90\"></a>三、链表中的节点每k个一组翻转</h1>\n<h2><a id=\"_91\"></a>题目要求</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f89e05c40a1d4770a5c2763da202bc63.png\"/></p>\n<h2><a id=\"_93\"></a>我的题解</h2>\n<blockquote>\n<p>这一题我想到的是要先分块进行翻转操作，最后再进行链表拼接。再三考虑下我选择了递归的方法，目的就是把所有的<code>\"块\"</code>翻转完之后能立刻拼接并返回该链表，这样不就能解决问题了吗。具体实现过程我会在该题具体代码的下面详解。</p>\n</blockquote>\n<h2><a id=\"_96\"></a>具体代码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverseKGroup</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head <span class=\"token operator\">||</span> k <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">//空指针及不需要翻转的情况直接返回head</span>\n        ListNode<span class=\"token operator\">*</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//pre指向右移前的当前结点</span>\n        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录当前ListNode</span>\n        ListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录下一个ListNode</span>\n        <span class=\"token comment\">//检测是否进行反转</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//检测ListNode数量是否大于k</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cur<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">//若不大于直接返回头</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向下一个ListNode</span>\n        <span class=\"token punctuation\">}</span>\n        cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">//检测完毕后cur复原成头</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录后一个ListNode</span>\n            cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span> <span class=\"token comment\">//cur指向前一个ListNode</span>\n            pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span> <span class=\"token comment\">//pre成为新的头结点并右移</span>\n            cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//cur右移</span>\n        <span class=\"token punctuation\">}</span>\n        head<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token function\">reverseKGroup</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//此时k个ListNode翻转完毕，head其实就是反转后的pre</span>\n        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回新的头</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>这段代码的<code>核心部分</code>就从第二个<code>for</code>循环开始了，首先利用<code>next</code>指针记录组内第二个结点；然后将<code>pre</code>指针插入到当前结点之后，将pre结点左移，这样pre就代表头结点且值为当前结点的值，然后当前结点<code>右移</code>，指向之前next记录的位置；循环的最终结果是该组的结点完成翻转，且pre为与head指向相同，让head指向下一个结点的递归结点即可，最后全部翻转后返回pre，程序结束。</p>\n</blockquote>\n<h3><a id=\"_126\"></a>动态图解</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/8f9daead175b4f6cb083c2f6ff18234a.gif#pic_center\"/></p>\n<h1><a id=\"_128\"></a>📃结语</h1>\n<p><code>只学不练是不会发现问题的，希望大家可以多多刷题巩固自己所学的知识，那么关于链表的老生常谈的算法就此结束了，下一期还会给大家带来经典有营养的经典算法题。期待你的订阅与支持哦~</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}