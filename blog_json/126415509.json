{"blogid": "126415509", "writerAge": "码龄1年", "writerBlogNum": "452", "writerCollect": "2376", "writerComment": "2977", "writerFan": "1317", "writerGrade": "7级", "writerIntegral": "11371", "writerName": "YZL40514131", "writerProfileAdress": "writer_image\\profile_126415509.jpg", "writerRankTotal": "1160", "writerRankWeekly": "98", "writerThumb": "2639", "writerVisitNum": "209393", "blog_read_count": "355", "blog_time": "于 2022-08-21 08:54:54 发布", "blog_title": "python面试题——设计模式之观察者模式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/a386ee3272f64a8989d0c8096ab22b60.webp#pic_center\"/></p>\n<h1><a id=\"1_2\"></a>1、观察者模式</h1>\n<p><strong><font color=\"#FF0000\" size=\"4\">观察者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</font></strong></p>\n<p><strong><font color=\"#1E90FF\" size=\"4\">观察者模式又称：\"发布-订阅\"模式。</font></strong></p>\n<p>比如，微信公众号，就是一种观察者模式的应用：<br/> 一个公众号对应了多个（N）个 订阅者，公众号发布了新的文章，所有的订阅者都会被通知并更新。<br/> 也就相当于，我们所有的订阅者就是观察者，我们观察这个公众号（发布者），他一更新，我们就能知道.</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e24e78973df7447987c8d33cba697c60.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\2cac4705347a45249fa15a68b6079108.png\"/></p>\n<h1><a id=\"2_15\"></a>2、哪些情况下适用于观察者模式：</h1>\n<blockquote>\n<p><font color=\"#FF0000\" size=\"4\"><strong>当一个抽象模型有两个方面，其中一个方面的操作依赖于另外一个方面的状态变化。<br/> 如果在更改一个对象的时候，需要同时连带改变其他的对象，而且不知道究竟应该有多少对象需要被连带改变<br/> 当一个对象必须通知其他对象，但是你又希望这个对象和其他被通知对象是松耦合的。</strong></font></p>\n</blockquote>\n<h1><a id=\"3_21\"></a>3、观察者模式的角色（使用我们前面学习的抽象基类）：</h1>\n<blockquote>\n<p><strong><font color=\"#FF0000\" size=\"4\">抽象的发布者（Subject）<br/> 具体的发布者（ConcreteSubject）<br/> 抽象的观察者（Observer）<br/> 具体的观察者（ConcreteObserver）</font></strong></p>\n</blockquote>\n<h1><a id=\"4_27\"></a>4、观察者模式的结构</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\56fa01b679c34efa81d185221812f8c3.png\"/></p>\n<h1><a id=\"5_30\"></a>5、代码实现</h1>\n<pre><code>from abc import ABC,abstractmethod\n\n#抽象的观察者(抽象基类)\nclass Observer(ABC):\n    @abstractmethod\n    def update(self,subject):\n        pass\n\n\n#抽象的发布者\nclass Subject(ABC):\n\n    def __init__(self):\n        self.observer_list=[]\n\n    #抽象方法，添加观察者\n    @abstractmethod\n    def attach(self,obs):\n        pass\n\n    # 抽象方法，移除观察者\n    @abstractmethod\n    def detach(self, obs):\n        pass\n\n    # 抽象方法，通知观察者\n    @abstractmethod\n    def notify(self,abs):\n        pass\n\n#具体的发布者\nclass ConcreteSubject(Subject):\n    def __init__(self,name):\n        super().__init__()\n        self.name = name\n        #新文章\n        self.new_text=''\n\n    #具体的添加观察者方法\n    def attach(self,obs):\n        self.observer_list.append(obs)\n\n    # 具体的移除观察者方法\n    def detach(self, obs):\n        pass\n\n    # 具体的通知观察者方法（通知所有的观察者）\n    def notify(self):\n        for obs in self.observer_list:\n            obs.update(self)\n\n    #写文章的方法\n    def write_text(self,text):\n        self.new_text=text\n        self.notify()\n\n\n#具体的观察者（订阅者）\nclass ConcreteObserver(Observer):\n    def __init__(self,name):\n        self.name=name\n        self.read_list=[]\n\n    def update(self, subject):\n        self.read_list.append( {'公众号': subject.name, '文章': subject.new_text} )\n        print(self.name, '您有新的公众号推送', '\\n', self.read_list)\n\n\n\n\n# 实例化一个 发布者\naMen = ConcreteSubject('阿门')\n# 实例化 2个 具体的订阅者(观察者， 微信用户)\nzhangsan = ConcreteObserver('张三')\nlisi = ConcreteObserver('李四')\n# 发布者添加 订阅者（观察者）\naMen.attach(zhangsan)\naMen.attach(lisi)\n# 阿门公众号 更新文章\naMen.write_text('云中歌')\n# 实例化另一个公众号\nerGeng = ConcreteSubject('二更')\nerGeng.attach(zhangsan)\nerGeng.attach(lisi)\nerGeng.write_text('发现身边不知道的美')\n</code></pre>\n<p><strong>执行结果：</strong><br/> 张三 您有新的公众号推送<br/> [{‘公众号’: ‘阿门’, ‘文章’: ‘云中歌’}]<br/> 李四 您有新的公众号推送<br/> [{‘公众号’: ‘阿门’, ‘文章’: ‘云中歌’}]<br/> 张三 您有新的公众号推送<br/> [{‘公众号’: ‘阿门’, ‘文章’: ‘云中歌’}, {‘公众号’: ‘二更’, ‘文章’: ‘发现身边不知道的美’}]<br/> 李四 您有新的公众号推送<br/> [{‘公众号’: ‘阿门’, ‘文章’: ‘云中歌’}, {‘公众号’: ‘二更’, ‘文章’: ‘发现身边不知道的美’}]</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6787200eb3c54f92ac9a96410b4da561.jpeg\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/6b30b9b1558c45bc9763aa1dee73a63f.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}