{"blogid": "125549346", "writerAge": "码龄1年", "writerBlogNum": "5", "writerCollect": "9", "writerComment": "1", "writerFan": "3", "writerGrade": "1级", "writerIntegral": "57", "writerName": "胖崽配猪", "writerProfileAdress": "writer_image\\profile_125549346.jpg", "writerRankTotal": "120526", "writerRankWeekly": "1069881", "writerThumb": "7", "writerVisitNum": "1845", "blog_read_count": "883", "blog_time": "已于 2022-07-01 00:34:58 修改", "blog_title": "Unity之简单射击游戏案例", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><span style=\"color:#be191c;\"><em><span style=\"background-color:#fbd4d0;\">PS：该案例来自学习的</span></em></span><span style=\"color:#be191c;\"><em><span style=\"background-color:#fbd4d0;\">课本和我自己的理解。首次文章创作，还请多多支持呀各位美女、帅哥们！！！</span></em></span></p>\n<p><em>*废话不多说先上游戏实机操作视频*</em></p>\n<p></p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"SWqsfRcA-1656599168032\" src=\"https://live.csdn.net/v/embed/220878\"></iframe>\n<p>射击游戏实机操作_Trim</p>\n</div>\n<p></p>\n<p><u>游戏内容大致如下：</u></p>\n<p>(1)完全使用键盘控制，由W、A、S、D键控制角色的方向移动，J键控制射击。(这样做主要是为了简化游戏输入部分的逻辑。)<br/> (2)玩家具有多种武器，如手枪、霞弹枪和自动步枪，每种武器可以按Q键切换。<br/> (3)场景上除了玩家角色还有若干敌人。敌人会向玩家方向移动并射击玩家。<br/> (4)玩家角色和敌人都有生命值，中弹后生命值减少，减为零时则死亡。</p>\n<p><strong><em><u>那么接下来就看看实现过程吧！文末有游戏半成品分享，不嫌弃就玩玩看哈。</u></em></strong></p>\n<p></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%E8%A7%92%E8%89%B2%E8%84%9A%E6%9C%AC-toc\" style=\"margin-left:0px;\"><a href=\"#1.%E8%A7%92%E8%89%B2%E8%84%9A%E6%9C%AC\">1.角色脚本</a></p>\n<p id=\"2.%E8%B7%9F%E9%9A%8F%E6%91%84%E5%83%8F%E6%9C%BA-toc\" style=\"margin-left:0px;\"><a href=\"#2.%E8%B7%9F%E9%9A%8F%E6%91%84%E5%83%8F%E6%9C%BA\">2.跟随摄像机</a></p>\n<p id=\"3.%E6%AD%A6%E5%99%A8%E7%B3%BB%E7%BB%9F%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#3.%E6%AD%A6%E5%99%A8%E7%B3%BB%E7%BB%9F%C2%A0\">3.武器系统 </a></p>\n<p id=\"%E6%AD%A6%E5%99%A8%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%AD%A6%E5%99%A8%EF%BC%9A\">武器</a></p>\n<p id=\"%E5%AD%90%E5%BC%B9%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%AD%90%E5%BC%B9%EF%BC%9A\">子弹</a></p>\n<p id=\"4.%E5%B0%84%E5%87%BB%E7%9A%84%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:0px;\"><a href=\"#4.%E5%B0%84%E5%87%BB%E7%9A%84%E5%AE%9E%E7%8E%B0\">4.射击的实现</a></p>\n<p id=\"5.%E6%B8%B8%E6%88%8F%E5%85%A8%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5.%E6%B8%B8%E6%88%8F%E5%85%A8%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8\">5.游戏全局管理器</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p><span style=\"color:#4da8ee;\"><em>场景中，平台平面设为20x20的Plane</em></span></p>\n<h1 id=\"1.%E8%A7%92%E8%89%B2%E8%84%9A%E6%9C%AC\">1.角色脚本</h1>\n<blockquote>\n<p><strong>首先我们要创建出游戏玩家和敌人，包含（生命、移速等）属性，并给予他们特定的移动机制如下</strong></p>\n<p>玩家：自由移动，但活动限制在平台区域。</p>\n<p>敌人：始终朝向敌人移动，但速度相对较慢。</p>\n</blockquote>\n<p> 玩家脚本（Player）代码如下：</p>\n<pre><code class=\"language-cs\">//移动速度\n    public float c_speed;\n\n    //最大血量\n    public float m_maxHp ;\n\n    //输入方向变量\n    Vector3  c_input;\n\n    //判断是否死亡\n    bool LifeState=true;\n\n    //当前血量\n    private float c_Hp;\n void Start()\n    {\n        //刚开始满血\n        c_Hp = m_maxHp;\n  }\n void Update()\n    {\n        //将键盘的横向、纵向输入，保存在input中\n        c_input = new Vector3(Input.GetAxis(\"Horizontal\"), 0, Input.GetAxis(\"Vertical\"));\n\n        bool fireKeyDown = Input.GetKeyDown(KeyCode.J);\n        bool fireKeyPressed = Input.GetKey(KeyCode.J);\n        bool changeWeapon = Input.GetKeyDown(KeyCode.Q);\n\n\n        //判断是否dead，还活着就可以动\n\n        Debug.Log(\"现在还剩血量：\" + c_Hp);\n void Move()\n        {\n            //先归一化输入变量，让输入更直接，避免同时斜向移动时速度超过最大值\n            c_input =c_input.normalized;\n            transform.position += c_input * c_speed * Time.deltaTime;\n            //令角色前方与移动方向一致\n            if (c_input.magnitude &gt; 0.1f)\n            {\n                transform.forward = c_input;\n            }\n\n            //限制移动范围\n            Vector3 c_VectorTemp=transform.position ;\n            const float m_border = 20f;\n            if(c_VectorTemp.x &lt; -m_border)\n            {\n                c_VectorTemp.x = -m_border;\n\n            }\n            if (c_VectorTemp.x &gt; m_border)\n            {\n                c_VectorTemp.x = m_border;\n\n            }\n            if (c_VectorTemp.z &lt; -m_border)\n            {\n                c_VectorTemp.z = -m_border;\n\n            }\n            if (c_VectorTemp.z &gt; m_border)\n            {\n                c_VectorTemp.z = m_border;\n\n            }\n\n            transform.position = c_VectorTemp;\n\n\n\n\n        }\n\n\n\n    }\n</code></pre>\n<p>敌人脚本（Enemy）代码如下：</p>\n<pre><code class=\"language-cs\"> public float speed = 6;\n public float maxHp=4;\n Vector3 input;\n Transform player;\n float hp;\n  bool lifeState = true;\n\n  void Start()\n    {\nplayer = GameObject.Find(\"Player\").transform;\nhp = maxHp;\n   }\n    void Update()\n    {\n        \n\n        EnemyMove();\n Debug.Log(\"敌人还剩血量：\" + hp);\n   }\n //敌人的移动机制\n    void EnemyMove()\n    {\n        //敌人的移动是始终朝向玩家的，他想干掉我们\n        input = player.position - transform.position;\n        input = input.normalized;\n\n        transform.position += input * speed * Time.deltaTime;\n        if (input.magnitude &gt; 0.1f)\n        {\n            transform.forward = input;\n        }\n    }\n</code></pre>\n<h1 id=\"2.%E8%B7%9F%E9%9A%8F%E6%91%84%E5%83%8F%E6%9C%BA\">2.跟随摄像机</h1>\n<blockquote>\n<p>将摄像机调整至合适位置后，利用三维向量的差值，以玩家为原点为摄像机变换位置</p>\n</blockquote>\n<p>赋予主摄像机如下脚本（FollowPlayer）代码 ：</p>\n<pre><code class=\"language-cs\">public Transform followTaeget;\n    Vector3 offset;\n\n    \n    void Start()\n    {\n        //设置偏移量\n        offset = transform.position - followTaeget.position;\n    }\n\n   \n    void LateUpdate()\n    {\n        \n        transform.position =  followTaeget.position + offset;\n        \n    }</code></pre>\n<p><em>上面代码中，摄像机的移动放在LateUpdate事件中，避免了帧数问题引起的游戏视角界面卡顿。</em></p>\n<h1 id=\"3.%E6%AD%A6%E5%99%A8%E7%B3%BB%E7%BB%9F%C2%A0\">3.武器系统 </h1>\n<blockquote>\n<p><strong><span style=\"background-color:#38d8f0;\">敲黑板了！！！！！！  这一块灰常的重要哦。武器系统是玩家和敌人公用的一块。</span></strong></p>\n<p></p>\n<h2 id=\"%E6%AD%A6%E5%99%A8%EF%BC%9A\">武器</h2>\n<p>0.手枪：单射，有射击间隔 ，我感觉没啥用的一把枪。</p>\n<p>1.霰弹枪：单射且同时射出五发子弹，射程短的可怜！</p>\n<p>2.自动步枪：连射，用起来挺爽的！</p>\n<p></p>\n<h2 id=\"%E5%AD%90%E5%BC%B9%EF%BC%9A\">子弹</h2>\n<p>创建两个预制体分为PlayerBullet和EnemyBullet</p>\n<p><strong>属性</strong>：具有生命周期</p>\n<p></p>\n<p></p>\n</blockquote>\n<p>这里先实现武器系统组件脚本，代码如下：</p>\n<pre><code class=\"language-cs\">public class Weapon : MonoBehaviour\n{\n\n    //子弹的预制体\n    public GameObject prefabBullet;\n\n    //几种武器的CD长度\n    public float pistolFireCD = 0.2f;\n    public float shotgunFireCD = 0.5f;\n    public float rifleFireCD = 0.1f;\n\n    //上次开火时间\n    float lastFireTime;\n\n    //当前的武器\n    public int curGun    //  0:手枪，1：霰弹枪，2：自动步枪\n    {\n        get;\n        private set;\n    }\n\n    //设置开火函数\n    //keyDown指代单射，keyPressed指代连射\n    public void Fire(bool keyDown,bool keyPressed)\n    {\n        switch (curGun)\n        {\n            case 0:\n            if (keyDown)\n                {\n                    PistolFire();\n                }\n                break;\n            case 1:\n                if (keyDown)\n                {\n                    ShotgunFire();\n                }\n                break;\n            case 2:\n                if(keyPressed)\n                {\n                    RifleFire();\n                }\n                break;\n\n        }\n\n    }\n\n    //更换武器\n    public int Change()\n    {\n        if (curGun != 3)\n        {\n            curGun++;\n        }\n        else\n        {\n            curGun = 0;\n        }\n        return curGun;\n    }\n\n    //手枪射击专用函数\n    public void PistolFire()\n    {\n        if (lastFireTime + pistolFireCD &gt; Time.time)\n            return;\n        lastFireTime = Time.time;\n\n        GameObject bullet = Instantiate(prefabBullet, null);\n        bullet.transform.position = transform.position + transform.forward * 1f;\n        bullet.transform.forward = transform.forward;\n    }\n    //霰弹射击专用函数\n    public void ShotgunFire()\n    {\n        if (lastFireTime + shotgunFireCD &gt; Time.time)\n            return;\n        lastFireTime = Time.time;\n\n       //创建5颗子弹，相互间间隔10度，分布于前方扇形区域\n       for(int i = -2; i &lt;= 2; i++)\n        {\n            GameObject bullet = Instantiate(prefabBullet, null);\n            Vector3 dir = Quaternion.Euler(0, i * 10, 0) * transform.forward;\n\n            bullet.transform.position = transform.position + dir * 1f;\n            bullet.transform.forward = dir;\n\n            //霰弹枪的子弹射击距离很短，因此修改子弹的生命周期\n            Bullet b = bullet.GetComponent&lt;Bullet&gt;();\n            b.lifeTime = 0.3f;\n        }\n    }\n    //自动步枪射击专用函数\n    public void RifleFire()\n    {\n        if (lastFireTime + rifleFireCD &gt; Time.time)\n            return;\n        lastFireTime = Time.time;\n\n        GameObject bullet = Instantiate(prefabBullet, null);\n        bullet.transform.position = transform.position + transform.forward * 1.2f;\n        bullet.transform.forward = transform.forward;\n    }\n    void Start()\n    {\n        \n    }\n\n   \n    void Update()\n    {\n        \n    }\n}\n</code></pre>\n<p>接下是为子弹创建脚本，代码如下：</p>\n<pre><code>public class Bullet : MonoBehaviour\n{\n    public float c_bulletSpeed = 10f;\n    //设置子弹的生命周期\n    public float lifeTime = 2;\n    //子弹生成的时间\n    float startTime;\n   \n    void Start()\n    {\n        startTime = Time.time;\n    }\n\n   \n    void Update()\n    {\n        //子弹移动\n        transform.position+= c_bulletSpeed * transform.forward * Time.deltaTime;\n        //自毁装置\n        if (startTime + lifeTime &lt; Time.time)\n            Destroy(gameObject);\n    }\n\n    //中弹事件\n    private void OnTriggerEnter(Collider other)\n    {\n        //同类子弹碰撞不销毁\n        if (CompareTag(other.tag))\n            return;\n\n        Destroy(gameObject);\n    }\n}</code></pre>\n<p>上面的“中弹事件”在后文的<u><em>射击的实现</em></u>会用到滴！ </p>\n<p></p>\n<h1 id=\"4.%E5%B0%84%E5%87%BB%E7%9A%84%E5%AE%9E%E7%8E%B0\">4.射击的实现</h1>\n<blockquote>\n<p>有了武器，那么敌人和玩家的脚本都可以进行更新了，运用武器系统实例对象实现攻击。同时，在相互射击的过程中，如果一方中弹，则扣一滴血。</p>\n<p>己方子弹射中自己不造成伤害，子弹击中对方后消失，子弹相互碰撞也消失。</p>\n<p><strong>子弹碰撞逻辑：</strong></p>\n<p>碰撞事件是相对的，因此子弹碰撞的逻辑可以写在 Bullet 脚本、Player脚本或 Enemy 脚本中。在制作时最好单独考虑碰撞问题，然后统一编写。要制作的效果如下。<br/> 1、玩家角色的子弹击中敌人角色，会让敌人角色掉血。<br/> 2、敌人角色的子弹击中玩家角色，会让玩家角色掉血。<br/> 3、玩家角色的子弹不会击中玩家角色，敌人角色的子弹也不会击中敌人角色。<br/> 4、玩家角色的子弹与敌人角色的子弹可以相互抵消，但是同类子弹不能抵消。这一设计可以根据读者的偏好添加或取消。<br/> 从以上分析可以看出，“敌人角色的子弹”与“玩家角色的子弹”是截然不同的，最好用某种机制区分出二者。课本作者采用的方法是把这两种子弹做成两个不同的预制体，一个命名为PlayerBullet，另一个命名为EnemyBullet。然后利用标签(Tag)做出区分，前者的Tag是PlayerBullet，后者的Tag是EnemyBullet。</p>\n</blockquote>\n<p>那么，请在之前的Player脚本中添加如下代码：</p>\n<pre><code class=\"language-cs\">\n Weapon weapon;\n \n    void Start()\n    {\n       //给武器类对象变量引用脚本\n        weapon = GetComponent&lt;Weapon&gt;();\n    }\n\n  void Update()\n    {\n    if (LifeState==true )\n        {\n\n\n            Move();\n            weapon.Fire(fireKeyDown, fireKeyPressed);\n            if (changeWeapon)\n            {\n                weapon.Change();\n            }\n            \n\n        }\n        else { Time.timeScale = 0; }\n\n\n private void OnTriggerEnter(Collider other)\n    {\n        if (other.CompareTag(\"EnemyBullet\"))\n        {\n            if (c_Hp &lt;= 0) { return; }\n            c_Hp-=1;\n            if (c_Hp == 0) { LifeState = false; }\n        }\n    }\n</code></pre>\n<p> 相应的，对敌人的脚本（Enemy）也添加如下代码：</p>\n<pre><code class=\"language-cs\">  public float fireTime = 1f;\n  float m_time ;\n\n Weapon weapon;\n void Start()\n    {\n weapon = gameObject.GetComponent&lt;Weapon&gt;();\n m_time = Time.time;\n    }\n   void Update()\n    {\n        \n\n        EnemyMove();\n        endFire();\n        Debug.Log(\"敌人还剩血量：\" + hp);\n        if (hp &lt;= 0)\n        {\n           // Instantiate(prefabBoomEffect, transform.position, transform.rotation);\n            Destroy(gameObject);\n           \n                Debug.Log(\"恭喜你赢了！重要的事情说三遍\");\n                Debug.Log(\"恭喜你赢了！重要的事情说三遍\");\n                Debug.Log(\"恭喜你赢了！重要的事情说三遍\");\n          \n           \n        }\n\n       \n    }\n\n   //控制攻击间隔\n    void endFire()\n    {\n        if (m_time + fireTime &lt; Time.time)\n        {\n            Fire();\n            m_time = Time.time;\n        }\n\n    }\n\n    //敌人的攻击机制\n    void Fire()\n    {\n        weapon.Fire(true, true);\n    }\n\n    private void OnTriggerEnter(Collider other)\n    {\n        if (other.CompareTag(\"PlayerBullet\"))\n        {\n            if (hp &lt;= 0) { return; }\n            hp--;\n            if (hp == 0) { lifeState = false; }\n        }\n    }\n</code></pre>\n<p></p>\n<h1 id=\"5.%E6%B8%B8%E6%88%8F%E5%85%A8%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8\">5.游戏全局管理器</h1>\n<p><em>我还不会这一部分，那咱们就总结一下吧！【doge】</em></p>\n<p><em>游戏的脚本一共是涉及下面六个</em></p>\n<p><img alt=\"\" height=\"53\" src=\"image\\41fd374ecabe4f918be9b6f777f08472.png\" width=\"1200\"/></p>\n<p>涉及的必要游戏物体有Player、Enemy、Plane</p>\n<p><img alt=\"\" height=\"136\" src=\"image\\fe1113599a96406987becae9b7097d37.png\" width=\"265\"/></p>\n<p>游戏半成品下载地址：https://pan.baidu.com/s/1FtJMS23XGMH4FB2TKnuXDA <br/> 提取码：PZPZ </p>\n<p><span style=\"color:#fe2c24;\">PS：终于写完了，睡觉了，困死了！！！！！！！ </span></p>\n<p></p>\n<p></p>\n</div>\n</div>"}