{"blogid": "123861771", "writerAge": "码龄3年", "writerBlogNum": "87", "writerCollect": "129", "writerComment": "11", "writerFan": "4618", "writerGrade": "4级", "writerIntegral": "843", "writerName": "渔夫ciao", "writerProfileAdress": "writer_image\\profile_123861771.jpg", "writerRankTotal": "22945", "writerRankWeekly": "3261", "writerThumb": "34", "writerVisitNum": "25919", "blog_read_count": "14183", "blog_time": "已于 2022-04-02 17:19:40 修改", "blog_title": "Python打包成exe文件_详细操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Python打包成exe文件</h3>\n<ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#pyinstaller_12\">一、安装pyinstaller</a></li><li><ul><li><a href=\"#11_pyinstaller_14\">1.1 安装pyinstaller，使用安装命令：</a></li><li><a href=\"#12__21\">1.2 如果遇到需要更新版本请输入：</a></li><li><a href=\"#13__26\">1.3 检查是否正确安装</a></li><li><a href=\"#14__29\">1.4 稍等，水一下;</a></li></ul>\n</li><li><a href=\"#pythonexe_32\">二、python打包成exe文件（附带图标打包）</a></li><li><ul><li><a href=\"#21_cd_34\">2.1 第一种：cd到指定文件夹打包存放</a></li><li><a href=\"#22_cdpy_46\">2.2 第二种方法：cd到py源文件夹内打包存放</a></li><li><a href=\"#23_59\">2.3最终效果</a></li></ul>\n</li><li><a href=\"#_66\">参考：命令解释</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<ol><li>我原本是学C\\C++，这是本人第一篇关于python的文章。请多多关照！</li><li>对于python为什么要打包成exe文件，是因为传输源文件以及源代码给他人是需要配置好一定的环境才能进行编译操作，而打包成exe文件就可以跟电脑软件一样打开就可以运行也可以分享给他人。但是打包好的exe文件并不是很方便去拆包，所以在打包前一定要测试之后在打包发布。</li><li>版本控制方面尽量选择python3.6+32位版本，因为win64位系统向下兼容32位程序，如果不考虑32位系统的话无所谓，直接python64位版本直接打包就可以，但是只能在win64位系统运行。</li><li>好了下面我将从安装pyinstaller开始介绍，然后是打包教程，最后是命令解释。</li><li>\n<blockquote>\n<p>PS：本次教程，我们不用cmd命令的小黑窗；<br/> 本次教程使用：Windows PowerShell(X86)<br/> 记得使用：管理员运行<br/> 图片最好使用ico后缀的图片，要么下载个格式转换。自己转换使用</p>\n</blockquote> </li></ol>\n<h1><a id=\"pyinstaller_12\"></a>一、安装pyinstaller</h1>\n<h2><a id=\"11_pyinstaller_14\"></a>1.1 安装pyinstaller，使用安装命令：</h2>\n<pre><code class=\"prism language-cpp\">pip3 install pyinstaller\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\521b5ba25ffb439bb577b9766c82862a.png\"/></p>\n<h2><a id=\"12__21\"></a>1.2 如果遇到需要更新版本请输入：</h2>\n<pre><code class=\"prism language-cpp\">pip install <span class=\"token operator\">--</span>upgrade pyinstaller\n</code></pre>\n<h2><a id=\"13__26\"></a>1.3 检查是否正确安装</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\31d5655784df48f5b8ec008997fd1dce.png\"/><br/> emmmm好像安装完成了，</p>\n<h2><a id=\"14__29\"></a>1.4 稍等，水一下;</h2>\n<p>python打包工具众多，推荐使用pyinstaller，本工具支持window和linux下使用。在windows下，大小为几十kb的源文件，打包成exe文件可能为几十兆，原因是把程序所引用的库文件也一起打包在一起了。</p>\n<h1><a id=\"pythonexe_32\"></a>二、python打包成exe文件（附带图标打包）</h1>\n<p><mark>本次打包有两种方法，根据自己勤快程度选择吧！</mark></p>\n<h2><a id=\"21_cd_34\"></a>2.1 第一种：cd到指定文件夹打包存放</h2>\n<p>第一步：移动到指定存放exe文件的文件夹</p>\n<pre><code class=\"prism language-cpp\">cd 文件夹路径\n例子：cd C<span class=\"token operator\">:</span>\\FILE2\\python_file\n</code></pre>\n<p>第二步：打包就完事了(看代码)</p>\n<pre><code class=\"prism language-cpp\">pyinstaller <span class=\"token operator\">-</span>F <span class=\"token operator\">-</span>w <span class=\"token operator\">-</span>i 路径一<span class=\"token punctuation\">(</span>图标<span class=\"token punctuation\">)</span> 路径二<span class=\"token punctuation\">(</span>py文件<span class=\"token punctuation\">)</span>\n例子：pyinstaller <span class=\"token operator\">-</span>F <span class=\"token operator\">-</span>w <span class=\"token operator\">-</span>i  D<span class=\"token operator\">:</span>\\python_file\\BindundunDemo\\qt<span class=\"token operator\">-</span>logo<span class=\"token punctuation\">.</span>ico  D<span class=\"token operator\">:</span>\\python_file\\BindundunDemo\\main<span class=\"token punctuation\">.</span>py\n</code></pre>\n<h2><a id=\"22_cdpy_46\"></a>2.2 第二种方法：cd到py源文件夹内打包存放</h2>\n<p>第一步：移动到源文件文件内</p>\n<pre><code class=\"prism language-cpp\">cd 文件夹路径\n例子：cd C<span class=\"token operator\">:</span>\\FILE2\\python\n</code></pre>\n<p>第二步：还是打包就完事了(看代码)</p>\n<pre><code class=\"prism language-cpp\">pyinstaller <span class=\"token operator\">-</span>F <span class=\"token operator\">-</span>w <span class=\"token operator\">-</span>i 图标名<span class=\"token punctuation\">.</span>后缀 源文件<span class=\"token punctuation\">.</span>py\n例子：pyinstaller <span class=\"token operator\">-</span>F <span class=\"token operator\">-</span>w <span class=\"token operator\">-</span>i qt<span class=\"token operator\">-</span>logo<span class=\"token punctuation\">.</span>ico one<span class=\"token punctuation\">.</span>py\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ce07940f60da4abd90bfff5305a04c7c.png\"/></p>\n<h2><a id=\"23_59\"></a>2.3最终效果</h2>\n<p>dist文件里存放的是你生成的exe文件，点击即可使用。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3560db7a59ba4d8ab9b32fa55d2928a4.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a3814c3c31564bd78c1864b099dc4b2b.png\"/><br/> 至此，本次教程结束！<br/> <mark>下面还有命令解释，请细细品尝。</mark></p>\n<h1><a id=\"_66\"></a>参考：命令解释</h1>\n<table><thead><tr><th>命令</th><th>命令全称</th><th>命令解释</th></tr></thead><tbody><tr><td>-F</td><td>–onefile</td><td>打包成单个可执行文件，如果你的代码都写在一个.py文件，则可以使用，如果是多个.py文件，建议不要使用。</td></tr><tr><td>-D</td><td>–onedir</td><td>打包多个文件，在dist中生成很多依赖文件，适合以框架形式编写工具代码，该方式代码较易于维护。默认编译就是-D的</td></tr><tr><td>-K</td><td>–tk</td><td>在部署时包含 TCL/TK。</td></tr><tr><td>-a</td><td>–ascii</td><td>不包含编码.在支持Unicode的python版本上默认包含所有的编码。</td></tr><tr><td>-d</td><td>–debug</td><td>产生debug版本的可执行文件</td></tr><tr><td>-w</td><td>–windowed,–noconsole</td><td>使用Windows子系统执行.当程序启动的时候不会打开命令行(仅对Windows有效)</td></tr><tr><td>-c</td><td>–nowindowed,–console</td><td>使用控制台子系统执行(默认)(只对Windows有效)</td></tr><tr><td>-s</td><td>–strip</td><td>可执行文件和共享库将run through strip。注意Cygwin的strip可能使普通的win32 Dll无法使用</td></tr><tr><td>-X</td><td>–upx</td><td>如果有UPX安装(执行Configure.py时检测)，则会压缩执行文件(Windows系统中的DLL也会)。</td></tr><tr><td>-o DIR</td><td>–out=DIR</td><td>指定spec文件的生成目录,如果没有指定,而且当前目录是PyInstaller的根目录,会自动创建一个用于输出(spec和生成的可执行文件)的目录.如果没有指定,而当前目录不是PyInstaller的根目录,则会输出到当前的目录下。</td></tr><tr><td>-p DIR</td><td>–path=DIR</td><td>设置导入路径(和使用PYTHONPATH效果相似)。可以用路径分割符(Windows使用分号，Linux使用冒号)分割,指定多个目录.也可以使用多个-p参数来设置多个导入路径，让pyinstaller自己去找程序需要的资源</td></tr><tr><td>-i &lt;FILE.ICO&gt;</td><td>–icon=&lt;FILE.ICO&gt;</td><td>将file.ico添加为可执行文件的资源(只对Windows系统有效)，改变程序的图标 pyinstaller -i ico路径 xxxxx.py</td></tr><tr><td>–i &lt;FILE.EXE, N&gt;</td><td>–icon=&lt;FILE.EXE, N&gt;</td><td>将file.exe的第n个图标添加为可执行文件的资源(只对Windows系统有效)</td></tr><tr><td>-v FILE</td><td>–version=FILE</td><td>将verfile作为可执行文件的版本资源(只对Windows系统有效)</td></tr><tr><td>-n NAME</td><td>–name=NAME</td><td>可选的项目(产生的spec的)名字.如果省略，第一个脚本的主文件名将作为spec的名字</td></tr></tbody></table>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}