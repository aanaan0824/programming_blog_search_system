{"blogid": "124093271", "writerAge": "码龄12年", "writerBlogNum": "1", "writerCollect": "4", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "10", "writerName": "玉老虎", "writerProfileAdress": "writer_image\\profile_124093271.jpg", "writerRankTotal": "249758", "writerRankWeekly": "160048", "writerThumb": "0", "writerVisitNum": "1674", "blog_read_count": "1668", "blog_time": "于 2022-04-11 11:35:40 发布", "blog_title": "浅谈web api和Webservice", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"web_apiWebservice_0\"></a>浅谈web api和Webservice</h1>\n<pre><code>\twebapi用的是http协议，webservice用的是soap协议 \n\twebapi无状态，相对webservice更轻量级。webapi支持如get,post等http操作\n</code></pre>\n<h1><a id=\"Web_Api_7\"></a>一、Web Api</h1>\n<pre><code>Web Api是什么？\n</code></pre>\n<p>Web Api，网络应用程序接口。它包含了广泛的功能，网络应用通过API接口，可以实现存储服务、消息服务、计算服务的能力，利用这些能力可以进行开发出强大功能的web应用。简单来说，就是一个接口，比如说，我们要做前后端分离的项目，前端和后端通过url连接，但是我们如何知道后端的数据是否通了，返回的数据是否正确，于是我们通过这个接口知道。</p>\n<pre><code>1.特点\n</code></pre>\n<p>webapi用的是http协议，webservice用的是soap协议<br/> webapi无状态，相对webservice更轻量级。webapi支持如get,post等http操作<br/> http:是一个客户端和服务器端请求和应答的标准（TCP）。http协议其目的是为了提供一种发布和接收htttp页面的方法一http协议的客户端与服务器的交互：由HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如”HTTP/1.1 200 OK”，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。</p>\n<p>1 是简单的 构建HTTP服务的新框架<br/> 2 在.net平台上WebApi是一个开源的，理想的，构建REST-FUL服务的技术<br/> 3 不想WCF REST Server 它可以使用HTTP的全部特点（URI,request/response头，缓存，版本控制，多种内容格式）<br/> 4 支持MVC的特征。像路由、控制器、action、filter、模型绑定、控制反转（IOC）或依赖注入（DI），单元测试。<br/> 4 可以部署在IIS和应用程序上<br/> 6 轻量级框架，并且对限制带宽的设备，比如智能手机等支持的很好<br/> 7、Response可以被Web API的MediaTypeFormatter转换成Json、XML 或者任何你想转换的格式。<br/> 8、Web API非常适合构建移动客户端服务</p>\n<h1><a id=\"Web_service_25\"></a>二、Web service</h1>\n<pre><code>Web service定义：\n</code></pre>\n<p>Web service是一个平台独立的，松耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。</p>\n<pre><code>1.特点\n</code></pre>\n<p>它描述了一种在分散或分布式的环境中如何交换信息的轻量级协议。soap在http协议的基础上，一个基于XML的协议。<br/> SOAP：Simple Object Access Protocol 简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，它被设计成在 WEB 上交换结构化的和固化的信息。 SOAP 可以和现存的许多因特网协议和格式结合使用，包括超文本传输协议（ HTTP），简单邮件传输协议（SMTP），多用途网际邮件扩充协议（MIME）。它还支持从消息系统到远程过程调用（RPC）等大量的应用程序。</p>\n<p>1 基于SOAP协议的，数据格式为XML<br/> 2 只支持HTTP协议<br/> 3 不是开源的，但可以被任意一个了解XML的人使用<br/> 4 只能部署在IIS上</p>\n<p>SOAP :简单对象访问协议Simple Object Access Protocol,传输层 ，,XML传输消息<br/> WSDL:Web Server Description Language ：Web Server描述语言(元数据)，给客户端生成代理类的一个描述信息<br/> UDDI :提供了一组基于标准的规范用于描述和发现服务，统一描述，发现和集成（UDDI-Universal Descript,Discovery,Integration），提供注册和查找服务<br/> 客户端在UDDI注册表（Registry）查找服务，取得服务的WSDL描述，通过SOAP调用服务。</p>\n<h1><a id=\"WEB_APIWeb_service_43\"></a>WEB API与Web service的抉择</h1>\n<p>以下情况可以考虑用Web API<br/> 1、 需要Web Service但是不需要SOAP<br/> 2、 需要在已有的WCF服务基础上建立non-soap-based http服务<br/> 3、 只想发布一些简单的Http服务，不想使用相对复杂的WCF配置<br/> 4、 发布的服务可能会被带宽受限的设备访问<br/> 5、 希望使用开源框架，关键时候可以自己调试或者自定义一下框架<br/> 6、如果服务需要在http协议上，并且希望利用http协议的各种功能<br/> 7、如果服务需要被各种客户端(特别是移动客户端)调用</p>\n<p>webapi多用于基于http请求的服务应用,比如说移动服务端或者需要提供第三方API 服务的场景下<br/> webservice也可以应用于webapi所在的场景，一般是做为内部服务的使用，好比如果一个系统用wcf/webservice作为内部子系统间的服务通信，而webapi用于外部服务的请求。</p>\n<p>WCF和WEB API我该选择哪个？<br/> 　　1、当你想创建一个支持消息、消息队列、双工通信的服务时，你应该选择WCF<br/> 　　2、当你想创建一个服务，可以用更快速的传输通道时，像TCP、Named Pipes或者甚至是UDP（在WCF4.5中）,在其他传输通道不可用的时候也可以支持HTTP。<br/> 　　3、当你想创建一个基于HTTP的面向资源的服务并且可以使用HTTP的全部特征时（比如URIs、request/response头，缓存，版本控制，多种内容格式），你应该选择Web API<br/> 　　4、当你想让你的服务用于浏览器、手机、iPhone和平板电脑时，你应该选择Web API</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}