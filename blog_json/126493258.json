{"blogid": "126493258", "writerAge": "码龄4年", "writerBlogNum": "156", "writerCollect": "2435", "writerComment": "2543", "writerFan": "2426", "writerGrade": "6级", "writerIntegral": "5842", "writerName": "Mindtechnist", "writerProfileAdress": "writer_image\\profile_126493258.jpg", "writerRankTotal": "2818", "writerRankWeekly": "414", "writerThumb": "1693", "writerVisitNum": "114058", "blog_read_count": "306", "blog_time": "于 2022-08-24 07:45:00 发布", "blog_title": "【Linux信号专题】二、信号是如何产生的", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ae0b2071c6b04d3f8ed374a405726445.jpeg\"/></p>\n<blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>Linux信号专题——信号是如何产生的</h3>\n<ul><li><ul><li><a href=\"#1___8\">1. 终端按键产生信号</a></li><li><a href=\"#2__14\">2. 硬件异常信号</a></li><li><a href=\"#3__22\">3. 函数产生信号</a></li><li><ul><li><a href=\"#31_kill_24\">3.1 kill函数</a></li><li><a href=\"#32_raise_59\">3.2 raise函数</a></li><li><a href=\"#33_abort_107\">3.3 abort函数</a></li></ul>\n</li><li><a href=\"#4__129\">4. 时钟信号</a></li><li><ul><li><a href=\"#41_alarm_131\">4.1 alarm函数</a></li><li><a href=\"#42_setitimer_238\">4.2 setitimer函数</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<p>专栏传送门 ：<a href=\"https://blog.csdn.net/qq_43471489/category_11764472.html?spm=1001.2014.3001.5482\">《Linux从小白到大神》</a> 系统学习Linux开发、VIM/GCC/GDB/Make工具、Linux文件IO、进程管理、进程通信、多线程等，请关注专栏免费学习。</p>\n</blockquote>\n<hr/>\n<h2><a id=\"1___8\"></a>1. 终端按键产生信号</h2>\n<ul><li>Ctrl+c ：2号信号SIGINT，表示终止/中断。(SIG INT → signal interrupt)</li><li>Ctrl+z：20号信号SIGTSTP，表示暂停/停止。(SIG T STP → signal terminal stop)</li><li>Ctrl+\\ ：3号信号SIGQUIT，表示退出。(SIG QUIT → signal quit)</li></ul>\n<h2><a id=\"2__14\"></a>2. 硬件异常信号</h2>\n<p>当程序出现硬件异常会产生信号：</p>\n<ul><li>除0操作，浮点型错误，8号信号SIGFPE。</li><li>非法访问内存，11号信号SIGSEGV，段错误。</li><li>总线错误，7号信号SIGNUS。</li></ul>\n<h2><a id=\"3__22\"></a>3. 函数产生信号</h2>\n<h3><a id=\"31_kill_24\"></a>3.1 kill函数</h3>\n<p>kill命令和kill函数都可以产生信号来杀死进程。kill命令产生信号：kill -SIGKILL pid；kill函数：给指定进程发送指定信号(不一定杀死)。</p>\n<ul><li>头文件及函数原型</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">kill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p>函数功能</p> <p>The kill() system call can be used to send any signal to any process group or process. 给指定进程发送指定信号。</p> </li><li> <p>函数参数</p>\n<ul><li> <p>pid：进程ID</p>\n<ul><li>If pid is positive, then signal sig is sent to the process with the ID specified by pid. 如果pid &gt; 0，发送信号给指定的进程。</li><li>If pid equals 0, then sig is sent to every process in the process group of the calling process. 如果pid = 0，发送信号给与调用kill函数的进程属于同一进程组的所有进程。</li><li>If pid equals -1, then sig is sent to every process for which the calling process has permission to send signals, except for process 1 (init), but see below. 如果pid = -1，发送给进程有权限发送的系统中所有进程。</li><li>If pid is less than -1, then sig is sent to every process in the process group whose ID is -pid. 如果pid &lt; -1，对pid取模发给对应进程组。</li></ul> </li><li> <p>sig：信号名，不推荐直接使用数字，应使用宏名，因为不同操作系统信号编号可能不同，但名称一致。</p> <p>If sig is 0, then no signal is sent, but error checking is still performed; this can be used to check for the existence of a process ID or process group ID.</p> </li></ul> </li><li> <p>函数返回值</p>\n<ul><li>On success (at least one signal was sent), zero is returned. 成功返回0。</li><li>On error, -1 is returned, and errno is set appropriately. 失败返回-1 (ID非法，信号非法，普通用户杀init进程等权级问题)，设置errno。</li></ul> </li></ul>\n<h3><a id=\"32_raise_59\"></a>3.2 raise函数</h3>\n<ul><li>包含头文件与函数原型</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p>函数功能</p> <p>he raise() function sends a signal to the calling process or thread. 给当前进程发送指定信号(自己给自己发) 。</p>\n<ul><li>In a single-threaded program it is equivalent to kill(getpid(), sig);</li><li>In a multithreaded program it is equivalent to pthread_kill(pthread_self(), sig);</li><li>If the signal causes a handler to be called, raise() will only return after the signal handler has returned.</li></ul> </li><li> <p>函数参数</p>\n<ul><li>sig</li></ul> </li><li> <p>函数返回值</p> <p>raise() returns 0 on success, and non-zero for failure. 成功返回0，失败返回非0值。</p> </li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/************************************************************\n  &gt;File Name  : test.c\n  &gt;Author     : Mindtechnist\n  &gt;Company    : Mindtechnist\n  &gt;Create Time: 2022年05月23日 星期一 14时20分42秒\n************************************************************/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pid: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">raise</span><span class=\"token punctuation\">(</span>SIGKILL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 相当于\n    kill(getpid(), SIGKILL); */</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"33_abort_107\"></a>3.3 abort函数</h3>\n<ul><li>包含头文件及函数原型</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p>函数功能</p> <p>The abort() first unblocks the SIGABRT signal, and then raises that signal for the calling process. 给自己发送异常终止信号 6) SIGABRT 信号，终止并产生core文件。</p> </li><li> <p>函数参数</p>\n<ul><li>void</li></ul> </li><li> <p>函数返回值</p> <p>The abort() function never returns.</p> </li></ul>\n<h2><a id=\"4__129\"></a>4. 时钟信号</h2>\n<h3><a id=\"41_alarm_131\"></a>4.1 alarm函数</h3>\n<ul><li>包含头文件及函数原型</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p>函数功能</p> <p>设置定时器（闹钟），定时给调用进程（也就是自己）发送SIGALRM，来约定进程几秒钟后结束。在指定seconds后，内核会给当前进程发送14）SIGALRM信号，进程收到该信号，默认动作终止。 每个进程都有且只有唯一一个定时器。定时与进程状态无关（自然定时法），就绪、运行、挂起（阻塞、暂停）、终止、僵尸等等无论进程处于何种状态，alarm都会计时。</p> <p>alarm() arranges for a SIGALRM signal to be delivered to the calling process in seconds seconds.</p>\n<ul><li> <p>If seconds is zero, no new alarm() is scheduled.</p> </li><li> <p>In any event any previously set alarm() is canceled.</p> </li></ul>\n<table><thead><tr><th align=\"center\">Signal</th><th align=\"center\">Value</th><th align=\"center\">Action</th><th align=\"center\">Comment</th></tr></thead><tbody><tr><td align=\"center\">SIGALRM</td><td align=\"center\">14</td><td align=\"center\">Term</td><td align=\"center\">Timer signal from alarm(2)</td></tr></tbody></table><pre><code class=\"prism language-c\">Term   Default action is to terminate the process<span class=\"token punctuation\">.</span> <span class=\"token comment\">/*终止进程*/</span>\n</code></pre> </li><li> <p>函数参数</p>\n<ul><li>seconds：时间，单位秒。alarm(0)相当于取消闹钟。</li></ul> </li><li> <p>函数返回值</p> <p>alarm() returns the number of seconds remaining until any previously scheduled alarm was due to be delivered, or zero if there was no previously scheduled alarm. 返回上次定时器剩余的秒数。我们实现约定好多少秒时候发送一个信号，alarm()函数返回距离发送信号还剩余的秒数，如果没有剩余时间或没有约定发送信号返回0。可以这么理解，如果是第一次开启定时器，返回0；如果上一次设定了alarm(5)，两秒之后又设置了alarm(3)，那么这个alarm()返回上一次定时器剩余的时间，也就是5-2=3秒。</p> </li></ul>\n<p><strong>用法示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/************************************************************\n  &gt;File Name  : test.c\n  &gt;Author     : Mindtechnist\n  &gt;Company    : Mindtechnist\n  &gt;Create Time: 2022年05月23日 星期一 14时20分42秒\n************************************************************/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first alarm(3) return: %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second alarm(5) return: %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pid: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译运行得到结果</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b28dd72bb97640bb9fda38b114b17e8f.png\"/></p>\n<p>**示例2：**time命令计时与IO优化</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译运行，使用time命令可以查看程序执行的时间（实际执行时间 = 系统时间 + 用户时间 + 等待时间），time ./a.out</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\11e17bf6fc04431c86670e23c1e0e440.png\"/></p>\n<p>在上面的时间中：</p>\n<p>real：总共的时间（自然时间）；</p>\n<p>user：用户使用时间；</p>\n<p>sys：系统时间；</p>\n<p>可以看到最大计数到了7572，并且user几乎没有分配到时间，这是因为IO操作（打印屏幕）造成的，我们可以重定向一下输出</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2be9a75292cf48f8aac803dd49a87721.png\"/></p>\n<p>可以看到user的时间增加了，并且最大计数达到了306087。实际上程序运行的瓶颈大部分在于IO，优化程序，首先优化IO。</p>\n<h3><a id=\"42_setitimer_238\"></a>4.2 setitimer函数</h3>\n<ul><li>包含头文件及函数原型</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">getitimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> which<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> <span class=\"token operator\">*</span>curr_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">setitimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> which<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> <span class=\"token operator\">*</span>new_value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> <span class=\"token operator\">*</span>old_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p>函数功能</p> <p>The system provides each process with three interval timers, each decrementing in a distinct time domain. 设置定时器（闹钟），可代替alarm函数，精度微秒us，可以实现周期定时。</p> </li><li> <p>函数参数</p>\n<ul><li> <p>which：指定定时方式</p>\n<ul><li>ITIMER_REAL：decrements in real time, and delivers SIGALRM upon expiration. 自然定时法，ITIMER_REAL对应信号14）SIGLARM，计算自然时间。（实际执行时间 = 系统时间 + 用户时间 + 等待时间）。</li><li>ITIMER_VIRTUAL：decrements only when the process is executing, and delivers SIGVTALRM upon expiration. 虚拟空间计时(用户空间)，ITIMER_VIRTUAL对应信号26）SIGVTALRM，只计算进程占用cpu的时间。（计算进程执行时间）</li><li>ITIMER_PROF：decrements both when the process executes and when the system is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this timer is usually used to profile the time spent by the application in user and kernel space. SIGPROF is delivered upon expiration. 运行时计时(用户+内核)，ITIMER_PROF对应信号27）SIGPROF，计算占用cpu及执行系统调用的时间。（进程执行时间+调度时间）</li></ul> </li><li> <p>new_value：要设置的定时器时间</p> <pre><code class=\"prism language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> it_interval<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* next value 周期性的时间*/</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> it_value<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* current value 下一次闹钟到来的时间 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">long</span> tv_sec<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* seconds 秒*/</span>\n    <span class=\"token keyword\">long</span> tv_usec<span class=\"token punctuation\">;</span>               <span class=\"token comment\">/* microseconds 微秒*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/*秒+微妙才是真正的时间，微妙是为了更精确*/</span>\n</code></pre>\n<ul><li>it_interval：用来设定两次定时任务之间间隔的时间。</li><li>it_value：定时的时长 。</li><li>两个参数都设置为0，即清0操作。</li></ul> </li><li> <p>old_value：原来的定时器时间</p> </li></ul> </li><li> <p>函数返回值</p>\n<ul><li>On success, zero is returned.</li><li>On error, -1 is returned, and errno is set appropriately.</li></ul> </li></ul>\n<p>**示例1：**使用setitimer实现alarm函数定时功能</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setitimer</span><span class=\"token punctuation\">(</span>ITIMER_REAL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/*ITIMER_REAL，3秒后发送SIGALRM信号*/</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pid: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译运行，3秒后闹钟</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\db3f0a0af96e402291da56c6e5ee268f.png\"/></p>\n<p>**示例2：**周期性定时器</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h&gt;</span></span>\n\n<span class=\"token comment\">/*信号处理回调函数*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">m_catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sig<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/*捕捉到信号执行此函数，不杀死进程*/</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch signal: %d\\n\"</span><span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGALRM<span class=\"token punctuation\">,</span> m_catch<span class=\"token comment\">/*函数指针做函数参数*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*signal信号捕捉函数，当产生SIGALRM信号的时候，去执行m_catch函数*/</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/*第一次等待4秒，以后每隔2秒发送一个信号*/</span>\n    <span class=\"token function\">setitimer</span><span class=\"token punctuation\">(</span>ITIMER_REAL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pid: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译执行，可以看到第一次隔了4秒捕获到信号，后面周期性的每隔2秒捕获一次信号，不会杀死进程，可以通过ctrl+c杀掉进程。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1fa61421756a4759b2cfca1c0aa37bb3.png\"/></p>\n<p>**示例3：**setitimer实现alarm函数</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h&gt;</span></span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">malarm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seconds<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> ret<span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>it_value<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> seconds<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setitimer</span><span class=\"token punctuation\">(</span>ITIMER_REAL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tv_sec: %ld, tv_mirsec: %ld\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">.</span>it_value<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">.</span>it_value<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span>it_value<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">malarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malarm() return: %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">malarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malarm() return: %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pid: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译运行，时间可能会不太准确，这是正常的</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5ae089f6873b42e6a7d135ed600ef009.png\"/></p>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c0a8efd667e24dedabc297fa90f6d7ef.jpeg\"/><br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/2c62d96fb5174e95bd16a8d5a96f26e6.gif#pic_center\"/></p>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}