{"blogid": "113928312", "writerAge": "码龄3年", "writerBlogNum": "7", "writerCollect": "2497", "writerComment": "73", "writerFan": "322", "writerGrade": "3级", "writerIntegral": "789", "writerName": "自嘲的丶微笑", "writerProfileAdress": "writer_image\\profile_113928312.jpg", "writerRankTotal": "981031", "writerRankWeekly": "363309", "writerThumb": "493", "writerVisitNum": "45589", "blog_read_count": "37737", "blog_time": "于 2021-02-22 09:14:01 发布", "blog_title": "Java面向对象（知识点整理）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_1\">面向对象</a></li><li><ul><li><a href=\"#_31\">类与对象</a></li><li><a href=\"#_58\">匿名对象</a></li><li><a href=\"#_86\">创建对象的内存分析</a></li><li><ul><li><a href=\"#stack_88\">栈(stack)</a></li><li><a href=\"#heap_123\">堆(heap)</a></li><li><a href=\"#_191\">方法区</a></li><li><a href=\"#PC_259\">PC寄存器</a></li><li><a href=\"#_267\">本地方法栈</a></li></ul>\n</li><li><a href=\"#_273\">内部类</a></li><li><ul><li><a href=\"#_287\">成员内部类</a></li><li><a href=\"#_325\">局部内部类</a></li><li><a href=\"#_370\">匿名内部类</a></li><li><a href=\"#_414\">静态内部类</a></li></ul>\n</li><li><a href=\"#_440\">包装类</a></li><li><ul><li><a href=\"#_457\">拆箱和装箱操作</a></li><li><a href=\"#_488\">字符串转换</a></li><li><a href=\"#_514\">基本数据类型和包装类型的区别</a></li><li><a href=\"#Integer_523\">Integer类型的重点</a></li></ul>\n</li><li><a href=\"#_538\">抽象类</a></li><li><ul><li><a href=\"#_551\">抽象方法</a></li><li><a href=\"#_564\">不能被实例化</a></li><li><a href=\"#_572\">常见问题</a></li><li><a href=\"#_582\">抽象类和普通类的区别</a></li></ul>\n</li><li><a href=\"#_592\">接口</a></li><li><ul><li><a href=\"#_605\">面向接口编程思想</a></li><li><a href=\"#_617\">全局常量和抽象方法的简写</a></li><li><a href=\"#_implements_637\">接口的实现 implements</a></li><li><a href=\"#_extends_651\">接口的继承 extends</a></li><li><a href=\"#_708\">接口与抽象类的区别</a></li></ul>\n</li><li><a href=\"#_726\">多态</a></li><li><ul><li><a href=\"#_730\">多态的体现</a></li><li><a href=\"#_740\">多态的使用：对象的类型转换</a></li></ul>\n</li><li><a href=\"#Instanceof_795\">Instanceof</a></li><li><a href=\"#Object_807\">Object类</a></li><li><ul><li><a href=\"#Object_818\">Object的多态</a></li><li><a href=\"#toString_834\">toString()</a></li><li><a href=\"#equals_843\">equals()</a></li></ul>\n</li><li><a href=\"#_896\">可变参数</a></li><li><a href=\"#_928\">递归</a></li><li><a href=\"#_958\">异常处理</a></li><li><ul><li><a href=\"#trycatch_1014\">try+catch的处理流程</a></li><li><a href=\"#finally_1027\">finally</a></li><li><a href=\"#_1115\">异常体系结构</a></li><li><a href=\"#throws_1145\">throws关键字</a></li><li><a href=\"#throw_1171\">throw关键字</a></li><li><a href=\"#RuntimeExcepionException_1208\">RuntimeExcepion与Exception的区别</a></li><li><a href=\"#_1222\">自定义异常类</a></li><li><a href=\"#trywithresources_1265\">try-with-resources</a></li></ul>\n</li><li><a href=\"#_1324\">构造方法（构造器）</a></li><li><a href=\"#Overload_1360\">重载（Overload）</a></li><li><a href=\"#Override_1385\">重写（Override）</a></li><li><a href=\"#_1416\">重写与重载的区别</a></li><li><a href=\"#Java_1430\">Java两种核心机制</a></li><li><a href=\"#JAVA_1459\">JAVA跨平台原理</a></li><li><a href=\"#_1470\">标识符</a></li><li><a href=\"#_1490\">关键字</a></li><li><ul><li><a href=\"#this_1497\">this</a></li><li><a href=\"#static_1523\">static</a></li><li><a href=\"#final_1616\">final</a></li></ul>\n</li><li><a href=\"#_1642\">权限修饰符</a></li><li><ul><li><a href=\"#private_1646\">封装private</a></li></ul>\n</li><li><a href=\"#_1697\">代码块</a></li><li><a href=\"#_1757\">包</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>面向对象</h2>\n<p>要理解面向对象思想，我们先要知道什么是对象？</p>\n<p>《Java编程思想》中提到“万物皆为对象”的概念。它将对象视为一种奇特的变量，它除了可以存储数据之外还可以对它自身进行操作。它能够直接反映现实生活中的事物，例如人、车、小鸟等，将其表示为程序中的对象。每个对象都具有各自的状态特征（也可以称为属性）及行为特征（方法），java就是通过对象之间行为的交互来解决问题的。</p>\n<p>面向对象就是把构成问题的事物分解成一个个对象，建立对象不是为了实现一个步骤，而是为了描述某个事物在解决问题中的行为。</p>\n<p>类是面向对象中的一个很重要的概念，因为类是很多个具有相同属性和行为特征的对象所抽象出来的，对象是类的一个实例。</p>\n<p>类具有三个特性：封装、继承和多态。</p>\n<p><em><strong>三大特征</strong></em></p>\n<ul><li>封装：核心思想就是“隐藏细节”、“数据安全”，将对象不需要让外界访问的成员变量和方法私有化，只提供符合开发者意愿的公有方法来访问这些数据和逻辑，保证了数据的安全和程序的稳定。所有的内容对外部不可见。</li><li>继承：子类可以继承父类的属性和方法，并对其进行拓展。将其他的功能继承下来继续发展 。</li><li>多态：同一种类型的对象执行同一个方法时可以表现出不同的行为特征。通过继承的上下转型、接口的回调以及方法的重写和重载可以实现多态。方法的重载本身就是一个多态性的体现。</li></ul>\n<p><em><strong>三大思想</strong></em></p>\n<p>面向对象思想从概念上讲分为以下三种：OOA、OOD、OOP</p>\n<p>OOA：面向对象分析（Object Oriented Analysis）</p>\n<p>OOD：面向对象设计（Object Oriented Design）</p>\n<p>OOP：面向对象程序（Object Oriented Programming ）</p>\n<h3><a id=\"_31\"></a>类与对象</h3>\n<p>类表示一个共性的产物，是一个综合的特征，而对象，是一个个性的产物，是一个个体的特征。 （类似生活中的图纸与实物的概念。）</p>\n<p>类必须通过对象才可以使用，对象的所有操作都在类中定义。</p>\n<p>类由属性和方法组成：</p>\n<ul><li> <p>属性：就相当于人的一个个的特征</p> </li><li> <p>方法：就相当于人的一个个的行为，例如：说话、吃饭、唱歌、睡觉</p> </li></ul>\n<p>一个类要想真正的进行操作，则必须依靠对象，对象的定义格式如下:</p>\n<p>类名称 对象名称 = new 类名称() ;</p>\n<p>如果要想访问类中的属性或方法（方法的定义），则可以依靠以下的语法形式：</p>\n<p>访问类中的属性： 对象.属性 ;</p>\n<p>调用类中的方法： 对象.方法(实际参数列表) ;</p>\n<ul><li>类必须编写在.java文件中；</li><li>一个.java文件中，可以存在N个类，但是只能存在一个public修饰的类；</li><li>.java文件的文件名必须与public修饰的类名完全一直；</li><li>同一个包中不能有重名的类；</li></ul>\n<h3><a id=\"_58\"></a>匿名对象</h3>\n<ul><li>没有对象名称的对象就是匿名对象。 即栈内存中没有名字，而堆内存中有对象。</li><li>匿名对象只能使用一次，因为没有任何的对象引用，所以将称为垃圾，等待被GC回收。</li><li>只使用一次的对象可以通过匿名对象的方式完成，这一点在以后的开发中将经常使用到。</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//Math2 m=new Math2();</span>\n\t<span class=\"token comment\">//int num=m.sum(100,200);</span>\n\t<span class=\"token comment\">//不通过创建对象名，直接实例对象调用，这就是匿名对象。因为没有对象名指向对象，所以只能调用一次，然后被GC回收。</span>\n\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Math2</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对象内存分析如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20210222085432293.png\"/></p>\n<h3><a id=\"_86\"></a>创建对象的内存分析</h3>\n<h4><a id=\"stack_88\"></a>栈(stack)</h4>\n<p>Java栈的区域很小 , 大概2m左右 , 特点是存取的速度特别快</p>\n<p>栈存储的特点是：先进后出</p>\n<p><em><strong>存储速度快的原因:</strong></em></p>\n<p>栈内存, 通过 ‘栈指针’ 来创建空间与释放空间 !</p>\n<p>指针向下移动, 会创建新的内存, 向上移动, 会释放这些内存 !</p>\n<p>这种方式速度特别快 , 仅次于PC寄存器 !</p>\n<p>但是这种移动的方式, 必须要明确移动的大小与范围 ,</p>\n<p>明确大小与范围是为了方便指针的移动 , 这是一个对于数据存储的限制, 存储的数据大小是固定的 , 影响了程序 的灵活性 ~</p>\n<p>所以我们把更大部分的数据存储到了堆内存中</p>\n<p><em><strong>堆存储的是:</strong></em></p>\n<p>基本数据类型的数据以及引用数据类型的引用!</p>\n<p>例如:</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> \nPerson p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<p>10存储在栈内存中 , 第二句代码创建的对象的引用§存在栈内存中</p>\n<h4><a id=\"heap_123\"></a>堆(heap)</h4>\n<p>存放的是类的对象 ；</p>\n<p><em><strong>Java是一个纯面向对象语言, 限制了对象的创建方式 :</strong></em></p>\n<p>所有类的对象都是通过new关键字创建</p>\n<p>new关键字, 是指告诉JVM , 需要明确的去创建一个新的对象 , 去开辟一块新的堆内存空间:</p>\n<p>堆内存与栈内存不同, 优点在于我们创建对象时 , 不必关注堆内存中需要开辟多少存储空间 , 也不需要关注内存占用</p>\n<p>时长 !</p>\n<p>堆内存中内存的释放是由GC(垃圾回收器)完成的</p>\n<p><em><strong>垃圾回收器回收堆内存的规则 :</strong></em></p>\n<p>当栈内存中不存在此对象的引用时,则视其为垃圾 , 等待垃圾回收器回收 !</p>\n<p>例如：</p>\n<pre><code class=\"prism language-java\">Person p0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nPerson p1 <span class=\"token operator\">=</span> p0<span class=\"token punctuation\">;</span> \nPerson p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<p><em><strong>堆在逻辑上分为三部分：</strong></em></p>\n<p>新生代（Young Generation，常称为YoungGen）</p>\n<p>老年代（Old Generation，常称为OldGen、TenuringGen）</p>\n<p>永久代（Permanent Generation，常称为PermGen）</p>\n<p><em><strong>新生区（New/Young Generation）：</strong></em></p>\n<p>新生代（Young Generation），常称为YoungGen，位于堆空间。</p>\n<p>新生区又分为Eden区和Survior（幸存区）。</p>\n<p>Eden：新创建的对象</p>\n<p>Survior 0、1：经过垃圾回收，但是垃圾回收次数小于15次的对象。</p>\n<p><em><strong>养老区（Old Generation）：</strong></em></p>\n<p>老年代常称为OldGen，位于堆空间</p>\n<p>Old：垃圾回收次数超过15次，依然存活的对象。</p>\n<p><em><strong>永久区（Permanent Generation）：</strong></em></p>\n<p>永久代常称为PermGen，位于非堆空间。</p>\n<p>永久区是一个常驻内存区域，用于存放JDK自身所携带的Class，Interface的元数据，也就是说它存储的是运行环境必须的类信息，被装载进此区域的数据是不会被垃圾回收器回收掉的，关闭JVM才会释放此区域所占用的空间。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    String s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\n    String s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token operator\">==</span>s2<span class=\"token punctuation\">)</span><span class=\"token comment\">//结果：true-----------第一次定义s1存放在堆中的永久区，所以第二次属于调用</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_191\"></a>方法区</h4>\n<p>方法区（Method Area），又称永久代，又称非堆区（Non-Heap space）</p>\n<p><em><strong>方法区是被所有线程共享：</strong></em></p>\n<ol><li>所有的字段和方法字节码，以及一些特殊方法如构造函数，接口代码也再此定义。</li><li>简单说，所有定义的方法的信息都保存在该区域，此区属于共享区间。</li><li>这些区域储存的是：静态变量+常量+类信息（构造方法/接口定义）+运行时常量池。</li><li>但是，实例变量存在堆内存中，和方法区无关。</li></ol>\n<p>以上，只是逻辑上的定义。在HotSpot中，方法区仅仅只是逻辑上的独立，实际上还是包含在java堆中，也就是说，方法区在物理上属于java堆区中的一部分，而永久区（Permanent Generation）就是方法区的实现。</p>\n<p>存放的是</p>\n<p>- 类信息</p>\n<p>- 静态的变量</p>\n<p>- 常量</p>\n<p>- 成员方法</p>\n<p>方法区中包含了一个特殊的区域 ( 常量池 )(存储的是使用static修饰的成员)</p>\n<p><em><strong>方法区的实现的演变</strong></em></p>\n<p>jdk1.7之前：hotspot虚拟机对方法区的实现为永久代。</p>\n<p>jdk1.8及之后：hotspot移除了永久代用元空间（Metaspace）。</p>\n<p><em><strong>运行时 <code>常量池</code>和 <code>字符串常量池</code>的变化</strong></em></p>\n<p>jdk1.7之前：<code>运行时常量池</code>（包含字符串常量池）存放在方法区，此时hotspot虚拟机对方法区的实现为永久代。</p>\n<p>jdk1.7：<code>字符串常量池</code>被方法区拿到了堆中；<code>运行时常量池</code>剩下的东西还在方法区，也就是hotspot中的永久代。</p>\n<p>jdk1.8：hotspot移除了永久代，用元空间（Metaspace）取而代之。这时候，<code>字符串常量池</code>还在堆中，<code>运行时常量池</code>还在方法区，只不过方法区的实现从永久代变成元空间（Metaspace）。</p>\n<p>代码使用内存情况如下图所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090035183.png\"/></p>\n<p>上图描述了程序运行时内存的情况，当程序运行完毕，栈内的会清空b2、b1，这样堆内存中的Book对象就没有一个引用指向他，即栈内存中没有指向他的，则满足了GC的清理原则，GC会自动清理掉堆内存中的Book对象。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090108162.png\"/></p>\n<p>上图描述了两个对象b1、b2的在栈和堆中内存的使用情况，当b2=b1时，b1指向的地址就覆盖了b2的指向地址，这样原来b2对象在堆中的内存就没东西指向他的地址了，这就满足了GC的自动清理原则。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    String s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"锄禾日当午\"</span><span class=\"token punctuation\">;</span>\n    String s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"汗滴禾下土\"</span><span class=\"token punctuation\">;</span>\n    String s3 <span class=\"token operator\">=</span> <span class=\"token string\">\"窗前明月光\"</span><span class=\"token punctuation\">;</span>\n    text1 <span class=\"token operator\">=</span> text1<span class=\"token operator\">+</span>text2<span class=\"token operator\">+</span>text3<span class=\"token punctuation\">;</span><span class=\"token comment\">//先计算text1+text2，产生地址为0x126的对象，接着再计算0x126对象+text3，产生0x127对象</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>text1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出：锄禾日当午汗滴禾下土窗前明月光</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090135413.png\"/></p>\n<p>上图描述了三个字符串拼接成一个新的字符串的内存使用情况，可以看到栈中text1指向的地址被改变，但是堆中产生两个没有指向的对象垃圾，这是非常耗费内存的，所以平常应该避免字符串拼接。</p>\n<h4><a id=\"PC_259\"></a>PC寄存器</h4>\n<p>PC寄存器保存的是当前正在执行的 JVM指令的 地址 ；</p>\n<p>在Java程序中, 每个线程启动时, 都会创建一个PC寄存器 ；</p>\n<h4><a id=\"_267\"></a>本地方法栈</h4>\n<p>保存本地(native)方法的地址</p>\n<h3><a id=\"_273\"></a>内部类</h3>\n<p>在Java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。</p>\n<p>广泛意义上的内部类一般来说包括这四种：</p>\n<p>1、成员内部类</p>\n<p>2、局部内部类</p>\n<p>3、匿名内部类</p>\n<p>4、静态内部类</p>\n<h4><a id=\"_287\"></a>成员内部类</h4>\n<p>成员内部类是最普通的内部类，它的定义为位于另一个类的内部，形如下面的形式：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//外部使用成员内部类 </span>\n\t\tOuter outter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\tOuter<span class=\"token punctuation\">.</span>Inner inner <span class=\"token operator\">=</span> outter<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inner<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//输出：200    </span>\n        \t\t\t\t   <span class=\"token comment\">//     100</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span> <span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> x<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//内部类 </span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>特点： 成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。 不过要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。</p>\n<p>如果要访问外部类的同名成员，需要以下面的形式进行访问：</p>\n<p>外部类.this.成员变量</p>\n<p>外部类.this.成员方法</p>\n<h4><a id=\"_325\"></a>局部内部类</h4>\n<p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。</p>\n<p>例如：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//局部内部类</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonImp</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">prinln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新编写的局部内部类的say方法内容\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        PersonImp p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PersonImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这里像调用haha()方法，但是需要一个Person类，为此专门创建一个class文件类很浪费时间，所以使用局部内部类</span>\n        <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span>Person p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//窗口关闭</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    Frame f<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Frame</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QQ登陆器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWindowListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WindowListener</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">windowClosing</span><span class=\"token punctuation\">(</span>WindowEvent e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈哈\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    MyWindowListener l<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyWindowListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//想要添加一个窗口关闭的事件，可以使用局部类</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">addWindowListener</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意:局部内部类就像是方法里面的一个局部变量一样，是不能有public、protected、private以及static修饰符的。局部内部类也是只能访问final类型变量。</p>\n<h4><a id=\"_370\"></a>匿名内部类</h4>\n<p>匿名内部类由于没有名字，所以它的创建方式有点儿奇怪。匿名内部类创建出来只能使用一次，和匿名对象类似。创建格式如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">new</span> 父类构造器（参数列表）<span class=\"token operator\">|</span>实现接口（） <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//匿名内部类的类体部分 </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//匿名内部类</span>\n        Person p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"锄禾日当午\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span>Person p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里我们看到使用匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的。</p>\n<p>在使用匿名内部类的过程中，我们需要注意如下几点：</p>\n<p>1、使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或 者实现一个接口。</p>\n<p>2、匿名内部类中是不能定义构造函数的。</p>\n<p>3、匿名内部类中不能存在任何的静态成员变量和静态方法。</p>\n<p>4、匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</p>\n<p>5、匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</p>\n<p>6、只能访问final型的局部变量。JDK1.8之后变量默认为final类型，但是只要第二次赋值，就不再是final类型的了。</p>\n<p>只能访问final类型的局部变量的原因，因为局部类编译的时候是单独编译成一个文件，所以在文件中有final变量的备份。</p>\n<h4><a id=\"_414\"></a>静态内部类</h4>\n<p>静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。</p>\n<p>静态内部类是不需要依赖于外部类对象的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法。</p>\n<p>格式：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n        Book<span class=\"token punctuation\">.</span>Info info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book<span class=\"token punctuation\">.</span>Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        info<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span> <span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一本书\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_440\"></a>包装类</h3>\n<p>在Java中有一个设计的原则“一切皆对象”，那么这样一来Java中的一些基本的数据类型，就完全不符合于这种设计思想，因为Java中的八种基本数据类型并不是引用数据类型，所以Java中为了解决这样的问题，引入了八种基本数据类型的包装类。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2021022209041439.png\"/></p>\n<p>以上的八种包装类，可以将基本数据类型按照类的形式进行操作。</p>\n<p>但是，以上的八种包装类也是分为两种大的类型的：</p>\n<ul><li>Number：Integer、Short、Long、Double、Float、Byte都是Number的子类表示是一个数字。</li><li>Object：Character、Boolean都是Object的直接子类。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090434640.png\"/></p>\n<h4><a id=\"_457\"></a>拆箱和装箱操作</h4>\n<p>以下以Integer和Float为例进行操作</p>\n<p>将一个基本数据类型变为包装类，那么这样的操作称为装箱操作。</p>\n<p>将一个包装类变为一个基本数据类型，这样的操作称为拆箱操作，</p>\n<p>因为所有的数值型的包装类都是Number的子类，Number的类中定义了如下的操作方法，以下的全部方法都是进行拆箱的操</p>\n<p>作。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090456164.png\"/></p>\n<p>装箱操作：</p>\n<p>在JDK1.4之前 ，如果要想装箱，直接使用各个包装类的构造方法即可，例如：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">// 基本数据类型 </span>\nInteger x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将基本数据类型变为包装类</span>\n\n在JDK1<span class=\"token punctuation\">.</span><span class=\"token number\">5</span>，Java新增了自动装箱和自动拆箱，而且可以直接通过包装类进行四则运算和自增自建操作。例如： \n\nFloat f <span class=\"token operator\">=</span> <span class=\"token number\">10.3f</span> <span class=\"token punctuation\">;</span> \t\t\t<span class=\"token comment\">// 自动装箱 </span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> f <span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">// 自动拆箱 </span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接利用包装类完成 </span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接利用包装类完成</span>\n</code></pre>\n<h4><a id=\"_488\"></a>字符串转换</h4>\n<p>使用包装类还有一个很优秀的地方在于：可以将一个字符串变为指定的基本数据类型，此点一般在接收输入数据上使用较多。</p>\n<p>在Integer类中提供了以下的操作方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将String变为int型数据</span>\n</code></pre>\n<p>在Float类中提供了以下的操作方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将String变为Float</span>\n</code></pre>\n<p>在Boolean 类中提供了以下操作方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">parseBoolean</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将String变为boolean</span>\n</code></pre>\n<p>…</p>\n<p>…</p>\n<h4><a id=\"_514\"></a>基本数据类型和包装类型的区别</h4>\n<p>1、包装类是对象，拥有方法和字段，对象的调用都是通过引用对象的地址，基本类型不是<br/> 2、包装类型是引用的传递，基本类型是值的传递<br/> 3、声明方式不同，基本数据类型不需要new关键字，而包装类型需要new在堆内存中进行new来分配内存空间<br/> 4、存储位置不同，基本数据类型直接将值保存在值栈中，而包装类型是把对象放在堆中，然后通过对象的引用来调用他们<br/> 5、初始值不同，eg： int的初始值为 0 、 boolean的初始值为false 而包装类型的初始值为null<br/> 6、使用方式不同，基本数据类型直接赋值使用就好 ，而包装类型是在集合如 coolection Map时会使用</p>\n<h4><a id=\"Integer_523\"></a>Integer类型的重点</h4>\n<pre><code class=\"prism language-java\">Integer a<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n上述代码返回false，因为\nIntegerCache.low = -128\nIntegerCache.high = 127\n    所以上面`Integer a = 1000,b = 1000;`其实都是`new Integer(1000);`所以分配的内存地址肯定不一样,所以`==`比较就成`false`了\n    */</span>\n</code></pre>\n<h3><a id=\"_538\"></a>抽象类</h3>\n<p>抽象类必须使用abstract class声明</p>\n<p>一个抽象类中可以没有抽象方法。抽象方法必须写在抽象类或者接口中。</p>\n<p>格式：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> 类名<span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 抽象类 </span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<h4><a id=\"_551\"></a>抽象方法</h4>\n<p>只声明而未实现的方法称为抽象方法（未实现指的是：没有“{}”方法体），抽象方法必须使用abstract关键字声明。</p>\n<p>格式：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 抽象类 </span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> 类名<span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> 方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抽象方法，只声明而未实现</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_564\"></a>不能被实例化</h4>\n<p>在抽象类的使用中有几个原则：</p>\n<ul><li> <p>抽象类本身是不能直接进行实例化操作的，即：不能直接使用关键字new完成。 不能被我们创建，但是jvm虚拟器可以创建。</p> </li><li> <p>一个抽象类必须被子类所继承，被继承的子类（如果不是抽象类）则必须覆写(重写)抽象类中的全部抽象方法。</p> </li></ul>\n<h4><a id=\"_572\"></a>常见问题</h4>\n<p>1、 抽象类能否使用final声明？</p>\n<p>不能，因为final属修饰的类是不能有子类的 ， 而抽象类必须有子类才有意义，所以不能。</p>\n<p>2、 抽象类能否有构造方法？</p>\n<p>能有构造方法，而且子类对象实例化的时候的流程与普通类的继承是一样的，都是要先调用父类中的构造方法（默认是无参的），之后再调用子类自己的构造方法。</p>\n<h4><a id=\"_582\"></a>抽象类和普通类的区别</h4>\n<p>1、抽象类必须用public或protected修饰(如果为private修饰，那么子类则无法继承，也就无法实现其抽象方法）。 默认缺省为 public ；</p>\n<p>2、抽象类不可以使用new关键字创建对象， 但是在子类创建对象时， 抽象父类也会被JVM实例化 ；</p>\n<p>3、如果一个子类继承抽象类，那么必须实现其所有的抽象方法。如果有未实现的抽象方法，那么子类也必须定义为 abstract类 ；</p>\n<h3><a id=\"_592\"></a>接口</h3>\n<p>如果一个类中的全部方法都是抽象方法，全部属性都是全局常量，那么此时就可以将这个类定义成一个接口。</p>\n<p>定义格式：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">interface</span> 接口名称<span class=\"token punctuation\">{<!-- --></span> \n    全局常量 <span class=\"token punctuation\">;</span> \n    抽象方法 <span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_605\"></a>面向接口编程思想</h4>\n<p>这种思想是接口是定义（规范，约束）与实现（名实分离的原则）的分离。</p>\n<p>优点：</p>\n<p>1、 降低程序的耦合性</p>\n<p>2、 易于程序的扩展</p>\n<p>3、 有利于程序的维护</p>\n<h4><a id=\"_617\"></a>全局常量和抽象方法的简写</h4>\n<p>因为接口本身都是由全局常量和抽象方法组成 ， 所以接口中的成员定义可以简写：</p>\n<p>1、全局常量编写时， 可以省略public static final 关键字，例如：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String INFO <span class=\"token operator\">=</span> <span class=\"token string\">\"内容\"</span> <span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//简写后： </span>\nString INFO <span class=\"token operator\">=</span> <span class=\"token string\">\"内容\"</span> <span class=\"token punctuation\">;</span> \n</code></pre>\n<p>2、抽象方法编写时， 可以省略 public abstract 关键字， 例如：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//简写后： </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n</code></pre>\n<h4><a id=\"_implements_637\"></a>接口的实现 implements</h4>\n<p>接口可以多实现：</p>\n<p>格式：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> 子类 <span class=\"token keyword\">implements</span> 父接口<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>父接口<span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span> \n<span class=\"token comment\">//以上的代码称为接口的实现。那么如果一个类即要实现接口，又要继承抽象类的话，则按照以下的格式编写即可： </span>\n<span class=\"token keyword\">class</span> 子类 <span class=\"token keyword\">extends</span> 父类 <span class=\"token keyword\">implements</span> 父接口<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>父接口<span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：如果一个接口要想使用，必须依靠子类。 子类（如果不是抽象类的话）要实现接口中的所有抽象方法。</p>\n<h4><a id=\"_extends_651\"></a>接口的继承 extends</h4>\n<p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p>\n<p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实力域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p>\n<p>继承的限制：Java中只有单继承，多重继承，没有多继承（即一个子类只能有一个父类）。多重继承通俗来讲就是爷爷、爸爸、孙子。</p>\n<p><mark>接口因为都是抽象部分， 不存在具体的实现， 所以允许多继承</mark>,例如：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090518668.png\"/></p>\n<p>student类实例化时先实例化person，默认调用的person的无参构造方法</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        Student student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">supper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//平时supper()可以省略，作用时默认调用父类的无参构造方法</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名：\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"，年龄：\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">supper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//结果为：</span>\n<span class=\"token comment\">//姓名：张三，年龄：1</span>\n</code></pre>\n<p><em><strong>supper</strong></em></p>\n<ul><li> <p>通过supper可以访问父类的构造方法、属性、方法。</p> </li><li> <p>通过supper调用父类构造方法的代码，必须写在第一行。</p> </li><li> <p>supper和this调用构造函数时都需要放在第一行，但是两者不会同时使用，因为不可能调用自身构造函数的同时还调用父类的构造方法</p> </li></ul>\n<h4><a id=\"_708\"></a>接口与抽象类的区别</h4>\n<p>1、抽象类要被子类继承，接口要被类实现。</p>\n<p>2、接口只能声明抽象方法，抽象类中可以声明抽象方法，也可以写非抽象方法。</p>\n<p>3、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。</p>\n<p>4、抽象类使用继承来使用， 无法多继承。 接口使用实现来使用， 可以多实现</p>\n<p>5、抽象类中可以包含static方法 ，但是接口中不允许（静态方法不能被子类重写，因此接口中不能声明静态方法）</p>\n<p>6、接口不能有构造方法，但是抽象类可以有</p>\n<p>7、1.8后接口允许出现有方法体的方法</p>\n<h3><a id=\"_726\"></a>多态</h3>\n<p>多态：就是对象的多种表现形式，（多种体现形态）</p>\n<h4><a id=\"_730\"></a>多态的体现</h4>\n<p>对象的多态性，从概念上非常好理解，在类中有子类和父类之分，子类就是父类的一种形态 ，对象多态性就从此而来。</p>\n<p>ps: 方法的重载 和 重写 也是多态的一种， 不过是方法的多态（相同方法名的多种形态）。</p>\n<p><em><strong>重载：</strong></em> 一个类中方法的多态性体现 。</p>\n<p><em><strong>重写：</strong></em> 子父类中方法的多态性体现。</p>\n<h4><a id=\"_740\"></a>多态的使用：对象的类型转换</h4>\n<p>类似于基本数据类型的转换：</p>\n<ul><li> <p>向上转型：将子类实例变为父类实例 |- 格式：父类 父类对象 = 子类实例 ；</p> </li><li> <p>向下转型：将父类实例变为子类实例 |- 格式：子类 子类对象 = （子类）父类实例 ；</p> </li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \tStudent student1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Nurse nurse1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Nurse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//向上转型，父类引用指向子类对象</span>\n    \tPerson person1<span class=\"token operator\">=</span>student1<span class=\"token punctuation\">;</span>\n    \tperson1<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//输出：我是学生</span>\n        Person person2<span class=\"token operator\">=</span>nurse1<span class=\"token punctuation\">;</span>\n        person2<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//输出：我是护士</span>\n        <span class=\"token comment\">//向下转型</span>\n        Student student2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span>person1<span class=\"token punctuation\">;</span>\n        student2<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//输出：我是学生</span>\n        <span class=\"token comment\">//向下转型需要注意的是不能把原来是护士的张三转成学生   例如：</span>\n        Student student3<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span>person2<span class=\"token punctuation\">;</span>\n        student3<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//此处会报错     </span>\n        \n        <span class=\"token comment\">//向上转型比较高级的用法</span>\n        Student student4<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>student4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//输出：我是学生</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>Person person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        person<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是学生\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Nurse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是护士\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>注意：向上转型的对象，是通过父类调用子类覆盖或继承父类的方法，不是父类的方法。而且此时父类对象不能调用子类特有的方法。</p>\n<h3><a id=\"Instanceof_795\"></a>Instanceof</h3>\n<p>作用：</p>\n<p>判断某个对象是否是指定类的实例，则可以使用instanceof关键字</p>\n<p>格式：</p>\n<p>实例化对象 instanceof 类 //此操作返回boolean类型的数据</p>\n<h3><a id=\"Object_807\"></a>Object类</h3>\n<p>Object类是所有类的父类（基类），如果一个类没有明确的继承某一个具体的类，则将默认继承Object类。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//例如我们定义一个类： </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//其实它被使用时 是这样的： </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"Object_818\"></a>Object的多态</h4>\n<p>使用Object可以接收任意的引用数据类型</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tString text<span class=\"token operator\">=</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>Object o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"toString_834\"></a>toString()</h4>\n<ul><li> <p>建议重写Object中的toString方法。 此方法的作用：返回对象的字符串表示形式 ；</p> </li><li> <p>Object的toString方法， 返回对象的内存地址 ；</p> </li><li> <p>System.out.println(对象名)一般输出时调用的时对象的toString方法 ；</p> </li></ul>\n<h4><a id=\"equals_843\"></a>equals()</h4>\n<p>建议重写Object中的equals(Object obj)方法，此方法的作用：指示某个其他对象是否“等于”此对象。</p>\n<p>***Object的 equals方法：***实现了对象上最具区别的可能等价关系; 也就是说，对于任何非空引用值x和y ，当且仅当 x和y引用同一对象</p>\n<p>（ x == y具有值true ）时，此方法返回true 。</p>\n<p><em><strong>equals方法重写时的五个特性：</strong></em></p>\n<p>自反性 ：对于任何非空的参考值x ， x.equals(x)应该返回true 。</p>\n<p>对称性 ：对于任何非空引用值x和y ， x.equals(y)应该返回true当且仅当y.equals(x)回报true 。</p>\n<p>传递性 ：对于任何非空引用值x ， y和z ，如果x.equals(y)回报true个y.equals(z)回报true ，然后 x.equals(z)应该返回true 。</p>\n<p>一致性 ：对于任何非空引用值x和y ，多次调用x.equals(y)始终返回true或始终返回false ，前提是未修改对象上的equals比较中使用的信息。</p>\n<p>非空性 ：对于任何非空的参考值x ， x.equals(null)应该返回false 。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//判断内存地址是否相同</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">==</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//非空性</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">==</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//判断是否是同一个类</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//向下转型</span>\n            Person p2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span>o<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//此处调用的是String里的equals()方法，和Object不同</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">==</span>p2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em><strong>equals和==的区别</strong></em></p>\n<p>前者是比较两个数是否等价，后者是比较地址</p>\n<h3><a id=\"_896\"></a>可变参数</h3>\n<p>一个方法中定义完了参数，则在调用的时候必须传入与其一一对应的参数，但是在JDK 1.5之后提供了新的功能，可以根据需要自动传入任意个数的参数。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-java\">返回值类型 方法名称<span class=\"token punctuation\">(</span>数据类型…参数名称<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//参数在方法内部 ， 以数组的形式来接收 </span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//输出：1</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//输出：3</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//输出：6</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//输出：10</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            n<span class=\"token operator\">+=</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意： 可变参数只能出现在参数列表的最后。</p>\n<h3><a id=\"_928\"></a>递归</h3>\n<p>递归，在数学与计算机科学中，是指在方法的定义中使用方法自身。也就是说，递归算法是一种直接或者间接调用自身方</p>\n<p>法的算法。</p>\n<p>递归流程图如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090541132.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//5的阶乘</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果：120</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            n<span class=\"token operator\">*</span><span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：能用循环完成的工作，尽量不要使用递归，因为太消耗内存。</p>\n<h3><a id=\"_958\"></a>异常处理</h3>\n<p>异常是在程序中导致程序中断运行的一种指令流。</p>\n<p>例如，现在有如下的操作代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionDemo01</span><span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String argsp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> \n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============= 计算开始 =============\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> i <span class=\"token operator\">/</span> j <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 进行除法运算 </span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"temp = \"</span> <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============= 计算结束 =============\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//运行结果： </span>\n<span class=\"token comment\">//============= 计算开始 ============= </span>\nException in thread <span class=\"token string\">\"main\"</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ArithmeticException<span class=\"token operator\">:</span> <span class=\"token operator\">/</span> by zero at ExceptionDemo01<span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span>ExceptionDemo01<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<p>以上的代码在“int temp = i / j ;”位置处产生了异常，一旦产生异常之后，异常之后的语句将不再执行了，所以现在的程序并没有正确的执行完毕之后就退出了。</p>\n<p>那么，<mark>为了保证程序出现异常之后仍然可以正确的执行完毕</mark>，所以要采用异常的处理机制。</p>\n<p>如果要想对异常进行处理，则必须采用标准的处理格式，处理格式语法如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 有可能发生异常的代码段 </span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">1</span> 对象名<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token comment\">// 异常的处理操作 </span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">2</span> 对象名<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 异常的处理操作 </span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token comment\">// 异常的统一出口 </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionDemo01</span><span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String argsp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> \n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============= 计算开始 =============\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> i <span class=\"token operator\">/</span> j <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 进行除法运算 </span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"temp = \"</span> <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============= 计算结束 =============\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ArithmeticException e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"除数不能为零\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"trycatch_1014\"></a>try+catch的处理流程</h4>\n<p>1、 一旦产生异常，则系统会自动产生一个异常类的实例化对象。</p>\n<p>2、 那么，此时如果异常发生在try语句，则会自动找到匹配的catch语句执行，如果没有在try语句中，则会将异常抛出.</p>\n<p>3、 所有的catch根据方法的参数匹配异常类的实例化对象，<mark>如果匹配成功，则表示由此catch进行处理</mark>。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090700989.png\"/></p>\n<p>注意：使用try…catch捕获异常不是简单的提示就行了，那样意义很小，我们应该想办法解决异常。</p>\n<h4><a id=\"finally_1027\"></a>finally</h4>\n<p>在进行异常的处理之后，在异常的处理格式中还有一个finally语句，那么此语句将作为异常的统一出口，不管是否产生了异常，最终都要执行此段代码。</p>\n<p><mark>注意：finally在一些情况是不会被执行的，比如电脑被关机了（方法强制中断）。</mark></p>\n<p><mark>唯一会使finally不执行的代码：</mark></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出现了异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//退出JVM</span>\n            System<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"锄禾日当午，汗滴禾下土\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//结果：出现了异常</span>\n</code></pre>\n<p>finally两种执行情况：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//案例一</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        Person p<span class=\"token operator\">=</span><span class=\"token function\">haha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//输出：28</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Person <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        Person p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n            p<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">{<!-- --></span>\n            p<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//finally会再return 准备数据返回的阶段执行，所以，无论是否return，finally都是执行。</span>\n\n<span class=\"token comment\">//案例二</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//输出：10</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">{<!-- --></span>\n            a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//结果和案例一不一样，是因为两者返回的数据类型不一样。</span>\n<span class=\"token comment\">//案例一返回的是引用数据类型，在return的准备数据返回的阶段，备份的是堆内存地址，所以堆内存里的Person对象的age改变，return备份的值都会改变。</span>\n<span class=\"token comment\">//案例二返回的是基本数据类型，在return的准备数据返回阶段，备份的是值，即10，所以无论栈内存中的a如何改变，都不会影响return备份的10。</span>\n</code></pre>\n<p>案例一内存使用情况如下图所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090725612.png\"/></p>\n<p>案例二内存使用情况如下图所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2021022209074539.png\"/></p>\n<h4><a id=\"_1115\"></a>异常体系结构</h4>\n<p>异常指的是Exception ， Exception类， 在Java中存在一个父类Throwable（可能的抛出）</p>\n<p>Throwable存在两个子类：</p>\n<ol><li> <p>Error：表示的是错误，是JVM发出的错误操作,只能尽量避免，无法用代码处理。</p> </li><li> <p>Exception：一般表示所有程序中的错误，所以一般在程序中将进行try…catch的处理。</p> </li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090811605.png\"/></p>\n<p>受检异常代码会飘红，不受检异常不会。</p>\n<p>多异常捕获的注意点：</p>\n<p>1、 捕获更粗的异常不能放在捕获更细的异常之前。</p>\n<p>2、 如果为了方便，则可以将所有的异常都使用Exception进行捕获。</p>\n<p>特殊的多异常捕获写法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">1</span> <span class=\"token operator\">|</span>异常类型<span class=\"token number\">2</span> 对象名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token comment\">//表示此块用于处理异常类型1 和 异常类型2 的异常信息 </span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//还有可以直接使用Exception类捕获异常，这样所有的异常都能捕获，缺点是针对性差</span>\n</code></pre>\n<h4><a id=\"throws_1145\"></a>throws关键字</h4>\n<p>在程序中异常的基本处理已经掌握了，但是随异常一起的还有一个称为throws关键字，此关键字主要在方法的声明上使用，表示方法中不处理异常，而交给调用处处理。</p>\n<p>格式：</p>\n<pre><code class=\"prism language-java\">返回值 方法名称<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{<!-- --></span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果是传参导致的异常，应该通过throws将异常抛出去：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">shutDown</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//此处也是受检异常（飘红），因为shutDown()方法把异常抛给了调用者，所以需要捕获或者抛出异常。</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shutDown</span><span class=\"token punctuation\">(</span>String text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{<!-- --></span>\n    \tRuntime<span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//此处为受检异常（飘红），需要捕获或者抛出异常</span>\n    <span class=\"token punctuation\">}</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//通俗点来讲，抛出异常就是告诉调用者，我这个方法有异常，你需要处理。</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"throw_1171\"></a>throw关键字</h4>\n<p>throw关键字表示在程序中人为的抛出一个异常，因为从异常处理机制来看，所有的异常一旦产生之后，实际上抛出的就是一个异常类的实例化对象，那么此对象也可以由throw直接抛出。</p>\n<p>代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抛着玩的。\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n</code></pre>\n<p>示例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        Person person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        person<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> age<span class=\"token operator\">&gt;</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            RuntimeException e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄不合理\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上述代码运行结果如下图所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090828931.png\"/></p>\n<h4><a id=\"RuntimeExcepionException_1208\"></a>RuntimeExcepion与Exception的区别</h4>\n<p>注意观察如下方法的源码：</p>\n<p>Integer类：</p>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>String text<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> NumberFormatException \n</code></pre>\n<p>此方法抛出了异常， 但是使用时却不需要进行try…catch捕获处理，原因：</p>\n<p>因为NumberFormatException并不是Exception的直接子类，而是RuntimeException的子类，只要是RuntimeException的子类，则表示程序在操作的时候可以不必使用try…catch进行处理，如果有异常发生，则由JVM进行处理。当然，也可以通过try catch处理。</p>\n<h4><a id=\"_1222\"></a>自定义异常类</h4>\n<p>编写一个类， 继承Exception，并重写一参构造方法 即可完成自定义受检异常类型。</p>\n<p>编写一个类， 继承RuntimeException，并重写一参构造方法 即可完成自定义运行时异常类型。</p>\n<p>例如：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 继承Exception，表示一个自定义异常类 </span>\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span>String msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用Exception中有一个参数的构造 </span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        Person person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        person<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> MyException<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> age<span class=\"token operator\">&gt;</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            MyException e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄不合理\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">//此处会飘红，因为属于受检异常，所以必须得抛出异常;不要捕获异常，因为自己生成异常又自己捕获异常，很脑残</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>自定义异常可以做很多事情， 例如：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span>String msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">//在这里给维护人员发短信或邮件， 告知程序出现了BUG。 </span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"trywithresources_1265\"></a>try-with-resources</h4>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//jdk1.7之前</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n     FileReader fr <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n        fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d://book.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读取一个字节</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">prinyln</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n            fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//jdk1.7时</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span>FileReader fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d://book.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//try小括号里的对象必须是实现了AutoCloseable，这样才会自动关闭对象</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读取一个字节</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">prinyln</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//jdk9进行了优化</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    FileReader fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d://book.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    PrintWriter pw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d://book.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">;</span>pw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//try小括号里可以放置多个对象，对象之间用分号分隔</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读取一个字节</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">prinyln</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//自定义实现了Closeable的对象</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    CloseDemo d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CloseDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloseDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Closeable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{<!-- --></span>\n\t\tSytem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close方法被调用了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token comment\">//输出：close方法被调用了</span>\n</code></pre>\n<h3><a id=\"_1324\"></a>构造方法（构造器）</h3>\n<p>Person p = new Person();</p>\n<p>在右侧Person后面出现的小括号, 其实就是在调用构造方法</p>\n<p><em><strong>作用：</strong></em></p>\n<p>用于对象初始化。</p>\n<p><em><strong>执行时机：</strong></em></p>\n<p>在创建对象时,自动调用</p>\n<p><em><strong>特点：</strong></em></p>\n<p>所有的Java类中都会至少存在一个构造方法</p>\n<p>如果一个类中没有明确的编写构造方法, 则编译器会自动生成一个无参的构造方法, 构造方法中没有任何的代</p>\n<p>码！</p>\n<p>如果自行编写了任意一个构造器, 则编译器不会再自动生成无参的构造方法。</p>\n<p><em><strong>定义的格式 :</strong></em></p>\n<p>与普通方法基本相同, 区别在于: 方法名称必须与类名相同, 没有返回值类型的声明 ；</p>\n<ul><li> <p>建议自定义无参构造方法，不要对编译器形成依赖，避免错误发生。</p> </li><li> <p>当类中有非常量成员变量时，建议提供两个版本的构造方法，一个是无参构造方法，一个是全属性做参数的构造方法。</p> </li><li> <p>当类中所有成员变量都是常量或者没有成员变量时，建议不提供任何版本的构造。</p> </li></ul>\n<h3><a id=\"Overload_1360\"></a>重载（Overload）</h3>\n<p><em><strong>方法的重载</strong></em></p>\n<ul><li>方法名称相同, 参数类型或参数长度不同或顺序不同, 可以完成方法的重载 ；</li><li>方法的重载与返回值无关；</li><li>方法的重载 ,可以让我们在不同的需求下, 通过传递不同的参数调用方法来完成具体的功能。</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">double</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em><strong>构造方法的重载</strong></em></p>\n<ul><li>一个类, 可以存在多个构造方法 ；</li><li>参数列表的长度或类型不同即可完成构造方法的重载 ；</li><li>构造方法的重载 ,可以让我们在不同的创建对象的需求下, 调用不同的方法来完成对象的初始化 ；</li></ul>\n<h3><a id=\"Override_1385\"></a>重写（Override）</h3>\n<ol><li>参数列表必须完全与被重写的方法相同；</li><li>返回类型必须完全与被重写的返回类型相同；</li><li>访问权限不能比父类被重写的方法的访问权限更低。例如父类方法为public，子类就不能为protected;</li><li>父类的成员方法只能被它的子类继承；</li><li>声明为static和private的方法不能被重写，但是能够被再次声明；</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        Student student<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"锄禾日当午，汗滴禾下土。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"锄禾日当午，玻璃好上霜。要不及时擦，整不好得脏。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//结果为：</span>\n<span class=\"token comment\">//锄禾日当午，玻璃好上霜。要不及时擦，整不好得脏。</span>\n</code></pre>\n<h3><a id=\"_1416\"></a>重写与重载的区别</h3>\n<ul><li> <p>重写方法名返回值相同参数相同；</p> </li><li> <p>重载方法名相同返回值相同参数可以不同，个数可以不同；</p> </li><li> <p>重写发生在父子类中，重载发生在一个类中；</p> </li><li> <p>重载与访问权限无关 ；</p> </li><li> <p>异常处理：重载与异常无关 ； 重写异常范围可以更小，但是不能抛出新的异常 ；</p> </li></ul>\n<h3><a id=\"Java_1430\"></a>Java两种核心机制</h3>\n<p><em><strong>Java 虚拟机(Java Virtual Machine) JVM</strong></em></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222090855678.png\"/></p>\n<p>JVM 可以理解成一个可运行 Java 字节码的虚拟计算机系统</p>\n<ul><li> <p>它有一个解释器组件，可以实现 Java 字节码和计算机操作系统之间的通信</p> </li><li> <p>对于不同的运行平台，有不同 的 JVM。</p> </li><li> <p>JVM 屏蔽了底层运行平台的差别，实现了“一次编译，随处运行”。</p> </li></ul>\n<p><em><strong>垃圾回收器(Garbage Collection) GC</strong></em></p>\n<ul><li> <p>不再使用的内存空间应当进行回收-垃圾回收。</p> </li><li> <p>在 C/C++等语言中，由程序员负责回收无用内存。</p> </li><li> <p>Java 语言消除了程序员回收无用内存空间的责任：</p> </li><li> <p>JVM 提供了一种系统线程跟踪存储空间的分配情况。并在 JVM 的空闲时，检查并释放那些可以被释放的存储空间。</p> </li><li> <p>垃圾回收器在 Java 程序运行过程中自动启用，程序员无法精确控制和干预。</p> </li></ul>\n<h3><a id=\"JAVA_1459\"></a>JAVA跨平台原理</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222091003264.png\"/></p>\n<ul><li></li></ul>\n<h3><a id=\"_1470\"></a>标识符</h3>\n<p>Java 对包、类、方法、参数和变量等要素命名时使用的字符序列称为标识符。</p>\n<p><em><strong>规则如下:</strong></em></p>\n<ul><li> <p>由字母、数字、下划线（_）和美元符号（$）组成。</p> </li><li> <p>不能以数字开头。</p> </li><li> <p>区分大小。</p> </li><li> <p>长度无限制。</p> </li><li> <p>不能是 Java 中的保留关键字。</p> </li></ul>\n<p>标识符命名习惯：见名知意。</p>\n<h3><a id=\"_1490\"></a>关键字</h3>\n<p>Java 中有一些赋予特定的含义，有专门用途的字符串称为关键字（keyword）。全部是小写。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222091024290.png\"/></p>\n<h4><a id=\"this_1497\"></a>this</h4>\n<p>在Java基础中，this关键字是一个最重要的概念。使用this关键字可以完成以下的操作：</p>\n<ul><li>调用类中的属性</li><li>调用类中的方法或构造方法 ，注意：在一个构造方法中，调用另一个构造方法时，调用的代码必须编写在构造方法的第一行。</li><li>表示当前对象</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//调用下面的构造方法，如果下面还有代码，必须写在第一行</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//调用类中的属性</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"static_1523\"></a>static</h4>\n<p><em><strong>概述</strong></em></p>\n<p>static表示“静态”的意思，可以用来修饰成员变量和成员方法(后续还会学习 静态代码块 和 静态内部类)。 static的主要作用在于创建独立于具体对象的域变量或者方法 。</p>\n<p><em><strong>简单理解：</strong></em></p>\n<p>被static关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问。 并且不会因为对象的多次创建 而在内存中建立多份数据 。</p>\n<p><em><strong>重点 ：</strong></em></p>\n<ol><li>静态成员 在类加载时加载并初始化 ；</li><li>无论一个类存在多少个对象 , 静态的属性, 永远在内存中只有一份( 可以理解为所有对象公用 ) ；</li><li>在访问时： 静态不能访问非静态 , 非静态可以访问静态 ；</li><li>静态修饰的方法，被调用时，有可能对象还未创建 ；</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210222091039852.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//示例一</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/**\n        Emp e1 = new Emp(\"张三\",\"北京\");\n        Emp e2 = new Emp(\"李四\",\"北京\");\n        Emp e3 = new Emp(\"王二\",\"北京\");\n        Emp e4 = new Emp(\"麻子\",\"北京\");\n        //假设公司迁址到天津\n        e1.setRegion(\"天津\");\n        e2.setRegion(\"天津\");\n        e3.setRegion(\"天津\");\n        e4.setRegion(\"天津\");\n        */</span><span class=\"token comment\">//上述代码替换地址工作量非常大，所以可以把地址定义成静态变量</span>\n        Emp<span class=\"token punctuation\">.</span>region<span class=\"token operator\">=</span><span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">;</span>\n        Emp e1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Emp e2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Emp e3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Emp e4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"麻子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Emp<span class=\"token punctuation\">.</span>region<span class=\"token operator\">=</span><span class=\"token string\">\"天津\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//private String region;</span>\n    <span class=\"token keyword\">static</span> String region<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Emp</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span>String region<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>region<span class=\"token operator\">=</span>region<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Emp</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> region<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span>String region<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>region<span class=\"token operator\">=</span>region<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//示例二</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Clothes clothes1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Clothes clothes2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Clothes clothes3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"序号：\"</span><span class=\"token operator\">+</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出：</span>\n<span class=\"token comment\">//序号：1</span>\n<span class=\"token comment\">//序号：2</span>\n<span class=\"token comment\">//序号：3</span>\n</code></pre>\n<h4><a id=\"final_1616\"></a>final</h4>\n<p><em><strong>final用于修饰属性(类里定义的标识符称为属性)和变量(方法体里定义的标识符成为变量：</strong></em></p>\n<ul><li>通过final修饰的属性和变量都是常量，就是不能再次赋值的变量或属性 ；</li><li>final修饰的局部变量，只能赋值一次（可以先声明后赋值）；</li><li>final修饰的成员属性，必须在声明时赋值 ；</li><li>全局常量（public static final）可以在任何位置被访问 ；</li><li>常量的命名规范：由一个或多个单词组成，单词之间必须使用下划线隔开，所有字母大写，例如：SQL_INSERT ；</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//如果常量定义时没有赋值初始值，那么可以赋值一次</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\na<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><em><strong>final用于修饰类：</strong></em></p>\n<p>final修饰的类，不能被继承。</p>\n<p><em><strong>final用于修饰方法：</strong></em></p>\n<p>final修饰的方法，不能被子类重写。</p>\n<h3><a id=\"_1642\"></a>权限修饰符</h3>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-971NLHBM-1613955209061)(java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86.assets/image-20210121165006550.png)]</p>\n<h4><a id=\"private_1646\"></a>封装private</h4>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//我们观察如下代码：</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">private</span> String name <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示姓名 </span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age <span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 表示年龄 </span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">tell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"；年龄：\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        Person per <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        per<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span> <span class=\"token punctuation\">;</span>\n        per<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span> <span class=\"token punctuation\">;</span>\n        per<span class=\"token punctuation\">.</span><span class=\"token function\">tell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//以上的操作代码并没有出现了语法错误，但是出现了逻辑错误 （年龄-30岁） 在开发中， 为了避免出现逻辑错误， 我们建议对所有属性进行封装，并为其提供setter及getter方法进行设置和取得 操作。 修改代码如下：</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">private</span> String name <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示姓名 </span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age <span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 表示年龄 </span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">tell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"；年龄：\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>String str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        name <span class=\"token operator\">=</span> str <span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>a<span class=\"token operator\">&lt;</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span> age <span class=\"token operator\">=</span> a <span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">return</span> name <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">return</span> age <span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OODemo10</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        Person per <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        per<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n        per<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n        per<span class=\"token punctuation\">.</span><span class=\"token function\">tell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1697\"></a>代码块</h3>\n<p><em><strong>普通代码块</strong></em></p>\n<p>在执行的流程中 出现的 代码块， 我们称其为普通代码块。</p>\n<p><em><strong>构造代码块</strong></em></p>\n<p>在类中的成员代码块， 我们称其为构造代码块， 在每次对象创建时执行， 执行在构造方法之前。</p>\n<p><em><strong>静态代码块</strong></em></p>\n<p>在类中使用static修饰的成员代码块， 我们称其为静态代码块， 在类加载时执行。 每次程序启动到关闭 ，只会 执行一次的代码块。</p>\n<p><em><strong>同步代码块</strong></em></p>\n<p>在后续多线程技术中学习。</p>\n<p><em><strong>面试题：</strong></em></p>\n<p>构造方法 与 构造代码块 以及 静态代码块的执行顺序：</p>\n<p>静态代码块 --&gt; 构造代码块 --&gt; 构造方法</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//普通代码块，就是{}的范围</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n    Person p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Person p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//构造代码块</span>\n    <span class=\"token comment\">//区别于构造方法，无论用户调用哪一个构造方法来创建对象，构造代码块都必然执行。</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对象创建时执行1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//静态代码块</span>\n    <span class=\"token comment\">//随着类的加载（第一次使用），静态代码执行。</span>\n    <span class=\"token comment\">//因为类只加载一次，所以静态代码只执行一次。</span>\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块执行\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//构造方法</span>\n    <span class=\"token comment\">//构造方法不一定会执行，因为构造方法存在重载，这就取决于用户创建对象时采用哪个重载。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对象创建时执行2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出： 静态代码块执行\t\t        只执行一次</span>\n<span class=\"token comment\">//      对象创建时执行1</span>\n<span class=\"token comment\">//\t\t对象创建时执行2</span>\n<span class=\"token comment\">//      对象创建时执行1</span>\n<span class=\"token comment\">//\t\t对象创建时执行2</span>\n</code></pre>\n<h3><a id=\"_1757\"></a>包</h3>\n<ol><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>包如同文件夹一样，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li><li>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li></ol>\n<p><em><strong>包的使用规则</strong></em></p>\n<p><em><strong>- 包中java文件的定义：</strong></em></p>\n<p>在.java文件的首部， 必须编写类所属哪个包， 格式：</p>\n<p>package 包名;</p>\n<p><em><strong>- 包的定义：</strong></em></p>\n<p>通常由多个单词组成， 所有单词的字母小写， 单词与单词之间使用.隔开 ，一般命名为“com.公司名.项目名.模块名…”。</p>\n<p><em><strong>规范由来：</strong></em></p>\n<p>由于Java面向对象的特性，每名Java开发人员都可以编写属于自己的Java Package，为了保障每个Java Package命名的唯一性，在最新的Java编程规范中，要求开发人员在自己定义的包名前加上唯一的前缀。由于互联网上的域名称是不会重复的，所以多数开发人员采用自己公司在互联网上的域名称作为自己程序包的唯一前缀。例如：</p>\n<p>com.java.xxx</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}