{"blogid": "126225877", "writerAge": "码龄1年", "writerBlogNum": "44", "writerCollect": "1193", "writerComment": "2358", "writerFan": "1707", "writerGrade": "5级", "writerIntegral": "4038", "writerName": "蜡笔雏田学前端", "writerProfileAdress": "writer_image\\profile_126225877.jpg", "writerRankTotal": "4551", "writerRankWeekly": "58", "writerThumb": "1242", "writerVisitNum": "122225", "blog_read_count": "16317", "blog_time": "已于 2022-08-19 21:50:45 修改", "blog_title": "【React-Hooks进阶】useState回调函数的参数 / useEffect发送网络请求/ useRef / useContext", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>前言</strong></p>\n<blockquote>\n<p>博主主页👉🏻<a href=\"https://blog.csdn.net/xuxuii?spm=1011.2415.3001.5343\">蜡笔雏田学代码</a><br/> 专栏链接👉🏻<a href=\"https://blog.csdn.net/xuxuii/category_11838680.html\">React专栏</a><br/> 上篇文章初步学习了<a href=\"https://blog.csdn.net/xuxuii/article/details/126209441?spm=1001.2014.3001.5502\">Hooks的基础知识</a><br/> 今天来深入学习Hooks的一些扩展知识<br/> 感兴趣的小伙伴一起来看看吧~🤞</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" height=\"70%\" src=\"image\\598c54adc424490cb50c1d0be84b1989.jpeg\" width=\"70%\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#useState__12\">useState -回调函数的参数</a></li><li><ul><li><a href=\"#_14\">使用场景</a></li><li><a href=\"#_18\">语法</a></li><li><a href=\"#_26\">语法规则</a></li><li><a href=\"#_31\">语法选择</a></li><li><a href=\"#_36\">代码</a></li></ul>\n</li><li><a href=\"#useEffect___64\">useEffect - 发送网络请求</a></li><li><ul><li><a href=\"#_66\">使用场景</a></li><li><a href=\"#_70\">语法要求</a></li><li><a href=\"#_81\">正确写法</a></li></ul>\n</li><li><a href=\"#useRef_96\">useRef</a></li><li><ul><li><a href=\"#_98\">使用场景</a></li><li><a href=\"#_102\">使用步骤</a></li><li><a href=\"#dom_108\">获取dom</a></li><li><a href=\"#_126\">获取组件实例</a></li></ul>\n</li><li><a href=\"#useContext_155\">useContext</a></li><li><ul><li><a href=\"#_161\">实现步骤</a></li><li><a href=\"#_167\">代码实现</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"useState__12\"></a>useState -回调函数的参数</h1>\n<h2><a id=\"_14\"></a>使用场景</h2>\n<p>参数只会在<strong>组件的初始渲染中起作用</strong>，后续渲染时会被忽略。如果初始 state 需要通过计算才能获得，则<code>可以传入一个函数</code>，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用。</p>\n<h2><a id=\"_18\"></a>语法</h2>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>   \n  <span class=\"token comment\">// 编写计算逻辑    return '计算之后的初始值'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_26\"></a>语法规则</h2>\n<blockquote>\n<ol><li>回调函数return出去的值将作为 <code>name</code> 的初始值</li><li>回调函数中的逻辑只会在组件初始化的时候执行一次</li></ol>\n</blockquote>\n<h2><a id=\"_31\"></a>语法选择</h2>\n<blockquote>\n<ol><li>如果就是初始化一个普通的数据 直接使用 <code>useState(普通数据)</code> 即可</li><li>如果要初始化的数据无法直接得到需要通过计算才能获取到，使用<code>useState(()=&gt;{})</code></li></ol>\n</blockquote>\n<h2><a id=\"_36\"></a>代码</h2>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>count\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Counter count<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Counter count<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App\n</code></pre>\n<h1><a id=\"useEffect___64\"></a>useEffect - 发送网络请求</h1>\n<h2><a id=\"_66\"></a>使用场景</h2>\n<blockquote>\n<p>如何在useEffect中发送网络请求，并且封装同步 async await操作</p>\n</blockquote>\n<h2><a id=\"_70\"></a>语法要求</h2>\n<blockquote>\n<p><code>不可以直接在useEffect的回调函数外层直接包裹 await </code>，因为<strong>异步会导致清理函数无法立即返回</strong></p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>    \n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://geek.itheima.net/v1_0/channels'</span><span class=\"token punctuation\">)</span>   \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_81\"></a>正确写法</h2>\n<p>在<code>内部单独定义一个函数</code>，然后把这个函数包装成同步</p>\n<pre><code class=\"prism language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//  发送请求</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://geek.itheima.net/v1_0/channels'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"useRef_96\"></a>useRef</h1>\n<h2><a id=\"_98\"></a>使用场景</h2>\n<blockquote>\n<p>在函数组件中获取<strong>真实的dom元素对象</strong>或者是<strong>组件对象</strong></p>\n</blockquote>\n<h2><a id=\"_102\"></a>使用步骤</h2>\n<blockquote>\n<ol><li>导入 <code>useRef</code> 函数</li><li>执行 <code>useRef</code> 函数并传入null，返回值为一个对象 内部有一个current属性存放拿到的dom对象（组件实例）</li><li>通过ref 绑定 要获取的元素或者组件</li></ol>\n</blockquote>\n<h2><a id=\"dom_108\"></a>获取dom</h2>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  \n    <span class=\"token keyword\">const</span> h1Ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>    \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>h1Ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>    \n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>      \n            <span class=\"token operator\">&lt;</span>h1 ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span> h1Ref <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">this</span> is h1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>    \n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>  \n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App\n</code></pre>\n<h2><a id=\"_126\"></a>获取组件实例</h2>\n<blockquote>\n<p>函数组件由于没有实例，不能使用ref获取，如果想获取组件实例，<code>必须是类组件</code></p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TeastC</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>我是类组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> testRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// useEffect回调 是在dom渲染之后还是之前执行？ 之后！</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>TeastC ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>testRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"useContext_155\"></a>useContext</h1>\n<blockquote>\n<p>一种<strong>组件间通信方式</strong>, 常用于【祖组件】与【后代组件】间通信</p>\n<p>在hooks下如何跨组件传数据</p>\n</blockquote>\n<h2><a id=\"_161\"></a>实现步骤</h2>\n<blockquote>\n<ol><li>使用<code>createContext</code> 创建Context对象</li><li>在顶层组件通过<code>Provider</code> 提供数据</li><li>在底层组件通过<code>useContext</code>函数获取数据</li></ol>\n</blockquote>\n<h2><a id=\"_167\"></a>代码实现</h2>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createContext<span class=\"token punctuation\">,</span> useContext<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建Context对象</span>\n<span class=\"token keyword\">const</span> Context <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ConA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 底层组件通过useContext函数获取数据 </span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token keyword\">this</span> is ConA\n      app传过来的数据是：<span class=\"token punctuation\">{<!-- --></span>count<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>ConC <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ConC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 底层组件通过useContext函数获取数据 </span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token keyword\">this</span> is ConC\n      app传过来的数据是：<span class=\"token punctuation\">{<!-- --></span>count<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 顶层组件通过Provider 提供数据 </span>\n    <span class=\"token operator\">&lt;</span>Context<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>ConA <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n\t\t\t\t<span class=\"token comment\">//提供方修改count数据之后,使用方也会更新这个数据</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Context<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//打印结果: </span>\n<span class=\"token keyword\">this</span> is ConA app传过来的数据是：<span class=\"token number\">10</span>\n<span class=\"token keyword\">this</span> is ConC app传过来的数据是：<span class=\"token number\">10</span>\n</code></pre>\n<blockquote>\n<p>Context如果要传递的数据，只需要在整个应用初始化的时候传递一次就可以，就可以选择在入口文件index.js里通过Provider 提供数据。</p>\n<p>Context如果需要传递数据并且将来还需要再对数据做修改，底层组件也需要跟着一起变，就可以在顶层组件那里通过Provider 提供数据。</p>\n</blockquote>\n<blockquote>\n<p><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          今天的分享就到这里啦✨\n         \n        \n       \n       \n        \\textcolor{red}{今天的分享就到这里啦✨}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: red;\">今天的分享就到这里啦</span><span class=\"mord\" style=\"color: red;\">✨</span></span></span></span></span> <br/><br/> <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          原创不易，还希望各位大佬支持一下\n         \n        \n       \n       \n        \\textcolor{blue}{原创不易，还希望各位大佬支持一下}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: blue;\">原创不易，还希望各位大佬支持一下</span></span></span></span></span> <br/><br/> 🤞 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          点赞，你的认可是我创作的动力！\n         \n        \n       \n       \n        \\textcolor{green}{点赞，你的认可是我创作的动力！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">点赞，你的认可是我创作的动力！</span></span></span></span></span> <br/><br/> ⭐️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          收藏，你的青睐是我努力的方向！\n         \n        \n       \n       \n        \\textcolor{green}{收藏，你的青睐是我努力的方向！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">收藏，你的青睐是我努力的方向！</span></span></span></span></span> <br/><br/> ✏️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          评论，你的意见是我进步的财富！\n         \n        \n       \n       \n        \\textcolor{green}{评论，你的意见是我进步的财富！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">评论，你的意见是我进步的财富！</span></span></span></span></span> <br/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}