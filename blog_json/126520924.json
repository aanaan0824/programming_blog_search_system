{"blogid": "126520924", "writerAge": "码龄1年", "writerBlogNum": "26", "writerCollect": "349", "writerComment": "279", "writerFan": "289", "writerGrade": "4级", "writerIntegral": "801", "writerName": "Yu仙笙真滴卷", "writerProfileAdress": "writer_image\\profile_126520924.jpg", "writerRankTotal": "20909", "writerRankWeekly": "140", "writerThumb": "208", "writerVisitNum": "4903", "blog_read_count": "317", "blog_time": "已于 2022-08-31 10:51:59 修改", "blog_title": "C++知识精讲12——取整方式及实战讲解【全网最详细取整“集合”】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p><span style=\"color:#79c6cd;\"><u><em><strong>作者：Yu仙笙真滴卷😎</strong></em></u></span></p>\n<p><span style=\"color:#ff9900;\"><u><em><strong>专栏：C++知识精讲🏀</strong></em></u></span></p>\n<p><span style=\"color:#511b78;\"><u><em><strong>文章简介：</strong></em></u></span></p>\n<p>本文我们来讲C++知识精讲的第13篇，取整方式及实战讲解，此专栏会讲许多，各种各样的类型，如果喜欢此专栏请订阅持续关注，感谢大家的支持。接下来，进入今天的知识精讲。 </p>\n</blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>强烈建议点赞收藏起来，干货太多，以免以后找不到！😘</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>真的全网最详细！！！😎</strong></span></p>\n<p><span style=\"color:#6eaad7;\"><strong>这是作者的得意之作，啊哈哈哈🤣</strong></span></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%8F%96%E6%95%B4%E6%96%B9%E5%BC%8F%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8F%96%E6%95%B4%E6%96%B9%E5%BC%8F%C2%A0\">取整方式 </a></p>\n<p id=\"First%C2%B7%E5%90%910%E5%8F%96%E6%95%B4-toc\" style=\"margin-left:0px;\"><a href=\"#First%C2%B7%E5%90%910%E5%8F%96%E6%95%B4\">First·向0取整</a></p>\n<p id=\"%E5%90%AB%E4%B9%89%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%90%AB%E4%B9%89%EF%BC%9A\">含义：</a></p>\n<p id=\"%E7%94%A8%E6%B3%95%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%94%A8%E6%B3%95%EF%BC%9A\">用法：</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%EF%BC%9A\">代码实现示例：</a></p>\n<p id=\"trunc%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#trunc%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6%C2%A0\">trunc函数使用的头文件 </a></p>\n<p id=\"trunc%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#trunc%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">trunc函数基本用法</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%20%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%20%EF%BC%9A\">代码实现示例 ：</a></p>\n<p id=\"%C2%A0Second%C2%B7%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Second%C2%B7%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5\"> Second·四舍五入</a></p>\n<p id=\"%E5%90%AB%E4%B9%89%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%90%AB%E4%B9%89%EF%BC%9A\">含义：</a></p>\n<p id=\"%E7%94%A8%E6%B3%95%EF%BC%9A%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%94%A8%E6%B3%95%EF%BC%9A%C2%A0\">用法： </a></p>\n<p id=\"round%E5%87%BD%E6%95%B0%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:80px;\"><a href=\"#round%E5%87%BD%E6%95%B0%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6\">round函数用的头文件</a></p>\n<p id=\"round%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#round%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">round函数基本用法</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%EF%BC%9A\">代码实现示例：</a></p>\n<p id=\"Third%C2%B7%E5%90%91%E4%B8%8B%E5%8F%96%E6%95%B4%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#Third%C2%B7%E5%90%91%E4%B8%8B%E5%8F%96%E6%95%B4%C2%A0\">Third·向下取整 </a></p>\n<p id=\"%E5%90%AB%E4%B9%89%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%90%AB%E4%B9%89%EF%BC%9A\">含义：</a></p>\n<p id=\"%E7%94%A8%E6%B3%95%EF%BC%9A%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%94%A8%E6%B3%95%EF%BC%9A%C2%A0\">用法： </a></p>\n<p id=\"floor%E5%87%BD%E6%95%B0%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#floor%E5%87%BD%E6%95%B0%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6%C2%A0\">floor函数用的头文件 </a></p>\n<p id=\"floor%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#floor%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">floor函数基本用法</a></p>\n<p id=\"%E5%86%B7%E7%9F%A5%E8%AF%86%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%86%B7%E7%9F%A5%E8%AF%86%EF%BC%9A\">冷知识：</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%C2%A0%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%C2%A0%EF%BC%9A\">代码实现示例 ：</a></p>\n<p id=\"%E5%AE%9E%E6%88%98%E5%AF%BC%E5%85%A5%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%AE%9E%E6%88%98%E5%AF%BC%E5%85%A5%EF%BC%9A\">实战导入：</a></p>\n<p id=\"%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%EF%BC%9A\">算法分析：</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%9A\">代码实现：</a></p>\n<p id=\"%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%EF%BC%9A\">输出结果：</a></p>\n<p id=\"%E2%80%8B%E7%BC%96%E8%BE%91Fourth%C2%B7%E5%90%91%E4%B8%8A%E5%8F%96%E6%95%B4%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B%E7%BC%96%E8%BE%91Fourth%C2%B7%E5%90%91%E4%B8%8A%E5%8F%96%E6%95%B4%C2%A0\">​编辑Fourth·向上取整 </a></p>\n<p id=\"%E5%90%AB%E4%B9%89%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%90%AB%E4%B9%89%EF%BC%9A\">含义：</a></p>\n<p id=\"%E7%94%A8%E6%B3%95%EF%BC%9A%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%94%A8%E6%B3%95%EF%BC%9A%C2%A0\">用法： </a></p>\n<p id=\"ceil%E5%87%BD%E6%95%B0%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:80px;\"><a href=\"#ceil%E5%87%BD%E6%95%B0%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6\">ceil函数用的头文件</a></p>\n<p id=\"ceil%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#ceil%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">ceil函数基本用法</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%20%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%20%EF%BC%9A\">代码实现示例 ：</a></p>\n<p id=\"%E5%AE%9E%E6%88%98%E5%AF%BC%E5%85%A5%20%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%AE%9E%E6%88%98%E5%AF%BC%E5%85%A5%20%EF%BC%9A\">实战导入 ：</a></p>\n<p id=\"%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%EF%BC%9A%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%EF%BC%9A%C2%A0\">算法分析： </a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%20%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%20%EF%BC%9A\">代码实现 ：</a></p>\n<p id=\"%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%EF%BC%9A\">输出结果：</a></p>\n<p id=\"%E5%8F%96%E6%95%B4%E6%96%B9%E5%BC%8F%E9%9B%86%E5%90%88%EF%BC%9A-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8F%96%E6%95%B4%E6%96%B9%E5%BC%8F%E9%9B%86%E5%90%88%EF%BC%9A\">取整方式集合：</a></p>\n<p id=\"%E5%B0%8F%E7%BB%93%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%B0%8F%E7%BB%93%C2%A0\">小结 </a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E5%8F%96%E6%95%B4%E6%96%B9%E5%BC%8F%C2%A0\">取整方式 </h1>\n<p><em><strong>取整方式总共可以分为4种：</strong></em></p>\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><thead><tr><th>种数</th><th>种类</th></tr></thead><tbody><tr><td>1.</td><td>向0取整(trunc函数)</td></tr><tr><td>2.</td><td>四舍五入(round函数)</td></tr><tr><td>3.</td><td>向下取整(floor函数)</td></tr><tr><td>4.</td><td>向上取整(ceil函数)</td></tr></tbody></table>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p><em><strong>本文章就按照这个顺序依次展开说明，并用例题详细分析</strong></em></p>\n<h1 id=\"First%C2%B7%E5%90%910%E5%8F%96%E6%95%B4\"><em><strong>First·向0取整</strong></em></h1>\n<h2 id=\"%E5%90%AB%E4%B9%89%EF%BC%9A\">含义：</h2>\n<blockquote>\n<p><em><strong>向零取整即直接抹掉小数点后面的数字，取整数部分，C++默认的取整方式。（参考下面输出理解）</strong></em></p>\n</blockquote>\n<h2 id=\"%E7%94%A8%E6%B3%95%EF%BC%9A\">用法：</h2>\n<p><em><strong>用法可以分为两种：</strong></em></p>\n<blockquote>\n<p><em><strong>1.将float数据类型直接转换为int类型，小数将直接采用向0取整的方式</strong></em></p>\n</blockquote>\n<h3 id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%EF%BC%9A\">代码实现示例：</h3>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n\tfloat a;\n\tint b;\n\tcin&gt;&gt;a;\n\tb=(int)a;\n\tcout&lt;&lt;\"2.5的向下取整的数为\"&lt;&lt;b;\n\treturn 0;\n}\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\67f2dd358e0445b591ade1b2e0d26e97.png\"/></p>\n<blockquote>\n<p> <em><strong>看输出结果，将2.5的小数部分0.5直接抹掉，转换为2输出，这就是C++默认的向0取整方式</strong></em></p>\n</blockquote>\n<blockquote>\n<p><em><strong>2.使用trunc函数实现向0取整</strong></em></p>\n</blockquote>\n<h3 id=\"trunc%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6%C2%A0\">trunc函数使用的头文件 </h3>\n<pre><code class=\"language-cpp\">#include&lt;cmath&gt;</code></pre>\n<h3 id=\"trunc%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">trunc函数基本用法</h3>\n<blockquote>\n<p>trunc(向0取整的数)//括号内可以添加变量进行运算</p>\n</blockquote>\n<h3 id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%20%EF%BC%9A\">代码实现示例 ：</h3>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\nusing namespace std;\nint main()\n{\n\tprintf(\"2.5的向0取整的数为%.1lf\\n\",trunc(2.5));\n\treturn 0;\n}\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\721a5027b2bb4458bf83edd8e0e84fe9.png\"/></p>\n<blockquote>\n<p><em><strong>看结果也是实现的向0取整，说明使用trunc函数也是可以实现向0取整的。</strong></em></p>\n</blockquote>\n<h1 id=\"%C2%A0Second%C2%B7%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5\"> Second·四舍五入</h1>\n<h2>含义：</h2>\n<blockquote>\n<p><em><strong>小数点后一位的数字&gt;=0.1并且&lt;=0.4的数抹掉小数所有位，小数点后一位的数字&gt;=0.5并且&lt;=0.9的数向上进一位（参考下面输出理解）</strong></em></p>\n</blockquote>\n<h2 id=\"%E7%94%A8%E6%B3%95%EF%BC%9A%C2%A0\">用法： </h2>\n<blockquote>\n<p><em><strong>使用round函数进行四舍五入运算</strong></em></p>\n</blockquote>\n<h3 id=\"round%E5%87%BD%E6%95%B0%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6\">round函数用的头文件</h3>\n<pre><code class=\"language-cpp\">#include&lt;cmath&gt;</code></pre>\n<h3 id=\"round%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">round函数基本用法</h3>\n<blockquote>\n<p><em><strong>round(需要四舍五入的数)//括号内可以添加变量进行运算 </strong></em></p>\n</blockquote>\n<h3>代码实现示例：</h3>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\nusing namespace std;\nint main()\n{\n\tprintf(\"2.444的四舍五入的数为%.1lf\\n\", round(2.444));\n\tprintf(\"2.555的四舍五入的数为%.1lf\\n\", round(2.555));\n\treturn 0;\n}\n</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\17ffcab1c1a843debe9ee80bf4ac98d3.png\"/></p>\n<blockquote>\n<p><em><strong>看输出结果看到了整数2的小数部分&lt;=4磨掉了小数所有位数；&gt;=5的向上进一位</strong></em></p>\n</blockquote>\n<h1 id=\"Third%C2%B7%E5%90%91%E4%B8%8B%E5%8F%96%E6%95%B4%C2%A0\">Third·向下取整 </h1>\n<h2>含义：</h2>\n<blockquote>\n<p><em><strong>不判断小数位，正数抹掉小数位，负数向下退一位即为向下取整（参考下面的输出理解）</strong></em></p>\n</blockquote>\n<h2>用法： </h2>\n<blockquote>\n<p><em><strong>使用floor函数进行向下取整运算</strong></em></p>\n</blockquote>\n<h3 id=\"floor%E5%87%BD%E6%95%B0%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6%C2%A0\">floor函数用的头文件 </h3>\n<pre><code class=\"language-cpp\">#include&lt;cmath&gt;</code></pre>\n<h3 id=\"floor%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">floor函数基本用法</h3>\n<blockquote>\n<p><em><strong>floor(需要向下取整的数)//括号内可以添加变量进行运算 </strong></em></p>\n</blockquote>\n<h3 id=\"%E5%86%B7%E7%9F%A5%E8%AF%86%EF%BC%9A\">冷知识：</h3>\n<blockquote>\n<p><span style=\"color:#ed7976;\"><em><strong>总是忘记向下取整函数怎么拼写怎么办呢？相信很多英语学的很好的读者们已经发现了，向下取整函数（floor）放在英语里面就是——地板、地面的意思。所以啊，向下取整函数（floor）我们通常亲切的称他为——地板取整，是不是这下就好记多啦！😁</strong></em></span></p>\n</blockquote>\n<h2 id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B%C2%A0%EF%BC%9A\">代码实现示例 ：</h2>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\nusing namespace std;\nint main()\n{\n\tprintf(\"2.9的向下取整的数为%.1lf\\n\", floor(2.9));\n\tprintf(\"-2.5的向下取整的数为%.1lf\\n\", floor(-2.5));\n\treturn 0;\n}\n</code></pre>\n<p><img alt=\"\" height=\"1080\" src=\"image\\5529e646e94848e6bb758ed9a8be3017.png\" width=\"1200\"/></p>\n<p></p>\n<blockquote>\n<p><em><strong>看输出结果，可以明显的看到向下取整的效果了 ,那么来实战试试吧！</strong></em></p>\n</blockquote>\n<h2 id=\"%E5%AE%9E%E6%88%98%E5%AF%BC%E5%85%A5%EF%BC%9A\">实战导入：</h2>\n<p>东北串王是家老店了，烧烤炒菜都很666666，尤其是夏天顾客络绎不绝，露天的位置都抢不到啊抢不到！最近店里遇到个问题：客人多，点的串也太多，服务员老是记错帐，搞得客人不开心。老板很着急，再这样下去就被传成“海捕大虾38元一只”的店啦！</p>\n<p>店里有个聪明的小伙计给出了个主意：串串子用不同的签子，一种签子一个价，最后数数总数就成啦！现在店里有三种签子：红柳签五元每串、铁签一块五每串、竹签五毛每串。你和朋友大吃大喝了一通，该结账啦！（讨价还价时老板说，多出的几毛钱可以免掉，真抠！）</p>\n<p>输入：</p>\n<blockquote>\n<p>三个整数t1，t2和t3，分别表示红柳签、铁签和竹签的数量。</p>\n</blockquote>\n<p>输出：</p>\n<blockquote>\n<p>一个整数，表示花的钱数。</p>\n</blockquote>\n<p>样例输入：</p>\n<blockquote>\n<p>10 10 11</p>\n</blockquote>\n<p>样例输出：</p>\n<blockquote>\n<p>70</p>\n</blockquote>\n<h2 id=\"%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%EF%BC%9A\">算法分析：</h2>\n<blockquote>\n<p><em><strong>多的几毛钱去掉，就是向下取整的一种方式，可以直接用向下取整实现。 </strong></em></p>\n</blockquote>\n<h2 id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%9A\">代码实现：</h2>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\nusing namespace std;\nint main()\n{\n\tint rq,rqy;//定义红签数和红签计数，整数形式\n\tfloat tq,zq,sum;//定义铁签竹签数和计数变量，浮点形式\n\tcin&gt;&gt;rq&gt;&gt;tq&gt;&gt;zq;//输入\n\trqy=rq*5;//计算红签钱数\n\tsum=tq*1.5+zq*0.5;//计算铁签竹签钱数，小数\n\tsum+=rqy;//把三个签子钱数相加求总和\n\tcout&lt;&lt;floor(sum);//题目要求免掉小数点后面的，就是向下取整\n\treturn 0;\n}\n\n</code></pre>\n<h2 id=\"%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%EF%BC%9A\">输出结果：</h2>\n<h2 id=\"%E2%80%8B%E7%BC%96%E8%BE%91Fourth%C2%B7%E5%90%91%E4%B8%8A%E5%8F%96%E6%95%B4%C2%A0\"><img alt=\"\" height=\"751\" src=\"image\\dbfc4022cedd4611b5083677ac465adc.png\" width=\"1200\"/><br/> Fourth·向上取整 </h2>\n<h2>含义：</h2>\n<blockquote>\n<p><em><strong>不判断小数位，正数向上进一位，负数向上进一位即为向上取整（参考下面的输出理解）</strong></em></p>\n</blockquote>\n<h2>用法： </h2>\n<blockquote>\n<p><em><strong>使用ceil函数进行向上取整运算</strong></em></p>\n</blockquote>\n<h3 id=\"ceil%E5%87%BD%E6%95%B0%E7%94%A8%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6\">ceil函数用的头文件</h3>\n<pre><code class=\"language-cpp\">#include&lt;cmath&gt;</code></pre>\n<h3 id=\"ceil%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">ceil函数基本用法</h3>\n<blockquote>\n<p><em><strong>ceil(需要向上取整的数)//括号内可以添加变量进行运算 </strong></em></p>\n</blockquote>\n<h2>代码实现示例 ：</h2>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\nusing namespace std;\nint main()\n{\n\tprintf(\"2.1的向上取整的数为%.1lf\\n\", ceil(2.1));\n\tprintf(\"-2.5的向上取整的数为%.1lf\\n\", ceil(-2.5));\n\treturn 0;\n}\n</code></pre>\n<p><img alt=\"\" height=\"1080\" src=\"image\\914ab688c55a4ef2827e08ab78488f1d.png\" width=\"1200\"/></p>\n<blockquote>\n<p><em><strong>看输出结果发现，他正好和向下取整反过来了，这就实现了向上取整，那就让我们实战试一下吧！ </strong></em></p>\n</blockquote>\n<h2 id=\"%E5%AE%9E%E6%88%98%E5%AF%BC%E5%85%A5%20%EF%BC%9A\">实战导入 ：</h2>\n<p>描述</p>\n<blockquote>\n<p>根据邮件的重量和用户是否选择加急计算邮费。计算规则：重量在1000克以内(包括1000克), 基本费8元。超过1000克的部分，每500克加收超重费4元，不足500克部分按500克计算；如果用户选择加急，多收5元。</p>\n</blockquote>\n<p>输入</p>\n<blockquote>\n<p>输入一行，包含整数和一个字符，以一个空格分开，分别表示重量（单位为克）和是否加急。如果字符是y，说明选择加急；如果字符是n，说明不加急。</p>\n</blockquote>\n<p>输出</p>\n<blockquote>\n<p>输出一行，包含一个整数，表示邮费。</p>\n</blockquote>\n<p>输入样例 1 </p>\n<blockquote>\n<p>800 n</p>\n</blockquote>\n<p>输出样例 1</p>\n<blockquote>\n<p>8</p>\n</blockquote>\n<h2 id=\"%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%EF%BC%9A%C2%A0\">算法分析： </h2>\n<blockquote>\n<p><em><strong>这一个代码要运用的我们刚刚学习的向上取整，仔细读题，题目要求不足500克部分按500克计算，笨办法是用if一一列出来，妙的代码直接用向上取证代替多个if，简直香香。</strong></em></p>\n</blockquote>\n<h2 id=\"%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%20%EF%BC%9A\">代码实现 ：</h2>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\nint main()\n{\n\tint a,sum;\n\tchar b;\n\tcin&gt;&gt;a&gt;&gt;b;\n\tif (a&gt;1000)\n\t{\n\t\tsum=ceil(1.0*(a-1000)/500)*4+8;//运用向上取整计算\n\t}\n\telse\n\t{\n\t\tsum=8;\n\t}\n\tif (b=='y')\n\t{\n\t\tsum+=5;\n\t}\n//另一个if可以不用判断，因为不加急等同于原来的sum\n\tcout&lt;&lt;sum;\n\treturn 0;\n}\n</code></pre>\n<h2>输出结果：</h2>\n<p><img alt=\"\" height=\"757\" src=\"image\\30d8f12d01064ab9989b0113e4591436.png\" width=\"1200\"/></p>\n<p><s>这一篇文章就要结束了，在这里，作者给大家添加了，取整方式集合，供大家做好对比 </s></p>\n<h1 id=\"%E5%8F%96%E6%95%B4%E6%96%B9%E5%BC%8F%E9%9B%86%E5%90%88%EF%BC%9A\">取整方式集合：</h1>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\nusing namespace std;\nint main()\n{\n\tprintf(\"2.5的向0取整的数为%.1lf\\n\", trunc(2.5));//向0取整\n\tprintf(\"2.444的四舍五入的数为%.1lf\\n\", round(2.444));//四舍五入\n\tprintf(\"2.555的四舍五入的数为%.1lf\\n\", round(2.555));\n\tprintf(\"2.9的向下取整的数为%.1lf\\n\", floor(2.9));//向下取整\n\tprintf(\"-2.5的向下取整的数为%.1lf\\n\", floor(-2.5));\n\tprintf(\"2.1的向上取整的数为%.1lf\\n\", ceil(2.1));//向上取整\n\tprintf(\"-2.5的向上取整的数为%.1lf\\n\", ceil(-2.5));\n\treturn 0;\n}\n</code></pre>\n<p><img alt=\"\" height=\"1080\" src=\"image\\7ff4b6a380064f78ae9aac483652b7e0.png\" width=\"1200\"/></p>\n<h1 id=\"%E5%B0%8F%E7%BB%93%C2%A0\">小结 </h1>\n<p>这就是取整方式及实战讲解【全网最详细取整“集合”】，把知识点带入实战，如有疑问，请在评论区留言，作者看到后，会一一回复的。</p>\n</div>\n</div>"}