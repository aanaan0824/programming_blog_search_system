{"blogid": "124664934", "writerAge": "码龄132天", "writerBlogNum": "16", "writerCollect": "139", "writerComment": "11", "writerFan": "36", "writerGrade": "2级", "writerIntegral": "245", "writerName": "那些年丶我们逃过的课", "writerProfileAdress": "writer_image\\profile_124664934.jpg", "writerRankTotal": "84207", "writerRankWeekly": "373183", "writerThumb": "58", "writerVisitNum": "17479", "blog_read_count": "15156", "blog_time": "于 2022-05-09 14:06:43 发布", "blog_title": "c++超详细基础教程（快速入门）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>❤作者：那些年丶我们逃过的课</p>\n<p>❤博客主页：<a href=\"https://blog.csdn.net/james_sky_?type=blog\">那些年丶我们逃过的课的博客_CSDN博客-c++题目,c++学习记录,c++小游戏领域博主</a></p>\n<p>❤码云gitee：<a href=\"https://gitee.com/xty123456\">我的码云 - Gitee.com</a></p>\n<p>❤期待你的关注，如果觉得还可以的话，可以点赞评论支持一下，每个评论我都会回访的🎉</p>\n</blockquote>\n<h2><a id=\"_8\"></a>目录：</h2>\n<ol><li><a href=\"##1.%E6%95%99%E7%A8%8B%E7%AE%80%E4%BB%8B\">教程简介</a></li><li><a href=\"##2.c++%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3\">c++初步了解</a>\n<ol><li><a href=\"###2.1c++%E7%AE%80%E4%BB%8B\">c++简介</a></li><li><a href=\"###2.2%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F\">我的第一个程序</a></li><li><a href=\"###2.3%E6%A0%87%E5%87%86%E5%BA%93\">标准库</a></li><li><a href=\"###2.4%E7%BC%96%E8%AF%91%E5%99%A8%E5%8F%8A%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83\">编译器及编译环境</a></li><li><a href=\"###2.5%E6%B3%A8%E9%87%8A\">注释</a></li></ol> </li><li><a href=\"#3.c++%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">c++数据类型</a>\n<ol><li><a href=\"##3.1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">数据类型</a></li><li><a href=\"###3.2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F\">数据类型占用空间大小</a></li><li><a href=\"###3.3%E5%8F%98%E9%87%8F\">变量</a></li><li><a href=\"###3.4%E5%B8%B8%E9%87%8F\">常量</a></li></ol> </li><li><a href=\"##4.%E8%BF%90%E7%AE%97%E7%AC%A6\">运算符</a>\n<ol><li><a href=\"###4.1%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6\">算数运算符</a></li><li><a href=\"###4.2%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\">关系运算符</a></li><li><a href=\"###4.3%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a></li><li><a href=\"###4.4%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%E5%8F%AA%E5%81%9A%E4%BA%86%E8%A7%A3%EF%BC%89\">位运算符</a></li></ol> </li><li><a href=\"##5.%E5%A4%B4%E6%96%87%E4%BB%B6\">头文件</a></li><li><a href=\"##6.%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81\">输入输出流</a></li><li><a href=\"##7.%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5\">分支语句</a>\n<ol><li><a href=\"###7.1if-else%E8%AF%AD%E5%8F%A5\">if-else语句</a></li><li><a href=\"###7.2switch%E8%AF%AD%E5%8F%A5\">switch语句</a></li></ol> </li><li><a href=\"##8.%E5%BE%AA%E7%8E%AF\">循环</a>\n<ol><li><a href=\"###8.1for%E5%BE%AA%E7%8E%AF\">for循环</a></li><li><a href=\"###8.2while%E5%BE%AA%E7%8E%AF\">while循环</a></li><li><a href=\"###8.3do-while%E5%BE%AA%E7%8E%AF\">do-while循环</a></li><li><a href=\"###8.4%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF\">嵌套循环</a></li><li><a href=\"###8.5%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\">循环控制语句</a></li></ol> </li><li><a href=\"##9.%E6%95%B0%E7%BB%84\">数组</a></li><li><a href=\"##10.%E5%AD%97%E7%AC%A6%E4%B8%B2\">字符串</a>\n<ol><li><a href=\"###10.1cstring\">cstring</a></li><li><a href=\"###10.2string\">string</a></li></ol> </li><li><a href=\"##11.%E5%87%BD%E6%95%B0\">函数</a></li><li><a href=\"##12.%E6%80%BB%E7%BB%93\">总结</a></li></ol>\n<hr/>\n<h2><a id=\"1_51\"></a>1.教程简介</h2>\n<p>本文是 <em>那些年丶我们逃过的课</em> 根据各种教程总结的c++基础教程🎉，可以让新手小白快速入门🎊。</p>\n<p>新人博主，如文章有何问题，请大佬指出🙏</p>\n<p>总结不易，如果觉得还行的话，请不要吝惜你的点赞👍，谢谢各位大佬了🎈</p>\n<p>本教程适用人群：c++的初学者，帮助他们快速入门。</p>\n<blockquote>\n<p>本文大量参考于：<a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">C++ 教程 | 菜鸟教程 (runoob.com)</a>新手跟着这里面学习也是很方便的</p>\n</blockquote>\n<hr/>\n<h2><a id=\"2c_69\"></a>2.c++初步了解</h2>\n<h3><a id=\"21c_71\"></a>2.1c++简介</h3>\n<p>[C++](<a href=\"https://baike.baidu.com/item/C%2B%2B/99272?fr=aladdin\">C++_百度百科 (baidu.com)</a>)是一种计算机高级程序设计语言，由<a href=\"https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80/105958\">C语言</a>扩展升级而产生 ，最早于1979年由<a href=\"https://baike.baidu.com/item/%E6%9C%AC%E8%B4%BE%E5%B0%BC%C2%B7%E6%96%AF%E7%89%B9%E5%8A%B3%E6%96%AF%E7%89%B9%E5%8D%A2%E6%99%AE/10613051\">本贾尼·斯特劳斯特卢普</a>在AT&amp;T贝尔工作室研发。</p>\n<p>C++既可以进行C语言的过程化<a href=\"https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/223952\">程序设计</a>，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计。</p>\n<p>C++拥有计算机运行的实用性特征，同时还致力于提高大规模程序的编程质量与程序设计语言的问题描述能力。</p>\n<p>总的来说，c++是c语言的升级版，更加实用和简便。</p>\n<p>在众多编程语言中，c++不是最简单的，但是确实数一数二的非常实用的，里面包含的各种库提供了丰富的功能。</p>\n<h3><a id=\"22_87\"></a>2.2我的第一个程序</h3>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; \"Hello, world!\" &lt;&lt; endl;\t//程序从这里开始执行\n    return 0;\n}\n</code></pre>\n<h5><a id=\"_99\"></a>效果：</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b47644f8345a4afab7cbc5419678efc0.png\"/></p>\n<blockquote>\n<p>press any key to exit… 点击任意键退出</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d8a860c443b5460d9363e017cc7bbef7.png\"/></p>\n<blockquote>\n<ul><li>using namespace std; 使用 std 命名空间。</li><li>int main()是主函数，程序从这里开始执行。</li><li>cout &lt;&lt; “Hello World”;会在屏幕上显示消息 “Hello World”。</li><li>return 0;终止 main( )函数，并向调用进程返回值 0。</li><li>//或<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          ∗\n         \n         \n          ∗\n         \n        \n        \n         * *\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.46528em; vertical-align: 0em;\"></span><span class=\"mord\">∗</span><span class=\"mord\">∗</span></span></span></span></span>可以注释文本，详见<a href=\"##2.5%E6%B3%A8%E9%87%8A\">2.5注释</a></li></ul>\n</blockquote>\n<h3><a id=\"23_121\"></a>2.3标准库</h3>\n<p>标准的 C++ 由三个重要部分组成：</p>\n<ul><li>核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。</li><li>C++ 标准库，提供了大量的函数，用于操作文件、字符串等。</li><li>标准模板库（STL），提供了大量的方法，用于操作数据结构等。</li></ul>\n<h3><a id=\"24_131\"></a>2.4编译器及编译环境</h3>\n<p>目前主流的编译器有：**MSVC、GCC、Cygwin、MinGW、Visual Studio、Dev-c++**等等</p>\n<p>可以选择免费的编译器，也可以为了实用性，实用付费的编译器。</p>\n<p>编译环境新手不需要做过多了解。</p>\n<blockquote>\n<p>需要详细了解的可以参考：</p>\n<ol><li><a href=\"https://blog.csdn.net/Zhouzi_heng/article/details/117231696\">【c/c++】C/C++的编译器|编译环境（非常全面的比较）_StudyWinter的博客-CSDN博客_c++编译环境</a></li><li><a href=\"https://blog.csdn.net/m0_56355392/article/details/121782940\">C++编译环境_na.na的博客-CSDN博客</a></li></ol>\n</blockquote>\n<h3><a id=\"25_146\"></a>2.5注释</h3>\n<ol><li>单行注释：<strong>//+注释内容</strong></li><li>多行注释：<strong><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          ∗\n         \n        \n        \n         *\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.46528em; vertical-align: 0em;\"></span><span class=\"mord\">∗</span></span></span></span></span>+注释内容+<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          ∗\n         \n        \n        \n         *\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.46528em; vertical-align: 0em;\"></span><span class=\"mord\">∗</span></span></span></span></span></strong></li></ol>\n<p>注释内容可以被你看见但是系统不会运行注释内容</p>\n<hr/>\n<h2><a id=\"3c_155\"></a>3.c++数据类型</h2>\n<h3><a id=\"31_157\"></a>3.1数据类型</h3>\n<table><thead><tr><th>类型</th><th>关键字</th></tr></thead><tbody><tr><td>布尔型</td><td>bool</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>整型</td><td>int</td></tr><tr><td>浮点型</td><td>float</td></tr><tr><td>双浮点型</td><td>double</td></tr><tr><td>无类型</td><td>void</td></tr><tr><td>宽字符型</td><td>wchar_t</td></tr></tbody></table>\n<blockquote>\n<p>宽字符型新手不需要学习。</p>\n</blockquote>\n<blockquote>\n<p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p>\n<ul><li>signed 符号型</li><li>unsigned 无符号型</li><li>short 短型</li><li>long 长型</li></ul>\n<p>例如： long int、unsigned long int等</p>\n</blockquote>\n<h3><a id=\"32_182\"></a>3.2数据类型占用空间大小</h3>\n<table><thead><tr><th>类型</th><th>位</th><th>范围</th></tr></thead><tbody><tr><td>char</td><td>1 个字节</td><td>-128 到 127 或者 0 到 255</td></tr><tr><td>unsigned char</td><td>1 个字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 个字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>4 个字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>unsigned int</td><td>4 个字节</td><td>0 到 4294967295</td></tr><tr><td>signed int</td><td>4 个字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>short int</td><td>2 个字节</td><td>-32768 到 32767</td></tr><tr><td>unsigned short int</td><td>2 个字节</td><td>0 到 65,535</td></tr><tr><td>signed short int</td><td>2 个字节</td><td>-32768 到 32767</td></tr><tr><td>long int</td><td>8 个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td>signed long int</td><td>8 个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td>unsigned long int</td><td>8 个字节</td><td>0 到 18,446,744,073,709,551,615</td></tr><tr><td>float</td><td>4 个字节</td><td>精度型占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字)</td></tr><tr><td>double</td><td>8 个字节</td><td>双精度型占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字)</td></tr><tr><td>long double</td><td>16 个字节</td><td>长双精度型 16 个字节（128位）内存空间，可提供18-19位有效数字。</td></tr><tr><td>wchar_t</td><td>2 或 4 个字节</td><td>1 个宽字符</td></tr></tbody></table>\n<h3><a id=\"33_203\"></a>3.3变量</h3>\n<p>变量其实只不过是程序可操作的存储区的名称。C++ 中每个变量都有指定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p>\n<p>变量的名称可以由字母、数字和下划线字符组成，并且不能是关键字。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C++ 是大小写敏感的。</p>\n<blockquote>\n<p>tip：关键字：各种数据类型、函数名等等（大小写不一样就不算关键字了）</p>\n</blockquote>\n<h5><a id=\"_215\"></a>变量声明：</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5b76b20058c5439680b78d9dff563eb8.png\"/></p>\n<h3><a id=\"34_221\"></a>3.4常量</h3>\n<p>一下可进行了解，不必深究：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3993c682d2b84098b3beef16de542b3a.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c2f54b661ddb4815bfb2cb02d88aa47c.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\27e4f0c6daa844d5863954d0067e13d2.png\"/></p>\n<h5><a id=\"_236\"></a>常量声明：</h5>\n<p>在 C++ 中，有两种简单的定义常量的方式：</p>\n<ul><li>使用 <strong>#define</strong> 预处理器。</li><li>使用 <strong>const</strong> 关键字。</li></ul>\n<ol><li>#define + 常数名 + 常数</li><li>const + 数据类型 +常量名 = 常数</li></ol>\n<hr/>\n<h2><a id=\"4_250\"></a>4.运算符</h2>\n<p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C++ 内置了丰富的运算符，新手需要了解如下运算符：</p>\n<ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符（只需了解，以后要讲）</li></ul>\n<h3><a id=\"41_259\"></a>4.1算数运算符</h3>\n<table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>把两个操作数相加</td><td>A + B 将得到 30</td></tr><tr><td>-</td><td>从第一个操作数中减去第二个操作数</td><td>A - B 将得到 -10</td></tr><tr><td>*</td><td>把两个操作数相乘</td><td>A * B 将得到 200</td></tr><tr><td>/</td><td>分子除以分母</td><td>B / A 将得到 2</td></tr><tr><td>%</td><td>取模运算符，整除后的余数</td><td>B % A 将得到 0</td></tr><tr><td>++</td><td><a href=\"https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html\">自增运算符</a>，整数值增加 1</td><td>A++ 将得到 11</td></tr><tr><td>–</td><td><a href=\"https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html\">自减运算符</a>，整数值减少 1</td><td>A-- 将得到 9</td></tr></tbody></table>\n<h3><a id=\"42_273\"></a>4.2关系运算符</h3>\n<table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>检查两个操作数的值是否相等，如果相等则条件为真。</td><td>(A == B) 不为真。</td></tr><tr><td>!=</td><td>检查两个操作数的值是否相等，如果不相等则条件为真。</td><td>(A != B) 为真。</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td>(A &gt; B) 不为真。</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td>(A &lt; B) 为真。</td></tr><tr><td>&gt;=</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td>(A &gt;= B) 不为真。</td></tr><tr><td>&lt;=</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td>(A &lt;= B) 为真。</td></tr></tbody></table>\n<h3><a id=\"43_286\"></a>4.3逻辑运算符</h3>\n<table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。如果两个操作数都 true，则条件为 true。</td><td>(A &amp;&amp; B) 为 false。</td></tr><tr><td>||</td><td>称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。</td><td>(A || B) 为 true。</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态，如果条件为 true 则逻辑非运算符将使其为 false。</td><td>!(A &amp;&amp; B) 为 true。</td></tr></tbody></table>\n<h3><a id=\"44_296\"></a>4.4位运算符（只做了解）</h3>\n<table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与操作，按二进制位进行\"与\"运算。运算规则：<code>0&amp;0=0; 0&amp;1=0; 1&amp;0=0; 1&amp;1=1;</code></td><td>(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td>|</td><td>按位或运算符，按二进制位进行\"或\"运算。运算规则：`0</td><td>0=0; 0</td></tr><tr><td>^</td><td>异或运算符，按二进制位进行\"异或\"运算。运算规则：<code>0^0=0; 0^1=1; 1^0=1; 1^1=0;</code></td><td>(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td>~</td><td>取反运算符，按二进制位进行\"取反\"运算。运算规则：<code>~1=-2; ~0=-1;</code></td><td>(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td><td>A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td><td>A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table>\n<hr/>\n<h2><a id=\"5_309\"></a>5.头文件</h2>\n<h5><a id=\"_311\"></a>头文件引用方法：</h5>\n<pre><code class=\"prism language-c++\">#include&lt;头文件名&gt;\n</code></pre>\n<blockquote>\n<p>详细的头文件介绍及作用见：<a href=\"https://blog.csdn.net/qq_40635314/article/details/121742118\">C++头文件的作用以及用法_陌千浔的博客-CSDN博客_c++头文件</a></p>\n</blockquote>\n<hr/>\n<h2><a id=\"6_321\"></a>6.输入输出流</h2>\n<p>使用输入输出流（cin、cout）需要引用iostream头文件</p>\n<blockquote>\n<p>istream：常用于接收从键盘输入的数据；<br/> ostream：常用于将数据输出到屏幕上；<br/> ifstream：用于读取文件中的数据；<br/> ofstream：用于向文件中写入数据；<br/> iostream：继承自 istream 和 ostream 类，因为该类的功能兼两者于一身，既能用于输入，也能用于输出；<br/> fstream：兼 ifstream 和 ofstream 类功能于一身，既能读取文件中的数据，又能向文件中写入数据。<br/> ————————————————<br/> 原文链接：https://blog.csdn.net/ccc369639963/article/details/122905471</p>\n</blockquote>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(){\n    int a;\n    cout&lt;&lt;\"输入：\";\n    cin&gt;&gt;a;\n    cout&lt;&lt;\"输出：\";\n    cout&lt;&lt;a;\n    return 0;\n}\n</code></pre>\n<p>实现效果：</p>\n<p>定义一个整型a，键盘输入a，再在屏幕上打印出a</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\10d8e5f01a044e6b9608d873ba1ebe66.png\"/></p>\n<hr/>\n<h2><a id=\"7_359\"></a>7.分支语句</h2>\n<p>分支语句分为种：</p>\n<ol><li>if-else</li><li>switch</li></ol>\n<h3><a id=\"71ifelse_366\"></a>7.1if-else语句</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1eada2afc64147159e95da9edfd460a6.png\"/></p>\n<h4><a id=\"if1_371\"></a>if语句1：</h4>\n<pre><code class=\"prism language-c++\">if(条件1)\n{\n    执行语句1\n}\nelse\n{\n    执行语句2\n}\n</code></pre>\n<h4><a id=\"if2_384\"></a>if语句2：</h4>\n<pre><code class=\"prism language-c++\">if(条件1)\n{\n    执行语句1\n}\nelse if(条件2)\n{\n    执行语句2\n}\nelse\n{\n    执行语句3\n}\n</code></pre>\n<blockquote>\n<p>tip:else if可以无限添加，分成你想要的分支</p>\n</blockquote>\n<h3><a id=\"72switch_405\"></a>7.2switch语句</h3>\n<pre><code class=\"prism language-c++\">switch(一个变量)\n{\n    case 条件1:执行语句1;break;//加break是为了执行完这一种情况后不会再执行下面的语句\n    case 条件2:执行语句2;break;\n    case 条件3:执行语句3;break;\n    default:执行语句4;\t//如果上面条件都不满足，就执行语句4\n}\n</code></pre>\n<hr/>\n<h2><a id=\"8_419\"></a>8.循环</h2>\n<p>有的时候，可能需要多次执行同一块代码。一般情况下，语句是顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ca94458a65c845ee92b55a579bcb20c1.png\"/></p>\n<blockquote>\n<p>图片引用自：<a href=\"https://www.runoob.com/cplusplus/cpp-loops.html\">C++ 循环 | 菜鸟教程 (runoob.com)</a></p>\n</blockquote>\n<p>循环类型基本有4种：</p>\n<ol><li>for循环</li><li>while循环</li><li>do-while循环</li><li>嵌套循环</li></ol>\n<table><thead><tr><th>循环类型</th><th>描述</th></tr></thead><tbody><tr><td><a href=\"https://www.runoob.com/cplusplus/cpp-while-loop.html\">while 循环</a></td><td>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr><tr><td><a href=\"https://www.runoob.com/cplusplus/cpp-for-loop.html\">for 循环</a></td><td>多次执行一个语句序列，简化管理循环变量的代码。</td></tr><tr><td><a href=\"https://www.runoob.com/cplusplus/cpp-do-while-loop.html\">do-while 循环</a></td><td>除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr><tr><td><a href=\"https://www.runoob.com/cplusplus/cpp-nested-loops.html\">嵌套循环</a></td><td>您可以在 while、for 或 do…while 循环内使用一个或多个循环。</td></tr></tbody></table>\n<p>循环控制语句：</p>\n<table><thead><tr><th>控制语句</th><th>描述</th></tr></thead><tbody><tr><td><a href=\"https://www.runoob.com/cplusplus/cpp-break-statement.html\">break 语句</a></td><td>终止 <strong>loop</strong> 或 <strong>switch</strong> 语句，程序流将继续执行紧接着 loop 或 switch 的下一条语句。</td></tr><tr><td><a href=\"https://www.runoob.com/cplusplus/cpp-continue-statement.html\">continue 语句</a></td><td>引起循环跳过主体的剩余部分，立即重新开始测试条件。</td></tr><tr><td><a href=\"https://www.runoob.com/cplusplus/cpp-goto-statement.html\">goto 语句</a></td><td>将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr></tbody></table>\n<h3><a id=\"81for_452\"></a>8.1for循环</h3>\n<pre><code class=\"prism language-c++\">for(设置变量;循环条件;每次循环后执行语句2)\n{\n    执行语句1;\n}\n</code></pre>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(){\n    for(int i=1;i&lt;=5;i++)//i从1开始循环，每次循环后i加1，直到i大于5结束\n    {\n        cout&lt;&lt;i&lt;&lt;endl;//每次循环输出i，endl为换行\n    }\n    return 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\baefeacf7dd54ff5b63100288f2b9eea.png\"/></p>\n<blockquote>\n<p>tip:死循环:<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         f\n        \n        \n         o\n        \n        \n         r\n        \n        \n         (\n        \n        \n         ;\n        \n        \n         ;\n        \n        \n         )\n        \n       \n       \n        for(;;)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mclose\">)</span></span></span></span></span></p>\n</blockquote>\n<h3><a id=\"82while_482\"></a>8.2while循环</h3>\n<pre><code class=\"prism language-c++\">while(条件)//如果满足条件，则执行，如果不满足，则退出循环\n{\n    执行语句;\n}\n</code></pre>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(){\n    int i=1;\n    while(i&lt;=5)//如果i小于等于5，则执行，如果不满足，则退出循环\n    {\n        cout&lt;&lt;i&lt;&lt;endl;\n        i++;\n    }\n    return 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8302462e785c4b4b87f73af2df89dffd.png\"/></p>\n<blockquote>\n<p>tip:死循环：while(1)</p>\n</blockquote>\n<h3><a id=\"83dowhile_514\"></a>8.3do-while循环</h3>\n<pre><code class=\"prism language-c++\">do{//先执行语句\n    执行语句;\n}while(循环条件);//如果满足条件，继续执行\n</code></pre>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(){\n    int i=1;\n    do{\n        cout&lt;&lt;i&lt;&lt;endl;\n        i++;\n    }while(i&lt;=5);\n    return 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7eaa4af719d84bdc9c7bb1c8588d8675.png\"/></p>\n<h3><a id=\"84_540\"></a>8.4嵌套循环</h3>\n<h5><a id=\"for_542\"></a>for循环嵌套：</h5>\n<pre><code class=\"prism language-c++\">for(设置变量;循环条件;每次循环后执行语句)\n{\n    for(设置变量;循环条件;每次循环后执行语句)\n    {\n        执行语句;\n    }\n    执行语句;\n}\n</code></pre>\n<h5><a id=\"while_555\"></a>while循环嵌套：</h5>\n<pre><code class=\"prism language-c++\">while(条件)\n{\n    while(条件)\n    {\n        执行语句;\n    }\n    执行语句;\n}\n</code></pre>\n<h5><a id=\"dowhile_568\"></a>do-while循环嵌套：</h5>\n<pre><code class=\"prism language-c++\">do{\n    执行语句;\n    do\n    {\n        执行语句;\n    }while(条件);\n}while(条件);\n</code></pre>\n<h3><a id=\"85_580\"></a>8.5循环控制语句</h3>\n<table><thead><tr><th align=\"left\">控制语句</th><th align=\"left\">描述</th></tr></thead><tbody><tr><td align=\"left\"><a href=\"https://www.runoob.com/cplusplus/cpp-break-statement.html\">break 语句</a></td><td align=\"left\">终止 <strong>当层循环</strong> 或 <strong>switch</strong> 语句，程序流将继续执行紧接着 loop 或 switch 的下一条语句。</td></tr><tr><td align=\"left\"><a href=\"https://www.runoob.com/cplusplus/cpp-continue-statement.html\">continue 语句</a></td><td align=\"left\">引起循环跳过主体的剩余部分，立即重新开始测试条件。</td></tr><tr><td align=\"left\"><a href=\"https://www.runoob.com/cplusplus/cpp-goto-statement.html\">goto 语句</a></td><td align=\"left\">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr></tbody></table>\n<blockquote>\n<p>tip:break只能结束当层循环，也就是只能结束掉一个for或一个while(do-while)，嵌套循环需要break多次，每次一层</p>\n</blockquote>\n<hr/>\n<h2><a id=\"9_592\"></a>9.数组</h2>\n<h5><a id=\"_594\"></a>数组定义：</h5>\n<pre><code class=\"prism language-c++\">变量类型 数组名称[数组大小]\n</code></pre>\n<p><mark>注意：定义数组要多定义一些，比如int a[5]，你不能操作a[5]，因为这样定义只定义了a[0]到a[4]共5个</mark></p>\n<h5><a id=\"_602\"></a>初始化数组：</h5>\n<pre><code class=\"prism language-c++\">int a[5]={1,2,3,4,5}\n</code></pre>\n<blockquote>\n<p>如果[ ]内不填数字，则后面{ }初始化中有多n个就会默认定义a[n+1]</p>\n</blockquote>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n \nint main ()\n{\n   int n[10];\n    // 初始化数组元素       \n   for (int i=0;i&lt;10;i++)\n   {\n      n[i]=i+100; // 设置i为i+100\n   }\n   // 输出数组中每个元素的值                     \n   for (int j=0;j&lt;10;j++)\n   {\n      cout&lt;&lt;j&lt;&lt;\" \"&lt;&lt;n[j]&lt;&lt;endl;\n   }\n   return 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\57f007d622dc4e38bfb3db4449e3f823.png\"/></p>\n<hr/>\n<h2><a id=\"10_637\"></a>10.字符串</h2>\n<p>字符串有两种定义方式：</p>\n<ol><li>数组定义cstring</li><li>c++标准库中的string</li></ol>\n<blockquote>\n<p>详解见：<a href=\"https://www.runoob.com/cplusplus/cpp-strings.html\">C++ 字符串 | 菜鸟教程 (runoob.com)</a></p>\n</blockquote>\n<h3><a id=\"101cstring_646\"></a>10.1cstring</h3>\n<p>定义：</p>\n<pre><code>char a[6] = {'h', 'e', 'l', 'l', 'O','\\0'};\n</code></pre>\n<blockquote>\n<p>\\0为字符串结尾，系统检测到后会认为字符串到此结束</p>\n</blockquote>\n<p>也可以这么写：</p>\n<pre><code>char b[] = \"hello\";\n</code></pre>\n<pre><code class=\"prism language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(){\n    char a[6] = {'h', 'e', 'l', 'l', 'O','\\0'};\n    char b[] = \"hello\";\n    cout&lt;&lt;a&lt;&lt;endl&lt;&lt;b;\n    return 0;\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b97cfdf347fd411b844403a010fb3285.png\"/></p>\n<p>在引用cstring头文件来操作数组：</p>\n<pre><code class=\"prism language-c++\">#include&lt;cstring&gt;\n</code></pre>\n<table><thead><tr><th align=\"left\">序号</th><th align=\"left\">函数 &amp; 目的</th></tr></thead><tbody><tr><td align=\"left\">1</td><td align=\"left\"><strong>strcpy(s1, s2);</strong> 复制字符串 s2 到字符串 s1。</td></tr><tr><td align=\"left\">2</td><td align=\"left\"><strong>strcat(s1, s2);</strong> 连接字符串 s2 到字符串 s1 的末尾。连接字符串也可以用 <strong>+</strong> 号，例如: <code>string str1 = \"runoob\"; string str2 = \"google\"; string str = str1 + str2;</code></td></tr><tr><td align=\"left\">3</td><td align=\"left\"><strong>strlen(s1);</strong> 返回字符串 s1 的长度。</td></tr><tr><td align=\"left\">4</td><td align=\"left\"><strong>strcmp(s1, s2);</strong> 如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回值小于 0；如果 s1&gt;s2 则返回值大于 0。</td></tr><tr><td align=\"left\">5</td><td align=\"left\"><strong>strchr(s1, ch);</strong> 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td align=\"left\">6</td><td align=\"left\"><strong>strstr(s1, s2);</strong> 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table>\n<h3><a id=\"102string_695\"></a>10.2string</h3>\n<p>使用string要先引用string头文件</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n \nusing namespace std;\n \nint main ()\n{\n   string str1 = \"runoob\";\n   string str2 = \"google\";\n   string str3;\n   int  len ;\n \n   // 复制 str1 到 str3\n   str3 = str1;\n   cout &lt;&lt; \"str3 : \" &lt;&lt; str3 &lt;&lt; endl;\n \n   // 连接 str1 和 str2\n   str3 = str1 + str2;\n   cout &lt;&lt; \"str1 + str2 : \" &lt;&lt; str3 &lt;&lt; endl;\n \n   // 连接后，str3 的总长度\n   len = str3.size();\n   cout &lt;&lt; \"str3.size() :  \" &lt;&lt; len &lt;&lt; endl;\n \n   return 0;\n}\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<pre><code>str3 : runoob\nstr1 + str2 : runoobgoogle\nstr3.size() :  12\n</code></pre>\n<hr/>\n<h2><a id=\"11_738\"></a>11.函数</h2>\n<p>函数是一组一起执行一个任务的语句。每个 C++ 程序都至少有一个函数，即主函数 <strong>main()</strong> ，所有简单的程序都可以定义其他额外的函数。</p>\n<blockquote>\n<p>内容较丰富，详解可见：<a href=\"https://blog.csdn.net/qq_48201696/article/details/116772621?ops_request_misc=%7B%22request%5Fid%22%3A%22165207578216780357287985%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=165207578216780357287985&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116772621-null-null.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&amp;utm_term=c%2B%2B%E5%87%BD%E6%95%B0&amp;spm=1018.2226.3001.4187\">C++函数详解_问号小朋友的博客-CSDN博客_c++函数</a>，这篇博客总结得比较好，建议看看</p>\n</blockquote>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n \n// 函数声明\nint max(int num1, int num2);\n \nint main ()\n{\n   // 局部变量声明\n   int a = 100;\n   int b = 200;\n   int ret;\n \n   // 调用函数来获取最大值\n   ret = max(a, b);\n \n   cout &lt;&lt; \"Max value is : \" &lt;&lt; ret &lt;&lt; endl;\n \n   return 0;\n}\n \n// 函数返回两个数中较大的那个数\nint max(int num1, int num2) \n{\n   // 局部变量声明\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0ff1966736d84d159d4658bd10e44628.png\"/></p>\n<hr/>\n<h2><a id=\"12_788\"></a>12.总结</h2>\n<p>本教程到此结束了，如果觉得还行的，请留下你的三连😁，谢谢支持！</p>\n<p><mark>本文大量参考于：<a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">C++ 教程 | 菜鸟教程 (runoob.com)</a></mark></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}