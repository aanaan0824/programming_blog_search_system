{"blogid": "124588910", "writerAge": "码龄1年", "writerBlogNum": "76", "writerCollect": "3049", "writerComment": "1576", "writerFan": "9056", "writerGrade": "6级", "writerIntegral": "5760", "writerName": "罅隙`", "writerProfileAdress": "writer_image\\profile_124588910.jpg", "writerRankTotal": "2515", "writerRankWeekly": "5732", "writerThumb": "2427", "writerVisitNum": "118328", "blog_read_count": "9325", "blog_time": "已于 2022-06-29 14:17:54 修改", "blog_title": "【命名空间】using namespace std是什么意思？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><ul><li><a href=\"#__2\">一、 前言</a></li><li><a href=\"#_11\">二、作用域分解运算符</a></li><li><a href=\"#_24\">三、命名空间使用介绍</a></li><li><a href=\"#using_namespace_std_109\">四、using namespace std</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h4><a id=\"__2\"></a>一、 前言</h4>\n<p> C++中的<code>using namespace std</code>是什么意思呢？为了理解其中的含义，我们首先需要学习一个概念叫做<font color=\"82c91e\"><strong>命名空间</strong></font>。<br/>  我们都知道，C语言规定变量名不能与关键字冲突，但是并没有规定<strong>变量名</strong>不能与<strong>库中的变量名</strong>冲突，但这在实际的操作的过程中就会产生意想不到的错误：<br/>  例如，将一个time变量放在main函数中，根据<strong>局部优先</strong>的原则，time变量就会被理解为一个局部变量。但当time作为一个全局变量出现的时候，由于time库中也含有一个名叫time的函数名，头文件被展开后，此time被理解为变量名还是函数名就会产生歧义。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\65283d1c3eb94cb69bcd8f15e2aab53a.png\"/><br/>  而C++中出现的命名空间概念就是为了填C语言中的这个坑。</p>\n<blockquote>\n<p><strong>✪总结：同一个域中不能出现两个重名的变量名/函数名，而命名空间的提出就是为了对标识符的名称进行本地化，以此解决命名污染的问题，其作用就是定义一个新的作用域</strong></p>\n</blockquote>\n<hr/>\n<h4><a id=\"_11\"></a>二、作用域分解运算符</h4>\n<p> 在讲命名空间的时候首先给大家介绍一个作用域分解运算符<font color=\"82c91e\"> <strong>\" :: \"</strong> </font>。</p>\n<blockquote>\n<p><strong>✪使用说明</strong><br/>   A，B表示两个类，而在A,B中都有成员member</p>\n<ul><li>A :: member表示类A成员中的member</li><li>B :: member表示类B成员中的member</li></ul>\n<p>当前面的类不指定的时候，默认为全局</p>\n</blockquote>\n<p> 前面说到变量名冲突的时候遵循局部优先原则，那么我们能不能就想访问到全局变量呢？我们就可以通过作用域分解运算符实现:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\75a661d95db44d8bbbcd87dd0cc5365b.png\"/></p>\n<hr/>\n<h4><a id=\"_24\"></a>三、命名空间使用介绍</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> my_variant\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> time <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> my_variant<span class=\"token double-colon punctuation\">::</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>✪基本介绍①</strong></p>\n<ul><li>namespace是一个C++中的一个关键字</li><li>我们将变量定义在自己创建的my_variant命名空间，以避免被污染</li><li>访问命名空间中的变量，需要使用作用域分解运算符</li><li>命名空间只能定义在全局，其中定义的变量为全局变量</li></ul>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> my_variant\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> time <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stu</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>Stu<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">namespace</span> _variant\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\t\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tmy_variant<span class=\"token double-colon punctuation\">::</span>Stu data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> my_variant<span class=\"token double-colon punctuation\">::</span>_variant<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>✪基本介绍②</strong></p>\n<ul><li>从上面我们可以看到命名空间中过的<strong>内容</strong>不只局限于<strong>变量名</strong>，也可以是<strong>函数名，类型名</strong></li><li>命名空间可以<strong>无限次嵌套</strong>命名空间，同样的使用里面的内容的时候也需要多次使用作用域分解运算符——一层一层对应的关系。使用嵌套命名空间可以解决命名空间内部的命名冲突</li><li>一个工程中<strong>同名</strong>的命名空间最终会被合并为一个命名空间</li></ul>\n</blockquote>\n<p> 当然我们可以看到，每次要使用命名空间中的变量都需要写很多额外的内容，有没有什么办法可以简化操作呢——我们想要访问命名空间中的space_b有两种方法：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> space_a\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> a2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">namespace</span> space_b\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> b1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> b2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> b3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">namespace</span> space_c\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> space_a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> space_b<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>方法①</strong>：首先将space_a中的内容<strong>全部释放</strong>出来，再释放其中的space_b的内容（注意顺序不能颠倒，否则space_b认不出来）</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> space_a<span class=\"token double-colon punctuation\">::</span> space_b<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>方法②</strong>：<strong>用什么放什么</strong>。只是将space_b中全部的内容释放出来，而不会对其他的内容产生影响。</p>\n</blockquote>\n<p>释放出来之后我们便可以愉快自由的使用了：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\da47dee5115641d288f4ade0671166c3.png\"/></p>\n<hr/>\n<h4><a id=\"using_namespace_std_109\"></a>四、using namespace std</h4>\n<p> 经过上面的学习，我们不难理解<code>using name std</code>的作用是释放std命名空间中的变量名，函数名以及类型名，其中std是C++标准库的命名空间。</p>\n<p> 我们在书写代码的时候为了方便于是将C++标准库中的命名空间完全展开了，但是最好的做法我想还是用什么放什么。<br/>  另外，标准C++库中提供两种头文件，前面以C开头的头文件是支持命名空间的，而后者是不支持的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\82c2a55c75134ae6aa46241ca9633446.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}