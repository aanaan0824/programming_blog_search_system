{"blogid": "124825897", "writerAge": "码龄5年", "writerBlogNum": "122", "writerCollect": "342", "writerComment": "36", "writerFan": "46", "writerGrade": "4级", "writerIntegral": "1550", "writerName": "mildness丶", "writerProfileAdress": "writer_image\\profile_124825897.jpg", "writerRankTotal": "32047", "writerRankWeekly": "59669", "writerThumb": "70", "writerVisitNum": "149284", "blog_read_count": "1775", "blog_time": "已于 2022-05-25 16:13:06 修改", "blog_title": "阿里巴巴Java开发手册中的DO、DTO、BO、AO、VO、POJO定义", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>常用文件夹分层：</h2>\n<ul><li>pojo \n  <ul><li>vo （与前端交互的所有对象，包括接参和返回）</li><li>query （查询的筛选条件，前端传参和后端内部传参通用）</li><li>entity （数据库表基础对象）</li><li>dto（后端内部传输用，例如多张表字段合并到一个对象）</li></ul> </li></ul>\n<h2><a id=\"_7\"></a>下面都是解释为什么这么做，不爱看可以跳过</h2>\n<p>分层领域模型规约：</p>\n<ul><li>DO（Data Object）：此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li><li>DTO（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。</li><li>BO（Business Object）：业务对象，可以由 Service 层输出的封装业务逻辑的对象。</li><li>Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li><li>VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li></ul>\n<p>原文：https://zhuanlan.zhihu.com/p/102389552<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5fe9f66c7914423ca07602348ea1d686.png\"/><br/> 面对这个图，让我们先从承上启下的DTO开始入手</p>\n<p>DTO（Data Transfer Object）数据传输对象</p>\n<p>这个传输通常指的前后端之间的传输</p>\n<p>DTO是一个比较特殊的对象，他有两种存在形式：</p>\n<p>在后端，他的存在形式是java对象，也就是在controller里面定义的那个东东，通常在后端不需要关心怎么从json转成java对象的，这个都是由一些成熟的框架帮你完成啦，比如spring框架</p>\n<p>在前端，他的存在形式通常是js里面的对象（也可以简单理解成json），也就是通过ajax请求的那个数据体</p>\n<p>这也是为什么把他画成横跨两层的原因</p>\n<p>这里可能会遇到个问题，现在微服务盛行，服务和服务之间调用的传输对象能叫DTO吗？<br/> 我的理解是看情况<br/> DTO本身的一个隐含的意义是要能够完整的表达一个业务模块的输出<br/> 如果服务和服务之间相对独立，那就可以叫DTO<br/> 如果服务和服务之间不独立，每个都不是一个完整的业务模块，拆开可能仅仅是因为计算复杂度或者性能的问题，那这就不能够叫做DTO，只能是BO</p>\n<p>VO（Value Object）值对象<br/> VO就是展示用的数据，不管展示方式是网页，还是客户端，还是APP，只要是这个东西是让人看到的，这就叫VO<br/> VO主要的存在形式就是js里面的对象（也可以简单理解成json）</p>\n<p>VO和DTO的区别<br/> 主要有两个区别<br/> 一个是字段不一样，VO根据需要会删减一些字段<br/> 另一个是值不一样，VO会根据需要对DTO中的值进行展示业务的解释<br/> 举个简单的例子<br/> DTO可能是这样的</p>\n<p>{<!-- --><br/> “gender”:“男”,<br/> “age”:35<br/> }<br/> 对于业务一来说只需要性别，而且因为是一个古风聊天室，也不能直接展示男，因此经过业务解释业务一的VO是</p>\n<p>{<!-- --><br/> “gender”:“公子”<br/> }<br/> 对于业务二来说只需要年龄，而且不需要精确的年龄，因此经过业务解释业务二的VO是</p>\n<p>{<!-- --><br/> “age”:“30~39”<br/> }</p>\n<p>PO（Persistant Object）持久对象<br/> PO比较好理解<br/> 简单说PO就是数据库中的记录，一个PO的数据结构对应着库中表的结构，表中的一条记录就是一个PO对象<br/> 通常PO里面除了get，set之外没有别的方法<br/> 对于PO来说，数量是相对固定的，一定不会超过数据库表的数量<br/> 等同于Entity，这俩概念是一致的</p>\n<p>BO（Business Object）业务对象<br/> BO就是PO的组合<br/> 简单的例子比如说PO是一条交易记录，BO是一个人全部的交易记录集合对象<br/> 复杂点儿的例子PO1是交易记录，PO2是登录记录，PO3是商品浏览记录，PO4是添加购物车记录，PO5是搜索记录，BO是个人网站行为对象<br/> BO是一个业务对象，一类业务就会对应一个BO，数量上没有限制，而且BO会有很多业务操作，也就是说除了get，set方法以外，BO会有很多针对自身数据进行计算的方法<br/> 为什么BO也画成横跨两层呢？原因是现在很多持久层框架自身就提供了数据组合的功能，因此BO有可能是在业务层由业务来拼装PO而成，也有可能是在数据库访问层由框架直接生成<br/> 很多情况下为了追求查询的效率，框架跳过PO直接生成BO的情况非常普遍，PO只是用来增删改使用</p>\n<p>BO和DTO的区别<br/> 这两个的区别主要是就是字段的删减<br/> BO对内，为了进行业务计算需要辅助数据，或者是一个业务有多个对外的接口，BO可能会含有很多接口对外所不需要的数据，因此DTO需要在BO的基础上，只要自己需要的数据，然后对外提供<br/> 在这个关系上，通常不会有数据内容的变化，内容变化要么在BO内部业务计算的时候完成，要么在解释VO的时候完成</p>\n<p>OK，到这里这些关系基本就理清楚了</p>\n<p>等等，DO是什么<br/> DO呢，标题不是还有个DO么？<br/> 上面这些概念基本上已经涵盖了全部的流程，DO只是跟其中一个概念相同<br/> 但是跟哪个概念相同呢？<br/> 现在主要有两个版本<br/> 一个是阿里巴巴的开发手册中的定义<br/> DO（ Data Object）这个等同于上面的PO<br/> 另一个是在DDD（Domain-Driven Design）领域驱动设计中<br/> DO（Domain Object）这个等同于上面的BO</p>\n<p>最后，让我们再说说实际应用<br/> 这几个概念很完整，我们在用的时候是必须按这个来做吗？<br/> 当然不是的，系统和系统的复杂度不同，协作水平不同，完全没有必要教条主义，这些概念全上<br/> 上哪些概念，省哪些，我给一些实际建议<br/> 1，PO这个没法省，不管叫PO还是Entity，怎么着都得有<br/> 2，一些工具类的系统和一些业务不是很复杂的系统DTO是可以和BO合并成一个，当业务扩展的时候注意拆分就行<br/> 3，VO是可以第一个优化掉的，展示业务不复杂的可以压根儿不要，直接用DTO</p>\n<p>原文：https://blog.csdn.net/MacWx/article/details/122618986</p>\n<p>1、什么是DTO、VO、BO、PO、DO、POJO<br/> POJO的定义是无规则简单的对象，在日常的代码分层中pojo会被分为VO、BO、 PO、 DTO。通过各层POJO的使用，有助于提高代码的可读性和可维护性。</p>\n<p>概念看似简单，但是想区分好或者理解好也不容易，本文简单梳理一下。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1551960506964e508cec647f60ecbc53.png\"/><br/> DTO（Data Transfer Object）数据传输对象</p>\n<p>在服务间的调用中，传输的数据对象</p>\n<p>个人理解，DTO是可以存在于各层服务中（接口、服务、数据库等等）服务间的交互使用DTO来解耦</p>\n<p>VO （view object/value object）表示层对象</p>\n<p>前端展示的数据，在接口数据返回给前端的时候需要转成VO<br/> 使用场景，在接口层服务中，将DTO转成VO,返回给前台<br/> B0（bussines object）业务层对象</p>\n<p>主要在服务内部使用的业务对象<br/> 主要在服务内部使用的业务对象<br/> 使用场景，在服务层服务中，由DTO转成BO然后进行业务处理后，转成DTO返回到接口层<br/> PO（persistent object）持久对象</p>\n<p>出现位置为数据库数据，用来存储数据库提取的数据</p>\n<p>只存储数据，不包含数据操作</p>\n<p>使用场景，在数据库层中，获取的数据库数据存储到PO中，然后转为DTO返回到服务层中</p>\n<p>DO（domain object）领域实体对象</p>\n<p>DO 现在主要有两个版本：</p>\n<p>①阿里巴巴的开发手册中的定义，DO（ Data Object）这个等同于上面的PO</p>\n<p>②DDD（Domain-Driven Design）领域驱动设计中，DO（Domain Object）这个等同于上面的BO</p>\n<p>2、区别<br/> 《阿里巴巴Java开发规范》关于领域模型的部分介绍如下：<br/> 分层领域模型规约:</p>\n<p>DO(Data Object):此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。<br/> DTO(Data Transfer Object):数据传输对象，Service 或 Manager 向外传输的对象。<br/> BO(Business Object):业务对象，由 Service 层输出的封装业务逻辑的对象。<br/> AO(ApplicationObject):应用对象，在Web层与Service层之间抽象的复用对象模型， 极为贴近展示层，复用度不高。<br/> VO(View Object):显示层对象，通常是 Web 向模板渲染引擎层传输的对象。<br/> Query:数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</p>\n<p>最难理解的是BO，大致这么理解：</p>\n<p>BO这个对象可以包括一个或多个其它的对象。</p>\n<p>比如一个简历，有教育经历、工作经历、社会关系等等。</p>\n<p>我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。</p>\n<p>建立一个对应简历的BO对象处理简历，每个BO包含这些PO。这样处理业务逻辑时，我们就可以针对BO去处理。</p>\n<p>3、示例代码<br/> Controller层<br/> 此层常见的转换为：DTO转VO，将Services层传过来的DTO转换成VO表示数据返回给前端</p>\n<pre><code class=\"prism language-powershell\">public List&lt;UserVO&gt; getUsers<span class=\"token punctuation\">(</span>UserQuery userQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Service层、Manager层</p>\n<p>此层常见的转换为：DO转BO、BO转DTO</p>\n<pre><code class=\"prism language-powershell\"><span class=\"token operator\">/</span><span class=\"token operator\">/</span> 普通的service层接口，对数据处理，返回DTO对象\n\n List&lt;UserDTO&gt; getUsers<span class=\"token punctuation\">(</span>UserQuery userQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n 然后在Service内部使用UserBO封装中间所需的逻辑对象\n\n</code></pre>\n<p>DAO层<br/> 此层常见的转换为：DTO转换为DO，与数据库进行交互</p>\n<pre><code class=\"prism language-powershell\">List&lt;UserDO&gt; getUsers<span class=\"token punctuation\">(</span>UserQuery userQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>领域模型定义<br/> Entity表结构实体，对应DO<br/> BO业务实体<br/> VO视图实体,DTO可共用<br/> 入参封装<br/> ○ xxxParam<br/> ○ Query xxx Param<br/> ○ Save xxx Param<br/> ○ Edit xxx Param<br/> ○ Remove xxx Param</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}