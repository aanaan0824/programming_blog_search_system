{"blogid": "126574418", "writerAge": "码龄1年", "writerBlogNum": "14", "writerCollect": "346", "writerComment": "594", "writerFan": "748", "writerGrade": "4级", "writerIntegral": "1281", "writerName": "几分醉意.", "writerProfileAdress": "writer_image\\profile_126574418.jpg", "writerRankTotal": "14744", "writerRankWeekly": "125", "writerThumb": "414", "writerVisitNum": "7274", "blog_read_count": "1065", "blog_time": "已于 2022-09-01 20:57:52 修改", "blog_title": "【JAVA进阶篇】时间与日期相关类", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Java学习</h3>\n<ul><li><a href=\"#Date_1\">Date类</a></li><li><ul><li><a href=\"#_5\">毫秒值的概念与作用</a></li><li><a href=\"#_29\">构造方法</a></li><li><ul><li><a href=\"#_33\">无参构造</a></li><li><a href=\"#_44\">有参构造</a></li></ul>\n</li><li><a href=\"#getTime_58\">成员方法getTime()</a></li><li><a href=\"#currentTimeMillis_69\">currentTimeMillis方法</a></li></ul>\n</li><li><a href=\"#DateFormatSimpleDateFormat_105\">DateFormat和SimpleDateFormat类</a></li><li><ul><li><a href=\"#_114\">构造方法</a></li><li><a href=\"#_135\">成员方法</a></li><li><a href=\"#_139\">使用这两个成员方法及其细节</a></li><li><a href=\"#_192\">练习</a></li></ul>\n</li><li><a href=\"#Calendar_218\">Calendar日历类</a></li><li><ul><li><a href=\"#_221\">常用成员方法</a></li><li><ul><li><a href=\"#get_223\">get</a></li><li><a href=\"#set_225\">set</a></li><li><a href=\"#add_227\">add</a></li><li><a href=\"#geiTime_229\">geiTime</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"Date_1\"></a>Date类</h1>\n<blockquote>\n<p><strong>java.util.Date:表示日期和时间的类，Date 表示特定的瞬间，精确到毫秒。</strong></p>\n</blockquote>\n<h2><a id=\"_5\"></a>毫秒值的概念与作用</h2>\n<blockquote>\n<p><strong>毫秒:千分之一秒，1000毫秒=1。<br/> 秒特定的瞬间:一个时间点，一刹那时间<br/> 例如：<br/> 2088-08-08 09:55:33:333瞬间<br/> 2088-08-0809:55:33:334瞬间<br/> 2088-08-08 09:55:33:335瞬间<br/> …</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>毫秒值的作用:可以对时间和日期进行计算。<br/> 2022-01-01到2088-01-01中间一共有多少天？<br/> 可以日期转换为毫秒进行计算，计算完毕，在把毫秒转换为日期。</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>把日期转换为毫秒:<br/> 当前的日期:2022-08-28<br/> 时间原点(0毫秒):1970年1月1日00:00:00(英国格林威治)<br/> 就是计算当前日期到时间原点之间一共经历了多少毫秒(374267540068L)<br/> 注意:<br/> 中国属于东八区，会把时间增加8个小时1970年1月1日08:00:00</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>把毫秒转换为日期:<br/> 1天=24x60x60=86400秒=86400x1000=86400000毫秒</strong></p>\n</blockquote>\n<h2><a id=\"_29\"></a>构造方法</h2>\n<blockquote>\n<p><strong>学习类都是一个过程，先学习这个类的构造方法；有了构造方法后，就可以创建对象，然后通过对象调用它里面的成员方法。</strong></p>\n</blockquote>\n<h3><a id=\"_33\"></a>无参构造</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//Data的空参数构造方法-Data()获取当前系统的时间（精确到毫秒的系统当前时间）</span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//java.util.Date类的toString()方法已经被重写了</span>\n        <span class=\"token comment\">//所以直接输出对象，不是这个对象的内存地址，而是一个日期字符串</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：Sun Aug 28 21:18:47 CST 2022</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_44\"></a>有参构造</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// Date类的带参数构造方法</span>\n        <span class=\"token comment\">//Date(long date) :传递毫秒值转换为Date日期</span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把参数里面的毫秒转成对应的日期</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：Thu Jan 01 08:00:00 CST 1970</span>\n\n        <span class=\"token class-name\">Date</span> date1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1620543792746L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把参数里面的毫秒转成对应的日期</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：Sun May 09 15:03:12 CST 2021</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"getTime_58\"></a>成员方法getTime()</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// Long getTime（）把日期转换为毫秒值（相当于System.currentTimeMillis()方法）</span>\n        <span class=\"token comment\">// 返回自1970年 1月一日 00：00：00 到当前系统时间一共经历了多少毫秒</span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1661693372684</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"currentTimeMillis_69\"></a>currentTimeMillis方法</h2>\n<blockquote>\n<p><strong>此方法是System类的一个方法，作用和getTime()一样，返回自1970年 1月一日 00：00：00<br/> 到当前系统时间一共经历了多少毫秒。</strong></p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Long</span> <span class=\"token class-name\">TimeMillis</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeMillis</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：1661693849165</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>那么这个方法可以用来干什么呢？</strong><br/> <strong>看的出来，经过测试，下列代码空循环一亿次，用了3毫秒</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//统计一个方法的耗时</span>\n        <span class=\"token comment\">//在调用目标方法之前记录一个毫秒数</span>\n        <span class=\"token class-name\">Long</span> <span class=\"token class-name\">TimeMillis</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这里调用方法</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//在执行完目标方法之后记录一个毫秒数</span>\n        <span class=\"token class-name\">Long</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"耗费时长：\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span><span class=\"token class-name\">TimeMillis</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出：耗费时长：3毫秒</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"DateFormatSimpleDateFormat_105\"></a>DateFormat和SimpleDateFormat类</h1>\n<blockquote>\n<p><strong>DateFormat类和它的子类SimpleDateFormat，后者是前者的子类，所以它有父类的format和parse方法。</strong></p>\n</blockquote>\n<blockquote>\n<p>java.text.DateFormat:是日期/时间格式化子类的抽象类。<br/> 作用: 格式化(也就是日期-&gt;文本) 、解析(文本-&gt;日期)</p>\n</blockquote>\n<h2><a id=\"_114\"></a>构造方法</h2>\n<blockquote>\n<p>D<strong>ateFormat类是一个抽象类，无法直接创建对象使用，可以使用DateFormat类的子类<br/> java.text.SimpleDateformat extends DateFormat<br/> 构造方法:<br/> SimpleDateFormat(String pattern)：用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。<br/> 参数: String pattern:传递指定的模式</strong></p>\n</blockquote>\n<p><strong>模式:区分大小写</strong></p>\n<table><thead><tr><th>y</th><th>年</th></tr></thead><tbody><tr><td>M</td><td>月</td></tr><tr><td>d</td><td>日</td></tr><tr><td>H</td><td>时</td></tr><tr><td>m</td><td>分</td></tr><tr><td>s</td><td>秒</td></tr></tbody></table>\n<blockquote>\n<p><strong>写对应的模式，会把模式替换为对应的日期和时间 “yyyy-MM-dd HH:mm:ss”<br/> 注意:<br/> 模式中的字母不能更改，连接模式的符号可以改变\"yyyy年MM月dd日 HH时mm分ss秒\"</strong></p>\n</blockquote>\n<h2><a id=\"_135\"></a>成员方法</h2>\n<blockquote>\n<p>String format(Date date)按照指定的模式，把Date日期，格式化为符合模式的字符串<br/> Date parse(String source)把符合模式的字符串，解析为Date日期</p>\n</blockquote>\n<h2><a id=\"_139\"></a>使用这两个成员方法及其细节</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">demo01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">demo02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用的方法也会出红线，也要光标放红线上alt+回车选择第一个</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">demo01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//使用DateFormat类中的format方法，把日期格式转化为文本</span>\n        <span class=\"token comment\">//1.创建SimpleDateFormat对象，构造方法中传递指定的模式</span>\n        <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年mm月dd日 HH时mm分ss秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传入指定的模式</span>\n        <span class=\"token comment\">//2.调用SimpleDateFormat对象中的方法format，按照构造方法中指定的模式，把Date日期格式转换为符合模式的字符串（文本）</span>\n        <span class=\"token comment\">//String format（Date date） 按照指定模式，把Date日期，格式化为符合模式的字符串</span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取当前系统时间</span>\n        <span class=\"token class-name\">String</span> format <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Sun May 09 16:09:50 CST 2021</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2021年09月09日 16时09分50秒</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/*\n        使用DateFormat类中的parse方法，把文本解析成为Date日期\n        1.创建SimpleDateFormat对象，构造方法中传递指定的模式\n        2.调用SimpleDateFormat对象中的方法parse，把符合构造方法中模式的字符串，解析为Date日期\n        注意：\n            public Date parse(String source)throws ParsejException\n            parse方法声明一个异常叫ParseException\n            如果字符串和构造方法的模式不一样，那么程序就会抛出异常\n            调用一个抛出异常的方法，就必须的处理这个异常\n            要么throws继续抛出这个异常，要么try catch自己处理\n            出现红色的线，有异常，光标放红线上alt+回车选择第一个；调用的方法也会出红线，也要光标放红线上alt+回车选择第一个\n            这就是在我的方法声明这个异常，我不处理，我声明一下\n            程序没有问题，正常执行\n            出现问题，打印异常，并终止程序\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">demo02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">//使用DateFormat类中的parse方法，把文本解析成为Date日期</span>\n        <span class=\"token comment\">//1.创建SimpleDateFormat对象，构造方法中传递指定的模式</span>\n        <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年mm月dd日 HH时mm分ss秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传入指定的模式</span>\n\n        <span class=\"token comment\">//Date parse(String source) 把符合，模式的字符串，解析为Date日期</span>\n        <span class=\"token comment\">//2.调用SimpleDateFormat对象中的方法parse，把符合构造方法中模式的字符串，解析为Date日期</span>\n        <span class=\"token comment\">/*\n        出现红色的线，有异常，光标放红线上alt+回车选择第一个；调用的方法也会出红线，也要光标放红线上alt+回车选择第一个\n        这就是在我的方法声明这个异常，我不处理，我声明一下\n         */</span>\n<span class=\"token comment\">//        把字符串类型按照传入构造模式解析成为Date类型，传入指定模式和字符串要一样，字符串这边少个秒就报错</span>\n        <span class=\"token class-name\">Date</span> parse <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021年09月09日 16时09分50秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>parse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Sat Jan 09 16:09:50 CST 2021</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_192\"></a>练习</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f96a763a5efe4a9783817ac8b0ad8f11.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入：2001-07-02 </span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入出生日期(格式为yyyy-mm-dd)：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> next <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//拿到字符串出生日期</span>\n\n        <span class=\"token class-name\">SimpleDateFormat</span> simpleDateFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-mm-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Date</span> parse <span class=\"token operator\">=</span> simpleDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把字符串出生日期解析成为DAte格式</span>\n        <span class=\"token keyword\">long</span> ee <span class=\"token operator\">=</span> parse<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把Date格式的出生日期转换为毫秒值</span>\n\n        <span class=\"token class-name\">Date</span> aa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取当前日期毫秒值</span>\n        <span class=\"token keyword\">long</span> hh <span class=\"token operator\">=</span> aa<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把当前日期毫秒值转换成为毫秒值</span>\n<span class=\"token comment\">//        Date aa = new Date().getTime(); 一步到位 匿名</span>\n\n        <span class=\"token keyword\">long</span> dd <span class=\"token operator\">=</span> hh<span class=\"token operator\">-</span>ee<span class=\"token punctuation\">;</span> <span class=\"token comment\">//差值</span>\n        <span class=\"token keyword\">long</span> jj <span class=\"token operator\">=</span> dd<span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">/</span><span class=\"token number\">24</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把毫秒值转换成为天</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：7908。 代表着 2001-07-02 到今天已经过了7908天</span>\n<span class=\"token comment\">//        System.out.println(dd/1000/60/60/24); //一步到位</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"Calendar_218\"></a>Calendar日历类</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d28ed5c62f2b429d97a8dad8c84db59e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3e5907a2c43441de9eef995c3676fc6e.png\"/></p>\n<h2><a id=\"_221\"></a>常用成员方法</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9664b781af7d4e47b830d3fab403ea18.png\"/></p>\n<h3><a id=\"get_223\"></a>get</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6bc7dad7b9c241cd9bd5b533249fcbe6.png\"/></p>\n<h3><a id=\"set_225\"></a>set</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\441c8d7269d5429cb2cdcaeecee1ea2c.png\"/></p>\n<h3><a id=\"add_227\"></a>add</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7b558496d8cd4c57811b351626f98a70.png\"/></p>\n<h3><a id=\"geiTime_229\"></a>geiTime</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0c6e110a272441329757313f3f4656d8.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}