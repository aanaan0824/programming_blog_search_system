{"blogid": "125274698", "writerAge": "码龄2年", "writerBlogNum": "71", "writerCollect": "3346", "writerComment": "248", "writerFan": "2276", "writerGrade": "5级", "writerIntegral": "1861", "writerName": "一顿吃不饱", "writerProfileAdress": "writer_image\\profile_125274698.jpg", "writerRankTotal": "14235", "writerRankWeekly": "82995", "writerThumb": "758", "writerVisitNum": "227362", "blog_read_count": "2930", "blog_time": "于 2022-06-14 11:18:05 发布", "blog_title": "SpringBoot整合WebService（服务端+客户端）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"SpringBootWebService_4\"></a>SpringBoot整合WebService（服务端+客户端）</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#SpringBootWebService_4\">SpringBoot整合WebService（服务端+客户端）</a></li><li><ul><li><a href=\"#_6\">一、服务端</a></li><li><ul><li><a href=\"#1_10\">1.项目结构</a></li><li><a href=\"#2SpringBootMaven_14\">2.创建好SpringBoot项目后导入Maven依赖</a></li><li><a href=\"#3pojoUser_89\">3.建一个pojo包存放实体类User</a></li><li><a href=\"#4service_107\">4.建一个service包存放服务类</a></li><li><a href=\"#5dao_181\">5.建一个dao层</a></li><li><a href=\"#6resourcesmapper_204\">6.在resources目录下建立一个mapper文件夹</a></li><li><a href=\"#7_228\">7.配置数据库</a></li><li><a href=\"#8WebService_250\">8.配置并发布WebService(重中之重)</a></li><li><a href=\"#9WebService_306\">9.发布WebService服务</a></li></ul>\n</li><li><a href=\"#_320\">二、客户端</a></li><li><ul><li><a href=\"#1service_324\">1.service编程调用方式</a></li><li><ul><li><a href=\"#11_326\">1.1目录结构</a></li><li><a href=\"#12WebService_332\">1.2调用WebService</a></li></ul>\n</li><li><a href=\"#2WSDLWebService_384\">2.使用WSDL生成本地客户端代码调用WebService</a></li><li><ul><li><a href=\"#21__388\">2.1 生成本地客户端代码</a></li><li><a href=\"#22_WebService_408\">2.2 调用WebService服务</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_431\">三、问题及解决方案</a></li><li><ul><li><a href=\"#1Exception_in_thread_main_comsunxmlinternalwsfaultServerSOAPFaultException_433\">1.Exception in thread \"main\" com.sun.xml.internal.ws.fault.ServerSOAPFaultException</a></li><li><a href=\"#2A_query_was_run_and_no_Result_Maps_were_found_for_the_Mapped_Statement_447\">2.A query was run and no Result Maps were found for the Mapped Statement</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_6\"></a>一、服务端</h2>\n<p>本项目通过SpringBoot+Mybatis整合WebService，实现服务端接收客户端传入的数据并将其写入数据库等功能，</p>\n<h3><a id=\"1_10\"></a>1.项目结构</h3>\n<p><img alt=\"image-20220521162053648\" src=\"image\\ff297db2fb32015bf176c47c6405c7e2.png\"/></p>\n<h3><a id=\"2SpringBootMaven_14\"></a>2.创建好SpringBoot项目后导入Maven依赖</h3>\n<p>直接把全部换成我的</p>\n<pre><code>&lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- web启动器 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;\n                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- webService--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web-services&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n            &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt;\n            &lt;version&gt;3.2.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n            &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt;\n            &lt;version&gt;3.2.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n            &lt;artifactId&gt;cxf-core&lt;/artifactId&gt;\n            &lt;version&gt;3.3.5&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n            &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt;\n            &lt;version&gt;3.2.4&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.4&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n</code></pre>\n<h3><a id=\"3pojoUser_89\"></a>3.建一个pojo包存放实体类User</h3>\n<pre><code>import lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class User {\n\n    private Integer id;\n    private String userId;\n    private String userName;\n   \n}\n\n</code></pre>\n<h3><a id=\"4service_107\"></a>4.建一个service包存放服务类</h3>\n<p>UserService</p>\n<pre><code>package cn.edu.usts.sbmpservice.service;\n\nimport cn.edu.usts.sbmpservice.pojo.User;\n\nimport javax.jws.WebParam;\nimport javax.jws.WebService;\nimport java.text.ParseException;\n\n@WebService(name = \"UserService\", // 暴露服务名称\n        targetNamespace = \"http://service.sbmpservice.usts.edu.cn\"// 命名空间,一般是接口的包名倒序\n)\npublic interface UserService {\n\n    int addUser(User user);\n    User queryUser(Integer id);\n\n}\n\n</code></pre>\n<p>UserServiceImpl接口实现类</p>\n<pre><code>package cn.edu.usts.sbmpservice.service.impl;\n\n\nimport cn.edu.usts.sbmpservice.dao.UserDao;\nimport cn.edu.usts.sbmpservice.dao.YljgjxcDao;\nimport cn.edu.usts.sbmpservice.pojo.User;\nimport cn.edu.usts.sbmpservice.pojo.Yljgjxc;\nimport cn.edu.usts.sbmpservice.service.UserService;\nimport cn.edu.usts.sbmpservice.utils.util;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport javax.jws.WebService;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\n\n//@Component\n@WebService(serviceName = \"UserService\", // 与接口中指定的name一致\n        targetNamespace = \"http://service.sbmpservice.usts.edu.cn\", // 与接口中的命名空间一致,一般是接口的包名倒\n        endpointInterface = \"cn.edu.usts.sbmpservice.service.UserService\"// 接口地址\n)\npublic class UserServiceImpl implements UserService {\n\n        @Autowired\n        private UserDao userDao;\n\n        @Override\n        public int addUser(User user ){\n\n            System.out.println(\"addUser\");\n\n            return userDao.addUser(user);\n        }\n        @Override\n        public User queryUser(Integer id){\n            System.out.println(\"queryUser\"+\" \"+id);\n            User user = userDao.queryUser(id);\n            System.out.println(user);\n            return userDao.queryUser(id);\n        }\n\n}\n\n</code></pre>\n<h3><a id=\"5dao_181\"></a>5.建一个dao层</h3>\n<p>UserDao 处理数据</p>\n<pre><code>package cn.edu.usts.sbmpservice.dao;\n\nimport cn.edu.usts.sbmpservice.pojo.User;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\n@Mapper\n@Repository\npublic interface UserDao {\n    int addUser(User user);\n    User queryUser(Integer id);\n\n}\n\n</code></pre>\n<h3><a id=\"6resourcesmapper_204\"></a>6.在resources目录下建立一个mapper文件夹</h3>\n<p>UserDao.xml</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"cn.edu.usts.sbmpservice.dao.UserDao\"&gt;\n    &lt;insert id=\"addUser\" parameterType=\"User\"&gt;\n        insert into user.user(userId,userName) values (#{userId},#{userName})\n    &lt;/insert&gt;\n\n    &lt;select id=\"queryUser\" resultType=\"User\"&gt;\n        select * from user.user where userId = #{userId}\n    &lt;/select&gt;\n\n&lt;/mapper&gt;\n\n</code></pre>\n<h3><a id=\"7_228\"></a>7.配置数据库</h3>\n<p>将application文件后缀改成yml格式，然后根据自己的情况配置数据库和端口号</p>\n<pre><code>mybatis:\n  type-aliases-package: cn.edu.usts.sbmpservice.pojo\n  mapper-locations: classpath:mapper/*.xml\nspring:\n  datasource:\n    username: root\n    password: root\n    url: jdbc:mysql://localhost:3306?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8\n\n\nserver:\n  port: 8081\n\n</code></pre>\n<h3><a id=\"8WebService_250\"></a>8.配置并发布WebService(重中之重)</h3>\n<p>新建一个config目录，存放配置文件</p>\n<p>startclass.java</p>\n<pre><code>package cn.edu.usts.sbmpservice.config;\n\nimport cn.edu.usts.sbmpservice.service.UserService;\nimport cn.edu.usts.sbmpservice.service.impl.UserServiceImpl;\nimport org.apache.cxf.Bus;\nimport org.apache.cxf.bus.spring.SpringBus;\nimport org.apache.cxf.jaxws.EndpointImpl;\nimport org.apache.cxf.transport.servlet.CXFServlet;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.xml.ws.Endpoint;\n\n@Configuration\npublic class StartClas {\n\n    @Bean(name = Bus.DEFAULT_BUS_ID)\n    public SpringBus springBus() {\n        return new SpringBus();\n    }\n\n    @Bean(name = \"wsBean\")\n    public ServletRegistrationBean dispatcherServlet() {\n        ServletRegistrationBean wbsServlet = new ServletRegistrationBean(new CXFServlet(), \"/ws/*\");\n        return wbsServlet;\n    }\n\n    @Bean\n    public UserService userService() {\n        return new UserServiceImpl();\n    }\n\n    @Bean\n    public Endpoint endpointPurchase(SpringBus springBus, UserService userService) {\n        EndpointImpl endpoint = new EndpointImpl(springBus(), userService());\n        endpoint.publish(\"/api\");\n        System.out.println(\"服务发布成功！地址为：http://localhost:8081/ws/api?wsdl\");\n        return endpoint;\n\n\n    }\n}\n\n\n</code></pre>\n<h3><a id=\"9WebService_306\"></a>9.发布WebService服务</h3>\n<p><img alt=\"image-20220521160910920\" src=\"image\\6e24c5e689b646ef33f85384aaf9b3e1.png\"/></p>\n<p>服务发布成功，打开浏览器输入地址</p>\n<p><img alt=\"image-20220521161049487\" src=\"image\\333e523935f3687da6b3762aff8c1051.png\"/></p>\n<p>出现如图所示内容表示服务发布成功，图片内容是wsdl(网络服务描述语言，Web Services Description Language),用于描述 Web Services 以及如何对它们进行访问.接下来就可以编写客户端了。</p>\n<h2><a id=\"_320\"></a>二、客户端</h2>\n<p>客户端调用WebService接口有很多种方法，这里只展示两种，推荐使用第一种</p>\n<h3><a id=\"1service_324\"></a>1.service编程调用方式</h3>\n<h4><a id=\"11_326\"></a>1.1目录结构</h4>\n<p>需要将服务端的pojo和service文件同步到客户端</p>\n<p><img alt=\"image-20220521162130729\" src=\"image\\3fac0c2a0cf102de304aabe019bb4148.png\"/></p>\n<h4><a id=\"12WebService_332\"></a>1.2调用WebService</h4>\n<pre><code>package cn.edu.usts;\n\nimport cn.edu.usts.pojo.User;\nimport cn.edu.usts.service.UserService;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.ws.Service;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class Client {\n    public static void main(String[] args) throws MalformedURLException {\n        System.setProperty(\"javax.xml.bind.JAXBContext\", \"com.sun.xml.internal.bind.v2.ContextFactory\");\n        //创建WSDL的URL\n        URL url = new URL(\"http://localhost:8080/ws/api?wsdl\");\n        // 指定命名空间和服务名称\n        QName qName = new QName(\"http://service.sbmpservice.usts.edu.cn\", \"UserService\");\n        Service service = Service.create(url, qName);\n        // 通过getPort方法返回指定接口\n        UserService myServer = service.getPort(UserService.class);  // 方法1\n//        UserService myServer = service.getPort(new QName(\"http://serviceImpl.service.usts.edu.cn/\", \"UserServiceImplPort\"), UserService.class); // 方法2\n\n        // 调用方法 获取返回值\n        User user1 = new User(2,\"tom\");\n        myServer.addUser(user1);\n        User user = myServer.queryUser(2);\n        System.out.println(user.toString());\n    }\n\n}\n\n</code></pre>\n<p>编译</p>\n<p><img alt=\"image-20220521163519950\" src=\"image\\294215b4636bcb93939ac53cfe51cc46.png\"/></p>\n<p>客户端如图所示。数据插入成功，查询成功，成功调用web Service接口</p>\n<p><img alt=\"image-20220521163638000\" src=\"image\\726ec0fa07dcd37bd943a2283d73afe3.png\"/></p>\n<p>服务端如图所示。成功接收到客户端发来的数据并将其写入数据库</p>\n<p><img alt=\"image-20220521163721657\" src=\"image\\e5d08bba75461d1ae935fd0a94ea76d3.png\"/></p>\n<p>数据库如图所示，成功插入数据</p>\n<h3><a id=\"2WSDLWebService_384\"></a>2.使用WSDL生成本地客户端代码调用WebService</h3>\n<p><strong>该种方式使用简单，但一些关键的元素在代码生成时写死到生成代码中，不方便维护，所以仅用于测试。</strong></p>\n<h4><a id=\"21__388\"></a>2.1 生成本地客户端代码</h4>\n<p>新建一个项目，直接在项目中生成客户端代码（不需要在别的地方生成再复制过来）</p>\n<p>打开终端</p>\n<p><img alt=\"image-20220521164619648\" src=\"image\\a38057ae15888e80ef676599906fee95.png\"/></p>\n<p>进入到src/main/java/…目录下，使用wsimport 命令，生成客户端代码</p>\n<pre><code> wsimport -keep -extension http://localhost:8080/ws/api?wsdl\n</code></pre>\n<p><img alt=\"image-20220521165028333\" src=\"image\\7bfad9a7c1b273cd68ab9d860f5ad95b.png\"/></p>\n<p>回车，然后就可以在目录中看到生成的客户端代码</p>\n<p><img alt=\"image-20220521165201388\" src=\"image\\8f6b2044a93732f8503baa2fdec62480.png\"/></p>\n<h4><a id=\"22_WebService_408\"></a>2.2 调用WebService服务</h4>\n<pre><code>public class app {\n    public static void main(String[] args) {\n\n        //创建服务访问点集合的对象\n        UserService_Service has = new UserService_Service();\n        //获取服务实现类\n        //根据服务访问点的集合中的服务访问点的绑定对象来获得绑定的服务类\n        UserService soap = has.getUserServiceImplPort();\n\n        //调用服务\n        User user = soap.queryUser(2);\n        System.out.println(user.toString());\n\n    }\n}\n\n</code></pre>\n<h2><a id=\"_431\"></a>三、问题及解决方案</h2>\n<h3><a id=\"1Exception_in_thread_main_comsunxmlinternalwsfaultServerSOAPFaultException_433\"></a>1.Exception in thread “main” com.sun.xml.internal.ws.fault.ServerSOAPFaultException</h3>\n<p><img alt=\"image-20220521165839981\" src=\"image\\a8835aec4461d282a1449a082a156baf.png\"/></p>\n<p>使用service编程调用接口时报错，在网上查资料说是webservice内部jar版本与现在所用的jdk的jar有冲突,需要设置下系统属性，在代码中加入</p>\n<pre><code>System.setProperty(\"javax.xml.bind.JAXBContext\", \"com.sun.xml.internal.bind.v2.ContextFactory\");\n</code></pre>\n<h3><a id=\"2A_query_was_run_and_no_Result_Maps_were_found_for_the_Mapped_Statement_447\"></a>2.A query was run and no Result Maps were found for the Mapped Statement</h3>\n<p>原因：在服务端的mapper中忘记了指定resultType属性</p>\n<p><img alt=\"image-20220521170444116\" src=\"image\\97b490e145aacf5d2879d9c60ef3a7ec.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}