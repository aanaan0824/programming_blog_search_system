{"blogid": "126413264", "writerAge": "码龄1年", "writerBlogNum": "91", "writerCollect": "6699", "writerComment": "12541", "writerFan": "13071", "writerGrade": "7级", "writerIntegral": "19618", "writerName": "微凉秋意", "writerProfileAdress": "writer_image\\profile_126413264.jpg", "writerRankTotal": "415", "writerRankWeekly": "1", "writerThumb": "7505", "writerVisitNum": "122060", "blog_read_count": "848", "blog_time": "已于 2022-08-21 21:12:21 修改", "blog_title": "【Rust指南】详解注释|函数|条件语句|循环语句", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0445dea7ffb04854838e8841b0f6b812.png\"/><br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#emspemsp_2\">  前言</a></li><li><a href=\"#Rust__6\">一、Rust 注释的方式</a></li><li><a href=\"#Rust__18\">二、Rust 函数</a></li><li><ul><li><a href=\"#1_20\">1、函数的四大格式</a></li><li><ul><li><a href=\"#11_21\">1.1、无参无返</a></li><li><a href=\"#12_33\">1.2、无参有返</a></li><li><a href=\"#13_48\">1.3、有参无返</a></li><li><a href=\"#14_66\">1.4、有参有返</a></li></ul>\n</li><li><a href=\"#2_82\">2、函数体的语句和表达式</a></li></ul>\n</li><li><a href=\"#Rust__108\">三、Rust 条件语句</a></li><li><a href=\"#Rust__149\">四、Rust 循环语句</a></li><li><ul><li><a href=\"#1while_151\">1、有关while循环</a></li><li><a href=\"#2for__164\">2、for 的迭代循环</a></li><li><a href=\"#3loop__188\">3、loop 循环</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"emspemsp_2\"></a>  前言</h1>\n<p>  书接上文，本篇博客讲解Rust语言的注释、函数、条件和循环语句的特点，我将以区别于C/C++的视角来分享，感受语言的渗透与区分。想要学好Rust必须打下好的基础，快来从这些基础语法中感悟与提升吧！</p>\n<hr/>\n<h1><a id=\"Rust__6\"></a>一、Rust 注释的方式</h1>\n<ol><li>第一种注释方式： <code>//</code>后跟注释内容</li><li>第二种注释方式：<code>/*</code>里面为的内容都是注释内容<code>*/</code></li><li>用于文档的注释： \n  <ul><li>在 Rust 中使用 // 可以使其之后到第一个换行符的内容变成注释。</li><li>在这种规则下，三个反斜杠 /// 依然是合法的注释开始。所以 Rust 可以用 /// 作为说明文档注释的开头：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\88a071a3a2ac4b24b7bc327652ca7b5a.png\"/></li><li>这时候把鼠标放在sum函数上面就会出现优美的函数提示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\86b2c524b6c843819d919c0c15c10d07.png\"/></li></ul> </li></ol>\n<hr/>\n<blockquote>\n<p>注：Cargo 具有 <code>cargo doc</code> 功能，开发者可以通过这个命令将工程中的说明注释转换成 HTML 格式的说明文档：可以在该项目下的target目录下找到doc文件，进入后可看到html文件。</p>\n</blockquote>\n<h1><a id=\"Rust__18\"></a>二、Rust 函数</h1>\n<p>我们在C/C++里都知道一个函数包含：<strong>返回值类型、函数名、参数列表和函数体</strong>，那么在Rust里面又有什么不一样的地方呢？</p>\n<h2><a id=\"1_20\"></a>1、函数的四大格式</h2>\n<h3><a id=\"11_21\"></a>1.1、无参无返</h3>\n<p><em>语法：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> 函数名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em>其中 Rust 函数名称的命名风格是小写字母以下划线分割，例如：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">another_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, runoob!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"12_33\"></a>1.2、无参有返</h3>\n<p><em>语法：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> 函数名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> 返回值类型 <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em>例如：</em></p>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">five</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//此时输入five()，结果就是5</span>\n</code></pre>\n<blockquote>\n<p>在此例子中已经显示了 Rust 函数声明返回值类型的方式：在参数声明之后用 <code>-&gt;</code> 来声明函数返回值的类型，而且不用加 <code>return</code>也可以</p>\n</blockquote>\n<h3><a id=\"13_48\"></a>1.3、有参无返</h3>\n<p><em>语法：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> 函数名<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span>类型<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span>类型<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em>例如：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">another_function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x 的值为 : {}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y 的值为 : {}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>Rust 中定义函数如果需要具备参数<strong>必须声明参数名称和类型</strong></p>\n</blockquote>\n<h3><a id=\"14_66\"></a>1.4、有参有返</h3>\n<p><em>语法：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> 函数名<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span>类型<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span>类型<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span>返回值类型 <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em>例如：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>在函数体中，随时都可以以 <code>return</code> 关键字结束函数运行并返回一个类型合适的值。<br/> 但是 Rust <strong>不支持自动返回值类型判断！</strong> 如果没有明确声明函数返回值的类型，函数将被认为是\"纯过程\"，不允许产生返回值。</p>\n</blockquote>\n<h2><a id=\"2_82\"></a>2、函数体的语句和表达式</h2>\n<p>Rust 函数体由一系列可以以表达式（Expression）结尾的语句（Statement）组成。到目前为止，我们仅见到了没有以表达式结尾的函数，但已经将表达式用作语句的一部分。</p>\n<ul><li>语句是执行某些操作且没有返回值的步骤。例如： \n  <ul><li><code>let a = 6;</code></li></ul> </li><li>表达式有计算步骤且有返回值。以下是表达式（假设出现的标识符已经被定义）： \n  <ul><li><code>a = 7</code><br/><code>b + 2</code> <br/> <code>c*(a + b)</code></li></ul> </li><li>Rust 中可以在一个用 {} 包括的块里编写一个较为复杂的表达式：</li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x 的值为 : {}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y 的值为 : {}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//运行结果：x为5，y为4。</span>\n</code></pre>\n<blockquote>\n<p>很显然，这段程序中包含了一个表达式块，而且在块中可以使用函数语句。<br/> 最后一个步骤是表达式，此表达式的结果值是整个表达式块所代表的值。这种表达式块叫做<strong>函数体表达式</strong>。<br/> <strong>注意：</strong> <code>x+1</code> 后不能加分号，否则将变为一条语句。</p>\n</blockquote>\n<h1><a id=\"Rust__108\"></a>三、Rust 条件语句</h1>\n<p><em>先来看代码：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"条件成立\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"条件不成立\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>由上面代码可看出Rust 里的<code>if</code>语句和C/C++非常相似，唯一的区别就是条件可以不加小括号，同时Rust中也支持<code>else if</code>语句。</li><li>但是 Rust 中的 if 不存在单语句不用加 {} 的规则，即不允许使用一个语句代替一个块。</li></ul>\n<hr/>\n<p><em>Rust 中的条件表达式必须是 bool 类型，例如下面的程序是错误的：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> number <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">// 报错，expected `bool`, found integerrustc(E0308)</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>虽然 C/C++ 语言中的条件表达式用整数表示，非 0 即真，但这个规则在很多注重代码安全性的语言中是被禁止的。</p>\n</blockquote>\n<p><em>在 Rust 中我们可以使用 if-else 结构实现类似于三元条件运算表达式 (A ? B : C) 的效果：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> a <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number 为 {}\"</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：两个函数体表达式的类型必须一样！且必须有一个 else 及其后的表达式块。</p>\n<hr/>\n<h1><a id=\"Rust__149\"></a>四、Rust 循环语句</h1>\n<p><em>Rust 除了灵活的条件语句以外，循环结构的设计也十分成熟。</em></p>\n<h2><a id=\"1while_151\"></a>1、有关while循环</h2>\n<ul><li>Rust 里也有<code>while</code>循环语句，与条件语句类似，循环的条件也可以不加小括号。</li><li>Rust 里没有<code>do while</code>循环，这是因为<code>do</code>在Rust 语言里规定为保留字，后续版本或许会用到。</li><li>在 C 语言中 for 循环使用三元语句控制循环，但是 Rust 中没有这种用法，需要用 while 循环来代替：</li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 循环体</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"2for__164\"></a>2、for 的迭代循环</h2>\n<p><em>for 循环是最常用的循环结构，常用来遍历一个线性数据据结构（比如数组）。for 循环遍历数组：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"值为 : {}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>这个程序中的 for 循环完成了对数组 a 的遍历。<code>a.iter()</code> 代表 a 的迭代器（iterator），后面文章详细说明</p>\n</blockquote>\n<p><em>当然，for 循环其实是可以通过下标来访问数组的：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[{}] = {}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"3loop__188\"></a>3、loop 循环</h2>\n<p>我们在开发过程中会遇到这样一个情况：某个循环无法在开头和结尾判断是否继续进行循环，必须在循环体中间某处控制循环的进行。如果遇到这种情况，我们经常会在一个 <code>while (true)</code> 循环体里实现中途退出循环的操作。</p>\n<p><em>Rust 语言有原生的无限循环结构 —— loop：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token char\">'W'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'Q'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'Y'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'Q'</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\'{}\\'\"</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p><em>loop 的巧妙用法：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token char\">'W'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'Q'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'Y'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pos <span class=\"token operator\">=</span> <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'Q'</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">break</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \\'Q\\' 的索引为 {}\"</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\94f109ff8b314eeba59d38602890bc8f.png\"/></p>\n<blockquote>\n<p>loop 循环可以通过 <code>break</code> 关键字类似于 <code>return</code> 一样使整个循环退出并给予<strong>外部一个返回值</strong>。这是一个十分巧妙的设计，因为 loop 这样的循环常被用来当作<strong>查找</strong>工具使用，如果找到了某个东西当然要将这个结果交出去。</p>\n</blockquote>\n<hr/>\n<p><code>有关Rust语言的注释、函数、条件与循环语句的分享到此结束，下一篇所有权的分享，我们不见不散</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}