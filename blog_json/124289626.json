{"blogid": "124289626", "writerAge": "码龄5年", "writerBlogNum": "36", "writerCollect": "172", "writerComment": "41", "writerFan": "27", "writerGrade": "4级", "writerIntegral": "1046", "writerName": "JOBbaba", "writerProfileAdress": "writer_image\\profile_124289626.jpg", "writerRankTotal": "35512", "writerRankWeekly": "65379", "writerThumb": "81", "writerVisitNum": "130506", "blog_read_count": "1959", "blog_time": "已于 2022-04-20 11:38:15 修改", "blog_title": "Qt Linux 环境中应用程序打包", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>系统环境：Ubuntu20.04LTS</strong><br/> <strong>开发环境：Qt5.14.1</strong></p>\n<h2><a id=\"_3\"></a>打包须知：</h2>\n<p>在进入程序部署打包之前，阅读官方的部署文档<a href=\"https://doc.qt.io/qt-6/linux-deployment.html\">Deploy</a>,通常情况下，我们在开发的时候，Qt Creator 的左下角构建模式为Debug，便于我们调试编写程序。Qt的三个构建模式Debug、Profile、Release的区别是： debug可以调试程序，而release不可以。在程序出现错误的时候，在debug模式下通过设置断点来调试程序。当程序所有错误都解决了以后，在release模式下生成程序，就可以对外发布了。debug生成的程序因为包含了调试信息，编译器也未做优化，所以比release模式生成的程序要大很多，而Profile则介于两者之间，用的较少。<img alt=\"在这里插入图片描述\" src=\"image\\4cdc24f3ff5547e7b2752b3c7af76407.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\d21cbaaf1dad44e19226505bfebbea2c.png\"/><br/> 一定要确保程序在Debug模式下，能正确运行，方可进行打包（Release），通常我们选择共享动态库的形式打包，一般需要三步：</p>\n<p>生成 release 版本的可执行文件 .exe；<br/> 找到所有的动态链接库 dll；<br/> 将所有的 dll 以及依赖的各种文件和可执行文件打包在一起生成最终的一个可执行文件<br/> 这样即可在为未安装Qt的机器上使用。</p>\n<p>一、将Qt的构建模式设置为Release,构建程序，将生成对应的程序Release文件夹。</p>\n<p>例如本文的示例程序qmlideo生成的Release文件夹:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\46b8b0a7c66f47a4a68dab15a20d2e3f.png\"/><br/> 其中，生成的qmlvideo（你的应用程序名称）文件是共享库文件（x-sharedlib)，并非可执行文件，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bc954c89268e499eb4f5b735537c8363.png\"/><br/> 如果遇到这样的问题，请在pro文件里加上一行：<code>QMAKE_LFLAGS += -no-pie</code><br/> 重新构建Release，可以看到qmlvideo文件已经成为可执行文件<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7acd8954d366492da3d4057b097fec75.png\"/><br/> 接下来，进入Release文件夹，打开终端， 输入<code>ldd qmlvideo</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\d0d502e0299c4e0e9850707b41106571.png\"/><br/> 这里是可执行程序qmlvideo依赖的动态库，需要将这些动态库和可执行程序放到一起。<br/> 新建一个空文件夹，用来放打包后的程序文件。我建立一新文件NewPro，将可执行文件qmlvideo复制到NewPro，这里写一个脚本，将上述的所有依赖库都找出来。在Release文件夹中新建<code>copylib.sh</code>；</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#!/bin/bash</span>\n\nLibDir<span class=\"token operator\">=</span>$PWD<span class=\"token string\">\"/lib\"</span>\nTarget<span class=\"token operator\">=</span>$<span class=\"token number\">1</span>\n\nlib_array<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">(</span>ldd $Target <span class=\"token operator\">|</span> grep <span class=\"token operator\">-</span>o <span class=\"token string\">\"/.*\"</span> <span class=\"token operator\">|</span> grep <span class=\"token operator\">-</span>o <span class=\"token string\">\"/.*/[^[:space:]]*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n$<span class=\"token punctuation\">(</span>mkdir $LibDir<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> Variable <span class=\"token keyword\">in</span> $<span class=\"token punctuation\">{<!-- --></span>lib_array<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\ndo\n    cp <span class=\"token string\">\"$Variable\"</span> $LibDir\ndone\n<span class=\"token comment\">#$</span>\n\n</code></pre>\n<p>设置权限<code>chmod 777 copylib.sh</code>，运行<code>./copy.sh qmlvideo</code>, 在Release中生成了lib文件夹<br/> <img alt=\"在这里插入图片描述\" src=\"image\\716397d8360240c0a37b68d30e8343cb.png\"/><br/> 将lib中所有文件复制到新文件夹NewPro中，此时，NewPro文件夹的内容为可执行文件qmlvideo 和lib中的所有动态库。<br/> 下一步，补充动态库，因为后续可能会发生“xcb\"错误；进入Qt安装目录文件夹，依次进入“版本号”-&gt;“gcc_64”-&gt;\"plugins\"中(我这里是Qt5.14.1/5.14.1/gcc_64/plugins/)，复制platforms文件夹到NewPro文件夹下:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3df7ad3429e3483c8c3ac072ec31e229.png\"/>将copylib.sh复制到NewPro/platforms文件夹中，运行：<code>./copylib libqxcb.so</code>命令，同样生成lib文件夹(这里是libqxcb的依赖库，若缺少，将触发“xcb”错误)，将lib文件夹下所有文件拷到NewPro目录下，遇到文件冲突选择全部替换。<br/> 在NewPro目录下，创建脚本文件<code>xxx.sh(xxx为可执行程序名，我这里是qmlvideo.sh)</code>,文件内容如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#!/bin/sh</span>\nappname<span class=\"token operator\">=</span>`basename $<span class=\"token number\">0</span> <span class=\"token operator\">|</span> sed s<span class=\"token punctuation\">,</span>\\<span class=\"token punctuation\">.</span>sh$<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>`\n\ndirname<span class=\"token operator\">=</span>`dirname $<span class=\"token number\">0</span>`\ntmp<span class=\"token operator\">=</span><span class=\"token string\">\"${dirname#?}\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"${dirname%$tmp}\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"/\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then\ndirname<span class=\"token operator\">=</span>$PWD<span class=\"token operator\">/</span>$dirname\nfi\nLD_LIBRARY_PATH<span class=\"token operator\">=</span>$dirname\nexport LD_LIBRARY_PATH\n$dirname<span class=\"token operator\">/</span>$appname <span class=\"token string\">\"$@\"</span>\n\n</code></pre>\n<p>将NewPro文件夹拷贝到一台同系统没有Qt环境的电脑上，进入NewPro目录后，运行：<code>./qmlvideo.sh</code>命令即可启动程序。</p>\n<h2><a id=\"_72\"></a>可能出现的问题：</h2>\n<p><strong>一、\"xcb\"错误：</strong><br/> 在应用程序目录中，打开终端，</p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">QT_DEBUG_PLUGINS</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n</code></pre>\n<p>运行应用程序的脚本<code>./qmlvideo.sh</code> ，可以查看依赖库加载过程，如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b634fd8038094021aed34788cfbb73aa.png\"/><br/> 如有<code>not found</code>的依赖库，再去Qt安装路径下的platforms中找到复制过来。</p>\n<p><strong>二、Segmentation Fault</strong><br/> 本人只是在移植到Ubuntu16时，出现段错误，请确保你的打包系统和移植系统一致。有库的版本问题，依赖问题，你可以选择连依赖基础库，如gcc都带进去.</p>\n<p><strong>三、程序图片无法加载，图标无法显示</strong></p>\n<p>若程序有图片需要加载，涉及到图形依赖库，在Qt安装目录中和platforms同目录下有个imageformats目录：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\69c177bd6d2146a9b3d2a2a0b7693796.png\"/>将整个<code>imageformats</code>目录复制到NewPro目录中即可，同时，如果有预加载图片，也要一并放入NewPro中，若以qrc的形式加载，也要将qrc文件目录放到NewPro中。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}