{"blogid": "116596183", "writerAge": "码龄3年", "writerBlogNum": "188", "writerCollect": "4660", "writerComment": "722", "writerFan": "3018", "writerGrade": "6级", "writerIntegral": "4734", "writerName": "孙 悟 空", "writerProfileAdress": "writer_image\\profile_116596183.jpg", "writerRankTotal": "4497", "writerRankWeekly": "7649", "writerThumb": "1124", "writerVisitNum": "514434", "blog_read_count": "18858", "blog_time": "于 2021-05-10 17:26:06 发布", "blog_title": "C++：友元（看这一篇就够了）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#1__21\">1 全局函数做友元</a></li><li><a href=\"#2__197\">2 类做友元</a></li><li><a href=\"#3__391\">3 成员函数做友元</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<p>生活中你的家有客厅(public)，有你的卧室(private)<br/> 客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>\n<p>但是呢，你也可以允许 <font color=\"green\" size=\"5\"><strong>隔壁老王</strong></font> 进去。</p>\n<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>\n<p><strong>友元的目的</strong> 就是让一个函数或者类 访问另一个类中的私有成员</p>\n<p><strong>友元的关键字为</strong> <mark>friend</mark></p>\n<p><strong>友元的三种实现</strong></p>\n<ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul>\n<h2><a id=\"1__21\"></a>1 全局函数做友元</h2>\n<p>首先，我们要定义一个房屋类，公共成员变量为客厅，私有成员变量为卧室</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// Building的构造函数，给成员变量赋初值</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\t\tm_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 客厅</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\tstring m_BedRoom<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后定义一个全局函数 laoWang()，用来访问Building类中的私有成员</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">laoWang1</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">*</span>building<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（地址传递） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（地址传递） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当然也可以用引用传递或者最简单的值传递</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">laoWang2</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">&amp;</span>building<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（引用传递） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（引用传递） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">laoWang3</span><span class=\"token punctuation\">(</span>Building building<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（ 值传递 ） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（ 值传递 ） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后定义一个测试函数test()，实现 <strong>laoWang()</strong> 这个全局函数做友元访问类的私有成员</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBuilding building<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">laoWang1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">laoWang2</span><span class=\"token punctuation\">(</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">laoWang3</span><span class=\"token punctuation\">(</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"red\">但是，现在还不能实现全局函数访问类的私有成员！</font></p>\n<p><font color=\"blue\"><strong>关键代码</strong></font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">laoWang1</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">*</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">laoWang2</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">&amp;</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">laoWang3</span><span class=\"token punctuation\">(</span>Building building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在Building类中声明<strong>友元函数</strong>，告诉编译器 <strong>laoWang</strong>全局函数是 <strong>Building</strong>类 的好朋友，<strong>可以访问Building对象的私有成员</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 告诉编译器 laoWang全局函数是 Building类  的好朋友，可以访问Building对象的私有成员</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">laoWang1</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">*</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">laoWang2</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">&amp;</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">laoWang3</span><span class=\"token punctuation\">(</span>Building building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\t\tm_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 客厅</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\tstring m_BedRoom<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面给出全局函数做友元访问类的私有成员的完整示例代码</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 房屋类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 告诉编译器 laoWang全局函数是 Building类  的好朋友，可以访问Building对象的私有成员</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">laoWang1</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">*</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">laoWang2</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">&amp;</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">laoWang3</span><span class=\"token punctuation\">(</span>Building building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\t\tm_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 客厅</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\tstring m_BedRoom<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">//全局函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">laoWang1</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">*</span>building<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（地址传递） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（地址传递） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">laoWang2</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">&amp;</span>building<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（引用传递） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（引用传递） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">laoWang3</span><span class=\"token punctuation\">(</span>Building building<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（ 值传递 ） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王 全局函数 正在访问：（ 值传递 ） \"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBuilding building<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">laoWang1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">laoWang2</span><span class=\"token punctuation\">(</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">laoWang3</span><span class=\"token punctuation\">(</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果</p>\n<pre><code class=\"prism language-cpp\">隔壁老王 全局函数 正在访问：（地址传递） 客厅\n隔壁老王 全局函数 正在访问：（地址传递） 卧室\n隔壁老王 全局函数 正在访问：（引用传递） 客厅\n隔壁老王 全局函数 正在访问：（引用传递） 卧室\n隔壁老王 全局函数 正在访问：（ 值传递 ） 客厅\n隔壁老王 全局函数 正在访问：（ 值传递 ） 卧室\n</code></pre>\n<h2><a id=\"2__197\"></a>2 类做友元</h2>\n<p>首先，声明一个要访问的私有变量所属的Building类，防止在下面的好LaoWang类中，编译器不认识Building（当然也可以采取先定义Building类，再定义隔壁老王LaoWang类，这样就不用声明Building类了）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后定义一个隔壁老王LaoWang类，声明了一个Building类型的指针变量building。其中，成员函数采用另一种方式：类内声明，类外定义，可以简化类的内容（在全局函数做友元的示例中，采用在类内声明并定义成员函数的方式，两种方式均可）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LaoWang</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//LaoWang的构造函数</span>\n\t<span class=\"token function\">LaoWang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//参观函数  访问Building中的属性</span>\n\n\tBuilding <span class=\"token operator\">*</span> building<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接着给出Building类的定义</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//Building的构造函数类内声明，在类外定义</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 客厅</span>\n\t\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\n\tstring m_BedRoom<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 卧室</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面给出<strong>类外定义成员函数</strong>，需要注意的是，在类外定义，需要在成员函数加上所在类的作用域（<strong>类名::成员函数名()</strong>），以便于告诉编译器，该成员函数属于哪个类。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//Building类的构造函数</span>\n<span class=\"token class-name\">Building</span><span class=\"token operator\">::</span><span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tm_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\tm_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//LaoWang的构造函数</span>\n<span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">LaoWang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 创建建筑物对象</span>\n\tbuilding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//在堆区开辟一块内存，并赋给building指针</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//LaoWang的成员函数visit()</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王类正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王类正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后定义一个测试函数，实现类做友元访问其他类的私有成员</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLaoWang lw\t<span class=\"token comment\">//定义一个LaoWang类的对象;</span>\n\tlw<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"red\">但是，现在还不能实现一个类访问另一个类的私有成员！</font></p>\n<p><font color=\"blue\"><strong>关键代码</strong></font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LaoWang</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在Building类中声明一个<strong>友元类</strong>，告诉编译器 <strong>LaoWang</strong>类是 <strong>Building</strong>类 的好朋友，<strong>可以访问Building对象的私有成员</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 告诉编译器，LaoWang类是Building类的好朋友，可以访问Building类的私有成员</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LaoWang</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 客厅</span>\n\t\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\n\tstring m_BedRoom<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 卧室</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面给出类做友元实现一个类访问另一个类私有成员的完整示例代码</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 类作友元</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LaoWang</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">LaoWang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//参观函数  访问Building中的属性</span>\n\n\tBuilding <span class=\"token operator\">*</span> building<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 房屋类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 告诉编译器，LaoWang类是Building类的好朋友，可以访问Building类的私有成员</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LaoWang</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 客厅</span>\n\t\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\n\tstring m_BedRoom<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 类外定义成员函数</span>\n\n<span class=\"token class-name\">Building</span><span class=\"token operator\">::</span><span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tm_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\tm_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">LaoWang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 创建建筑物对象</span>\n\tbuilding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王LaoWang类正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王LaoWang类正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLaoWang lw<span class=\"token punctuation\">;</span>\n\tlw<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果</p>\n<pre><code class=\"prism language-cpp\">隔壁老王LaoWang类正在访问：客厅\n隔壁老王LaoWang类正在访问：卧室\n</code></pre>\n<h2><a id=\"3__391\"></a>3 成员函数做友元</h2>\n<p>类似于类作友元，我们首先声明一个Building类，防止在下面的好LaoWang类中，编译器不认识Building</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后定义LaoWang类，同样采用成员函数在类内声明，类外定义的方式。其中定义两个访问函数</p>\n<ul><li>visit1()，<strong>可以</strong> 访问Building中的私有成员</li><li>visit2()，<strong>不可以</strong> 访问Building中的私有成员</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LaoWang</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">LaoWang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//让visit1()函数   可以 访问Building中的私有成员</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//让visit2()函数 不可以 访问Building中的私有成员</span>\n\n\tBuilding <span class=\"token operator\">*</span>building<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面给出Building类的定义</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//客厅</span>\n\t\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\tstring m_BedRoom<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面给出<strong>类外定义成员函数</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//LaoWang类的构造函数</span>\n<span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">LaoWang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tbuilding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//LaoWang类的成员函数visit1()</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王LaoWang类中的visit1()函数正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王LaoWang类中的visit1()函数正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//LaoWang类的成员函数visit2()</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王LaoWang类中的visit2()函数正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//cout &lt;&lt; \"隔壁老王LaoWang类中的visit2()函数正在访问：\" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\t//错误！私有属性不可访问</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Building类的构造函数</span>\n<span class=\"token class-name\">Building</span><span class=\"token operator\">::</span><span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tm_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\tm_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后用一个测试函数实现成员函数做友元实现对另一个类私有成员的访问</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLaoWang lw<span class=\"token punctuation\">;</span>\n\t\n\tlw<span class=\"token punctuation\">.</span><span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tlw<span class=\"token punctuation\">.</span><span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>同样的，现在还没有声明友元，因此类中的成员函数还不能访问另一个类的私有成员</p>\n<p><font color=\"blue\"><strong>关键代码</strong></font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在Building类中声明一个<strong>友元成员函数</strong>，告诉编译器 **visit1()**成员函数是 <strong>Building</strong>类 的好朋友，<strong>可以访问Building对象的私有成员</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 告诉编译器，LaoWang类下的visit1()函数是Building类的好朋友，可以访问Building的私有成员</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//客厅</span>\n\t\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\tstring m_BedRoom<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面给出成员函数做友元实现一个类的成员函数访问另一个类私有成员的完整示例代码</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LaoWang</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">LaoWang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//让visit1()函数   可以 访问Building中的私有成员</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//让visit2()函数 不可以 访问Building中的私有成员</span>\n\n\tBuilding <span class=\"token operator\">*</span>building<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 告诉编译器，LaoWang类下的visit1()函数是Building类的好朋友，可以访问Building的私有成员</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstring m_SittingRoom<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//客厅</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\tstring m_BedRoom<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//卧室</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">LaoWang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tbuilding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王LaoWang类中的visit1()函数正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王LaoWang类中的visit1()函数正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">LaoWang</span><span class=\"token operator\">::</span><span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"隔壁老王LaoWang类中的visit2()函数正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-&gt;</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//cout &lt;&lt; \"隔壁老王LaoWang类中的visit2()函数正在访问：\" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\t//错误！私有属性不可访问</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Building</span><span class=\"token operator\">::</span><span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tm_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\tm_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLaoWang lw<span class=\"token punctuation\">;</span>\n\t\n\tlw<span class=\"token punctuation\">.</span><span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tlw<span class=\"token punctuation\">.</span><span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果</p>\n<pre><code class=\"prism language-cpp\">隔壁老王LaoWang类中的<span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数正在访问：客厅\n隔壁老王LaoWang类中的<span class=\"token function\">visit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数正在访问：卧室\n隔壁老王LaoWang类中的<span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数正在访问：客厅\n</code></pre>\n<hr/>\n<p>参考连接<a href=\"https://www.bilibili.com/video/BV1et411b73Z?p=118\">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}