{"blogid": "126712792", "writerAge": "码龄5年", "writerBlogNum": "123", "writerCollect": "299", "writerComment": "91", "writerFan": "168", "writerGrade": "5级", "writerIntegral": "1821", "writerName": "哇咔咔负负得正", "writerProfileAdress": "writer_image\\profile_126712792.jpg", "writerRankTotal": "11099", "writerRankWeekly": "14287", "writerThumb": "97", "writerVisitNum": "81405", "blog_read_count": "10", "blog_time": "已于 2022-09-07 15:04:42 修改", "blog_title": "[学习记录] Redis 1. NoSQL 数据库和 Redis 概述", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1_NoSQL__0\"></a>1. NoSQL 数据库简介</h1>\n<p>参考课程：<a href=\"https://www.bilibili.com/video/BV1Rv41177Af\">https://www.bilibili.com/video/BV1Rv41177Af</a></p>\n<p>参考书：<a href=\"https://blog.csdn.net/liu8490631/article/details/124290851\">https://blog.csdn.net/liu8490631/article/details/124290851</a></p>\n<p><a href=\"https://redis.io/docs/\">官方文档</a></p>\n<h2><a id=\"11__6\"></a>1.1 技术发展</h2>\n<p>技术分类：</p>\n<ol><li>解决功能性问题：Java，JSP，RDBMS，Tomcat，HTML，Linux，JDBC，SVN</li><li>解决扩展性问题：Struts，Spring， SpringMVC，Hibernate，Mybatis</li><li>解决<strong>性能</strong>的问题：<strong>NoSQL</strong>，Java 线程，Hadoop，Nginx，MQ，ElasticSearch</li></ol>\n<h3><a id=\"111_Web_10__12\"></a>1.1.1 Web 1.0 时代</h3>\n<p>PC <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        →\n       \n      \n      \n       \\to\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.3669em;\"></span><span class=\"mrel\">→</span></span></span></span></span> Web Server <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        →\n       \n      \n      \n       \\to\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.3669em;\"></span><span class=\"mrel\">→</span></span></span></span></span> DB Service</p>\n<h3><a id=\"112_Web_20__14\"></a>1.1.2 Web 2.0 时代</h3>\n<p>用户访问量大幅增加，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\530b13ed641944c1b94a3900ea61d554.png\"/></p>\n<h3><a id=\"113_1_CPU___17\"></a>1.1.3 出现的原因1：为了解决 CPU 和 内存压力</h3>\n<p>n*PC <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        →\n       \n      \n      \n       \\to\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.3669em;\"></span><span class=\"mrel\">→</span></span></span></span></span> Nginx (反向代理，负载均衡 ) <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        →\n       \n      \n      \n       \\to\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.3669em;\"></span><span class=\"mrel\">→</span></span></span></span></span> 多个服务器</p>\n<p><strong>★★★★★：用户第一次登录，用户 session 保存在服务器 1，第二次访问可能到了服务器2，但是服务器 2 中没有该用户的 session，怎么办？session 怎么存储？</strong></p>\n<p>方案 1：保存在客户端 cookie 里面。难保证安全性<br/> 方案 2：session 复制，将 session 复制到其他服务器。造成 session 数据冗余，节点越多，浪费越多。<br/> 方案 3：保存在文件服务器或者数据库里。大量 IO 问题。<br/> <strong>方案 4</strong>：<strong>NoSQL 缓存服务器</strong>，连接每个 Web 服务器。完全在内存中，速度快，数据结构简单。</p>\n<h3><a id=\"114_2_IO__26\"></a>1.1.4 出现的原因2：为了解决 IO 压力</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\75d1af59aab04983a8369c8e688a6551.png\"/></p>\n<h2><a id=\"12_NoSQL__29\"></a>1.2 NoSQL 数据库</h2>\n<h3><a id=\"121__30\"></a>1.2.1 概述</h3>\n<p>NoSQL = Not Only SQL，不仅仅是 SQL，泛指<strong>非关系型数据库</strong>。</p>\n<p>关系型数据库（如 MySQL），按照业务逻辑存储有关联的数据。</p>\n<p>NoSQL 不依赖业务逻辑，而以简单的 <strong>key-value</strong> 模式存储。因此大大增加了数据库的扩展能力。</p>\n<ul><li>不遵循 SQL 标准</li><li>不支持 ACID（原子性，一致性，隔离性，持久性）</li><li>远超于 SQL 的性能</li></ul>\n<h3><a id=\"122_NoSQL__39\"></a>1.2.2 NoSQL 适用场景</h3>\n<ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性</li></ul>\n<p>如商城秒杀。</p>\n<h3><a id=\"123_NoSQL__45\"></a>1.2.3 NoSQL 不适用场景</h3>\n<ul><li>需要事务支持</li><li>基于 SQL 的结构化查询存储，处理复杂的关系，需要<strong>即席查询</strong><br/> （用户根据自己的需求，灵活的选择查询条件，系统能够根据用户的选择生成相应的统计报表。即席查询与普通应用查询最大的不同是普通的应用查询是定制开发的，而即席查询是由用户自定义查询条件的。）</li><li>用不着 SQL 的和用了 SQL 也不行的情况，请考虑 NoSQL</li></ul>\n<h3><a id=\"124_Memcached_51\"></a>1.2.4 Memcached</h3>\n<ul><li>很早出现的 NoSQL 数据库</li><li>数据都在内存，一般不持久化</li><li>支持简单的 key-value 模式，<strong>只支持普通的字符串键</strong></li><li>一般是作为<strong>缓存数据库</strong>辅助持久化的数据库</li></ul>\n<h3><a id=\"125_Redis_57\"></a>1.2.5 Redis</h3>\n<ul><li>几乎覆盖了 Memcached 的绝大部分功能</li><li>数据都在内存中，<strong>支持持久化</strong>，主要用作备份恢复</li><li>除了支持简单的 key-value 模式，还支持多种数据结构的存储，比如：list，set，hash，zset 等</li><li>一般是作为<strong>缓存数据库</strong>辅助持久化的数据库</li></ul>\n<h4><a id=\"126_MongoDB_63\"></a>1.2.6 MongoDB</h4>\n<ul><li>高性能，开源，模式自由（schema free）的<strong>文档型数据库</strong></li><li>数据都在内存中，如果内存不足，把不常用的数据保存到硬盘</li><li>虽然是 key-value 模式，但是对 value（<strong>尤其是 JSON</strong>）提供了丰富的查询功能</li><li>支持二进制数据以及大型对象</li><li>可以根据数据的特点<strong>替代 RDBMS</strong>，成为独立的数据库，或者配合 RDBMS，存储特定的数据</li></ul>\n<h2><a id=\"13__70\"></a>1.3 行式存储数据库（大数据时代）</h2>\n<h3><a id=\"131__71\"></a>1.3.1 行式数据库</h3>\n<p>找某一行较快，但是找某一列的数据较慢</p>\n<h3><a id=\"132__73\"></a>1.3.2 列式数据库</h3>\n<p>找某一行较慢，但是找某一列的数据较块</p>\n<h4><a id=\"1321_Hbase_75\"></a>1.3.2.1 Hbase</h4>\n<p>Hbase 是 <strong>Hadoop</strong> 项目中的数据库。用于需要对大量数据进行随机、实时的读写操作的场景中。<br/> Hbase 的目标就是处理数据量<strong>非常庞大</strong>的表，可以用普通的计算机处理超过 <strong>10 亿行</strong>数据，还可以处理有数<strong>百万列</strong>元素的数据表。</p>\n<h3><a id=\"14__78\"></a>1.4 图关系型数据库</h3>\n<p>Neo4j<br/> 主要应用于：社会关系，公共交通网络，地图及网络拓扑（n*(n-1)/2）</p>\n<h3><a id=\"15_DBEngines__81\"></a>1.5 DB-Engines 数据库排名</h3>\n<p><a href=\"https://db-engines.com/en/ranking\">https://db-engines.com/en/ranking</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\d90e6e96679b49dfa25b0b2483a3a18e.png\"/></p>\n<h1><a id=\"2_Redis__84\"></a>2. Redis 概述</h1>\n<ol><li><strong>开源</strong>的 <code>K-V</code> 存储系统。</li><li>支持存储的 value 类型： \n  <ul><li>string 字符串</li><li>list 链表</li><li>set 集合</li><li>zset 有序集合</li><li>hash 哈希类型</li></ul> </li><li>上述类型都支持 push/pop，add/remove ，这些操作都是<strong>原子性</strong>的。</li><li>支持各种不同方式的<strong>排序</strong></li><li>数据存在内存中</li><li>Redis 可以<strong>周期性</strong>地把更新的<strong>数据写入磁盘</strong>或者把修改操作写入追加地记录文件</li><li>实现 <code>master-slave</code> （主从）同步</li></ol>\n<h2><a id=\"21__97\"></a>2.1 应用场景</h2>\n<h3><a id=\"211__98\"></a>2.1.1 配合关系型数据库做高速缓存</h3>\n<ul><li>高频次，热门访问的数据，降低数据库 IO</li><li>分布式架构，做 session 共享</li></ul>\n<h3><a id=\"212__102\"></a>2.1.2 多样的数据结构存储持久化数据</h3>\n<ol><li>排行榜，Top-N： \n  <ul><li>利用 zset 有序集合</li></ul> </li><li>手机验证码： \n  <ul><li>Expire 过期</li></ul> </li><li>计数器，秒杀： \n  <ul><li>原子性，自增方法 INCR，DECR</li></ul> </li><li>去除大量数据中的重复数据： \n  <ul><li>set 集合</li></ul> </li><li>构建队列： \n  <ul><li>利用 list</li></ul> </li><li>发布订阅消息系统： \n  <ul><li>pub/sub 模式</li></ul> </li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}