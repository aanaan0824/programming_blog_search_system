{"blogid": "126679911", "writerAge": "码龄10年", "writerBlogNum": "884", "writerCollect": "365", "writerComment": "137", "writerFan": "87", "writerGrade": "7级", "writerIntegral": "18869", "writerName": "程序猿不脱发2", "writerProfileAdress": "writer_image\\profile_126679911.jpg", "writerRankTotal": "669", "writerRankWeekly": "7458", "writerThumb": "905", "writerVisitNum": "1106067", "blog_read_count": "247", "blog_time": "于 2022-09-03 17:12:53 发布", "blog_title": "【教3妹学mysql】一条慢sql如何排查优化", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p><strong>插：</strong> <a href=\"https://www.cbedai.net/binkang\">前些天发现了一个巨牛的人工智能学习网站，通俗易懂，风趣幽默，忍不住分享一下给大家。点击跳转到网站。</a> <br/> <strong>坚持不懈，越努力越幸运，大家一起学习鸭~~~</strong></p>\n</blockquote>\n<p><img alt=\"3妹\" src=\"image\\71642026d09134356589ba655448be14.png\"/></p>\n<p><em><strong>2哥</strong></em>：3妹，干嘛呢，你有没有看到新闻。成都的核酸系统“崩了”。<br/> <em><strong>3妹</strong></em>：看到了，程序员又要被锅了。遇到系统突然“崩了”，该如何排查呢？<br/> <em><strong>2哥</strong></em>：哈哈，3妹真是好学，emm,不过这个问题有点难，涉及的内容也比较多，我们后面再说。<br/> <em><strong>3妹</strong></em>：切，2哥也有不懂的时候啊。<br/> <em><strong>2哥</strong></em>：先说说你在干嘛呢。<br/> <em><strong>3妹</strong></em>：还在学mysql呢，我们公司**统计之前还好好的， 现在数据量上来了，查询总是很慢，在想如何排查呢。<br/> <em><strong>2哥</strong></em>：虽然我不太懂网络的原理，但是Mysql慢查询这块我知道啊。让我给你分析分析。</p>\n<p><img alt=\"讲课\" src=\"image\\9d122554892bbe3e0252776a0fa5e383.png\"/></p>\n<p>我认为，一个 SQL 执行的很慢，我们要分两种情况讨论：</p>\n<h5><a id=\"1_19\"></a>1、大多数情况下很正常，偶尔很慢，则有如下原因</h5>\n<p>(1)、数据库在<strong>刷新脏页</strong>，例如 redo log 写满了需要同步到磁盘。</p>\n<p>(2)、执行的时候，<strong>遇到锁</strong>，如表锁、行锁。</p>\n<p>(3)、<strong>sql写的太烂</strong>了</p>\n<h5><a id=\"2_SQL__27\"></a>2、这条 SQL 语句一直执行的很慢，则有如下原因：</h5>\n<p>(1)、没有用上索引或则索引失效：例如该字段没有索引；或则由于对字段进行运算、函数操作导致无法用索引。</p>\n<p>(2)、有索引可能会走全表扫描</p>\n<p>怎样判断是否走全表扫描：</p>\n<p>索引区分度（索引的值不同越多，区分度越高），称为基数，而数据量大时不可能全部扫描一遍得到基数，而是采样部分数据进行预测，那有可能预测错了，导致走全表扫描。</p>\n<h1><a id=\"sql_37\"></a>慢sql优化</h1>\n<h2><a id=\"01SQL_38\"></a>01数据库中设置SQL慢查询</h2>\n<p>方式一：修改配置文件 在 my.ini 增加几行: 主要是慢查询的定义时间（超过2秒就是慢查询），以及慢查询log日志记录（ slow_query_log）<br/> <img alt=\"image.png\" src=\"image\\20fe35b3cc6cb5197a94c1900dedf587.png\"/></p>\n<p>方式二：通过MySQL数据库开启慢查询:<br/> <img alt=\"image.png\" src=\"image\\ac664207d2b33e8907caec0674d5cfc5.png\"/></p>\n<h2><a id=\"02_48\"></a>02分析慢查询日志</h2>\n<p>可以通过如下命令定位低效率执行sql<br/> <strong>show processlist；</strong># sql 可以用 **explain **分析执行计划。</p>\n<p>对于执行计划的分析，也是面试官喜欢考察的一个点。面试官：你是怎样使用explain的？对于执行计划你是怎样分析的？</p>\n<p>这里简单带过，之后会详细解答。</p>\n<p>主要关注这几个字段即可：</p>\n<p><strong>type</strong>：表示MySQL在表中找到所需行的方式，或者叫访问类型</p>\n<ul><li> <p>type=ALL，全表扫描，MySQL遍历全表来找到匹配行</p> </li><li> <p>type=index，索引全扫描</p> </li><li> <p>type=range，索引范围扫描</p> </li><li> <p>type=eq_ref，唯一索引</p> </li><li> <p>type=NULL，MySQL不用访问表或者索引，直接就能够得到结果（性能最好）</p> </li></ul>\n<p><strong>possible_keys</strong>: 表示查询可能使用的索引</p>\n<p><strong>key</strong>: 实际使用的索引</p>\n<p><strong>key_len</strong>: 使用索引字段的长度</p>\n<p><strong>rows</strong>: 扫描行的数量</p>\n<p><strong>Extra</strong>：</p>\n<ul><li> <p>using index：覆盖索引，不回表</p> </li><li> <p>using where：回表查询</p> </li><li> <p>using filesort：需要额外的排序，不能通过索引得到排序结果</p> </li></ul>\n<h2><a id=\"03sql_87\"></a>03慢sql如何优化</h2>\n<p>对于MYSQL慢sql语句的优化，我们也可以分几个方面来进行分析（基本覆盖全面啦）：</p>\n<p>面试从这几方面考虑：索引+sql语句+数据库结构优化+优化器优化+架构优化。</p>\n<h4><a id=\"_93\"></a>索引</h4>\n<ul><li> <p>尽量覆盖索引，5.6支持索引下推</p> </li><li> <p>组合索引符合最左匹配原则</p> </li><li> <p>避免索引失效</p> </li><li> <p>在写多读少的场景下，可以选择普通索引而不要唯一索引。更新时，普通索引可以使用change buffer进行优化，减少磁盘IO,将更新操作记录到change bufer，等查询来了将数据读到内存再进行修改.</p> </li><li> <p>索引建立原则（一般建在where和order by，基数要大，区分度要高，不要过度索引，外键建索引）</p> </li></ul>\n<h4><a id=\"sql_105\"></a>sql语句</h4>\n<p>1、分页查询优化</p>\n<p>该方案适用于主键自增的表，可以把Limit查询转换成某个位置的查询。</p>\n<p>select * from tb_sku where id&gt;20000 limit 10;</p>\n<p>2、优化insert语句</p>\n<ul><li> <p>多条插入语句写成一条</p> </li><li> <p>在事务中插数据</p> </li><li> <p>数据有序插入（主键索引）</p> </li></ul>\n<h4><a id=\"_121\"></a>数据库结构优化</h4>\n<p>1、将字段多的表分解成多个表有些字段使用频率高，有些低，数据量大时，会由于使用频率低的存在而变慢，可以考虑分开。</p>\n<p>2、对于经常联合查询的表，可以考虑建立中间表</p>\n<h4><a id=\"_127\"></a>优化器优化</h4>\n<p><strong>1、优化器使用MRR</strong></p>\n<p><strong>原理</strong>：MRR 【Multi-Range Read】将ID或键值读到buffer排序，通过把「随机磁盘读」，转化为「顺序磁盘读」，减少磁盘IO，从而提高了索引查询的性能。</p>\n<p><strong>开启mrr：</strong></p>\n<p><img alt=\"image.png\" src=\"image\\1133bbd2ee38bd53e035dda1a45b686c.png\"/></p>\n<p>对于 Myisam，在去磁盘获取完整数据之前，会先按照 rowid 排好序，再去顺序的读取磁盘。</p>\n<p>对于 Innodb，则会按照聚簇索引键值排好序，再顺序的读取聚簇索引。</p>\n<p>**磁盘预读：**请求一页的数据时，可以把后面几页的数据也一起返回，放到数据缓冲池中，这样如果下次刚好需要下一页的数据，就不再需要到磁盘读取（局部性原理）</p>\n<p><strong>索引本身就是为了减少磁盘 IO，加快查询，而 MRR，则是把索引减少磁盘 IO 的作用，进一步放大</strong></p>\n<p>https://zhuanlan.zhihu.com/p/148680235</p>\n<h5><a id=\"_148\"></a>架构优化</h5>\n<p>读/写分离（主库写，从库读）</p>\n<p><strong>总结：</strong></p>\n<p>1、先设置慢查询（my.ini或数据库命令）</p>\n<p>2、分析慢查询日志</p>\n<p>3、定位低效率sql（show processlist）</p>\n<p>4、explain分析执行计划（是否索引失效，用到索引没，用了哪些）</p>\n<p>5、优化（索引+sql语句+数据库结构优化+优化器优化+架构优化）</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}