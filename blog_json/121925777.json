{"blogid": "121925777", "writerAge": "码龄4年", "writerBlogNum": "25", "writerCollect": "144", "writerComment": "13", "writerFan": "8", "writerGrade": "2级", "writerIntegral": "287", "writerName": "声希Censh", "writerProfileAdress": "writer_image\\profile_121925777.jpg", "writerRankTotal": "103464", "writerRankWeekly": "138429", "writerThumb": "22", "writerVisitNum": "46208", "blog_read_count": "3872", "blog_time": "于 2021-12-14 14:02:30 发布", "blog_title": "C++数组的创建及使用（静态数组与动态数组）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"C_0\"></a>C++数组的创建及使用</h1>\n<h2><a id=\"_2\"></a>一、静态数组</h2>\n<p><strong>静态数组</strong>：<strong>定义时就已经在</strong>栈**上分配了空间大小，在运行时这个大小不能改变</p>\n<p>数组（array）是一种数据格式，能够存储多个同类型的值。</p>\n<h3><a id=\"_8\"></a><strong>一维数组</strong></h3>\n<h4><a id=\"1_10\"></a>1、一维数组的声明：</h4>\n<p>一般声明：typeName arrayName[arraysize];</p>\n<p>要创建数组，可使用声明语句。数组的声明应该指出数组的</p>\n<p>①存储在每个元素中的值的类型②数组名③数组中的元素数</p>\n<p>注意：以上声明语句中的arraysize不能是变量，另外数组大小一旦确定之后就不能修改了！</p>\n<p>例如：</p>\n<pre><code class=\"prism language-c++\">short month[12]   //create an array of 12 shorts\n</code></pre>\n<h4><a id=\"2_26\"></a>2、数组的初始化及使用：</h4>\n<p>只有在定义数组的时候才能初始化，之后就不能使用了，也不能将一个数组的值赋给另外一个数组，然而可以使用下标分别给数组中的元素赋值。</p>\n<pre><code class=\"prism language-c++\">int array1[4] = {1,2,3,4};  //okay\nint array2[4];              //okay\narray1[4] = {5,6,7,8};\t\t//not allowed\narray2 = array1;\t\t\t//not allowed\n\nint array3[4] = {2,7};\t\t//okay 只初始化前两个元素，默认其他元素为0\nint array4[] = {1,9,9,5};\t//okay 编译器计算元素个数\ndouble array5[4] {1.1, 2.2, 5.5, 1.7e4};  //okay in c++11,可省略=\ndouble array6[20] {};       //okay,  所有元素被设为0\ndouble array6[20] = {};     //okay,  同上，所有元素被设为0\n\nlong array7[] = {3.1,6,7};  //not allowed 浮点数转成整形是缩窄操作\nchar array8[5] {'h','i','120','65535','\\0'};  //not allowed 因为65535超出了char的范围\n</code></pre>\n<p>其实在C++中，将数组名解释为地址。在多数情况下，C++将数组名解释为数组第一个元素的地址。例如以下程序：</p>\n<pre><code class=\"prism language-c++\">int main()\n{\n    using namespace std;\n    int months[3] = {5,7,12};\n    double workhours[3] = {120.7, 110.5, 57};\n    \n// Here ara two ways to get the address of an array\n    int * pm = months;  // name of array = address\n    double * pw = &amp;workhours[0];   // or use address operator\n// With array elements\n    cout &lt;&lt; \"pm = \" &lt;&lt; pm &lt;&lt; \", *pm = \" &lt;&lt; *pm &lt;&lt; endl;\n    pm += 1;\n    cout &lt;&lt; \"add 1 to the pm pointer:\" &lt;&lt; endl;\n    cout &lt;&lt; \"pm = \" &lt;&lt; pm &lt;&lt; \", *pm = \" &lt;&lt; *pm &lt;&lt; endl &lt;&lt; endl;\n    \n    cout &lt;&lt; \"pw = \" &lt;&lt; pw &lt;&lt; \", *pw = \" &lt;&lt; *pw &lt;&lt; endl;\n    pw = pw + 1;//增加的值等于指向类型占用的字节数\n    cout &lt;&lt; \"add 1 to the pw pointer:\" &lt;&lt; endl;\n    cout &lt;&lt; \"pw = \" &lt;&lt; pw &lt;&lt; \", *pw = \" &lt;&lt; *pw &lt;&lt; endl &lt;&lt; endl;\n    \n    cout &lt;&lt; \"access two elements with array notation \" &lt;&lt; endl;\n    cout &lt;&lt; \"workhours[0] = \" &lt;&lt; workhours[0] &lt;&lt; \", workhours[1] = \" &lt;&lt; workhours[1] &lt;&lt; endl;\n    cout &lt;&lt; \"access two elements with pointer notation \" &lt;&lt; endl;\n    cout &lt;&lt; \"*workhours = \" &lt;&lt; *workhours &lt;&lt; \", *(workhours+1) = \" &lt;&lt; *(workhours+1) &lt;&lt; endl;\n    \n    cout &lt;&lt; sizeof(months) &lt;&lt; \" = size of months array\" &lt;&lt; endl;\n    cout &lt;&lt; sizeof(pm) &lt;&lt; \" = size of pm pointer\" &lt;&lt; endl;\n    return 0;\n    \n}\n</code></pre>\n<p>程序的输出结果为：</p>\n<pre><code>pm = 000000CC6FEFF848, *pm = 5\nadd 1 to the pm pointer:\npm = 000000CC6FEFF84C, *pm = 7\n\npw = 000000CC6FEFF878, *pw = 120.7\nadd 1 to the pw pointer:\npw = 000000CC6FEFF880, *pw = 110.5\n\naccess two elements with array notation\nworkhours[0] = 120.7, workhours[1] = 110.5\naccess two elements with pointer notation\n*workhours = 120.7, *(workhours+1) = 110.5\n12 = size of months array\n8 = size of pm pointer\n</code></pre>\n<h3><a id=\"_104\"></a><strong>二维数组：</strong></h3>\n<p>c++没有提供二维数组类型，但是可以创建每个元素本身都是数组的数组。</p>\n<h4><a id=\"1_108\"></a>1、二维数组的声明</h4>\n<p>例如：</p>\n<pre><code>int array[5][7];\n</code></pre>\n<p>该声明意味着array是一个包含5个元素的数组，其中每个元素都是一个由7个整数组成的数组，如下图所示。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\79b527ad740e422192a56120071f3066.png\"/></p>\n<h4><a id=\"2_118\"></a>2、二维数组的初始化及使用</h4>\n<p>创建二维数组时，可以初始化其所有元素。需要在一维数组的声明之上加上由逗号分隔的用花括号括起来的值列表，如：</p>\n<pre><code class=\"prism language-c++\">int array[4][5] = \n{\n    {0,1,2,3,4},\n    {1,2,3,4,5},\n    {2,3,4,5,6},\n    {3,4,5,6,7}\n}\n</code></pre>\n<p>对于上述初始化的二维数组也可看做如下结构</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ec22100f1edf473c9a8f32c1ca8724fb.png\"/></p>\n<p>其中array是数组名，a数组包含4行，即4个元素：array[0]、array[1]、array[2]、array[3]，每个行元素可以看作含有5个元素的一维数组。也就是说array[0]、array[1]、array[2]、array[3]分别是这4个一维数组的数组名。既然是数组名，上面说到一维数组的数组名表示的就是数组第一个元素的地址，所以array[0]表示的就是元素array[0][0]的地址,即array[0] = &amp;array[0][0]，所以在二维数组a中，a[i]]表示的就是元素array[i][0]的地址，即</p>\n<pre><code class=\"prism language-c++\">a[i] == &amp; a[i][0]\n</code></pre>\n<p>在一维数组中，数组名a代表数组的首地址，即第一个元素的地址，而a+1代表数组第二个元素的地址…所以既然array[0]、array[1]…代表二维数组第0行、第1行的首地址，同理array[0] + 1就是元素array[0][1]的地址…所以有：</p>\n<pre><code class=\"prism language-c++\">a[i]+j = &amp;a[i][j]\n</code></pre>\n<p>由上两式得：</p>\n<pre><code class=\"prism language-c++\">&amp;a[i][0] + j = &amp;a[i][j]\n</code></pre>\n<p>又由于a[i]和*(a+1)等价，即</p>\n<pre><code class=\"prism language-c++\">a[i] = *(a+i)\n</code></pre>\n<p>则对于二维数组有：</p>\n<pre><code class=\"prism language-c++\">*(a+i)+j == &amp;a[i][j]\n</code></pre>\n<p>注意上式返回的是地址，与以下有所差别，下式表示的是元素的值</p>\n<pre><code>*(a[i]+j)  ==  *(*(a+i)+j)  ==  a[i][j]\n</code></pre>\n<h4><a id=\"3_173\"></a>3、二维数组的首地址和数组名：</h4>\n<p>对于一维数组，数组名表示的是数组第一个元素的地址，对于二维数组，其实数组名也代表了首元素的地址。但是对于以上的数组array而言,数组名array代表的不是元素array[0][0]的地址。上面提到过二维数组也是通过一维数组嵌套形成的，即二维数组就是一维数组。二维数组array[4][5]是有4个元素array[0]、array[1]、array[2]、array[3]的一维数组，所以二维数组的首元素应该是array[0]，而不是array[0][0]。所以有：</p>\n<pre><code class=\"prism language-c++\">a == &amp;a[0]\n</code></pre>\n<p>而a[0]又是a[0][0]的地址，即：</p>\n<pre><code class=\"prism language-c++\">a[0] == &amp;a[0][0]\n</code></pre>\n<p>所以二维数组a和元素a[0][0]的关系为：</p>\n<pre><code class=\"prism language-c++\">a = &amp;(&amp;(a[0][0]))\n</code></pre>\n<p>即二维数组名a是地址的地址，必须两次取值才可以取出数组中存储的数据，对于二维数组a[m][n],数组名a的类型为int(*)[n]，所以如果定义一个指针变量p（int*p），并希望这个指针变量指向二维数组a，那么不能把a赋给p，因为他们的类型不一样。①要么把 a[0] 赋给 p，要么把 *a 赋给 p。因为 a==&amp;(&amp;a[0][0])，所以*a==*(&amp;(&amp;a[0][0]))==&amp;a[0][0]。<br/> ②另外还可以把指针变量 p 定义成 int(*)[n] 型，这时就可以把 a 赋给 p，这种方法也经常使用。</p>\n<h5><a id=\"_a0__p_a__p_198\"></a>把 a[0] 赋给 p或者把 *a 赋给 p的情况</h5>\n<pre><code class=\"prism language-c++\">int* p = a[0];\nint* p = *a;\nint* p = &amp;a[0][0];\n</code></pre>\n<p>对于二维数组a[m][n]，如果将&amp;a[0][0]赋给p的话，那么通过指针p访问二维数组元素的公式为：</p>\n<pre><code class=\"prism language-c++\">p + i*n + j == &amp;a[i][j];\n</code></pre>\n<h5><a id=\"p_214\"></a>把二维数组名直接赋给指针p的情况</h5>\n<p>如果将二维数组名 a直接赋给指针变量 p，即把指针变量 p 定义成 int(*)[n] 型，则：</p>\n<pre><code class=\"prism language-c++\">p == a\n</code></pre>\n<p>那么此时用p指向元素a[0][0]是以行为单位进行访问，数组名a代表第一个元素a[0]的地址，则a+1就代表a[1]的地址，即a+1==&amp;a[1]，则</p>\n<pre><code class=\"prism language-c++\">a+i = &amp;a[i]\n</code></pre>\n<p>于是就有</p>\n<pre><code class=\"prism language-c++\">p+i = &amp;a[i]\n</code></pre>\n<p>对上式两端做\"*\"运算可得：</p>\n<pre><code class=\"prism language-c++\">*(p+i) == a[i]\n</code></pre>\n<p>进一步(两端同时加上j行)可得：</p>\n<pre><code class=\"prism language-c++\">*(p+i) + j == &amp;a[i][j]\n</code></pre>\n<p><strong>注意：数组指针应区别于指针数组</strong></p>\n<p><strong>指针数组</strong>实际上是一个数组，数组的每个元素存放的是一个指针类型的元素。例如：</p>\n<pre><code class=\"prism language-c++\">int * arr[7]  //[]的优先级比*高，说明arr是一个数组，而int*是数组里面的内容\n\t\t\t  //也就是arr是一个含有7个int*的数组\n</code></pre>\n<p>其结构形式如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ba578364070e4fe2bd58f4c133855d23.png\"/></p>\n<p><strong>数组指针</strong>实际上是一个指针，该指针指向一个数组。例如：</p>\n<pre><code class=\"prism language-c++\">int (*arr)[7]  //由于[]的优先级比*高，因此在写数组指针的时候必须用括号将*arr括起来\n    \t\t   //这里arr先和*结合，表明arr是一个指针变量，也就是arr指向一个大小为7个整形的数组\n</code></pre>\n<p>可编程验证如下：两者输出的结果完全一致。</p>\n<pre><code class=\"prism language-c++\">#include &lt;stdio.h&gt;\nint main()\t\n{\t\n    int a[3][4] = { 11, 12, 13, 14, 21, 22, 23, 24, 31, 32, 33, 34 };\n\tint(*p)[4] = a;  //把二维数组名直接赋给指针p，记住这种定义格式\n\tfor (int i = 0; i &lt; 3; ++i)\n\t{\n\t\tfor (int j = 0; j &lt; 4; ++j)\n\t\t{\n\t\t\tprintf(\"%-2d\\x20\", *(*(p + i) + j));  \n\t\t\t//p+i表示a[i]的地址\n\t\t\t//%-2d中, '-'表示左对齐(无'-'默认为右对齐)；2表示这个元素输出时占两个空格的空间\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\tprintf(\"\\n\");\n\n\tint*p1 = *a;\t //把a[0]或者*a赋给指针p1\n\tfor (int i = 0; i &lt; 3; ++i)\n\t{\n\t\tfor (int j = 0; j &lt; 4; ++j)\n\t\t{\n\t\t\tprintf(\"%-2d\\x20\", *(p1+ i*4 + j));\n\t\t\t//p+i表示a[i]的地址\n            \n\t\t\t//%-2d中, '-'表示左对齐(无'-'默认为右对齐)；2表示这个元素输出时占两个空格的空间\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n</code></pre>\n<h4><a id=\"_304\"></a>补充:(字符串)</h4>\n<p>字符串是存储在内存的连续字节中的一系列字符。之所以放在这里是因为存储在连续字节中的一系列字符意味着可以将字符存储在char数组中</p>\n<p>1、C风格字符串（char数组）</p>\n<pre><code class=\"prism language-c++\">char cat[9] = {'m', 'i', 'n', ' ', 'a', 'p', 'p', 'l', 'e'};  //not a string\nchar cats[10] = {'m', 'i', 'n',' ', 'a', 'p', 'p', 'l', 'e', '\\0'}; //a string\n</code></pre>\n<p>这两个数组都是char数组，但是只有第二个数组是字符串，C-风格字符串具有一种特殊的性质，以空字符(null character)结尾，即\\0，其ASCII码为0。用来标记字符串的结尾。</p>\n<p>以上示例中，将数组初始化为字符串的工作特别冗长，还使用了大量的单引号。为了简化以上数组初始化为字符串，可以用以下方法，用引号括起的字符串隐式地包括结尾的空字符。</p>\n<pre><code class=\"prism language-c++\">char cats[10] = \"min apple\"；   // \\0被默认添加\nchar fish[] = \"Bubbles\";  \t   // 让编译器自动计数\n</code></pre>\n<p>补充：拼接字符串常量，</p>\n<p>2、string类型</p>\n<pre><code class=\"prism language-c++\">string str1 = \"this is an example!\"; //initial string\nsrting str2；\t\t\t//create an empty string object;\nstr2 = str1;\t\t\t//allowed， object assignment ok\nstring str3 = str1 + str2; //allowed  ,add string\n</code></pre>\n<h2><a id=\"_337\"></a>二、动态数组</h2>\n<p><strong>动态数组：<strong>运行时在</strong>堆</strong>上分配一定的存储空间，另外在运行时还可以改变其大小。虽然在栈上分配空间效率较高，但是栈空间有限，对于大型数据应使用new和delete在堆区分配空间。另外在很多情况下预编译过程阶段数组的长度是不能预先知道的，必须在程序运行的过程中动态给出。</p>\n<h3><a id=\"_341\"></a><strong>一维数组</strong></h3>\n<p>1、使用new创建动态数组</p>\n<pre><code class=\"prism language-c++\">int * parray = new int[10];    // get a block of 10 ints\n</code></pre>\n<p>new运算符返回第一个元素的地址，以上示例中返回的第一个元素的地址被赋给指针parray。当程序使用完new分配的内存块时，需要使用delete来使用它们：</p>\n<pre><code class=\"prism language-c++\">delete [] parray;    \t\t//free a dynamic array\n</code></pre>\n<p>方括号告诉程序，应释放掉整个数组，而不仅仅是指针指向的元素，注意delete只是释放指针指向的存在，但不会删除指针本身，例如可以将parray重新指向另一个新分配的内存块。上述parray是指向一个int（数组的第一个元素）的指针。</p>\n<p>2、使用动态数组</p>\n<p>创建了动态数组之后，访问数组中的元素的话，对于第一个元素没有问题，因为parray指向数组中的第一个元素，因此*parray是第一个元素的值。这样还有9个元素，可以访问的方式为：只要把指针当作数组名使用即可：例如parray[0]表示第一个元素，parray[1]表示第二个元素…例如以下程序:</p>\n<pre><code class=\"prism language-c++\">int main()\n{\n\tusing namespace std;\n    double *p = new double[3];    //space for 3 doubles\n    p[0] = 1.1;\n    p[1] = 5.5;\n    p[2] = 7.7;\n    cout &lt;&lt; \"p[1] is \" &lt;&lt; p[1] &lt;&lt; endl;\n    p = p + 1; //increment the pointer (ok for the pointer， wrong for the array name.)\n    cout &lt;&lt; \"now p[0] is \" &lt;&lt; p[0] &lt;&lt; \" and \";\n    cout &lt;&lt; \"p[1] is \" &lt;&lt; p[1] &lt;&lt; endl;\n    p = p - 1;\t\t// point back to begging\n    delete [] p;\t// free the memory\n    return 0;\n}\n</code></pre>\n<p>程序的输出结果为：</p>\n<pre><code>p[1] is 5.5\nnow p[0] is 5.5 and p[1] is 7.7\n</code></pre>\n<p>由以上可知，p+1后指针将指向下一个元素的地址，注意在delete之前p-1以便给delete提供正确的地址。</p>\n<p>另外注意new和delete一定搭配使用，否则会造成内存泄露；还应注意野指针的问题，例如：</p>\n<pre><code class=\"prism language-c++\">int* p = new int;  //表示在堆区分配了一块int型的空间，但是指针p在栈区\np++;  //原来指向int的指针没有了，但是new int还在，形成了内存泄漏，野指针。\n</code></pre>\n<p>最后要说明一个问题，在静态数组中如下定义是错误的，因为在定义数组时，必须明确给出数组的大小，要不然编译不通过。</p>\n<pre><code class=\"prism language-c++\">int i=5;\nint Array[i]; //错误 因为在编译阶段，编译器并不知道 i 的值是多少\n</code></pre>\n<p>就是基于以上，在很多预编译阶段，数组的长度是不能预先知道的，必须在程序运行时动态地给出。所以用new动态定义数组，这样下面的语句是正确的：</p>\n<pre><code class=\"prism language-c++\">int size = 77;\nint *p = new int[size];\n</code></pre>\n<h3><a id=\"_415\"></a><strong>二维数组</strong></h3>\n<h4><a id=\"1int_p_n_417\"></a>1.使用形如int (*p) [n]指针</h4>\n<pre><code class=\"prism language-c++\">type (*p)[N] = new type[][N]\n</code></pre>\n<p>其中type是某种数据类型，N是二维数组的列数。采用这种格式，<strong>列数必须指出</strong>，而行数无需指定。在这里指针p的类型是type*[N]，即是指向一个有N列元素数组的指针。</p>\n<p>同样讨论该二维动态数组，对于以下的语句是不能通过编译的：</p>\n<pre><code class=\"prism language-c++\">int row=50,col=50;\nint (*p)[col]=new int [row][col];\n</code></pre>\n<p>这是因为，首先new int [row][col]是在动态生成数组时确定的，所以后面的没有问题。但是前面的int (*p)[col]，这是一个定义语句，定义语句要先经过编译器进行编译，当编译器编译到此时发现col不是常数，因此不能通过编译。而之所以编译器认为col不是常数，是因为编译阶段，编译器起的作用是查语法错误，和预分配空间，它并不执行程序，因此，没有执行那个赋值语句（只是对这个语句检查错误，和分配空间），因此编译阶段，它将认为col是个变量。所以上面的二维数组定义是错误的， 它不能通过编译。可以修改成：</p>\n<pre><code class=\"prism language-c++\">int row = 50；\nint (*p)[50]=new int [row][50]; //这样就可以编译通过了\n</code></pre>\n<p>由以上可得知这种动态分配数组，仅对一维数组空间是真正动态分配的。那么在预编译阶段不知道数组的列数时可以通过一维是真正的动态分配进行，如下所示使用int **p。</p>\n<h4><a id=\"2int_p_443\"></a>2.使用形如int **p二维动态数组指针</h4>\n<p>例如：</p>\n<pre><code class=\"prism language-c++\">int **p;\n</code></pre>\n<p>注意与以上提到的二维静态数组指针int(*p)[n]的区别。int** a;表示一个内存空间，这个空间用来存放一个指针，这个指针指向一个存放指针的空间，并且指向的这个空间中的指针，指向一个整数； int (*p)[10];表示一个内存空间，这个空间用来存放一个指针，这个指针指向一个长度为10、类型为int的数组；和int** a的区别在于，++、+=1之后的结果不一样，其他用法基本相同。<br/> 补充： int (*a)(int);表示一个内存空间，这个空间用来存放一个指针，这个指针指向一个函数，这个函数有一个类型为int的参数，并且函数的返回类型也是int。</p>\n<p>int **p的使用如下：</p>\n<pre><code class=\"prism language-c++\">m = 5\nn = 7;\nint **p = new int*[n];\nfor(int i = 0; i &lt; a; i++)\n{\n    p[i] = new int[m];\n}\n\n//相应的delete方法为：\nfor(int i = 0; i&lt; n; i++)\n{\n    delete [] p[i];  // 要在指针前加[],否则就只释放p[i]所指的第一个单元所占的空间\n}\ndelete [] p;\t//最后还要释放掉开辟的指针数组\n</code></pre>\n<p>最后在C++中也封装了vector以及array等类，可以使用这些类来定义数组。</p>\n<p>例如：</p>\n<pre><code class=\"prism language-c++\">vector&lt;vector&lt;int&gt; &gt; array;//注意后面&gt; &gt;中间的空格\n</code></pre>\n<p>例如：</p>\n<pre><code class=\"prism language-c++\">#include&lt;vector&gt;\nvector&lt;int&gt; a[n];\nfor(int i = 0;i&lt;n;i++)\n    a[i].resize(m);   //m、n为二维数组的行和列数\n</code></pre>\n<p>参考：</p>\n<p>《C++ Primer Plus》</p>\n<p>http://c.biancheng.net/view/227.html</p>\n<p>https://blog.csdn.net/KYJL888/article/details/77846122</p>\n<p>https://blog.csdn.net/u014546553/article/details/53644898</p>\n<p>https://www.cnblogs.com/aminxu/p/4685962.html</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}