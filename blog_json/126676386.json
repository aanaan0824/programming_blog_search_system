{"blogid": "126676386", "writerAge": "码龄6年", "writerBlogNum": "108", "writerCollect": "123", "writerComment": "5", "writerFan": "26", "writerGrade": "5级", "writerIntegral": "1829", "writerName": "猴猴猪猪", "writerProfileAdress": "writer_image\\profile_126676386.jpg", "writerRankTotal": "11590", "writerRankWeekly": "95950", "writerThumb": "22", "writerVisitNum": "89196", "blog_read_count": "125", "blog_time": "已于 2022-09-03 14:04:29 修改", "blog_title": "流畅的Python读书笔记-第九章-符合Python风格的对象", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>得益于python数据类型，自定义类型的行为可以像内置类型那样自然。实现如此自然的行为，靠的不是继承，而是<font color=\"red\">鸭子类型</font>：我们只需要按照预定行为实现对象的方法即可。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\45064a58524c42e9a05eb46c4e1193f3.jpeg\"/>Python中 <font color=\"red\"> classmethod VS staticmethod </font><br/> <img alt=\"在这里插入图片描述\" src=\"image\\51d70a5ad93e4670a695c2644216b47d.jpeg\"/><br/> staticmethod不是特别有用</p>\n<p><font color=\"red\">格式化显示</font><br/> 内置的<font color=\"red\">format函数</font>和<font color=\"red\">str.format()方法</font>把各个类型的格式化方式委托给相应的.<strong>format</strong>(format_spec)方法。<br/> 格式规范微语言</p>\n<p><font color=\"red\">只读属性and可散列</font><br/> 为了把一个实例变成可散列的，需要实现__hash__方法和__eq__方法<br/> 想要创建可散列的类型，不一定要实现特性，也不一定要保护实例属性。只需要正确地实现__hash__和__eq__方法即可，但是实例的散列值绝不应该变化，因此下面只是借机提到了可读属性。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b9e87864770044e4aa48f4318b183a27.jpeg\"/><br/> <font color=\"red\">Python的私有属性和受保护的属性</font><br/> <img alt=\"在这里插入图片描述\" src=\"image\\4ab774b3371f48aebbc61980b506f1b3.jpeg\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\297a3a3491074c2c949a847834c19c9f.jpeg\"/>Python中各个实例中名为__dict__的字典里存储实例属性<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f0ce23c2fc684105b68140f148f6ab78.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\6f2d5bf4ee12442aa18170a69af4f5a8.jpeg\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\91b57e1da92d4d81a38ccafeea2f29a5.jpeg\"/><br/> <font color=\"red\"><strong>要构建符合Python风格的对象，就要观察真正的Python对象行为。</strong></font></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}