{"blogid": "125566382", "writerAge": "码龄96天", "writerBlogNum": "12", "writerCollect": "99", "writerComment": "35", "writerFan": "914", "writerGrade": "2级", "writerIntegral": "230", "writerName": "大话视觉", "writerProfileAdress": "writer_image\\profile_125566382.jpg", "writerRankTotal": "62634", "writerRankWeekly": "11808", "writerThumb": "78", "writerVisitNum": "11349", "blog_read_count": "1750", "blog_time": "已于 2022-07-12 10:18:32 修改", "blog_title": "【VisionMaster SDK开发】第一讲 环境配置篇（C#/C++）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_1\">引言</a></li><li><a href=\"#_VisionMaster_4\">第一章 VisionMaster下载与安装</a></li><li><ul><li><a href=\"#11_VisionMaster_5\">1.1 VisionMaster下载与安装</a></li></ul>\n</li><li><a href=\"#_IDE_16\">第二章 集成开发环境（IDE）下载与安装</a></li><li><ul><li><a href=\"#21_Visual_Studio_17\">2.1 Visual Studio下载</a></li><li><a href=\"#22_Qt_Creator_22\">2.2 Qt Creator下载</a></li></ul>\n</li><li><a href=\"#_VM_SDK_28\">第三章 VM SDK开发环境配置</a></li><li><ul><li><a href=\"#31_WinFormC_29\">3.1 WinForm环境配置（C#）</a></li><li><a href=\"#32_WPFC_79\">3.2 WPF环境配置（C#）</a></li><li><a href=\"#33_MFCC_99\">3.3 MFC环境配置（C++）</a></li><li><a href=\"#34_QtC_150\">3.4 Qt环境配置(C++)</a></li></ul>\n</li><li><a href=\"#_195\">总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>引言</h1>\n<pre><code>    VM SDK开发又称为VM二次开发，自VisionMaster4.0问世之后，VM二次开发逐渐成熟。通过这种开发方式，视觉算法的内部逻辑由VM平台完成，开发者仅需要通过很少的代码，就能完成一个视觉软件的开发。\n    VM二次开发常用于机器视觉应用中对界面、日志、产品管理、通讯或数据库等有特定需求的场合。相比于直接使用VM软件，VM二次开发更加灵活；相比于使用算子包开发，VM二次开发具有开发简单、开发效率高等优势，故成为视觉开发人员的首选开发方式。\n</code></pre>\n<h1><a id=\"_VisionMaster_4\"></a>第一章 VisionMaster下载与安装</h1>\n<h2><a id=\"11_VisionMaster_5\"></a>1.1 VisionMaster下载与安装</h2>\n<p>首先登录<a href=\"https://www.hikrobotics.com/cn/machinevision/service/download?module=0\">海康机器人官网</a> 选择机器视觉，然后选择算法平台<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a1bcbc2db55d48b0b414c22a82814149.png\"/><br/> 点击软件下载<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1d122be230e445719c08338681ade5fd.png\"/><br/> 选择V4.2.0下载（此处为基础安装包，如需使用深度学习还需要下载深度学习包）<br/> ​​<img alt=\"在这里插入图片描述\" src=\"image\\d56a7986a0fc4e599f5531e2c9642f29.jpeg\"/><br/> 安装VisionMaster，默认是硬件加密狗加密<br/> <img alt=\"在这里插入图片描述\" src=\"image\\89c0d67b5d9345b19efb604c662da55b.png\"/><br/> 安装完成，测试可正常打开使用。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9b8ab5c81c3b4e728a6e52d8d2a79d38.png\"/></p>\n<h1><a id=\"_IDE_16\"></a>第二章 集成开发环境（IDE）下载与安装</h1>\n<h2><a id=\"21_Visual_Studio_17\"></a>2.1 Visual Studio下载</h2>\n<p>C#（WinForm、WPF），C++(MFC)开发需要下载Visual Studio 2017，前往官网Visual Studio: 面向软件开发人员和 Teams 的 IDE 和代码编辑器 选择2015以上版本（一般推荐VS2017）进行下载。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\948fdf6f91f7440dbbdd049efcaef1d1.png\"/><br/> 打开下载器后出现以下界面，选择.Net桌面开发相关以及MFC相关的安装包下载并安装<br/> <img alt=\"在这里插入图片描述\" src=\"image\\11c1b85cbcbd4dde9fb1cf0a4516c844.png\"/></p>\n<h2><a id=\"22_Qt_Creator_22\"></a>2.2 Qt Creator下载</h2>\n<p>C++（Qt）开发需要下载qtcreator 5.14.2，前往官网Index of /archive/qt 选择qtcreator5.9及以上版本（这里以5.14.2为例）进行下载。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\52081b25b3ab45e98b04972ba0b04a90.png\"/><br/> 解压缩后进行安装。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5ccceb6b839c49979b9f5be73de9e920.png\"/></p>\n<h1><a id=\"_VM_SDK_28\"></a>第三章 VM SDK开发环境配置</h1>\n<h2><a id=\"31_WinFormC_29\"></a>3.1 WinForm环境配置（C#）</h2>\n<p>3.1.1 打开VS2017，新建Windows窗体应用（.Net Framework），框架需要选择.Net Framework4.6.1及以上（这里以.Net Framework4.6.1为例），点击确定。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ed8cfc85842e45ec8422ddbc1a320279.png\"/><br/> 点击项目-&gt;VMTest属性<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f7121ad5dc3f4fffa9a40a945a60a6ed.png\"/><code>生成页面，去掉勾选【首选32位】</code>。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ff9a6eff60b14899abda570771a6f49f.png\"/><br/> 生成-&gt;重新生成解决方案。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9e18b590c23c4ff499bbe66b9e0217ee.png\"/><br/> 3.1.2 引用VM SDK开发中需要使用的控件，首先在工具箱的任意选项卡上右键-&gt;选择项<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ebf4618a4a804d759380ff7cf5cc39ca.png\"/><br/> 点击浏览<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fd11f728f69a4a2794ba3a112b7217a4.png\"/><br/> 找到VM安装路径D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\ComControls\\Assembly下控件库VMControls.Winform.Release.dll，点击打开。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\323f5d70a1204c2eb5a59534526bc923.png\"/><br/> 在工具箱中搜索vm，正常会出现全部的VM控件。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d89dbf90836447ebb21b8af54550729e.png\"/><br/> 3.1.3 下面需要将VM SDK开发中的需要用到的dll进行引用，引用方式有两种：<br/> 1） 第一种可以按照需要使用的库进行手动引用，首先在上面添加的控件中拖拽VmRenderControl控件到界面上。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\62cea9187e3b46c18c81f46ac475f516.png\"/><br/> 此时点开解决方案资源管理器的引用中可以发现VM SDK开发需要使用的基础dll都已经被引用完毕。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\63038080928b473fa45ee7f487b1aa3d.png\"/><br/> 右键每一个被引用的VM SDK基础dll，点击属性，将复制本地修改为false<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1bf77b1bd65c4e85b825549b5e6ba31f.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\a85bb8230aff43b0bf925c89dc7144f5.png\"/><br/> 之后右键引用-&gt;添加引用，点击程序集，搜索并勾选需要使用的VM模块的dll（以圆查找模块为例），点击添加。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7322aaee9ece41509aaf2c904107ec73.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e86dcafa99d545b380225c41ef444096.png\"/><br/> 右键添加的dll，选择属性将复制本地改为false。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6ebc2e0f2a724cc1b753e2ab469d0051.png\"/><br/> 至此第一种手动添加的方法完成环境配置。</p>\n<p>2） 第二种可以使用引用添加工具进行引用（操作更简单，推荐使用这种方法）<br/> 在VM的安装路径D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\ComControls\\Tool下找到引用添加工具ImportRef.exe。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6c41bd8185714ca6bf5939a08b5ff042.png\"/><br/> 双击打开引用添加工具选择项目所在的路径，勾选需要引用的VM模块的dll，点击右向箭头，点击确定，进行引用。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8d6dbeff09364cfe91cddc0da16e636f.png\"/><br/> 此时再打开之前创建的项目，在解决方案管理器下方的引用中，可以看见所有选中模块的dll都被添加进来了。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fb767546286b4289b614e32ed0f9fa5d.png\"/><br/> 完成环境配置，可以看见使用引用工具会大大方便VM SDK开发的环境配置。写几句简单代码，验证环境配置是否OK。</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token function\">Form1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tVmSolution<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\zhouyigen\\\\Desktop\\\\Demo\\\\test.sol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">VmProcedure</span> procedure <span class=\"token operator\">=</span> VmSolution<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">[</span><span class=\"token string\">\"流程1\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">VmProcedure</span><span class=\"token punctuation\">;</span>          \n\tvmRenderControl1<span class=\"token punctuation\">.</span>ModuleSource <span class=\"token operator\">=</span> procedure<span class=\"token punctuation\">;</span>\n\tprocedure<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行效果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5ee5eb7cddd14c2789c464f65f42e66a.png\"/></p>\n<h2><a id=\"32_WPFC_79\"></a>3.2 WPF环境配置（C#）</h2>\n<p>WPF的环境配置与WinForm大体相同，在新建WPF应用（.NET Framework）之后仅在添加控件处稍有不同，由于其余部分与WinForm完全相同，下面仅介绍不同之处。<br/> 3.2.1 新建WPF应用（.NET Framework），其余操作与WinForm完全一致，参考3.1.1。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\996944569f9d497e9ecfc66bccb57203.png\"/><br/> 3.2.2 任一选项卡右键-&gt;选择项-&gt;浏览找到找到VM SDK路径D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\ComControls\\Assembly下控件库VMControls.WPF.Release.dll，点击打开。其余操作与winform完全一致，参考3.1.2。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\71fd20ff1fd84b87a619d471083308a2.png\"/><br/> 3.2.3 与3.1.3完全相同。<br/> WPF的VM SDK开发环境配置完毕，简单写几句代码，验证环境配置是否OK</p>\n<pre><code class=\"prism language-csharp\">  <span class=\"token keyword\">public</span> <span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n\t  <span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t  VmSolution<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\zhouyigen\\\\Desktop\\\\Demo\\\\test.sol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token class-name\">VmProcedure</span> procedure <span class=\"token operator\">=</span> VmSolution<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">[</span><span class=\"token string\">\"流程1\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">VmProcedure</span><span class=\"token punctuation\">;</span>\n\t  vmRenderControl<span class=\"token punctuation\">.</span>ModuleSource <span class=\"token operator\">=</span> procedure<span class=\"token punctuation\">;</span>\n\t  procedure<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行效果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dba71e31dedf4a9bbd30a3185fe61855.png\"/></p>\n<h2><a id=\"33_MFCC_99\"></a>3.3 MFC环境配置（C++）</h2>\n<p>3.3.1 打开VS2017，新建MFC应用，点击确定。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e188f74c75ea46cf9c880006e4692ae3.png\"/><br/> 应用程序类型选择基于对话框，全部点击下一步。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c32fbde4ffcf48e1adcd276fbd0a9bea.png\"/><br/> 生成的类选择Dlg，点击完成。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7e965adb1ab344ec90ab9ac7a62baf08.png\"/><br/> 将程序改为x64(VM4.X版本的模板匹配以及深度学习模块仅支持64位)<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2b082eef63634d59ad347766f0e97a21.png\"/><br/> 3.3.2 添加相应的头文件和库文件。<br/> 点击项目-&gt;属性<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7ffab1457d934255ad50c59d18da96a7.png\"/><br/> 在属性页中点击VC++目录-&gt;包含目录-&gt;编辑-&gt;新行，添加VM安装路径下D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\Includes和D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\ComControls\\Includes\\VS2017两个文件夹。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ef89a3514f094e3582d72b8bdb41a37c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\be586b17bd1442a384536c545118d54e.png\"/><br/> 点击VC++目录-&gt;库目录-&gt;编辑-&gt;新行，添加VM安装路径下D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\Libraries\\win64\\C和D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\ComControls\\Libraries\\win64两个文件夹。<br/> <img alt=\"\" src=\"image\\3845ab8bc96e450c9de2b63a2c4b2d81.png\"/><br/> 添加完包含目录和库目录之后VC++目录如下所示。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\22eff863944344b48f80973d7f9473a9.png\"/>在属性页中点击链接器-&gt;输入-&gt;附加依赖项-&gt;编辑，添加依赖iMVS-6000PlatformSDK.lib（该依赖库存在与VM安装路径下的库目录下），点击确定。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\210d6d7cef344a1f8b0f776e5a8c8327.png\"/><br/> 3.3.3 将VM安装路径下的控件库拷贝到MFC工程的输出目录中。控件库路径为D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\ComControls\\Includes\\VS2017<br/> <img alt=\"在这里插入图片描述\" src=\"image\\95cbb72ea10c4bd9893e093c099c2b75.png\"/><br/> 拷贝完成<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5b6be912776e46e7b204cff1e4955a59.png\"/><br/> 在MFC工程的解决方案资源管理器中，将控件库中的头文件和源文件分别添加到工程中，右键头/源文件文件夹-&gt;添加-&gt;现有项。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c2077a81364b40049631197ff77c90d5.png\"/><br/> 添加完成。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8c5f6f6f566147fbafa1ee1cccf19a08.png\"/><br/> MFC中环境配置完成，最后写几句简单的代码验证环境是否OK。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// TODO: 在此添加额外的初始化代码</span>\n\n\tCString strReMsg <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> pObjPointer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tp_VmSol <span class=\"token operator\">=</span> <span class=\"token function\">CreateSolutionInstance</span><span class=\"token punctuation\">(</span>pObjPointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpObjPointer <span class=\"token operator\">=</span> vmRenderControl<span class=\"token punctuation\">.</span><span class=\"token function\">GetObjectPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp_VmSol <span class=\"token operator\">=</span> <span class=\"token function\">LoadSolution</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\zhouyigen\\\\Desktop\\\\test.sol\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp_VmPro <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IVmProcedure<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p_VmSol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"流程1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tvmRenderControl<span class=\"token punctuation\">.</span><span class=\"token function\">SetParamsInfo</span><span class=\"token punctuation\">(</span>p_VmPro<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetControlInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp_VmPro<span class=\"token operator\">-&gt;</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>CVmException ex<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tstrReMsg<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">GetErrorCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstrReMsg <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> strReMsg <span class=\"token operator\">+</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" == LoadSolutionFromFile()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行效果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e322beefdc9b4b8d9c4d3ebee8656979.png\"/></p>\n<h2><a id=\"34_QtC_150\"></a>3.4 Qt环境配置(C++)</h2>\n<p>3.4.1 打开Qt 5.14.2，新建Qt Widgets应用程序，点击Choose。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\687d50ae9b724635844faf1a4da79653.png\"/><br/> 自定义路径和项目名后，全部选择下一步，直到完成。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f0fd6a48f54d4fa0aa136c4324867924.png\"/><br/> 3.4.2 在Qt的配置文件VMTest3.pro(项目名.pro)中增加axcontainer。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4b6cc957aca34df98f129548fe9e0390.png\"/><br/> 3.4.3 添加相应的头文件和库文件<br/> 在VMTest3.pro(项目名.pro)下方右键空白处-&gt;添加库<br/> <img alt=\"在这里插入图片描述\" src=\"image\\336f8198eaf548bab8af32499a16628d.png\"/><br/> 选择外部库-&gt;下一步<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f1bab075d04f4db5aa65b065c22d32a1.png\"/><br/> 点击库文件后的浏览，添加VM安装路径下的库文件D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\Libraries\\win64\\C\\iMVS-6000PlatformSDK.lib，点击包含路径后的浏览，添加VM安装路径下的头文件文件夹D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\Includes，在平台中选择Windows，链接：动态中选择动态，点击下一步。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9923136036444b8593798ff729ed0704.png\"/><br/> 点击完成<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b40649b27e804988b371cbd4e6d261e8.png\"/><br/> 在配置文件VMTest3.pro(项目名.pro)中最后一行可以看见如下配置代码。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5a81cb9e8254443496cefd175bf13bae.png\"/><br/> 3.4.4 添加控件库<br/> 将VM安装路径下的控件库拷贝到Qt Widgets工程的输出目录中。控件库路径为D:\\VM4.2\\VisionMaster4.2.0\\Development\\V4.x\\ComControls\\Includes\\QT<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5c289694bad447ac8e3efd2808c569c8.png\"/><br/> 拷贝完成<br/> <img alt=\"在这里插入图片描述\" src=\"image\\772b65af550b4484a41db6a1aff1a18c.png\"/><br/> 将控件库的头文件和源文件分别添加到工程中，右键Headers/Sources-&gt;添加现有文件<br/> <img alt=\"在这里插入图片描述\" src=\"image\\751c92ceedc149c6b49aee726f4c6bb9.png\"/><br/> 添加完成。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e6615e3faf6e4d278dbd956293d9e880.png\"/><br/> Qt中环境配置完成，最后写几句简单的代码验证环境是否OK。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">,</span> <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    ui<span class=\"token operator\">-&gt;</span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p_VmSol<span class=\"token operator\">=</span><span class=\"token function\">CreateSolutionInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ui<span class=\"token operator\">-&gt;</span>axWidget<span class=\"token operator\">-&gt;</span><span class=\"token function\">dynamicCall</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetObjectPointer()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LoadSolution</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\zhouyigen\\\\Desktop\\\\Demo\\\\test.sol\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p_VmPro<span class=\"token operator\">=</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IVmProcedure<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p_VmSol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"流程1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ui<span class=\"token operator\">-&gt;</span>axWidget<span class=\"token operator\">-&gt;</span><span class=\"token function\">dynamicCall</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SetParamsInfo(qlonglong)\"</span><span class=\"token punctuation\">,</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>qlonglong<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>p_VmPro<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetControlInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p_VmPro<span class=\"token operator\">-&gt;</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行效果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\faff9142417f4f7581a0b54ee59d2491.png\"/><br/> 至此，VM SDK开发的环境配置已经全部介绍完毕。</p>\n<h1><a id=\"_195\"></a>总结</h1>\n<p>在使用VisionMaster4.0进行二次开发时，有一个开发者头疼的问题，即二次开发的环境配置繁琐，往往一个二次开发程序有几百MB，给开发人员带来一些不便。而在VM4.2中上述问题都得到解决，使VM二次开发变得更简单、更灵活。同时VM4.2二次开发运行效率相比于VM4.0有显著提升，并提供更多的接口，给开发者带来了更好的开发与使用体验。VM SDK开发教学视频可以参考海康机器人官网。<br/> <a href=\"https://www.hikrobotics.com/cn/machinevision/service/vcollege/video?module=%E7%AE%97%E6%B3%95%E5%B9%B3%E5%8F%B0\">海康机器人V学院</a></p>\n<p>​</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}