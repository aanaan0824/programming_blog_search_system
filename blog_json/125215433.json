{"blogid": "125215433", "writerAge": "码龄4年", "writerBlogNum": "164", "writerCollect": "4583", "writerComment": "2524", "writerFan": "25516", "writerGrade": "6级", "writerIntegral": "8067", "writerName": "fanstuck", "writerProfileAdress": "writer_image\\profile_125215433.jpg", "writerRankTotal": "1632", "writerRankWeekly": "25", "writerThumb": "2599", "writerVisitNum": "326453", "blog_read_count": "22500", "blog_time": "于 2022-06-10 18:21:38 发布", "blog_title": "Python自动化办公小程序：实现报表自动化和自动发送到目的邮箱", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>项目背景</h1>\n<p>作为数据分析师，我们需要经常制作统计分析图表。但是报表太多的时候往往需要花费我们大部分时间去制作报表。这耽误了我们利用大量的时间去进行数据分析。但是作为数据分析师我们应该尽可能去挖掘表格图表数据背后隐藏关联信息，而不是简单的统计表格制作图表再发送报表。既然报表的工作不可免除，那我们应该如何利用我们所学的技术去更好的处理工作呢？这就需要我们制作一个Python小程序让它自己去实现，这样我们就有更多的时间去做数据分析。我们把让程序自己运行的这个过程称为自动化。</p>\n<hr/>\n<h1><a id=\"pandas_16\"></a>一、报表自动化目的</h1>\n<h2>1.节省时间，提高效率</h2>\n<p>自动化总是能够很好的节省时间，提高我们的工作效率。让我们的程序编程尽可能的降低每个功能实现代码的耦合性，更好的维护代码。这样我们会节省很多时间让我们有空去做更多有价值有意义的工作。</p>\n<h2>2.减少错误</h2>\n<p>编码实现效果正确无误的话是是可以一直沿用的，如果是人为来操作的话反而可能会犯一些错误。交给固定的程序来做更加让人放心，需求变更时仅修改部分代码即可解决问题。</p>\n<h1><a id=\"_19\"></a>二、报表自动化范围</h1>\n<p>首先我们需要根据业务需求来制定我们所需要的报表，并不是每个报表都需要进行自动化的，一些复杂二次开发的指标数据要实现自动化编程的比较复杂的，而且可能会隐藏着各种BUG。所以我们需要对我们工作所要用到的报表的特性进行归纳，以下是我们需要综合考虑的几个方面：</p>\n<h2><a id=\"1_20\"></a>1.频率</h2>\n<p>对于一些业务上经常需要用到的表，这些表我们可能要纳入自动化程序的范围。例如客户信息清单、销售额流量报表、业务流失报表、环比同比报表等。</p>\n<p><img alt=\"\" height=\"396\" src=\"image\\de540832369445b897b0c4a775cda7f8.png\" width=\"823\"/></p>\n<p><img alt=\"\" height=\"570\" src=\"image\\6feb89e494154192bd7dde4dd3dcbeda.png\" width=\"844\"/></p>\n<p> </p>\n<p> </p>\n<p>这些使用频率较高的报表，都很有必要进行自动化。对于那些偶尔需要使用的报表，或者是二次开发指标，需要复制统计的报表，这些报表就没必要实现自动化了。</p>\n<h2><a id=\"2_34\"></a>2.开发时间</h2>\n<p>这就相当于成本和利率一样，若是有些报表自动化实现困难，还超过了我们普通统计分析所需要的时间，就没必要去实现自动化。所以开始自动化工作的时候要衡量一下开发脚本所耗费的时间和人工做表所耗费的时间哪个更短了。当然我会提供一套实现方案，但是仅对一些常用简单的报表。</p>\n<h2>3.流程</h2>\n<p>对于我们报表每个过程和步骤，每个公司都有所不同，我们需要根据业务场景去编码实现各个步骤功能。所以我们制作的流程应该是符合业务逻辑的，制作的程序也应该是符合逻辑的。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\75897bd3998048ac9cb8d0bac3e46e0e.jpeg\"/></p>\n<h1> 三、实现步骤</h1>\n<p>首先我们需要知道我们需要什么指标；在上期数据分析基础文章<a class=\"link-info\" href=\"https://jxnuxwt.blog.csdn.net/article/details/123906176?spm=1001.2014.3001.5502\" title=\"一文速览-数据分析基础以及常规流程\">一文速览-数据分析基础以及常规流程</a>有解释，这里再列出来：</p>\n<ul><li>指标 \n  <ul><li>总体概览指标<br/> 反映某一数据指标的整体大小</li></ul>\n<ul><li>对比性指标 \n    <ul><li>同比<br/> 相邻时间段内某一共同时间点上指标的对比</li></ul>\n<ul><li>环比<br/> 相邻时间段内的指标直接作差</li></ul></li></ul>\n<ul><li>集中趋势指标 \n    <ul><li>平均数/加权平均数</li></ul>\n<ul><li>众数</li></ul>\n<ul><li>中位数</li></ul></li></ul>\n<ul><li>离散程度指标 \n    <ul><li>全距（极差）<br/> 最大界减最小界</li></ul>\n<ul><li>四分位数</li></ul>\n<ul><li>方差</li></ul>\n<ul><li>标准差</li></ul></li></ul>\n<ul><li>相关性指标 \n    <ul><li>r</li></ul></li></ul></li></ul>\n<p><img alt=\"\" height=\"728\" src=\"image\\6c0a32af4bc64dd592414bbe7ef8fe23.png\" width=\"757\"/></p>\n<p>我们拿一个简单的报表来进行模拟实现：</p>\n<h2>第一步：读取数据源文件</h2>\n<p> 首先我们要了解我们的数据是从哪里来的，也就是数据源。我们最终的数据处理都是转化为DataFrame来进行分析的，所以需要对数据源进行转化为DataFrame形式：</p>\n<pre><code class=\"language-python\">import pandas as pd\nimport json\nimport pymysql\nfrom sqlalchemy import create_engine\n\n# 打开数据库连接\nconn = pymysql.connect(host='localhost',\n                       port=3306,\n                       user='root',\n                       passwd='xxxx',\n                       charset = 'utf8'\n                       )\nengine=create_engine('mysql+pymysql://root:xxxx@localhost/mysql?charset=utf8')\n\ndef read_excel(file):\n    df_excel=pd.read_excel(file)\n    return df_excel\ndef read_json(file):\n    with open(file,'r')as json_f:\n        df_json=pd.read_json(json_f)\n        return df_json\ndef read_sql(table):\n    sql_cmd ='SELECT * FROM %s'%table\n    df_sql=pd.read_sql(sql_cmd,engine)\n    return df_sql\ndef read_csv(file):\n    df_csv=pd.read_csv(file)\n    return df_csv</code></pre>\n<p>以上代码均通过测试可以正常使用，但是pandas的read函数针对不同的形式的文件读取，其read函数参数也有不同的含义，需要直接根据表格的形式来调整，想要更详细的完善这一步的可以去看看我的两篇关于read函数的文章：</p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/master_hunter/article/details/124446017?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165482962516781667830482%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=165482962516781667830482&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-124446017-null-null.nonecase&amp;utm_term=read&amp;spm=1018.2226.3001.4450\" title=\"Pandas中read_excel函数参数使用详解+实例代码\">Pandas中read_excel函数参数使用详解+实例代码</a> </p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/master_hunter/article/details/125021765?spm=1001.2014.3001.5501\" title=\"Pandas处理JSON文件read_json()一文详解+代码展示\">Pandas处理JSON文件read_json()一文详解+代码展示</a></p>\n<p>其他read函数将会在文章写完之后后续补上，除了read_sql需要连接数据库之外，其他的都是比较简单的。</p>\n<h2> 第二步：DataFrame计算</h2>\n<p>我们以用户信息为例：</p>\n<p><img alt=\"\" height=\"386\" src=\"image\\c752bea4901245fca67f86578adb578d.png\" width=\"873\"/></p>\n<p>我们需要统计的指标为：</p>\n<blockquote>\n<p>#指标说明</p>\n<p>单表图：</p>\n<p>前十个产品受众最多的地区 </p>\n</blockquote>\n<p> 产品的受众地区：</p>\n<pre><code class=\"language-python\">#将城市空值的一行删除\n    df=df[df['city_num'].notna()]\n    #删除error\n    df=df.drop(df[df['city_num']=='error'].index)\n    #统计\n    df = df.city_num.value_counts()</code></pre>\n<p><img alt=\"\" height=\"345\" src=\"image\\1ab2fd0fef254d959a088e14f7f66bd8.png\" width=\"499\"/> </p>\n<p>我们仅获取前10名的城市就好了，封装为饼图：</p>\n<pre><code class=\"language-python\">def pie_chart(df):\n    #将城市空值的一行删除\n    df=df[df['city_num'].notna()]\n    #删除error\n    df=df.drop(df[df['city_num']=='error'].index)\n    #统计\n    df = df.city_num.value_counts()\n    df.head(10).plot.pie(subplots=True,figsize=(5, 6),autopct='%.2f%%',radius = 1.2,startangle = 250,legend=False)\npie_chart(read_csv('user_info.csv'))</code></pre>\n<p> <img alt=\"\" height=\"472\" src=\"image\\e753d27cd18d47f8a7c8b57e83f95e92.png\" width=\"571\"/></p>\n<p>将图表保存起来：</p>\n<pre><code class=\"language-python\">plt.savefig('fig_cat.png')</code></pre>\n<p>要是你觉得matplotlib的图片不太美观的话，你也可以换成echarts的图片，会更加好看一些：</p>\n<pre><code class=\"language-python\">\npie = Pie()\npie.add(\"\",words)\npie.set_global_opts(title_opts=opts.TitleOpts(title=\"前十地区\"))\n#pie.set_series_opts(label_opts=opts.LabelOpts(user_df))\npie.render_notebook()</code></pre>\n<p><img alt=\"\" height=\"535\" src=\"image\\170607fd5e6841e6a1de827f26f4ab13.png\" width=\"966\"/> </p>\n<p>封装后就可以直接使用了：</p>\n<pre><code class=\"language-python\">def echart_pie(user_df):\n    user_df=user_df[user_df['city_num'].notna()]\n    user_df=user_df.drop(user_df[user_df['city_num']=='error'].index)\n    user_df = user_df.city_num.value_counts()\n    name=user_df.head(10).index.tolist()\n    value=user_df.head(10).values.tolist()\n    words=list(zip(list(name),list(value)))\n    pie = Pie()\n    pie.add(\"\",words)\n    pie.set_global_opts(title_opts=opts.TitleOpts(title=\"前十地区\"))\n    #pie.set_series_opts(label_opts=opts.LabelOpts(user_df))\n    return pie.render_notebook()\nuser_df=read_csv('user_info.csv')\nechart_pie(user_df)</code></pre>\n<p>可以进行保存，可惜不是动图：</p>\n<pre><code class=\"language-python\">from snapshot_selenium import snapshot\nmake_snapshot(snapshot,echart_pie(user_df).render(),\"test.png\")</code></pre>\n<p> 保存为网页的形式就可以自动加载JS进行渲染了：</p>\n<pre><code class=\"language-python\">echart_pie(user_df).render('problem.html')\nos.system('problem.html')</code></pre>\n<p><img alt=\"\" height=\"576\" src=\"image\\70cb731dc4f549f59b419bd698051683.png\" width=\"1035\"/> </p>\n<p> </p>\n<h2>第三步：自动发送邮件</h2>\n<p> 做出来的一系列报表一般都要发给别人看的，对于一些每天需要发送到指定邮箱或者需要发送多封报表的可以使用Python来自动发送邮箱。</p>\n<p>在Python发送邮件主要借助到smtplib和email这个两个模块。</p>\n<p>smtplib：主要用来建立和断开与服务器连接的工作。</p>\n<p>email：主要用来设置一些些与邮件本身相关的内容。</p>\n<p>不同种类的邮箱服务器连接地址不一样，大家根据自己平常使用的邮箱设置相应的服务器进行连接。这里博主用网易邮箱展示：</p>\n<p>首先需要开启POP3/SMTP/IMAP服务：</p>\n<p><img alt=\"\" height=\"269\" src=\"image\\683f9e78f04a446c826c3efe000f970c.png\" width=\"855\"/></p>\n<p>之后便可以根据授权码使用python登入了。</p>\n<p> </p>\n<pre><code class=\"language-python\">import smtplib\nfrom email import encoders\nfrom email.header import Header\nfrom email.utils import parseaddr,formataddr\nfrom email.mime.application import MIMEApplication\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n#发件人邮箱\nasender=\"fanstuck@163.com\"\n#收件人邮箱\nareceiver=\"1079944650@qq.com\"\n#抄送人邮箱\nacc=\"fanstuck@163.com\"\n#邮箱主题\nasubject=\"谢谢关注\"\n#发件人地址\nfrom_addr=\"fanstuck@163.com\"\n#邮箱授权码\npassword=\"####\"\n#邮件设置\nmsg=MIMEMultipart()\nmsg['Subject']=asubject\nmsg['to']=areceiver\nmsg['Cc']=acc\nmsg['from']=\"fanstuck\"\n#邮件正文\nbody=\"你好，欢迎关注fanstuck，您的关注就是我继续创作的动力！\"\nmsg.attach(MIMEText(body,'plain','utf-8'))\n#添加附件\nhtmlFile = 'C:/Users/10799/problem.html'\nhtml = MIMEApplication(open(htmlFile , 'rb').read())\nhtml.add_header('Content-Disposition', 'attachment', filename='html')\n\nmsg.attach(html)\n#设置邮箱服务器地址和接口\nsmtp_server=\"smtp.163.com\"\nserver = smtplib.SMTP(smtp_server,25)\nserver.set_debuglevel(1)\n#登录邮箱\nserver.login(from_addr,password)\n#发生邮箱\nserver.sendmail(from_addr,areceiver.split(',')+acc.split(','),msg.as_string())\n#断开服务器连接\nserver.quit()</code></pre>\n<p>运行测试： </p>\n<p> <img alt=\"\" height=\"608\" src=\"image\\d7cccdf600154f0c92fd8376a0e2c730.png\" width=\"494\"/></p>\n<p>下载文件：</p>\n<p><img alt=\"\" height=\"625\" src=\"image\\8af50d9ae8d84213acbbdda51f24180a.png\" width=\"1174\"/> 完全没问题</p>\n<hr/>\n<h2 id=\"%E7%82%B9%E5%85%B3%E6%B3%A8%EF%BC%8C%E9%98%B2%E8%B5%B0%E4%B8%A2%EF%BC%8C%E5%A6%82%E6%9C%89%E7%BA%B0%E6%BC%8F%E4%B9%8B%E5%A4%84%EF%BC%8C%E8%AF%B7%E7%95%99%E8%A8%80%E6%8C%87%E6%95%99%EF%BC%8C%E9%9D%9E%E5%B8%B8%E6%84%9F%E8%B0%A2\">点关注，防走丢，<strong>如有纰漏之处，请留言指教，非常感谢</strong></h2>\n<p>以上就是本期全部内容。我是fanstuck ，有问题大家随时留言讨论 ，我们下期见</p>\n<h1><a id=\"_45\"></a>参阅：</h1>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/qnxjj626627/article/details/41544977?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-2-41544977-blog-115347325.pc_relevant_vip_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=4\" title=\"浅谈几种常用的报表\">浅谈几种常用的报表</a></p>\n<p><a class=\"link-info\" href=\"https://book.csdn.net/book/25a136b5f8a54a3ab9bbf27a08b0bcc1/chapter/285#bw288\" title=\"Python数据分析\">Python数据分析</a></p>\n</div>\n</div>"}