{"blogid": "122839376", "writerAge": "码龄8年", "writerBlogNum": "826", "writerCollect": "1124", "writerComment": "143", "writerFan": "35042", "writerGrade": "7级", "writerIntegral": "9115", "writerName": "fFee-ops", "writerProfileAdress": "writer_image\\profile_122839376.jpg", "writerRankTotal": "1590", "writerRankWeekly": "416", "writerThumb": "274", "writerVisitNum": "424549", "blog_read_count": "19881", "blog_time": "于 2022-02-09 13:51:25 发布", "blog_title": "Springboot整合kafka", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1_kafka_0\"></a>1. 整合kafka</h1>\n<p>1、引入依赖</p>\n<pre><code class=\"prism language-xml\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>2、设置yml文件</p>\n<pre><code class=\"prism language-yml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> demo\n\n  <span class=\"token key atrule\">kafka</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">bootstrap-servers</span><span class=\"token punctuation\">:</span> 52.82.98.209<span class=\"token punctuation\">:</span><span class=\"token number\">10903</span><span class=\"token punctuation\">,</span>52.82.98.209<span class=\"token punctuation\">:</span><span class=\"token number\">10904</span>\n    <span class=\"token key atrule\">producer</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># producer 生产者</span>\n      <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 重试次数</span>\n      <span class=\"token key atrule\">acks</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)</span>\n      <span class=\"token key atrule\">batch-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16384</span> <span class=\"token comment\"># 批量大小</span>\n      <span class=\"token key atrule\">buffer-memory</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33554432</span> <span class=\"token comment\"># 生产端缓冲区大小</span>\n      <span class=\"token key atrule\">key-serializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringSerializer\n<span class=\"token comment\">#      value-serializer: com.itheima.demo.config.MySerializer</span>\n      <span class=\"token key atrule\">value-serializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringSerializer\n\n    <span class=\"token key atrule\">consumer</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># consumer消费者</span>\n      <span class=\"token key atrule\">group-id</span><span class=\"token punctuation\">:</span> javagroup <span class=\"token comment\"># 默认的消费组ID</span>\n      <span class=\"token key atrule\">enable-auto-commit</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否自动提交offset</span>\n      <span class=\"token key atrule\">auto-commit-interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>  <span class=\"token comment\"># 提交offset延时(接收到消息后多久提交offset)</span>\n\n      <span class=\"token comment\"># earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费</span>\n      <span class=\"token comment\"># latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据</span>\n      <span class=\"token comment\"># none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常</span>\n      <span class=\"token key atrule\">auto-offset-reset</span><span class=\"token punctuation\">:</span> latest\n      <span class=\"token key atrule\">key-deserializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringDeserializer\n<span class=\"token comment\">#      value-deserializer: com.itheima.demo.config.MyDeserializer</span>\n      <span class=\"token key atrule\">value-deserializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringDeserializer\n</code></pre>\n<p>3、启动项目<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9abb720eead949b2af59881a5d6b754c.png\"/></p>\n<h1><a id=\"2__41\"></a>2. 消息发送</h1>\n<h2><a id=\"21__43\"></a>2.1 发送类型</h2>\n<p>KafkaTemplate调用send时<strong>默认采用异步发送</strong>，如果需要同步获取发送结果，调用get方法</p>\n<p><strong>异步发送生产者：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaProducer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">KafkaTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> kafkaTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kafka/test/{msg}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>同步发送生产者：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//测试同步发送与监听</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncProducer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AsyncProducer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">KafkaTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> kafkaTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//同步发送</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kafka/sync/{msg}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListenableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SendResult</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> future <span class=\"token operator\">=</span> kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//注意，可以设置等待时间，超出后，不再等候结果</span>\n        <span class=\"token class-name\">SendResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send result:{}\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getProducerRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>消费者：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaConsumer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaConsumer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//不指定group，默认取yml里配置的</span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> consumerRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> optional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> optional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message:{}\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>那么我们怎么看出来同步发送和异步发送的区别呢？</p>\n<p>①首先在服务器上，将kafka暂停服务。<br/> ②在swagger发送消息</p>\n<ul><li> <p>调同步发送：请求被阻断，一直等待，超时后返回错误<br/> <img alt=\"在这里插入图片描述\" src=\"image\\01c43371635844988990acc395591389.png\"/></p> </li><li> <p>而调异步发送的（默认发送接口），请求立刻返回。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\745b17218c904dc39f0e186ade6f942a.png\"/></p> </li></ul>\n<p>那么，异步发送的消息怎么确认发送情况呢？<br/> <strong>我们使用注册监听</strong><br/> 即新建一个类：<code>KafkaListener.java</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaListener</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaListener</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">KafkaTemplate</span> kafkaTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//配置监听</span>\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setProducerListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> producerRecord<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RecordMetadata</span> recordMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok,message={}\"</span><span class=\"token punctuation\">,</span> producerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> producerRecord<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error!message={}\"</span><span class=\"token punctuation\">,</span> producerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>查看控制台，等待一段时间后，异步发送失败的消息会被回调给注册过的listener<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7ee50387dc1d4f86a4cac70ded022fc3.png\"/><br/> 如果是正常发送异步消息，则会获得该消息。可以看到，在内部类 KafkaListener$1 中，即注册的Listener的消息。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\658e036e9cff4590924c04dd6c8a8e34.png\"/></p>\n<h2><a id=\"22__145\"></a>2.2 序列化</h2>\n<p>消费者使用：<code>KafkaConsumer.java</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaConsumer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaConsumer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//不指定group，默认取yml里配置的</span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> consumerRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> optional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> optional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message:{}\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>1）序列化详解</strong></p>\n<ul><li>前面用到的是Kafka自带的字符串序列化器（<code>org.apache.kafka.common.serialization.StringSerializer</code>）</li><li>除此之外还有：ByteArray、ByteBuffer、Bytes、Double、Integer、Long 等</li><li>这些序列化器都实现了接口（<code>org.apache.kafka.common.serialization.Serializer</code>）</li><li>基本上，可以满足绝大多数场景</li></ul>\n<p><strong>2）自定义序列化</strong><br/> 自己实现，实现对应的接口即可，有以下方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Serializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Closeable</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> configs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span> isKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//理论上，只实现这个即可正常运行</span>\n\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> var1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//默认调上面的方法</span>\n\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Headers</span> headers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们来自己实现一个序列化器：<code>MySerializer.java</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySerializer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializer</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3）解码</strong><br/> <code>MyDeserializer.java</code>，实现方式与编码器几乎一样.</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDeserializer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Deserializer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>4）在yaml中配置自己的编码器、解码器</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\884610c5511943cbbc785ee09393ce50.png\"/></p>\n<p>再次收发，消息正常<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2f9f6dda227d4589935ea85729c91d5c.png\"/></p>\n<h2><a id=\"23__225\"></a>2.3 分区策略</h2>\n<p>分区策略决定了消息根据key投放到哪个分区，也是顺序消费保障的基石。</p>\n<ul><li>给定了分区号，直接将数据发送到指定的分区里面去</li><li>没有给定分区号，给定数据的key值，通过key取上hashCode进行分区</li><li>既没有给定分区号，也没有给定key值，直接轮循进行分区（<strong>默认</strong>）</li><li>自定义分区，你想怎么做就怎么做</li></ul>\n<p><strong>1）验证默认分区规则</strong><br/> 发送者代码参考：PartitionProducer.java</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//测试分区发送</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PartitionProducer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">KafkaTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> kafkaTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//    指定分区发送</span>\n<span class=\"token comment\">//    不管你key是什么，到同一个分区</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kafka/partitionSend/{key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPartition</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key=\"</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\"，msg=指定0号分区\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//    指定key发送，不指定分区</span>\n<span class=\"token comment\">//    根据key做hash，相同的key到同一个分区</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kafka/keysend/{key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setKey</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key=\"</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\"，msg=不指定分区\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>消费者代码使用：PartitionConsumer.java</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PartitionConsumer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PartitionConsumer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//分区消费</span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>topicPattern <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> consumerRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> optional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> optional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"partition=0,message:[{}]\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>topicPattern <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> consumerRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> optional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> optional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"partition=1,message:[{}]\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>通过swagger访问setKey(也就是只给了key的方法)：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3229ec084b0845b8bdef761f60498196.png\"/></p>\n<blockquote>\n<p>可以看到key相同的被hash到了同一个分区</p>\n</blockquote>\n<p>再访问setPartition来设置分区号0来发送：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\35ef54b237e84555bcf6a4f7108a5cae.png\"/></p>\n<blockquote>\n<p>可以看到无论key是什么，都是分区0来消费</p>\n</blockquote>\n<p><strong>2）自定义分区</strong><br/> 参考代码：MyPartitioner.java , MyPartitionTemplate.java。<br/> 发送使用：MyPartitionProducer.java。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPartitioner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Partitioner</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyBytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> valueBytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cluster</span> cluster<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">//        定义自己的分区策略</span>\n<span class=\"token comment\">//                如果key以0开头，发到0号分区</span>\n<span class=\"token comment\">//                其他都扔到1号分区</span>\n        <span class=\"token class-name\">String</span> keyStr <span class=\"token operator\">=</span> key<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyStr<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPartitionTemplate</span> <span class=\"token punctuation\">{<!-- --></span>\n \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.kafka.bootstrap-servers}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bootstrapServers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">KafkaTemplate</span> kafkaTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setKafkaTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG<span class=\"token punctuation\">,</span> bootstrapServers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//注意分区器在这里！！！</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>PARTITIONER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyPartitioner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kafkaTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultKafkaProducerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">KafkaTemplate</span> <span class=\"token function\">getKafkaTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> kafkaTemplate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//测试自定义分区发送</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPartitionProducer</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">MyPartitionTemplate</span> template<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//    使用0开头和其他任意字母开头的key发送消息</span>\n<span class=\"token comment\">//    看控制台的输出，在哪个分区里？</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kafka/myPartitionSend/{key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPartition</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">getKafkaTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span><span class=\"token string\">\"key=\"</span><span class=\"token operator\">+</span>key<span class=\"token operator\">+</span><span class=\"token string\">\"，msg=自定义分区策略\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用swagger，发送0开头和非0开头两种key<br/> <img alt=\"在这里插入图片描述\" src=\"image\\840e4fb43759440faa62f8587bd0ef62.png\"/></p>\n<h1><a id=\"3__374\"></a>3. 消息消费</h1>\n<h2><a id=\"31__375\"></a>3.1 消息组别</h2>\n<p>发送者使用：KafkaProducer.java</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaProducer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">KafkaTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> kafkaTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kafka/test/{msg}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>1）代码参考：GroupConsumer.java，Listener拷贝3份，分别赋予两组group，验证分组消费：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//测试组消费</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GroupConsumer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroupConsumer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//组1，消费者1</span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> consumerRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> optional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> optional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group:group1-1 , message:{}\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//组1，消费者2</span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> consumerRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> optional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> optional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group:group1-2 , message:{}\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//组2，只有一个消费者</span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"group2\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> consumerRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> optional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> optional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group:group2 , message:{}\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>2）启动</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f99fe3bd059b4598beb5a3cdcb984431.png\"/><br/> <strong>3）通过swagger发送2条消息</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\54ab725c1545412c956b5806d4d8bbdd.png\"/></p>\n<ul><li>同一group下的两个消费者，在group1均分消息</li><li>group2下只有一个消费者，得到全部消息</li></ul>\n<p><strong>4）消费端闲置</strong><br/> 注意分区数与消费者数的搭配，如果 （ 消费者数 &gt; 分区数量 ），将会出现消费者闲置（因为一个分区只能分配给一个消费者），浪费资源！</p>\n<p>验证方式：<br/> 停掉项目，删掉test主题，重新建一个 ，这次只给它分配一个分区。<br/> 重新发送两条消息，试一试<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5f5613fbe97f45e1affe541cff585ae6.png\"/></p>\n<ul><li>group2可以消费到1、2两条消息</li><li>group1下有两个消费者，但是只分配给了 1 ， 2这个进程被闲置</li></ul>\n<h2><a id=\"32__449\"></a>3.2 位移提交</h2>\n<p><strong>1）自动提交</strong><br/> 前面的案例中，我们设置了以下两个选项，则kafka会按延时设置自动提交</p>\n<pre><code class=\"prism language-yml\"><span class=\"token key atrule\">enable-auto-commit</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否自动提交offset</span>\n<span class=\"token key atrule\">auto-commit-interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token comment\"># 提交offset延时(接收到消息后多久提交offset，默认单位为ms)</span>\n</code></pre>\n<p><strong>2）手动提交</strong><br/> 有些时候，我们需要手动控制偏移量的提交时机，比如确保消息严格消费后再提交，以防止丢失或重复。<br/> 下面我们自己定义配置，覆盖上面的参数<br/> 代码参考：MyOffsetConfig.java</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyOffsetConfig</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.kafka.bootstrap-servers}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bootstrapServers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">KafkaListenerContainerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">manualKafkaListenerContainerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> configProps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        configProps<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG<span class=\"token punctuation\">,</span> bootstrapServers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        configProps<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        configProps<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 注意这里！！！设置手动提交</span>\n        configProps<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>ENABLE_AUTO_COMMIT_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ConcurrentKafkaListenerContainerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> factory <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentKafkaListenerContainerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setConsumerFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultKafkaConsumerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>configProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// ack模式：</span>\n        <span class=\"token comment\">//          AckMode针对ENABLE_AUTO_COMMIT_CONFIG=false时生效，有以下几种：</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">//          RECORD</span>\n        <span class=\"token comment\">//          每处理一条commit一次</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">//          BATCH(默认)</span>\n        <span class=\"token comment\">//          每次poll的时候批量提交一次，频率取决于每次poll的调用频率</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">//          TIME</span>\n        <span class=\"token comment\">//          每次间隔ackTime的时间去commit(跟auto commit interval有什么区别呢？)</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">//          COUNT</span>\n        <span class=\"token comment\">//          累积达到ackCount次的ack去commit</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">//          COUNT_TIME</span>\n        <span class=\"token comment\">//          ackTime或ackCount哪个条件先满足，就commit</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">//          MANUAL</span>\n        <span class=\"token comment\">//          listener负责ack，但是背后也是批量上去</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">//          MANUAL_IMMEDIATE</span>\n        <span class=\"token comment\">//          listner负责ack，每调用一次，就立即commit</span>\n\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">getContainerProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAckMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ContainerProperties<span class=\"token punctuation\">.</span>AckMode</span><span class=\"token punctuation\">.</span>MANUAL_IMMEDIATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后通过在消费端的Consumer来提交偏移量<br/> MyOffsetConsumer：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyOffsetConsumer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"myoffset-group-1\"</span><span class=\"token punctuation\">,</span> containerFactory <span class=\"token operator\">=</span> <span class=\"token string\">\"manualKafkaListenerContainerFactory\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">manualCommit</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span>\n                             <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaHeaders</span><span class=\"token punctuation\">.</span>RECEIVED_PARTITION_ID<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> partition<span class=\"token punctuation\">,</span>\n                             <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaHeaders</span><span class=\"token punctuation\">.</span>RECEIVED_TOPIC<span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span>\n                             <span class=\"token class-name\">Consumer</span> consumer<span class=\"token punctuation\">,</span>\n                             <span class=\"token class-name\">Acknowledgment</span> ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手动提交偏移量 , partition={}, msg={}\"</span><span class=\"token punctuation\">,</span> partition<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 同步提交</span>\n        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//异步提交</span>\n        <span class=\"token comment\">//consumer.commitAsync();</span>\n\n        <span class=\"token comment\">// ack提交也可以，会按设置的ack策略走(参考MyOffsetConfig.java里的ack模式)</span>\n        <span class=\"token comment\">// ack.acknowledge();</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"myoffset-group-2\"</span><span class=\"token punctuation\">,</span> containerFactory <span class=\"token operator\">=</span> <span class=\"token string\">\"manualKafkaListenerContainerFactory\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">noCommit</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span>\n                         <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaHeaders</span><span class=\"token punctuation\">.</span>RECEIVED_PARTITION_ID<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> partition<span class=\"token punctuation\">,</span>\n                         <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaHeaders</span><span class=\"token punctuation\">.</span>RECEIVED_TOPIC<span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">Consumer</span> consumer<span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">Acknowledgment</span> ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"忘记提交偏移量, partition={}, msg={}\"</span><span class=\"token punctuation\">,</span> partition<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 不做commit！</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 现实状况：\n     * commitSync和commitAsync组合使用\n     * &lt;p&gt;\n     * 手工提交异步 consumer.commitAsync();\n     * 手工同步提交 consumer.commitSync()\n     * &lt;p&gt;\n     * commitSync()方法提交最后一个偏移量。在成功提交或碰到无怯恢复的错误之前，\n     * commitSync()会一直重试，但是commitAsync()不会。\n     * &lt;p&gt;\n     * 一般情况下，针对偶尔出现的提交失败，不进行重试不会有太大问题\n     * 因为如果提交失败是因为临时问题导致的，那么后续的提交总会有成功的。\n     * 但如果这是发生在关闭消费者或再均衡前的最后一次提交，就要确保能够提交成功。否则就会造成重复消费\n     * 因此，在消费者关闭前一般会组合使用commitAsync()和commitSync()。\n     */</span>\n<span class=\"token comment\">//   @KafkaListener(topics = \"test\", groupId = \"myoffset-group-3\",containerFactory = \"manualKafkaListenerContainerFactory\")</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">manualOffset</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span>\n                             <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaHeaders</span><span class=\"token punctuation\">.</span>RECEIVED_PARTITION_ID<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> partition<span class=\"token punctuation\">,</span>\n                             <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaHeaders</span><span class=\"token punctuation\">.</span>RECEIVED_TOPIC<span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span>\n                             <span class=\"token class-name\">Consumer</span> consumer<span class=\"token punctuation\">,</span>\n                             <span class=\"token class-name\">Acknowledgment</span> ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"同步异步搭配 , partition={}, msg={}\"</span><span class=\"token punctuation\">,</span> partition<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//先异步提交</span>\n            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//继续做别的事</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n                consumer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/**\n     * 甚至可以手动提交，指定任意位置的偏移量\n     * 不推荐日常使用！！！\n     */</span>\n<span class=\"token comment\">//    @KafkaListener(topics = \"test\", groupId = \"myoffset-group-4\",containerFactory = \"manualKafkaListenerContainerFactory\")</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Consumer</span> consumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手动指定任意偏移量， partition={}, msg={}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndMetadata</span><span class=\"token punctuation\">&gt;</span></span> currentOffset <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        currentOffset<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">OffsetAndMetadata</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitSync</span><span class=\"token punctuation\">(</span>currentOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3）重复消费问题</strong><br/> 如果手动提交模式被打开，一定不要忘记提交偏移量。否则会造成重复消费！</p>\n<p>用km将test主题删除，新建一个test空主题。方便观察消息偏移 注释掉其他Consumer的Component注解，只保留当前MyOffsetConsumer.java 启动项目，使用swagger的KafkaProducer发送连续几条消息 留心控制台，都能消费，没问题：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f4d772435abe4e31b654080e046dfe18.png\"/><br/> 但是！重启项目：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\af94bee910f642f4a3a937ba38f5f33a.png\"/><br/> 无论重启多少次，不提交偏移量的消费组，会重复消费一遍！！！</p>\n<p>再通过命令行查询偏移量<br/> <img alt=\"在这里插入图片描述\" src=\"image\\321356d5f766419c8089a0fbaf1f996f.png\"/><br/> <strong>4）经验与总结</strong><br/> commitSync()方法，即同步提交，会提交最后一个偏移量。在成功提交或碰到无怯恢复的错误之前，commitSync()会一直重试，但是commitAsync()不会。</p>\n<p>这就造成一个陷阱：<br/> 如果异步提交，针对偶尔出现的提交失败，不进行重试不会有太大问题，因为如果提交失败是因为临时问题导致的，那么后续的提交总会有成功的。只要成功一次，偏移量就会提交上去。</p>\n<p>但是！如果这是发生在关闭消费者时的最后一次提交，就要确保能够提交成功，如果还没提交完就停掉了进程。就会造成重复消费！</p>\n<p>因此，在消费者关闭前一般会组合使用commitAsync()和commitSync()。<br/> 详细代码参考：MyOffsetConsumer.manualOffset()</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}