{"blogid": "123892708", "writerAge": "码龄3年", "writerBlogNum": "929", "writerCollect": "107722", "writerComment": "7507", "writerFan": "131615", "writerGrade": "8级", "writerIntegral": "45736", "writerName": "川川菜鸟", "writerProfileAdress": "writer_image\\profile_123892708.jpg", "writerRankTotal": "61", "writerRankWeekly": "56", "writerThumb": "23862", "writerVisitNum": "3182047", "blog_read_count": "14162", "blog_time": "已于 2022-04-01 13:24:44 修改", "blog_title": "只知道SQL数据库？又一国产数据库语言诞生了", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>一、为什么学习数据库？</h2>\n<p>学习数据库，你肯定需要先了解它，这样你才知道你为什么要学习它，数据库除了SQL还有一些别的数据库，了解它们的作用，可以在不同的场景选择最符合的一个数据库。</p>\n<h3><a id=\"11__2\"></a>1.1 什么是数据库？</h3>\n<p>首先你的先知道数据库的作用是什么,数据库的定义：数据库是结构化信息或数据的有组织的集合，通常以电子方式存储在计算机系统中。数据库通常由数据库管理系统 (DBMS)控制。数据和 DBMS 以及与之关联的应用程序一起被称为数据库系统，通常简称为数据库。</p>\n<p>数据库的组件：硬件，软件，数据，程序，访问语言。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\94cfe38f2def4e429c68052ea7786f06.png\"/></p>\n<h3><a id=\"12__7\"></a>1.2 数据库有啥优点？</h3>\n<p>列举以下几点，来说明为什么学习数据库：</p>\n<ol><li>数据库可以有效地存储大量记录（占用的空间很小）</li><li>海量的数据中很容易找到需要的信息，给你一万条数据你用眼睛找？</li><li>容易添加新的数据以及编辑或删除已有的数据</li><li>可以轻松搜索数据，比如有一对蔬菜的数据，你只想查找所有白菜的数据？</li><li>数据可以轻松排序，比如有一万个人注册网站，你想根据注册时间排序？也许只需要一行语句</li><li>多人可以同时访问同一个数据库，这样可以多人管理，而且每个人的全选可能不一样，一个大型数据库可以每个人负责一部分</li><li>安全性可能比纸质文件更好，比存储到本地的文档好，这是毋庸置疑的！</li></ol>\n<h3><a id=\"13__18\"></a>1.3 数据库有啥用途？偏偏要学它</h3>\n<p>这里我依然举例子来说明它的用途：</p>\n<ol><li>警方在数据库中有所有已知罪犯的详细信息，例如他们犯下的罪行</li><li>学校使用数​​据库来存储学生的详细信息，例如每个人的成绩</li><li>医院会将所有患者的详细信息存储在数据库中，例如他们的病历</li><li>政府使用数据库存储人们的所得税支付记录</li><li>如果过路费不在人工，一个数据库用于跟踪上海中心所有已支付过路费的司机，如果未支付就通过就要对他罚款。再比如无人超市？</li></ol>\n<h2><a id=\"SQL_27\"></a>二、为什么不选择SQL?</h2>\n<p>我们需要知道以下SQL的优缺点，才能知道是否选择它。这里列举SQL的缺点：</p>\n<ol><li><strong>安全</strong>：无论 SQL哪个 版本，SQL 中的数据库都经常受到威胁，因为它拥有大量敏感数据。</li><li><strong>速度</strong>：随着 SQL 数据库变得越来越大，大量表之间所需的查找和连接可能会减慢速度！</li><li><strong>可靠性</strong>：SQL 很难实现高性能算法，大数据操作的性能只能依靠数据库的优化引擎，但在复杂情况下往往有些不可靠。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\334d91bd69f1494d929d3848641ed8c7.png\"/></li></ol>\n<h3><a id=\"21_SQL_34\"></a>2.1 使用SQL处理亿量数据太难了！</h3>\n<p>很多大数据计算都是用SQL实现的，跑得慢时就要去优化SQL，但常常碰到让人干瞪眼的情况。比如，存储过程中有三条大概形如这样的语句执行得很慢：</p>\n<pre><code class=\"prism language-handlebars\"> <span class=\"token variable\">select</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">b</span><span class=\"token punctuation\">,</span><span class=\"token variable\">sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">x</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">b</span> <span class=\"token variable\">where</span> <span class=\"token variable\">…</span><span class=\"token punctuation\">;</span>   \n <span class=\"token variable\">select</span> <span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">d</span><span class=\"token punctuation\">,</span><span class=\"token variable\">max</span><span class=\"token punctuation\">(</span><span class=\"token variable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">d</span> <span class=\"token variable\">where</span> <span class=\"token variable\">…</span><span class=\"token punctuation\">;</span>  \n <span class=\"token variable\">select</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">avg</span><span class=\"token punctuation\">(</span><span class=\"token variable\">y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">min</span><span class=\"token punctuation\">(</span><span class=\"token variable\">z</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">c</span> <span class=\"token variable\">where</span> <span class=\"token variable\">…</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里的T是个有数亿行的巨大表，要分别按三种方式分组，分组的结果集都不大。分组运算要遍历数据表，这三句SQL就要把这个大表遍历三次，对数亿行数据遍历一次的时间就不短，何况三遍。</p>\n<p>这种分组运算中，相对于遍历硬盘的时间，CPU计算时间几乎可以忽略。如果可以在一次遍历中把多种分组汇总都计算出来，虽然CPU计算量并没有变少，但能大幅减少硬盘读取数据量，就能成倍提速了。</p>\n<p>如果SQL支持类似这样的语法：</p>\n<pre><code class=\"prism language-handlebars\"><span class=\"token variable\">from</span> <span class=\"token variable\">T</span> <span class=\"token variable\">--数据来自T表</span> \n <span class=\"token variable\">select</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">b</span><span class=\"token punctuation\">,</span><span class=\"token variable\">sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">x</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">b</span> <span class=\"token variable\">where</span> <span class=\"token variable\">…</span>   <span class=\"token variable\">--遍历中的第一种分组</span>     \n <span class=\"token variable\">select</span> <span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">d</span><span class=\"token punctuation\">,</span><span class=\"token variable\">max</span><span class=\"token punctuation\">(</span><span class=\"token variable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">d</span> <span class=\"token variable\">where</span> <span class=\"token variable\">…</span>   <span class=\"token variable\">--遍历中的第二种分组</span>     \n <span class=\"token variable\">select</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">avg</span><span class=\"token punctuation\">(</span><span class=\"token variable\">y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">min</span><span class=\"token punctuation\">(</span><span class=\"token variable\">z</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">c</span> <span class=\"token variable\">where</span> <span class=\"token variable\">…</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">--遍历中的第三种分组</span>\n</code></pre>\n<p>能一次返回多个结果集，那就可以大幅提高性能了。</p>\n<p>可惜， SQL没有这种语法，写不出这样的语句！<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cd7ac18f4e9c403c9146fdae12326f6b.png\"/></p>\n<p>只能用个变通的办法，就是用group a,b,c,d的写法先算出更细致的分组结果集，但要先存成一个临时表，才能进一步用SQL计算出目标结果。SQL大致如下：</p>\n<pre><code class=\"prism language-handlebars\"> <span class=\"token variable\">create</span> <span class=\"token variable\">table</span> <span class=\"token variable\">T</span><span class=\"token punctuation\">\\</span><span class=\"token variable\">_temp</span> <span class=\"token variable\">as</span> <span class=\"token variable\">select</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">b</span><span class=\"token punctuation\">,</span><span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">d</span><span class=\"token punctuation\">,</span>  \n     <span class=\"token variable\">sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">case</span> <span class=\"token variable\">when</span> <span class=\"token variable\">…</span> <span class=\"token variable\">then</span> <span class=\"token variable\">x</span> <span class=\"token variable\">else</span> <span class=\"token number\">0</span> <span class=\"token variable\">end</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">sumx</span><span class=\"token punctuation\">,</span>  \n     <span class=\"token variable\">max</span><span class=\"token punctuation\">(</span><span class=\"token variable\">case</span> <span class=\"token variable\">when</span> <span class=\"token variable\">…</span> <span class=\"token variable\">then</span> <span class=\"token variable\">y</span> <span class=\"token variable\">else</span> <span class=\"token variable\">null</span> <span class=\"token variable\">end</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">maxy</span><span class=\"token punctuation\">,</span>   \n     <span class=\"token variable\">sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">case</span> <span class=\"token variable\">when</span> <span class=\"token variable\">…</span> <span class=\"token variable\">then</span> <span class=\"token variable\">y</span> <span class=\"token variable\">else</span> <span class=\"token number\">0</span> <span class=\"token variable\">end</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">sumy</span><span class=\"token punctuation\">,</span>   \n     <span class=\"token variable\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">case</span> <span class=\"token variable\">when</span> <span class=\"token variable\">…</span> <span class=\"token variable\">then</span> <span class=\"token number\">1</span> <span class=\"token variable\">else</span> <span class=\"token variable\">null</span> <span class=\"token variable\">end</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">county</span><span class=\"token punctuation\">,</span>  \n     <span class=\"token variable\">min</span><span class=\"token punctuation\">(</span><span class=\"token variable\">case</span> <span class=\"token variable\">when</span> <span class=\"token variable\">…</span> <span class=\"token variable\">then</span> <span class=\"token variable\">z</span> <span class=\"token variable\">else</span> <span class=\"token variable\">null</span> <span class=\"token variable\">end</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">minz</span> \n     <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">b</span><span class=\"token punctuation\">,</span><span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">d</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">select</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">b</span><span class=\"token punctuation\">,</span><span class=\"token variable\">sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">sumx</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span><span class=\"token punctuation\">\\</span><span class=\"token variable\">_temp</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">b</span> <span class=\"token variable\">where</span> <span class=\"token variable\">…</span><span class=\"token punctuation\">;</span>  \n <span class=\"token variable\">select</span> <span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">d</span><span class=\"token punctuation\">,</span><span class=\"token variable\">max</span><span class=\"token punctuation\">(</span><span class=\"token variable\">maxy</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span><span class=\"token punctuation\">\\</span><span class=\"token variable\">_temp</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">d</span> <span class=\"token variable\">where</span> <span class=\"token variable\">…</span><span class=\"token punctuation\">;</span>  \n <span class=\"token variable\">select</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">c</span><span class=\"token punctuation\">,</span><span class=\"token variable\">sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">sumy</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">/</span><span class=\"token variable\">sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">county</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">min</span><span class=\"token punctuation\">(</span><span class=\"token variable\">minz</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span><span class=\"token punctuation\">\\</span><span class=\"token variable\">_temp</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">c</span> <span class=\"token variable\">where</span> <span class=\"token variable\">…</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<p>这样只要遍历一次了，但要把不同的WHERE条件转到前面的case when里，代码复杂很多，也会加大计算量。而且，计算临时表时分组字段的个数变得很多，结果集就有可能很大，最后还对这个临时表做多次遍历，计算性能也快不了。大结果集分组计算还要硬盘缓存，本身性能也很差。</p>\n<p>还可以用存储过程的数据库游标把数据一条一条fetch出来计算，但这要全自己实现一遍WHERE和GROUP的动作了，写起来太繁琐不说，数据库游标遍历数据的性能只会更差！只能干瞪眼！<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0b77c8b8067b415690e01e4eae551164.png\"/></p>\n<p>TopN运算同样会遇到这种无奈。举个例子，用Oracle的SQL写top5大致是这样的：</p>\n<pre><code class=\"prism language-handlebars\"> <span class=\"token variable\">select</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">*</span> <span class=\"token variable\">from</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">select</span> <span class=\"token variable\">x</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span> <span class=\"token variable\">order</span> <span class=\"token variable\">by</span> <span class=\"token variable\">x</span> <span class=\"token variable\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">where</span> <span class=\"token variable\">rownum</span><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">=</span><span class=\"token number\">5</span>\n</code></pre>\n<p>表T有10亿条数据，从SQL语句来看，是将全部数据大排序后取出前5名，剩下的排序结果就没用了！大排序成本很高，数据量很大内存装不下，会出现多次硬盘数据倒换，计算性能会非常差！<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1e7c1f50358d4b7ba7faa4ef6fc14887.png\"/></p>\n<p>避免大排序并不难，在内存中保持一个5条记录的小集合，遍历数据时，将已经计算过的数据前5名保存在这个小集合中，取到的新数据如果比当前的第5名大，则插入进去并丢掉现在的第5名，如果比当前的第5名要小，则不做动作。这样做，只要对10亿条数据遍历一次即可，而且内存占用很小，运算性能会大幅提升。</p>\n<p>这种算法本质上是把TopN也看作与求和、计数一样的聚合运算了，只不过返回的是集合而不是单值。SQL要是能写成这样,就能避免大排序了：</p>\n<pre><code class=\"prism language-handlebars\"> <span class=\"token variable\">select</span> <span class=\"token variable\">top</span><span class=\"token punctuation\">(</span><span class=\"token variable\">x</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span>\n</code></pre>\n<p>然而非常遗憾，SQL没有显式的集合数据类型，聚合函数只能返回单值，写不出这种语句！啊啊啊啊！<br/> <img alt=\"在这里插入图片描述\" src=\"image\\619c1dcccad0416d9eac2abfeb78043d.png\"/></p>\n<p>不过好在全集的TopN比较简单，虽然SQL写成那样，数据库却通常会在工程上做优化，采用上述方法而避免大排序。所以Oracle算那条SQL并不慢。但是，如果TopN的情况复杂了，用到子查询中或者和JOIN混到一起的时候，优化引擎通常就不管用了。比如要在分组后计算每组的TopN，用SQL写出来都有点困难。Oracle的SQL写出来是这样：</p>\n<pre><code class=\"prism language-handlebars\"> <span class=\"token variable\">select</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">*</span> <span class=\"token variable\">from</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">select</span> <span class=\"token variable\">y</span><span class=\"token punctuation\">,</span><span class=\"token variable\">x</span><span class=\"token punctuation\">,</span><span class=\"token variable\">row</span><span class=\"token punctuation\">\\</span><span class=\"token variable\">_number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">over</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">partition</span> <span class=\"token variable\">by</span> <span class=\"token variable\">y</span> <span class=\"token variable\">order</span> <span class=\"token variable\">by</span> <span class=\"token variable\">x</span> <span class=\"token variable\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">rn</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">where</span> <span class=\"token variable\">rn</span><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">=</span><span class=\"token number\">5</span>\n</code></pre>\n<p>这时候，数据库的优化引擎就晕了，不会再采用上面说的把TopN理解成聚合运算的办法。只能去做排序了，结果运算速度陡降！</p>\n<p>假如SQL的分组TopN能这样写：</p>\n<pre><code class=\"prism language-handlebars\"> <span class=\"token variable\">select</span> <span class=\"token variable\">y</span><span class=\"token punctuation\">,</span><span class=\"token variable\">top</span><span class=\"token punctuation\">(</span><span class=\"token variable\">x</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">from</span> <span class=\"token variable\">T</span> <span class=\"token variable\">group</span> <span class=\"token variable\">by</span> <span class=\"token variable\">y</span>\n</code></pre>\n<p>把top看成和sum一样的聚合函数，这不仅更易读，而且也很容易高速运算。可惜，不行。还是干瞪眼！只想说一句：气死</p>\n<h3><a id=\"22__104\"></a>2.2 关联计算</h3>\n<p>关联计算也是很常见的情况。以订单和多个表关联后做过滤计算为例，SQL大体是这个样子：</p>\n<pre><code class=\"prism language-handlebars\"><span class=\"token variable\">select</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">oid</span><span class=\"token punctuation\">,</span><span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">orderdate</span><span class=\"token punctuation\">,</span><span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">amount</span> \n<span class=\"token variable\">from</span> <span class=\"token variable\">orders</span> <span class=\"token variable\">o</span> \n    <span class=\"token variable\">left</span> <span class=\"token variable\">join</span> <span class=\"token variable\">city</span> <span class=\"token variable\">ci</span> <span class=\"token variable\">on</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">cityid</span> <span class=\"token punctuation\">=</span> <span class=\"token variable\">ci</span><span class=\"token punctuation\">.</span><span class=\"token variable\">cityid</span> \n    <span class=\"token variable\">left</span> <span class=\"token variable\">join</span> <span class=\"token variable\">shipper</span> <span class=\"token variable\">sh</span> <span class=\"token variable\">on</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">shid</span><span class=\"token punctuation\">=</span><span class=\"token variable\">sh</span><span class=\"token punctuation\">.</span><span class=\"token variable\">shid</span> \n    <span class=\"token variable\">left</span> <span class=\"token variable\">join</span> <span class=\"token variable\">employee</span> <span class=\"token variable\">e</span> <span class=\"token variable\">on</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">eid</span><span class=\"token punctuation\">=</span><span class=\"token variable\">e</span><span class=\"token punctuation\">.</span><span class=\"token variable\">eid</span> \n    <span class=\"token variable\">left</span> <span class=\"token variable\">join</span> <span class=\"token variable\">supplier</span> <span class=\"token variable\">su</span> <span class=\"token variable\">on</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">suid</span><span class=\"token punctuation\">=</span><span class=\"token variable\">su</span><span class=\"token punctuation\">.</span><span class=\"token variable\">suid</span> \n<span class=\"token variable\">where</span> <span class=\"token variable\">ci</span><span class=\"token punctuation\">.</span><span class=\"token variable\">state</span><span class=\"token punctuation\">=</span><span class=\"token string\">'New York'</span> \n    <span class=\"token variable\">and</span> <span class=\"token variable\">e</span><span class=\"token punctuation\">.</span><span class=\"token variable\">title</span><span class=\"token punctuation\">=</span><span class=\"token string\">'manager'</span> \n    <span class=\"token variable\">and</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n</code></pre>\n<p>订单表有几千万数据，城市、运货商、雇员、供应商等表数据量都不大。过滤条件字段可能会来自于这些表，而且是前端传参数到后台的，会动态变化。</p>\n<p>SQL一般采用HASH JOIN算法实现这些关联，要计算 HASH 值并做比较。每次只能解析一个JOIN，有N个JOIN要执行N遍动作，每次关联后都需要保持中间结果供下一轮使用，计算过程复杂，数据也会被遍历多次，计算性能不好。</p>\n<p>通常，这些关联的代码表都很小，可以先读入内存。如果将订单表中的各个关联字段预先做序号化处理，比如将雇员编号字段值转换为对应雇员表记录的序号。那么计算时，就可以用雇员编号字段值（也就是雇员表序号），直接取内存中雇员表对应位置的记录，性能比HASH JOIN快很多，而且只需将订单表遍历一次即可，速度提升会非常明显！</p>\n<p>也就是能把SQL写成下面的样子：</p>\n<pre><code class=\"prism language-handlebars\"><span class=\"token variable\">select</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">oid</span><span class=\"token punctuation\">,</span><span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">orderdate</span><span class=\"token punctuation\">,</span><span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">amount</span> \n<span class=\"token variable\">from</span> <span class=\"token variable\">orders</span> <span class=\"token variable\">o</span> \n    <span class=\"token variable\">left</span> <span class=\"token variable\">join</span> <span class=\"token variable\">city</span> <span class=\"token variable\">c</span> <span class=\"token variable\">on</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">cid</span> <span class=\"token punctuation\">=</span> <span class=\"token variable\">c</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">#</span> <span class=\"token variable\">--订单表的城市编号通过序号</span><span class=\"token punctuation\">#</span><span class=\"token variable\">关联城市表</span> \n    <span class=\"token variable\">left</span> <span class=\"token variable\">join</span> <span class=\"token variable\">shipper</span> <span class=\"token variable\">sh</span> <span class=\"token variable\">on</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">shid</span><span class=\"token punctuation\">=</span><span class=\"token variable\">sh</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">#</span> <span class=\"token variable\">--订单表运货商号通过序号</span><span class=\"token punctuation\">#</span><span class=\"token variable\">关联运货商表</span> \n    <span class=\"token variable\">left</span> <span class=\"token variable\">join</span> <span class=\"token variable\">employee</span> <span class=\"token variable\">e</span> <span class=\"token variable\">on</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">eid</span><span class=\"token punctuation\">=</span><span class=\"token variable\">e</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">#</span> <span class=\"token variable\">--订单表的雇员编号通过序号</span><span class=\"token punctuation\">#</span><span class=\"token variable\">关联雇员表</span> \n    <span class=\"token variable\">left</span> <span class=\"token variable\">join</span> <span class=\"token variable\">supplier</span> <span class=\"token variable\">su</span> <span class=\"token variable\">on</span> <span class=\"token variable\">o</span><span class=\"token punctuation\">.</span><span class=\"token variable\">suid</span><span class=\"token punctuation\">=</span><span class=\"token variable\">su</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">#</span><span class=\"token variable\">--订单表供应商号通过序号</span><span class=\"token punctuation\">#</span><span class=\"token variable\">关联供应商表</span> \n<span class=\"token variable\">where</span> <span class=\"token variable\">ci</span><span class=\"token punctuation\">.</span><span class=\"token variable\">state</span><span class=\"token punctuation\">=</span><span class=\"token string\">'New York'</span> \n    <span class=\"token variable\">and</span> <span class=\"token variable\">e</span><span class=\"token punctuation\">.</span><span class=\"token variable\">title</span><span class=\"token punctuation\">=</span><span class=\"token string\">'manager'</span> \n    <span class=\"token variable\">and</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n</code></pre>\n<p>可惜的是，SQL 使用了无序集合概念，即使这些编号已经序号化了，数据库也无法利用这个特点，不能在对应的关联表这些无序集合上使用序号快速定位的机制，只能使用索引查找，而且数据库并不知道编号被序号化了，仍然会去计算 HASH 值和比对，性能还是很差！有好办法也实施不了，只能再次干瞪眼！</p>\n<h3><a id=\"23__136\"></a>2.3 高并发帐户查询</h3>\n<p>高并发帐户查询，这个运算倒是很简单：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>amt<span class=\"token punctuation\">,</span>tdate<span class=\"token punctuation\">,</span>… <span class=\"token keyword\">from</span> T \n<span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token string\">'10100'</span> \n    <span class=\"token operator\">and</span> tdate<span class=\"token operator\">&gt;=</span> <span class=\"token keyword\">to</span>\\_date<span class=\"token punctuation\">(</span><span class=\"token string\">'2021-01-10'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'yyyy-MM-dd'</span><span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">and</span> tdate<span class=\"token operator\">&lt;</span>to_date<span class=\"token punctuation\">(</span><span class=\"token string\">'2021-01-25'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'yyyy-mm-dd'</span><span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">and</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> …<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>在T表的几亿条历史数据中，快速找到某个帐户的几条到几千条明细，SQL写出来并不复杂，难点是大并发时响应速度要达到秒级甚至更快。为了提高查询响应速度，一般都会对 T 表的 id 字段建索引：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> index_T_1 <span class=\"token keyword\">on</span> T<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>在数据库中，用索引查找单个帐户的速度很快，但并发很多时就会明显变慢。原因还是上面提到的SQL无序理论基础，总数据量很大，无法全读入内存，而数据库不能保证同一帐户的数据在物理上是连续存放的。硬盘有最小读取单位，在读不连续数据时，会取出很多无关内容，查询就会变慢。高并发访问的每个查询都慢一点，总体性能就会很差了。在非常重视体验的当下，谁敢让用户等待十秒以上？！容易想到的办法是，把几亿数据预先按照帐户排序，保证同一帐户的数据连续存储，查询时从硬盘上读出的数据块几乎都是目标值，性能就会得到大幅提升。</p>\n<h2><a id=\"SPL_151\"></a>三、为什么选择SPL?</h2>\n<p>不能再用SQL和关系数据库了，要使用别的计算引擎,那就是SPL。开源的集算器SPL基于创新的理论基础，支持更多的数据类型和运算，能够描述上述场景中的新算法。用简单便捷的SPL写代码，在短时间内能大幅提高计算性能！very good!</p>\n<h3><a id=\"31_SQL_153\"></a>3.1 解决SQL的痛！</h3>\n<p>上面这些问题用SPL写出来的代码样例如下：</p>\n<ul><li>一次遍历计算多种分组</li></ul>\n<table><thead><tr><th></th><th>A</th><th>B</th></tr></thead><tbody><tr><td>1</td><td>=file(“T.ctx”).open().cursor(a,b,c,d,x,y,z</td><td></td></tr><tr><td>2</td><td>cursor A1</td><td>=A2.select(…).groups(a,b;sum(x))</td></tr><tr><td>3</td><td></td><td>//定义遍历中的第一种过滤、分组</td></tr><tr><td>4</td><td>cursor</td><td>=A4.select(…).groups(c,d;max(y))</td></tr><tr><td>5</td><td></td><td>//定义遍历中的第二种过滤、分组</td></tr><tr><td>6</td><td>cursor</td><td>=A6.select(…).groupx(a,c;avg(y),min(z))</td></tr><tr><td>7</td><td></td><td>//定义遍历中的第三种过滤、分组</td></tr><tr><td>8</td><td>…</td><td>//定义结束，开始计算三种方式的过滤、分组</td></tr></tbody></table>\n<ul><li>用聚合的方式计算Top5</li></ul>\n<p>全集Top5（多线程并行计算）</p>\n<table><thead><tr><th></th><th>A</th></tr></thead><tbody><tr><td>1</td><td>=file(“T.ctx”).open()</td></tr><tr><td>2</td><td>=A1.cursor@m(x).total(top(-5,x),top(5,x))</td></tr><tr><td>3</td><td>//top(-5,x) 计算出 x 最大的前 5 名，top(5,x) 是 x 最小的前 5 名。</td></tr></tbody></table>\n<p>分组Top5（多线程并行计算）</p>\n<table><thead><tr><th></th><th>A</th></tr></thead><tbody><tr><td>1</td><td>=file(“T.ctx”).open()</td></tr><tr><td>2</td><td>=A1.cursor@m(x,y).groups(y;top(-5,x),top(5,x))</td></tr></tbody></table>\n<ul><li>用序号做关联的SPL代码：</li></ul>\n<p>系统初始化</p>\n<table><thead><tr><th></th><th>A</th></tr></thead><tbody><tr><td>1</td><td>&gt;env(city,file(“city.btx”).import@b()),env(employee,file(“employee.btx”).import@b()),…</td></tr><tr><td>2</td><td>//系统初始化时，几个小表读入内存</td></tr></tbody></table>\n<p>查询</p>\n<table><thead><tr><th></th><th>A</th></tr></thead><tbody><tr><td>1</td><td>=file(“orders.ctx”).open().cursor(cid,eid,…).switch(cid,city:#;eid,employee:#;…)</td></tr><tr><td>2</td><td>=A1.select(cid.state==“New York” &amp;&amp; eid.title==“manager”…)</td></tr><tr><td>3</td><td>//先序号关联，再引用关联表字段写过滤条件</td></tr></tbody></table>\n<ul><li>高并发帐户查询的SPL代码：</li></ul>\n<p>数据预处理，有序存储</p>\n<table><thead><tr><th></th><th>A</th><th>B</th></tr></thead><tbody><tr><td>1</td><td>=file(“T-original.ctx”).open().cursor(id,tdate,amt,…)</td><td></td></tr><tr><td>2</td><td>=A1.sortx(id)</td><td>=file(“T.ctx”)</td></tr><tr><td>3</td><td>=B2.create@r(#id,tdate,amt,…).append@i(A2)</td><td></td></tr><tr><td>4</td><td>=B2.open().index(index_id;id)</td><td></td></tr><tr><td>5</td><td>//将原数据排序后，另存为新表，并为帐号建立索引</td><td></td></tr></tbody></table>\n<p>帐户查询</p>\n<table><thead><tr><th></th><th>A</th></tr></thead><tbody><tr><td>1</td><td>=T.icursor(;id==10100 &amp;&amp; tdate&gt;=date(“2021-01-10”) &amp;&amp; tdate&lt;date(“2021-01-25”) &amp;&amp; …,index_id).fetch()</td></tr><tr><td>2</td><td>//查询代码非常简单</td></tr></tbody></table>\n<p>除了这些简单例子，SPL还能实现更多高性能算法，比如有序归并实现订单和明细之间的关联、预关联技术实现多维分析中的多层维表关联、位存储技术实现上千个标签统计、布尔集合技术实现多个枚举值过滤条件的查询提速、时序分组技术实现复杂的漏斗分析等等。</p>\n<h3><a id=\"32_SPL_223\"></a>3.2 更多关于SPL的思路和算法</h3>\n<p>这里还有更多SPL代码以体现其思路及大数据算法：</p>\n<ul><li><a href=\"http://c.raqsoft.com.cn/article/1568960169923\">性能优化技巧：遍历复用提速多次分组</a></li><li><a href=\"http://c.raqsoft.com.cn/article/1568974653153\">性能优化技巧：TopN</a></li><li><a href=\"http://c.raqsoft.com.cn/article/1574142747764\">性能优化技巧：预关联</a></li><li><a href=\"http://c.raqsoft.com.cn/article/1574667872162\">性能优化技巧：部分预关联</a></li><li><a href=\"http://c.raqsoft.com.cn/article/1575263621672\">性能优化技巧：外键序号化</a></li><li><a href=\"http://c.raqsoft.com.cn/article/1575946624827\">性能优化技巧：维表过滤或计算时的关联</a></li><li><a href=\"http://c.raqsoft.com.cn/article/1577153335610\">性能优化技巧：有序归并</a></li><li><a href=\"http://c.raqsoft.com.cn/article/1578967693907\">性能优化技巧：有序定位关联提速主子关联后的过滤</a></li><li><a href=\"http://c.raqsoft.com.cn/article/1583209591047\">性能优化技巧：小事实表与大维表关联</a></li></ul>\n<p>正在为SQL性能优化头疼的小伙伴们，可以来一起讨论：<a href=\"http://c.raqsoft.com.cn/\" rel=\"noopener noreferrer\" target=\"_blank\">http://www.raqsoft.com.cn/wx/Query-run-batch-ad.html</a></p>\n<h2><a id=\"SPL_238\"></a>四、SPL参考</h2>\n<ul><li><a href=\"http://c.raqsoft.com.cn/article/1595816810031\">SPL官网</a></li><li><a href=\"http://c.raqsoft.com.cn/article/1595816810031\">SPL下载地址</a></li><li><a href=\"https://github.com/SPLWare/esProc\">github开源SPL地址</a></li></ul>\n<p>一起支持国产数据库，点个star支持一下吧：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ffc0f1889a9141048d035ba55763f6b6.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}