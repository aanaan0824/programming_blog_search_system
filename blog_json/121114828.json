{"blogid": "121114828", "writerAge": "码龄3年", "writerBlogNum": "1", "writerCollect": "101", "writerComment": "27", "writerFan": "200", "writerGrade": "1级", "writerIntegral": "78", "writerName": "氵羕", "writerProfileAdress": "writer_image\\profile_121114828.jpg", "writerRankTotal": "1819361", "writerRankWeekly": "1187021", "writerThumb": "39", "writerVisitNum": "6013", "blog_read_count": "6006", "blog_time": "于 2021-11-03 13:06:55 发布", "blog_title": "M1芯片Mac配置vscode调试C++环境", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"text-align:justify;\">        近来闲暇无事，看到同门师兄弟掌握技能甚多，吾也想习得一点傍身之技，所以便开始了C++的学习。同时，吾攒钱终于购置了一台丐中丐版m1 macbook air，爱不释手，故想要在mac上来调试C++程序，万事开头难，mac上的vs和win上的vs有着天壤之别，并且不支持调试C++。头秃，何解？寻遍度娘，终于成功配置vscode调试C++的环境，接下来请听吾细细道来。</p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"Step1%3A%E4%B8%8B%E8%BD%BDvscode-toc\" style=\"margin-left:0px;\"><a href=\"#Step1%3A%E4%B8%8B%E8%BD%BDvscode\" title=\"Step1:下载vscode\">Step1:下载vscode</a></p>\n<p id=\"Step2%3A%E5%AE%89%E8%A3%85clang%E7%BC%96%E8%AF%91%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#Step2%3A%E5%AE%89%E8%A3%85clang%E7%BC%96%E8%AF%91%E5%99%A8\" title=\"Step2:安装clang编译器\">Step2:安装clang编译器</a></p>\n<p id=\"Step3%3A%E4%B8%8B%E8%BD%BD%E6%89%A9%E5%B1%95-toc\" style=\"margin-left:0px;\"><a href=\"#Step3%3A%E4%B8%8B%E8%BD%BD%E6%89%A9%E5%B1%95\" title=\"Step3:下载扩展\">Step3:下载扩展</a></p>\n<p id=\"Step4%3A%E6%96%B0%E5%BB%BAcpp%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#Step4%3A%E6%96%B0%E5%BB%BAcpp%E6%96%87%E4%BB%B6\" title=\"Step4:新建cpp文件\">Step4:新建cpp文件</a></p>\n<p id=\"%C2%A0Step5%3A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Step5%3A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" title=\"Step5:配置文件\">Step5:配置文件</a></p>\n<p id=\"1.%E9%85%8D%E7%BD%AEtasks.json%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E9%85%8D%E7%BD%AEtasks.json%E6%96%87%E4%BB%B6\" title=\"1.配置tasks.json文件\">1.配置tasks.json文件</a></p>\n<p id=\"2.%E9%85%8D%E7%BD%AEc_cpp_properties.json%E6%96%87%E4%BB%B6%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E9%85%8D%E7%BD%AEc_cpp_properties.json%E6%96%87%E4%BB%B6%C2%A0\" title=\"2.配置c_cpp_properties.json文件 \">2.配置c_cpp_properties.json文件 </a></p>\n<p id=\"3.%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6\" title=\"3.编译生成文件\">3.编译生成文件</a></p>\n<p id=\"4.%E9%85%8D%E7%BD%AElaunch.json%E6%96%87%E4%BB%B6%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E9%85%8D%E7%BD%AElaunch.json%E6%96%87%E4%BB%B6%C2%A0\" title=\"4.配置launch.json文件 \">4.配置launch.json文件 </a></p>\n<p id=\"5.%E8%B0%83%E8%AF%95%EF%BC%88debug%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#5.%E8%B0%83%E8%AF%95%EF%BC%88debug%EF%BC%89\" title=\"5.调试（debug）\">5.调试（debug）</a></p>\n<p id=\"6.%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#6.%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81\" title=\"6.配置文件代码\">6.配置文件代码</a></p>\n<p id=\"Step6*%EF%BC%9A%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E7%BB%88%E7%AB%AF-toc\" style=\"margin-left:0px;\"><a href=\"#Step6*%EF%BC%9A%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E7%BB%88%E7%AB%AF\" title=\"Step6*：调用外部终端\">Step6*：调用外部终端</a></p>\n<p id=\"%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%80%BB%E7%BB%93\" title=\"总结\">总结</a></p>\n<p id=\"%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%EF%BC%9A-toc\" style=\"margin-left:0px;\">​​​​​​​<a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%EF%BC%9A\" title=\"参考文档\">参考文档</a></p>\n<p style=\"margin-left:40px;\">​​​​​​​</p>\n<p id=\"%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%EF%BC%9A-toc\" style=\"margin-left:0px;\"></p>\n<hr id=\"hr-toc\"/>\n<p>​​​​​​​</p>\n<h1 id=\"Step1%3A%E4%B8%8B%E8%BD%BDvscode\">Step1:下载vscode</h1>\n<p>        vscode已经完成对m1芯片的适配，可以直接进入官网<a class=\"link-info\" href=\"https://code.visualstudio.com\" title=\"下载vscode。\">下载vscode。</a></p>\n<h1 id=\"Step2%3A%E5%AE%89%E8%A3%85clang%E7%BC%96%E8%AF%91%E5%99%A8\">Step2:安装clang编译器</h1>\n<p>        打开终端，输入<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">clang --version</span></span>查看是否已经安装clang编译器，若已安装，直接进入下一步。</p>\n<p>        若未安装，在终端中输入<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">xcode-select --install</span></span>，按提示进行安装即可。</p>\n<h1 id=\"Step3%3A%E4%B8%8B%E8%BD%BD%E6%89%A9%E5%B1%95\">Step3:下载扩展</h1>\n<p>        打开vscode， 在侧边栏中点击扩展，搜索并安装以下4个扩展：</p>\n<ol><li>C/C++</li><li>C++ Intellisense</li><li>CodeLLDB（C++debugger）</li><li>Chinese（中文扩展包）</li></ol>\n<p style=\"text-align:justify;\">        这里注意，在安装CodeLLDB时，会弹出<span style=\"background-color:#fef2f0;\"><span style=\"color:#be191c;\">Acquiring CodeLLDB platform package</span></span>，这是在下载并安装改平台包，如果下载速度很慢，可以直接<a class=\"link-info\" href=\"https://github.com/vadimcn/vscode-lldb/releases\" title=\"下载CodeLLDB平台包\">下载CodeLLDB平台包</a>，m1 mac选择<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">codelldb-aarch64-darwin.vsix</span></span>进行下载。下载完成后，手动安装已下载的平台包，步骤如下图： </p>\n<p><img alt=\"\" src=\"image\\57f15536db3944949f93312093414bd0.png\"/>     </p>\n<p>按照提示重启vscode，不再提示<span style=\"background-color:#fef2f0;\"><span style=\"color:#be191c;\">Acquiring CodeLLDB platform package</span></span><span style=\"color:#494949;\">表示安装成功。</span></p>\n<h1 id=\"Step4%3A%E6%96%B0%E5%BB%BAcpp%E6%96%87%E4%BB%B6\"><span style=\"color:#494949;\">Step4:新建cpp文件</span></h1>\n<p><span style=\"color:#494949;\">        这里直接采用</span><span style=\"color:#0d0016;\"><a class=\"link-info\" href=\"https://code.visualstudio.com/docs/cpp/config-clang-mac\" title=\"微软官方文档\">微软官方文档</a></span><span style=\"color:#494949;\">中的</span><span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">helloworld.cpp</span></span><span style=\"color:#494949;\">文档。</span></p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    vector&lt;string&gt; msg {\"Hello\", \"C++\", \"World\", \"from\", \"VS Code\", \"and the C++ extension!\"};\n\n    for (const string&amp; word : msg)\n    {\n        cout &lt;&lt; word &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}</code></pre>\n<h1 id=\"%C2%A0Step5%3A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">Step5:配置文件</h1>\n<h2 id=\"1.%E9%85%8D%E7%BD%AEtasks.json%E6%96%87%E4%BB%B6\">1.配置tasks.json文件</h2>\n<p>        首先，点击顶部菜单栏中的<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">终端</span></span>---<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">配置默认生成任务</span></span>---<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">C/C++ clang++</span></span>，此时会生成一个<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">tasks.json</span></span>文件，这个文件是默认生成的，需要修改其中的<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">args</span></span>选项，添加一个<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">\"-std=c++17\",</span></span><span style=\"color:#494949;\">，修</span>改如下：</p>\n<pre><code class=\"language-bash\">\"args\": [\n\t\"-fdiagnostics-color=always\",\n\t\"-g\",\n\t\"${file}\",\n\t\"-std=c++17\",\n\t\"-o\",\n\t\"${fileDirname}/${fileBasenameNoExtension}\"\n]</code></pre>\n<p>修改完后，发现依旧会出现语法错误，别急，接下来，需要配置另一个文件。</p>\n<h2 id=\"2.%E9%85%8D%E7%BD%AEc_cpp_properties.json%E6%96%87%E4%BB%B6%C2%A0\">2.配置c_cpp_properties.json文件 </h2>\n<p>        使用组合键<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">shift+command+p</span></span>调出<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">C/C++:编辑配置（json）</span></span>，此时会自动生成一个<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">c_cpp_properties.json</span></span>文件。</p>\n<p>        修改编译器为<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">clang++</span></span>：</p>\n<p>        将<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">\"compilerPath\": \"/usr/bin/clang\",</span></code></span>修改为<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">\"compilerPath\": \"/usr/bin/clang++\",</span></code></span></p>\n<p>        修改C++标准为<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">C++17</span></span>：</p>\n<p>        将<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">\"cppStandard\": \"c++98\",</span></code></span>修改为<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">\"cppStandard\": \"c++17\",</span></code></span></p>\n<h2 id=\"3.%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6\"><code>3.编译生成文件</code></h2>\n<p>        配置完成后，点击顶部菜单栏中的<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">终端</span></span>---<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">运行生成任务</span></span>，此时会生成一个二进制文件，右键这个二进制文件，点击<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">在终端中打开</span></span>，键入<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">./你的二进制文件名</span></span>，即可看到输出结果。</p>\n<p><img alt=\"\" src=\"image\\f83d135f105a4091b65b3c4838d37913.png\"/></p>\n<p>        “哎呀呀，这些我都会，就是debug总是不成功，怎么办啊？嘤。”</p>\n<p>        别急别急，这就道来。 </p>\n<h2 id=\"4.%E9%85%8D%E7%BD%AElaunch.json%E6%96%87%E4%BB%B6%C2%A0\">4.配置launch.json文件 </h2>\n<p>        点击顶部菜单栏中的<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">运行</span></span>---<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">添加配置</span></code></span>---<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">C++(GDB/LLDB)</span></code></span>---<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">clang++ 生成活动文件</span></code></span>，会生成一个<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">launch.json</span></code></span>文件。 </p>\n<p>        在文件中将<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">\"type\": \"cppdbg\",</span></code></span>修改为<span style=\"color:#be191c;\"><code><span style=\"background-color:#fef2f0;\">\"type\": \"lldb\",</span></code></span></p>\n<p>        到此，所有配置工作均完成。</p>\n<p>        “这就完了？？我不信，我要debug！我要debug！！”</p>\n<p>        好不好使，我们试一下不就知道了～</p>\n<h2 id=\"5.%E8%B0%83%E8%AF%95%EF%BC%88debug%EF%BC%89\">5.调试（debug）</h2>\n<p>         在文件的第10行放置一个断点，点击顶部菜单栏中的<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">运行</span></span>---<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">启动调试</span></span>，各种变量就成功展现在我们眼前了。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\e4a69a79a79e4337a638823507436fc8.png\"/></p>\n<h2 id=\"6.%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81\">6.配置文件代码</h2>\n<p>        以下是我的三个json文件配置代码：</p>\n<p>  <span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">tasks.json</span></span>:</p>\n<pre><code class=\"language-bash\">{\n\t\"version\": \"2.0.0\",\n\t\"tasks\": [\n\t\t{\n\t\t\t\"type\": \"cppbuild\",\n\t\t\t\"label\": \"C/C++: clang++ 生成活动文件\",\n\t\t\t\"command\": \"/usr/bin/clang++\",\n\t\t\t\"args\": [\n\t\t\t\t\"-fdiagnostics-color=always\",\n\t\t\t\t\"-g\",\n\t\t\t\t\"${file}\",\n\t\t\t\t\"-std=c++17\",\n\t\t\t\t\"-o\",\n\t\t\t\t\"${fileDirname}/${fileBasenameNoExtension}\"\n\t\t\t],\n\t\t\t\"options\": {\n\t\t\t\t\"cwd\": \"${fileDirname}\"\n\t\t\t},\n\t\t\t\"problemMatcher\": [\n\t\t\t\t\"$gcc\"\n\t\t\t],\n\t\t\t\"group\": {\n\t\t\t\t\"kind\": \"build\",\n\t\t\t\t\"isDefault\": true\n\t\t\t},\n\t\t\t\"detail\": \"编译器: /usr/bin/clang++\"\n\t\t}\n\t]\n}</code></pre>\n<p><span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">c_cpp_properties.json</span></span>:</p>\n<pre><code class=\"language-bash\">{\n\t\"configurations\": [\n\t\t{\n\t\t\t\"name\": \"Mac\",\n\t\t\t\"includePath\": [\n\t\t\t\t\"${workspaceFolder}/**\"\n\t\t\t],\n\t\t\t\"defines\": [],\n\t\t\t\"macFrameworkPath\": [\n\t\t\t\t\"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks\"\n\t\t\t],\n\t\t\t\"compilerPath\": \"/usr/bin/clang++\",\n\t\t\t\"cStandard\": \"c17\",\n\t\t\t\"cppStandard\": \"c++17\",\n\t\t\t\"intelliSenseMode\": \"macos-clang-arm64\"\n\t\t}\n\t],\n\t\"version\": 4\n}</code></pre>\n<p><span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">launch.json</span></span>:</p>\n<pre><code class=\"language-bash\">{\n\t// 使用 IntelliSense 了解相关属性。 \n\t// 悬停以查看现有属性的描述。\n\t// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"name\": \"clang++ - 生成和调试活动文件\",\n\t\t\t\"type\": \"lldb\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"program\": \"${fileDirname}/${fileBasenameNoExtension}\",\n\t\t\t\"args\": [],\n\t\t\t\"stopAtEntry\": false,\n\t\t\t\"cwd\": \"${fileDirname}\",\n\t\t\t\"environment\": [],\n\t\t\t\"externalConsole\": false,\n\t\t\t\"MIMode\": \"lldb\",\n\t\t\t\"preLaunchTask\": \"C/C++: clang++ 生成活动文件\"\n\t\t}\n\t]\n}</code></pre>\n<p>         “确实是能调试了，可是我的输出结果为什么不在外部的终端里显示，却是在vscode中显示呢？到底怎么回事？？嘤。”</p>\n<p>        征途已接近尾声，不要着急嘛，这里简单设置一下就好啦～</p>\n<h1 id=\"Step6*%EF%BC%9A%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E7%BB%88%E7%AB%AF\">Step6*：调用外部终端</h1>\n<p>        点击侧边栏中的<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">管理</span></span>---<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">设置</span></span>，在搜索框中输入<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">terminal external</span></span>，步骤如下：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\9902c79b60c84194ab75fefc2607ee14.png\"/></p>\n<p>        将如下如下两项设置均改为<span style=\"color:#be191c;\"><span style=\"background-color:#fef2f0;\">external</span></span>：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\50ee07e0e38a4bb6aa846472c21c5341.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1ac00169bc5a4b6bb739e6bc170a5f69.png\"/></p>\n<p style=\"text-align:justify;\">        重启vscode，再次运行程序，会发现输出结果显示在终端之中了，若终端没有弹出到桌面，可以检查dock栏，这是会发现终端“站”在了小点之上，点开它即可观察输出结果。</p>\n<h1 id=\"%E6%80%BB%E7%BB%93\">总结</h1>\n<p style=\"text-align:justify;\">        之前在网上找了很久搭建环境的方法，虽然确有很多文章，但有很多并不能成功实现，所以搭建出最后这个可用的环境花了我很多时间（还是菜哈哈哈哈），为了其他像我一样手持m1 Mac的小白可以在其上学习C++，我总结前人的经验整理了这一篇教程，这也是我的第一篇CSDN，希望不是最后一篇哈哈哈哈，求学之路，路漫漫其修远兮，吾将上下而求索。</p>\n<h1 id=\"%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%EF%BC%9A\">参考文档</h1>\n<ul><li>​​​​​​​​​​​​​​<a class=\"link-info\" href=\"https://www.cnblogs.com/BYGAO/p/15135609.html\" title=\"m1 MacBook配置VS code的C++环境(2021年8月)\">m1 MacBook配置VS code的C++环境(2021年8月)</a>​​​​​​​</li><li><a class=\"link-info\" href=\"https://blog.csdn.net/Dimuky/article/details/109373334\" title=\"VSCode: Acquiring CodeLLDB platform package 速度慢\">VSCode: Acquiring CodeLLDB platform package 速度慢</a></li><li><a class=\"link-info\" href=\"https://blog.csdn.net/wulizhiren/article/details/120396214\" title=\"mac vscode配置以及 运行c/c++代码时无法弹出外部终端\">mac vscode配置以及 运行c/c++代码时无法弹出外部终端</a></li></ul>\n<p id=\"articleContentId\">​​​​​​​</p>\n<p id=\"articleContentId\"></p>\n<p></p>\n<p>        </p>\n<p></p>\n</div>\n</div>"}