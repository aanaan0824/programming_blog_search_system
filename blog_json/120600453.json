{"blogid": "120600453", "writerAge": "码龄12年", "writerBlogNum": "87", "writerCollect": "3102", "writerComment": "338", "writerFan": "608", "writerGrade": "5级", "writerIntegral": "2865", "writerName": "萌萌哒程序猴", "writerProfileAdress": "writer_image\\profile_120600453.jpg", "writerRankTotal": "23904", "writerRankWeekly": "17505", "writerThumb": "649", "writerVisitNum": "195885", "blog_read_count": "6293", "blog_time": "于 2021-10-03 21:40:35 发布", "blog_title": "数字图像处理——RGB与HSV图像互相转换原理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div id=\"js_content\">\n<h1 style=\"text-align:center;\">01</h1>\n<h1 style=\"text-align:center;\">RGB与HSV介绍</h1>\n<p>讲RGB图与HSV图的互相转换之前，我们先分别介绍一下这两种图像。</p>\n<ul><li> <h2><strong>首先是RGB图像</strong></h2> </li></ul>\n<p>RGB图像是一种三通道图像，通常用于表示彩色图，它由相同行、列的红（Red）、绿（Green）、蓝（Blue）这三通道的数据组成。比如对于512行512列的RGB图像，其红通道为一张512*512灰度图、绿通道为一张512*512灰度图、蓝通道为一张512*512灰度图，三通道数据合起来构成了3*512*512的RGB图像。</p>\n<p style=\"text-align:center;\"><img alt=\"42ae1242bfadba48bb96ad81b0f2f6e1.png\" src=\"image\\42ae1242bfadba48bb96ad81b0f2f6e1.png\"/></p>\n<p>我们视觉能看到的一些常见颜色，则由三通道数据对应坐标位置的三个像素值编码组成。比如对于8位的RGB图像，其每个像素值取值范围是0~255，如果某一坐标点A处红、绿、蓝三通道的像素值依次为255，255，255，那么该点表示的颜色为白色，如果该处红、绿、蓝三通道的像素值依次为0，0，0，那么该点表示的颜色为黑色，又如果该处红、绿、蓝三通道的像素值为其它值，则其表示的颜色为其它颜色。所以理论上8位RGB图可以表示的颜色种类数为255*255*255。‍</p>\n<p style=\"text-align:center;\"><img alt=\"e3be5d2737b06fcc817edd05a75b28ad.png\" src=\"image\\e3be5d2737b06fcc817edd05a75b28ad.png\"/></p>\n<p>RGB图像是与硬件相对应的图像，也即彩色相机图像传感器输出的原始数据本身就包含了R、G、B三通道的数据，它将三通道图像数据按照一定顺序排列（拜尔阵列）输出，上位机则通过USB或网络接收传感器传来的数据并将其解析为RGB图像。比如对于传感器输出的RG/GB格式拜尔阵列，其R、G、B数据在阵列中的排列如下图：</p>\n<p style=\"text-align:center;\"><img alt=\"fc12f6f027748dea923ef02379a01d8c.png\" src=\"image\\fc12f6f027748dea923ef02379a01d8c.png\"/></p>\n<ul><li> <h2><strong>其次是HSV图像</strong></h2> </li></ul>\n<p>RGB图像与相机传感器输出的原始数据相对应，HSV图像则与我们人类的直观视觉更相符。HSV图像也包含相同尺寸的三通道数据：H通道、S通道、V通道。下面分别介绍这三个通道：</p>\n<p><strong>H通道</strong>：H通道的像素值表示色调，取值范围0~360，我们可以把这个取值范围理解为角度，也即一个闭环的取值范围，如下图：</p>\n<p style=\"text-align:center;\"><img alt=\"b30d0505548da0cdad471f34e948f79e.png\" src=\"image\\b30d0505548da0cdad471f34e948f79e.png\"/></p>\n<p><strong>S通道</strong>：S通道的像素值表示图像的饱和度。饱和度是指图片彩色的纯度——图像的混合颜色越少，其饱和度越高，直观看起来就越鲜艳鲜明、视觉效果越强烈；反之图像的混合颜色越多，其饱和度越低，视觉效果越弱。</p>\n<p>比如在所有可视色彩中纯红色的饱和度是最高的，也即纯红色看起来最鲜艳，但是如果在纯红色中混入其它颜色，那么其饱和度将会降低，这时看起来就没那么鲜艳了。</p>\n<p>S通道像素值的取值范围是0~1，值越大表示饱和度越高。</p>\n<p><strong>V通道</strong>：V通道像素值表示图像的明亮程度，取值范围也是0~1，值越大表示越亮。</p>\n<p><strong>由以上介绍可知，RGB图像与硬件输出相对应，而HSV图像则更符合人眼的直观<strong>视觉</strong>，因此处理图像时，往往先将RGB图像转换为HSV图像，在HSV色彩空间对图像进行处理，处理完毕后再将HSV图像转换为RGB图像。</strong></p>\n<hr/>\n<h1 style=\"text-align:center;\">02</h1>\n<h1 style=\"text-align:center;\">RGB与HSV的互相转换原理</h1>\n<p>在讲转换原理之前，首先我们以8位彩色图为例来明确一下RGB图像、HSV图像中各通道像素值的取值范围，对于图像中任意坐标点，其取值范围如下：</p>\n<p style=\"text-align:center;\"><img alt=\"a79e928300627ba992ff5323da4f9f17.png\" src=\"image\\a79e928300627ba992ff5323da4f9f17.png\"/></p>\n<p>然而在Opencv中，为了对HSV图像进行可视化，通常将其像素值转换到0~255之间：</p>\n<p style=\"text-align:center;\"><img alt=\"0614979eb335cf4f7fb32c2c55fb0128.png\" src=\"image\\0614979eb335cf4f7fb32c2c55fb0128.png\"/></p>\n<ul><li> <h2><strong>RGB转HSV原理</strong></h2> </li></ul>\n<p>转换原理非常简单，对于图像中任意坐标点，其RGB颜色空间为(R,G,B)，HSV颜色空间为(H,S,V)，首先需要将R、G、B值转换到0~1之间：</p>\n<p style=\"text-align:center;\"><img alt=\"98de9dd25bb3c11409b553362f669a4b.png\" src=\"image\\98de9dd25bb3c11409b553362f669a4b.png\"/></p>\n<p>然后计算H、S、V值：</p>\n<p style=\"text-align:center;\"><img alt=\"4b963f5000db111f99a75809fa455fb1.png\" src=\"image\\4b963f5000db111f99a75809fa455fb1.png\"/></p>\n<p>如果计算得到的H值小于0，将该值再加上360，得到最终的H值：</p>\n<p style=\"text-align:center;\"><img alt=\"00c17b2d3d7a4077d07555791d78c516.png\" src=\"image\\00c17b2d3d7a4077d07555791d78c516.png\"/></p>\n<p>由于Opencv需要做HSV图像的可视化，因此最后还需要将各个值转换到0~255之间：</p>\n<p style=\"text-align:center;\"><img alt=\"a025b7173973184c3478f76606beb211.png\" src=\"image\\a025b7173973184c3478f76606beb211.png\"/></p>\n<ul><li> <h2><strong>HSV转RGB原理</strong></h2> </li></ul>\n<p>对于图像中任意坐标点，其RGB颜色空间为(R,G,B)，HSV颜色空间为(H,S,V)。首先将可视化图像的H、S、V值分别转换到0~360、0~1、0~1的范围：</p>\n<p style=\"text-align:center;\"><img alt=\"1fb9e1c490e4b1c328bf76cd7363651a.png\" src=\"image\\1fb9e1c490e4b1c328bf76cd7363651a.png\"/></p>\n<p>那么R、G、B的计算如以下公式，其中floor表示向下取整运算：</p>\n<p style=\"text-align:center;\"><img alt=\"430b61b0e960f657f1eac34dd71be19c.png\" src=\"image\\430b61b0e960f657f1eac34dd71be19c.png\"/></p>\n<hr/>\n<h1 style=\"text-align:center;\">03</h1>\n<h1 style=\"text-align:center;\">基于Opencv的RGB与HSV互相转换</h1>\n<p>Opencv提供了cvtColor函数，调用该函数可以非常方便地实现不同颜色空间的转换。不过为了可视化，<strong>调用该函数得到的HSV图像，其H、S、V三通道的取值范围并不是0~360、0~1、0~1，而是经过转换的0~180、0~255、0~255</strong>。</p>\n<pre class=\"has\"><code class=\"language-cs\">void rgb_hsv(void)\n{\n  //读取原图像\n  Mat img = imread(\"000000000902.bmp\", CV_LOAD_IMAGE_COLOR);\n\n\n  Mat img_hsv;\n  cvtColor(img, img_hsv, CV_BGR2HSV);  //将RGB图像转换为HSV图像\n\n\n  Mat img_rgb;\n  cvtColor(img_hsv, img_rgb, CV_HSV2BGR);   //将HSV图像转换为RGB图像\n\n\n  imshow(\"ori rgb\", img);\n  imshow(\"hsv\", img_hsv);\n  imshow(\"rgb\", img_rgb);\n  waitKey();\n}</code></pre>\n<p>运行结果：</p>\n<p style=\"text-align:center;\"><img alt=\"c340a6df3aa27b68a572682a543fb6e7.png\" src=\"image\\c340a6df3aa27b68a572682a543fb6e7.png\"/></p>\n<p style=\"text-align:center;\">原图</p>\n<p style=\"text-align:center;\"><img alt=\"d4f6f1c445dc925c6cbb5d825c9e641c.png\" src=\"image\\d4f6f1c445dc925c6cbb5d825c9e641c.png\"/></p>\n<p style=\"text-align:center;\">HSV图像</p>\n<p style=\"text-align:center;\"><img alt=\"b0e38e0e323d24e4f33b8ba710b1d52d.png\" src=\"image\\b0e38e0e323d24e4f33b8ba710b1d52d.png\"/></p>\n<p style=\"text-align:center;\">将HSV图像还原为RGB图像，与原图一致</p>\n<hr/>\n<h1 style=\"text-align:center;\">04</h1>\n<h1 style=\"text-align:center;\">使用C++自己实现HSV与RGB的互相转换</h1>\n<p>为了加深上述转换公式的理解，我们使用C++自己来实现转换过程。</p>\n<h2><strong>首先是RGB转换为HSV的代码：</strong></h2>\n<pre class=\"has\"><code class=\"language-cpp\">void RGB2HSV(Mat img_rgb, Mat &amp;img_hsv)\n{\n  img_hsv = Mat::zeros(img_rgb.size(), CV_8UC3);\n\n\n  for (int i = 0; i &lt; img_rgb.rows; i++)\n  {\n    Vec3b *p0 = img_rgb.ptr&lt;Vec3b&gt;(i);   //B--p[0]  G--p[1]  R--p[2]\n    Vec3b *p1 = img_hsv.ptr&lt;Vec3b&gt;(i);   //B--p[0]  G--p[1]  R--p[2]\n\n\n    for (int j = 0; j &lt; img_rgb.cols; j++)\n    {\n      float B = p0[j][0] / 255.0;\n      float G = p0[j][1] / 255.0;\n      float R = p0[j][2] / 255.0;\n      \n      float V = (float)std::max({ B, G, R });     //B/G/R\n      float vmin = (float)std::min({ B, G, R });\n      float diff = V - vmin;\n\n\n      float S, H;\n      S = diff / (float)(fabs(V) + FLT_EPSILON);\n      diff = (float)(60.0 / (diff + FLT_EPSILON));\n\n\n      if (V == B)   //V=B\n      {\n        H = 240.0 + (R - G) * diff;\n      }\n      else if (V == G)  //V=G\n      {\n        H = 120.0 + (B - R) * diff;\n      }\n      else if (V == R)   //V=R\n      {\n        H = (G - B) * diff;\n      }\n\n\n      H = (H &lt; 0.0) ? (H + 360.0) : H;\n\n\n      p1[j][0] = (uchar)(H / 2);\n      p1[j][1] = (uchar)(S * 255);\n      p1[j][2] = (uchar)(V * 255);\n    }\n  }\n}</code></pre>\n<h2><strong>其次是HSV转换为RGB的代码：</strong></h2>\n<pre class=\"has\"><code class=\"language-cpp\">void HSV2BGR(Mat img_hsv, Mat &amp;img_rgb)\n{\n  img_rgb = Mat::zeros(img_hsv.size(), CV_8UC3);\n\n\n  for (int i = 0; i &lt; img_rgb.rows; i++)\n  {\n    Vec3b *p0 = img_hsv.ptr&lt;Vec3b&gt;(i);   //B--p[0]  G--p[1]  R--p[2]\n    Vec3b *p1 = img_rgb.ptr&lt;Vec3b&gt;(i);   //B--p[0]  G--p[1]  R--p[2]\n\n\n    for (int j = 0; j &lt; img_hsv.cols; j++)\n    {\n      float H = p0[j][0] * 2.0;\n      float S = p0[j][1] / 255.0;\n      float V = p0[j][2] / 255.0;\n      \n      float h = H / 60.0;            \n      int i = floor(h);\n      float f = h - i;         \n      float p = V * (1 - S);\n      float q = V * (1 - f * S);\n      float t = V * (1 - (1 - f) * S);\n\n\n      switch (i)\n      {\n      case 0:\n        p1[j][2] = (uchar)(V * 255);\n        p1[j][1] = (uchar)(t * 255);\n        p1[j][0] = (uchar)(p * 255);\n        break;\n      case 1:\n        p1[j][2] = (uchar)(q * 255);\n        p1[j][1] = (uchar)(V * 255);\n        p1[j][0] = (uchar)(p * 255);\n        break;\n      case 2:\n        p1[j][2] = (uchar)(p * 255);\n        p1[j][1] = (uchar)(V * 255);\n        p1[j][0] = (uchar)(t * 255);\n        break;\n      case 3:\n        p1[j][2] = (uchar)(p * 255);\n        p1[j][1] = (uchar)(q * 255);\n        p1[j][0] = (uchar)(V * 255);\n        break;\n      case 4:\n        p1[j][2] = (uchar)(t * 255);\n        p1[j][1] = (uchar)(p * 255);\n        p1[j][0] = (uchar)(V * 255);\n        break;\n      default:\n        p1[j][2] = (uchar)(V * 255);\n        p1[j][1] = (uchar)(p * 255);\n        p1[j][0] = (uchar)(q * 255);\n        break;\n      }\n    }\n  }\n}</code></pre>\n<h2>测试代码：</h2>\n<pre class=\"has\"><code class=\"language-cs\">void rgb_hsv(void)\n{\n  Mat img = imread(\"000000000902.bmp\", CV_LOAD_IMAGE_COLOR);\n\n\n  Mat img_hsv;\n  //cvtColor(img, img_hsv, CV_BGR2HSV);\n  RGB2HSV(img, img_hsv);\n\n\n  Mat img_rgb;\n  //cvtColor(img_hsv, img_rgb, CV_HSV2BGR);\n  HSV2BGR(img_hsv, img_rgb);\n\n\n  imshow(\"ori rgb\", img);\n  imshow(\"hsv\", img_hsv);\n  imshow(\"rgb\", img_rgb);\n  waitKey();\n}</code></pre>\n<p>运行结果如下，可以看到，转换结果跟调用Opencv函数的结果是一致的。</p>\n<p style=\"text-align:center;\"><img alt=\"40785c627bcdfbb43c9ed50c4e92bbbb.png\" src=\"image\\40785c627bcdfbb43c9ed50c4e92bbbb.png\"/></p>\n<p style=\"text-align:center;\">HSV图像</p>\n<p style=\"text-align:center;\"><img alt=\"44bddb402fb0f42a3c407e286321cd7a.png\" src=\"image\\44bddb402fb0f42a3c407e286321cd7a.png\"/></p>\n<p style=\"text-align:center;\">将HSV图像还原为RGB图像，与原图一致</p>\n<p>欢迎扫码关注本微信公众号，接下来会不定时更新更加精彩的内容，敬请期待~</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\a9641a2d84cc42b6b2e4598735a5c65a.png\"/></p>\n<p> </p>\n</div>\n</div>\n</div>"}