{"blogid": "125604792", "writerAge": "码龄5年", "writerBlogNum": "68", "writerCollect": "467", "writerComment": "149", "writerFan": "155", "writerGrade": "5级", "writerIntegral": "2718", "writerName": "van久", "writerProfileAdress": "writer_image\\profile_125604792.jpg", "writerRankTotal": "8691", "writerRankWeekly": "81636", "writerThumb": "144", "writerVisitNum": "313332", "blog_read_count": "1060", "blog_time": "已于 2022-07-06 08:46:45 修改", "blog_title": "qt学习之旅--QToolBar的使用（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一、实现功能：</h1>\n<p>        1、显示图标+文字，上下两排显示<br/>         2、取消前面竖排的小圆点<br/>         3、点击菜单栏就切换窗口</p>\n<h1>二、实现结果：</h1>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/117f4a474aa5479092313d26c8bab144.gif\"/></p>\n<h1>三、实现过程：</h1>\n<h2>3.1、前言</h2>\n<p>最开始说菜单栏，首先想到的就是<strong>QMenu</strong>，打算用connect连接SIGNAL（triggered()）和SLOT(XXX)，结果运行程序出现如下错误：<br/><strong>QObject::connect: No such signal QMenu::triggered()</strong><br/> 后发现有博客说这样是行不通的，<strong>因为QMenu相当于是一个Label的作用</strong>，并不能执行任何的操作，要么就QMenu下添加一个QAction来实现。</p>\n<h2>3.2、QToolBar实现步骤</h2>\n<p>于是乎转念一想，可以使用QToolBar实现：</p>\n<h3><strong>3.2.1、添加工具栏</strong><br/><img alt=\"\" height=\"108\" src=\"image\\3b9222d7687a47d38f6cbadcc5c8e82e.png\" width=\"428\"/></h3>\n<h3>3.2.2、工具栏新建动作<br/><img alt=\"\" height=\"340\" src=\"image\\39f77ab495704a4391cf3ee8abae6df9.png\" width=\"568\"/></h3>\n<h3> 3.2.3、添加图标资源</h3>\n<p>添加图标之前，我们得先添加资源：（步骤截图）<img alt=\"\" height=\"98\" src=\"image\\b21e697c69464db4b7715423b085eaf5.png\" width=\"624\"/><img alt=\"\" height=\"575\" src=\"image\\7ea24f3414d54f62ab90823dc79f6da5.png\" width=\"1162\"/><img alt=\"\" height=\"340\" src=\"image\\54cc9db02f174897be772287cc2e72c7.png\" width=\"647\"/><img alt=\"\" height=\"363\" src=\"image\\5345767ace7b4e6f8eef63b11c2d7a46.png\" width=\"390\"/><img alt=\"\" height=\"128\" src=\"image\\d5ea7058b8b94699a2eb3eea2982858d.png\" width=\"221\"/><img alt=\"\" height=\"284\" src=\"image\\c2799ab3b11b4f9caa2633e5df13b643.png\" width=\"400\"/>   <img alt=\"\" height=\"245\" src=\"image\\7b26cdf71ed64a689e38c96faf68f52e.png\" width=\"403\"/><img alt=\"\" height=\"250\" src=\"image\\b80618cd886f404f9823cdea3cc04d4e.png\" width=\"462\"/></p>\n<h3> 3.2.4、工具栏添加图标<br/><img alt=\"\" height=\"135\" src=\"image\\7b2c8db566cd4144bf9be93cf43082f6.png\" width=\"962\"/><img alt=\"\" height=\"209\" src=\"image\\c3b96ab7fdbb4f7e8086f37cdec016b5.png\" width=\"462\"/><img alt=\"\" height=\"202\" src=\"image\\c2a3aeb605da4745a1844bf78bcf5472.png\" width=\"547\"/><img alt=\"\" height=\"182\" src=\"image\\bb205279e8524ece87c076ccfb1a6453.png\" width=\"577\"/></h3>\n<h3> 3.2.5、图标+文本，取消竖排小圆点，修改图标大小，修改文本样式</h3>\n<p>这些均在QToolBar的属性栏中修改<br/><img alt=\"\" height=\"479\" src=\"image\\e68a788243cd42e09b0ed1e7e1e582bd.png\" width=\"585\"/><img alt=\"\" height=\"378\" src=\"image\\4f8f274eda994ac79205aa65c1c2309e.png\" width=\"564\"/><img alt=\"\" height=\"51\" src=\"image\\4788fe685e7145fdaaa0e9785d4bf414.png\" width=\"237\"/></p>\n<h2>3.3、实现切换窗口</h2>\n<h3><strong>3.3.1、新建窗体对象</strong><br/><img alt=\"\" height=\"256\" src=\"image\\b5cdb592222b4c90b3ea60c7eba8f9b7.png\" width=\"371\"/><img alt=\"\" height=\"317\" src=\"image\\35531ae77c894f319826a01ddace1ed7.png\" width=\"643\"/><img alt=\"\" height=\"530\" src=\"image\\33f2d877cabb44bf9d4322949b006a91.png\" width=\"656\"/><br/><img alt=\"\" height=\"358\" src=\"image\\604faabf5f2d4baa92b235c981dd8478.png\" width=\"617\"/></h3>\n<p>新建的mainform.ui就可以创建我们想要的内容了</p>\n<h3>3.3.2、 编码</h3>\n<p>mainwindow.h：</p>\n<pre><code class=\"language-cpp\">#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include &lt;QMainWindow&gt;\n\n//引入窗体头文件   \n#include \"mainform.h\"       \n#include \"monitorform.h\"\n#include \"navigationform.h\"\n\nnamespace Ui {\nclass MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\npublic:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n\nprivate:\n    Ui::MainWindow *ui;\n\npublic:\n    int AppWidth;   //  屏宽\n    int AppHeight;  //  屏高\n\n    MainForm* mainForm;             //主界面窗体对象\n    NavigationForm* navigationForm; //导航窗体对象\n    MonitorForm* monitorForm;       //监控窗体对象\n\n    void CreateNewForms();          //创建窗体\n    void ShowForms(quint8 mIdx);    //展示窗体\n\n\nprivate slots:\n    //动作触发槽函数\n    void on_mainaction_triggered();\n    void on_monitoraction_triggered();\n    void on_navigationaction_triggered();\n};\n\n#endif // MAINWINDOW_H\n</code></pre>\n<p> mainwindow.cpp：</p>\n<pre><code class=\"language-cpp\">#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include &lt;QDesktopWidget&gt;\n\nstatic uint oldFormIdx=0;//记录当前界面下标\n\nMainWindow::MainWindow(QWidget *parent) :\n    QMainWindow(parent),\n    ui(new Ui::MainWindow)\n{\n    ui-&gt;setupUi(this);\n\n    //取消窗体的最大化、最小化、托盘管理\n    Qt::WindowFlags flag=0;\n    flag=Qt::Window|Qt::WindowCloseButtonHint|Qt::MSWindowsFixedSizeDialogHint;\n    flag&amp;=~Qt::WindowContextHelpButtonHint;\n    flag&amp;=~Qt::WindowMinMaxButtonsHint;\n    setWindowFlags(flag);\n\n    //实现窗口固定最大化\n    QDesktopWidget* desk=QApplication::desktop();   //获取桌面控件\n    QRect rect=desk-&gt;screenGeometry();  //获取可用桌面大小\n    AppWidth=rect.width();              //取得屏幕桌面宽\n    AppHeight=rect.height();            //取得屏幕桌面高\n    resize(AppWidth,AppHeight);\n    setFixedSize(AppWidth,AppHeight);   //设置固定窗口大小\n    move(-2,0);                         //移动窗口位置\n    this-&gt;setWindowTitle(\"ROV\");        //窗口名称\n    this-&gt;setContextMenuPolicy(Qt::NoContextMenu);  //设置右健菜单,五个枚举：Qt::NoContextMenu（小部件没有上下文菜单，上下文菜单的处理被推迟到小部件的父级）\n\n    //设置背景颜色\n    QPalette palette(this-&gt;palette());  //QPalette是Qt中的调色板类,它提供的setColor()函数可改变控件的颜色\n    palette.setColor(QPalette::Background,QColor(175,175,175));\n    this-&gt;setPalette(palette);\n\n    CreateNewForms();\n    ShowForms(0);\n}\n\nvoid MainWindow::CreateNewForms()\n{\n    mainForm= new MainForm(this);       //创建窗体指针对象\n    mainForm-&gt;setAttribute(Qt::WA_DeleteOnClose); //widget将会被释放。不管widget是否可见，关闭事件都会传递给widget。\n                                                    //即接收到QCloseEvent事件后，除了调用hide()方法将窗口隐藏，同时会调用deleteLater()方法将窗口释放掉，不会再占用资源。\n    mainForm-&gt;resize(1440,920);         //窗口大小\n    mainForm-&gt;move(10,40);              //窗口位置\n\n    navigationForm= new NavigationForm(this);\n    navigationForm-&gt;setAttribute(Qt::WA_DeleteOnClose);\n    navigationForm-&gt;resize(1440,920);\n    navigationForm-&gt;move(10,40);\n\n    monitorForm= new MonitorForm(this);\n    monitorForm-&gt;setAttribute(Qt::WA_DeleteOnClose);\n    monitorForm-&gt;resize(1440,920);\n    monitorForm-&gt;move(10,40);\n\n    this-&gt;monitorForm-&gt;hide();      //隐藏窗体\n    this-&gt;navigationForm-&gt;hide();   //隐藏窗体\n}\n\nvoid MainWindow::ShowForms(quint8 mIdx)\n{\n    if(oldFormIdx!=mIdx)\n    {\n        switch(mIdx)\n        {\n          case 0:\n            mainForm-&gt;show();\n            break;\n          case 1:\n            monitorForm-&gt;show();\n            break;\n          case 2:\n            navigationForm-&gt;show();\n            break;\n        }\n\n        switch(oldFormIdx)\n        {\n          case 0:\n            mainForm-&gt;hide();\n            break;\n          case 1:\n            monitorForm-&gt;hide();\n            break;\n          case 2:\n            navigationForm-&gt;hide();\n            break;\n        }\n\n        oldFormIdx=mIdx;\n    }\n}\n\n//槽函数\nvoid MainWindow::on_mainaction_triggered()\n{\n    ShowForms(0);\n}\nvoid MainWindow::on_monitoraction_triggered()\n{\n    ShowForms(1);\n}\nvoid MainWindow::on_navigationaction_triggered()\n{\n    ShowForms(2);\n}\nMainWindow::~MainWindow()\n{\n    delete mainForm;\n    delete monitorForm;\n    delete navigationForm;\n\n    delete ui;\n}\n</code></pre>\n<h1> 四、我的源码</h1>\n<p> 链接：https://pan.baidu.com/s/1Otd-Y_AEsIadZza005ZeKA?pwd=qe9k <br/> 提取码：qe9k</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}