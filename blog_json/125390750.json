{"blogid": "125390750", "writerAge": "码龄1年", "writerBlogNum": "126", "writerCollect": "5837", "writerComment": "7334", "writerFan": "16749", "writerGrade": "7级", "writerIntegral": "15029", "writerName": "鹿九丸", "writerProfileAdress": "writer_image\\profile_125390750.jpg", "writerRankTotal": "662", "writerRankWeekly": "1186", "writerThumb": "5713", "writerVisitNum": "235598", "blog_read_count": "782", "blog_time": "于 2022-06-21 14:43:52 发布", "blog_title": "C&C++动态内存管理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/1e126fe79094470a9538b51a0ba6e448.gif\"/><br/> </p>\n<div class=\"toc\">\n<h3>C&amp;C++动态内存管理</h3>\n<ul><li><a href=\"#1_CC_5\">1. C/C++内存分布</a></li><li><a href=\"#2_C_28\">2. C++内存管理方式</a></li><li><ul><li><a href=\"#21_newdelete_32\">2.1 new/delete操作内置类型</a></li><li><a href=\"#22_newdelete_54\">2.2 new和delete操作自定义类型</a></li></ul>\n</li><li><a href=\"#3_operator_newoperator_delete_116\">3. operator new与operator delete函数</a></li><li><ul><li><a href=\"#31_operator_newoperator_delete_118\">3.1 operator new与operator delete函数</a></li><li><a href=\"#32_operator_newoperator_delete_196\">3.2 operator new与operator delete的类专属重载</a></li></ul>\n</li><li><a href=\"#4_newdelete_254\">4. new和delete的实现原理</a></li><li><ul><li><a href=\"#41__256\">4.1 内置类型</a></li><li><a href=\"#42__260\">4.2 自定义类型</a></li></ul>\n</li><li><a href=\"#5_newplacementnew_292\">5. 定位new表达式(placement-new)</a></li><li><a href=\"#6_mallocfreenewdelete_318\">6. malloc/free和new/delete的区别</a></li><li><a href=\"#7__329\">7. 内存泄漏</a></li><li><ul><li><a href=\"#71__331\">7.1 定义与危害</a></li><li><a href=\"#72__361\">7.2 内存泄漏的分类</a></li><li><a href=\"#73__373\">7.3 如何检测内存泄漏</a></li><li><a href=\"#74__379\">7.4 如何避免内存泄漏</a></li><li><a href=\"#75_4G_390\">7.5 如何一次在堆上申请4G的内存</a></li><li><a href=\"#74__394\">7.4 如何避免内存泄漏</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b9fa8096ca704253bfa6cb08eba8abe5.png\"/><br/> 哈喽大家好，我是<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          \n           鹿\n          \n          \n           九\n          \n          \n           丸\n          \n         \n        \n       \n       \n        \\color{red}{鹿九丸}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord cjk_fallback\" style=\"color: red;\">鹿</span><span class=\"mord cjk_fallback\" style=\"color: red;\">九</span><span class=\"mord cjk_fallback\" style=\"color: red;\">丸</span></span></span></span></span></span>，今天给大家带来的是C&amp;C++动态内存管理。<br/> 如果大家在看我的博客的过程中或者学习的过程中以及在学习方向上有什么问题或者想跟我交流的话可以加我的企鹅号：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          2361038962\n         \n        \n       \n       \n        \\color{red}{2361038962}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord\" style=\"color: red;\">2</span><span class=\"mord\" style=\"color: red;\">3</span><span class=\"mord\" style=\"color: red;\">6</span><span class=\"mord\" style=\"color: red;\">1</span><span class=\"mord\" style=\"color: red;\">0</span><span class=\"mord\" style=\"color: red;\">3</span><span class=\"mord\" style=\"color: red;\">8</span><span class=\"mord\" style=\"color: red;\">9</span><span class=\"mord\" style=\"color: red;\">6</span><span class=\"mord\" style=\"color: red;\">2</span></span></span></span></span></span>，或者寄邮件到相应的邮箱里：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          \n           2361038962\n          \n          \n           @\n          \n          \n           q\n          \n          \n           q\n          \n          \n           .\n          \n          \n           c\n          \n          \n           o\n          \n          \n           m\n          \n         \n        \n       \n       \n        \\color{red}{2361038962@qq.com}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord\" style=\"color: red;\"><span class=\"mord\" style=\"color: red;\">2</span><span class=\"mord\" style=\"color: red;\">3</span><span class=\"mord\" style=\"color: red;\">6</span><span class=\"mord\" style=\"color: red;\">1</span><span class=\"mord\" style=\"color: red;\">0</span><span class=\"mord\" style=\"color: red;\">3</span><span class=\"mord\" style=\"color: red;\">8</span><span class=\"mord\" style=\"color: red;\">9</span><span class=\"mord\" style=\"color: red;\">6</span><span class=\"mord\" style=\"color: red;\">2</span><span class=\"mord\" style=\"color: red;\">@</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em; color: red;\">q</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em; color: red;\">q</span><span class=\"mord\" style=\"color: red;\">.</span><span class=\"mord mathdefault\" style=\"color: red;\">c</span><span class=\"mord mathdefault\" style=\"color: red;\">o</span><span class=\"mord mathdefault\" style=\"color: red;\">m</span></span></span></span></span></span>，我会尽量帮大家进行解答！</p>\n</blockquote>\n<h1><a id=\"1_CC_5\"></a>1. C/C++内存分布</h1>\n<p><img alt=\"image-20220524212454973\" src=\"image\\52125c5626c92b13e00441faab579331.png\"/></p>\n<p>说明：</p>\n<ol><li>栈又叫堆栈，非静态局部变量/函数参数/返回值等等，栈是向下增长的。</li><li>内存映射段是高效的I/O映射方式，用于装载一个共享的动态内存库。用户可使用系统接口创建共享共 享内存，做进程间通信。（Linux课程如果没学到这块，现在只需要了解一下）</li><li>堆用于程序运行时动态内存分配，堆是可以上增长的。</li><li>数据段–存储全局数据和静态数据。</li><li>代码段–可执行的代码/只读常量。</li></ol>\n<p>注意：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> char1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//char1在栈区上，*char1在栈区上，这种写法的意思是数组开5个空间（栈区），将常量字符串（常量区中的）拷贝到栈区的数组中，所以*char1还是在栈区上</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> char2 <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//char2在栈区上（指针变量），*char2在代码段（常量字符串）</span>\n    <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>char1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结果为4，遇到'\\0'停止</span>\n    <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>char2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结果为4，遇到'\\0'停止</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"2_C_28\"></a>2. C++内存管理方式</h1>\n<p>C语言内存管理方式在C++中可以继续使用，但有些地方就无能为力而且使用起来比较麻烦，因此C++又提出 了自己的内存管理方式：通过new和delete操作符进行动态内存管理。</p>\n<h2><a id=\"21_newdelete_32\"></a>2.1 new/delete操作内置类型</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//new一个int对象</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//new一个int对象并初始化为10</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//new10个int对象</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//new10个int对象并初始化为1~10(C++11才支持)</span>\n    <span class=\"token comment\">//如果不完全初始化剩下的未初始化的就是0，于数组相类似</span>\n    <span class=\"token comment\">//不匹配可能会报错，可能不会报错，建议一定要匹配</span>\n    <span class=\"token keyword\">delete</span> ptr1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> ptr2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ptr3<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ptr4<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220524222803273\" src=\"image\\ae5065bfcf3188cb9ec4e225b43b96be.png\"/></p>\n<p><mark>注意：申请和释放单个元素的空间，使用new和delete操作符，申请和释放连续的空间，使用new[]和 delete[]</mark></p>\n<h2><a id=\"22_newdelete_54\"></a>2.2 new和delete操作自定义类型</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n        _year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Date构造函数的调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Date析构函数的调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tDate<span class=\"token operator\">*</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//自动调用该自定义类型的构造函数并将其成员变量_year初始化为2022</span>\n    <span class=\"token comment\">//注意：这个地方就不需要对d1进行检查是否为空指针了，因为如果开辟失败就会抛异常</span>\n\t<span class=\"token keyword\">delete</span> d1<span class=\"token punctuation\">;</span><span class=\"token comment\">//自动调用该自定义类型的析构函数</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行截图：</p>\n<p><img alt=\"image-20220524223513930\" src=\"image\\840020603dd6ce4fc6a10968f1d73b62.png\"/></p>\n<p><mark>注意：在申请自定义类型的空间时，new会调用构造函数，delete会调用析构函数，而malloc与free不会。</mark></p>\n<p>==注意：如果自定义类型的构造函数带参数，我们在new的时候可以在后面带参数。==例如：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n\t\t_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t_a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">delete</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStack<span class=\"token operator\">*</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//此处传参，将capacity赋值为20</span>\n\t<span class=\"token keyword\">delete</span> st<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"3_operator_newoperator_delete_116\"></a>3. operator new与operator delete函数</h1>\n<h2><a id=\"31_operator_newoperator_delete_118\"></a>3.1 operator new与operator delete函数</h2>\n<p><strong>new和delete</strong>是用户进行<strong>动态内存申请和释放的操作符</strong>，<strong>operator new</strong> 和<strong>operator delete</strong>是系统提供的<strong>全局函数</strong>，<strong>new在底层调用operator new</strong>全局函数来申请空间，<strong>delete在底层通过operator delete全局函数来释放空间</strong>。</p>\n<p><img alt=\"image-20220526114456005\" src=\"image\\519d10755e60d403fdbf3eb66a54c500.png\"/></p>\n<p>operator new与operator delete函数的源码</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">/*\noperator new：该函数实际通过malloc来申请空间，当malloc申请空间成功时直接返回；申请空间失败，\n尝试执行空 间不足应对措施，如果改应对措施用户设置了，则继续申请，否则抛异常。\n*/</span>\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> __CRTDECL <span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span> <span class=\"token function\">_THROW1</span><span class=\"token punctuation\">(</span>_STD bad_alloc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// try to allocate size bytes</span>\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_callnewh</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// report no memory</span>\n\t\t\t<span class=\"token comment\">// 如果申请内存失败了，这里会抛出bad_alloc 类型异常</span>\n\t\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>bad_alloc nomem<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">_RAISE</span><span class=\"token punctuation\">(</span>nomem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\noperator delete: 该函数最终是通过free来释放空间的\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> pUserData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t_CrtMemBlockHeader<span class=\"token operator\">*</span> pHead<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">RTCCALLBACK</span><span class=\"token punctuation\">(</span>_RTC_Free_hook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pUserData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pUserData <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">_mlock</span><span class=\"token punctuation\">(</span>_HEAP_LOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* block other threads */</span>\n\t__TRY\n\t\t<span class=\"token comment\">/* get a pointer to memory block header */</span>\n\t\tpHead <span class=\"token operator\">=</span> <span class=\"token function\">pHdr</span><span class=\"token punctuation\">(</span>pUserData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* verify block type */</span>\n\t<span class=\"token function\">_ASSERTE</span><span class=\"token punctuation\">(</span><span class=\"token function\">_BLOCK_TYPE_IS_VALID</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">-&gt;</span>nBlockUse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">_free_dbg</span><span class=\"token punctuation\">(</span>pUserData<span class=\"token punctuation\">,</span> pHead<span class=\"token operator\">-&gt;</span>nBlockUse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//相当于调用的还是free</span>\n\t__FINALLY\n\t\t<span class=\"token function\">_munlock</span><span class=\"token punctuation\">(</span>_HEAP_LOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* release other threads */</span>\n\t__END_TRY_FINALLY\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\nfree的实现\n*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">free</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token function\">_free_dbg</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> _NORMAL_BLOCK<span class=\"token punctuation\">)</span></span></span>\n</code></pre>\n<p><strong>通过上述两个全局函数的实现知道，operator new实际也是通过malloc来申请空间，如果malloc申请空间成功就直接返回，否则执行用户提供的空间不足应对措施，如果用户提供该措施就继续申请，否则就抛异常。operator delete 最终是通过free来释放空间的。</strong></p>\n<p><mark>注意：operator不需要检查申请空间得到的返回值是否为nullptr，如果申请内存空间失败就直接抛异常。</mark></p>\n<blockquote>\n<p>那么new的本质是什么呢？</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStack<span class=\"token operator\">*</span> st1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Stack<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//operator new---申请失败就抛异常</span>\n\t<span class=\"token comment\">//call Stack的构造函数</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>汇编查看：</p>\n<p><img alt=\"image-20220526122022788\" src=\"image\\3a16ff001fbddf60fe50e182cf84f281.png\"/></p>\n<p>画图表示new、operator和malloc的关系：</p>\n<p><img alt=\"image-20220526122312979\" src=\"image\\3bc285bd589789e143a64826755db5c1.png\"/></p>\n</blockquote>\n<h2><a id=\"32_operator_newoperator_delete_196\"></a>3.2 operator new与operator delete的类专属重载</h2>\n<p>图示：</p>\n<p><img alt=\"image-20220526124656819\" src=\"image\\2b4a987ad8a1dbdb2bbf490459a54f8c.png\"/></p>\n<p>下面代码演示了，针对链表的节点ListNode通过重载类专属 operator new / operator delete，实现链表节 点使用内存池申请和释放内存，提高效率。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tListNode<span class=\"token operator\">*</span> _next<span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">*</span> _prev<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>size_t n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\tp <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">allocator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"memory pool allocate\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token generic-function\"><span class=\"token function\">allocator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"memory pool deallocate\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ListNode<span class=\"token punctuation\">;</span>\n\t\t_head<span class=\"token operator\">-&gt;</span>_next <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n\t\t_head<span class=\"token operator\">-&gt;</span>_prev <span class=\"token operator\">=</span> _head<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _head<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> _head<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">delete</span> cur<span class=\"token punctuation\">;</span>\n\t\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">delete</span> _head<span class=\"token punctuation\">;</span>\n\t\t_head <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tListNode<span class=\"token operator\">*</span> _head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tList l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"4_newdelete_254\"></a>4. new和delete的实现原理</h1>\n<h2><a id=\"41__256\"></a>4.1 内置类型</h2>\n<blockquote>\n<p>如果申请的是内置类型的空间，new和malloc，delete和free基本类似，不同的地方是：new/delete申请和 释放的是单个元素的空间，new[]和delete[]申请的是连续空间，而且new在申请空间失败时会抛异常， malloc会返回NULL。</p>\n</blockquote>\n<h2><a id=\"42__260\"></a>4.2 自定义类型</h2>\n<ul><li> <p>new的原理</p>\n<ol><li>调用operator new函数申请空间</li><li>在申请的空间上执行构造函数，完成对象的构造</li></ol> </li><li> <p>delete的原理</p>\n<ol><li>在空间上执行析构函数，完成对象中资源的清理工作</li><li>调用operator delete函数释放对象的空间</li></ol> </li><li> <p>new T[N]的原理</p>\n<ol><li>调用operator new[]函数，在operator new[]中实际调用operator new函数完成N个对象空间的申请</li><li>在申请的空间上执行N次构造函数</li></ol> </li><li> <p>delete[]的原理</p>\n<ol><li>在释放的对象空间上执行N次析构函数，完成N个对象中资源的清理</li><li>调用operator delete[]释放空间，实际在operator delete[]中调用operator delete来释放空间</li></ol> </li></ul>\n<p>注意：new和delete一定要匹配：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span><span class=\"token comment\">//相当于free(p);这种写法没有问题</span>\nStack<span class=\"token operator\">*</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> st<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//错误写法</span>\n<span class=\"token keyword\">delete</span> st<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//问：上面这种写法为什么会报错？</span>\n<span class=\"token comment\">//答：因为上面的这种写法只调用了一次析构函数，无法完全析构</span>\n<span class=\"token comment\">//正确写法</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> st<span class=\"token punctuation\">;</span><span class=\"token comment\">//调用了10次析构函数</span>\n</code></pre>\n<h1><a id=\"5_newplacementnew_292\"></a>5. 定位new表达式(placement-new)</h1>\n<p>问：当我们使用operator new开辟空间的时候（不会自动调用构造函数进行初始化），该如何在类外进行初始化呢？（注意：不可直接初始化，因为成员变量常常是私有的）</p>\n<p>答：通过下面的方式：</p>\n<pre><code class=\"prism language-cpp\">Stack<span class=\"token operator\">*</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> Stack <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//针对一个空间，显式调用构造函数初始化</span>\n<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//20是传的参数，即capacity</span>\n<span class=\"token comment\">//上面两行等价于下面的一行代码：</span>\nStack<span class=\"token operator\">*</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>定位new表达式是在<strong>已分配的原始内存空间中调用构造函数初始化一个对象</strong>。</p>\n<p>使用格式：</p>\n<p><strong>new (place_address) type或者new (place_address) type(initializer-list)</strong></p>\n<p><strong>place_address必须是一个指针，initializer-list是类型的初始化列表</strong></p>\n<p>使用场景：</p>\n<p>定位new表达式在实际中一般是配合内存池使用。因为内存池分配出的内存没有初始化，所以如果是自定义 类型的对象，需要使用new的定义表达式进行显示调构造函数进行初始化。</p>\n<h1><a id=\"6_mallocfreenewdelete_318\"></a>6. malloc/free和new/delete的区别</h1>\n<p>malloc/free和new/delete的共同点是：都是从堆上申请空间，并且需要用户手动释放。不同的地方是：</p>\n<ol><li>malloc和free是函数，new和delete是操作符 （用法）</li><li>malloc申请的空间不会初始化，new可以初始化（用法）</li><li>malloc申请空间时，需要手动计算空间大小并传递，new只需在其后跟上空间的类型即可 （用法）</li><li>malloc的返回值为void*, 在使用时必须强转，new不需要，因为new后跟的是空间的类型 （用法）</li><li>malloc申请空间失败时，返回的是NULL，因此使用时必须判空，new不需要，但是new需要捕获异常 （用法）</li><li>申请自定义类型对象时，malloc/free只会开辟空间，不会调用构造函数与析构函数，而new在申请空间 后会调用构造函数完成对象的初始化，delete在释放空间前会调用析构函数完成空间中资源的清理（底层）</li></ol>\n<h1><a id=\"7__329\"></a>7. 内存泄漏</h1>\n<h2><a id=\"71__331\"></a>7.1 定义与危害</h2>\n<blockquote>\n<p>什么是内存泄漏？</p>\n<p><strong>内存泄漏指因为疏忽或错误造成程序未能释放已经不再使用的内存的情况。内存泄漏并不是指内存在物理上的消失，而是应用程序分配某段内存后，因为设计错误，失去了对该段内存的控制，因而造成了内存的浪费。</strong></p>\n</blockquote>\n<blockquote>\n<p>内存泄漏有什么危害？</p>\n<p><strong>长期运行的程序出现内存泄漏，影响很大，如操作系统、后台服务等等，出现内存泄漏会导致响应越来越慢，最终卡死。</strong></p>\n</blockquote>\n<blockquote>\n<p>问：内存泄漏是指针丢了还是内存丢了？</p>\n<p>答：内存泄漏是指针丢了，指针丢失之后无法再找到原来指针指向的内存空间了，所以造成了内存泄漏，而内存是一直固定的，永远都不会丢失。</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">MemoryLeaks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 1.内存申请了忘记释放</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 2.异常安全问题</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里Func函数抛异常导致 delete[] p3未执行，p3没被释放.</span>\n\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"72__361\"></a>7.2 内存泄漏的分类</h2>\n<p>C/C++程序中一般我们关心两种方面的内存泄漏：</p>\n<ul><li> <p><strong>堆内存泄漏(Heap leak)</strong></p> <p>堆内存指的是程序执行中依据须要分配通过malloc / calloc / realloc / new等从堆中分配的一块内存， 用完后必须通过调用相应的 free或者delete 删掉。假设程序的设计错误导致这部分内存没有被释放，那 么以后这部分空间将无法再被使用，就会产生Heap Leak。</p> </li><li> <p><strong>系统资源泄漏</strong></p> <p>指程序使用系统分配的资源，比方套接字、文件描述符、管道等没有使用对应的函数释放掉，导致系统资源的浪费，严重可导致系统效能减少，系统执行不稳定。</p> </li></ul>\n<h2><a id=\"73__373\"></a>7.3 如何检测内存泄漏</h2>\n<ul><li>在linux下内存泄漏检测：<a href=\"https://blog.csdn.net/gatieme/article/details/51959654\">linux下几款内存泄漏检测工具</a></li><li>在windows下使用第三方工具：<a href=\"https://blog.csdn.net/GZrhaunt/article/details/56839765\">VLD工具说明</a></li><li>其他工具：<a href=\"https://www.cnblogs.com/liangxiaofeng/p/4318499.html\">内存泄漏工具比较</a></li></ul>\n<h2><a id=\"74__379\"></a>7.4 如何避免内存泄漏</h2>\n<blockquote>\n<ol><li>工程前期良好的设计规范，养成良好的编码规范，申请的内存空间记着匹配的去释放。ps：这个理想状 态。但是如果碰上异常时，就算注意释放了，还是可能会出问题。需要下一条智能指针来管理才有保 证。</li><li>采用RAII思想或者智能指针来管理资源。</li><li>有些公司内部规范使用内部实现的私有内存管理库。这套库自带内存泄漏检测的功能选项。</li><li>出问题了使用内存泄漏工具检测。ps：不过很多工具都不够靠谱，或者收费昂贵。</li></ol>\n<p>总结一下:</p>\n<p>内存泄漏非常常见，解决方案分为两种：1、事前预防型。如智能指针等。2、事后查错型。如泄漏检测工 具。</p>\n</blockquote>\n<h2><a id=\"75_4G_390\"></a>7.5 如何一次在堆上申请4G的内存</h2>\n<p>/www.cnblogs.com/liangxiaofeng/p/4318499.html)</p>\n<h2><a id=\"74__394\"></a>7.4 如何避免内存泄漏</h2>\n<blockquote>\n<ol><li>工程前期良好的设计规范，养成良好的编码规范，申请的内存空间记着匹配的去释放。ps：这个理想状 态。但是如果碰上异常时，就算注意释放了，还是可能会出问题。需要下一条智能指针来管理才有保 证。</li><li>采用RAII思想或者智能指针来管理资源。</li><li>有些公司内部规范使用内部实现的私有内存管理库。这套库自带内存泄漏检测的功能选项。</li><li>出问题了使用内存泄漏工具检测。ps：不过很多工具都不够靠谱，或者收费昂贵。</li></ol>\n<p>总结一下:</p>\n<p>内存泄漏非常常见，解决方案分为两种：1、事前预防型。如智能指针等。2、事后查错型。如泄漏检测工 具。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}