{"blogid": "123406329", "writerAge": "码龄4年", "writerBlogNum": "17", "writerCollect": "31", "writerComment": "11", "writerFan": "5", "writerGrade": "2级", "writerIntegral": "209", "writerName": "酒馆店小二", "writerProfileAdress": "writer_image\\profile_123406329.jpg", "writerRankTotal": "128419", "writerRankWeekly": "124880", "writerThumb": "21", "writerVisitNum": "10521", "blog_read_count": "3349", "blog_time": "于 2022-03-10 19:02:52 发布", "blog_title": "C++的四种强制转换", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"1_0\"></a>1.背景</h3>\n<p>大家好，我是酒馆店小二。<br/> C风格的强制转换(Type Cast)容易理解,不管什么类型的转换都可以使用使用下面的方式。</p>\n<pre><code class=\"prism language-cpp\">TypeName res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NewTypeName<span class=\"token punctuation\">)</span>ans<span class=\"token punctuation\">;</span> \n</code></pre>\n<p>当然,C++也是支持C风格的强制转换，但是C风格的强制转换可能带来一些隐患，让一些问题难以察觉。所以C++提供了一组可以用在不同场合的强制转换的函数。</p>\n<h3><a id=\"2const_cast__8\"></a>2.const_cast 常量转换</h3>\n<p>const_cast用于强制去掉不能被修改的常数特性，其去除常量性的对象一般为指针或引用。</p>\n<p>用法：<code>const_cast&lt;new_type&gt; (expression)</code><br/> 该运算符用来修改类型的const或volatile属性。除了const 或volatile修饰之外， new_type和expression的类型是一样的。<br/> 常量指针被转化成非常量指针，并且仍然指向原来的对象；<br/> 常量引用被转换成非常量引用，并且仍然指向原来的对象。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm&gt;</span></span>\n\n<span class=\"token comment\">/*\n* Author: 酒馆店小二\n* Description: c++强制转换\n* Date: 2022-03-10 17:14:56 星期四\n* FileName: Trans.cpp\n* Location: D:\\VSCODE_CPP\\mainshi\\Trans.cpp\n*/</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 原始数组</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>c_ptr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 常量化数组指针</span>\n    <span class=\"token comment\">// c_ptr[1] = 233;   // error，不能通过指针的形式改变数组的值</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>c_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过const_cast&lt;TypeName&gt; 去常量</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 修改数据</span>\n        ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//pass</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 打印修改后的数据</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\874119925b55457f9a89c068bd4c5425.png\"/></p>\n<h3><a id=\"3static_cast__49\"></a>3.static_cast 静态转换（编译时检查）</h3>\n<p>static_cast静态转换相当于C语言中的强制转换，但不能实现普通指针数据（空指针除外）的强制转换，一般用于父类和子类指针、引用间的相互转换。<strong>没有运行时类型检查来保证转换的安全性</strong>。</p>\n<p>①用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。不管是否发生多态，父子之间互转时，编译器都不会报错。</p>\n<p>进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；</p>\n<p>进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的，但是编译器不会报错。</p>\n<p>②用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性也要开发人员来保证。</p>\n<p>③把空指针转换成目标类型的空指针。</p>\n<p>④把任何指针类型转换成空指针类型。</p>\n<p>⑤可以对普通数据的const和non_const进行转换，但不能对普通数据取地址后的指针进行const添加和消去。</p>\n<p>⑥无继承关系的自定义类型，不可转换，不支持类间交叉转换。</p>\n<p>另外，static_cast不能转换掉原有类型的const、volatile、或者 __unaligned属性。(前两种可以使用const_cast 来去除)。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm&gt;</span></span>\n\n<span class=\"token comment\">/*\n* Author: 酒馆店小二\n* Description: c++强制转换\n* Date: 2022-03-10 17:14:56 星期四\n* FileName: Trans.cpp\n* Location: D:\\VSCODE_CPP\\mainshi\\Trans.cpp\n*/</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span><span class=\"token keyword\">public</span> Person <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">My</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 99</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> a0 <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> b0 <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>a0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> b0 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// c</span>\n\n    <span class=\"token comment\">// 父类指针转为子类，下行，编译通过，不安全</span>\n    Person <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    Son <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>Son <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 子类指针转为父类，上行，编译通过，安全</span>\n    Son <span class=\"token operator\">*</span>s0 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    Person <span class=\"token operator\">*</span>p0 <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>Person <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>s0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// My* my= static_cast&lt;My*&gt;(p); 无继承关系的自定义数据类型不能相互转换</span>\n\n    <span class=\"token comment\">//父类对象无法转为子类对象</span>\n    <span class=\"token comment\">// Person p1;</span>\n    <span class=\"token comment\">// Son s1 = static_cast&lt;Son&gt;(p1);</span>\n\n    <span class=\"token comment\">// 子类对象可以赋值，初始化父类对象</span>\n    Son s2<span class=\"token punctuation\">;</span>\n    Person p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 父类引用转为子类，下行，编译通过，不安全</span>\n    Person p_<span class=\"token punctuation\">;</span>\n    Person <span class=\"token operator\">&amp;</span>p3 <span class=\"token operator\">=</span> p_<span class=\"token punctuation\">;</span>\n    Son <span class=\"token operator\">&amp;</span>s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>Son <span class=\"token operator\">&amp;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 子类引用转为父类，上行，编译通过，安全</span>\n    Son s_<span class=\"token punctuation\">;</span>\n    Son <span class=\"token operator\">&amp;</span>s4 <span class=\"token operator\">=</span> s_<span class=\"token punctuation\">;</span>\n    Person <span class=\"token operator\">&amp;</span>p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>Person <span class=\"token operator\">&amp;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 空指针转化为目标类型的指针</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pPtr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>iPtr <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>pPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 任何指针转化为空指针类型</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>aInt <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>aVoid <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>aInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// static_cast不能进行除void外的指针强制互转</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> tmp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// abc</span>\n    <span class=\"token comment\">// cout &lt;&lt; static_cast&lt;int*&gt;(tmp) &lt;&lt; endl; // 不能将char*型的数据转换为int*，但C语言强转可以</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>tmpInt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> tmpInt <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>tmpInt<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>tmpInt<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转为自身可以, 0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 原始数组</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>c_ptr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 常量化数组指针</span>\n    <span class=\"token comment\">// c_ptr[1] = 233;   // error，不能通过指针的形式改变数组的值</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>c_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过const_cast&lt;TypeName&gt; 去常量</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 修改数据</span>\n        ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//pass</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 打印修改后的数据</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> result <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2.5</span>\n\n    <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>dp <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>dp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\n\n    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b1b48dae734c46bbae17b31d71b9629b.png\"/></p>\n<h3><a id=\"4dynamic_cast__179\"></a>4.dynamic_cast 动态转换（运行时检查）</h3>\n<p>动态转换的类型和操作数必须是完整类类型或空指针、空引用，<strong>说人话就是说，只能用于类间转换，支持类间交叉转换，不能操作普通数据。</strong></p>\n<p>主要用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换，</p>\n<p>①进行上行转换（把派生类的指针或引用转换成基类表示）是安全的，允许转换；<br/> ②进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的，不允许转化，编译器会报错；<br/> ③发生多态时，允许互相转换。<br/> ④无继承关系的类之间也可以相互转换，类之间的交叉转换。<br/> ⑤如果dynamic_cast语句的转换目标是指针类型并且失败了，则结果为0。如果转换目标是引用类型并且失败了，则dynamic_cast运算符将抛出一个std::bad_cast异常</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm&gt;</span></span>\n\n<span class=\"token comment\">/*\n* Author: 酒馆店小二\n* Description: dynaimc_cast\n* Date: 2022-03-10 18:16:24 星期四\n* FileName: dynamic_trans.cpp\n* Location: D:\\VSCODE_CPP\\mainshi\\dynamic_trans.cpp\n*/</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I'm Base\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">i_am_virtual_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Base<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I'm Sub\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">i_am_virtual_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    Base base<span class=\"token punctuation\">;</span>\n    Sub sub<span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sub-&gt;Base\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    sub<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Sub<span class=\"token operator\">*</span> ps <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>sub<span class=\"token punctuation\">;</span>\n    Base <span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> <span class=\"token keyword\">dynamic_cast</span><span class=\"token operator\">&lt;</span>Base<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pb <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 上行指针转换成功</span>\n        pb<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&lt;sub-&gt;base&gt; pb val is: \"</span> <span class=\"token operator\">&lt;&lt;</span> pb <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base-&gt;Sub\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    base<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Base <span class=\"token operator\">*</span>pb02 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>base<span class=\"token punctuation\">;</span>\n    Sub  <span class=\"token operator\">*</span>ps02 <span class=\"token operator\">=</span> <span class=\"token keyword\">dynamic_cast</span><span class=\"token operator\">&lt;</span>Sub<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>pb02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps02 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 下行指针转换失败</span>\n        ps02<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"&lt;base-&gt;sub&gt; ps02 val is: \"</span><span class=\"token operator\">&lt;&lt;</span> ps02 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    Base <span class=\"token operator\">&amp;</span>refer <span class=\"token operator\">=</span> base<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Sub <span class=\"token operator\">&amp;</span>d <span class=\"token operator\">=</span> <span class=\"token keyword\">dynamic_cast</span><span class=\"token operator\">&lt;</span>Sub <span class=\"token operator\">&amp;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        d<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> bad_cast <span class=\"token operator\">&amp;</span>ex<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//下行引用转换失败，抛出std::bad_cast异常</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4078c3756704498ea7e43363852fa23b.png\"/></p>\n<h3><a id=\"5reinterpret_cast_268\"></a>5.reinterpret_cast</h3>\n<p>在C++语言中，reinterpret_cast主要有几种强制转换用途：<strong>将指针或引用转换为一个足够长度的整型、将整型转换为指针或引用类型。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdint&gt;</span></span>\n\n<span class=\"token comment\">/*\n* Author: 酒馆店小二\n* Description: reinterpret_cast\n* Date: 2022-03-10 18:53:17 星期四\n* FileName: reinterpert_cast.cpp\n* Location: D:\\VSCODE_CPP\\mainshi\\reinterpert_cast.cpp\n*/</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">233</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">uint64_t</span> ptr_addr <span class=\"token operator\">=</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr's address: \"</span> <span class=\"token operator\">&lt;&lt;</span> hex <span class=\"token operator\">&lt;&lt;</span> ptr <span class=\"token operator\">&lt;&lt;</span> endl\n        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ptr_addr's address: \"</span> <span class=\"token operator\">&lt;&lt;</span> hex <span class=\"token operator\">&lt;&lt;</span> ptr_addr <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0f0187100fcc4eb7a21764014b1dfdfa.png\"/><br/> 月上柳梢头，人约黄昏后。<br/> 2022.3.10</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}