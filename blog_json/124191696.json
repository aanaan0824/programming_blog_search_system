{"blogid": "124191696", "writerAge": "码龄4年", "writerBlogNum": "109", "writerCollect": "285", "writerComment": "25", "writerFan": "2392", "writerGrade": "4级", "writerIntegral": "1180", "writerName": "芯辰大海", "writerProfileAdress": "writer_image\\profile_124191696.jpg", "writerRankTotal": "15668", "writerRankWeekly": "4985", "writerThumb": "63", "writerVisitNum": "113666", "blog_read_count": "3010", "blog_time": "于 2022-04-15 16:37:58 发布", "blog_title": "CMake编译工程/第一个CMakeLists.txt（最详细案例演示）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%9C%A8%20linux%20%E5%B9%B3%E5%8F%B0%E4%B8%8B%E4%BD%BF%E7%94%A8%20CMake%20%E6%9E%84%E5%BB%BAC%2FC%2B%2B%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B5%81%E7%A8%8B%3A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9C%A8%20linux%20%E5%B9%B3%E5%8F%B0%E4%B8%8B%E4%BD%BF%E7%94%A8%20CMake%20%E6%9E%84%E5%BB%BAC%2FC%2B%2B%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B5%81%E7%A8%8B%3A\">在 linux 平台下使用 CMake 构建C/C++工程的流程:</a></p>\n<p id=\"%E5%BD%93%E5%89%8D%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BD%93%E5%89%8D%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">当前项目目录结构</a></p>\n<p id=\"%E6%9C%80%E5%B0%8FCMake%E5%B7%A5%E7%A8%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9C%80%E5%B0%8FCMake%E5%B7%A5%E7%A8%8B\">最小CMake工程</a></p>\n<p id=\"%E8%BF%9B%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B95.3.1%EF%BC%8CVScode%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B65.3.1-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%9B%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B95.3.1%EF%BC%8CVScode%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B65.3.1\">进入文件夹5.3.1，VScode打开项目文件5.3.1</a></p>\n<p id=\"%E5%9C%A8%E9%A1%B9%E7%9B%AE5.3.1%E9%A1%B6%E5%B1%82%E7%9B%AE%E5%BD%95%E4%B8%AD%EF%BC%8CNew%20File%E4%B8%80%E4%B8%AACMakeLists.txt-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9C%A8%E9%A1%B9%E7%9B%AE5.3.1%E9%A1%B6%E5%B1%82%E7%9B%AE%E5%BD%95%E4%B8%AD%EF%BC%8CNew%20File%E4%B8%80%E4%B8%AACMakeLists.txt\">在项目5.3.1顶层目录中，New File一个CMakeLists.txt</a></p>\n<p id=\"%C2%A0%E7%BC%96%E5%86%99CMakeLists.txt-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E7%BC%96%E5%86%99CMakeLists.txt\"> 编写CMakeLists.txt</a></p>\n<p id=\"%E7%BC%96%E8%AF%91CMakeLists.txt(%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%BC%96%E8%AF%91CMakeLists.txt%28%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%89\">编译CMakeLists.txt(两种方式）</a></p>\n<p id=\"%E5%86%85%E9%83%A8%E6%9E%84%E5%BB%BA%EF%BC%88%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%86%85%E9%83%A8%E6%9E%84%E5%BB%BA%EF%BC%88%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%EF%BC%89\">内部构建（不建议使用）</a></p>\n<p id=\"%E5%A4%96%E9%83%A8%E6%9E%84%E5%BB%BA%EF%BC%88%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%A4%96%E9%83%A8%E6%9E%84%E5%BB%BA%EF%BC%88%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%EF%BC%89\">外部构建（推荐使用）</a></p>\n<p id=\"%C2%A0%E5%A4%9A%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%B7%A5%E7%A8%8BCMake%E7%BC%96%E8%AF%91-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E5%A4%9A%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%B7%A5%E7%A8%8BCMake%E7%BC%96%E8%AF%91\"> 多目录文件工程CMake编译</a></p>\n<p id=\"%E5%BD%93%E5%89%8D%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B65.3.2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%BD%93%E5%89%8D%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B65.3.2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">当前工程文件5.3.2目录结构</a></p>\n<p id=\"%E5%9C%A8%E9%A1%B6%E5%B1%82%E7%9B%AE%E5%BD%955.3.2%E5%8D%95%E5%87%BB%E5%8F%B3%E9%94%AE%EF%BC%8CNew%20File%E4%B8%80%E4%B8%AACMakelIsts.txt-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9C%A8%E9%A1%B6%E5%B1%82%E7%9B%AE%E5%BD%955.3.2%E5%8D%95%E5%87%BB%E5%8F%B3%E9%94%AE%EF%BC%8CNew%20File%E4%B8%80%E4%B8%AACMakelIsts.txt\">在顶层目录5.3.2单击右键，New File一个CMakelIsts.txt</a></p>\n<p id=\"%E7%BC%96%E5%86%99%E6%96%87%E4%BB%B6CMakelIsts.txt-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%BC%96%E5%86%99%E6%96%87%E4%BB%B6CMakelIsts.txt\">编写文件CMakelIsts.txt</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"%E5%9C%A8%20linux%20%E5%B9%B3%E5%8F%B0%E4%B8%8B%E4%BD%BF%E7%94%A8%20CMake%20%E6%9E%84%E5%BB%BAC%2FC%2B%2B%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B5%81%E7%A8%8B%3A\">在 linux 平台下使用 CMake 构建C/C++工程的流程:</h2>\n<ul><li>手动<strong>编写 CmakeLists.txt</strong>。</li><li><strong>执行命令 cmake PATH </strong>生成 Makefile ( PATH 是顶层CMakeLists.txt 所在的目录 )。</li><li><strong>执行命令 make</strong> 进行编译。</li></ul>\n<h2 id=\"%E5%BD%93%E5%89%8D%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">当前项目目录结构</h2>\n<p>有两个项目5.3.1和5.3.2</p>\n<p><img alt=\"\" height=\"373\" src=\"image\\d146193b1bc947968bd711cb80f57935.png\" width=\"483\"/></p>\n<p></p>\n<h2 id=\"%E6%9C%80%E5%B0%8FCMake%E5%B7%A5%E7%A8%8B\">最小CMake工程</h2>\n<h3 id=\"%E8%BF%9B%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B95.3.1%EF%BC%8CVScode%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B65.3.1\">进入文件夹5.3.1，VScode打开项目文件5.3.1</h3>\n<p><img alt=\"\" height=\"123\" src=\"image\\c13a9288f61c423cad39cb3db8219d46.png\" width=\"590\"/></p>\n<p><img alt=\"\" height=\"201\" src=\"image\\311e484afaaa455ca8cc19dee0c92c6d.png\" width=\"563\"/></p>\n<h3 id=\"%E5%9C%A8%E9%A1%B9%E7%9B%AE5.3.1%E9%A1%B6%E5%B1%82%E7%9B%AE%E5%BD%95%E4%B8%AD%EF%BC%8CNew%20File%E4%B8%80%E4%B8%AACMakeLists.txt\">在项目5.3.1顶层目录中，New File一个CMakeLists.txt</h3>\n<p> <img alt=\"\" height=\"245\" src=\"image\\3dcd9f70037b475081a98f906e77ddd5.png\" width=\"570\"/></p>\n<h3 id=\"%C2%A0%E7%BC%96%E5%86%99CMakeLists.txt\"> 编写CMakeLists.txt</h3>\n<pre><code>cmake_minimum_required(VERSION 3.0)     #指定 cmake最小版本要求为3.0\n\n project(HELLOWORLD)  #指定项目名称，习惯用大写指定项目名称\n\n #等价于g++  helloworld.cpp -o helloworld；helloworld_cmake帮助区分以前生成的helloword\n #第一个参数指定生成可执行文件名称helloworld_cmake，第二参数要编译的源文件helloworld.cpp\nadd_executable(helloworld_cmake helloworld.cpp)\n</code></pre>\n<p><strong> 注意</strong>：CMakeLists.txt文件的注释是用#</p>\n<p><img alt=\"\" height=\"460\" src=\"image\\01f9c996cd594e2b91ac88342ccdd852.png\" width=\"1200\"/></p>\n<p>可在终端查看当前安装的camke版本信息</p>\n<p><img alt=\"\" height=\"185\" src=\"image\\8635157f53b94f49ac5e1850f374febd.png\" width=\"1200\"/></p>\n<h3 id=\"%E7%BC%96%E8%AF%91CMakeLists.txt(%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%89\">编译CMakeLists.txt(两种方式）</h3>\n<h3 id=\"%E5%86%85%E9%83%A8%E6%9E%84%E5%BB%BA%EF%BC%88%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%EF%BC%89\"><strong>内部构建（不建议使用）</strong></h3>\n<p>内部构建会在同级目录下产生一大堆中间文件，这些中间文件并不是我们最终所需要的，和<br/> 工程源文件放在一起会显得杂乱无章。流程如下：</p>\n<blockquote>\n<p> 内部构建——直接在当前文件夹下编译CMakeLists.txt；<br/> 1 在当前目录下，编译本目录的CMakeLists.txt，生成Makefile和其他文件<br/> 2 cmake .<br/> 3  执行make命令，生成target<br/> 4 make</p>\n</blockquote>\n<p>编译前文件夹目录如下：</p>\n<p><img alt=\"\" height=\"210\" src=\"image\\0e8a2eefa5944bb6a5551f0c6cec05c2.png\" width=\"384\"/></p>\n<p><strong>ctrl+`</strong>打开终端编译CMakeLists.txt，<strong>cmake . </strong>表示对当前目录下的CMakeLists.txt进行编译；</p>\n<p><img alt=\"\" height=\"198\" src=\"image\\b06013750d8e4533816491c35b3b4f50.png\" width=\"571\"/></p>\n<p>编译信息解释：</p>\n<pre><code>HP-virtual-machine:~/c++/5.3/5.3.1$ cmake .\n//下列至Detecting结束，在检测c++编译器\n-- The C compiler identification is GNU 7.5.0\n-- The CXX compiler identification is GNU 7.5.0\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done  //生成配置信息\n-- Generating done   //生成完成\n-- Build files have been written to: /home/hkm/c++/5.3/5.3.1  //说明新建文件被写到了/home/hkm/c++/5.3/5.3.1路径文件夹下</code></pre>\n<p>编译后文件夹目录显示如下：（发现多了很多中间文件，编译前只有3个文件）</p>\n<p><img alt=\"\" height=\"234\" src=\"image\\1342678347d84ec184f33a0ebfeaf1e2.png\" width=\"663\"/></p>\n<p> 对Makefile文件进行make;</p>\n<p><img alt=\"\" height=\"191\" src=\"image\\598f9835c0964ab1a21ea893b2b932ab.png\" width=\"1200\"/></p>\n<p> 编译信息解释：</p>\n<pre><code>HP-virtual-machine:~/c++/5.3/5.3.1$ make\nScanning dependencies of target helloworld_cmake\n[ 50%] Building CXX object CMakeFiles/helloworld_cmake.dir/helloworld.cpp.o //正在构建cpp.o文件\n[100%] Linking CXX executable helloworld_cmake //链接可执行文件helloworld_cmake\n[100%] Built target helloworld_cmake  //生成target,target名字叫helloworld_cmake</code></pre>\n<p> 在文件夹目录下可以看到生成的helloworld_cmake</p>\n<p><img alt=\"\" height=\"538\" src=\"image\\8e6ac98c7b1743ffb0d2fee653102c19.png\" width=\"604\"/></p>\n<p>查看存在两个可执行文件；</p>\n<p><img alt=\"\" height=\"240\" src=\"image\\e779e30710ee4075ac584da72d3e48ac.png\" width=\"603\"/></p>\n<p>执行helloworld_cmake文件；</p>\n<p><img alt=\"\" height=\"94\" src=\"image\\21cca13fda674e32a0725ce3115b0ac8.png\" width=\"620\"/></p>\n<h3 id=\"%E5%A4%96%E9%83%A8%E6%9E%84%E5%BB%BA%EF%BC%88%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%EF%BC%89\"><strong>外部构建（推荐使用）</strong></h3>\n<p>将编译输出文件与源文件放到不同目录中；流程如下：</p>\n<blockquote>\n<p> 外部构建<br/> 1. 在当前目录下，创建build文件夹<br/>  mkdir build<br/> 2. 进入到build文件夹<br/>  cd build<br/> 3. 编译上级目录的CMakeLists.txt，生成Makefile和其他文件<br/>  cmake ..<br/> 4. 执行make命令，生成target<br/> make</p>\n</blockquote>\n<p>删除内部构建生成的中间文件，仅保留构建前的3个文件；</p>\n<p><img alt=\"\" height=\"319\" src=\"image\\c266aaac2a734af3bcf59b11878dea1e.png\" width=\"287\"/></p>\n<p> <img alt=\"\" height=\"194\" src=\"image\\03c48fac57744a338a537469b673594b.png\" width=\"298\"/></p>\n<p>第一步：在当前目录下，创建build文件夹并进入build</p>\n<p><img alt=\"\" height=\"74\" src=\"image\\aee9571f1aa548c4a6fe31bf9970164a.png\" width=\"896\"/></p>\n<p> <img alt=\"\" height=\"186\" src=\"image\\527629a4b5b24edb8b651da87713afe2.png\" width=\"324\"/></p>\n<p>编译CMakeLists.txt，由于现在终端在build文件夹下，CMakeLists.txt在当前路径的上一级目录，因此是cmake . .</p>\n<p><img alt=\"\" height=\"299\" src=\"image\\ab71be38192f48f08109e25b68e5070b.png\" width=\"627\"/></p>\n<p> 执行make命令；</p>\n<p><img alt=\"\" height=\"169\" src=\"image\\52220aa482744330a84e057285cadc14.png\" width=\"1200\"/></p>\n<p> 此时查看，此次生成的中间文件，全部放在build文件下，文件夹目录不再看起来混乱</p>\n<p><img alt=\"\" height=\"161\" src=\"image\\1ace3e1942d9469490e0967c1ed8eb6c.png\" width=\"386\"/></p>\n<p> 点击展开build文件夹显示如下：</p>\n<p><img alt=\"\" height=\"481\" src=\"image\\c6e0724c88e74fdf938b285251270a2f.png\" width=\"561\"/></p>\n<p>执行build文件夹下生成的可执行文件./helloworld_cmake</p>\n<p><img alt=\"\" height=\"75\" src=\"image\\12b0607ff6664017889c28f10d0fae6b.png\" width=\"1200\"/></p>\n<h2 id=\"%C2%A0%E5%A4%9A%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%B7%A5%E7%A8%8BCMake%E7%BC%96%E8%AF%91\"> 多目录文件工程CMake编译</h2>\n<h3 id=\"%E5%BD%93%E5%89%8D%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B65.3.2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">当前工程文件5.3.2目录结构</h3>\n<p><img alt=\"\" height=\"479\" src=\"image\\af43098b58854c79b822ef44a57df2be.png\" width=\"567\"/></p>\n<h3 id=\"%E5%9C%A8%E9%A1%B6%E5%B1%82%E7%9B%AE%E5%BD%955.3.2%E5%8D%95%E5%87%BB%E5%8F%B3%E9%94%AE%EF%BC%8CNew%20File%E4%B8%80%E4%B8%AACMakelIsts.txt\">在顶层目录5.3.2单击右键，New File一个CMakelIsts.txt</h3>\n<p><img alt=\"\" height=\"196\" src=\"image\\bd07c3b8965b45dcbb6cab515e906c66.png\" width=\"558\"/></p>\n<h3 id=\"%E7%BC%96%E5%86%99%E6%96%87%E4%BB%B6CMakelIsts.txt\">编写文件CMakelIsts.txt</h3>\n<pre><code>cmake_minimum_required(VERSION 3.0)\n\nproject(SWAP)\n\n#等价于g++ main.cpp src/swap.cpp -Iinclude -o  main中的-Iinclude头文件搜索路径\ninclude_directories(include)\n#等价于g++ main.cpp src/swap.cpp -Iinclude -o  main_cmake\nadd_executable(main_cmake main.cpp src/swap.cpp)\n</code></pre>\n<p><img alt=\"\" height=\"473\" src=\"image\\27693aeb60f24c0ab1b683974ca4615f.png\" width=\"1200\"/></p>\n<h3> 在当前目录下，创建build文件夹 mkdir build；进入到build文件夹 cd build</h3>\n<p><img alt=\"\" height=\"485\" src=\"image\\a471cb3fd24f44af9c0639bd12f8635b.png\" width=\"554\"/></p>\n<h3>  编译上级目录的CMakeLists.txt，生成Makefile和其他文件 cmake ..</h3>\n<p> <img alt=\"\" height=\"333\" src=\"image\\e602b0e1a37d4983815e9331feaa39cb.png\" width=\"587\"/></p>\n<h3>执行make命令；生成target文件</h3>\n<p><img alt=\"\" height=\"510\" src=\"image\\d232167a66d544fa8c95f4f1e0b9aec5.png\" width=\"637\"/></p>\n<p> 执行生成的可执行文件main_cmake； 可见，无论用cmake还是g++进行构建，效果一致；<img alt=\"\" height=\"517\" src=\"image\\43cd4f683c0c4fdcb39aa53fdcb9b88c.png\" width=\"1189\"/></p>\n<p> </p>\n</div>\n</div>"}