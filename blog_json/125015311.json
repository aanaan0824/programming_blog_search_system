{"blogid": "125015311", "writerAge": "码龄168天", "writerBlogNum": "55", "writerCollect": "317", "writerComment": "25", "writerFan": "51", "writerGrade": "3级", "writerIntegral": "784", "writerName": "程序员jiejie", "writerProfileAdress": "writer_image\\profile_125015311.jpg", "writerRankTotal": "36802", "writerRankWeekly": "283607", "writerThumb": "31", "writerVisitNum": "41044", "blog_read_count": "7947", "blog_time": "于 2022-05-28 10:30:32 发布", "blog_title": "值得苦练的100道Python经典练手题，（附详细答案）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>嗨喽大家好卷子又来了，100道Python经典练手题奉上</p>\n<p>花了一周的时间，整理了100道Python的练习题，如果你是一位初学者，那么这一份练习题将会给你带来极大的帮助，如果你能够完全独立的完成这份练习题，你已经入门的Python了，练习题涵盖Python基础的大部分内容：</p>\n<p><a class=\"has-card\" href=\"https://mp.weixin.qq.com/s/wJKG2AsaCQxQhpK-rf2qwQ\" title=\"Python100经典练习题，附答案\"><span class=\"link-card-box\"><span class=\"link-title\">Python100经典练习题，附答案</span><span class=\"link-desc\">很多小伙伴在学习Python的时候，有时候会迷茫，不知道怎么可以检测出自己的水平是否很高，这次给大家带了这1</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://res.wx.qq.com/a/wx_fed/assets/res/NTI4MWU5.ico\"/>https://mp.weixin.qq.com/s/wJKG2AsaCQxQhpK-rf2qwQ</span></span></a><strong>问题1</strong></p>\n<h3><strong>问题：</strong></h3>\n<blockquote>\n<strong><em>编写一个程序，查找所有此类数字，它们可以被7整除，但不能是5的倍数（在2000和3200之间（均包括在内））。获得的数字应以逗号分隔的顺序打印在一行上。</em></strong>\n</blockquote>\n<h3><strong>提示：</strong></h3>\n<blockquote>\n<strong><em>考虑使用范围（＃begin，＃end）方法。</em></strong>\n</blockquote>\n<p><strong>我的解决方案：Python 3</strong></p>\n<ul><li> <p><strong>使用for循环</strong></p> </li></ul>\n<pre><code>l=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint ','.join(l)</code></pre>\n<ul><li> <p><strong>使用生成器和列表理解</strong></p> </li></ul>\n<pre><code>print(*(i for i in range(2000, 3201) if i%7 == 0 and i%5 != 0), sep=\",\")</code></pre>\n<h2><strong>问题2</strong></h2>\n<h3><strong>问题：</strong></h3>\n<blockquote>\n<strong><em>编写一个程序，可以计算给定数字的阶乘，结果应以逗号分隔的顺序打印在一行上，假设向程序提供了以下输入：8然后，输出应为：40320</em></strong>\n</blockquote>\n<h3><strong>提示：</strong></h3>\n<blockquote>\n<strong><em>如果将输入数据提供给问题，则应假定它是控制台输入。</em></strong>\n</blockquote>\n<p><strong>我的解决方案：Python 3</strong></p>\n<ul><li> <p><strong>使用While循环</strong><br/> n = int(input()) #input() function takes input as string type<br/> #int() converts it to integer type<br/> fact = 1<br/> i = 1<br/> while i &lt;= n:<br/> fact = fact * i;<br/> i = i + 1<br/> print(fact)</p> </li><li> <p><strong>使用For循环</strong><br/> n = int(input()) #input() function takes input as string type<br/> #int() converts it to integer type<br/> fact = 1<br/> for i in range(1,n+1):<br/> fact = fact * i<br/> print(fact)</p> </li><li> <p><strong>使用Lambda函数</strong><br/> n = int(input())<br/> def shortFact(x): return 1 if x &lt;= 1 else x*shortFact(x-1)<br/> print(shortFact(n))</p> </li></ul>\n<pre><code>while True:\ntry:\n    num = int(input(\"Enter a number: \"))\n    break\nexcept ValueError as err:\n    print(err)\n\norg = num\nfact = 1\nwhile num:\n    fact = num * fact\n    num = num - 1\nprint(f'the factorial of {org} is {fact}')</code></pre>\n<pre><code>from functools import reduce\n\ndef fun(acc, item):\n    return acc*item\n\nnum = int(input())\nprint(reduce(fun,range(1, num+1), 1))</code></pre>\n<h2><strong>问题3</strong></h2>\n<h3><strong>问题：</strong></h3>\n<blockquote>\n 使用给定的整数n，编写程序以生成包含（i，ixi）的字典，该字典为1到n之间的整数（都包括在内）。然后程序应打印字典。假设向程序提供了以下输入：8\\\n <br/> 然后，输出应为：\n</blockquote>\n<pre><code>{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}</code></pre>\n<h3><strong>提示：</strong></h3>\n<blockquote>\n<strong><em>如果将输入数据提供给问题，则应假定它是控制台输入。考虑使用dict（）</em></strong>\n</blockquote>\n<p><strong>我的解决方案：Python 3：</strong></p>\n<ul><li> <p><strong>使用for循环</strong></p> </li></ul>\n<pre><code>n = int(input())\nans = {}\nfor i in range (1,n+1):\n    ans[i] = i * i\nprint(ans)</code></pre>\n<ul><li> <p><strong>使用字典理解</strong></p> </li></ul>\n<pre><code>n = int(input())\nans={i : i*i for i in range(1,n+1)}\nprint(ans)\n# 演进\ntry:\n    num = int(input(\"Enter a number: \"))\nexcept ValueError as err:\n    print(err)\n\ndictio = dict()\nfor item in range(num+1):\n    if item == 0:\n        continue\n    else:\n\tdictio[item] = item * item\nprint(dictio)</code></pre>\n<pre><code>num = int(input(\"Number: \"))\nprint(dict(enumerate([i*i for i in range(1, num+1)], 1)))</code></pre>\n<p><strong><em>这些是第一天解决的问题。对于基本的初学者学习者来说，上述问题非常容易。我在解决方案中展示了一些简单的编码方法。让我们看看第二天如何面对和应对新问题。</em></strong></p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\d3e6af10ab8a33cb120ad60f71baf572.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\58c495c9180cad1fe4918c09991a5f9c.png\"/></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\756839242a185569c9064f699f1fd34c.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\08d62716f5525b5869f0daa9e3dbdd27.png\"/></p>\n<p><strong>问题</strong></p>\n<blockquote>\n<strong><em>编写一个程序，该程序接受以逗号分隔的4位二进制数字序列作为输入，然后检查它们是否可被5整除。被5整除的数字将以逗号分隔的顺序打印。</em></strong>\n<br/>\n<strong><em>例子：</em></strong>\n</blockquote>\n<pre><code>0100,0011,1010,1001</code></pre>\n<blockquote>\n<strong><em>然后输出应为：</em></strong>\n</blockquote>\n<pre><code>1010</code></pre>\n<blockquote>\n<strong><em>注意：假设数据是通过控制台输入的。</em></strong>\n</blockquote>\n<h3><strong>提示：</strong></h3>\n<blockquote>\n<strong><em>如果将输入数据提供给问题，则应假定它是控制台输入。</em></strong>\n</blockquote>\n<pre><code>def check(x):                       #转换二进制整数＆返回由5零中频整除\n    total, pw = 0, 1\n    reversed(x)\n\n    for i in x:\n        total+=pw * (ord(i) - 48)    #ORD（）函数返回ASCII值\n        pw*=2\n    return total % 5\n\ndata = input().split(\",\")           ＃输入此处，并在'，'位置分割\nlst = []\n\n\n\nfor i in data:\n    if check(i) == 0:              ＃如果零发现它是指由零整除并添加到列\t\tlst.append(i)\n\nprint(\",\".join(lst))</code></pre>\n<p><strong>或者</strong></p>\n<pre><code>def  check（x）：＃如果被5整除，则check函数返回true \n    return  int（x，2）％5  ==  0       ＃int（x，b）将x作为字符串，将b作为基数，\n                                ＃将其转换为十进制\n数据 = 输入（）。分割（'，'）\n\ndata  =  list（filter（check（data）））＃在filter（func，object）函数中，如果通过'check'函数\nprint（“，”。join（data）找到True，则从'data'中选取元素。</code></pre>\n<p><strong>或者</strong></p>\n<pre><code>data = input().split(',')\ndata = [num for num in data if int(num, 2) % 5 == 0]\nprint(','.join(data))</code></pre>\n<h2><strong>问题12</strong></h2>\n<h3><strong>问题：</strong></h3>\n<blockquote>\n<strong><em>编写一个程序，查找所有介于1000和3000之间的数字（都包括在内），以使数字的每个数字均为偶数。获得的数字应以逗号分隔的顺序打印在一行上。</em></strong>\n</blockquote>\n<h3><strong>提示：</strong></h3>\n<blockquote>\n<strong><em>如果将输入数据提供给问题，则应假定它是控制台输入。</em></strong>\n</blockquote>\n<p><strong>我的解决方案：Python 3</strong></p>\n<pre><code>lst = []\n\nfor i in range(1000,3001):\n    flag = 1\n    for j in str(i):         ＃每个整数编号i被转换成字符串\n    \n        if ord(j)%2 != 0:     ＃ORD返回ASCII值并且j是i\n            flag = 0          \n    if flag == 1:\n        lst.append(str(i))   ＃i作为字符串存储在列表中\n\nprint(\",\".join(lst))</code></pre>\n<p><strong>或者</strong></p>\n<pre><code>def check(element):\n    return all(ord(i)%2 == 0 for i in element)  ＃所有返回true如果所有的数字，i是即使在元件\n\nlst = [str(i) for i in range(1000,3001)]        ＃创建所有给定数字的列表，其字符串数据类型为\nlst = list(filter(check,lst))                   ＃如果检查条件失败，则过滤器从列表中删除元素\nprint(\",\".join(lst))\nlst = [str(i) for i in range(1000,3001)]\nlst = list(filter(lambda i:all(ord(j)%2 == 0 for j in i), lst))   ＃使用lambda来在过滤器功能内部定义函数\nprint(\",\".join(lst))</code></pre>\n<h2><strong>问题13</strong></h2>\n<h3><strong>问题：</strong></h3>\n<blockquote>\n<strong><em>编写一个接受句子并计算字母和数字数量的程序。</em></strong>\n<br/>\n<strong><em>假设将以下输入提供给程序：</em></strong>\n</blockquote>\n<pre><code>hello world! 123</code></pre>\n<blockquote>\n<strong><em>然后，输出应为：</em></strong>\n</blockquote>\n<pre><code>LETTERS 10\nDIGITS 3</code></pre>\n<h3><strong>提示：</strong></h3>\n<blockquote>\n<strong><em>如果将输入数据提供给问题，则应假定它是控制台输入。</em></strong>\n</blockquote>\n<pre><code>word = input()\nletter,digit = 0,0\n\nfor i in word:\n    if ('a'&lt;=i and i&lt;='z') or ('A'&lt;=i and i&lt;='Z'):\n        letter+=1\n    if '0'&lt;=i and i&lt;='9':\n        digit+=1\n\nprint(\"LETTERS {0}\\nDIGITS {1}\".format(letter,digit))</code></pre>\n<p><strong>或者</strong></p>\n<pre><code>word = input()\nletter, digit = 0,0\n\nfor i in word:\n    if i.isalpha(): ＃返回true如果字母表\n        letter += 1\n    elif i.isnumeric(): ＃返回true如果数字\n        digit += 1\nprint(f\"LETTERS {letter}\\n{digits}\") ＃两种解决方案均显示两种不同类型的格式化方法</code></pre>\n<p><strong><em>10-13以上所有问题大多是与字符串有关的问题。解决方案的主要部分包括字符串替换函数和理解方法，以更短的形式写下代码。</em></strong></p>\n<h2><strong>问题14</strong></h2>\n<h3><strong>问题：</strong></h3>\n<blockquote>\n<strong><em>编写一个接受句子的程序，并计算大写字母和小写字母的数量。</em></strong>\n<br/>\n<strong><em>假设将以下输入提供给程序：</em></strong>\n</blockquote>\n<pre><code>Hello world!</code></pre>\n<blockquote>\n<strong><em>然后，输出应为：</em></strong>\n</blockquote>\n<pre><code>UPPER CASE 1\nLOWER CASE 9</code></pre>\n<h3><strong>提示：</strong></h3>\n<blockquote>\n<strong><em>如果将输入数据提供给问题，则应假定它是控制台输入。</em></strong>\n</blockquote>\n<p><strong>我的解决方案：Python 3</strong></p>\n<pre><code>word = input()\nupper,lower = 0,0\n\nfor i in word:\n    if 'a'&lt;=i and i&lt;='z' :\n        lower+=1\n    if 'A'&lt;=i and i&lt;='Z':\n        upper+=1\n\nprint(\"UPPER CASE {0}\\nLOWER CASE {1}\".format(upper,lower))</code></pre>\n<p><strong>或者</strong></p>\n<pre><code>word = input()\nupper,lower = 0,0\n\nfor i in word:\n        lower+=i.islower()\n        upper+=i.isupper()\n\nprint(\"UPPER CASE {0}\\nLOWER CASE {1}\".format(upper,lower))</code></pre>\n<p><strong>或者</strong></p>\n<pre><code>string = input(\"Enter the sentense\")\nupper = 0\nlower = 0\nfor x in string:\n    if x.isupper() == True:\n        upper += 1\n    if x.islower() == True:\n        lower += 1\n\nprint(\"UPPER CASE: \", upper)\nprint(\"LOWER CASE: \", lower)</code></pre>\n<p><a class=\"has-card\" href=\"https://mp.weixin.qq.com/s/wJKG2AsaCQxQhpK-rf2qwQ\" title=\"Python100经典练习题，附答案\"><span class=\"link-card-box\"><span class=\"link-title\">Python100经典练习题，附答案</span><span class=\"link-desc\">很多小伙伴在学习Python的时候，有时候会迷茫，不知道怎么可以检测出自己的水平是否很高，这次给大家带了这1</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://res.wx.qq.com/a/wx_fed/assets/res/NTI4MWU5.ico\"/>https://mp.weixin.qq.com/s/wJKG2AsaCQxQhpK-rf2qwQ</span></span></a></p>\n</div>\n</div>"}