{"blogid": "124182319", "writerAge": "码龄2年", "writerBlogNum": "9", "writerCollect": "257", "writerComment": "66", "writerFan": "684", "writerGrade": "2级", "writerIntegral": "271", "writerName": "成都_小吴", "writerProfileAdress": "writer_image\\profile_124182319.jpg", "writerRankTotal": "48414", "writerRankWeekly": "163654", "writerThumb": "73", "writerVisitNum": "28500", "blog_read_count": "5454", "blog_time": "已于 2022-06-08 09:18:51 修改", "blog_title": "TensorRT部署YOLOv5(VS和Cmake两种方式)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>     终于在大哥的指导下完成了此次任务，我的Cmake编译差不多是复现<a class=\"link-info\" href=\"https://blog.csdn.net/wsp_1138886114/article/details/121718501?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164994235616782246458122%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164994235616782246458122&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-121718501.142%5Ev8%5Earticle_score_rank,157%5Ev4%5Enew_style&amp;utm_term=tensort%E9%83%A8%E7%BD%B2yolov5&amp;spm=1018.2226.3001.4187\" title=\"大哥的文章\">大哥的文章</a>，解决一些意外的错误，我的VS编译是根据另外几个<a class=\"link-info\" href=\"https://blog.csdn.net/sxj731533730/article/details/115230177\" title=\"博主\">博主</a>的启发下完成，很多文章只是单独的写了VS或者cmake进行编译进行检测，自我感觉VS进行模型转换编译都比较顺利没有出现什么错误，大家可以先从VS编译开始，如果大家喜欢使用cmake也可以直接进入第二部分。RTX2060下使用yolov5s.engine进行推理可以达到5ms的速度，精度确实有所下降，但是使用yolov5l.engine精度不但有所提升速度也可以达到10ms,总体来说还是不错的。</p>\n<p>看看yolov5l.engine的效果吧，yolov5s.engine速度太快了！</p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"J1qSt8mR-1650005761512\" src=\"https://live.csdn.net/v/embed/198436\"></iframe>\n<p>1</p>\n</div>\n<p>    建议在某个磁盘下面新建一个文件夹命名为：tensorRT之类的，将以下所有用到的东西都下载到该文件夹如图所示：</p>\n<p></p>\n<p><img alt=\"\" height=\"359\" src=\"image\\1b6a7036b5bc4b39a4110df647c98784.png\" width=\"726\"/></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80.%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80.%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87\">一.前期准备</a></p>\n<p id=\"%E4%BA%8C.%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C.%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">二.环境配置</a></p>\n<p id=\"%E4%B8%89.VS%E7%BC%96%E8%AF%91-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89.VS%E7%BC%96%E8%AF%91\">三.VS编译</a></p>\n<p id=\"%E5%9B%9B.Cmake%E7%BC%96%E8%AF%91-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B.Cmake%E7%BC%96%E8%AF%91\">四.Cmake编译</a></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E4%B8%80.%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87\">一.前期准备</h1>\n<p>我的电脑是RTX2060+win10+vs2019;</p>\n<p>1.VS2019的下载：</p>\n<p><a href=\"https://my.visualstudio.com/Downloads?q=visual%20studio%202019&amp;wt.mc_id=o~msft~vscom~older-downloads\" title=\"Downloads - Visual Studio Subscriptions Portal\">Downloads - Visual Studio Subscriptions Portal</a>直接点击进入下载页面；</p>\n<p><img alt=\"\" height=\"156\" src=\"image\\8ecab096c8d7429b9f48a9e333c4e947.png\" width=\"1200\"/></p>\n<p> 2.opencv3.4.1的下载：</p>\n<p><a href=\"https://sourceforge.net/projects/opencvlibrary/files/opencv-win/3.4.1/opencv-3.4.1-vc14_vc15.exe/download\" title=\"Download OpenCV from SourceForge.net\">Download OpenCV from SourceForge.net</a>直接点击进入下载页面；</p>\n<p>3.cmake3.19.1的下载</p>\n<p><a href=\"https://cmake.org/files/v3.19/\" title=\"Index of /files/v3.19 (cmake.org)\">Index of /files/v3.19 (cmake.org)</a>直接点击进入下载页面；</p>\n<p><img alt=\"\" height=\"54\" src=\"image\\b7155c3922d64a36a5687282d201cf16.png\" width=\"406\"/></p>\n<p>4.CUDA、CUDNN、TensorRT的下载：</p>\n<p>这三个都是对应的版本所以我这里直接下载大哥的，你们也可以自己去官网下载对应版本：</p>\n<p>TensorRT：<a href=\"https://developer.nvidia.cn/nvidia-tensorrt-download\" title=\"https://developer.nvidia.cn/nvidia-tensorrt-download\">https://developer.nvidia.cn/nvidia-tensorrt-download</a></p>\n<p>cudnn：<a href=\"https://developer.nvidia.cn/rdp/cudnn-archive\" title=\"https://developer.nvidia.cn/rdp/cudnn-archive\">https://developer.nvidia.cn/rdp/cudnn-archive</a></p>\n<p>CUDA：<a href=\"https://developer.nvidia.cn/cuda-toolkit-archive\" title=\"https://developer.nvidia.cn/cuda-toolkit-archive\">https://developer.nvidia.cn/cuda-toolkit-archive</a></p>\n<p>songpingwang的百度网盘下载链接：链接：<a href=\"https://pan.baidu.com/s/1GRRurFcoLw6UnC1CQp7_Gw\" title=\"百度网盘 请输入提取码\">百度网盘 请输入提取码</a><br/> 提取码：3zgc</p>\n<p><img alt=\"\" height=\"79\" src=\"image\\bf2da3583ccc46ee9b0a1c6296a8d55b.png\" width=\"645\"/></p>\n<p> 5.yolov5源码、yolov5权重文件、dirent.h文件、tensorrtx源码；</p>\n<p>我使用的是yolov5.4.0版本、yolov5s;</p>\n<p>下载yolov5源码：</p>\n<p><a href=\"https://github.com/ultralytics/yolov5/tags\" title=\"https://github.com/ultralytics/yolov5/tags\">https://github.com/ultralytics/yolov5/tags</a><br/> 下载yolov5权重：</p>\n<p><a href=\"https://github.com/ultralytics/yolov5/releases\" title=\"Releases · ultralytics/yolov5 · GitHub\">Releases · ultralytics/yolov5 · GitHub</a><br/> 下载dirent.h：</p>\n<p><a href=\"https://github.com/tronkko/dirent/blob/master/include/dirent.h\" title=\"dirent/dirent.h at master · tronkko/dirent · GitHub\">dirent/dirent.h at master · tronkko/dirent · GitHub</a> 或者 <a href=\"https://cdn.jsdelivr.net/gh/tronkko/dirent@master/include/dirent.h\" title=\"点击下载\">点击下载</a><br/> 下载tensorrtx：</p>\n<p><a href=\"https://github.com/wang-xinyu/tensorrtx/tags\" title=\"Tags · wang-xinyu/tensorrtx · GitHub\">Tags · wang-xinyu/tensorrtx · GitHub</a>  （与自己训练的yolov5-xx版本一致）</p>\n<h1 id=\"%E4%BA%8C.%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">二.环境配置</h1>\n<p><strong>1.这里大家应该先安装VS再安装CUDA，这样VS才能识别到cuda的存在，如果已经安装了cuda但是识别不到则需要卸载重新安装，安装cuda时选择自定义安装，安装路径默认在C盘不用管。测试cuda是否安装成功：win+R输入CMD，在终端输入nvcc -V.</strong></p>\n<p><img alt=\"\" height=\"119\" src=\"image\\ad981e9b979c49e4aa5939774694f306.png\" width=\"480\"/></p>\n<p> 将cudnn和TensorRT_cuda_cudnn解压，把对应的bin、lib(X64)、include内容复制到C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2对应的文件夹下面：</p>\n<p><img alt=\"\" height=\"268\" src=\"image\\055aba47ef404402b5f3b85e055b3371.png\" width=\"539\"/></p>\n<p><img alt=\"\" height=\"323\" src=\"image\\2ca70074259547329f720362984f168b.png\" width=\"636\"/></p>\n<p> 加入环境变量： 右键点击此电脑，打开属性—&gt;高级系统设置—&gt;环境变量，可以看到系统变量中多了CUDA_PATH和CUDA_PATH_V10_2两个环境变量（CUDA默认安装位置路径为：C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v10.2）：</p>\n<p><img alt=\"\" height=\"186\" src=\"image\\d0260e39e963432c9f470c09fad8d417.png\" width=\"574\"/></p>\n<p> 在此页面点击新建：</p>\n<p><img alt=\"\" height=\"190\" src=\"image\\395647397e1e4737b951ecacef84431c.png\" width=\"667\"/></p>\n<p> 加入以下：</p>\n<pre><code class=\"language-python\">CUDA_SDK_PATH = C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v10.2\nCUDA_LIB_PATH = %CUDA_PATH%\\lib\\x64\nCUDA_BIN_PATH = %CUDA_PATH%\\bin\nCUDA_SDK_BIN_PATH = %CUDA_SDK_PATH%\\bin\\win64\nCUDA_SDK_LIB_PATH = %CUDA_SDK_PATH%\\common\\lib\\x64\n</code></pre>\n<p>在系统变量中双击打开Path变量， 在其末尾添加如下指令路径：</p>\n<pre><code>%CUDA_LIB_PATH%;%CUDA_BIN_PATH%;%CUDA_SDK_LIB_PATH%;%CUDA_SDK_BIN_PATH%;\n\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\lib\\x64\n\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\include\n\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\extras\\CUPTI\\lib64\n\nC:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v10.2\\bin\\win64\n\nC:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v10.2\\common\\lib\\x64\n#加入cudnn和tensorRT的BIN目录\nD:\\yolov5_tensort\\TensorRT-7.2.3.4.Windows10.x86_64.cuda-10.2.cudnn8.1\\TensorRT-7.2.3.4\\bin\n\nD:\\yolov5_tensort\\cudnn-10.2-windows10-x64-v8.1.1.33\\cuda\\bin</code></pre>\n<p>下载opencv并进行环境变量添加：</p>\n<pre><code>D:\\yolov5_tensort\\opencv\\build\\x64\\vc15\\bin</code></pre>\n<pre><code>D:\\yolov5_tensort\\opencv\\build\\bin</code></pre>\n<h1 id=\"%E4%B8%89.VS%E7%BC%96%E8%AF%91\">三.VS编译</h1>\n<p>在tensort文件夹新建一个文件夹命名为yolov5_trt，打开VS创建新项目，点击空项目，</p>\n<p><img alt=\"\" height=\"461\" src=\"image\\1756f30f31b64535bfa9e9c9570a6211.png\" width=\"791\"/></p>\n<p> 将tensorrtx-master\\<a href=\"https://so.csdn.net/so/search?q=yolov5&amp;spm=1001.2101.3001.7020\" title=\"yolov5\">yolov5</a>文件夹下的文件拷贝到创建的项目工程中(与yolov5_Trt.vcxproj在同一路径)</p>\n<p><img alt=\"\" height=\"586\" src=\"image\\a1dab7816fa64d52bcf78a2dbf4e4437.png\" width=\"699\"/></p>\n<p> 将此文件的内容复制到：</p>\n<p><img alt=\"\" height=\"589\" src=\"image\\353cf9f44374444fbceb6549c8933e7f.png\" width=\"712\"/></p>\n<p> 将文件添加到工程中可以直接拖拽，也可以右键点击添加现有文件：</p>\n<p><img alt=\"\" height=\"593\" src=\"image\\7f09adf97491467c8feb0d4a52b428fa.png\" width=\"403\"/></p>\n<p> 右键项目--属性--VC++目录：</p>\n<p>添加包含目录:</p>\n<pre><code>C:\\work\\TensorRT-7.2.3.4\\include\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\include\nC:\\work\\Opencv3.4.1\\opencv\\build\\include\nC:\\work\\Opencv3.4.1\\opencv\\build\\include\\opencv2\n</code></pre>\n<p>库目录：</p>\n<pre><code>C:\\work\\TensorRT-7.2.3.4\\lib\nC:\\work\\Opencv3.4.1\\opencv\\build\\x64\\vc15\\lib\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\lib\\x64\n</code></pre>\n<p>点击连接器----输入----添加附加依赖项：</p>\n<pre><code>cudart.lib\ncublas.lib\ncudnn.lib\ncudnn64_8.lib\nmyelin64_1.lib\nnvinfer.lib\nnvinfer_plugin.lib\nnvonnxparser.lib\nnvparsers.lib\nopencv_world341.lib\t\t//opencv版本不同就不一样\n</code></pre>\n<p>将opencv同目录下LIB的dll文件拷贝到C:\\Windows\\System32；</p>\n<p>右键属性----生成依赖项——生成自定义，勾选CUDA10.2；点击第一个就够了，如果都勾选会报错；</p>\n<p><img alt=\"\" height=\"363\" src=\"image\\13934bf4cb31455c99e523ae6f38f58d.png\" width=\"602\"/></p>\n<p> 右键.cu文件——常规——修改项类型为CUDAC/C++</p>\n<p><img alt=\"\" height=\"253\" src=\"image\\f2b44156001c4a8db707b453e8c02789.png\" width=\"334\"/><img alt=\"\" height=\"235\" src=\"image\\218bfc488fcb4fdca7c9b02bd534de2d.png\" width=\"339\"/></p>\n<p> OK,快完工了，我们需要把yolov5s.pt——yolov5s.wts——yolov5s.engine;</p>\n<p>首先将该工层的gen_wts.py复制到yolov5.4.0的根目录下面运行产生yolov5s.wts</p>\n<p><img alt=\"\" height=\"293\" src=\"image\\d076c8bc6d4b48859443c834d89d558b.png\" width=\"480\"/></p>\n<p> 将生成的wts文件复制到此工程下面：修改命令参数为 <code>-s yolov5s.wts yolov5s.engine s</code></p>\n<p> 右键项目——属性——调试：命令参数：</p>\n<p><img alt=\"\" height=\"401\" src=\"image\\645acbeea97943ac861513eb688c25dd.png\" width=\"578\"/></p>\n<p> 我的是在release模式下进行编译的，可能会出现以下错误：</p>\n<p>1.</p>\n<pre><code>C4996'localtime': This function or variable may be unsafe\n解决方法：在第一行YOLO.CPP添加\n#pragma warning(disable:4996)\n\n</code></pre>\n<p>2.</p>\n<pre><code>const char类型的值不能用于初始化char\n解决方法：\n项目-&gt;属性-&gt;C/C+±&gt;语言-&gt;符合模式，将原来的“是”改为“否”</code></pre>\n<p> 3.</p>\n<pre><code>无法打开包括文件: “dirent.h”\n解决方法：\n将dirent.h放在工程目录下，但是我还是识别不了，于是在 项目——yolov5_Trt属性——VC++目录——包含目录 下添加我的工程目录。</code></pre>\n<p> 4.</p>\n<pre><code>[E] [TRT] Could not compute dimensions for (Unnamed Layer* 475) [Convolution]_output, because the network is not valid.\n\n解决方案：\nyololayer.h中 修改static constexpr int CLASS_NUM = 2（你的分类数）;默认是80</code></pre>\n<p>5.</p>\n<pre><code>_CRT_SECURE_NO_WARNINGS错误\n\n在 项目-&gt;属性-&gt;C/C++-&gt;预处理器-&gt;预处理器定义中添加_CRT_SECURE_NO_WARNINGS</code></pre>\n<p>运行成功后会在此工程下面生成yolov5s.engine大家可以修改命令进行检测了：在此工程下面新建samples文件夹，这个下面放几张图片，</p>\n<p><img alt=\"\" height=\"176\" src=\"image\\9c80a922228c4e92aaed1764522d677b.png\" width=\"463\"/></p>\n<p>d yolov5s.engine ./samples运行成功后会在工程下面出现检测结果和终端出现推理时间：</p>\n<p><img alt=\"\" height=\"434\" src=\"image\\97ca1ffc6a1d4693bed8a3ab2b8db9b8.png\" width=\"499\"/></p>\n<p>如果大家想调用摄像头进行检测可以大家直接去<a class=\"link-info\" href=\"https://blog.csdn.net/hahasl555/article/details/117304022?spm=1001.2014.3001.5502\" title=\"原博主\">原博主</a>查看。</p>\n<p>修改yolov5.cpp，直接调用博主的代码，项目——yolov5_Trt属性——调试 修改命令参数为-v yolov5s.engine。</p>\n<p>错误1</p>\n<pre><code>会出现错误：\"const char *\" 类型的值不能用于初始化 \"char *\" 类型的实体\n解决方案：在项目上右键，选择“属性”,选择“C/C++”,然后在“语言”中，把“符合模式”改为“否”就好了</code></pre>\n<p><img alt=\"\" height=\"243\" src=\"image\\92e4e4116322400bb9d54e0e70340de8.png\" width=\"406\"/></p>\n<h1 id=\"%E5%9B%9B.Cmake%E7%BC%96%E8%AF%91\">四.Cmake编译</h1>\n<p>将下载的cmake下的bin目录导入环境变量：</p>\n<p><img alt=\"\" height=\"194\" src=\"image\\da67e444f292459487667b4cf2be9eb1.png\" width=\"714\"/></p>\n<p>tensorRT中yolov5的工程；</p>\n<p><img alt=\"\" height=\"435\" src=\"image\\b570b2aa8d5243cfae018b6959b86ebf.png\" width=\"541\"/></p>\n<p>在此工程中建立一个文件叫build,同样把下载的dirent.h文件放在此工程下；</p>\n<p>点击cmakefile.txt:原本此文件是linux 系统下的，所以我们需要修改如下：</p>\n<pre><code>cmake_minimum_required(VERSION 2.8)\n\n#=========================================================\nproject(yolov5)                                 #1 工程名\nset(OpenCV_DIR \"E:\\\\opencv3\\\\opencv\\\\build\")    #2 opencv目录改成自己的目录\nset(OpenCV_INCLUDE_DIRS ${OpenCV_DIR}\\\\include) #3 \nset(OpenCV_LIB_DIRS ${OpenCV_DIR}\\\\x64\\\\vc15\\\\lib) #4\nset(OpenCV_Debug_LIBS \"opencv_world341d.lib\")     #5\nset(OpenCV_Release_LIBS \"opencv_world341.lib\")    #6\nset(TRT_DIR \"E:\\\\Downloads\\\\TensorRT-7.2.1.6.Windows10.x86_64.cuda-11.0.cudnn8.0\\\\TensorRT-7.2.1.6\")  #7\nset(TRT_INCLUDE_DIRS ${TRT_DIR}\\\\include) #8\nset(TRT_LIB_DIRS ${TRT_DIR}\\\\lib)         #9\nset(Dirent_INCLUDE_DIRS \"F:\\\\yolov5trt\")  #10这里需要改成自己dirent.h的目录路径就是本工程的目录\n#=========================================================\n\nadd_definitions(-std=c++11)\n\noption(CUDA_USE_STATIC_CUDA_RUNTIME OFF)\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_BUILD_TYPE Debug)\n\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads)\n\n# setup CUDA\nfind_package(CUDA REQUIRED)\nmessage(STATUS \"    libraries: ${CUDA_LIBRARIES}\")\nmessage(STATUS \"    include path: ${CUDA_INCLUDE_DIRS}\")\n\ninclude_directories(${CUDA_INCLUDE_DIRS})\n\n####\nenable_language(CUDA)  # add this line, then no need to setup cuda path in vs\n####\ninclude_directories(${PROJECT_SOURCE_DIR}/include) #11\ninclude_directories(${TRT_INCLUDE_DIRS}) #12\nlink_directories(${TRT_LIB_DIRS}) #13\ninclude_directories(${OpenCV_INCLUDE_DIRS}) #14\nlink_directories(${OpenCV_LIB_DIRS}) #15\ninclude_directories(${Dirent_INCLUDE_DIRS}) #16\n\n\n# -D_MWAITXINTRIN_H_INCLUDED for solving error: identifier \"__builtin_ia32_mwaitx\" is undefined\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Ofast -D_MWAITXINTRIN_H_INCLUDED\")\n\n# setup opencv\nfind_package(OpenCV QUIET\n    NO_MODULE\n    NO_DEFAULT_PATH\n    NO_CMAKE_PATH\n    NO_CMAKE_ENVIRONMENT_PATH\n    NO_SYSTEM_ENVIRONMENT_PATH\n    NO_CMAKE_PACKAGE_REGISTRY\n    NO_CMAKE_BUILDS_PATH\n    NO_CMAKE_SYSTEM_PATH\n    NO_CMAKE_SYSTEM_PACKAGE_REGISTRY\n)\n\nmessage(STATUS \"OpenCV library status:\")\nmessage(STATUS \"    version: ${OpenCV_VERSION}\")\nmessage(STATUS \"    lib path: ${OpenCV_LIB_DIRS}\")\nmessage(STATUS \"    Debug libraries: ${OpenCV_Debug_LIBS}\")\nmessage(STATUS \"    Release libraries: ${OpenCV_Release_LIBS}\")\nmessage(STATUS \"    include path: ${OpenCV_INCLUDE_DIRS}\")\n\nadd_executable(yolov5 ${PROJECT_SOURCE_DIR}/yolov5.cpp ${PROJECT_SOURCE_DIR}/common.hpp ${PROJECT_SOURCE_DIR}/yololayer.cu ${PROJECT_SOURCE_DIR}/yololayer.h)   #17\ntarget_link_libraries(yolov5 \"nvinfer\" \"nvinfer_plugin\") #18\ntarget_link_libraries(yolov5 debug ${OpenCV_Debug_LIBS}) #19\ntarget_link_libraries(yolov5 optimized ${OpenCV_Release_LIBS}) #20\ntarget_link_libraries(yolov5 ${CUDA_LIBRARIES}) #21\ntarget_link_libraries(yolov5 Threads::Threads)  \n</code></pre>\n<p>修改完成以后点击保存进入cmake界面：</p>\n<p><img alt=\"\" height=\"644\" src=\"image\\6d1b41bf7bf2442098257251fb052855.png\" width=\"672\"/></p>\n<p> source code 添加本工程目录，build第二行填写自己新建的build,运行完之后生成的东西全在这个文件，点击configure-------完成之后再点击Gnereta----------再点击open project;</p>\n<p><img alt=\"\" height=\"278\" src=\"image\\7ee87c6df17c4abca6cac5d1296bd045.png\" width=\"1196\"/></p>\n<p> 打开之后直接DEBUG和realses进行编译，</p>\n<p> <img alt=\"\" height=\"744\" src=\"image\\7f70965601344398bc8973c3d1c3a84d.png\" width=\"1179\"/></p>\n<p> 最后会出现报错应用程序启动失败的提示，不用管他直接关闭。</p>\n<p>我们直接打开生成目录：</p>\n<p><img alt=\"\" height=\"337\" src=\"image\\e0edb30a8b01448bbb48821835cd338c.png\" width=\"753\"/></p>\n<p> 大家进入此目录cmd进入终端：</p>\n<p><img alt=\"\" height=\"519\" src=\"image\\94228f9d1623467d946b48a0b3746073.png\" width=\"993\"/></p>\n<p>输入：yolov5.exe -s yolov5s.wts yolov5.engine s，将wts文件放到此目录中，最后运行成功生成engine文件，我们在此目录下创建samples文件夹里面放入几张图片进行测试，</p>\n<p>输入：yolov5.exe -d yolov5s.engine ./samples得到结果，</p>\n<p><img alt=\"\" height=\"519\" src=\"image\\38c83738eb894c569696dadd9af31e85.png\" width=\"993\"/></p>\n<p><span style=\"color:#fe2c24;\"> 温馨提示：如果是转换其他格式的权重文件比如yolov5l.wts需要将后缀改为 l而不是s.</span></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"296\" src=\"image\\8f47da07987641be83a59013b8f77050.png\" width=\"464\"/></p>\n<p></p>\n<p>大家可以跟踪我的下一篇CSDN如何将整个项目生成动态连接库调用，我觉得这一部分比较重要可以用到其他平台。大家也可以去<a class=\"link-info\" href=\"https://wangsp.blog.csdn.net/article/details/122321920?spm=1001.2014.3001.5502\" title=\"大哥的文章\">大哥的文章</a>学习，大家有什么意见可以进群交流：471550878</p>\n<p></p>\n<p></p>\n<p></p>\n<h1></h1>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}