{"blogid": "125031647", "writerAge": "码龄2年", "writerBlogNum": "16", "writerCollect": "34", "writerComment": "1", "writerFan": "3", "writerGrade": "2级", "writerIntegral": "183", "writerName": "Cookei-a", "writerProfileAdress": "writer_image\\profile_125031647.jpg", "writerRankTotal": "68744", "writerRankWeekly": "160890", "writerThumb": "14", "writerVisitNum": "16013", "blog_read_count": "11641", "blog_time": "于 2022-05-29 15:37:31 发布", "blog_title": "MySql模糊查询大全", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>这是一条我们在<a href=\"https://cloud.tencent.com/product/cdb?from=10680\" title=\"MySQL\">MySQL</a>中常用到的模糊查询方法，通过通配符%来进行匹配，其实，这只是冰山一角，在MySQL中，支持模糊匹配的方法有很多，且各有各的优点。好了，今天让我带大家一起掀起MySQL的小裙子，看一看模糊查询下面还藏着多少鲜为人知的好东西。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\7e7de4efe021096963640e838c6daaa2.png\"/></p>\n<p>目录</p>\n<p>一、MySQL通配符模糊查询(%,_)</p>\n<p>1-1. 通配符的分类</p>\n<p>1-2. 通配符的使用</p>\n<p>1) % 通配符:</p>\n<p>2) _ 通配符:</p>\n<p>1-3. 技巧与建议:</p>\n<p>二、MySQL内置函数检索(locate,position,instr)</p>\n<p>2-1. LOCATE()函数</p>\n<p>2-2. POSITION()方法</p>\n<p>2-3. INSTR()方法</p>\n<p>三、MySQL基于regexp、rlike的正则匹配查询</p>\n<p>3-1. regexp中的 OR : |</p>\n<p>3-2. REGEXP中的正则匹配 : []</p>\n<p>3-3. 字符类匹配(posix)</p>\n<p>3-4. [:&lt;:]和[:&gt;:]</p>\n<p>四、总结</p>\n<hr/>\n<h1 id=\"%E4%B8%80%E3%80%81MySQL%E9%80%9A%E9%85%8D%E7%AC%A6%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2(%25,_)\">一、MySQL通配符模糊查询(%,_)</h1>\n<h2 id=\"1-1.-%E9%80%9A%E9%85%8D%E7%AC%A6%E7%9A%84%E5%88%86%E7%B1%BB\">1-1. 通配符的分类</h2>\n<ol><li>\"%\" 百分号通配符: 表示任何字符出现任意次数 (可以是0次)。</li><li>\"_\" 下划线通配符:表示只能匹配单个字符,不能多也不能少,就是一个字符。当然，也可以like \"陈____\"，数量不限。</li><li>like操作符:LIKE作用是指示mysql后面的搜索模式是利用通配符而不是直接相等匹配进行比较；但如果like后面没出现通配符，则在SQL执行优化时将 like 默认为 “=”执行</li></ol>\n<blockquote>\n<p><strong>注意: 如果在使用like操作符时，后面没有使用通用匹配符（%或_），那么效果是和“=”一致的。</strong>在SQL执行优化时查询优化器将 like 默认为 “=”执行,SELECT * FROM movies WHERE movie_name like '唐伯虎';只能匹配movie_name=“唐伯虎”的结果,而不能匹配像“唐伯虎点秋香”或“唐伯虎点香烟”这样的结果.</p>\n</blockquote>\n<h2></h2>\n<h2 id=\"1-2.-%E9%80%9A%E9%85%8D%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8\">1-2. 通配符的使用</h2>\n<h3 id=\"1)-%25-%E9%80%9A%E9%85%8D%E7%AC%A6:\">1) % 通配符:</h3>\n<p>-- 模糊匹配含有“网”字的数据</p>\n<pre><code>SELECT * from app_info where appName like '%网%';</code></pre>\n<p>复制</p>\n<p>-- 模糊匹配以“网”字结尾的数据</p>\n<pre><code>SELECT * from app_info where appName like '%网';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\e4cb530804080b7ab946ae18fa3fa118.png\"/></p>\n<p>-- 模糊匹配以“网”字开头的数据</p>\n<pre><code>SELECT * from app_info where appName like '网%';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\6b0fc38bf9952f34b8251e52342586a2.png\"/></p>\n<p>-- 精准匹配，appName like '网' 等同于：appName = '网'</p>\n<pre><code>SELECT * from app_info where appName = '网';\n-- 等同于\nSELECT * from app_info where appName like '网';</code></pre>\n<p>复制</p>\n<p>-- 模糊匹配含有“xxx网xxx车xxx”的数据,如：\"途途网约车司机端、网络约车平台\"</p>\n<pre><code>SELECT * from app_info where appName like '%网%车%';</code></pre>\n<p>复制</p>\n<h3 id=\"2)-_-%E9%80%9A%E9%85%8D%E7%AC%A6:\">2) _ 通配符:</h3>\n<p>-- 查询以“网”为结尾的，长度为三个字的数据，如：\"链家网\"，</p>\n<pre><code>SELECT * from app_info where appName like '__网';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\f824685cb4d1c245ad593b57f5c4816a.png\"/></p>\n<p><strong>注意：'%__网、__%网' 等同于 '%网'</strong></p>\n<p>-- 查询前三个字符为XX网，后面任意匹配，如：\"城通网盘、模具网平台\"</p>\n<pre><code>SELECT * from app_info where appName like '__网%';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\989a5c6890e8d220289184087beef8d3.png\"/></p>\n<p>-- 模糊匹配含有“xx网x车xxx”的数据，如：\"携程网约车客户端\"</p>\n<pre><code>SELECT * from app_info where appName like '__网_车%';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\af1159a4d7ff36dd2c2380c8b3617f3c.png\"/></p>\n<blockquote>\n<p><strong>注意事项: </strong></p>\n</blockquote>\n<ol><li>注意大小写,在使用模糊匹配时,也就是匹配文本时,MySQL默认配置是不区分大小写的。当你使用别人的MySQL<a href=\"https://cloud.tencent.com/solution/database?from=10680\" title=\"数据库\">数据库</a>时，要注意是否区分大小写，是否区分大小写取决于用户对MySQL的配置方式.如果是区分大小写,那么像Test12这样记录是不能被\"test__\"这样的匹配条件匹配的。</li><li>注意尾部空格,\"%test\"是不能匹配\"test \"这样的记录的。</li><li>注意NULL,%通配符可以匹配任意字符,但是不能匹配NULL,也就是说SELECT * FROM blog where title_name like '%';是匹配不到title_name为NULL的的记录。</li></ol>\n<h2 id=\"1-3.-%E6%8A%80%E5%B7%A7%E4%B8%8E%E5%BB%BA%E8%AE%AE:\">1-3. 技巧与建议:</h2>\n<p>正如所见，MySQL的通配符很有用。但这种功能是有代价的：<strong>通配符搜索的处理一般要比前面讨论的其他搜索所花时间更长，消耗更多的内存等资源。这里给出一些使用通配符要记住的技巧。</strong></p>\n<ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li><strong>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。因为MySQL在where后面的执行顺序是从左往右执行的，如果把通配符置于搜索模式的开始处（最左侧），搜索起来是最慢的(因为要对全库进行扫描)。</strong></li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ul>\n<p>有细心地朋友会发现，如果数据中有“%”、“_”等符号，那岂不是和通配符冲突了？</p>\n<pre><code>SELECT * from app_info where appName LIKE '%%%';\n\nSELECT * from app_info where appName LIKE '%_%';</code></pre>\n<p>复制</p>\n<p>确实如此，上面面两条SQL语句查询的都是全表数据，而不是带有\"%\"和\"_\"的指定数据。<strong>这里需要加 ESCAPE 关键字进行转义。</strong></p>\n<p>如下，ESCAPE 后面跟着一个字符，里面写着什么，MySQL就把那个符号当做转义符，一般我就写成\"/\"；然后就像 C语言中转义字符一样 例如 ‘\\n’,’\\t’, 把这个字符写在你需要转义的那个%号前就可以了；</p>\n<pre><code>SELECT * from app_info where appName LIKE '%/_%' ESCAPE '/'; </code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\5e002280740034e9dc293cd0edfb247f.png\"/></p>\n<p>但是这种情况有没有更高端点的解决办法呢？能让检查你代码的同事或领导对你刮目相看那种~~</p>\n<p>当然，下面我们就来看看MySQL的第二类模糊匹配方式 --- 内置函数查询</p>\n<h1 id=\"%E4%BA%8C%E3%80%81MySQL%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E6%A3%80%E7%B4%A2(locate,position,instr)\">二、MySQL内置函数检索(locate,position,instr)</h1>\n<p>话接上文，通过内置函数locate,position,instr进行匹配，相当于Java中的str.contains()方法，返回的是匹配内容在字符串中的位置，效率和可用性上都优于通配符匹配。</p>\n<pre><code>SELECT * from app_info where INSTR(`appName`, '%') &gt; 0;\n\nSELECT * from app_info where LOCATE('%', `appName`) &gt; 0;\n\nSELECT * from app_info where POSITION( '%' IN `appName`) &gt; 0;</code></pre>\n<p>复制</p>\n<p>如上，三种内置函数默认都是：&gt; 0，所以下列 &gt; 0 可加可不加，加上可读性更好。</p>\n<p>OK，下面一起来看看这三种内置函数的使用方法吧。</p>\n<p>先明确一下，MySQL中的角标从左往右是从1开始的，不像java最左边第一位角标是0，因此在MySQL中角标为0时说明不存在。</p>\n<h2 id=\"2-1.-LOCATE()%E5%87%BD%E6%95%B0\">2-1. LOCATE()函数</h2>\n<blockquote>\n<p>语法： <strong>LOCATE（substr,str）</strong></p>\n</blockquote>\n<p>返回 substr 在 str 中第一次出现的位置。如果 substr 在 str 中不存在，返回值为 0，如果substr 在 str 中存在，返回值为：substr 在 str中第一次出现的位置。</p>\n<p><strong>注意：LOCATE（substr，str）与 POSITION（substr IN str）是同义词，功能相同。</strong></p>\n<blockquote>\n<p>语法： <strong>LOCATE（substr, str, [pos]）</strong></p>\n</blockquote>\n<p>从位置pos开始的字符串str中第一次出现子字符串substr的位置。 如果substr不在str中，则返回0。 如果substr或str为NULL，则返回NULL。</p>\n<pre><code>SELECT locate('a', 'banana');       -- 2\nSELECT locate('a', 'banana', 3);    -- 4\nSELECT locate('z', 'banana');       -- 0\nSELECT locate(10, 'banana');        -- 0\nSELECT locate(NULL , 'banana');     -- null\nSELECT locate('a' , NULL );         -- null</code></pre>\n<p>复制</p>\n<p><strong>实例：</strong> -- 用LOCATE关键字进行模糊匹配，等同于：\"like '%网%'\"</p>\n<pre><code>SELECT * from app_info where LOCATE('网', `appName`) &gt; 0;</code></pre>\n<p>复制</p>\n<p>-- 用LOCATE关键字进行模糊匹配, 从第二个字符开始匹配\"网\"，则\"网易云游戏、网来商家\"等数据就被过滤了</p>\n<pre><code>SELECT * from app_info where LOCATE('网', `appName`, 2) &gt; 0;</code></pre>\n<p>复制</p>\n<h2 id=\"2-2.-POSITION()%E6%96%B9%E6%B3%95\">2-2. POSITION()方法</h2>\n<blockquote>\n<p>语法：<strong>POSITION(substr IN substr)</strong></p>\n</blockquote>\n<p>这个方法可以理解为locate(substr，str)方法的别名，因为它和locate(substr，str)方法的作用是一样的。</p>\n<p><strong>实例：</strong></p>\n<p>-- 用POSITION关键字进行模糊匹配，等同于：\"like '%网%'\"</p>\n<pre><code>SELECT * from app_info where POSITION( '网' IN `appName`);</code></pre>\n<p>复制</p>\n<h2 id=\"2-3.-INSTR()%E6%96%B9%E6%B3%95\">2-3. INSTR()方法</h2>\n<blockquote>\n<p>语法: <strong>INSTR(str,substr)</strong></p>\n</blockquote>\n<p><strong>返回字符串str中第一次出现子字符串substr的位置。INSTR()与LOCATE()的双参数形式相同，只是参数的顺序相反。 </strong></p>\n<p><strong>实例：</strong></p>\n<p>-- 用INSTR关键字进行模糊匹配，功能跟like一样 ,等同于：\"like '%网%'\"</p>\n<pre><code>SELECT * from app_info where INSTR(`appName`, '网');</code></pre>\n<p>复制</p>\n<p>-- instr函数作用，一般用于检索某字符在某字符串中的位置,等同于：\"like '%网%'\"</p>\n<pre><code>SELECT * from app_info where INSTR(`appName`, '网') &gt; 0;</code></pre>\n<p>复制</p>\n<h1 id=\"%E4%B8%89%E3%80%81MySQL%E5%9F%BA%E4%BA%8Eregexp%E3%80%81rlike%E7%9A%84%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E6%9F%A5%E8%AF%A2\">三、MySQL基于regexp、rlike的正则匹配查询</h1>\n<blockquote>\n<p><strong>MySQL中的regexp和rlike关键字属于同义词，功能相同。本文以regexp为准。</strong></p>\n</blockquote>\n<p><strong>REGEXP 不支持通配符\"%、_\"，支持正则匹配规则</strong>，是一种更细力度且优雅的匹配方式，一起来看看吧</p>\n<p>-- 这里给出regexp包含的参数类型</p>\n<table><thead><tr><th> <p>参数类型</p> </th><th> <p>作用</p> </th></tr></thead><tbody><tr><td> <p>（^）</p> </td><td> <p>匹配字符串的开始位置，如“^a”表示以字母a开头的字符串。</p> </td></tr><tr><td> <p>（$）</p> </td><td> <p>匹配字符串的结束位置，如“X^”表示以字母X结尾的字符串。</p> </td></tr><tr><td> <p>（.）</p> </td><td> <p>这个字符就是英文下的点，它匹配任何一个字符，包括回车、换行等。</p> </td></tr><tr><td> <p>（*）</p> </td><td> <p>星号匹配0个或多个字符，在它之前必须有内容。如：select * from table where name regexp 'ba*'（可以命中“baaa”）</p> </td></tr><tr><td> <p>（+）</p> </td><td> <p>加号匹配1个或多个字符，在它之前也必须有内容。加号跟星号的用法类似，只是星号允许出现0次，加号则必须至少出现一次。</p> </td></tr><tr><td> <p>（?）</p> </td><td> <p>问号匹配0次或1次。</p> </td></tr><tr><td> <p>{n}</p> </td><td> <p>匹配指定n个</p> </td></tr><tr><td> <p>{n,}</p> </td><td> <p>匹配不少于n个</p> </td></tr><tr><td> <p>{n,m}</p> </td><td> <p>匹配n-m个</p> </td></tr></tbody></table>\n<p>-- REGEXP '网' 等同于 like '%网%'</p>\n<pre><code>SELECT * from app_info where appName REGEXP '网';\n-- 等同于\nSELECT * from app_info where appName like '%网%';</code></pre>\n<p>复制</p>\n<h2 id=\"3-1.-regexp%E4%B8%AD%E7%9A%84-OR-:-%7C\">3-1. regexp中的 OR : |</h2>\n<p>功能：可以搜索多个字符串之一，相当于 or</p>\n<p>-- 支持 \"|\" ‘或’符号，匹配包含“中国”或“互联网”或“大学”的数据，支持叠加多个</p>\n<pre><code>SELECT * from app_info where appName REGEXP '中国|互联网|大学';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\c11f945ded6e94c2b73196c6cc434207.png\"/></p>\n<p>-- 匹配同时命中“中国”、“网”的数据可以用\".+\"连接，代表中国xxxx网，中间允许有任意个字符，顺序不能反。</p>\n<pre><code>SELECT * from app_info where appName REGEXP '中国.+网';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\6ee527bc28c706d411f0ad22b5fe6667.png\"/></p>\n<h2 id=\"3-2.-REGEXP%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D-:-%5B%5D\">3-2. REGEXP中的正则匹配 : []</h2>\n<p>功能：匹配[]符号中几个字符之一，支持解析正则表达式</p>\n<p>-- 匹配包含英文字符的数据，默认不区分大小写情况下</p>\n<pre><code>SELECT * from app_info where appName REGEXP '[a-z]';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\24e0587f536b1763460b516392147a40.png\"/></p>\n<p>-- 跟like一样，取反集加 \"not REGEXP\" 即可，下面不再赘述</p>\n<pre><code>SELECT * from app_info where appName not REGEXP '[a-z]';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\64427c183520de56e20833e6e0d0b827.png\"/></p>\n<p>-- <strong>匹配包含大写英文字符的数据，默认忽略大小写，需要加上\"BINARY\"关键字</strong>。如where appName REGEXP BINARY 'Hello'</p>\n<blockquote>\n<p>-- 关于大小写的区分：MySQL中正则表达式匹配（从版本3.23.4后）不区分大小写 。</p>\n</blockquote>\n<pre><code>SELECT * from app_info where appName REGEXP BINARY '[A-Z]';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\97ed32a557c5d0a6f9b881864fe13b1d.png\"/></p>\n<p>-- 匹配包含数字的数据</p>\n<pre><code>SELECT * from app_info where appName REGEXP '[0-9]';</code></pre>\n<p>复制</p>\n<p>-- 匹配包含数字或英文的数据，</p>\n<pre><code>SELECT * from app_info where appName REGEXP '[a-z0-9]';</code></pre>\n<p>复制</p>\n<p><strong>a-z、0-9都认定为一个单位，不要加多余符号</strong>，前两天就发现了一个特殊情况，很有意思的bug，跟他家分享一下</p>\n<p>-- 之前写查询语句时多加了\"|\"符号，以为是\"或\"，没有在意，但万万没想到，查出数量竟不同</p>\n<pre><code>SELECT * from app_info where appName REGEXP '[567]'; -- 87条\n\nSELECT * from app_info where appName REGEXP '[5|6|7]'; -- 88条</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\3def17d03f379aeff3bc6dd3148c8859.png\"/></p>\n<p>一头雾水，赶快看看差得是哪一条</p>\n<p>-- 原来\"|\"符号也参与到了匹配中，认定为一个单位。巧的是有一个数据为：“无线调音台 | Wireless Mixer” 这个正好匹配上。卧槽了个DJ</p>\n<pre><code>SELECT * from app_info where appName REGEXP '[5|6|7]' and pid not in (SELECT pid from app_info where appName REGEXP '[567]');</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\98714b2c5d383310c51c228aa77abe55.png\"/></p>\n<p>-- 查询以5、6、7其中一个为开头的数据</p>\n<pre><code>SELECT * from app_info where appName REGEXP '^[5|6|7]';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\8f0ee06d186360fa652eda41a9a99607.png\"/></p>\n<p>-- 查询以5、6、7其中一个为结尾的数据</p>\n<pre><code>SELECT * from app_info where appName REGEXP '[5|6|7]$';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\8019614a5ff8be5724c18cd171c47598.png\"/></p>\n<blockquote>\n<p>温馨提示：MySQL中，<strong>UTF-8的中文=3个字节；GBK的中文=2个字节</strong></p>\n</blockquote>\n<p>-- 查询appName字节长度为10，任意内容的数据</p>\n<pre><code>SELECT * from app_info where appName REGEXP '^.{10}$';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\c898d237e03830d0ef7a0abf9dacfe05.png\"/></p>\n<p>-- 查询appName字节长度为10，且都为英文的数据</p>\n<pre><code>SELECT * from app_info where appName REGEXP '^[a-z]{10}$' ;</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\b184f8052446235318e7c95343f8cfb2.png\"/></p>\n<p>-- 查询appName字节长度为10，且都为大写英文的数据，加上BINARY即可</p>\n<pre><code>SELECT * from app_info where appName REGEXP BINARY '^[A-Z]{10}$';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\5a83351e787f262b912314a1ed73d1d2.png\"/></p>\n<p>-- 查询version_name字节长度为6，且都为数字或\".\" 的数据</p>\n<pre><code>SELECT * from app_info where version_name REGEXP '^[0-9.]{6}$';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\260a4abc92c7f20daafb98c5a07f5e45.png\"/></p>\n<p>-- 查询version_name字节长度为6，且都为数字或\".\" 的数据；要求首位为1</p>\n<pre><code>SELECT * from app_info where version_name REGEXP '^1[0-9.]{5}$' ;</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\094dd1c60af262b98a58c39123a34e6e.png\"/></p>\n<p>-- 查询version_name字节长度为6，且都为数字或\".\" 的数据；要求首位为1，末位为7</p>\n<pre><code>SELECT * from app_info where version_name REGEXP '^1[0-9.]{4}7$' ;</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\8d8c07d5a58bd9cc971743316fc73f38.png\"/></p>\n<p>-- 查询version_name字节长度为<strong>6位以上</strong>，且都为数字或\".\" 的数据；要求首位为1，末位为7</p>\n<pre><code>SELECT * from app_info where version_name REGEXP '^1[0-9.]{4,}7$' ;</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\8349d7f76148bce91b98ffc3cff2d074.png\"/></p>\n<p>-- 查询version_name字节长度为 <strong>6 - 8 位</strong>，且都为数字或\".\" 的数据；要求首位为1，末位为7</p>\n<pre><code>SELECT * from app_info where version_name REGEXP '^1[0-9.]{4,6}7$' ;</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\aaa5cb7f9b40c40c38f6bb2129344cb5.png\"/></p>\n<p>-- 首位字符不是中文的</p>\n<pre><code>SELECT * from app_info where appName REGEXP '^[ -~]';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\5f7cd6e97924451fb8026387003a0576.png\"/></p>\n<p>-- 首位字符是中文的</p>\n<pre><code>SELECT * from app_info where appName REGEXP '^[^ -~]';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\d94a3f8b01ec4da79ab8e15a221b8989.png\"/></p>\n<p>-- 查询不包含中文的数据</p>\n<pre><code>SELECT * from app_info where appName REGEXP '^([a-z]|[0-9]|[A-Z])+$';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\6d7aa530df0f8e5af9b13f2a2f5fda7f.png\"/></p>\n<p>-- 以5或F开头的，且包含英文的数据</p>\n<pre><code>SELECT * from app_info where appName REGEXP BINARY '^[5F][a-zA-Z].';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\1fabea2dffdfe911e9ef1649f90fcdbf.png\"/></p>\n<p>特殊符号的匹配，例如.，需要加\\\\(注意是两个斜杠)，但是如果在[]中可以不加:</p>\n<pre><code>-- 匹配name中含有.的\nselect * from app_info where appName regexp '\\\\.';\n-- 匹配name中含有.的\nselect * from app_info where appName regexp '[.]';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\a32ad1dd11b1ad497f845ad62a1a3671.png\"/></p>\n<h2 id=\"3-3.-%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%8C%B9%E9%85%8D(posix)\">3-3. 字符类匹配(posix)</h2>\n<p>mysql中有一些特殊含义的符号，可以代表不同类型的匹配:</p>\n<p>-- 匹配name中含有数字的</p>\n<pre><code>select * from app_info where appName regexp '[[:digit:]]';</code></pre>\n<p>复制</p>\n<p>其他的这种字符类还有:</p>\n<table><thead><tr><th> <p>字符类</p> </th><th> <p>作用</p> </th></tr></thead><tbody><tr><td> <p>[:alnum:]</p> </td><td> <p>匹配字面和数字字符。(等同于[A~Za~z0~9])</p> </td></tr><tr><td> <p>[:alpha:]</p> </td><td> <p>匹配字母字符。(等同于[A~Za~z])</p> </td></tr><tr><td> <p>[:blank:]</p> </td><td> <p>匹配空格或制表符(同[\\\\\\t])</p> </td></tr><tr><td> <p>[:cntrl:]</p> </td><td> <p>匹配控制字符(ASCII0到37和127)</p> </td></tr><tr><td> <p>[:digit:]</p> </td><td> <p>匹配十进制数字。(等同于[0-9])</p> </td></tr><tr><td> <p>[:graph:]</p> </td><td> <p>匹配ASCII码值范围33~126的字符。与[:print:]相似，但不包括空格字符</p> </td></tr><tr><td> <p>[:print:]</p> </td><td> <p>任何可打印字符</p> </td></tr><tr><td> <p>[:lower:]</p> </td><td> <p>匹配小写字母，等同于[a-z]</p> </td></tr><tr><td> <p>[:upper:]</p> </td><td> <p>匹配大写字母，等同于[A-Z]</p> </td></tr><tr><td> <p>[:space:]</p> </td><td> <p>匹配空白字符（同[\\\\f\\\\n\\\\r\\\\t\\\\v]）</p> </td></tr><tr><td> <p>[:xdigit:]</p> </td><td> <p>匹配十六进制数字。等同于[0-9A-Fa-f]</p> </td></tr></tbody></table>\n<p>这种字符类需要主要的外层要加一层[]。</p>\n<h2 id=\"3-4.-%5B:%3C:%5D%E5%92%8C%5B:%3E:%5D\">3-4. [:&lt;:]和[:&gt;:]</h2>\n<p>上面的字符类中有两个比较特殊的，这两个是关于位置的，[:&lt;:]匹配词的开始,[:&gt;:]匹配词的结束，它们和 ^、$ 不同。</p>\n<p>后者是匹配整个整体的开头和结束，而前者是匹配一个单词的开始和结束。 -- 只能匹配整体以a开头的，例如abcd</p>\n<pre><code>select * from app_info where appName regexp '^a';</code></pre>\n<p>复制</p>\n<p>-- 能匹配整体以a开头的，也能匹配中间的单词以a开头，如：dance after。</p>\n<pre><code>select * from app_info where appName regexp '[[:&lt;:]]a';</code></pre>\n<p>复制</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\3175e6dc4e194c9c64f1932f464069d9.png\"/></p>\n<p>[[:&lt;:]] 、 [[:&gt;:]] 分别匹配一个单词开头和结尾的空的字符串，这个单词开头和结尾都不是包含在alnum中的字符也不能是下划线。</p>\n<pre><code>select \"a word a\" REGEXP \"[[:&lt;:]]word[[:&gt;:]]\"; -- 1（表示匹配） \n\nselect \"a xword a\" REGEXP \"[[:&lt;:]]word[[:&gt;:]]\"; -- 0（表示不匹配） \n\nselect \"weeknights\" REGEXP \"^(wee|week)(knights|nights)$\"; -- 1（表示匹配） </code></pre>\n</div>\n</div>"}