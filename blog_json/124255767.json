{"blogid": "124255767", "writerAge": "码龄5年", "writerBlogNum": "2", "writerCollect": "14", "writerComment": "2", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "27", "writerName": "LpsAnoy", "writerProfileAdress": "writer_image\\profile_124255767.jpg", "writerRankTotal": "172325", "writerRankWeekly": "496038", "writerThumb": "4", "writerVisitNum": "2231", "blog_read_count": "2076", "blog_time": "已于 2022-04-18 18:06:41 修改", "blog_title": "C#调用C/C++动态库", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_8\">前言</a></li><li><a href=\"#CC_17\">一、创建C/C++动态库</a></li><li><ul><li><a href=\"#1_20\">1.新建工程</a></li><li><a href=\"#2_24\">2.添加模拟测试驱动</a></li><li><a href=\"#2_48\">2.头文件声明</a></li><li><a href=\"#3_59\">3.模块定义声明</a></li><li><a href=\"#4_69\">4.编译生成库文件</a></li></ul>\n</li><li><a href=\"#C_76\">二、创建C#库</a></li><li><ul><li><a href=\"#1_77\">1.新建工程</a></li><li><a href=\"#2_81\">2.添加源码</a></li><li><a href=\"#3_138\">3.编译生成库文件</a></li></ul>\n</li><li><a href=\"#_141\">三、应用测试</a></li><li><ul><li><a href=\"#1WinForm_142\">1.新建WinForm工程</a></li><li><a href=\"#2_145\">2.引用库</a></li><li><a href=\"#3_148\">3.应用测试</a></li><li><a href=\"#4_207\">4.设置运行</a></li><li><a href=\"#5_212\">5.测试</a></li></ul>\n</li><li><a href=\"#_218\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_8\"></a>前言</h1>\n<p>在项目开发中经常会遇到C/C++的动态链接库，而上位机采用C#的方式进行开发。对于某些应用不适用直接使用非托管的方式调用C/C++中的接口，本文就介绍在C#中采用中间层调用C++动态库，并将其封装成C#的库文件，将符合C#的库文件用于发布使用。</p>\n<hr/>\n<h1><a id=\"CC_17\"></a>一、创建C/C++动态库</h1>\n<h2><a id=\"1_20\"></a>1.新建工程</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ba7e1a89a5fa43169fda219af25765c9.png\"/><br/> <img alt=\"设置向导\" src=\"image\\31a17d29876842e5915405637d480823.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\4a9b189de7544703812549af22a20d5c.png\"/></p>\n<h2><a id=\"2_24\"></a>2.添加模拟测试驱动</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdafx.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"board_driver.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEFAULT_HANDLE</span>\t<span class=\"token expression\"><span class=\"token number\">0x2000</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">board_open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token operator\">*</span>handle <span class=\"token operator\">=</span> DEFAULT_HANDLE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">board_close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> handle<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">board_calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_48\"></a>2.头文件声明</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__BOARD_DRIVER_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__BOARD_DRIVER_H</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">board_open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">board_close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">board_calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n</code></pre>\n<h2><a id=\"3_59\"></a>3.模块定义声明</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0ec04319660c474b96ce61c0be23c468.png\"/><br/> 模块声明需要导出的函数。</p>\n<pre><code class=\"prism language-c\">LIBRARY\t<span class=\"token string\">\"board_driver\"</span>\nEXPORTS\n\tboard_open @<span class=\"token number\">1</span>\n\tboard_close @<span class=\"token number\">2</span>\n\tboard_calc @<span class=\"token number\">3</span>\n</code></pre>\n<h2><a id=\"4_69\"></a>4.编译生成库文件</h2>\n<p>选择重新生成；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d6bc99bcc0dd4cada4cc7148f6e70704.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\715de135f8c2440d930e3311c692e52d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e494d9fb69fa4beca672552a05677702.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\6b2bce2eb2d94b228ac5b36b46e68d2d.png\"/></p>\n<h1><a id=\"C_76\"></a>二、创建C#库</h1>\n<h2><a id=\"1_77\"></a>1.新建工程</h2>\n<pre><code>在同一解决方案下新建C#库工程。\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\319bff7c997c4459852d927d512e1975.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\9f2af2a943b94f80ad3923ef07daac35.png\"/></p>\n<h2><a id=\"2_81\"></a>2.添加源码</h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CBoardDriver</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BoardDriver</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"board_driver.dll\"</span><span class=\"token punctuation\">,</span> EntryPoint <span class=\"token operator\">=</span> <span class=\"token string\">\"board_open\"</span><span class=\"token punctuation\">,</span> CharSet <span class=\"token operator\">=</span> CharSet<span class=\"token punctuation\">.</span>Auto<span class=\"token punctuation\">,</span> CallingConvention <span class=\"token operator\">=</span> CallingConvention<span class=\"token punctuation\">.</span>Cdecl<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">board_open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">UInt32</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"board_driver.dll\"</span><span class=\"token punctuation\">,</span> EntryPoint <span class=\"token operator\">=</span> <span class=\"token string\">\"board_close\"</span><span class=\"token punctuation\">,</span> CharSet <span class=\"token operator\">=</span> CharSet<span class=\"token punctuation\">.</span>Auto<span class=\"token punctuation\">,</span> CallingConvention <span class=\"token operator\">=</span> CallingConvention<span class=\"token punctuation\">.</span>Cdecl<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">board_close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"board_driver.dll\"</span><span class=\"token punctuation\">,</span> EntryPoint <span class=\"token operator\">=</span> <span class=\"token string\">\"board_calc\"</span><span class=\"token punctuation\">,</span> CharSet <span class=\"token operator\">=</span> CharSet<span class=\"token punctuation\">.</span>Auto<span class=\"token punctuation\">,</span> CallingConvention <span class=\"token operator\">=</span> CallingConvention<span class=\"token punctuation\">.</span>Cdecl<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">board_calc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 重写接口</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"handle\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">BoardOpen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">UInt32</span> handle<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">board_open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 重写接口</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"handle\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">BoardClose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UInt32</span> handle<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">board_close</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// 重写接口</span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token comment\">/// &lt;param name=\"handle\"&gt;&lt;/param&gt;</span>\n        <span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">BoardCalc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">board_calc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"3_138\"></a>3.编译生成库文件</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b3df7c5a603f4be68cd18ab45eac9caf.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\2f7a341622fa48f3b1677d6abce76771.png\"/></p>\n<h1><a id=\"_141\"></a>三、应用测试</h1>\n<h2><a id=\"1WinForm_142\"></a>1.新建WinForm工程</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\13275eb20e1c450fa82241a3c39cdb2f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\0e59c6a40d4349f2b601c147a5bf4520.png\"/></p>\n<h2><a id=\"2_145\"></a>2.引用库</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e65f2b7d262b498bb92253e91efbe8e8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\cca5f83a6d014721a0e39fb8d88c7a56.png\"/></p>\n<h2><a id=\"3_148\"></a>3.应用测试</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a86c5234aba047ca967783666d1a23f0.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>ComponentModel</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Drawing</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">CBoardDriver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CBoardTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Form1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Form</span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// </span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token class-name\">BoardDriver</span> boardDriver<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary&gt;</span>\n        <span class=\"token comment\">/// </span>\n        <span class=\"token comment\">/// &lt;/summary&gt;</span>\n        <span class=\"token class-name\">UInt32</span> handle<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Form1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//</span>\n            handle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//实例</span>\n            boardDriver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BoardDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n           \n            boardDriver<span class=\"token punctuation\">.</span><span class=\"token function\">BoardOpen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button2_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> status <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            status <span class=\"token operator\">=</span> boardDriver<span class=\"token punctuation\">.</span><span class=\"token function\">BoardClose</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button3_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">=</span> boardDriver<span class=\"token punctuation\">.</span><span class=\"token function\">BoardCalc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"4_207\"></a>4.设置运行</h2>\n<p>设置测试工程为启动项目；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5f4442b1e1d046919cf366cbf3116055.png\"/><br/> 将C/C++库拷贝到可执行程序路径；<br/> <img alt=\"运行所需库\" src=\"image\\66df66d63693424c8dc0ac9cbe792056.png\"/></p>\n<h2><a id=\"5_212\"></a>5.测试</h2>\n<p>在Open中读取到在C/C++库中设置的默认值；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9a11d0b59b784941b424d563e628fae9.png\"/><br/> 在Calc中实现两数相加；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2ff8045ea6bb436faa6d695664ac7377.png\"/></p>\n<h1><a id=\"_218\"></a>总结</h1>\n<p>以上就是本次记录的内容，本文仅仅简单介绍了C#采用中间件调用C/C++库的实现流程；</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}