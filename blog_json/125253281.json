{"blogid": "125253281", "writerAge": "码龄13年", "writerBlogNum": "256", "writerCollect": "269", "writerComment": "20", "writerFan": "126", "writerGrade": "5级", "writerIntegral": "2834", "writerName": "深度混淆", "writerProfileAdress": "writer_image\\profile_125253281.jpg", "writerRankTotal": "10594", "writerRankWeekly": "33225", "writerThumb": "56", "writerVisitNum": "108185", "blog_read_count": "1069", "blog_time": "已于 2022-07-07 22:14:16 修改", "blog_title": "C#，图片像素（Bitmap Pixel）的读取与绘制的快速方法与源程序", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p class=\"img-center\"><img alt=\"\" height=\"394\" src=\"image\\38861a6474c24ebc9f95eefc55b8d817.png\" width=\"394\"/></p>\n<p></p>\n<p><strong>1、GetPixel函数</strong></p>\n<p>C# 图片 Bitmap 的像素读取函数为：</p>\n<p>Color GetPixel(int x, int y);</p>\n<p>GetPixel函数检索指定坐标处像素的红、绿、蓝（RGB）颜色值。</p>\n<p></p>\n<p><strong>2、SetPixel函数</strong></p>\n<p>图片像素设置的函数为：</p>\n<p>void SetPixel(int x, int y, Color c);</p>\n<p>设置此位图中指定像素的颜色。C#public void SetPixel（int x，int y，System.Drawing.Color Color）；参数x Int32要设置的像素的x坐标。y Int32要设置的像素的y坐标。颜色颜色表示要分配给指定像素的颜色的颜色结构。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"291\" src=\"image\\7f294c74322047afac27ab0e79d903eb.png\" width=\"478\"/></p>\n<p style=\"text-align:center;\"></p>\n<p>但这两个函数都很慢，稍微大一些的图片，无法忍受的速度！</p>\n<p></p>\n<p>建议使用快速方法，源代码(POWER BY <a class=\"link-info\" href=\"http://www.315soft.com\" title=\"315SOFT.COM\">315SOFT.COM</a>)：</p>\n<p><span style=\"color:#4da8ee;\">（请打开编译器的指针安全 safe ）</span></p>\n<pre><code class=\"language-cs\">using System;\nusing System.Text;\nusing System.Collections;\nusing System.Windows.Forms;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing System.Drawing.Drawing2D;\n\nnamespace Legalsoft.Truffer.Draw\n{\n    public class FastBitmap\n    {\n        internal Bitmap m_oBitmap { get; set; }\n        private BitmapData m_oBitmapData { get; set; }\n\n        public FastBitmap(Int32 nWidth, Int32 nHeight, PixelFormat pixelFormat)\n        {\n            m_oBitmap = new Bitmap(nWidth, nHeight, pixelFormat);\n        }\n\n        ~FastBitmap()\n        {\n            Dispose(false);\n        }\n\n        public void Dispose()\n        {\n            GC.SuppressFinalize(this);\n            Dispose(true);\n        }\n\n        protected virtual void Dispose(Boolean bDisposing)\n        {\n            Unlock();\n            if (bDisposing)\n            {\n                m_oBitmap.Dispose();\n            }\n        }\n\n        private FastBitmap()\n        {\n        }\n\n        public Object Clone()\n        {\n            FastBitmap fbClone = new FastBitmap();\n            fbClone.m_oBitmap = (Bitmap)m_oBitmap.Clone();\n            return fbClone;\n        }\n\n        public Int32 Width\n        {\n            get { return m_oBitmap.Width; }\n        }\n\n        public Int32 Height\n        {\n            get { return m_oBitmap.Height; }\n        }\n\n        public void Lock()\n        {\n            m_oBitmapData = m_oBitmap.LockBits(\n                new Rectangle(0, 0, m_oBitmap.Width, m_oBitmap.Height),\n                ImageLockMode.ReadWrite,\n                m_oBitmap.PixelFormat\n                );\n        }\n\n        unsafe public Color GetPixel(Int32 x, Int32 y)\n        {\n            if (m_oBitmapData.PixelFormat == PixelFormat.Format32bppArgb)\n            {\n                Byte* b = (Byte*)m_oBitmapData.Scan0 + (y * m_oBitmapData.Stride) + (x * 4);\n                return Color.FromArgb(*(b + 3), *(b + 2), *(b + 1), *b);\n            }\n            if (m_oBitmapData.PixelFormat == PixelFormat.Format24bppRgb)\n            {\n                Byte* b = (Byte*)m_oBitmapData.Scan0 + (y * m_oBitmapData.Stride) + (x * 3);\n                return Color.FromArgb(*(b + 2), *(b + 1), *b);\n            }\n            return Color.Empty;\n        }\n\n        unsafe public void SetPixel(Int32 x, Int32 y, Color c)\n        {\n            if (m_oBitmapData.PixelFormat == PixelFormat.Format32bppArgb)\n            {\n                Byte* b = (Byte*)m_oBitmapData.Scan0 + (y * m_oBitmapData.Stride) + (x * 4);\n                *b = c.B;\n                *(b + 1) = c.G;\n                *(b + 2) = c.R;\n                *(b + 3) = c.A;\n            }\n            if (m_oBitmapData.PixelFormat == PixelFormat.Format24bppRgb)\n            {\n                Byte* b = (Byte*)m_oBitmapData.Scan0 + (y * m_oBitmapData.Stride) + (x * 3);\n                *b = c.B;\n                *(b + 1) = c.G;\n                *(b + 2) = c.R;\n            }\n        }\n\n        public Byte GetIntensity(Int32 x, Int32 y)\n        {\n            Color c = GetPixel(x, y);\n            return (Byte)((c.R * 0.30 + c.G * 0.59 + c.B * 0.11) + 0.5);\n        }\n\n        public void Unlock()\n        {\n            if (m_oBitmapData != null)\n            {\n                m_oBitmap.UnlockBits(m_oBitmapData);\n                m_oBitmapData = null;\n            }\n        }\n\n        public void Save(String strFileName, ImageFormat format)\n        {\n            m_oBitmap.Save(strFileName, format);\n        }\n\n        public void Save(String strFileName)\n        {\n            m_oBitmap.Save(strFileName);\n        }\n\n        public Bitmap GetBitmap()\n        {\n            return m_oBitmap;\n        }\n    }\n}\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"471\" src=\"image\\07fe2b3ec2ce4e528d14ee52f1ae4001.png\" width=\"478\"/></p>\n<p></p>\n</div>\n</div>"}