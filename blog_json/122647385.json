{"blogid": "122647385", "writerAge": "码龄2年", "writerBlogNum": "137", "writerCollect": "11918", "writerComment": "892", "writerFan": "12933", "writerGrade": "6级", "writerIntegral": "6021", "writerName": "-孤单又灿烂的神-", "writerProfileAdress": "writer_image\\profile_122647385.jpg", "writerRankTotal": "12612", "writerRankWeekly": "11630", "writerThumb": "3305", "writerVisitNum": "300642", "blog_read_count": "41692", "blog_time": "于 2022-01-23 15:16:55 发布", "blog_title": "MySQL大总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"articleContentId-toc\" style=\"margin-left:0px;\"><a href=\"#articleContentId\">一、MySQL数据库基础</a></p>\n<p id=\"%E4%B8%80%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C\">1，数据库的操作</a></p>\n<p id=\"1.1%E3%80%81%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#1.1%E3%80%81%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93\">1.1、显示当前数据库</a></p>\n<p id=\"1.2%20%E3%80%81%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#1.2%20%E3%80%81%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93\">1.2 、创建数据库</a></p>\n<p id=\"1.3%E3%80%81%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#1.3%E3%80%81%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93\">1.3、使用数据库</a></p>\n<p id=\"1.4%E3%80%81%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#1.4%E3%80%81%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93\">1.4、删除数据库</a></p>\n<p id=\"2%E3%80%81%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">2、常用数据类型</a></p>\n<p id=\"2.1%E3%80%81%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#2.1%E3%80%81%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B\">2.1、数值类型</a></p>\n<p id=\"2.2%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#2.2%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B\">2.2、字符串类型</a></p>\n<p id=\"%C2%A02.3%E3%80%81%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.3%E3%80%81%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B\"> 2.3、日期类型</a></p>\n<p id=\"3%E3%80%81%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C\">3、表的操作</a></p>\n<p id=\"3.1%E3%80%81%E5%88%9B%E5%BB%BA%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#3.1%E3%80%81%E5%88%9B%E5%BB%BA%E8%A1%A8\">3.1、创建表</a></p>\n<p id=\"3.2%E3%80%81%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#3.2%E3%80%81%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%BB%93%E6%9E%84\">3.2、查看表结构</a></p>\n<p id=\"3.4%E3%80%81%E5%88%A0%E9%99%A4%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#3.4%E3%80%81%E5%88%A0%E9%99%A4%E8%A1%A8\">3.4、删除表</a></p>\n<p id=\"4%E3%80%81%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E6%80%BB%E7%BB%93\">4、总结</a></p>\n<p id=\"4.1%E3%80%81%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#4.1%E3%80%81%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93\">4.1、操作数据库</a></p>\n<p id=\"4.2%E3%80%81%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#4.2%E3%80%81%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">4.2、常用数据类型</a></p>\n<p id=\"4.3%E3%80%81%E6%93%8D%E4%BD%9C%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#4.3%E3%80%81%E6%93%8D%E4%BD%9C%E8%A1%A8\">4.3、操作表</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%94%E3%80%81%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0\">5、综合练习</a></p>\n<p id=\"%E4%BA%8C%E3%80%81MySQL%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%9F%BA%E7%A1%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81MySQL%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%9F%BA%E7%A1%80\">二、MySQL表的增删改查基础</a></p>\n<p id=\"1%E3%80%81CRUD-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81CRUD\">1、CRUD</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E6%96%B0%E5%A2%9E%EF%BC%88Create%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%8C%E3%80%81%E6%96%B0%E5%A2%9E%EF%BC%88Create%EF%BC%89\">2、新增（Create）</a></p>\n<p id=\"2.1%E3%80%81%E5%8D%95%E8%A1%8C%E6%95%B0%E6%8D%AE%20%2B%20%E5%85%A8%E5%88%97%E6%8F%92%E5%85%A5-toc\" style=\"margin-left:80px;\"><a href=\"#2.1%E3%80%81%E5%8D%95%E8%A1%8C%E6%95%B0%E6%8D%AE%20%2B%20%E5%85%A8%E5%88%97%E6%8F%92%E5%85%A5\">2.1、单行数据 + 全列插入</a></p>\n<p id=\"2.2%E3%80%81%E5%A4%9A%E8%A1%8C%E6%95%B0%E6%8D%AE%20%2B%20%E6%8C%87%E5%AE%9A%E5%88%97%E6%8F%92%E5%85%A5-toc\" style=\"margin-left:80px;\"><a href=\"#2.2%E3%80%81%E5%A4%9A%E8%A1%8C%E6%95%B0%E6%8D%AE%20%2B%20%E6%8C%87%E5%AE%9A%E5%88%97%E6%8F%92%E5%85%A5\">2.2、多行数据 + 指定列插入</a></p>\n<p id=\"3%E3%80%81%E6%9F%A5%E8%AF%A2%EF%BC%88Retrieve%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E6%9F%A5%E8%AF%A2%EF%BC%88Retrieve%EF%BC%89\">3、查询（Retrieve）</a></p>\n<p id=\"3.1%E3%80%81%E5%85%A8%E5%88%97%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#3.1%E3%80%81%E5%85%A8%E5%88%97%E6%9F%A5%E8%AF%A2\">3.1、全列查询</a></p>\n<p id=\"3.2%E3%80%81%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E4%B8%BA%E8%A1%A8%E8%BE%BE%E5%BC%8F-toc\" style=\"margin-left:80px;\"><a href=\"#3.2%E3%80%81%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E4%B8%BA%E8%A1%A8%E8%BE%BE%E5%BC%8F\">3.2、查询字段为表达式</a></p>\n<p id=\"3.3%E3%80%81%E5%88%AB%E5%90%8D-toc\" style=\"margin-left:80px;\"><a href=\"#3.3%E3%80%81%E5%88%AB%E5%90%8D\">3.3、别名</a></p>\n<p id=\"3.4%E3%80%81%E5%8E%BB%E9%87%8D%EF%BC%9ADISTINCT-toc\" style=\"margin-left:80px;\"><a href=\"#3.4%E3%80%81%E5%8E%BB%E9%87%8D%EF%BC%9ADISTINCT\">3.4、去重：DISTINCT</a></p>\n<p id=\"3.5%E3%80%81%E6%8E%92%E5%BA%8F%EF%BC%9AORDER%20BY-toc\" style=\"margin-left:80px;\"><a href=\"#3.5%E3%80%81%E6%8E%92%E5%BA%8F%EF%BC%9AORDER%20BY\">3.5、排序：ORDER BY</a></p>\n<p id=\"3.6%E3%80%81%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%EF%BC%9AWHERE-toc\" style=\"margin-left:80px;\"><a href=\"#3.6%E3%80%81%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%EF%BC%9AWHERE\">3.6、条件查询：WHERE</a></p>\n<p id=\"3.8%E3%80%81%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%EF%BC%9ALIMIT-toc\" style=\"margin-left:80px;\"><a href=\"#3.8%E3%80%81%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%EF%BC%9ALIMIT\">3.7、分页查询：LIMIT</a></p>\n<p id=\"4%E3%80%81%E4%BF%AE%E6%94%B9%EF%BC%88Update%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E4%BF%AE%E6%94%B9%EF%BC%88Update%EF%BC%89\">4、修改（Update）</a></p>\n<p id=\"5%E3%80%81%E5%88%A0%E9%99%A4%EF%BC%88Delete%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E5%88%A0%E9%99%A4%EF%BC%88Delete%EF%BC%89\">5、删除（Delete）</a></p>\n<p id=\"%E4%B8%89%E3%80%81MySQL%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E8%BF%9B%E9%98%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81MySQL%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E8%BF%9B%E9%98%B6\">三、MySQL表的增删改查进阶</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A6%E6%9D%9F\">1、数据库约束</a></p>\n<p id=\"1.1%E3%80%81%E7%BA%A6%E6%9D%9F%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#1.1%E3%80%81%E7%BA%A6%E6%9D%9F%E7%B1%BB%E5%9E%8B\">1.1、约束类型</a></p>\n<p id=\"1.2%E3%80%81NULL%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:80px;\"><a href=\"#1.2%E3%80%81NULL%E7%BA%A6%E6%9D%9F\">1.2、NULL约束</a></p>\n<p id=\"1.3%E3%80%81UNIQUE%EF%BC%9A%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:80px;\"><a href=\"#1.3%E3%80%81UNIQUE%EF%BC%9A%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F\">1.3、UNIQUE：唯一约束</a></p>\n<p id=\"1.4%E3%80%81DEFAULT%EF%BC%9A%E9%BB%98%E8%AE%A4%E5%80%BC%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:80px;\"><a href=\"#1.4%E3%80%81DEFAULT%EF%BC%9A%E9%BB%98%E8%AE%A4%E5%80%BC%E7%BA%A6%E6%9D%9F\">1.4、DEFAULT：默认值约束</a></p>\n<p id=\"1.5%E3%80%81PRIMARY%20KEY%EF%BC%9A%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:80px;\"><a href=\"#1.5%E3%80%81PRIMARY%20KEY%EF%BC%9A%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F\">1.5、PRIMARY KEY：主键约束</a></p>\n<p id=\"1.6%E3%80%81FOREIGN%20KEY%EF%BC%9A%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F-toc\" style=\"margin-left:80px;\"><a href=\"#1.6%E3%80%81FOREIGN%20KEY%EF%BC%9A%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F\">1.6、FOREIGN KEY：外键约束</a></p>\n<p id=\"1.7%E3%80%81CHECK%E7%BA%A6%E6%9D%9F%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#1.7%E3%80%81CHECK%E7%BA%A6%E6%9D%9F%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\">1.7、CHECK约束（了解）</a></p>\n<p id=\"2%E3%80%81%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1\">2、表的设计</a></p>\n<p id=\"2.1%E3%80%81%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F-toc\" style=\"margin-left:80px;\"><a href=\"#2.1%E3%80%81%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F\">2.1、三大范式</a></p>\n<p id=\"3%EF%BC%8C%E6%96%B0%E5%A2%9E-toc\" style=\"margin-left:40px;\"><a href=\"#3%EF%BC%8C%E6%96%B0%E5%A2%9E\">3，新增</a></p>\n<p id=\"4%E3%80%81%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E6%9F%A5%E8%AF%A2\">4、查询</a></p>\n<p id=\"4.1%E3%80%81%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#4.1%E3%80%81%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2\">4.1、聚合查询</a></p>\n<p id=\"4.2%E3%80%81%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#4.2%E3%80%81%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2\">4.2、联合查询</a></p>\n<p id=\"%E5%9B%9B%E3%80%81MySQL%E7%B4%A2%E5%BC%95%E4%B8%8E%E4%BA%8B%E5%8A%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81MySQL%E7%B4%A2%E5%BC%95%E4%B8%8E%E4%BA%8B%E5%8A%A1\">四、MySQL索引与事务</a></p>\n<p id=\"%E4%B8%80%E3%80%81MySQL%E7%B4%A2%E5%BC%95-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E3%80%81MySQL%E7%B4%A2%E5%BC%95\">1、MySQL索引</a></p>\n<p id=\"1.1%E3%80%81%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:80px;\"><a href=\"#1.1%E3%80%81%E6%A6%82%E5%BF%B5\">1.1、概念</a></p>\n<p id=\"1.2%E3%80%81%E4%BD%9C%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#1.2%E3%80%81%E4%BD%9C%E7%94%A8\">1.2、作用</a></p>\n<p id=\"1.3%E3%80%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-toc\" style=\"margin-left:80px;\"><a href=\"#1.3%E3%80%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\">1.3、使用场景</a></p>\n<p id=\"1.4%E3%80%81%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#1.4%E3%80%81%E4%BD%BF%E7%94%A8\">1.4、使用</a></p>\n<p id=\"1.5%E3%80%81MySQL%E9%9D%A2%E8%AF%95%206%C2%A0%E9%97%AE-toc\" style=\"margin-left:80px;\"><a href=\"#1.5%E3%80%81MySQL%E9%9D%A2%E8%AF%95%206%C2%A0%E9%97%AE\">1.5、MySQL面试 6 问</a></p>\n<p id=\"2%E3%80%81%E4%BA%8B%E5%8A%A1-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E4%BA%8B%E5%8A%A1\">2、事务</a></p>\n<p id=\"2.1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#2.1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1%EF%BC%9F\">2.1、什么是事务？ </a></p>\n<p id=\"2.2%E3%80%81redo%20log%20%E4%B8%8E%20undo%20log%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:80px;\"><a href=\"#2.2%E3%80%81redo%20log%20%E4%B8%8E%20undo%20log%E4%BB%8B%E7%BB%8D\">2.2、redo log 与 undo log介绍</a></p>\n<p id=\"2.3%E3%80%81%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:80px;\"><a href=\"#2.3%E3%80%81%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0\">2.3、事务的实现</a></p>\n<p id=\"%E4%BA%94%E3%80%81MySQL%E4%B8%ADJDBC%E7%BC%96%E7%A8%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81MySQL%E4%B8%ADJDBC%E7%BC%96%E7%A8%8B\">五、MySQL中JDBC编程</a></p>\n<p id=\"1%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BF%85%E5%A4%87%E6%9D%A1%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BF%85%E5%A4%87%E6%9D%A1%E4%BB%B6\">1、数据库编程的必备条件</a></p>\n<p id=\"2%E3%80%81Java%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B%EF%BC%9AJDBC-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81Java%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B%EF%BC%9AJDBC\">2、Java的数据库编程：JDBC</a></p>\n<p id=\"3%E3%80%81JDBC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81JDBC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">3、JDBC工作原理</a></p>\n<p id=\"4%EF%BC%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-toc\" style=\"margin-left:40px;\"><a href=\"#4%EF%BC%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">4，环境搭建</a></p>\n<p id=\"%E4%BA%94%E3%80%81MySQL%E4%B8%AD%E7%9A%84JDBC%E7%BC%96%E7%A8%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%94%E3%80%81MySQL%E4%B8%AD%E7%9A%84JDBC%E7%BC%96%E7%A8%8B\">5、MySQL中的JDBC编程</a></p>\n<p id=\"1%EF%BC%8C%E4%BA%94%E6%AD%A5%E6%B5%81%E7%A8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#1%EF%BC%8C%E4%BA%94%E6%AD%A5%E6%B5%81%E7%A8%8B\">5.1，五步流程</a></p>\n<p id=\"5.2%E3%80%81%E6%B7%BB%E5%8A%A0%E4%BF%A1%E6%81%AF-toc\" style=\"margin-left:80px;\"><a href=\"#5.2%E3%80%81%E6%B7%BB%E5%8A%A0%E4%BF%A1%E6%81%AF\">5.2、添加信息</a></p>\n<p id=\"%C2%A05.3%E3%80%81%E6%9F%A5%E8%AF%A2%E4%BF%A1%E6%81%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A05.3%E3%80%81%E6%9F%A5%E8%AF%A2%E4%BF%A1%E6%81%AF\"> 5.3、查询信息</a></p>\n<p id=\"%C2%A05.4%E3%80%81%E5%88%A0%E9%99%A4%E4%BF%A1%E6%81%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A05.4%E3%80%81%E5%88%A0%E9%99%A4%E4%BF%A1%E6%81%AF\">5.4、删除信息</a></p>\n<hr id=\"hr-toc\"/>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"316\" src=\"image\\0e40a3ca48f394a98dac005888bec780.png\" width=\"316\"/></p>\n<blockquote>\n<p>MySQL是程序员必须要掌握的，其实语法结构相比于其他的<span style=\"color:#fe2c24;\"><em>数据结构、Java、C++</em></span>来说应该算是简单的，只要多多练习，拿下它应该不成问题。本文是将我学过的面试笔试重点的知识进行归纳总结，如果你认为写的不错的话，求<strong><span style=\"color:#1c7331;\">点赞，求收藏，感谢！！！</span></strong></p>\n</blockquote>\n<h1 id=\"articleContentId\"><span style=\"color:#956fe7;\">一、MySQL数据库基础</span></h1>\n<h2 id=\"%E4%B8%80%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C\"><span style=\"color:#a2e043;\"><strong>1，数据库的操作</strong></span></h2>\n<h3 id=\"1.1%E3%80%81%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93\"><span style=\"color:#ff9900;\"><strong>1.1、显示当前数据库</strong></span></h3>\n<pre><code class=\"language-sql\">show databases;</code></pre>\n<p><img alt=\"\" height=\"221\" src=\"image\\2fdf262fda1f4368aecd44f69e828de7.png\" width=\"535\"/></p>\n<h3 id=\"1.2%20%E3%80%81%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93\"><span style=\"color:#ff9900;\"><strong>1.2 、创建数据库</strong></span></h3>\n<p>语法：</p>\n<pre><code class=\"language-sql\">CREATE DATABASE [IF NOT EXISTS] db_name [create_specification [, \ncreate_specification] ...]</code></pre>\n<p>示例：</p>\n<p>创建名为 db_test1 的数据库</p>\n<pre><code class=\"language-sql\">create database db_test1;</code></pre>\n<p><img alt=\"\" height=\"210\" src=\"image\\d5b93665c44d48728c981aa73f015f87.png\" width=\"488\"/></p>\n<p>如果系统没有 db_test2 的数据库，则创建一个名叫 db_test2 的数据库，如果有则不创建 </p>\n<pre><code class=\"language-sql\">create database if not db_test1;</code></pre>\n<p><img alt=\"\" height=\"181\" src=\"image\\c6af04b087ef4d9aabe9705c2bcce0fd.png\" width=\"552\"/></p>\n<h3 id=\"1.3%E3%80%81%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93\"><span style=\"color:#ff9900;\"><strong>1.3、使用数据库</strong></span></h3>\n<blockquote>\n<p><strong>进行表的操作前的重要的一步</strong></p>\n</blockquote>\n<pre><code class=\"language-sql\">use 数据库名;</code></pre>\n<h3 id=\"1.4%E3%80%81%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93\"><span style=\"color:#ff9900;\"><strong>1.4、删除数据库</strong></span></h3>\n<p>说明: 数据库删除以后，内部看不到对应的数据库，里边的表和数据全部被删除</p>\n<pre><code class=\"language-sql\">DROP DATABASE [IF EXISTS] db_name;</code></pre>\n<p><img alt=\"\" height=\"253\" src=\"image\\97fc169f217c44d39eaf73fe0c93c74b.png\" width=\"571\"/></p>\n<h2 id=\"2%E3%80%81%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span style=\"color:#a2e043;\"><strong>2、常用数据类型</strong></span></h2>\n<h3 id=\"2.1%E3%80%81%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B\"><span style=\"color:#ff9900;\"><strong>2.1、数值类型</strong></span></h3>\n<p>分为整型和浮点型：</p>\n<p><img alt=\"\" height=\"352\" src=\"image\\18cc2d350d8b408cb120b409ffc2f243.png\" width=\"578\"/></p>\n<blockquote>\n<p>数值类型可以指定为无符号（unsigned），表示不取负数。1字节（bytes）= 8bit。 对于整型类型的范围： 1. 有符号范围：<strong><em>-2^（类型字节数*8-1）到2^（类型字节数*8-1）-1</em></strong>，如int是4字节，就 是-2^31到2^31-1 2. 无符号范围：0到2^（类型字节数*8）-1，如int就是2^32-1。</p>\n</blockquote>\n<h3 id=\"2.2%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B\"><span style=\"color:#ff9900;\"><strong>2.2、字符串类型</strong></span></h3>\n<p><img alt=\"\" height=\"208\" src=\"image\\88ae4141f0fb488797c6c3eda8a52083.png\" width=\"620\"/></p>\n<h3 id=\"%C2%A02.3%E3%80%81%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B\"><span style=\"color:#ff9900;\"> <strong>2.3、日期类型</strong></span></h3>\n<p><img alt=\"\" height=\"207\" src=\"image\\678bc473003e4e9cbfac8c0ec116b506.png\" width=\"623\"/></p>\n<h2 id=\"3%E3%80%81%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C\"><span style=\"color:#a2e043;\"><strong>3、表的操作</strong></span></h2>\n<pre><code class=\"language-sql\">use db_test;\n</code></pre>\n<p><img alt=\"\" height=\"336\" src=\"image\\283230e860bb43cb83ff45470ed4c818.png\" width=\"492\"/></p>\n<h3 id=\"3.1%E3%80%81%E5%88%9B%E5%BB%BA%E8%A1%A8\"><span style=\"color:#ff9900;\"><strong>3.1、创建表</strong></span></h3>\n<p>语法：</p>\n<pre><code class=\"language-sql\">CREATE TABLE table_name (\n field1 datatype,\n field2 datatype,\n field3 datatype\n);</code></pre>\n<p>示例：</p>\n<pre><code class=\"language-sql\">create table stu_test(\n    id int,\n    name varchar(20) comment '姓名',\n    password varchar(20) comment '密码',\n    age int,\n    sex varchar(1),\n    birthday timestamp,\n    amout decimal(13,2),\n    resume text\n);</code></pre>\n<p><img alt=\"\" height=\"191\" src=\"image\\5eea390916544ae5adec8a161a68ad0e.png\" width=\"482\"/></p>\n<h3 id=\"3.2%E3%80%81%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%BB%93%E6%9E%84\"><span style=\"color:#ff9900;\"><strong>3.2、查看表结构</strong></span></h3>\n<pre><code class=\"language-sql\">desc 表名;</code></pre>\n<p><img alt=\"\" height=\"219\" src=\"image\\9190bc0d265d4f2683ebf188325677a1.png\" width=\"596\"/></p>\n<h3 id=\"3.4%E3%80%81%E5%88%A0%E9%99%A4%E8%A1%A8\"><span style=\"color:#ff9900;\"><strong>3.4、删除表</strong></span></h3>\n<p>语法格式：</p>\n<pre><code class=\"language-sql\">DROP [TEMPORARY] TABLE [IF EXISTS] tbl_name [, tbl_name] ...</code></pre>\n<p>示例：</p>\n<pre><code class=\"language-sql\">-- 删除 stu_test 表\ndrop table stu_test;\n-- 如果存在 stu_test 表，则删除 stu_test 表\ndrop table if exists stu_test;</code></pre>\n<p><img alt=\"\" height=\"233\" src=\"image\\62a62494b34540b88207c0ab812269a1.png\" width=\"526\"/></p>\n<h2 id=\"4%E3%80%81%E6%80%BB%E7%BB%93\"><span style=\"color:#a2e043;\"><strong>4、总结</strong></span></h2>\n<h3 id=\"4.1%E3%80%81%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93\"><span style=\"color:#ff9900;\"><strong>4.1、操作数据库</strong></span></h3>\n<pre><code class=\"language-sql\">-- 显示\nshow databases;\n-- 创建\ncreate database xxx;\n-- 使用\nuse xxx;\n-- 删除\ndrop database xxx;</code></pre>\n<h3 id=\"4.2%E3%80%81%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span style=\"color:#ff9900;\"><strong>4.2、常用数据类型</strong></span></h3>\n<pre><code class=\"language-sql\">INT：整型\n\nDECIMAL(M, D)：浮点数类型\n\nVARCHAR(SIZE)：字符串类型\n\nTIMESTAMP：日期类型</code></pre>\n<h3 id=\"4.3%E3%80%81%E6%93%8D%E4%BD%9C%E8%A1%A8\"><span style=\"color:#ff9900;\">4.3、操作表</span></h3>\n<pre><code class=\"language-sql\">-- 查看\nshow 表;\n-- 创建\ncreate table 表名(\n 字段1 类型1,\n 字段2 类型2,\n ...\n);\n-- 删除\ndrop talbe 表名;</code></pre>\n<h2 id=\"%E4%BA%94%E3%80%81%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0\"><span style=\"color:#a2e043;\"><strong>5、综合练习</strong></span></h2>\n<blockquote>\n<p>有一个商店的数据，记录客户及购物情况，有以下三个表组成：</p>\n<p>商品goods(商品编号goods_id，商品名goods_name, 单价unitprice, 商品类别category, 供 应商provider)</p>\n<p>客户customer(客户号customer_id,姓名name,住址address,邮箱email,性别sex，身份证 card_id)</p>\n<p>购买purchase(购买订单号order_id,客户号customer_id,商品号goods_id,购买数量nums)</p>\n</blockquote>\n<pre><code class=\"language-sql\">create database shop;\nuse shop;\ncreate table goods(\n    good_id int comment '商品编号',\n    good_name varchar(30) comment '商品名称',\n    unitprice int comment '单价',\n    category varchar(30) comment '商品类别',\n    provider varchar(64) comment '供应商名称'\n);\n \ncreate table if not exists customer\n(\n   customer_id  int comment '客户编号',\n   name varchar(32) comment '客户姓名',\n   address  varchar(256) comment '客户地址',\n   email  varchar(64) comment '电子邮箱',\n   sex bit comment '性别',\n   card_id varchar(18) comment '身份证'\n);\n \n \ncreate table if not exists purchase\n(\n   order_id  int comment '订单号',\n   customer_id int comment '客户编号',\n   goods_id  int comment '商品编号', \n   nums  int comment '购买数量'\n);</code></pre>\n<p><img alt=\"\" height=\"231\" src=\"image\\86935ecfc6214eafa7751202369ddc64.png\" width=\"580\"/></p>\n<p> <img alt=\"\" height=\"305\" src=\"image\\903f6028bdac4d02aed68a26bc134bf5.png\" width=\"586\"/></p>\n<h1 id=\"%E4%BA%8C%E3%80%81MySQL%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%9F%BA%E7%A1%80\"><span style=\"color:#956fe7;\"><strong>二、MySQL表的增删改查基础</strong></span></h1>\n<h2 id=\"1%E3%80%81CRUD\"><span style=\"color:#a2e043;\"><strong>1、CRUD</strong></span></h2>\n<blockquote>\n<p><strong>注释：</strong>在SQL中可以使用“--空格+描述”来表示注释说明 </p>\n<p><em><strong>CRUD 即增加(Create)、查询(Retrieve)、更新(Update)、删除(Delete)</strong></em>四个单词的首字母缩写。</p>\n</blockquote>\n<h2 id=\"%E4%BA%8C%E3%80%81%E6%96%B0%E5%A2%9E%EF%BC%88Create%EF%BC%89\"><span style=\"color:#a2e043;\"><strong>2、新增（Create）</strong></span></h2>\n<p>语法：</p>\n<pre><code class=\"language-sql\">INSERT [INTO] table_name\n [(column [, column] ...)] \n VALUES (value_list) [, (value_list)] ...\n \nvalue_list: value, [, value] ...</code></pre>\n<p>案例：</p>\n<pre><code class=\"language-sql\">create table student(\n    id int,\n    sn int comment '学号',\n    name varchar(20) comment '姓名',\n    qq_mail varchar(20) comment 'QQ邮箱'\n);</code></pre>\n<h3 id=\"2.1%E3%80%81%E5%8D%95%E8%A1%8C%E6%95%B0%E6%8D%AE%20%2B%20%E5%85%A8%E5%88%97%E6%8F%92%E5%85%A5\"><span style=\"color:#ff9900;\"><strong>2.1、单行数据 + 全列插入</strong></span></h3>\n<pre><code class=\"language-sql\">insert into student values(1,1000,'擦洗',NUll);\ninsert into student values(2,1001,'好还是', '111111');</code></pre>\n<p><img alt=\"\" height=\"221\" src=\"image\\7fcc6b83cd8a4a449641bfa9596d820b.png\" width=\"495\"/></p>\n<h3 id=\"2.2%E3%80%81%E5%A4%9A%E8%A1%8C%E6%95%B0%E6%8D%AE%20%2B%20%E6%8C%87%E5%AE%9A%E5%88%97%E6%8F%92%E5%85%A5\"><span style=\"color:#ff9900;\"><strong>2.2、多行数据 + 指定列插入</strong></span></h3>\n<pre><code class=\"language-sql\">insert into student(id,sn,name) values\n(3,1002,'李白'),\n(4,1003,'曹操');</code></pre>\n<h2 id=\"3%E3%80%81%E6%9F%A5%E8%AF%A2%EF%BC%88Retrieve%EF%BC%89\"><span style=\"color:#a2e043;\"><strong>3、查询（Retrieve）</strong></span></h2>\n<p>语法：</p>\n<pre><code class=\"language-sql\">SELECT\n [DISTINCT] {* | {column [, column] ...} \n [FROM table_name]\n [WHERE ...]\n [ORDER BY column [ASC | DESC], ...]\n LIMIT ...</code></pre>\n<p>案例：</p>\n<pre><code class=\"language-sql\">create table exam_result(\n    id int,\n    name varchar(20),\n    chinese decimal(3,1),\n    math decimal(3,1),\n    english decimal(3,1)\n);</code></pre>\n<p><img alt=\"\" src=\"image\\188508c6b54f472492945398e037fe2b.png\"/></p>\n<pre><code class=\"language-sql\">insert into exam_result values\n(1,'唐三藏', 67, 98, 56),\n(2,'孙悟空', 87.5, 78, 77),\n(3,'猪悟能', 88, 98.5, 90),\n(4,'曹孟德', 82, 84, 67),\n(5,'刘玄德', 55.5, 85, 45),\n(6,'孙权', 70, 73, 78.5),\n(7,'宋公明', 75, 65, 30);</code></pre>\n<p><img alt=\"\" height=\"181\" src=\"image\\5d945a52a42248b9b18b61d492d67923.png\" width=\"600\"/></p>\n<h3 id=\"3.1%E3%80%81%E5%85%A8%E5%88%97%E6%9F%A5%E8%AF%A2\"><span style=\"color:#ff9900;\"><strong>3.1、全列查询</strong></span></h3>\n<pre><code class=\"language-sql\">select * from exam_result;</code></pre>\n<p><img alt=\"\" height=\"211\" src=\"image\\37d9b41839a54129ad378886c23e68c4.png\" width=\"538\"/></p>\n<pre><code class=\"language-sql\">select id,name,chinese from exam_result;</code></pre>\n<p><img alt=\"\" height=\"193\" src=\"image\\aa310801b15c4fd5b7e032cd17824b10.png\" width=\"566\"/></p>\n<pre><code class=\"language-sql\">select chinese,math,english from exam_result;</code></pre>\n<p><img alt=\"\" height=\"194\" src=\"image\\c976fd93f2b844288379ce7c1d98d580.png\" width=\"586\"/></p>\n<h3 id=\"3.2%E3%80%81%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E4%B8%BA%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span style=\"color:#ff9900;\"><strong>3.2、查询字段为表达式</strong></span></h3>\n<pre><code class=\"language-sql\">select id,name,10 from exam_result;</code></pre>\n<p><img alt=\"\" height=\"183\" src=\"image\\9201bab18f084a798d0d3d16d4dad63e.png\" width=\"536\"/></p>\n<pre><code class=\"language-sql\">select id,name,english + 10 from exam_result;</code></pre>\n<p><img alt=\"\" height=\"184\" src=\"image\\c1a0462a61304541a5aae8c42595f91b.png\" width=\"564\"/></p>\n<h3 id=\"3.3%E3%80%81%E5%88%AB%E5%90%8D\"><span style=\"color:#ff9900;\"><strong>3.3、别名</strong></span></h3>\n<p>语法：</p>\n<pre><code class=\"language-sql\">SELECT column [AS] alias_name [...] FROM table_name;</code></pre>\n<pre><code class=\"language-sql\">select id,name,chinese+math+english as total from exam_result;</code></pre>\n<p><img alt=\"\" height=\"159\" src=\"image\\2342fd21cf0347a3a1950c8b69cbacb0.png\" width=\"527\"/></p>\n<h3 id=\"3.4%E3%80%81%E5%8E%BB%E9%87%8D%EF%BC%9ADISTINCT\"><span style=\"color:#ff9900;\">3.4、去重：DISTINCT</span></h3>\n<p><img alt=\"\" height=\"219\" src=\"image\\ca6c07af267c4d66a10363fad8e8cbac.png\" width=\"545\"/></p>\n<pre><code class=\"language-sql\">select distinct math from exam_result;</code></pre>\n<p><img alt=\"\" height=\"194\" src=\"image\\19398fc555224f78a2267c6315c22ba9.png\" width=\"594\"/></p>\n<h3 id=\"3.5%E3%80%81%E6%8E%92%E5%BA%8F%EF%BC%9AORDER%20BY\"><span style=\"color:#ff9900;\">3.5、排序：ORDER BY</span></h3>\n<p>语法：</p>\n<pre><code class=\"language-sql\">-- ASC 为升序（从小到大）\n-- DESC 为降序（从大到小）\n-- 默认为 ASC\nSELECT ... FROM table_name [WHERE ...] \n ORDER BY column [ASC|DESC], [...];</code></pre>\n<blockquote>\n<p>1. 没有 ORDER BY 子句的查询，返回的顺序是未定义的，永远不要依赖这个顺序</p>\n<p>2. NULL 数据排序，视为比任何值都小，升序出现在最上面，降序出现在最下面</p>\n</blockquote>\n<pre><code class=\"language-sql\"> select name,chinese from exam_result order by chinese;</code></pre>\n<p><img alt=\"\" height=\"177\" src=\"image\\6cd640778b1b45ada8ab9612220c18a6.png\" width=\"526\"/></p>\n<pre><code class=\"language-sql\">select name,chinese from exam_result order by chinese desc;\n</code></pre>\n<p><img alt=\"\" height=\"178\" src=\"image\\8c0932fb90a04b14a6c0f678ea18c5b2.png\" width=\"560\"/></p>\n<blockquote>\n<p> 3. 使用表达式及别名排序</p>\n</blockquote>\n<pre><code class=\"language-sql\">select name,chinese+math+english total from exam_result order by total desc;</code></pre>\n<pre><code class=\"language-sql\">select name,chinese+math+english from exam_result order by chinese+math+english desc;</code></pre>\n<p><img alt=\"\" height=\"138\" src=\"image\\cae1818588c4460ebb5e71b3f20faa20.png\" width=\"560\"/></p>\n<blockquote>\n<p> 4. 可以对多个字段进行排序，排序优先级随书写顺序</p>\n</blockquote>\n<pre><code class=\"language-sql\">-- 查询同学各门成绩，依次按 数学降序，英语升序，语文升序的方式显示\nselect name,math,english,chinese from exam_result order by math desc,chinese,english;</code></pre>\n<p><img alt=\"\" height=\"162\" src=\"image\\a1b1d8e865244ba9b8349aaaefa3dfa9.png\" width=\"553\"/></p>\n<h3 id=\"3.6%E3%80%81%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%EF%BC%9AWHERE\"><span style=\"color:#ff9900;\"><strong>3.6、条件查询：WHERE</strong></span></h3>\n<p><span style=\"color:#be191c;\"><strong>比较运算符：</strong></span></p>\n<p><img alt=\"\" height=\"565\" src=\"image\\d813630895d142358f659b25857893eb.png\" width=\"1065\"/></p>\n<p><span style=\"color:#be191c;\"><strong>逻辑运算符：</strong></span></p>\n<p><img alt=\"\" height=\"189\" src=\"image\\9d1b5ae987454b95a7859de6c430c380.png\" width=\"940\"/></p>\n<blockquote>\n<p>注：</p>\n<p>1. WHERE条件可以使用表达式，但不能使用别名。</p>\n<p>2. AND的优先级高于OR，在同时使用时，需要使用小括号()包裹优先执行的部分</p>\n</blockquote>\n<p><span style=\"color:#be191c;\"><strong>基本查询：</strong></span></p>\n<pre><code class=\"language-sql\">-- 查询英语不及格的同学及英语成绩 ( &lt; 60 )\nselect name, english from exam_result where english &lt; 60;</code></pre>\n<p><img alt=\"\" height=\"133\" src=\"image\\4199405510f34c1e86618f0a7bcece69.png\" width=\"570\"/></p>\n<pre><code class=\"language-sql\">-- 查询语文成绩好于英语成绩的同学\nselect name,chinese,english from exam_result where chinese &gt; english;</code></pre>\n<p><img alt=\"\" height=\"160\" src=\"image\\87e5e9536ac64821a45d54e7d1d68c02.png\" width=\"642\"/></p>\n<pre><code class=\"language-sql\">-- 查询总分在 200 分以下的同学\nselect name,chinese+math+english total from exam_result where chinese+math+english &lt; 200;</code></pre>\n<p><span style=\"color:#be191c;\"><strong>AND与OR：</strong></span></p>\n<pre><code class=\"language-sql\">select * from exam_result where chinese &gt; 80 and english &gt; 80;</code></pre>\n<p><img alt=\"\" src=\"image\\1e6524b6b2c64c02a1b9022fc314075c.png\"/></p>\n<pre><code class=\"language-sql\">select * from exam_result where chinese &gt; 80 or english &gt; 80;</code></pre>\n<p><img alt=\"\" src=\"image\\daac7e49b4274e9b8f32710532df1104.png\"/></p>\n<pre><code class=\"language-sql\">select * from exam_result where chinese &gt; 80 or math &gt; 70 and english &gt; 80;</code></pre>\n<pre><code class=\"language-sql\">select * from exam_result where (chinese &gt; 80 or math &gt; 70) and english &gt; 80;</code></pre>\n<p><img alt=\"\" src=\"image\\4e0f4fa18b0d49d0add9af596e9177b5.png\"/></p>\n<p><span style=\"color:#be191c;\"><strong>范围查询：</strong></span></p>\n<p><strong>1. BETWEEN ... AND ...</strong></p>\n<pre><code class=\"language-sql\">-- 查询语文成绩在 [80, 90] 分的同学及语文成绩\nselect name,chinese from exam_result where chinese between 80 and 90;</code></pre>\n<p><img alt=\"\" src=\"image\\af4ed8bac999464cbf056a3841cf9e2e.png\"/></p>\n<p><strong>2. IN</strong></p>\n<pre><code class=\"language-sql\">-- 查询数学成绩是 58 或者 59 或者 98 或者 99 分的同学及数学成绩\nselect name,math from exam_result where math in(58,59,98,99);</code></pre>\n<p><img alt=\"\" src=\"image\\b21d6469509441159770014a6ada822c.png\"/></p>\n<p><strong>模糊查询：LIKE</strong></p>\n<pre><code class=\"language-sql\">-- 匹配到孙悟空、孙权\nselect name from exam_result where name like '孙%';</code></pre>\n<p><img alt=\"\" src=\"image\\5913dd61e1024275a78ece3628eaa3d2.png\"/></p>\n<pre><code class=\"language-sql\">--_匹配严格的一个任意字符 匹配到孙权\nselect name from exam_result where name like '孙_';</code></pre>\n<h3 id=\"3.8%E3%80%81%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%EF%BC%9ALIMIT\"><span style=\"color:#ff9900;\"><strong>3.7、分页查询：LIMIT</strong></span></h3>\n<p>语法：</p>\n<pre><code class=\"language-sql\">-- 起始下标为 0\n-- 从 0 开始，筛选 n 条结果\nSELECT ... FROM table_name [WHERE ...] [ORDER BY ...] LIMIT n;\n-- 从 s 开始，筛选 n 条结果\nSELECT ... FROM table_name [WHERE ...] [ORDER BY ...] LIMIT s, n;\n-- 从 s 开始，筛选 n 条结果，比第二种用法更明确，建议使用\nSELECT ... FROM table_name [WHERE ...] [ORDER BY ...] LIMIT n OFFSET s;</code></pre>\n<p>案例：按 id 进行分页，每页 3 条记录，分别显示 第 1、2、3 页</p>\n<pre><code class=\"language-sql\">-- 第 1 页\nselect id,name,math,english,chinese from exam_result order by id limit 3 offset 0;</code></pre>\n<p><img alt=\"\" src=\"image\\d8ed53fd10d145d0b1775bd591291846.png\"/></p>\n<pre><code class=\"language-sql\">-- 第 2 页\nselect id,name,math,english,chinese from exam_result order by id limit 3 offset 3;</code></pre>\n<p><img alt=\"\" src=\"image\\cc4f77a0391b4c94b20343dd0d1ae45e.png\"/></p>\n<h2 id=\"4%E3%80%81%E4%BF%AE%E6%94%B9%EF%BC%88Update%EF%BC%89\"><span style=\"color:#a2e043;\"><strong>4、修改（Update）</strong></span></h2>\n<p>语法：</p>\n<pre><code class=\"language-sql\">UPDATE table_name SET column = expr [, column = expr ...]\n [WHERE ...] [ORDER BY ...] [LIMIT ...]</code></pre>\n<p>案例：</p>\n<pre><code class=\"language-sql\">update exam_result set math = 80 where name = '孙悟空';</code></pre>\n<pre><code class=\"language-sql\">-- 将曹孟德同学的数学成绩变更为 60 分，语文成绩变更为 70 分\nupdate exam_result set math = 60,chinese = 70 where name = '曹孟德';</code></pre>\n<p><img alt=\"\" height=\"265\" src=\"image\\f1052a7a552c42c0a9823f104292109c.png\" width=\"524\"/></p>\n<h2 id=\"5%E3%80%81%E5%88%A0%E9%99%A4%EF%BC%88Delete%EF%BC%89\"><span style=\"color:#a2e043;\"><strong>5、删除（Delete）</strong></span></h2>\n<p> 语法：</p>\n<pre><code class=\"language-sql\">DELETE FROM  table_name [WHERE ...] [ORDER BY ...] [LIMIT ...]</code></pre>\n<pre><code class=\"language-sql\">-- 删除孙悟空同学的考试成绩\ndelete from exam_result where name = '孙悟空';</code></pre>\n<p><img alt=\"\" src=\"image\\97afb2bb6b034103a2eeba5e7d170efd.png\"/></p>\n<h1 id=\"%E4%B8%89%E3%80%81MySQL%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E8%BF%9B%E9%98%B6\"><span style=\"color:#956fe7;\"><strong>三、MySQL表的增删改查进阶</strong></span></h1>\n<h2 id=\"%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A6%E6%9D%9F\"><span style=\"color:#a2e043;\"><strong>1、数据库约束</strong></span></h2>\n<h3 id=\"1.1%E3%80%81%E7%BA%A6%E6%9D%9F%E7%B1%BB%E5%9E%8B\"><span style=\"color:#ff9900;\"><strong>1.1、约束类型</strong></span></h3>\n<blockquote>\n<p><strong>NOT NULL</strong> - 指示某列不能存储 NULL 值。</p>\n<p><strong>UNIQUE</strong> - 保证某列的每行必须有唯一的值。</p>\n<p><strong>DEFAULT</strong> - 规定没有给列赋值时的默认值。</p>\n<p><strong>PRIMARY KEY - NOT NULL</strong> 和 <strong>UNIQUE</strong> 的结合。确保某列（或两个列多个列的结合）有唯一标 识，有助于更容易更快速地找到表中的一个特定的记录。</p>\n<p><strong>FOREIGN KEY</strong> - 保证一个表中的数据匹配另一个表中的值的参照完整性。</p>\n<p><strong>CHECK</strong> - 保证列中的值符合指定的条件。对于MySQL数据库，对CHECK子句进行分析，但是忽略 CHECK子句。</p>\n</blockquote>\n<h3 id=\"1.2%E3%80%81NULL%E7%BA%A6%E6%9D%9F\"><span style=\"color:#ff9900;\"><strong>1.2、NULL约束</strong></span></h3>\n<p>创建表时，可以指定某列不为空：</p>\n<pre><code class=\"language-sql\">drop table if exists student;\ncreate table student(\n    id int not NULL,\n    sn int,\n    name varchar(20),\n    qq_mail varchar(10)\n);</code></pre>\n<h3 id=\"1.3%E3%80%81UNIQUE%EF%BC%9A%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F\"><span style=\"color:#ff9900;\"><strong>1.3、UNIQUE：唯一约束</strong></span></h3>\n<p>指定sn列为唯一的、不重复的：</p>\n<pre><code class=\"language-sql\">drop table if exists student;\ncreate table student(\n    id int not NULL,\n    sn int unique,\n    name varchar(20),\n    qq_mail varchar(10)\n);</code></pre>\n<h3 id=\"1.4%E3%80%81DEFAULT%EF%BC%9A%E9%BB%98%E8%AE%A4%E5%80%BC%E7%BA%A6%E6%9D%9F\"><span style=\"color:#ff9900;\"><strong>1.4、DEFAULT：默认值约束</strong></span></h3>\n<p>指定插入数据时，name列为空，默认值unkown：</p>\n<pre><code class=\"language-sql\">drop table if exists student;\ncreate table student(\n    id int not NULL,\n    sn int unique,\n    name varchar(20) default 'unkown',\n    qq_mail varchar(10)\n);</code></pre>\n<h3 id=\"1.5%E3%80%81PRIMARY%20KEY%EF%BC%9A%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F\"><span style=\"color:#ff9900;\"><strong>1.5、PRIMARY KEY：主键约束</strong></span></h3>\n<p>指定id列为主键：</p>\n<pre><code class=\"language-sql\">drop table if exists student;\ncreate table student(\n    id int not NULL primary key,\n    sn int unique,\n    name varchar(20) default 'unkown',\n    qq_mail varchar(10)\n);</code></pre>\n<p>对于整数类型的主键，常配搭自增长auto_increment来使用。插入数据对应字段不给值时，使用最大 值+1。</p>\n<pre><code class=\"language-sql\">-- 主键是 NOT NULL 和 UNIQUE 的结合，可以不用 NOT NULL\nid int primary key auto_increment,</code></pre>\n<h3 id=\"1.6%E3%80%81FOREIGN%20KEY%EF%BC%9A%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F\"><span style=\"color:#ff9900;\"><strong>1.6、FOREIGN KEY：外键约束</strong></span></h3>\n<p>外键用于关联其他表的主键或唯一键，语法：</p>\n<pre><code class=\"language-sql\">foreign key (字段名) references 主表(列)</code></pre>\n<p>创建班级表classes，id为主键：</p>\n<pre><code class=\"language-sql\">-- 创建班级表，有使用MySQL关键字作为字段时，需要使用``来标识\ndrop table if exists classes;\ncreate table classes(\n    id int primary key auto_increment,\n    name varchar(20),\n    `desc` varchar(100)\n);</code></pre>\n<p>创建学生表student，一个学生对应一个班级，一个班级对应多个学生。使用id为主键， classes_id为外键，关联班级表id</p>\n<pre><code class=\"language-sql\">drop table if exists student;\ncreate table student(\n    id int primary key auto_increment,\n    sn int unique,\n    name varchar(20) default 'unkown',\n    qq_mail varchar(20),\n    classes_id int,\n    foreign key (classes_id) references classes(id)\n);</code></pre>\n<h3 id=\"1.7%E3%80%81CHECK%E7%BA%A6%E6%9D%9F%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\"><span style=\"color:#ff9900;\"><strong>1.7、CHECK约束（了解）</strong></span></h3>\n<p>MySQL使用时不报错，但忽略该约束：</p>\n<pre><code class=\"language-sql\">drop table if exists test_user;\ncreate table test_user(\n    id int,\n    name varchar(20),\n    sex varchar(1),\n    check(sex = '男' or sex = '女')\n);</code></pre>\n<h2 id=\"2%E3%80%81%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1\"><span style=\"color:#a2e043;\"><strong>2、表的设计</strong></span></h2>\n<h3 id=\"2.1%E3%80%81%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F\"><span style=\"color:#ff9900;\"><strong>2.1、三大范式</strong></span></h3>\n<p><strong>一对一</strong></p>\n<p><img alt=\"\" height=\"158\" src=\"image\\6dd73ae6d83b457fa1cd31f13a02bae0.png\" width=\"573\"/></p>\n<p> <strong>一对多</strong></p>\n<p><img alt=\"\" height=\"154\" src=\"image\\eb61edee7bf54156a171beab1d143874.png\" width=\"568\"/></p>\n<p> <strong>多对多</strong></p>\n<p><img alt=\"\" height=\"253\" src=\"image\\bc0d80e81d8f483dbb376100d7ef2e96.png\" width=\"569\"/></p>\n<p>  创建课程表</p>\n<pre><code class=\"language-sql\">drop table if exists test_user;\ncreate table test_user(\n    id int,\n    name varchar(20),\n    sex varchar(1),\n    check(sex = '男' or sex = '女')\n);</code></pre>\n<p>创建学生课程中间表，考试成绩表</p>\n<pre><code class=\"language-sql\">drop table if exists score(\n    id int primary key auto_increment,\n    score decimal(3,1),\n    student_id,\n    course_id,\n    foreign key (student_id) references student(id),\n    foreign key (course_id) references course(id)\n);</code></pre>\n<h2 id=\"3%EF%BC%8C%E6%96%B0%E5%A2%9E\"><span style=\"color:#a2e043;\"><strong>3，新增</strong></span></h2>\n<p>插入查询结果</p>\n<p>语法：</p>\n<pre><code class=\"language-sql\">insert  into table_name column select...</code></pre>\n<p>案例：创建一张用户表，设计有name姓名、email邮箱、sex性别、mobile手机号字段。需要把已有的 学生数据复制进来，可以复制的字段为name、qq_mail</p>\n<pre><code class=\"language-sql\">-- 创建用户表\nDROP TABLE IF EXISTS test_user;\nCREATE TABLE test_user (\nid INT primary key auto_increment,\nname VARCHAR(20) comment '姓名',\nage INT comment '年龄',\nemail VARCHAR(20) comment '邮箱',\nsex varchar(1) comment '性别',\nmobile varchar(20) comment '手机号'\n);\n \n--把学生表中的所有数据复制到用户表\ninsert into test_user(name,email) select name,qq_mail from student;</code></pre>\n<h2 id=\"4%E3%80%81%E6%9F%A5%E8%AF%A2\"><span style=\"color:#a2e043;\"><strong>4、查询</strong></span></h2>\n<h3 id=\"4.1%E3%80%81%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2\"><span style=\"color:#ff9900;\"><strong>4.1、聚合查询</strong></span></h3>\n<p><strong>聚合函数</strong></p>\n<p>常见的统计总数、计算平局值等操作，可以使用聚合函数来实现，常见的聚合函数有：</p>\n<p><img alt=\"\" height=\"278\" src=\"image\\b8369512d0a14354998c195c35823f47.png\" width=\"916\"/></p>\n<p> <strong>COUNT</strong></p>\n<pre><code class=\"language-sql\">-- 统计班级共有多少同学\nselect count(*) from student;\nselect count(0) from student;</code></pre>\n<pre><code class=\"language-sql\">-- 统计班级收集的 qq_mail 有多少个，qq_mail 为 NULL 的数据不会计入结果\nselect count(qq_mail) from student;</code></pre>\n<p><strong>SUM</strong></p>\n<pre><code class=\"language-sql\">-- 统计数学成绩总分\nselect sum(math) from exam_result;</code></pre>\n<pre><code class=\"language-sql\">-- 不及格 &lt; 60 的总分，没有结果，返回 NULL\nselect sum(math) from exam_result where math &lt; 60;</code></pre>\n<p><strong>AVG</strong></p>\n<pre><code class=\"language-sql\">-- 统计平均总分\nselect avg(chinese + math + english) 平均总分 from exam_result;</code></pre>\n<p><strong>MAX</strong></p>\n<pre><code class=\"language-sql\">-- 返回英语最高分\nselect max(english) from exam_result;</code></pre>\n<p><strong>MIN</strong></p>\n<pre><code class=\"language-sql\">-- 返回 &gt; 70 分以上的数学最低分\nselect min(math) from exam_result where math &gt; 70;</code></pre>\n<p><strong><span style=\"color:#1c7331;\"><em>①GROUP BY子句</em></span></strong></p>\n<p>SELECT 中使用 GROUP BY 子句可以对指定列进行分组查询。需要满足：使用 GROUP BY 进行分组查 询时，SELECT 指定的字段必须是“分组依据字段”，其他字段若想出现在SELECT 中则必须包含在聚合函 数中。</p>\n<pre><code class=\"language-sql\">select column1, sum(column2), .. from table group by column1,column3;</code></pre>\n<p>准备测试表及数据：职员表，有id（主键）、name（姓名）、role（角色）、salary（薪水）</p>\n<pre><code class=\"language-sql\">create table emp(\nid int primary key auto_increment,\nname varchar(20) not null,\nrole varchar(20) not null,\nsalary numeric(11,2)\n);</code></pre>\n<pre><code class=\"language-sql\">insert into emp(name, role, salary) values\n('李白','服务员', 1000.20),\n('杜甫','游戏陪玩', 2000.99),\n('孙悟空','游戏角色', 999.11),\n('猪无能','游戏角色', 333.5),\n('沙和尚','游戏角色', 700.33),\n('隔壁老王','董事长', 12000.66);</code></pre>\n<p>查询每个角色的最高工资、最低工资和平均工资</p>\n<pre><code class=\"language-sql\">select role,max(salary),min(salary),avg(salary) from emp group by role;</code></pre>\n<p><img alt=\"\" src=\"image\\f4a4ec03bf854b0da6b00dfd3412eaaf.png\"/></p>\n<p><em><span style=\"color:#1c7331;\"><strong>②HAVING</strong></span></em></p>\n<p>GROUP BY 子句进行分组以后，需要对分组结果再进行条件过滤时，不能使用 WHERE 语句，而需要用 HAVING显示平均工资低于1500的角色和它的平均工资</p>\n<pre><code class=\"language-sql\">select role,max(salary),min(salary),avg(salary) from emp group by role having avg(salary) &lt; 1500;</code></pre>\n<p><img alt=\"\" src=\"image\\99629ae81a0242dcb13ae85e63faddf3.png\"/></p>\n<h3 id=\"4.2%E3%80%81%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2\"><span style=\"color:#ff9900;\"><strong>4.2、联合查询</strong></span></h3>\n<p>实际开发中往往数据来自不同的表，所以需要多表联合查询。多表查询是对多张表的数据取笛卡尔积：</p>\n<p><img alt=\"\" height=\"321\" src=\"image\\87c8a7ff0b324353be00eb8055719bf9.png\" width=\"512\"/></p>\n<p>  测试示例：</p>\n<pre><code class=\"language-sql\">insert into classes(name, `desc`) values\n('计算机系2019级1班', '学习了计算机原理、C和Java语言、数据结构和算法'),\n('中文系2019级3班','学习了中国传统文学'),\n('自动化2019级5班','学习了机械自动化');\n \ncreate table classes(\n    name varchar(20),\n    `desc` varchar(200)\n);</code></pre>\n<pre><code class=\"language-sql\">create table student(\n    id int,\n    sn varchar(6),\n    name varchar(20),\n    qq_mail varchar(20),\n    classes_id int\n);\n \ninsert into student(id,sn, name, qq_mail, classes_id) values\n(1,'09982','黑旋风李逵','xuanfeng@qq.com',1),\n(2,'00835','菩提老祖',null,1),\n(3,'00391','白素贞',null,1),\n(4,'00031','许仙','xuxian@qq.com',1),\n(5,'00054','不想毕业',null,1),\n(6,'51234','好好说话','say@qq.com',2),\n(7,'83223','tellme',null,2),\n(8,'09527','老外学中文','foreigner@qq.com',2);</code></pre>\n<pre><code class=\"language-sql\">create table course(\n    id int primary key auto_increment,\n    name varchar(20)\n);\n \ninsert into course(id,name) values\n(1,'Java'),(2,'中国传统文化'),(3,'计算机原理'),(4,'语文'),(5,'高阶数学'),(6,'英文');\n \n </code></pre>\n<pre><code class=\"language-sql\">create table score(\n    score decimal(3,1),\n    student_id int,\n    course_id int\n);\n \ninsert into score(score, student_id, course_id) values\n-- 黑旋风李逵\n(70.5, 1, 1),(98.5, 1, 3),(33, 1, 5),(98, 1, 6),\n-- 菩提老祖\n(60, 2, 1),(59.5, 2, 5),\n-- 白素贞\n(33, 3, 1),(68, 3, 3),(99, 3, 5),\n-- 许仙\n(67, 4, 1),(23, 4, 3),(56, 4, 5),(72, 4, 6),\n-- 不想毕业\n(81, 5, 1),(37, 5, 5),\n-- 好好说话\n(56, 6, 2),(43, 6, 4),(79, 6, 6),\n-- tellme\n(80, 7, 2),(92, 7, 6);</code></pre>\n<p id=\"4.2.1%E3%80%81%E5%86%85%E8%BF%9E%E6%8E%A5\"><span style=\"color:#be191c;\"><strong>内连接</strong></span></p>\n<p>语法：</p>\n<pre><code class=\"language-sql\">select 字段 from 表1 别名1 [inner] join 表2 别名2 on 连接条件 and 其他条件;\nselect 字段 from 表1 别名1,表2 别名2 where 连接条件 and 其他条件;</code></pre>\n<p>案例：</p>\n<p>（1）查询“许仙”同学的 成绩</p>\n<pre><code class=\"language-sql\">select sco.score from student stu inner join score sco on stu.id=sco.student_id\nand stu.name='许仙';\n-- 或者\nselect sco.score from student stu, score sco where stu.id=sco.student_id and\nstu.name='许仙';</code></pre>\n<p><img alt=\"\" height=\"162\" src=\"image\\86419c89a5bf4124b51ea33d949b907c.png\" width=\"611\"/></p>\n<p>初学者建议一步一步来</p>\n<pre><code class=\"language-sql\">select student.id,student.name ,score.student_id,score.score from student,score;</code></pre>\n<p><img alt=\"\" src=\"image\\b55bfec5568d4a5a92993b9eb6a0da6f.png\"/></p>\n<pre><code class=\"language-sql\">select student.id,student.name ,score.student_id,score.score from \nstudent,score where student.id = score.student_id;</code></pre>\n<p><img alt=\"\" height=\"360\" src=\"image\\6c0492264d5c4437839166bf79e2d412.png\" width=\"548\"/></p>\n<p><img alt=\"\" src=\"image\\2b3b617363794006a954c7e19fcc17e4.png\"/></p>\n<pre><code class=\"language-sql\">select student.id,student.name ,score.student_id,score.score from\nstudent,score where student.id = score.student_id and student.name = '许仙';</code></pre>\n<p><img alt=\"\" src=\"image\\cdc58ad3d44e4fec86beb388dffbb6e0.png\"/></p>\n<p>（2）查询所有同学的总成绩，及同学的个人信息：</p>\n<pre><code class=\"language-sql\">SELECT\nstu.sn,\nstu.NAME,\nstu.qq_mail,\nsum( sco.score ) \nFROM\nstudent stu\nJOIN score sco ON stu.id = sco.student_id\nGROUP BY\nsco.student_id;</code></pre>\n<p><img alt=\"\" height=\"268\" src=\"image\\61673a37d48443a6a06c590e69f6aa75.png\" width=\"508\"/></p>\n<pre><code class=\"language-sql\">select student.id ,student.name,score.student_id,score.score from student,score;</code></pre>\n<p><img alt=\"\" height=\"283\" src=\"image\\6a7d323e058a4db59b6724cc8fbb7aa3.png\" width=\"544\"/></p>\n<pre><code class=\"language-sql\">select student.id ,student.name,score.student_id,score.score from student,score\nwhere student.id = score.student_id;</code></pre>\n<p><img alt=\"\" height=\"276\" src=\"image\\2410da0d951f462aa3991116939d1cbd.png\" width=\"496\"/></p>\n<pre><code class=\"language-sql\">select student.id ,student.name,score.student_id,score.score from student,score\nwhere student.id = score.student_id group by student.id;</code></pre>\n<p><img alt=\"\" height=\"187\" src=\"image\\0c9ec006d960411285e4f05766dc415e.png\" width=\"551\"/></p>\n<pre><code class=\"language-sql\">select student.id ,student.name,sum(score.score) from student,score\nwhere student.id = score.student_id group by student.id;</code></pre>\n<p><img alt=\"\" height=\"200\" src=\"image\\0ec671cca9574b4aa09415a827f992e2.png\" width=\"597\"/></p>\n<p> （3）查询所有同学的成绩，及同学的个人信息</p>\n<pre><code class=\"language-sql\">select student.id,student.name,course.id,course.name,score.student_id,score.score from \nstudent,course,score;</code></pre>\n<p><img alt=\"\" height=\"216\" src=\"image\\9a297b8cc799474bb35d633759ceb55a.png\" width=\"533\"/></p>\n<pre><code class=\"language-sql\">select student.id,student.name,course.id,course.name,score.student_id,score.score from \nstudent,course,score where student.id = score.student_id;</code></pre>\n<p><img alt=\"\" height=\"192\" src=\"image\\3bbcc398b5ee44e7a7452e4869acc8de.png\" width=\"551\"/></p>\n<p><img alt=\"\" src=\"image\\3355b0e1707c48f3a3a9dd0b5027dc96.png\"/></p>\n<pre><code class=\"language-sql\">select student.id,student.name,course.id,course.name,score.student_id,score.score from \nstudent,course,score where student.id = score.student_id and course.id = score.course_id;</code></pre>\n<p><img alt=\"\" height=\"244\" src=\"image\\53e0130a277945dcbc4b3b0c1346e6ac.png\" width=\"501\"/></p>\n<pre><code class=\"language-sql\">select student.name,course.name,score.score from \nstudent,course,score where student.id = score.student_id and course.id = score.course_id;</code></pre>\n<p><img alt=\"\" height=\"258\" src=\"image\\496a1829f6ee4594a1457bedd80fbab1.png\" width=\"481\"/></p>\n<p><span style=\"color:#be191c;\"><strong>自连接</strong></span></p>\n<p>显示所有“计算机原理”成绩比“Java”成绩高的成绩信息</p>\n<pre><code class=\"language-sql\">select * from course where name = 'java';\nselect * from course where name = '计算机原理';</code></pre>\n<p><img alt=\"\" height=\"233\" src=\"image\\c7d265e2f9a1438daca9b1e40ba0045f.png\" width=\"524\"/></p>\n<pre><code class=\"language-sql\">select s1.student_id,s1.score,s1.course_id,s2.student_id,s2.course_id  \nfrom score s1,score s2;</code></pre>\n<p><img alt=\"\" height=\"217\" src=\"image\\073405b3c1174b77b41c3ceb2e058457.png\" width=\"513\"/></p>\n<pre><code class=\"language-sql\">select s1.student_id,s1.score,s1.course_id,s2.student_id,s2.course_id  \nfrom score s1,score s2 where s1.student_id = s2.student_id;</code></pre>\n<p><img alt=\"\" height=\"252\" src=\"image\\8a9084dfd04544c4a946885b1409fe5e.png\" width=\"554\"/></p>\n<p><img alt=\"\" height=\"190\" src=\"image\\3786b075ea114203bcaf052dedd1c215.png\" width=\"603\"/></p>\n<pre><code class=\"language-sql\">select s1.student_id,s1.score,s1.course_id,s2.student_id,s2.course_id  \nfrom score s1,score s2 where s1.student_id = s2.student_id and s1.course_id\n= 3 and s2.course_id = 1;</code></pre>\n<p><img alt=\"\" height=\"145\" src=\"image\\bda3968f166d4b18a09f63939fed6335.png\" width=\"559\"/></p>\n<pre><code class=\"language-sql\">select s1.student_id,s1.score,s1.course_id,s2.student_id,s2.course_id  \nfrom score s1,score s2 where s1.student_id = s2.student_id and s1.course_id\n= 3 and s2.course_id = 1 and s1.score &gt; s2.score;</code></pre>\n<p id=\"4.2.3%E3%80%81%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span style=\"color:#be191c;\"><strong>子查询</strong></span></p>\n<p>查询与“不想毕业” 同学的同班同学</p>\n<pre><code class=\"language-sql\">select classes_id from student where name = '不想毕业';</code></pre>\n<p><img alt=\"\" height=\"92\" src=\"image\\09ce09ece13a4708bb0a486d28e3059e.png\" width=\"501\"/></p>\n<pre><code class=\"language-sql\">select name from student where classes_id = (select classes_id from student where name = '不想毕业');</code></pre>\n<p><img alt=\"\" height=\"111\" src=\"image\\1301a0515ed94eb09d72d7448a1f46bf.png\" width=\"515\"/></p>\n<p> 查询“语文”或“英文”课程的成绩信息</p>\n<pre><code class=\"language-sql\">select id from course where name = '语文' or name = '英文';</code></pre>\n<p><img alt=\"\" height=\"135\" src=\"image\\cae397a7ca714030a7b1195a54104e00.png\" width=\"572\"/></p>\n<pre><code class=\"language-sql\">select * from score where course_id in (select id from course where name = '语文' or name = '英文');\n</code></pre>\n<p><img alt=\"\" height=\"133\" src=\"image\\22055befa5714bc39164fc26e373febc.png\" width=\"574\"/></p>\n<p><span style=\"color:#be191c;\"><strong>合并查询</strong></span></p>\n<p>查询id小于3，或者名字为“英文”的课程</p>\n<pre><code class=\"language-sql\">select * from course where id &lt; 3 or name = '英文';\n \nselect * from course where id &lt; 3 union select * from course where name = '英文';</code></pre>\n<p><img alt=\"\" height=\"207\" src=\"image\\7530e66621424d8381241b5427b0e2e9.png\" width=\"483\"/></p>\n<h1 id=\"%E5%9B%9B%E3%80%81MySQL%E7%B4%A2%E5%BC%95%E4%B8%8E%E4%BA%8B%E5%8A%A1\"><span style=\"color:#956fe7;\"><strong>四、MySQL索引与事务</strong></span></h1>\n<h2 id=\"%E4%B8%80%E3%80%81MySQL%E7%B4%A2%E5%BC%95\"><span style=\"color:#a2e043;\"><strong>1、MySQL索引</strong></span></h2>\n<h3 id=\"1.1%E3%80%81%E6%A6%82%E5%BF%B5\"><span style=\"color:#ff9900;\"><strong>1.1、概念</strong></span></h3>\n<blockquote>\n<p>索引是一种特殊的文件，包含着对数据表里所有记录的引用指针。可以对表中的一列或多列创建索引， 并指定索引的类型，各类索引有各自的数据结构实现。索引是关系数据库中对某一列或多个列的值进行<strong>预排序</strong>的<strong>数据结构</strong>，在 MySQL 中也被称为 Key。</p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong><em>通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</em></strong></span></p>\n</blockquote>\n<blockquote>\n<p>注意事项：有序性是因为一切二分法查找法都要求数据已经是排好顺序的。如果把索引看做 key（虽然 key 数据也是来自于表单中一行记录的某些字段值），那么 value 在 MyISAM 中就是记录的在存储文件中的地址，而在 InnoDB 中 value 直接就是对应的一行数据。</p>\n</blockquote>\n<blockquote>\n<p>假设我们有一张数据表 workers(员工表)，该表有三个字段（列）,分别是name、age 和address。假设表works有上万行数据，现在需要从这个表中查找出所有名字是‘ZhangSan’的雇员信息，你会快速的写出SQL语句：</p>\n</blockquote>\n<pre><code class=\"language-sql\">select name,age,address from workers where name='ZhangSan'</code></pre>\n<blockquote>\n<p>如果数据库还没有索引这个东西，一旦我们运行这个SQL查询，查找名字为ZhangSan的雇员的过程中，究竟会发生什么？数据库不得不在workes表中的每一行查找并确定雇员的名字（name）是否为‘ZhangSan’。</p>\n<p>由于我们想要得到每一个名字为ZhangSan的雇员信息，在查询到第一个符合条件的行后，不能止查询，因为可能还有其他符合条件的行，所以必须一行一行的查找直到最后一行——这就意味数据库不得不检查上万行数据才能找到所有名字为ZhangSan的雇员。这就是所谓的全表扫描，显然这种模式效率太慢。</p>\n<p>使用索引的全部意义就是：通过缩小一张表中需要查询的记录/行的数目来加快搜索的速度。在关系型数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种存储结构，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单（定义真特么拗口）。大白话意思是索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。</p>\n<p>一个索引是存储的表中一个特定列的值数据结构。索引是在表的列上创建。要记住的关键点是索引包含一个表中列的值，并且这些值存储在一个数据结构中。请牢记这一点：<em><span style=\"color:#fe2c24;\"><strong>索引是一种数据结构。</strong></span></em></p>\n</blockquote>\n<h3 id=\"1.2%E3%80%81%E4%BD%9C%E7%94%A8\"><span style=\"color:#ff9900;\"><strong>1.2、作用</strong></span></h3>\n<blockquote>\n<p>数据库中的表、数据、索引之间的关系，类似于书架上的图书、书籍内容和书籍目录的关系。索引所起的作用类似书籍目录，可用于快速定位、检索数据。索引对于提高数据库的性能有很大的帮助。</p>\n</blockquote>\n<h3 id=\"1.3%E3%80%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span style=\"color:#ff9900;\"><strong>1.3、使用场景</strong></span></h3>\n<blockquote>\n<p>索引的本质实际上还是存储在磁盘上的数据结构，它可以有的存储结构：</p>\n<ul><li> <p><span style=\"color:#fe2c24;\"><strong>二叉搜索树；</strong></span></p> </li><li> <p><span style=\"color:#fe2c24;\"><strong>红黑树；</strong></span></p> </li><li> <p><span style=\"color:#fe2c24;\"><strong>Hash 表；</strong></span></p> </li><li> <p><span style=\"color:#fe2c24;\"><strong>B-Tree</strong></span></p> </li><li> <p><span style=\"color:#fe2c24;\"><strong>B+Tree</strong></span></p> </li></ul>\n<p>其中 MySQL 的 InnoDB 支持 B+Tree 以及 Hash 表，下面会具体分析各个数据结构的区别。</p>\n</blockquote>\n<p id=\"%E2%91%A0%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95\"><span style=\"color:#1c7331;\"><strong>哈希索引</strong></span></p>\n<blockquote>\n<p>哈希索引(hash index)基于哈希表实现，只有精确匹配索引所有列的查询才有效生。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码(hash code)，哈希码是一个较小的值，并且不同键值的行计算出来的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。</p>\n<p>在 MySQL 中，只有 Memory 引擎显式支持哈希索引。这也是 Memory 引擎表的默认索引类型，Memory 引擎同时也支持 B-Tree 索引。值得一提的是，Memory 引擎是支持非唯一哈希索引的，这在数据库世界里面是比较与众不同的。如果多个列的哈希值相同，索引会以链表的方式存放多个记录指针到同一个哈希条目中。</p>\n</blockquote>\n<p>下面来看一个例子。假设有如下表：</p>\n<pre><code class=\"language-sql\">create table tes(\n fname VARCHAR(50) NOT NULL,\n  lname VARCHAR(50) NOT NULL,\n  KEY USING HASH(fname)\n) ENGINE = MEMORY;</code></pre>\n<p>然后再填入相关数据后，表格有如下数据：</p>\n<p><img alt=\"\" height=\"152\" src=\"image\\82eeca6c97ef40f2b18ca4fc16a1708a.png\" width=\"496\"/></p>\n<p> 假设索引使用假想的哈希函数 <code>f()</code>，它返回下面的值(都是示例数据，非真实数据) :</p>\n<ul><li> <p>f(‘a’) = 23</p> </li><li> <p>f(‘b’) = 74</p> </li><li> <p>f(‘p’) = 87</p> </li><li> <p>f(‘v’) = 24</p> </li></ul>\n<p>则哈希索引的数据结构如下：</p>\n<p><img alt=\"\" height=\"251\" src=\"image\\c4e72a71a8584ac6b71ede865d6e4900.png\" width=\"941\"/></p>\n<blockquote>\n<p> <strong>注意每个槽的编号是顺序的，但是数据行不是</strong>。</p>\n</blockquote>\n<p>下面使用 hash 索引字段进行查询，有：</p>\n<pre><code class=\"language-sql\">select lname from tes where fname = 'p';</code></pre>\n<p> <img alt=\"\" height=\"130\" src=\"image\\5ff5efd421e4443c900aef0b09df498a.png\" width=\"540\"/></p>\n<p>其分为如下的步骤：</p>\n<blockquote>\n<p>MSQL 先计算 ‘p’ 的哈希值；根据哈希值进行寻找对应的地址指针，意味 hash 槽是有序的，因此查询效率很高；读取对应指针上的数据是否为 ‘p’，是则返回，因为索引自身只需存储对应的哈希值，所以索引的结构十分紧凑，这也让哈希索引查找的速度非常快。然而，哈希索引也有它的限制：</p>\n<p>哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。不过，访问内存中的行的速度很快，所以大部分情况下这一点对性能的影响并不明显。哈希索引数据并不是按照索引值顺序存储的，所以也就无法用于排序。哈希索引不支持部分索引列匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。例如，在数据列 (A,B) 上建立哈希索引，如果查询只有数据列 A，则无法使用该索引。</p>\n<p>哈希索引只支持等值比较查询，包括 =、IN()、&lt;=&gt;；不支持任何范围查询，例如 WHEREprice&gt;100。</p>\n<p>访问哈希索引的数据非常快，除非有很多哈希冲突(不同的索引列值却有相同的哈希值)。当出现哈希冲突的时候，存储引擎必须遍历链表中所有的行指针，逐行进行比较，直到找到所有符合条件的行。</p>\n<p>如果哈希冲突很多的话，一些索引维护操作的代价也会很高。例如，如果在某个选择性很低(哈希冲突很多)的列上建立哈希索引，那么当从表中删除一行时，存储引擎需要遍历对应哈希值的链表中的每一行，找到并删除对应行的引用，冲突越多，代价越大。</p>\n</blockquote>\n<p><span style=\"color:#1c7331;\"><strong>TREE</strong></span></p>\n<blockquote>\n<p>要考虑对数据库表的某列或某几列创建索引，需要考虑以下几点：</p>\n<p>数据量较大，且经常对这些列进行条件查询。</p>\n<p>该数据库表的插入操作，及对这些列的修改操作频率较低。</p>\n<p>索引会占用额外的磁盘空间。</p>\n</blockquote>\n<p>在没有GUI工具的情况下，可以使用以下命令查看索引：</p>\n<p><img alt=\"\" height=\"107\" src=\"image\\ca03ef55983b4d9e8686d35ddee21c6f.png\" width=\"569\"/></p>\n<blockquote>\n<p>上述ad_article表中有两个索引，Key_name中有显示:</p>\n<p>-PRIMARY主键索引，Seq_in_index索引序号为1，从1开始，Collation为“A”表示升序（或NULL无分类），对应字段是id</p>\n<p>-idx_cid是自建索引，由cid、available、id三个字段组成，分别对应序号1,2,3Index_type=BTREE这块内容很多人不懂其意思，其实通过GUI工具创建索引时也会有BTREE 的显示，先着重了解一下。</p>\n</blockquote>\n<blockquote>\n<p>在计算机数据结构（不懂数据结构的自行充电）体系中，为了加速查找的速度，常见的数据结构有两种：</p>\n<p>-<span style=\"color:#fe2c24;\"><em><strong>Hash哈希结构</strong></em></span>，例如Java中的HashMap，这种数据组织结构可以让查询/插入/修改/删除的平均时间复杂度都为O(1);</p>\n<p>-<span style=\"color:#fe2c24;\"><em><strong>Tree 树 结构</strong></em></span> ， 这种数据组织结构可以让查询/插入/修改/删除的平均时间复杂度都为O(log(n));不管读还是写，Hash这种类型比Tree树这种类型都要更快一些，那为什么MySQL的开发者既使用Hash类型做为索引，又使用了BTREE呢？</p>\n</blockquote>\n<blockquote>\n<p>确实用HASH索引更快，因为每次都只查询一条信息（重名的雇员姓名也才几条而已），但实际上业务对于SQL的应用场景是：</p>\n<p>-orderby 需要排个序</p>\n<p>-groupby 还要分个组</p>\n<p>-还要比较大小 大于或小于等等</p>\n</blockquote>\n<blockquote>\n<p>这种情况下如果继续用HASH类型做索引结构，其时间复杂度会从O(1)直接退化为O(n)，相当于全表扫描了，而Tree的特性保证了不管是哪种操作，依然能够保持O(log(n))的高效率。那MySQL中的BTREE和TREE又有啥联系与区别呢？先来看看传统的二叉树：</p>\n</blockquote>\n<p><img alt=\"\" height=\"252\" src=\"image\\7b19b2b9b63e408fbd75a6f018ce5c8b.png\" width=\"592\"/></p>\n<blockquote>\n<p>二叉树是大家熟知的一种树，用它来做索引行不行，可以是可以，但有几个问题：</p>\n<p>-如果索引数据很多，树的层次会很高（只有左右两个子节点），数据量大时查询还是会慢</p>\n<p>-二叉树每个节点只存储一个记录，一次查询在树上找的时候花费磁盘IO次数较多</p>\n<p>所以它并不适合直接拿来做索引存储，算法设计人员在二叉树的基础之上进行了变种，引入了</p>\n<p>BTREE</p>\n</blockquote>\n<p id=\"%E2%91%A2BTREE\"><span style=\"color:#1c7331;\"><strong>BTREE</strong></span></p>\n<p><img alt=\"\" src=\"image\\3612266354b945cdbd214927cee5f0d3.png\"/></p>\n<blockquote>\n<p><em><span style=\"color:#fe2c24;\"><strong>如上图可知BTREE有以下特点：</strong></span></em></p>\n<p>-不再是二叉搜索，而是N叉搜索，树的高度会降低，查询快</p>\n<p>-叶子节点，非叶子节点，都可以存储数据，且可以存储多个数据</p>\n<p>-通过中序遍历，可以访问树上所有节点</p>\n<p>BTREE被作为实现索引的数据结构被创造出来，是因为它能够完美的利用“局部性原理”，其设计逻辑是这样的：</p>\n<p>-内存读写快，磁盘读写慢，而且慢很多</p>\n<p>-磁盘预读：磁盘读写并不是按需读取，而是按页预读，一次会读一页的数据，每次加载一些看起</p>\n<p>来是冗余的数据，如果未来要读取的数据就在这一页中，可以避免未来的磁盘读写，提高效率（通常，一页数据是4K）</p>\n<p>-局部性原理：软件设计要尽量遵循“数据读取集中”与“使用到一个数据，大概率会使用其附近的数据”，这样磁盘预读能充分提高磁盘IO效能</p>\n</blockquote>\n<p><span style=\"color:#1c7331;\"><strong>B+TREE</strong></span></p>\n<p>早先的MySQL就是使用的BTREE做为索引的数据结构，随着时间推移，B树发生了较多的变种，其中最常见的就是B+TREE变种，现在MySQL用的就是这种，示意如下：</p>\n<p><img alt=\"\" src=\"image\\66b70fbcef5b419dbc7e063ea8280a9d.png\"/></p>\n<blockquote>\n<p><em><span style=\"color:#fe2c24;\"><strong>B+TREE改进点及优势所在：</strong></span></em></p>\n<p>-仍然是N叉树，层级小，非叶子节点不再存储数据，数据只存储在同一层的叶子节点上，B+树从根到每一个节点的路径长度一样，而B树不是这样</p>\n<p>-叶子之间，增加了链表(图中红色箭头指向)，获取所有节点，不再需要中序遍历，使用链表的next节点就可以快速访问到</p>\n<p>-范围查找方面，当定位min与max之后，中间叶子节点，就是结果集，不用中序回溯（范围查询在SQL中用得很多，这是B+树比B树最大的优势）</p>\n<p>-叶子节点存储实际记录行，记录行相对比较紧密的存储，适合大数据量磁盘存储；非叶子节点存储记录的PK，用于查询加速，适合内存存储</p>\n<p>-非叶子节点，不存储实际记录，而只存储记录的KEY的话，那么在相同内存的情况下，B+树能够存储更多索引</p>\n</blockquote>\n<blockquote>\n<p>可以来初步计算一下：假设key、子树节点指针均占用4B，则B树一个节点占用4 + 4 = 8B，一页页面大小4KB，则N = 4 * 1024 / 8B = 512，一个512叉的B树，1000w的数据，深度最大 log(512/2)(10^7) 约等于4。对比二叉树如AVL的深度为log(2)(10^7) 约为24，相差了5倍以上。假如一个节点大小是4KB，一个KEY有8字节，一页可以存4000/8=500个KEY，根据N叉树特点,就算一层500叉节点，则：</p>\n<p>第一层树：1个节点，1*500KEY , 大小4K</p>\n<p>第二层树：500节点 500*500=25万个KEY，500*4K=2M</p>\n<p>第三层树：500 * 500节点 500*500*500=1.2亿KEY，500*500*4K=1G</p>\n<p>如果没算错，1G空间，只用三层树结构，可以存1.2亿行数据的KEY。所以B+TREE索引只用占用很少的内存空间，却大大提升了查询效率（不论是单个查询、范围查询还是有序性查询），并且还减少了磁盘读写，所以好的算法与数据结构是可以省钱的。</p>\n</blockquote>\n<h3 id=\"1.4%E3%80%81%E4%BD%BF%E7%94%A8\"><span style=\"color:#ff9900;\"><strong>1.4、使用</strong></span></h3>\n<blockquote>\n<p>创建主键约束（PRIMARY KEY）、唯一约束（UNIQUE）、外键约束（FOREIGN KEY）时，会自动创建对应列的索引。</p>\n</blockquote>\n<p id=\"%E2%91%A0%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95\"><span style=\"color:#be191c;\"><strong>查看索引</strong></span></p>\n<pre><code class=\"language-sql\">show index from 表名;</code></pre>\n<p>案例：查看学生表已有的索引</p>\n<pre><code class=\"language-sql\">show index from student;</code></pre>\n<p id=\"%E2%91%A1%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95\"><span style=\"color:#be191c;\"><strong>创建索引</strong></span></p>\n<p>对于非主键、非唯一约束、非外键的字段，可以创建普通索引</p>\n<pre><code class=\"language-sql\">create index 索引名 on 表名(字段名);</code></pre>\n<p>案例：创建班级表中，name字段的索引</p>\n<pre><code class=\"language-sql\">create index idx_classes_name on classes(name);</code></pre>\n<p><em><strong>①创建主键索引</strong></em></p>\n<blockquote>\n<p>主键索引的定义：InnoDB 中的表单数据本身就要创建为一棵 B+ 树，而这棵排序节点用到的索引就被称为主键索引。</p>\n</blockquote>\n<p>只要有主键，那么主键索引根据的就是主键，我们在创建表和后续修改时都能够通过指定主键来确</p>\n<p>定主键索引，如下：</p>\n<p><em><strong>②创建表同时设置主键</strong></em></p>\n<pre><code class=\"language-sql\">create table teacher(\nid int(10) auto_increment,\nname varchar(20),\nage int(10),\nphone varchar(11),\nprimary key (id));--主键设置</code></pre>\n<p><em><strong>③单独设置主键</strong></em></p>\n<pre><code class=\"language-sql\">alter table teacher add primary key (id);</code></pre>\n<p><em><strong>④创建唯一索引</strong></em></p>\n<pre><code class=\"language-sql\">create table teacher(\nid int(10) auto_increment,\nname varchar(20),\nage int(10),\nphone varchar(11),\nprimary key (id),\nunique index idx_phone(phone(11)));--唯一索引\n \n--单独建唯一索引\ncreate unique index idx_phone on teacher(phone(11));\n--删除唯一索引\ndrop index idexName on tableName;\n--修改建唯一索引\nalter table teacher add unique idx_phone (phone(11));</code></pre>\n<p><em><strong>⑤创建普通索引</strong></em></p>\n<pre><code class=\"language-sql\">create table teacher(\nid int(10) auto_increment,\nname varchar(20),\nage int(10),\nphone varchar(11),\nprimary key (id),\nindex idx_phone(phone(11)));\n--单独建普通索引\ncreate index idx_phone on teacher(phone(11));\n--修改普通索引\nalter table teacher add index idx_phone (phone(11));</code></pre>\n<p><em><strong>⑥创建联合索引</strong></em></p>\n<pre><code class=\"language-sql\">create table teacher(\nid int(10) auto_increment,\nname varchar(20),\nphone varchar(11),\nprimary key (id),\nindex idx_name_phone (name(20),phone(11)));\n--单独建组合索引\ncreate index idx_name_phone on teacher (name(20),phone(11));\n--修改组合索引\nalter table teacher add index idx_name_phone (name(20),phone(11));</code></pre>\n<p><span style=\"color:#be191c;\"><strong>删除索引</strong></span></p>\n<pre><code class=\"language-sql\">drop index 索引名 on 表名;</code></pre>\n<p>案例：删除班级表中name字段的索引</p>\n<pre><code class=\"language-sql\">drop index idx_classes_name on classes;\n</code></pre>\n<h3 id=\"1.5%E3%80%81MySQL%E9%9D%A2%E8%AF%95%206%C2%A0%E9%97%AE\"><span style=\"color:#ff9900;\"><strong>1.5、MySQL面试 6 问</strong></span></h3>\n<p id=\"%E2%91%A0%E7%B4%A2%E5%BC%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span style=\"color:#be191c;\"><strong>①索引是什么？</strong></span></p>\n<blockquote>\n<p><em><strong>索引是一种特殊的文件</strong></em>(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。</p>\n<p><em><strong>索引是一种数据结构</strong></em>。数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B树及其变种B+树。更通俗的说，索引就相当于目录。为了方便查找书中的内容，通过对内容建立索引形成目录。而且索引是一个文件，它是要占据物理空间的。</p>\n<p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。比如我们在查字典的时候，前面都有检索的拼音和偏旁、笔画等，然后找到对应字典页码，这样然后就打开字典的页数就可以知道我们要搜索的某一个key的全部值的信息了。</p>\n</blockquote>\n<p id=\"%E2%91%A1%E7%B4%A2%E5%BC%95%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F\"><span style=\"color:#be191c;\"><strong>②索引有哪些优缺点？</strong></span></p>\n<blockquote>\n<p><em><strong>索引的优点</strong></em></p>\n<ul><li> <p>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</p> </li><li> <p>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能</p> </li></ul>\n<p><em><strong>索引的缺点</strong></em></p>\n<ul><li> <p>时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，会降低增/改/删的执行效率；</p> </li><li> <p>空间方面：索引需要占物理空间</p> </li></ul>\n</blockquote>\n<p id=\"%E2%91%A2%E8%AF%B4%E4%B8%80%E8%AF%B4%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%EF%BC%9F\"><span style=\"color:#be191c;\"><strong>③说一说索引的底层实现？</strong></span></p>\n<p><strong>Hash索引</strong></p>\n<blockquote>\n<p>基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code），并且Hash索引将所有的哈希码存储在索引中，同时在索引表中保存指向每个数据行的指针。</p>\n</blockquote>\n<p><img alt=\"\" height=\"259\" src=\"image\\64e95645eb214ccb9a845f7dba5c7d23.png\" width=\"608\"/></p>\n<p><strong>B-Tree索引</strong></p>\n<blockquote>\n<p>B-Tree能加快数据的访问速度，因为存储引擎不再需要进行全表扫描来获取数据，数据分布在各个节点之中。</p>\n</blockquote>\n<p><img alt=\"\" height=\"237\" src=\"image\\e9273ca4d9c64ad9b15af4af9f6698e2.png\" width=\"537\"/></p>\n<p><strong>B+Tree索引</strong></p>\n<blockquote>\n<p>是B-Tree的改进版本，同时也是数据库索引索引所采用的存储结构。数据都在叶子节点上，并且增加了顺序访问指针，每个叶子节点都指向相邻的叶子节点的地址。相比B-Tree来说，进行范围查找时只需要查找两个节点，进行遍历即可。而B-Tree需要获取所有节点，相比之下B+Tree效率更高。</p>\n</blockquote>\n<blockquote>\n<p>B+tree性质：</p>\n<p>n棵子tree的节点包含n个关键字，不用来保存数据而是保存数据的索引。</p>\n<p>所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依</p>\n<p>关键字的大小自小而大顺序链接。</p>\n<p>所有的非终端结点可以看成是索引部分，结点中仅含其子树中的最大（或最小）关键字。</p>\n<p>B+ 树中，数据对象的插入和删除仅在叶节点上进行。</p>\n<p>B+树有2个头指针，一个是树的根节点，一个是最小关键码的叶节点。</p>\n</blockquote>\n<p><img alt=\"\" height=\"254\" src=\"image\\31cc9ab76aef4a9f8a83f7ec0241acec.png\" width=\"571\"/></p>\n<p><span style=\"color:#be191c;\"><strong>④为什么索引结构默认使用B+Tree，而不是B-Tree，Hash，二叉树，红黑树？</strong></span></p>\n<blockquote>\n<p>B-tree：</p>\n<p>B+树的磁盘读写代价更低：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B(B-)树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对IO读写次数就降低了。由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，所以通常B+树用于数据库索引。</p>\n<p>Hash：</p>\n<p>虽然可以快速定位，但是没有顺序，IO复杂度高；</p>\n<p>基于Hash表实现，只有Memory存储引擎显式支持哈希索引 ；</p>\n<p>适合等值查询，如=、in()、&lt;=&gt;，不支持范围查询 ；</p>\n<p>因为不是按照索引值顺序存储的，就不能像B+Tree索引一样利用索引完成排序 ；</p>\n<p>Hash索引在查询等值时非常快 ；</p>\n<p>因为Hash索引始终索引的所有列的全部内容，所以不支持部分索引列的匹配查找 ；</p>\n<p>如果有大量重复键值得情况下，哈希索引的效率会很低，因为存在哈希碰撞问题 。</p>\n<p>二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且IO代价高。</p>\n<p>红黑树：树的高度随着数据量增加而增加，IO代价高。</p>\n</blockquote>\n<p id=\"%E2%91%A4%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%EF%BC%9F\"><span style=\"color:#be191c;\"><strong>⑤如何创建索引？</strong></span></p>\n<p>1、 在执行CREATE TABLE时创建索引</p>\n<pre><code class=\"language-sql\">CREATE TABLE user_index2 (\n id INT auto_increment PRIMARY KEY,\n first_name VARCHAR (16),\n last_name VARCHAR (16),\n id_card VARCHAR (18),\n information text,\n KEY name (first_name, last_name),\n FULLTEXT KEY (information),\n UNIQUE KEY (id_card)\n);</code></pre>\n<p>2、 使用ALTER TABLE命令去增加索引。</p>\n<pre><code class=\"language-sql\">ALTER TABLE table_name ADD INDEX index_name (column_list);</code></pre>\n<p>3、 使用CREATE INDEX命令创建。</p>\n<pre><code class=\"language-sql\">CREATE INDEX index_name ON table_name (column_list);</code></pre>\n<p id=\"%E2%91%A5%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88%EF%BC%9F\"><span style=\"color:#be191c;\"><strong>⑥创建索引时需要注意什么？</strong></span></p>\n<blockquote>\n<p>非空字段：应该指定列为NOT NULL，除非你想存储NULL。在mysql中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值；</p>\n<p>取值离散大的字段：（变量各个取值之间的差异程度）的列放到联合索引的前面，可以通过count()函数查看字段的差异值，返回值越大说明字段的唯一值越多字段的离散程度高；索引字段越小越好：数据库的数据存储以页为单位一页存储的数据越多一次IO操作获取的数据越大效率越高。</p>\n</blockquote>\n<h2 id=\"2%E3%80%81%E4%BA%8B%E5%8A%A1\"><span style=\"color:#a2e043;\"><strong>2、事务</strong></span></h2>\n<h3 id=\"2.1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1%EF%BC%9F\"><span style=\"color:#ff9900;\"><strong>2.1、什么是事务？</strong> </span></h3>\n<blockquote>\n<p>事务是一组原子性的sql语句，或者说是一个独立的工作单元。事务有四个特性，原子(Atomicity),</p>\n<p>一致性(Consistency),隔离型(Isolation)以及持久性(Durability)</p>\n</blockquote>\n<h3 id=\"2.2%E3%80%81redo%20log%20%E4%B8%8E%20undo%20log%E4%BB%8B%E7%BB%8D\"><span style=\"color:#ff9900;\"><strong>2.2、redo log 与 undo log介绍</strong></span></h3>\n<p><strong>①redo log</strong></p>\n<blockquote>\n<p>redo log叫做重做日志，用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都会存到该日志中。</p>\n<p>redo log 有什么作用？</p>\n<p>mysql 为了提升性能不会把每次的修改都实时同步到磁盘，而是会先存到Boffer Pool(缓冲池)里头，把这个当作缓存来用。然后使用后台线程去做缓冲池和磁盘之间的同步。</p>\n<p>总结：</p>\n<p><span style=\"color:#be191c;\"><em><strong>redo log是用来恢复数据的用于保障，已提交事务的持久化特性</strong></em></span></p>\n</blockquote>\n<p><strong>②undo log</strong></p>\n<blockquote>\n<p>undo log 叫做回滚日志，用于记录数据被修改前的信息。他正好跟前面所说的重做日志所记录的相反，重做日志记录数据被修改后的信息。undo log主要记录的是数据的逻辑变化，为了在发生错误时回滚之前的操作，需要将之前的操作都记录下来，然后在发生错误时才可以回滚。</p>\n<p>undo log 有什么作用？undo log 记录事务修改之前版本的数据信息，因此假如由于系统错误或者rollback操作而回滚的话可以根据undo log的信息来进行回滚到没被修改前的状态。</p>\n<p>总结：</p>\n<p><span style=\"color:#be191c;\"><em><strong>undo log是用来回滚数据的用于保障未提交事务的原子性</strong></em></span></p>\n</blockquote>\n<h3 id=\"2.3%E3%80%81%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span style=\"color:#ff9900;\"><strong>2.3、事务的实现</strong></span></h3>\n<p><strong>①原子性的实现</strong></p>\n<blockquote>\n<p><em><strong>什么是原子性：</strong></em></p>\n<p>一个事务必须被视为不可分割的最小工作单位，一个事务中的所有操作要么全部成功提交，要么全部失败回滚，对于一个事务来说不可能只执行其中的部分操作，这就是事务的原子性。</p>\n<p><em><strong>undo log 的生成</strong></em></p>\n<p>每条数据变更(insert/update/delete)操作都伴随一条undo log的生成,并且回滚日志必须先于数据持久化到磁盘上</p>\n<p>所谓的回滚就是根据回滚日志做逆向操作，比如delete的逆向操作为insert，insert的逆向操作为delete，update的逆向为update等。</p>\n<p>根据undo log 进行回滚回滚操作就是要还原到原来的状态，undo log记录了数据被修改前的信息以及新增和被删除的数据信息，根据undo log生成回滚语句，比如：</p>\n<p>(1) 如果在回滚日志里有新增数据记录，则生成删除该条的语句</p>\n<p>(2) 如果在回滚日志里有删除数据记录，则生成生成该条的语句</p>\n<p>(3) 如果在回滚日志里有修改数据记录，则生成修改到原先数据的语句</p>\n</blockquote>\n<p id=\"%E2%91%A1%E6%8C%81%E4%B9%85%E6%80%A7%E7%9A%84%E5%AE%9E%E7%8E%B0\"><strong>②持久性的实现</strong></p>\n<blockquote>\n<p>事务一旦提交，其所作做的修改会永久保存到数据库中，此时即使系统崩溃修改的数据也不会丢失。</p>\n<p>MySQL的表数据是存放在磁盘上的，因此想要存取的时候都要经历磁盘IO,然而即使是使用SSD磁盘IO也是非常消耗性能的。为此，为了提升性能InnoDB提供了缓冲池(Buffer Pool)，Buffer Pool中包含了磁盘数据页的映射，可以当做缓存来使用：</p>\n<p>读数据：会首先从缓冲池中读取，如果缓冲池中没有，则从磁盘读取在放入缓冲池；</p>\n<p>写数据：会首先写入缓冲池，缓冲池中的数据会定期同步到磁盘中</p>\n</blockquote>\n<p id=\"%E2%91%A2%E9%9A%94%E7%A6%BB%E6%80%A7%E5%AE%9E%E7%8E%B0\"><strong>③隔离性实现</strong></p>\n<blockquote>\n<p>隔离性是事务ACID特性里最复杂的一个。在SQL标准里定义了四种隔离级别，每一种级别都规定一个事务中的修改，哪些是事务之间可见的，哪些是不可见的。级别越低的隔离级别可以执行越高的并发，但同时实现复杂度以及开销也越大。</p>\n<p>Mysql 隔离级别有以下四种（级别由低到高）：</p>\n<p>READ UNCOMMITED (未提交读)</p>\n<p>READ COMMITED (提交读)</p>\n<p>REPEATABLE READ (可重复读)</p>\n<p>SERIALIZABLE (可重复读)</p>\n<p>只要彻底理解了隔离级别以及他的实现原理就相当于理解了ACID里的隔离型。前面说过原子性，隔离性，持久性的目的都是为了要做到一致性，但隔离型跟其他两个有所区别，原子性和持久性是为了要实现数据的可性保障靠，比如要做到宕机后的恢复，以及错误后的回滚。</p>\n</blockquote>\n<h1 id=\"%E4%BA%94%E3%80%81MySQL%E4%B8%ADJDBC%E7%BC%96%E7%A8%8B\"><span style=\"color:#956fe7;\"><strong>五、MySQL中JDBC编程</strong></span></h1>\n<h2 id=\"1%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BF%85%E5%A4%87%E6%9D%A1%E4%BB%B6\"><span style=\"color:#a2e043;\"><strong>1、数据库编程的必备条件</strong></span></h2>\n<blockquote>\n<p>编程语言，如Java，C、C++、Python等 数据库，如Oracle，MySQL，SQL Server等 数据库驱动包：不同的数据库，对应不同的编程语言提供了不同的数据库驱动包，如：MySQL提 供了Java的驱动包mysql-connector-java，需要基于Java操作MySQL即需要该驱动包。同样的， 要基于Java操作Oracle数据库则需要Oracle的数据库驱动包ojdbc。</p>\n</blockquote>\n<h2 id=\"2%E3%80%81Java%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B%EF%BC%9AJDBC\"><span style=\"color:#a2e043;\"><strong>2、Java的数据库编程：JDBC</strong></span></h2>\n<blockquote>\n<p>JDBC，即Java Database Connectivity，java数据库连接。是一种用于执行SQL语句的Java API，它是 Java中的数据库连接规范。这个API由 java.sql.*,javax.sql.* 包中的一些类和接口组成，它为JJava 开发人员操作数据库提供了一个标准的API，可以为多种关系数据库提供统一访问.</p>\n</blockquote>\n<h2 id=\"3%E3%80%81JDBC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span style=\"color:#a2e043;\">3、JDBC工作原理</span></h2>\n<blockquote>\n<p>JDBC 为多种关系数据库提供了统一访问方式，作为特定厂商数据库访问API的一种高级抽象，它主要包 含一些通用的接口类</p>\n</blockquote>\n<p>JDBC访问数据库层次结构:</p>\n<p><img alt=\"\" height=\"280\" src=\"image\\241ab9f2631a4e80a6b66686807004e7.png\" width=\"589\"/></p>\n<h2 id=\"4%EF%BC%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span style=\"color:#a2e043;\"><strong>4，环境搭建</strong></span></h2>\n<p>首先在电脑服务当中查看自己MySQL的版本，然后进入maven仓库</p>\n<p><img alt=\"\" height=\"192\" src=\"image\\50c2a1ec383140ca9707c785f4d3b248.png\" width=\"501\"/></p>\n<p> <img alt=\"\" height=\"264\" src=\"image\\199a54a4a0dd4dd195470e1d160748df.png\" width=\"523\"/></p>\n<p> 因为我自己的版本是5.0之后的，所以我选择5.1.47，大版本要一致</p>\n<p><img alt=\"\" height=\"125\" src=\"image\\ea1816ce0c5541938985705cfb2c7775.png\" width=\"510\"/></p>\n<p> 下载jar即可，记住，jar包不能解压缩</p>\n<p><img alt=\"\" height=\"258\" src=\"image\\1eaf53cee03c4f0789949b766131aa67.png\" width=\"478\"/></p>\n<p> 接下来就在idea自己在根目录下创建文件夹，然后导入jar包</p>\n<p><img alt=\"\" height=\"243\" src=\"image\\79b4da64a235419daea7302f6da10170.png\" width=\"502\"/></p>\n<p> <img alt=\"\" height=\"239\" src=\"image\\a20a0fd81c5f4cf3971d22c000b3658b.png\" width=\"509\"/></p>\n<p> <img alt=\"\" height=\"217\" src=\"image\\af8670bf7eeb4f06aec6ff92b8752287.png\" width=\"498\"/></p>\n<p> <img alt=\"\" height=\"260\" src=\"image\\f32f1a16f9d147dbb9e119951b468fa4.png\" width=\"505\"/></p>\n<p>  没有报错一直OK下去就没有啥问题，说明导入成功</p>\n<h2 id=\"%E4%BA%94%E3%80%81MySQL%E4%B8%AD%E7%9A%84JDBC%E7%BC%96%E7%A8%8B\"><span style=\"color:#a2e043;\">5、MySQL中的JDBC编程</span></h2>\n<h3 id=\"1%EF%BC%8C%E4%BA%94%E6%AD%A5%E6%B5%81%E7%A8%8B\"><span style=\"color:#ff9900;\"><strong>5.1，五步流程</strong></span></h3>\n<p><strong>建立数据库连接</strong></p>\n<pre><code class=\"language-java\">//MySQL数据连接的URL参数格式如下：\njdbc:mysql://服务器地址:端口/数据库名?参数名=参数值</code></pre>\n<pre><code class=\"language-java\">// 加载JDBC驱动程序：反射，这样调用初始化com.mysql.jdbc.Driver类，即将该类加载到JVM方法\n区，并执行该类的静态方法块、静态属性。\nClass.forName(\"com.mysql.jdbc.Driver\");\n// 创建数据库连接\nConnection connection =\nDriverManager.getConnection(\"jdbc:mysql://localhost:3306/test?\nuser=root&amp;password=root&amp;useUnicode=true&amp;characterEncoding=UTF-8\");</code></pre>\n<p><strong>创建操作命令（Statement）</strong></p>\n<pre><code class=\"language-java\">Statement statement = connection.createStatement();</code></pre>\n<p><strong>执行SQL语句</strong></p>\n<pre><code class=\"language-java\">ResultSet resultSet= statement.executeQuery(\n                \"select id, sn, name, qq_mail, classes_id from student\");</code></pre>\n<p><strong>处理结果集</strong></p>\n<pre><code class=\"language-java\">while (resultSet.next()) {\n            int id = resultSet.getInt(\"id\");\n            String sn = resultSet.getString(\"sn\");\n            String name = resultSet.getString(\"name\");\n            int classesId = resultSet.getInt(\"classes_id\");\n            System.out.println(String.format(\"Student: id=%d, sn=%s, name=%s, \nclassesId=%s\", id, sn, name, classesId));\n       }</code></pre>\n<p><strong>释放资源（关闭结果集，命令，连接）</strong></p>\n<pre><code class=\"language-java\">//关闭结果集\nif (resultSet != null) {\n    try {\n        resultSet.close();\n   } catch (SQLException e) {\n        e.printStackTrace();\n   }\n}\n//关闭命令\nif (statement != null) {\n    try {\n        statement.close();\n   } catch (SQLException e) {\n        e.printStackTrace();\n   }\n}\n//关闭连接命令\nif (connection != null) {\n    try {\n        connection.close();\n   } catch (SQLException e) {\n        e.printStackTrace();\n   }\n}</code></pre>\n<h3 id=\"5.2%E3%80%81%E6%B7%BB%E5%8A%A0%E4%BF%A1%E6%81%AF\"><span style=\"color:#ff9900;\"><strong>5.2、添加信息</strong></span></h3>\n<p>首先创建一个数据库并且创建一个表</p>\n<pre><code class=\"language-sql\"> create database java122;</code></pre>\n<pre><code class=\"language-sql\"> create table text(id int,name varchar(5),class_id int);</code></pre>\n<pre><code class=\"language-java\">import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n \n \npublic class TextJDBC {\n    //DataSource\n    //Connection\n    //PrepareStatement\n \n \n    public static void main(String[] args) throws SQLException{\n        //1、创建DataSource对象\n         DataSource dataSource = new MysqlDataSource();\n        //设置相关内容\n        //URL User password\n        //向下转型                     访问数据库   协议名        ip地址 要访问那个地址\n        ((MysqlDataSource) dataSource).setURL(\"jdbc:mysql://127.0.0.1:3306/java122?characterEncoding=utf-8&amp;useSSL=false\");\n        ((MysqlDataSource) dataSource).setUser(\"root\");\n        ((MysqlDataSource) dataSource).setPassword(\"180210\");\n        \n        //2、和数据库连接.进行后续连接\n        //connect生命周期较短\n        Connection connection = dataSource.getConnection();\n        \n        //3、拼装SQL语句\n        int id = 1;\n        String name = \"曹操\";\n        int class_id = 10;\n        //?是一个占位符，可以把一个具体的变量的值替换到？\n        String sql = \"insert into text values(?,?,?)\";\n        PreparedStatement statement = connection.prepareStatement(sql);\n        //1 2 3相当与？的下标\n        statement.setInt(1,id);\n        statement.setString(2,name);\n        statement.setInt(3,class_id);\n        System.out.println(\"statement:\" + statement);\n \n        //4、执行SQL语句\n        int ret = statement.executeUpdate();\n        System.out.println(\"ret:\" + ret);\n \n        //5、关闭相关资源\n        //后创建的先释放，顺序不能错\n        statement.close();\n        connection.close();\n \n    }\n}</code></pre>\n<p><img alt=\"\" height=\"160\" src=\"image\\a5fde26aa2af4b91a738ac4d0e8330ca.png\" width=\"552\"/></p>\n<h3 id=\"%C2%A05.3%E3%80%81%E6%9F%A5%E8%AF%A2%E4%BF%A1%E6%81%AF\"><span style=\"color:#ff9900;\"><strong> 5.3、查询信息</strong></span></h3>\n<pre><code class=\"language-java\">import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;\n \nimport javax.sql.DataSource;\nimport javax.xml.transform.Source;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n \npublic class Text1 {\n \n \n    public static void main(String[] args) throws SQLException {\n \n        //1，创建实列\n        DataSource dataSource = new MysqlDataSource();\n        ((MysqlDataSource)dataSource).setURL(\"jdbc:mysql://127.0.0.1:3306/java122?characterEncoding=utf-8&amp;useSSL=false\");\n        ((MysqlDataSource)dataSource).setUser(\"root\");\n        ((MysqlDataSource)dataSource).setPassword(\"180210\");\n \n        //2，数据库连接\n        Connection connection = dataSource.getConnection();\n \n        //3,构造SQL语句\n \n        String sql =\"select * from text\";\n        PreparedStatement statement = connection.prepareStatement(sql);\n \n        //4,执行SQL语句\n        ResultSet resultSet = statement.executeQuery();\n        while (resultSet.next()){\n            int id = resultSet.getInt(\"id\");\n            String name = resultSet.getString(\"name\");\n            int class_id = resultSet.getInt(\"class_id\");\n            System.out.println(\"id: \" + id  + \"name: \" + name  + \"class_id: \" + class_id);\n        }\n \n        //5,关闭相关资源\n        resultSet.close();\n        statement.close();\n        connection.close();\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"110\" src=\"image\\36050d4fef2e4358ba869d119eda3ced.png\" width=\"496\"/></p>\n<h3 id=\"%C2%A05.4%E3%80%81%E5%88%A0%E9%99%A4%E4%BF%A1%E6%81%AF\"><span style=\"color:#ff9900;\"><strong>5.4、删除信息</strong></span></h3>\n<pre><code class=\"language-java\">import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;\n \nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n \npublic class Textur2 {\n \n \n    public static void main(String[] args) throws SQLException {\n \n \n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入要删除学生的姓名：\");\n        String name = scanner.next();\n        //1，创建实列\n        DataSource dataSource = new MysqlDataSource();\n        ((MysqlDataSource) dataSource).setURL(\"jdbc:mysql://127.0.0.1:3306/java122?characterEncoding=utf-8&amp;useSSL=false\");\n        ((MysqlDataSource) dataSource).setUser(\"root\");\n        ((MysqlDataSource) dataSource).setPassword(\"180210\");\n \n        //2，数据库连接\n        Connection connection = dataSource.getConnection();\n \n        //3,构造SQL语句\n        String sql = \"delete from text where name = ?\";\n        PreparedStatement statement = connection.prepareStatement(sql);\n        statement.setString(1,name);\n \n        //4,执行SQL\n        int ret = statement.executeUpdate();\n        if (ret == 1){\n            System.out.println(\"删除成功\");\n        }else {\n            System.out.println(\"删除失败\");\n        }\n \n        //5，关闭资源\n        statement.close();\n        connection.close();\n \n \n    }\n}</code></pre>\n<p><img alt=\"\" height=\"134\" src=\"image\\232ad4c9bda04a9ebb43f794f11529e5.png\" width=\"516\"/></p>\n<p><img alt=\"\" height=\"126\" src=\"image\\b441fcbde4424d88aefc918ec175cdc9.png\" width=\"534\"/></p>\n<p><span style=\"color:#ff9900;\"><strong>5.5、修改信息</strong></span></p>\n<pre><code class=\"language-java\">import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;\n \nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n \npublic class Text4 {\n \n \n    public static void main(String[] args) throws SQLException {\n \n \n        //修改信息\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入学生的id：\");\n        int id = scanner.nextInt();\n        System.out.println(\"请输入修改学生姓名：\");\n        String name = scanner.next();\n \n        //1，创建实列\n        DataSource dataSource = new MysqlDataSource();\n        ((MysqlDataSource) dataSource).setURL(\"jdbc:mysql://127.0.0.1:3306/java122?characterEncoding=utf-8&amp;useSSL=false\");\n        ((MysqlDataSource) dataSource).setUser(\"root\");\n        ((MysqlDataSource) dataSource).setPassword(\"180210\");\n \n        //2，数据库连接\n        Connection connection = dataSource.getConnection();\n \n        //3,拼装SQL\n        String sql = \"update text set name = ? where id = ?\";\n        PreparedStatement statement = connection.prepareStatement(sql);\n        statement.setString(1,name);\n        statement.setInt(2,id);\n        //4,执行SQL\n        int set = statement.executeUpdate();\n        if (set == 1){\n            System.out.println(\"修改成功\");\n        }else {\n            System.out.println(\"修改失败\");\n        }\n \n        //5，关闭资源\n        statement.close();\n        connection.close();\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"127\" src=\"image\\b5f79083366a4f4c89ce293681f1bc33.png\" width=\"569\"/></p>\n<p><img alt=\"\" height=\"207\" src=\"image\\954bc13b4ff14ef99cf0a040cc505748.png\" width=\"564\"/></p>\n</div>\n</div>"}