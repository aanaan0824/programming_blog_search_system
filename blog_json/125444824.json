{"blogid": "125444824", "writerAge": "码龄3年", "writerBlogNum": "20", "writerCollect": "149", "writerComment": "13", "writerFan": "22", "writerGrade": "3级", "writerIntegral": "438", "writerName": "Hask", "writerProfileAdress": "writer_image\\profile_125444824.jpg", "writerRankTotal": "52395", "writerRankWeekly": "85540", "writerThumb": "52", "writerVisitNum": "29931", "blog_read_count": "2452", "blog_time": "于 2022-06-24 14:26:04 发布", "blog_title": "C#入门教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"C_0\"></a>C#入门小教程</h2>\n<p>一、C#的发展历史<br/> C#是.net开发平台支持的多种语言中的一门编程语言。是Microsoft专门为.net<br/> 平台开发的一种新的编程语言，语法类似于C语言。<br/> 1998年，Delphi设计的第一个C#语言版本<br/> 2002年，发布了第一个C#版本(1.0)<br/> 二、C#能干什么<br/> 1.Windows窗口应用程序。Microsoft office，Windows外观应用程序(按钮，工具)<br/> 2.web应用程序(邮箱、论坛、网站)<br/> 3.网络数据库等应用程序<br/> 4.web服务以及各种分布应用程序<br/> 三、C#程序结构<br/> 一个C#程序主要包括以下部分:<br/> 1.命名空间声明<br/> 2.一个class<br/> 3.方法<br/> 4.属性<br/> 5.Main方法<br/> 6.语句,表达式<br/> 7.注释</p>\n<p>using System;–&gt;引入System命名空间(C语言：#include&lt;stdio.h&gt;)<br/> using System.Collections.Generic;–&gt;引入C#泛型命名空间<br/> using System.Linq;–&gt;主要作用是对集合进行查询<br/> using System.Text;–&gt;输出文本类型<br/> using System.Threading.Tasks;–&gt;异步操作</p>\n<p>namespace cxsw–&gt;创建命名空间<br/> {<!-- --><br/> class demo1–&gt;创建一个名为demo1的类<br/> {<!-- --><br/> static void Main(string[] args)–&gt;main方法，程序的入口<br/> {<!-- --><br/> }<br/> }<br/> }</p>\n<p>main方法的四种写法：<br/> 1)static void Main(){}string[] args<br/> 2)static void Main(){}<br/> 3)static int Main(String[] args){}<br/> 4)static int Main(){}</p>\n<p>注意：<br/> C#的主方法名第一个字母必须大写:Main(),且必须有static关键字<br/> 四.从控制台输出：<br/> 1.输出字符串常量<br/> Console.WriteLine(“字符串常量”);<br/> 2.输出单个变量<br/> Console.WriteLine(变量);<br/> 3.使用连接符(+)混合输出字符串和变量<br/> Console.WriteLine(“字符串”+变量);<br/> 4.使用格式占位符混合输出字符串和变量<br/> Console.WriteLine(“字符串{0},{1}”,表达式1,表达式2);<br/> 五.从控制台输入：<br/> 1)输入字符串类型<br/> 定义一个字符串类型的变量，接受用户输入的字符串<br/> String name;<br/> 给用户一个提示，提示用户进行输入<br/> Console.WriteLine(“请输入姓名：”);<br/> 将用户输入的内容存入变量中<br/> name=Console.Readline();<br/> 2)把字符串转化成数字<br/> age=int.Parse(Console.Readline());<br/> 六.注释<br/> 注释方式：<br/> 单行注释：//<br/> 多行注释：/<em>……</em>/<br/> 文档注释：/// xml注释<br/> using System;namespace cxsw { //创建命名空间<br/> class Test101HelloWorld { //创建类<br/> static void Main(string[] args) { //主函数<br/> //输出<br/> Console.WriteLine(“今天第一天”); //控制台输出<br/> int i = 1;<br/> Console.WriteLine(i); //输出变量<br/> Console.WriteLine(“i的值为:”+i);<br/> Console.WriteLine(\"1+1={0},2<em>2={1}\",1+1,2</em>2);<br/> //输入<br/> string name;<br/> Console.WriteLine(“请输入你的名字:”);<br/> name = Console.ReadLine();<br/> Console.WriteLine(“用户输入的姓名为:”+name);<br/> //把字符串转换为数字<br/> Console.WriteLine(“请输入要转换为字符串的数字:”);<br/> int age = int.Parse(Console.ReadLine());<br/> Console.WriteLine(“被转换为数字的字符串为:”+age);</p>\n<pre><code>        //Console.ReadKey();//针对VS.NET用户的\n        //这使得程序会等待一个按键的动作,防止程序从VisualStudio.NET\n        //启动时屏幕会快速运行并关闭的问题\n        //也就是说加上他程序执行最后会等待你按键才退出\n    }\n}}\n</code></pre>\n<p>第二章:数据类型常量变量<br/> 一.数据类型<br/> （1）整数类型<br/> 数学上的整数可以从负无穷到正无穷，但是计算机的存储单位是有限的，<br/> 所以计算机语言提供的整数类型的值总是一定范围之内的。<br/> C#有八种数据类型：<br/> 短字节型（sbyte），字节型（byte），短整型（stort），无符号短整型（ustort），<br/> 整型（int），无符号整型（unit），长整型（long），无符号长整型（ulong）。</p>\n<p>（2）字符类型<br/> 除了数字，计算机处理的信息还包括字符。字符主要包括数字字符，英文字符，<br/> 表达式字符等，C#提供的字符类按照国际上公认的标准，采用Unicode字符集。<br/> 字符型书数据占用两个字节的内存，可以用来存储Unicode字符集当中的一个字符（<br/> 注意，只是一个字符，不是一个字符串）。</p>\n<p>（3）实数类型<br/> C#有三种实数类型：float（单精度型），doudle（双精度型），decimal（十进制小数型）。</p>\n<p>（4）布尔类型<br/> 布尔类型是用来表示“真”和“假”两个概念的，在C#里用true和false来表示。</p>\n<p>1.常用数据类型 <br/> 整数：(4种)<br/> int(32位整数)、short(16)、long(64)、byte(8)<br/> 浮点型：(3种)<br/> float(32位浮点数，精确到小数点后7位)<br/> double(64位浮点数，精确到小数点后15~20位)<br/> decimal(128位浮点数，精确到小数点后28~29位)<br/> 布尔型：bool true、false<br/> 字符型：char(单个字符，用单引号存储)<br/> 字符串类型：string(双引号)</p>\n<p>2.数据类型转换<br/> 数据类型之间的大小关系：<br/> byte–&gt;short–&gt;int–&gt;float–&gt;double–&gt;decimal<br/> 1.隐式类型转化<br/> 由低类型向高类型的转化<br/> 注意：转化的两种数据类型之前必须兼容<br/> 2.显式类型转化(强制类型转化)<br/> 由高类型向低类型的转化<br/> 1)利用Parse方法进行转化<br/> double d1=2.23;<br/> int i1=int.Parse(d1);<br/> 2)使用convert提供的类进行强制转化<br/> 语法：<br/> ToDouble(变量)</p>\n<pre><code>\t\t\tdouble d = 23.5;\n\t\t\tint i;\n\t\t\ti = (int)d;\n</code></pre>\n<p>3.引用类型<br/> using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;<br/> namespace Csp个人课程备课.第二章数据类型变量{<!-- --><br/> class Test201数据类型<br/> {<!-- --><br/> static void Main(string[] args)<br/> {<!-- --><br/> //数据类型<br/> int age;//用来表示年龄<br/> double score;//用来表示分数<br/> char gender;//用来表示性别<br/> bool b;//用来表示真假<br/> }<br/> }}</p>\n<p>二.常量<br/> 语法：<br/> const 数据类型 变量名 = 常量值；<br/> 在声明和初始化变量的时候，在变量前加上关键字const，就可以把一个变量指定为常量。<br/> 在使用过程当中，常量值不会发生变化，后期不允许修改常量值，常量的命名规范和变量是一样的。<br/> using System;namespace Csp个人课程备课.第二章数据类型变量{<!-- --><br/> class Test202 {<!-- --><br/> const double pi = 3.14; //定义常量<br/> static void Main(string[] args) {<!-- --><br/> Console.WriteLine(pi);<br/> }<br/> }}<br/> 三.变量<br/> 1.变量的声明<br/> 变量类型 变量名;<br/> int num;<br/> 变量类型 变量名 = 变量值；<br/> 房间类型 房间号 = 入住客人；<br/> 2.变量的命名<br/> 1)驼峰命名法：最中间单词的首字母是大写的<br/> demodirect–&gt;demoDirect<br/> 2)帕斯卡命名法：每个单词的首字母都大写<br/> demodirect–&gt;DemoDirect<br/> 3.变量的命名规则<br/> 1)由字母、数字、下划线组成，不能以数字开头<br/> 2)不能用保留字作为变量名(console)<br/> 3)建议用英文单词<br/> 4)变量名区分大小写<br/> 4.注意事项：<br/> 1)未经声明的变量不能使用<br/> 2)未经赋值的变量不能输出<br/> 3)可以一次性声明多个变量<br/> 4)可以先声明再赋值，也可以声明的同时初始化<br/> using System;namespace Csp个人课程备课.第二章数据类型变量{<!-- --><br/> class Test203 {<!-- --><br/> static void Main(string[] args) {<!-- --><br/> //定义在函数体当中的变量为局部变量 只能在当前函数体内使用<br/> //定义变量<br/> int a;<br/> a = 10;<br/> Console.WriteLine(“变量a的值为:”+ a);<br/> int b = 20;<br/> Console.WriteLine(“变量b的值为:”+b);<br/> b = 40;<br/> Console.WriteLine(“变量b修改后的值为:”+ b);<br/> int c, d;<br/> c = 3;<br/> d = 4;<br/> Console.WriteLine(“变量c的值为:”+c+“,变量d的值为:”+d);<br/> int e = 1, f = 2;<br/> Console.WriteLine(“变量e的值为:”+e+“,变量f的值为:”+f);<br/> }<br/> }}<br/> using System;namespace Csp个人课程备课.第二章数据类型变量{<!-- --><br/> class Test204 {<!-- --><br/> static int i; //定义在函数体外的变量为全局变量 可以在当前文件中使用<br/> static void Main(string[] args)<br/> {<!-- --><br/> //定义在函数体当中的变量为局部变量 只能在当前函数体内使用<br/> //定义变量<br/> int a = 10;<br/> Console.WriteLine(“变量a输出:”+a);</p>\n<pre><code>\t\ti = 30;\n\t\tConsole.WriteLine(\"常量输出:\"+i);\n\t}\n\tvoid eat(){\n\t\t//a = 11; //提示未定义访问不到\n\t\ti = 31; //不提示错误证明可以访问到\n\t}\n\n}}\n</code></pre>\n<p>四.注意事项<br/> using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;<br/> namespace Csp个人课程备课.第二章数据类型变量{<!-- --><br/> class Test205{<!-- --><br/> static void Main(string[] args)<br/> {<!-- --><br/> short s = 1;<br/> int i = 2;<br/> long l = 3;<br/> char ch = ‘a’;<br/> Console.WriteLine(s + \" \" + i + \" \" + l + \" \" + ch);<br/> //i = 2200000000;//选用数据类型时 注意是否超出范围<br/> //如果超出范围则错误</p>\n<pre><code>\t\tfloat ff = 3.14f; //浮点数类型后面加f\n\t\tdouble dd = 3.14;\n\t\tConsole.WriteLine(ff + \" \" + dd);\n\n\t\t//char类型\n\t\tchar cs = 'a';//char类型的值要用单引号引起来\n\t\tchar cc = ' ';//char类型的值不能啥也没有哪怕是一个空格也可以\n\t\tchar ccc = '\\n';//表示转义字符\n\t\tchar c1 = (char)97;//ASCII码\n\t\tConsole.WriteLine(cs+\" \"+cc+\" \"+ccc+\" \"+c1);\n\n\t\t//数据类型转换\n\t\tshort st1 = 2;\n\t\tint it1 = st1;//隐式转换\n\t\tConsole.WriteLine(\"it1的值为:\"+it1);\n\t\tdouble db1 = 25.5;\n\t\tint it2 = (int)db1;//强制转换\n\t\tConsole.WriteLine(\"it2的值为:\"+it2);\n\t}\n}}\n</code></pre>\n<p>五.ASCII码表</p>\n<p>六.转义字符</p>\n<p>第三章:运算符<br/> 一.算数运算符</p>\n<ul><li>\n<ul><li>\n<ul><li> <p>/ % ++ –<br/> +号的用法：<br/> 1)对两个数字进行相加<br/> 2)字符串的连接<br/> ++、–复合运算：<br/> 1)++在前：先运算，后赋值<br/> 2)++在后：先赋值，后运算<br/> using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;<br/> namespace Csp个人课程备课.第三章运算符和表达式{<!-- --><br/> class Test301算数运算符{<!-- --><br/> static void Main(string[] args) {<!-- --><br/> int A = 10, B = 5;<br/> //算数运算符的各种运算<br/> Console.WriteLine(“A=10,B=5”);<br/> Console.WriteLine(“A+B=”+(A + B));<br/> Console.WriteLine(“A-B=”+(A - B));<br/> Console.WriteLine(“A*B=”+(A * B));<br/> Console.WriteLine(“A/B=”+(A / B));<br/> //取模,表达式中书写了A%%B,其中两个%表示输出一个%<br/> Console.WriteLine(“A%B=”+(A % B));</p> <pre><code> int a = 1, b = 2, c = 3, d = 0;\n Console.WriteLine(\"a,b,c的值为:\"+a+\" \"+b+\" \"+c);\n Console.WriteLine(\"a++的值为:\"+(a++));\n Console.WriteLine(\"a的值为:\"+a);\n Console.WriteLine(\"++a的值为:\"+(++a));\n Console.WriteLine(\"a的值为:\"+a);\n a = 1; b = 2; c = 3; d = 0;\n //a = 3; b = 3; c = 3;\n //   1    2    3    3    3\n d = a++ + a + ++b + b + ++a;  //在下一次计算时才会得到所有加一后的值\n Console.WriteLine(\"d的值为:\"+d);//12\n</code></pre> <p>}<br/> }}</p> </li></ul> </li></ul> </li></ul>\n<p>二.关系运算符<br/> (比较是否相等) != &gt; &lt; &gt;= &lt;=<br/> 1<br/> using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/**</p>\n<ul><li>关系运算符</li><li>== != &gt; &lt; &gt;= &lt;=<br/> **/namespace Csp个人课程备课.第三章运算符和表达式{<!-- --><br/> class Test302关系运算符<br/> {<!-- --><br/> static void Main(string[] args) {<!-- --><br/> int a = 20; int b = 20; int c = 30;<br/> Console.WriteLine(a == b);//true<br/> Console.WriteLine(a != b);//false<br/> Console.WriteLine(a &gt; b);//false<br/> Console.WriteLine(a &gt; c);//false<br/> Console.WriteLine(c &gt; b);//true<br/> Console.WriteLine(a &lt; c);//true<br/> Console.WriteLine(a &gt;= c);//false<br/> Console.WriteLine(a &lt;= c);//true<br/> }<br/> }}</li></ul>\n<p>三.逻辑运算符<br/> &amp;&amp; || !<br/> 1<br/> using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/**</p>\n<ul><li>逻辑运算符</li><li>&amp;&amp;(与):符号两边同时成立 则 成立</li><li>||(或):只要有个成立 则 成立</li><li>!(非): 结果相反<br/> **/namespace Csp个人课程备课.第三章运算符和表达式{<!-- --><br/> class Test303逻辑运算符<br/> {<!-- --><br/> static void Main(string[] args) {<!-- --><br/> bool a = true;<br/> bool b = false;<br/> bool c = true;<br/> Console.WriteLine(a &amp;&amp; b);//false<br/> Console.WriteLine(b || c);//true<br/> Console.WriteLine(!c);//false<br/> int d = 1;<br/> int e = 2;<br/> int f = 3;<br/> Console.WriteLine(d &gt; e &amp;&amp; f &lt; e);//false<br/> Console.WriteLine(e &lt; f || d &gt; f);//true<br/> Console.WriteLine(!(f &gt; d));//false<br/> }<br/> }}</li></ul>\n<p>四.赋值运算符<br/> (赋值) += -= <em>= /= %=<br/> 1<br/> using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/</em>*</p>\n<ul><li>赋值运算符</li><li>= += -= *= /= %=<br/> **/namespace Csp个人课程备课.第三章运算符和表达式{<!-- --><br/> class Test304赋值运算符<br/> {<!-- --><br/> static void Main(string[] args) {<!-- --><br/> int a = 10;<br/> int b = 20;<br/> int c;<br/> c = a + b;<br/> Console.WriteLine©;//30<br/> c += a;<br/> Console.WriteLine©;//40<br/> c -= a;<br/> Console.WriteLine©;//30<br/> c /= 1;<br/> Console.WriteLine©;//30<br/> b %= 2;<br/> Console.WriteLine(b);//0<br/> }<br/> }}</li></ul>\n<p>五.位运算<br/> &amp;(按位与) |(或) ^(异或) ~(非) &lt;&lt;(左移) &gt;&gt;(右移)<br/> 1<br/> using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/**</p>\n<ul><li>位运算符</li><li> <pre><code> &amp;(按位与)\t   |(或)\t\t^(异或)\t~(非)   &lt;&lt;(左移)\t&gt;&gt;(右移)\t &gt;&gt;&gt;(无符号右移)\n</code></pre> </li><li></li><li> <pre><code> 二进制\n</code></pre> </li><li> <pre><code> \t十进制转换二进制\n</code></pre> </li><li></li><li> <pre><code> 13\t二进制\t1101\n</code></pre> </li><li></li><li> <pre><code> 2048\t1024\t512\t  256\t128\t 64\t 32\t  16   8  4  2  1 权次方\n</code></pre> </li><li> <pre><code> \t\t\t\t\t\t\t\t\t\t\t   1  1  0  1\n</code></pre> </li><li> <pre><code> 154\t\t\t\t\t\t\t1     0   0    1   1  0  1  0\n</code></pre> </li><li> <pre><code> 685\t\t\t\t1       0   1     0   1    0   1  1  0  1\n</code></pre> </li><li> <pre><code> 1250\t1       0       0   1     1   1    0   0  0  1  0\n</code></pre> </li><li> <pre><code> 243                         1     1   1    1   0  0  1  1\n</code></pre> </li><li> <pre><code> 684             1       0   1     0   1    0   1  1  0  0\n</code></pre> </li><li> <pre><code> 60                                    1    1   1  1  0  0\n</code></pre> </li><li> <pre><code> //如243可以减128用得到就是1余数再往后减可以减就是1,不够减就是0\n</code></pre> </li><li> <pre><code> 符号位  1代表负数   0 代表 正数\n</code></pre> </li></ul>\n<p>**/namespace Csp个人课程备课.第三章运算符和表达式{<!-- --><br/> class Test305位运算符<br/> {<!-- --><br/> static void Main(string[] args) {<!-- --><br/> int a = 60;<br/> //二进制:111100<br/> int b = 13;//二进制:001101 1101前面的0是补上去的 正数补0负数补1 为了和要比较的二进制位数一致<br/> int c = 0; //<br/> c = a &amp; b; // 二进制:001100 相对应的位都为1时结果为1<br/> Console.WriteLine©;//12</p>\n<pre><code>\t\tc = a | b;//二进制:111101相对应的只要有一个为1结果为1 \t111101\n\t\tConsole.WriteLine(c);//61\n\n\t\tc = a ^ b;//二进制:110001相对应的位 相同为0 不同为1\n\t\tConsole.WriteLine(c);//49\n\n\t\tc = ~a;   //二进制:000011 相对应的位  取反\n\t\tConsole.WriteLine(c);//-61\n\n\t\tc = a &lt;&lt; 2; //二进制:11110000\n\t\tConsole.WriteLine(c);//240\n\n\t\tc = -a &gt;&gt; 60;//二进制:二进制 32个1\n\t\tConsole.WriteLine(c);//-1\n\t}\n}}\n</code></pre>\n<p>六.条件运算符<br/> (三元运算符) 表达式1?表达式2:表达式3 -&gt; 3&gt;2?3:2<br/> 1<br/> using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/**</p>\n<ul><li>三目运算符 如果 否则</li><li> <pre><code> 1? 2: 3\n</code></pre> </li><li> <pre><code> 1:条件\t2:条件成立的话要做的事\t3.条件不成立要做的事**/namespace Csp个人课程备课.第三章运算符和表达式{\n</code></pre> class Test306三元运算符<br/> {<!-- --><br/> static void Main(string[] args) {<!-- --><br/> int a = 10;<br/> int b;<br/> b = (a &gt; 10) ? 100 : 50; //如果a大于10 条件 则 成立为100,否则 为 50.<br/> Console.WriteLine(b);//条件不成立所以50<br/> }<br/> }}</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}