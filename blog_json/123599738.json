{"blogid": "123599738", "writerAge": "码龄1年", "writerBlogNum": "11", "writerCollect": "98", "writerComment": "1316", "writerFan": "203", "writerGrade": "4级", "writerIntegral": "1497", "writerName": "宗谷.", "writerProfileAdress": "writer_image\\profile_123599738.jpg", "writerRankTotal": "18921", "writerRankWeekly": "59487", "writerThumb": "71", "writerVisitNum": "11068", "blog_read_count": "1468", "blog_time": "已于 2022-03-19 18:45:47 修改", "blog_title": "在数据结构与算法中 传值方式（C语言）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_4\">前言</a></li><li><ul><li><a href=\"#CC_57\">C/C++中的引用参数</a></li><li><ul><li><a href=\"#11__62\">1.1 实参值不变</a></li><li><a href=\"#12__90\">1.2 **传地址方式——指针变量做参数，形参变化影响实参**</a></li><li><a href=\"#_142\">形参变化不影响实参</a></li><li><a href=\"#14__169\">1.4 **传地址方式**——数组名作参数</a></li><li><a href=\"#15__193\">1.5 传地址方式——引用类型做参数</a></li></ul>\n</li><li><a href=\"#SqList_L_229\">SqList *&amp;L的情况</a></li><li><a href=\"#SqList_L_233\">SqList *L的情况</a></li></ul>\n</li><li><a href=\"#_237\">最后</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_4\"></a>前言</h1>\n<p>本文参考其他文章还有bilibili王卓老师的数据结构视频总结</p>\n<blockquote>\n<p>当初学顺序链表的时候，书上就出现了这样的语言，如下所示：</p>\n</blockquote>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">InitList_Sq</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//构造一个空的线性表L。</span>\n\tL<span class=\"token punctuation\">.</span>elem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ElemType <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>LIST_INIT_SIZE<span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ElemType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">)</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>OVERFLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span>listsize<span class=\"token operator\">=</span>LIST_INIT_SIZE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"&gt;  \" src=\"image\\d12bd040edc248ffb7b7bfe0b3867bdf.png\"/></p>\n<blockquote>\n<p>这里面的&amp;L第一遍看的时候想当然的认为是取了<mark>SqList</mark>结构体的L的地址，没有细想。然后又看到了这句。</p>\n</blockquote>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>SqList L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>ElemType <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//这根本就不是取地址符</span>\n</code></pre>\n<blockquote>\n<p>这里的ElemType就是int的类型</p>\n<p>那么可以写成如下这种方法</p>\n<pre><code class=\"prism language-c\">Status <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>SqList L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span>\n</code></pre>\n</blockquote>\n<p><strong>这样整个倒是显得非常奇怪</strong></p>\n<p><em>那么我们类比这样的形式</em></p>\n<pre><code class=\"prism language-C\">int *a,*b; /* 定义了两个整型的指针 */\nint **a, **b; /* 定义了整型指针的指针 */\n</code></pre>\n<pre><code class=\"prism language-C\">//那么难道说是定义了整型变量为地址的变量e\nint &amp;e;\n</code></pre>\n<p>那么我们看下面他写的这个东西：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ea2e3cc998144851a0ebfb81d1224eab.png\"/></p>\n<p><mark><strong>显然这里可以看出由于L指针指向的是ElemType类型，所以e是ElemType类型的。所以以上类比显然是不对的。</strong></mark></p>\n<h2><a id=\"CC_57\"></a>C/C++中的引用参数</h2>\n<blockquote>\n<p>查找了很多的资料发现，这个实际上是C++里的<strong>形参符号</strong>，必须要在<strong>跟在数据类型的后面使用</strong>。在函数内部对形参的操作都等同于直接操作原变量。</p>\n</blockquote>\n<p><em>请看下面的例子</em></p>\n<h3><a id=\"11__62\"></a>1.1 实参值不变</h3>\n<p><strong>把实参的值传送给函数局部工作区相应的副本中，函数使用这个副本执行必要的功能。函数修改的是副本的值，实参的值不变。</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">float</span> temp<span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">float</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n    printf <span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the number of a and b =\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f %f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    swap <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    printf <span class=\"token punctuation\">(</span><span class=\"token string\">\"the number of a = %f, the number of b = %f\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1c66fa3be5d2475c91fb49278ed261b0.png\"/></p>\n<p>可以看到，a与b的值并没有发生更换。</p>\n<h3><a id=\"12__90\"></a>1.2 <strong>传地址方式——指针变量做参数，形参变化影响实参</strong></h3>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">float</span> temp<span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//取指针变量内容</span>\n    <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span><span class=\"token number\">1</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">float</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p2<span class=\"token punctuation\">;</span>\n    printf <span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the number of a and b =\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f %f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    p2<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>\n    swap <span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    printf <span class=\"token punctuation\">(</span><span class=\"token string\">\"the number of a = %f, the number of b = %f\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\80e1ea49795c4730b3f1cb4e056de0b1.png\"/></p>\n<blockquote>\n<p>还有第二种方式</p>\n</blockquote>\n<pre><code class=\"prism language-C\">#include &lt;stdio.h&gt;\n// 利用指针的经典解法\nvoid swap(int *a, int *b)\n{\n    int temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nvoid main()\n{\n    int a = 1, b = 2;\n    swap(&amp;a,&amp;b);\n    printf(\"%d %d\",a,b);\n}\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\66b50f1c31b841db86f7d92045bd120d.png\"/><br/> 可以看到，<strong><mark>形参变化影响实参</mark></strong></p>\n<p><img alt=\"请添加图片描述\" src=\"image\\d23869a62a8946eca951ff8a11fadf05.png\"/></p>\n<h3><a id=\"_142\"></a>形参变化不影响实参</h3>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>temp<span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f %f\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\d323467722a9479c9c060e5a5a539019.png\"/></p>\n<blockquote>\n<p>可以发现ab值并没有发生变化</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9db6c2b213144b209c0735e0996d83e0.png\"/></p>\n<h3><a id=\"14__169\"></a>1.4 <strong>传地址方式</strong>——数组名作参数</h3>\n<p><em>传递的是数组的首地址</em> <mark>概念：数组名就是数组首地址</mark></p>\n<blockquote>\n<p>对形参数组所做的任何改变都将反映到实参数组中</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//在C++语言中也可以使用b[]来写   </span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//传数组首地址</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\c7d6b13038c84850a83f7e6ec7868db3.png\"/></p>\n<h3><a id=\"15__193\"></a>1.5 传地址方式——引用类型做参数</h3>\n<p><em>什么是引用？</em></p>\n<blockquote>\n<p>引用：他用来给一个对象提供一个代替的名字</p>\n</blockquote>\n<pre><code class=\"prism language-c++\">//运用了C++的语法\n#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\n// 引用参数实现交换\nvoid swap(int &amp;a, int &amp;b){\n    int temp;\n    temp = a;\n    a = b;\n    b = temp;\n}\n\n// Using main to test\nint main(){\n\tint a = 1, b = 2;\n    swap(a,b);\n    printf(\"%d %d\\n\",a,b);\n    return 0;\n}\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\57194a23edd6411296040d2ec56a92d0.png\"/></p>\n<blockquote>\n<p>有些文章说道，通过引用的方式传递给函数的是变量的地址，这种方式叫做<strong>地址传递方式</strong>，还提到这是和“值传递”十分不同的方式。<br/> 有些书说道：“<strong>引用实际上是取了个‘别名’</strong>”<br/> 还有的书和文章说道引用是比通过指针传递更加高效的方式，因为不需要开辟新的内存空间用来拷贝实参的地址。</p>\n</blockquote>\n<p><mark>**那么SqList <em>&amp;L和SqList <em>L的关系就能捋清楚了</em></em></mark> 可以参考<strong>1.2 传地址方式——指针变量做参数，形参变化影响实参</strong></p>\n<h2><a id=\"SqList_L_229\"></a>SqList *&amp;L的情况</h2>\n<p>它的意思是，L是对List的引用，函数体内对L的操作，就相当于对Head的操作，所以这种情况下对L的更改才会发生到List上。</p>\n<h2><a id=\"SqList_L_233\"></a>SqList *L的情况</h2>\n<p>当List指针作为函数参数传进去时，意为你要把指针List所指的地址值赋给指针L，（可以类比int类型，毕竟指针本质上也是一种数据类型）。这就意味着此时的实参List跟形参L并不是同一个指针，而是指向同一个地址的不同指针。所以你对L的操作并没有发生到List身上。达不到预期效果。</p>\n<h1><a id=\"_237\"></a>最后</h1>\n<blockquote>\n<p>C语言不存在“引用”的概念，符号“&amp;”只是表示取地址，而C++才有“引用”的含义。<br/> 比如对于这段代码——</p>\n<pre><code class=\"prism language-C\">//C语言不存在“引用”的概念，符号“&amp;”只是表示取地址，而C++才有“引用”的含义。\n//比如对于这段代码——\n#include&lt;stdio.h&gt;\nint main()\n{\n\tint i = 0;\n\tint &amp;j = i;\n}，\n/*使用gcc编译器编译会报错：”错误：expected identifier or ‘(’ before ‘&amp;’ token“，但是使用g++编译就不会报错。*/\n</code></pre>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}