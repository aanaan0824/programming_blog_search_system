{"blogid": "126626122", "writerAge": "码龄2年", "writerBlogNum": "73", "writerCollect": "1892", "writerComment": "1114", "writerFan": "6563", "writerGrade": "5级", "writerIntegral": "3872", "writerName": "小边小边不秃头", "writerProfileAdress": "writer_image\\profile_126626122.jpg", "writerRankTotal": "4370", "writerRankWeekly": "4004", "writerThumb": "1844", "writerVisitNum": "101934", "blog_read_count": "275", "blog_time": "已于 2022-09-05 19:39:55 修改", "blog_title": "【Linux】多线程 —— 线程概念 | 线程控制", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-kimbie-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>多线程</h3>\n<ul><li><a href=\"#1__24\">1. 线程概念</a></li><li><ul><li><a href=\"#11_Linux_26\">1.1 Linux线程与接口关系的认识</a></li><li><a href=\"#12____39\">1.2 线程的私有 &amp; 共有资源</a></li><li><a href=\"#13__65\">1.3 线程的优缺点</a></li><li><a href=\"#14__110\">1.4 线程的异常</a></li></ul>\n</li><li><a href=\"#2__117\">2. 线程控制</a></li><li><ul><li><a href=\"#21_pthread_create__119\">2.1 pthread_create 创建线程</a></li><li><a href=\"#22_pthread_join__329\">2.2 pthread_join 线程等待</a></li><li><a href=\"#23__404\">2.3 线程终止的方案</a></li><li><a href=\"#24_pthrerad_detach__580\">2.4 pthrerad_detach 线程分离</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<blockquote>\n<p><em>a zing never lies</em></p>\n</blockquote>\n<p>正文开始@小边小边别发愁</p>\n<blockquote>\n<p>线程，是在进程<strong>内部</strong>运行的一个执行分支(执行流)，属于进程的一部分，粒度要比进程更加细和轻量化。</p>\n</blockquote>\n<p>一个进程内，可能存在多个线程，进程:线程 = 1:n，操作系统中可能存在更多的线程，OS就要管理线程 —— 先描述，再组织。线程也应该有<strong>线程控制块</strong> —— TCB(thread control block)，如上所说是常规OS的做法，例如windows，但是Linux的实现有所不同。</p>\n<img alt=\"image-20220830212639628\" src=\"image\\image-20220830212639628.png\"/>\n<p>Linux中没有专门为线程设计PCB，而是<strong>用进程PCB来模拟。</strong></p>\n<p>这样以来，就不用维护进程和线程复杂的关系，不用单独为线程涉及任何算法，而是直接使用进程的一套相关算法，OS只需要聚焦在线程间的资源分配上。</p>\n<blockquote>\n<p>线程，是在进程<u>内部</u>(线程在进程的地址空间内执行)运行的一个<u>执行分支</u>(执行流)(CPU调度时只看PCB，每一个PCB曾经被指派过指向方法和数据，CPU可以直接调度)，属于<u>进程</u>的一部分(今天的进程vs过去的进程)，粒度要比进程更加细和轻量化。</p>\n<p>之前的进程，是内部只包含一个执行流的进程；今天的进程，内部可以具有多个执行流。</p>\n</blockquote>\n<p>创建进程需要创建PCB、地址空间、页表，加载数据和代码，构建映射关系，文件等等；而创建线程，只需要创建PCB。创建进程的成本(空间+时间)非常高，要使用的资源非常多(0→1)！</p>\n<p>内核视角：进程是承担分配系统资源的基本实体！！<strong>线程是CPU调度的基本单位</strong>，承担进程资源的一部分基本实体，即进程划分资源给线程。</p>\n<h1><a id=\"1__24\"></a>1. 线程概念</h1>\n<h2><a id=\"11_Linux_26\"></a>1.1 Linux线程与接口关系的认识</h2>\n<p>Linux PCB &lt;= 传统意义上的进程PCB</p>\n<ul><li>OS层面上，创建“线程”时更轻量化</li><li>CPU调度</li></ul>\n<p>Linux的进程，一般称为轻量级进程。</p>\n<p>Linux因为是用进程模拟的，所以Linux<strong>不会给我们提供直接操作线程的接口</strong>，<strong>而是</strong>给我们提供在同一个地址空间创建PCB的方法，分配资源给指定的PCB的接口。这对用户(系统级别的工程师)特别不友好！！所以他们在用户层对Linux轻量级进程接口进行封装，给我们打包成库，让我们直接使用库接口 —— <strong>原生线程库</strong>pthread(用户层)</p>\n<h2><a id=\"12____39\"></a>1.2 线程的私有 &amp; 共有资源</h2>\n<p>所有的轻量级进程(可能是“线程”)，都是在进程的内部运行(地址空间：表示进程所能看到的大部分资源)</p>\n<p>进程，具有独立性，可以有部分共享资源(管道、ipc资源)；线程，大部分资源是共享的，也可以有部分资源是“私有”(pcb、<strong>栈、上下文</strong>)</p>\n<p><strong>线程的私有资源</strong></p>\n<ul><li>线程ID</li><li>一组寄存器(<strong>上下文</strong>)</li><li><strong>栈</strong></li><li>errno</li><li>信号屏蔽字</li><li>调度优先级</li></ul>\n<p><strong>线程的共享资源</strong></p>\n<ul><li><strong>文件描述符表</strong></li><li>每种信号的处理方式 (SIG_ IGN、SIG_ DFL或者自定义的信号处理函数)</li><li>当前工作目录</li><li>用户id和组id</li></ul>\n<h2><a id=\"13__65\"></a>1.3 线程的优缺点</h2>\n<p><strong>线程的优点</strong></p>\n<ul><li> <p>创建一个新线程的代价要比创建一个新进程小得多</p> </li><li> <p>与进程之间的切换相比，线程之间的切换需要操作系统做的工作要少很多</p> </li><li> <p>线程占用的资源要比进程少很多</p> </li><li> <p>能充分利用多处理器的可并行数量(多进程)</p> </li><li> <p>在等待慢速I/O操作结束的同时，程序可执行其他的计算任务(多进程)</p> </li><li> <p><strong>计算密集型</strong>应用 (加密、大数据运算等，主要使用的是CPU资源)，为了能在多处理器系统上运行，将计算分解到多个线程中实现。线程是越多越好嘛？不一定的，如果线程太多会导致线程被过度调度切换，这也是有成本的。</p> </li><li> <p><strong>I/O密集型</strong>应用 (网络下载、云盘、SSH、在线直播、看电影，主要使用的是内存和外设的IO资源)，为了提高性能，将各线程等待I/O操作的时间重叠。线程可以同时等待不同的I/O操作。线程是不是越多越好呢？不一定啊喂，不过IO允许多一些线程，因为大部分的时间是等待IO就绪的。</p> <p>很多应用都是CPU_IO密集型的，例如网络游戏</p> </li></ul>\n<p><strong>线程的缺点</strong></p>\n<ul><li> <p>性能损失</p> <p>一个很少被外部事件阻塞的计算密集型线程往往无法与共它线程共享同一个处理器。如果计算密集型线程的数量比可用的处理器多，那么可能会有较大的性能损失，这里的性能损失指的是增加了额外的同步和调度开销，而可用的资源不变(多进程)</p> </li><li> <p><strong>健壮性降低</strong> (compared with进程 - 独立性)</p> <p>编写多线程需要更全面更深入的考虑，在一个多线程程序里，因时间分配上的细微偏差或者因共享了不该共享的变量而造成不良影响的可能性是很大的，换句话说线程之间是缺乏保护的。后文验证。</p> </li><li> <p>缺乏访问控制</p> <p>进程是访问控制的基本粒度，在一个线程中调用某些OS函数会对整个进程造成影响。</p> </li><li> <p>编程难度提高</p> <p>编写与<u>调试</u>一个多线程程序比单线程程序困难得多</p> </li><li> <p>合理的使用多线程，能提高CPU密集型程序的执行效率</p> </li><li> <p>合理的使用多线程，能提高IO密集型程序的用户体验（如生活中我们一边写代码一边下载开发工具，就是多线程运行的一种表现）</p> </li></ul>\n<h2><a id=\"14__110\"></a>1.4 线程的异常</h2>\n<ul><li><strong>单个线程崩溃</strong>(如果出现除零，野指针问题)，进程也会随着崩溃，因为终止进程是发送信号的，信号是发给进程的，进程的资源就被释放了。</li><li>线程是进程的执行分支，线程出异常，就类似进程出异常，进而触发信号机制，终止进程，进程终止，该进程内的所有线程也就随即退出</li></ul>\n<h1><a id=\"2__117\"></a>2. 线程控制</h1>\n<h2><a id=\"21_pthread_create__119\"></a>2.1 pthread_create 创建线程</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_t</span> <span class=\"token operator\">*</span>thread<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">pthread_attr_t</span> <span class=\"token operator\">*</span>attr<span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>start_routine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Compile and link with -pthread. 事实上这就是第三方库</p>\n<p>返回值：On success, pthread_create() returns 0; on error, it returns an error number</p>\n<p>参数：</p>\n<ul><li><code>thread</code>：线程ID，无符号(长)整数，不同操作系统有差别。</li><li><code>attr</code>：线程属性。设为<code>NULL</code>，交给操作系统来设置。</li><li><code>start_routine</code>：线程的回调函数</li><li><code>arg</code>：其实就是传递给回调函数的参数。</li></ul>\n<p>此时依旧只有一个进程，但是进程内部一定具有两个执行流。发送<code>kill</code>信号，都被干掉了，说明信号是发送给进程的。</p>\n<pre><code class=\"prism language-c\">ps <span class=\"token operator\">-</span>aL\t<span class=\"token comment\">//-L查看轻量级进程</span>\n</code></pre>\n<p>我们发现，这两个线程的PID相同，但不同的是<strong>LWP</strong>(light weight process 轻量级进程)。事实上，Linux OS调度时看的是LWP。</p>\n<p>这与我们之前单独一个进程的情况并不矛盾，PID = LWP → 主线程。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//obtain ID of the calling thread</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"token class-name\">pthread_t</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thread_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d: 我是新线程%s, 我的线程ID是%lu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_run<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"thread 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d: 我是main线程, 我的线程ID是%lu, 我创建的线程ID是%lu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们发现新创建的thread 1线程ID是一个很大的数，与我们之前看到的LWP并不相同 ——</p>\n<img alt=\"image-20220830212708130\" src=\"image\\image-20220830212708130.png\"/>\n<p>( 这是内核LWP，和这些长整数是不一样的，操作系统和线程库中的线程ID没规定必须一样~~)</p>\n<blockquote>\n<p>下面验证一下这个长整数是什么？</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thread_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new thread: 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">;</span>\n <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_run<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main thread: 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20220830212752537\" src=\"image\\image-20220830212752537.png\"/>\n<p>我们查看到的线程ID是pthread库的线程ID，不是Linux内核中的LWP，pthread库是一个<strong>内存地址</strong>！那一定是虚拟地址。</p>\n<p>可以快速拿到线程的属性：是一个被映射进虚拟地址空间，pthread库中的地址 → 线程ID</p>\n<img alt=\"image-20220831155747285\" src=\"image\\image-20220831155747285.png\"/>\n<p>那么 ——</p>\n<img alt=\"image-20220831160334845\" src=\"image\\image-20220831160334845.png\"/>\n</blockquote>\n<p>我们当然还可以创建一批线程 ——</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thread_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// printf(\"%d: 我是新线程%s, 我的线程ID是%lu\\n\", getpid(), id, pthread_self());</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>tid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_run<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"new thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是主线程, 我的thread_ID是%lu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=====================begin=======================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我创建的线程[%d]是：%lu\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> tid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"======================end========================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20220831152038173\" src=\"image\\image-20220831152038173.png\"/>\n<p>我们再来验证一下，<strong>一个线程崩溃，整个进程终止</strong>，写一段不太优雅的代码 ——</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thread_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是新线程[%d], 我的线程ID是%lu\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//故意设置了野指针问题 - 崩溃</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread number: %d quit...\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>tid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_run<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20220830213055028\" src=\"image\\image-20220830213055028.png\"/>\n<p>由此可见，多线程健壮性不强。</p>\n<h2><a id=\"22_pthread_join__329\"></a>2.2 pthread_join 线程等待</h2>\n<p>一般而言，线程也是需要被等待的，如果不等待，<u>可能</u>会导致类似“僵尸进程”的问题。</p>\n<p>进程需要等待，同样的，创建线程的目的也是让他帮我办事儿，办的怎么样也需要知道；另外，线程复用了PCB结构，退出码退出信号也需要填入PCB。</p>\n<p>💛 ​<strong>join with a terminated thread</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_t</span> thread<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>retval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nCompile and link with <span class=\"token operator\">-</span>pthread<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>返回值：On success, pthread_join() returns <strong>0</strong>; on error, it returns an error number.</p>\n<p>参数：</p>\n<ul><li> <p><code>thread</code>：等待哪个线程。就是我们刚才pthread_self()获取的长整数。</p> </li><li> <p><code>retval</code>：输出型参数，用于<strong>获取</strong>新线程<strong>退出时的返回值</strong> ↓ 当然了~ 不要认为这儿的返回值只是整数，也可以是其他变量/对象的地址，但不能是临时的。</p> <p>我们知道进程退出无非三种情况：①代码跑完结果对 ②代码跑完结果不对 ③异常。进程那里有退出码，在多进程这儿就是通过**<code>void*</code>返回值<strong>得知</strong>执行结果**。那么代码异常如何处理？事实上，根本不需要处理，因为这是进程的事儿。</p> </li></ul>\n<p>那么当然就可以通过返回值得知线程执行的怎么样了 ——</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thread_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是新线程[%d], 我的线程ID是%lu\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//新线程跑完</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">111</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NUM</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">[</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>tid<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_run<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//void* - 占8个字节 - 指针变量，本身就可以充当某种容器保存数据</span>\n    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> status  <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"23__404\"></a>2.3 线程终止的方案</h2>\n<ol><li>函数中return \n  <ul><li>main函数return的时候代表主线程/进程退出</li><li>其他线程函数return只代表当前线程退出</li></ul> </li><li>新线程通过pthread_exit()终止自己</li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">pthread_exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>retval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>terminate calling thread 相当于return</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thread_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是新线程[%d], 我的线程ID是%lu\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//新线程跑完</span>\n    <span class=\"token function\">pthread_exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NUM</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">[</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>tid<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_run<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> status  <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20220830213110446\" src=\"image\\image-20220830213110446.png\"/>\n<p>这和我们之前的exit()有什么区别呢？<strong>exit是终止进程</strong>，如果你只想终止一个线程的话，不要在其它线程中调用。</p>\n<ol start=\"3\"><li>取消目标进程 send a cancellation request to a thread</li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cancel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_t</span> thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nCompile and link with <span class=\"token operator\">-</span>pthread<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>我们发现，进程被取消时，返回值是-1</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thread_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是新线程[%d], 我的线程ID是%lu\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// break;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//新线程跑完</span>\n    <span class=\"token comment\">// return (void*)111;</span>\n    <span class=\"token comment\">// pthread_exit((void*)123);</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NUM</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">[</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>tid<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_run<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait sub thread...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cancal sub thread...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">pthread_cancel</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> status  <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img alt=\"image-20220830213157633\" src=\"image\\image-20220830213157633.png\"/>\n<p>那如果用新线程取消主线程呢？</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token class-name\">pthread_t</span> g_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thread_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是新线程[%d], 我的线程ID是%lu\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pthread_cancel</span><span class=\"token punctuation\">(</span>g_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NUM</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    g_id <span class=\"token operator\">=</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">[</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>tid<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_run<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait sub thread...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cancal sub thread...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">pthread_cancel</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> status  <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们发现主线程变为 &lt; defunct &gt;，类似于僵尸进程，而新线程还愉快的跑着，这与主函数return不同，但我们不建议也极少有情况需要这样做 ——</p>\n<img alt=\"image-20220830213233370\" src=\"image\\image-20220830213233370.png\"/>\n<h2><a id=\"24_pthrerad_detach__580\"></a>2.4 pthrerad_detach 线程分离</h2>\n<p>等待，如果我不想等呢？—— 线程分离，分离后的线程不需要被join，运行完毕后，会自动释放Z-pcb，类比<code>signal(SIGCHLD, SIG_IGN)</code>，相当于同一屋檐下的陌生人，你不要关心我啦。</p>\n<p>如何分离？</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pthread_detach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_t</span> thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nCompile and link with <span class=\"token operator\">-</span>pthread<span class=\"token punctuation\">.</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n<span class=\"token class-name\">pthread_t</span> g_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thread_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">pthread_detach</span><span class=\"token punctuation\">(</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是新线程[%d], 我的线程ID是%lu\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//新线程跑完</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">111</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// pthread_exit((void*)123);</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NUM</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    g_id <span class=\"token operator\">=</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">[</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>tid<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thread_run<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait sub thread...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cancal sub thread...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// pthread_cancel(tid[0]);</span>\n    <span class=\"token comment\">//void* - 占8个字节 - 指针变量，本身就可以充当某种容器保存数据</span>\n    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> status  <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret: %d, status: %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>说明我们<strong>pthread_join是失败的</strong>，status也没拿到退出结果 ——</p>\n<img alt=\"image-20220830213247545\" src=\"image\\image-20220830213247545.png\"/>\n<p>一个线程被设为分离后，绝对不能再join了！分了就是分了，别再等我啦~</p>\n<p>一般场景是主线程不退出，新线程业务处理完毕后再退出。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}