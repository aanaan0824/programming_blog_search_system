{"blogid": "125040457", "writerAge": "码龄2年", "writerBlogNum": "70", "writerCollect": "145", "writerComment": "30", "writerFan": "20", "writerGrade": "3级", "writerIntegral": "739", "writerName": "风吟Pro", "writerProfileAdress": "writer_image\\profile_125040457.jpg", "writerRankTotal": "24585", "writerRankWeekly": "20832", "writerThumb": "49", "writerVisitNum": "23280", "blog_read_count": "2901", "blog_time": "已于 2022-07-04 09:22:57 修改", "blog_title": "瑞吉外卖笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>概述</h1>\n<h2><a id=\"_1\"></a>功能架构图</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\00f39dbdd7d24d88b56c10eabeecdd7d.png\"/></p>\n<h1><a id=\"_4\"></a>数据库建库建表</h1>\n<h2><a id=\"_5\"></a>表说明</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ee424986569f45b6a071f1556bfe10b8.png\"/></p>\n<h1><a id=\"_7\"></a>开发环境</h1>\n<h2><a id=\"Maven_8\"></a>Maven搭建</h2>\n<p>直接创建新工程<br/> 继承父工程的形式来做这个，这里新建父工程<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6e78719f1b0e465e816e50584a93d39c.png\"/><br/> pom文件</p>\n<pre><code class=\"prism language-yml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9001</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ccTakeOut\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">druid</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ruiji<span class=\"token punctuation\">?</span>serverTimezone=Asia/Shanghai<span class=\"token important\">&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span>\n      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">333</span>\n\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> localhost <span class=\"token comment\"># 本地IP 或是 虚拟机IP</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>\n    <span class=\"token comment\">#    password: root</span>\n    <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 默认使用 0号db</span>\n  <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">time-to-live</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1800000</span>  <span class=\"token comment\"># 设置缓存数据的过期时间，30分钟</span>\n\n<span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，开启按照驼峰命名法映射</span>\n    <span class=\"token key atrule\">map-underscore-to-camel-case</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl\n  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">db-config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">id-type</span><span class=\"token punctuation\">:</span> ASSIGN_ID\n\n</code></pre>\n<h2><a id=\"_46\"></a>启动测试</h2>\n<p>创建测试类并启动<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8f3df341f8ed469a96de5831708a5fc5.png\"/></p>\n<h2><a id=\"_49\"></a>导入前端页面</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d8af2e9f8b1f4c52b8b881801c5d8c3b.png\"/></p>\n<h3><a id=\"_52\"></a>导入</h3>\n<p>在默认页面和前台页面的情况下，直接把这俩拖到resource目录下直接访问是访问不到的，因为被mvc框架拦截了<br/> 所以我们要编写一个映射类放行这些资源</p>\n<h4><a id=\"_55\"></a>创建配置映射类</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\434a4b66a3534624ae8576c71d5e43ac.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\ddb9c62315e74bfba369d3812b957453.png\"/></p>\n<p>访问成功<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1a44e566a18b4da1bdbcb2e20abcd048.png\"/></p>\n<h1><a id=\"_61\"></a>后台开发</h1>\n<h2><a id=\"_62\"></a>数据库实体类映射</h2>\n<p>用mybatis plus来实现逆向工程<br/> 这里是老版本的逆向工程</p>\n<pre><code class=\"prism language-java\">    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>freemarker<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>freemarker<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">2.3</span><span class=\"token number\">.30</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>com<span class=\"token punctuation\">.</span>baomidou<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>mybatis<span class=\"token operator\">-</span>plus<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">3.3</span><span class=\"token number\">.1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>mybatis<span class=\"token operator\">-</span>plus 代码生成器依赖<span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>com<span class=\"token punctuation\">.</span>baomidou<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>mybatis<span class=\"token operator\">-</span>plus<span class=\"token operator\">-</span>generator<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">3.3</span><span class=\"token number\">.2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>具体怎么玩看这里<br/> <a href=\"https://blog.csdn.net/weixin_48678547/article/details/123379415\">MP逆向工程教程</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\9063d65d4f074b488c44675c078965c2.png\"/></p>\n<h1><a id=\"_89\"></a>账户操作</h1>\n<h2><a id=\"_90\"></a>登陆功能</h2>\n<p>前端页面<br/> <img alt=\"在这里插入图片描述\" src=\"image\\018840778788414d802ec5309034a30b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\7981e9e300884b3285073d4072fdd775.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\aa04438900b64014a89cbcb2115d9463.png\"/></p>\n<p>数据库<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fbf6a0035c4c4e929e6736bb592abc1f.png\"/><br/> 业务逻辑<br/> <img alt=\"在这里插入图片描述\" src=\"image\\257ae0d260b2430b8890d054fc72b65a.png\"/><br/> <strong>这里两个字符串的比较没法用!=来实现</strong>，只能equals再取反来判断<br/> 直接上代码，这里没有涉及service层的操作</p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">/**\n     * @param request 如果登陆成功把对象放入Session中，方便后续拿取\n     * @param employee 利用@RequestBody注解来解析前端传来的Json，同时用对象来封装\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Employee</span> employee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> password<span class=\"token operator\">=</span>employee<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> employee<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登陆\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//MD5加密</span>\n        <span class=\"token class-name\">MD5Util</span> md5Util <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MD5Util</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        password<span class=\"token operator\">=</span><span class=\"token class-name\">MD5Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMD5</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//通过账户查这个员工对象，这里就不走Service层了</span>\n        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span> lambdaQueryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lambdaQueryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token operator\">::</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Employee</span> empResult<span class=\"token operator\">=</span>employeeService<span class=\"token punctuation\">.</span><span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span>lambdaQueryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//判断用户是否存在</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>empResult<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"账户不存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//密码是否正确</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>empResult<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"账户密码错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//员工账户状态是否正常，1状态正常，0封禁</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>empResult<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前账户正在封禁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//状态正常允许登陆</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登陆成功，账户存入session\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//员工id存入session，</span>\n            request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employ\"</span><span class=\"token punctuation\">,</span>empResult<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登陆成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>具体代码可以参考如下路径</p>\n<pre><code>com.cc.controller.EmployeeController\n</code></pre>\n<p><a href=\"https://blog.csdn.net/weixin_44062380/article/details/116103642\">关于RequestBody何时使用</a></p>\n<h2><a id=\"_144\"></a>退出功能</h2>\n<p>点击退出<br/> <img alt=\"在这里插入图片描述\" src=\"image\\09194dda97404a7db7a4438d056df2b6.png\"/><br/> 删除session对象</p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">/**\n     * @param request 删除request作用域中的session对象，就按登陆的request.getSession().setAttribute(\"employ\",empResult.getId());删除employee就行\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/logout\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//尝试删除</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//删除失败</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登出失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登出成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_165\"></a>完善登陆（添加过滤器）</h2>\n<p>这里的话用户直接url+资源名可以随便访问，所以要加个拦截器，没有登陆时，不给访问，自动跳转到登陆页面<br/> <img alt=\"在这里插入图片描述\" src=\"image\\470f1c39f58f4cb09ee3878195622ca1.png\"/><br/> 过滤器配置类注解<code>@WebFilter(filterName=\"拦截器类名首字母小写\"，urlPartten=“要拦截的路径，比如/*”)</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\4cf893fe589242eba9be0c206389bc18.png\"/>判断用户的登陆状态这块之前因为存入session里面有一个名为employee的对象，那么只需要看看这个session还在不在就知道他是否在登陆状态<br/> 注意，想存或者想获取的话，就都得用<code>HttpServletRequest</code>的对象来进行获取，别的request对象拿不到的</p>\n<p>这里提一嘴<br/> 调用Spring核心包的字符串匹配类的对象，对路径进行匹配，并且返回比较结果<br/> 如果相等就为true</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AntPathMatcher</span> PATH_MATCHER <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AntPathMatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a4e9e841bb7c43179bbcb2905d172a2c.png\"/><br/> 前端拦截器完成跳转到登陆页面，不在后端做处理<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f0a1667cce664c35b64925c48dfb59f0.png\"/><br/> 代码太多了，给个路径好啦，直接去Gitee看<br/> request的js代码路径：<code>resource/backend/js/request.js</code><br/> 拦截器的路径：<code>com.cc.filter.LoginCheckFilter</code></p>\n<h2><a id=\"_185\"></a>新增员工</h2>\n<p>新增员工功能，（前端对手机号和身份证号长度做了一个校验）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\966dd380180a47018ed362e125406271.png\"/><br/> 请求 URL: http://localhost:9001/employee （POST请求）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8bae2348243f4d0ebe58ce97aff511d3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f6299bb555784e8e88b08d3cfa88be77.png\"/><br/> 改造一下Employee实体类，通用id雪花自增算法来新增id<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d38ab9e9810244bab56a09ca6d40bfa9.png\"/><br/> 这里用service接口继承的MybatisPlus的功能<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0b5eeb36e8214deb8ceea0385d4f89a0.png\"/><br/> 注入一下就可以使用了，插入方法<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e297f0e3af7649eda9ac74fb9b19b19c.png\"/><br/> 基本上都是自动CRUD，访问路径：<code>com.cc.controller.EmployeeController</code></p>\n<h2><a id=\"_199\"></a>全局异常处理</h2>\n<p>先看看这种代码的try catch<br/> 这种try catch来捕获异常固然好，<strong>但是，代码量一大起来，超级多的try catch就会很乱</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\232dfeaca28f420cb0fd5fae01f4ce15.png\"/><br/> 所以我们要加入全局异常处理，在Common包下，和Result同级，这里只是示例，并不完整<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b8da6a3931714deeb724381c0ad2da41.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\33fe7337e5464cf9b07a7f0a31f67a04.png\"/><br/> 当报错信息出现Duplicate entry时，就意味着新增员工异常了<br/> 所以，我们对异常类的方法进行一些小改动，让这个异常反馈变得更人性化<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b795bb06e106477192795c9fa56e15fa.png\"/><br/> 这个时候再来客户端试试，就会提供人性化的报错，非常的快乐~<br/> <img alt=\"在这里插入图片描述\" src=\"image\\39454913ca2a48778c8c25281a03ff06.png\"/><br/> <strong>这回再回到Controller，这时就不需要再来try catch这种形式了，不用管他，因为一旦出现错误就会被我们的AOP捕获。所以，不需要再用try catch来抓了</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\0e1e9a3feb7c4b7c8bfa1dc61286437f.png\"/><br/> 异常类位置：<code>com.cc.common.GloableExceptionHandler</code></p>\n<h2><a id=\"_216\"></a>员工信息分页查询</h2>\n<h3><a id=\"_217\"></a>接口分析</h3>\n<p>老生常谈分页查询了<br/> 需求<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3899bbef468e4224b6b26fa6a13e103c.png\"/><br/> 分页请求接口<br/> <img alt=\"在这里插入图片描述\" src=\"image\\288dd9777c1944d195cb421038fbc885.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3b9f9ddf4a304f44923ef89fa9b22ca7.png\"/><br/> 查询员工及显示接口<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cc0e4ee9f4b14b8d9e2c12428471889d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e339d98a293a43c19d3c6a6252da428b.png\"/><br/> 逻辑流程<br/> <img alt=\"在这里插入图片描述\" src=\"image\\50fa6620581044c69049028b6921f72e.png\"/></p>\n<h3><a id=\"_229\"></a>分页插件配置类</h3>\n<p>先弄个MP分页插件配置类<br/> <strong>原因是和3.2.3版本的代码生成器冲突</strong><br/> <a href=\"https://blog.csdn.net/weixin_49530535/article/details/119815650\">分页插件爆红解决方案</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\d21457c19dd14f89ab7c314137ae7b33.png\"/><br/> 直接注释掉<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0d56b79072e548799e4bde12f7cc7bc2.png\"/><br/> 加入配置类<br/> <img alt=\"在这里插入图片描述\" src=\"image\\928faf96126040248a6c7629433b8f4a.png\"/></p>\n<h3><a id=\"_238\"></a>接口设计</h3>\n<p>前端注意事项<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0e4186ba7e804ab6b1b3c6b2a3f1ce05.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\eae2123e010e4d048e3b5a1339cf41ce.png\"/><br/> page对象内部<br/> <img alt=\"在这里插入图片描述\" src=\"image\\87eab00f37584a51bcee03f83d665e32.png\"/><br/> 里面包含了查询构造器的使用<br/> 具体的细节在这个包下：com.cc.controller.EmployeeController.page</p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">/**\n     * 分页展示员工列表接口、查询某个员工\n     * @param page 查询第几页\n     * @param pageSize 每页一共几条数据\n     * @param name 查询名字=name的数据\n     * @return 返回Page页\n     */</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/page\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> page<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pageSize<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//分页构造器,Page(第几页, 查几条)</span>\n        <span class=\"token class-name\">Page</span> pageInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//查询构造器</span>\n        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span> lambdaQueryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//过滤条件.like(什么条件下启用模糊查询，模糊查询字段，被模糊插叙的名称)</span>\n        lambdaQueryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Employee</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//添加排序</span>\n        lambdaQueryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token operator\">::</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//查询分页、自动更新</span>\n        employeeService<span class=\"token punctuation\">.</span><span class=\"token function\">page</span><span class=\"token punctuation\">(</span>pageInfo<span class=\"token punctuation\">,</span> lambdaQueryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//返回查询结果 </span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>pageInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_271\"></a>启用、禁用员工账号</h2>\n<p>无非就是修改status，0禁用，1启用<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cbc14ff5649f4c3ab58a61f6a3717d55.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\00fd8c22798a4be0935fbe4706aac1a0.png\"/><br/> 这种根据登陆人物来进行判断的玩法，是前端<br/> 这个页面的位置<code>resource/backend/page/member/list.html</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\15cb1554d5014d91a50a1d33faff5f0e.png\"/><br/> 看拿出来的对象是什么样子的，如果是admin，vue的v-if指令就会把编辑按钮显示出来<br/> 如果是普通用户，就会把编辑按钮隐藏<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1a813cac7216496c9f007b2e89e94571.png\"/></p>\n<h3><a id=\"Bug_281\"></a>修复一个小Bug</h3>\n<p>前端一直不显示编辑按钮，在localStorage里没有发现admin对象<br/> <img alt=\"在这里插入图片描述\" src=\"image\\656ddea591c644369951b448d9437162.png\"/><br/> 这个值不应该是登陆成功，应该是Employee的对象Json<br/> 猜测是登陆的时候往request里存对象没存好<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e02134f0443f4cebaf01da0bebb88be3.png\"/><br/> 改成对象存入就好了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3695c863613643ebb7c9d2fb6f44b1f2.png\"/><br/> 这回都正常了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f291200889854951bae0025d0c96d67f.png\"/></p>\n<h3><a id=\"_291\"></a>功能编写</h3>\n<p>复习一下<br/> <mark><strong>PutMapping是Resultful风格的请求方式</strong></mark><br/> <img alt=\"在这里插入图片描述\" src=\"image\\0dcd79a42b334bae8337cb40a73fd17c.png\"/><br/> 当前状态是1，直接带着目标状态值（状态改禁用）进行更新<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bbc8b8c97744496491c18389cf13f2f1.png\"/><br/> Id精度丢失，js独有的bug，直接处理Long处理不了，要Long转String再返回去<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bd851e41062148db9a7d4b84b687372f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\65954dc589544fe1bc98a70d0a878936.png\"/><br/> 利用对象转换器JacksonObjectMapper，将对象转Json<br/> 将Long型的Id转换为String类型的数据<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7b18d09c0e75446db59dab3f6f4f505a.png\"/></p>\n<p>在MVC配置类中扩展一个消息转换器<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bc895faafbb247eb9e580f553d32d4e6.png\"/><br/> 测试功能正常，正常更新员工状态<br/> 消息扩展器配置位置：<code>com.cc.common.JacksonObjectMapper</code><br/> 对象映射器位置：<code>com.cc.config.WebMvcConfig</code><br/> 员工状态更新位置：<code>com.cc.controller.EmployeeController</code></p>\n<h2><a id=\"_310\"></a>编辑员工信息</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\83b635aff2ca4445840f24ef5c60a22b.png\"/><br/> 请求API，这个是先发请求，查到用户，然后填充到页面上<br/> 可以看出来，这种请求方式是ResultFul风格的请求方式<br/> 在控制器中要用@PathVariable(“/{参数名称}”)注解来进行接收<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7f1a236c859d418eb4aa1177cbf82543.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f7b34494b2eb42b8b315e9f7c2802956.png\"/><br/> 完美更新<br/> 更新方法位置：<code>com.cc.controller.EmployeeController.getEmployee</code></p>\n<h2><a id=\"_319\"></a>公共字段自动填充</h2>\n<p>像是一部分公共字段，反复填充起来没有意义，简化填充的操作。<br/> 把这个功能拿出来，单独拎出来做自动填充处理<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f6b5a68d4b8646aab2b39db34fba625a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\09eaaee0510849749512ef973529a4ed.png\"/><br/> 为实体类属性上面加入注解<code>@TableField(fill = 填充条件)</code><br/> 看一下源码。fill是填充条件，用枚举来进行处理的<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c41f5a745d6c48d5b944fbe2b81e5726.png\"/><br/> 加完注解和条件不算完，还要加入配置类进行处理，对填充的数据做规定<br/> 在common包下创建一个自定义类，最关键的是要实现<code>MetaObjectHandler接口下的insertFill和updateFill</code><br/> 确认填充时需要的字段。还有要加入@Component注解，将这个类交给框架来管理，否则的话容易找不到,setValue的值会根据注解加入的字段名称来锁定是否需要更新<br/> 位置：<code>com.cc.common.MyMetaObjectHandler</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\1810345a8b204a639754df2220f32bc2.png\"/><br/> 但是这里有个问题，如果我想去更新管理员字段是非常困难的，因为我这里拿不到Request的作用域对象，所以要想个办法来处理。<br/> 这个时候就需要<code>ThreadLocal</code>来进行对象的获取，这个线程是贯穿整个运行的，可以通过他来获取</p>\n<h3><a id=\"_334\"></a>使用时</h3>\n<p>何为ThreadLocal<br/> <mark><strong>重点来了</strong></mark><br/> 这个图<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a747301972964b88a7db5dc9d84995e6.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\62ec83c598a546b89722fef26f3ca4b4.png\"/><br/> 我的思路就是在用户登陆的时候，把这个id存进去，等到在填充字段的时候，从ThreadLocal里把这个资源再拿出来。<br/> 直接操作不太好，把他封装成一个工具类，这个工具类里方法都是静态的，可以通过类直接调用、并且都是静态方法，来操作保存和读取<br/> 我选择在Utils下创建</p>\n<h3><a id=\"Bug_343\"></a>第一次的Bug</h3>\n<p>具体包在utils里，有Bug，封装的类ThreadLocal获取不到数据，不太清楚为什么，暂时就把这个写死了</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 基于ThreadLocal 封装工具类，用户保存和获取当前登录的用户id</span>\n<span class=\"token comment\">// ThreadLocal以线程为 作用域，保存每个线程中的数据副本</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseContext</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//  设置当前用户id</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCurrentId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getCurrentId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意，ThreadLocal不是一个线程，只有同一个线程才能拿到，不是一个线程拿不到的</p>\n<h3><a id=\"_364\"></a>解决方案</h3>\n<p>更改setId的位置，存储的时候放在过滤器内部，就算是一个线程了，就能拿到。不过我都试过了，确实是一个线程，但是还是拿不到。<br/> 换个思路：因为我想拿Request对象里的Id嘛，所以，只要有Request的id就行，不必过于执着一定要用ThreadLocal来存，因此，我这里选择注入一下HttpServletRequest对象来解决这个问题。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\58b8b8d5442a4da29ef667430a521262.png\"/></p>\n<h1><a id=\"_368\"></a>菜品页面</h1>\n<h2><a id=\"_369\"></a>菜品分类</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2c38b870546f49bd9a9d00572c2f1578.png\"/></p>\n<p>涉及的表有分类表category<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5c9af552c151402d99d419b44601110a.png\"/><br/> 业务流程<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0e55226139a848f4ba8a792c62a6feb3.png\"/></p>\n<h3><a id=\"_376\"></a>新增菜品分类</h3>\n<p>请求方式是Post请求<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d43ee4cb2aeb4259abe4129cb1672978.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\dc4cdb56b1ff40039d61b044f0259ea4.png\"/><br/> 控制器位置：<code>com.cc.controller.CategoryController (save)</code></p>\n<h3><a id=\"_380\"></a>菜品分类展现</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9dc65e03155d4e29b1dd85b73e79468c.png\"/><br/> 还是那几步</p>\n<ol><li>创建分页构造器 Page pageInfo = new Page(第几页,每页几条数据);</li><li>如果有需要条件过滤的加入条件过滤器LambaQueryWarpper</li><li>注入的service对象（已经继承MP的BaseMapper接口）去调用Page对象<br/> service对象.page(分页信息,条件过滤器)</li><li>返回结果就可以了</li></ol>\n<p>分页查询位置：<code>com.cc.controller.CategoryController.page</code></p>\n<h3><a id=\"_391\"></a>删除菜品分类</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d3c5ede5188a46caa8bef24e4c14b9fb.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e35caef5f5d8421aae24cfc2832fe3d0.png\"/><br/> 普通版本，没有考虑分类有关联的情况<br/> <img alt=\"在这里插入图片描述\" src=\"image\\62d820a820634bcc841b41bcc0bc3987.png\"/><br/> 完善一下，<mark><strong>如果当前菜品分类下有菜品的话，就不许删除</strong></mark><br/> 所以在删除之前要先做判断才可以删除，不符合条件的，我们要抛出异常进行提示<br/> 因为没有返回异常信息的类，我们这里要做一个自定义的专门返回异常信息的类<code>CustomerException</code><br/> 这个类的位置也在common包下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\40de841c594443398553b1509512fa5e.png\"/><br/> 因为我们之前创建了一个全局异常处理，也要用上，因为要拦截异常统一处理<br/> 还是<code>com.cc.common.GloableExceptionHandler</code><br/> 对抛出异常进行处理，就可以对新增的异常提供目标的拦截和异常通知<br/> <img alt=\"在这里插入图片描述\" src=\"image\\035d8b14a54f4cb1bffcd4c63673d0f8.png\"/><br/> 删除菜品分类的controller接口在：<code>com.cc.controller.CategoryController (delCategory)</code><br/> 因为业务特殊，且比较长，就分离出来把业务放在service包下<br/> service接口位置：<code>com.cc.service.impl.CategoryServiceImpl (removeCategory)</code></p>\n<h2><a id=\"_409\"></a>修改套餐信息</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e6c29b9b209c4881815bdffa24f571e8.png\"/><br/> 非常简单的CRUD，直接调用MP更新一下就行<br/> API位置</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cc<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span></span>CategoryController</span> <span class=\"token punctuation\">(</span>updateCategory<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_416\"></a>文件上传下载（重点）</h2>\n<h3><a id=\"_417\"></a>上传逻辑</h3>\n<p>第一次接触上传和下载的功能<br/> 文件上传逻辑（后端）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6fddfbb6992645358dd6f7fc9e7ed79d.png\"/><br/> 参数名有要求的<br/> 接收的文件类型一定是 方法名(MultipartFile 前端上传的文件名称)<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dee0540b7de5467ea6695e058a833b7f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b0f446d645654cd89577b9ba0a369f34.png\"/><br/> 所以后端的接收名字也得改为file<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8d04a387872f43f199fadcd1d2c79090.png\"/></p>\n<h3><a id=\"_427\"></a>上传逻辑实现</h3>\n<p>具体的存储路径写在配置文件里了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\57186bd868ce4e8fadf0090dd495c9ce.png\"/><br/> 用@Value注入到业务里就可以了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8e10ef4ade02405d86215df5653076f7.png\"/></p>\n<p>具体位置在<code>com.cc.controller.CommonController (upLoadFile)</code></p>\n<h3><a id=\"_435\"></a>下载逻辑</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9748d9f84a224b329f2035afcf31091d.png\"/><br/> <mark>图片回显功能</mark><br/> 用到了输入输出流<br/> 位置：<code>com.cc.controller.CommonController (fileDownload)</code></p>\n<h1><a id=\"_440\"></a>菜品管理页面</h1>\n<h2><a id=\"_441\"></a>新增菜品</h2>\n<h3><a id=\"_442\"></a>需求分析</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\307c50613cf9427eb8af9ca1edf35f10.png\"/><br/> 涉及表为dish和dish_flavor<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2bee4656682c429093d0b487f7453028.png\"/><br/> 开发逻辑<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0c69f61ce4e84e87b2f70cef256a597c.png\"/></p>\n<h3><a id=\"_448\"></a>新增实现</h3>\n<p>由于是多表的操作，MP直接干肯定不行，所以就把service层抽离出来进行处理</p>\n<p>还有，因为涉及两张表，这里还要加入事务进行控制，防止多表操作崩溃</p>\n<pre><code class=\"prism language-java\">多表操作只能一个一个来，MP没有办法一次性操作多张表\n因为涉及到多表的问题，所以还要加入注解来处理事务\n<span class=\"token annotation punctuation\">@Transactional</span> 开启事务\n<span class=\"token annotation punctuation\">@EnableTransactionManagement</span> 在启动类加入，支持事务开启\n</code></pre>\n<p>Controller位置：<code>com.cc.controller.DishController (addDish)</code><br/> Service位置：<code>com.cc.service.DishService </code><br/> ServiceImpl位置：<code>com.cc.service.impl.DishServiceImpl (addDishWithFlavor)</code></p>\n<h3><a id=\"_462\"></a>新增菜品之获取菜品种类</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\260620e272564731a10cf74b24d47b95.png\"/><br/> 从前端接收一个type=1的标注，目的是在分类表中，菜品分类是1，套餐分类是2，把二者区分开，获取所有的菜品类型<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c139415e958e4a4d81a9687d3f04a524.png\"/><br/> 位置：<code>com.cc.controller.CategoryController （listCategory）</code></p>\n<h3><a id=\"_468\"></a>菜品分页</h3>\n<p>顺手把菜品分页也做了，不写太多了，位置在：<code>com.cc.controller.CategoryController （dishPage）</code><br/> 记录一个知识点，如果说后端没有类和前端要的数据对应，那么自己就可以封装一个类来对前端特殊需要的数据进行封装</p>\n<h2><a id=\"DTO_472\"></a>DTO对象</h2>\n<p>这个类可以是对一些实体类进行扩展，继承于某个父类，再添加一些内容<br/> 比如Dish和DishDto<br/> DishDto就继承于Dish类，并在此基础上进行了扩展<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c20e2473b88b49f684764ddab99f9cfb.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a365d359125f498799f4b96a8e43fd0a.png\"/></p>\n<h2><a id=\"_478\"></a>更新菜品信息</h2>\n<p>就是个update<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e48ab4407978498d8321be25c5da40a0.png\"/><br/> 逻辑<br/> <img alt=\"在这里插入图片描述\" src=\"image\\31c8e202fea94bcf8a775644996a6cc5.png\"/><br/> 注意，这里回显数据是要用DishDto，因为前端要显示口味等信息，这里如果用Dish是无法完美显示的，所以要用DishDto</p>\n<h3><a id=\"_484\"></a>回显填充查询</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7fd4eb56b06542b490e056bc8989a12c.png\"/></p>\n<p>除此之外，这是个多表联查，用MP肯定不行，得自己写<br/> Controller位置：<code>com.cc.controller.DishController (updateDish)</code><br/> Service位置：<code>com.cc.service.DishService </code><br/> ServiceImpl位置：<code>com.cc.service.impl.DishServiceImpl</code></p>\n<h3><a id=\"_491\"></a>更新实现</h3>\n<p>实际上就是两个表联动更新和删除操作，所以MP直接操作是不可以的，所以要在Service层自己再封装一个删除方法，给Controller层调用删除就行<br/> 对于Dish对象可以直接进行更新，因为DishDto是Dish的子类<br/> 因此可以调用DishService的update方法传入DishDto对象，来实现Dish的更新<br/> Controller位置：<code>com.cc.controller.DishController (updateDish)</code> 确实和上面那个一样，因为请求方式不一样<br/> Service位置：<code>com.cc.service.DishService </code><br/> ServiceImpl位置：<code>com.cc.service.impl.DishServiceImpl (updateDishWithFlavor)</code></p>\n<h3><a id=\"_499\"></a>其他功能</h3>\n<p>完成一些小功能的开发<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b4b59c021748427c87fa6edc48619920.png\"/></p>\n<h4><a id=\"_502\"></a>停售功能</h4>\n<p>就是把数据库的status值更新一下，两个路径，一个启售，一个停售<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f1da740301ed403399148b6d9afb31f5.png\"/><br/> 停售请求路径<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2969987e765b4a8e8b4fd71b772bcfa0.png\"/><br/> 如果状态不一样了，会从停售变成启售，同时对应的请求路径也不一样<br/> <img alt=\"在这里插入图片描述\" src=\"image\\335331ee558541e089128ff2b36faa6e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f3b5006617a144c2a50cf48e91daf7db.png\"/><br/> Controller位置：<code>com.cc.controller.DishController (updateStatusStop)</code>停止<br/> Controller位置：<code>com.cc.controller.DishController (updateStatusStart)</code>启动</p>\n<h4><a id=\"_512\"></a>删除功能</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2e291e2e9a5941dbafb90caed4c894a2.png\"/><br/> 菜品删除功能<br/> 完成逻辑删除，不是真删<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2b84f5bc3cd54e1997a87f5768f0b48a.png\"/><br/> 位置：<br/> Controller位置：<code>com.cc.controller.DishController (deleteDish)</code>停止</p>\n<h1><a id=\"_519\"></a>套餐页面</h1>\n<p>实际上就是一组菜品的集合</p>\n<h2><a id=\"_521\"></a>新增套餐概述</h2>\n<p>涉及到的数据库<br/> <img alt=\"在这里插入图片描述\" src=\"image\\490ee26fc870424092c6f06b3b637de2.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\6ab0bc680c2d40d48da71becdf139330.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\458f7e16da474362ad0f5b49656bdc06.png\"/><br/> 导入SetmealDto<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9f5bd7dfcecc4c5a95d3ce1a48358980.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0bb88c91dfba4c759e8cca3eb574682e.png\"/></p>\n<h2><a id=\"_530\"></a>新增套餐之菜品列表</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7b242922f194454cbce663c939c19fe8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\fd6a01bbfbee43a1b7ff6b420815ef7f.png\"/><br/> Controller位置：<code>com.cc.controller.DishController (listCategory)</code></p>\n<h2><a id=\"_534\"></a>新增套餐实现</h2>\n<p>和新增菜品差不多，这里也是多表的操作<br/> Controller位置：<code>com.cc.controller.SetmealController (saveSetmeal)</code><br/> Service位置：<code>com.cc.service.SetmealService</code><br/> ServiceImpl位置：<code>com.cc.service.impl.SetmealServiceImpl(saveWithDish)</code></p>\n<h2><a id=\"_539\"></a>套餐分页</h2>\n<p>这里的套餐分页和以往不同，设计到了多表内容<br/> <img alt=\"在这里插入图片描述\" src=\"image\\28b34889b2e4467c9e3e4a79aa3d2d18.png\"/><br/> 套餐分页Controller位置：<code>com.cc.controller.SetmealController.pageList</code><br/> 套餐Mapper接口位置：<code>com.cc.mapper.SetmealMapper</code><br/> Mapper文件位置：<code>resource.mapper.SetmealMapper</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a02a17ef6b8648a59e2b90ef9ec70a3f.png\"/></p>\n<h2><a id=\"_546\"></a>更新套餐</h2>\n<p>添加套餐和更新套餐是几乎完全一致的，字段巴拉巴拉的都一样<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5bf7c40f7b9147b7a093da18ae860952.png\"/><br/> 但是注意，修改套餐的话，需要先对菜品页面进行填充，这一页都是需要填充满要修改的菜品信息的。<img alt=\"在这里插入图片描述\" src=\"image\\07c01da9636d4643acea8689f2579f82.png\"/><br/> 先发请求，一看就是Restful风格请求<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cb797ab490434dd2ad5de3e282e3f4c4.png\"/><br/> 获取套餐Controller位置：<code>com.cc.controller.SetmealController.getSetmal</code></p>\n<h2><a id=\"_553\"></a>更新销售状态</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\53db02cdb6fd4574b2471bdaf7825d78.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f2158ec7d2924b2eb17e2ef7b92fc6f3.png\"/><br/> 和之前一个业务逻辑很像，不想多赘述了，直接放接口位置<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bb10511b3fd14b398095865065700680.png\"/>Controller位置：<code>com.cc.controller.SetmealController (startSale/stopSale)</code></p>\n<h2><a id=\"_558\"></a>删除套餐</h2>\n<p>可以单独删，也可以批量删，接口是万金油，都能接，主要看传来的数据是几个<br/> <img alt=\"在这里插入图片描述\" src=\"image\\734b880bdf304e70bb9376ecebcd3d15.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\730459957d464af3827df49084205353.png\"/><br/> 接口<br/> <img alt=\"在这里插入图片描述\" src=\"image\\678ea2f5eb194625a05567061bba5ad0.png\"/><br/> == 多表删除，在Controller直接实现不太现实，所以要在Service把业务写好==<br/> Controller位置：<code>com.cc.controller.SetmealController (deleteSetmeal)</code><br/> Service位置：<code>com.cc.service.SetmealService</code><br/> ServiceImpl位置：<code>com.cc.service.impl.SetmealServiceImpl(removeWithDish)</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\bb4351bafe314861b6c775620f39641e.png\"/></p>\n<h1><a id=\"_569\"></a>前台开发（手机端）</h1>\n<h1><a id=\"_570\"></a>账户登陆</h1>\n<h2><a id=\"_571\"></a>短信发送</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6db71e2024264927a59a3ae59bca5890.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\56cadd94e4de4536aec20ff921842039.png\"/><br/> <a href=\"https://blog.csdn.net/qq_55106682/article/details/121920826\">阿里云短信业务教程</a></p>\n<h3><a id=\"_575\"></a>代码实现</h3>\n<p><a href=\"https://help.aliyun.com/document_detail/112148.html\">官方文档地址</a><br/> 导入Maven</p>\n<pre><code class=\"prism language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>com<span class=\"token punctuation\">.</span>aliyun<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n  <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>aliyun<span class=\"token operator\">-</span>java<span class=\"token operator\">-</span>sdk<span class=\"token operator\">-</span>core<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n  <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">4.5</span><span class=\"token number\">.16</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>com<span class=\"token punctuation\">.</span>aliyun<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>aliyun<span class=\"token operator\">-</span>java<span class=\"token operator\">-</span>sdk<span class=\"token operator\">-</span>dysmsapi<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">1.1</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ca8d01eaf61a485a9e0edae0c0307c3a.png\"/><br/> 导入短信登陆的工具类，把ACCESSKeyID和Secret更换到位就行<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fab29b651545452b8aaf515717a3244d.png\"/></p>\n<h2><a id=\"_594\"></a>验证码发送</h2>\n<p>数据模型user表，手机验证码专用的表<br/> <img alt=\"在这里插入图片描述\" src=\"image\\582420e32f9449699765ad9db8f665bc.png\"/><br/> 开发流程<br/> <img alt=\"在这里插入图片描述\" src=\"image\\03e0ad86bbda4229b8985e6644e2e5f7.png\"/><br/> 修改拦截器，放行操作<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2c136ec0905248328f25be7e137b2da0.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\15b21dad09be44bfa030984f5f4c1731.png\"/><br/> controller位置：<code>com.cc.controller.UserController （sendMsg）</code><br/> 发送完还需要验证，验证就是另一个login了</p>\n<h2><a id=\"_604\"></a>用户登陆</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\16f3f2b8f68948b0b4f2e01133adc6ce.png\"/><br/> controller位置：<code>com.cc.controller.UserController （login）</code><br/> 这里登陆还涉及到过滤器放行的功能，不要忘记了，把用户id存入session，过滤器会进行验证<br/> 过滤器<br/> <img alt=\"在这里插入图片描述\" src=\"image\\16d1b1cf6fa54b408d9b5bcd495962f5.png\"/><br/> controller<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7da50768c0b043f3a9a5f3dbce6915c1.png\"/></p>\n<h1><a id=\"_612\"></a>前台页面</h1>\n<h2><a id=\"_613\"></a>导入用户地址簿</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\732d6d4d8bba4911b903055d7a2003cf.png\"/><br/> 地址表<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e45d3cd4c91e4619a21a3342d4683508.png\"/><br/> 这里直接导入现成的AddressBookController，没有自己写</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cc<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span></span>AddressBookController</span>\n</code></pre>\n<h2><a id=\"_621\"></a>菜品展示</h2>\n<p>逻辑梳理<br/> <img alt=\"在这里插入图片描述\" src=\"image\\db2983fb1a8a46bc85f4836dae41a24c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c7e3567ea3f94b718e33ba680e573121.png\"/><br/> 修改DishController的list方法，来符合前台请求的要求<br/> controller位置：<code>com.cc.controller.DishController （listCategory）</code><br/> 套餐内菜品Controller：<code>com.cc.controller.SetmealController （list）</code></p>\n<h2><a id=\"_628\"></a>购物车</h2>\n<p>把菜品加入购物车<br/> <img alt=\"在这里插入图片描述\" src=\"image\\159ef74addd64f60bfa9d9a44bf22d64.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3b7b1d5d90d949cb94c6c4f77a2f9d96.png\"/><br/> 逻辑梳理<br/> <img alt=\"在这里插入图片描述\" src=\"image\\48b1358d65a8418689ada067bc6fbdd2.png\"/><br/> 注意，这里不需要后端去管总价的计算，就是单价*数量的这个操作，不是后端的内容。前端在展示的时候自己就计算了。<br/> 位置：<code>com.cc.controller.ShoppingCartController （add）</code></p>\n<h2><a id=\"_637\"></a>下单</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\37b2f6bb4b2e4d82942e38ceea4bbc78.png\"/><br/> 对应的两个表，一个是orders表，另一个是orders_detail表</p>\n<p>orders表<br/> <img alt=\"在这里插入图片描述\" src=\"image\\37f1f4d9aec2474ab3578ad01062abf9.png\"/><br/> orders_detail表<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d07d325b341841e787117d1f12d727e0.png\"/><br/> 交互流程<br/> <img alt=\"在这里插入图片描述\" src=\"image\\04bfdd8093cb41f7956332bb1561e12f.png\"/><br/> 业务比较复杂，在Service里写的<code>com.cc.service.impl.OrdersServiceImpl</code></p>\n<p>至此基础部分完成，开始对项目性能进行优化</p>\n<h1><a id=\"_651\"></a>小知识点总结</h1>\n<h3><a id=\"RequestBody_652\"></a>@RequestBody的使用</h3>\n<p>只有传来的参数是Json才能用RequestBody接收，如果不是Json的情况（比如那种？key=value&amp;key=value）是不可以用的，会400错误<br/> <a href=\"https://blog.csdn.net/weixin_44062380/article/details/116103642\">关于RequestBody何时使用</a></p>\n<h1><a id=\"_659\"></a>缓存优化</h1>\n<p>基于Redis进行缓存优化<br/> <img alt=\"在这里插入图片描述\" src=\"image\\017c0aab4eb345d68ba9a5a309e78c7a.png\"/></p>\n<h2><a id=\"_662\"></a>环境搭建</h2>\n<h3><a id=\"Redis_663\"></a>Redis进行配置</h3>\n<p>加入Pom文件</p>\n<pre><code class=\"prism language-xml\">        <span class=\"token comment\">&lt;!--导入Redis依赖--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>加入Redis配置类</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CachingConfigurerSupport</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> redisTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//默认的Key序列化器为：JdkSerializationRedisSerializer</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>yml中加入配置<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a737f91d8934469ca405f2acf279272d.png\"/></p>\n<h2><a id=\"_690\"></a>短信验证码、登陆优化</h2>\n<p>给验证码加入有效时间的验证，设置好短信验证码的有效时间<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dd9f7fcb4dd948b380008dd1d769e535.png\"/><br/> 如果登陆成功，就自动删除缓存中的验证码<br/> 优化位置：com.cc.controller.UserController sendMsg和login<br/> 注入RedisTemplete<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e881a9dc80a740aab43c8bc30f45a91f.png\"/><br/> 针对验证码进行优化<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4139a4aebf384f8e958f0587c7fe4acb.png\"/><br/> 针对登录后进行优化<br/> login方法中<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ccc12a60c924407bb8c859aa66b61c38.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\24b7a6e20b7840e1a868dea4be2f0787.png\"/><br/> 这里过滤器也要改，因为登陆的id数据由session变成了redis存放，所以要把过滤器的相关部分进行改造</p>\n<pre><code>com.cc.filter.LoginCheckFilter\n</code></pre>\n<p>同样要先注入RedisTemplate<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bb4030b56bd64c6dbdc5633c67e4bbfb.png\"/></p>\n<h2><a id=\"_709\"></a>缓存前台菜品数据</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\32925b5c084942ecb5f5f9aa153a6d96.png\"/><br/> 缓存思路，要保证缓存数据库和DBMS内的数据保持同步，避免读到脏数据（没更新的数据）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ed16b6270e734adaaf78058373894604.png\"/><br/> 对DishController进行优化，加入了缓存<br/> 再次访问可以发现，如果已经缓存过了当前的菜品分类，就不会再查数据库了</p>\n<h3><a id=\"_715\"></a>更新菜品同时更新缓存</h3>\n<p>保证少出现脏数据，所以加入清理缓存，不及时清理的话，新数据保存上来，列表数据库无法同步更新。就会出现问题。<br/> 这里清理精确数据。大面积清缓存也是比较费性能的<br/> <mark>这种就是全清理</mark><br/> <img alt=\"在这里插入图片描述\" src=\"image\\60b7f47bf7d24be0bec55a2309e1f227.png\"/><br/> <mark>这种是精确清理</mark><br/> <img alt=\"在这里插入图片描述\" src=\"image\\958c3fd2cb824012af93adfd54d4ea24.png\"/></p>\n<h2><a id=\"SpringCache_722\"></a>SpringCache</h2>\n<h3><a id=\"_723\"></a>简介</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a59b7272acce47e98a6bd7505772e071.png\"/></p>\n<h3><a id=\"SpringCache_725\"></a>SpringCache常用注解及功能</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\768c769e2725422f88530feca96d70b8.png\"/></p>\n<h3><a id=\"_727\"></a>快速起步</h3>\n<p>启动类上要加入<code>@EnableCaching</code>注解，启用缓存框架<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d29b058bff0d4269aa35202a9e35143d.png\"/></p>\n<h4><a id=\"CachePut_730\"></a>@CachePut注解</h4>\n<p>缓存方法返回值，缓存一条或者多条数据<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0d18d4dcaad54cc7814e3fa1a82ed8c8.png\"/></p>\n<h4><a id=\"CacheEvict_733\"></a>@CacheEvict注解</h4>\n<p>删除缓存<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ae87712409804775b614bebb226e8896.png\"/></p>\n<h4><a id=\"Cacheable_737\"></a>@Cacheable注解</h4>\n<p>先看看Spring是否已经缓存了当前数据，如果已经缓存那么直接返回。<br/> 如果没有缓存就直接缓存到内存里<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c2e3aa34ea3442d894543d105ebb9b41.png\"/><br/> 一些特殊情况，condition属性和Unless属性<img alt=\"在这里插入图片描述\" src=\"image\\ec27f124b8c047e08a8b95af613ed922.png\"/></p>\n<p>前面都是用SpringCache自带的缓存容器，性能肯定比不了Redis<br/> 所以现在开始引入Redis作为SpringCache缓存的产品<br/> 切换为Redis作为缓存产品</p>\n<h4><a id=\"SpringCacheRedis_746\"></a>SpringCache-Redis</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8dae4993b8494af598d870917e46ba56.png\"/><br/> 导入jar包<br/> <img alt=\"在这里插入图片描述\" src=\"image\\afdfe6133e254348a03303db222f1762.png\"/><br/> 注入相对应的缓存产品Manager就可以了，这里以RedisManager为例<br/> <img alt=\"在这里插入图片描述\" src=\"image\\69344c2b79044bb7a354d96cb148d495.png\"/></p>\n<h2><a id=\"SpringCacheRedis_752\"></a>利用SpringCache-Redis来缓存套餐数据</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ffd8677c072d4697971562d1a96134bc.png\"/><br/> 启动类上要加入<code>@EnableCaching</code>注解，启用缓存框架<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d29b058bff0d4269aa35202a9e35143d.png\"/><br/> 加入注解时的坑<br/> 这里相当于是从Return中拿到Setmeal中的属性，但是Return时的数据是Result封装的Setmeal数据，显然无法完成序列化，这里也是需要对Result类进行序列化的改造<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f1309a8146514e37bb8078ef9b0cc7ca.png\"/><br/> 继承序列化类，使其可以序列化<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f25595d9069441d1adf22a469e842c09.png\"/><br/> =<mark>此时就完成了缓存的优化，此时如果缓存中有当前value名字的缓存，就自动返回，如果没有就查询一下。当前缓存自动过期的时间在yml里面有详细配置</mark></p>\n<p>保存套餐方法缓存优化<br/> 一保存套餐，对应的缓存就得删除，因为数据更新了要重新获取<br/> 还有更新套餐，理由同上<br/> 删除方法要加<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0896df7570f843a19afb69975c4a328f.png\"/><br/> 保存方法也要加<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3206a5c50388428ea4809425d083bc72.png\"/></p>\n<h1><a id=\"_771\"></a>数据库优化</h1>\n<h2><a id=\"MySQL_772\"></a>MySQL读写分离</h2>\n<p>将单点数据库改成分布式的数据库服务器<br/> 主写从读。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\95b2e61b3c594adeac1732bcc6d719d6.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\be32928754c8409785c39f857ee78381.png\"/></p>\n<h2><a id=\"MySQL_779\"></a>MySQL主从复制搭建</h2>\n<h3><a id=\"_780\"></a>主库设置</h3>\n<p>主从复制架构图<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c72d940c5ff143ea834e53e05fb4db83.png\"/><br/> 以上就可以做到主库数据和从库数据保持同步</p>\n<p>对主库进行配置<br/> Linux改法<br/> <img alt=\"在这里插入图片描述\" src=\"image\\71faca81d5524f7f81249639ec421334.png\"/></p>\n<pre><code class=\"prism language-sql\">log<span class=\"token operator\">-</span>bin<span class=\"token operator\">=</span>mysql<span class=\"token operator\">-</span>bin <span class=\"token comment\">#启动二进制</span>\nserver<span class=\"token operator\">-</span>id<span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token comment\">#唯一id</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\07f64dd342a54a02bb9db8055535c02d.png\"/></p>\n<p>windows改法</p>\n<p>在mysql安装路径下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ddcf86e4bfc344c3874a528909018c4d.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d85b28a9fe5c4fdebb9bef5d96717860.png\"/></p>\n<p>修改好了重启MySQL</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\841a999f27fe4910baf41c7ba6728ad7.png\"/><br/> windows版本的重启教程在这里<br/> <a href=\"https://blog.csdn.net/weixin_31444279/article/details/113223859\">重启mysql</a></p>\n<p>=======================================================</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\06539e930d864f08831019eed03e50c0.png\"/></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">REPLICATION</span> SLAVE <span class=\"token keyword\">ON</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token keyword\">to</span><span class=\"token string\">'xiaoming'</span><span class=\"token variable\">@'%'</span>identified <span class=\"token keyword\">by</span> <span class=\"token string\">'Root@123456'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里我把本地的MySQL作为主机，把阿里云作为从机<br/> 运行一下权限SQL<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bbbc91e5cd674f60a0e3765c1e3a477b.png\"/></p>\n<p>查看主机状态<code>show master status;</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\2c46f23083eb4d009cee681610f20467.png\"/></p>\n<h3><a id=\"_821\"></a>从库设置</h3>\n<p>从库这里选择了阿里云<br/> 还是先修改配置文件，加入端口id<br/> <img alt=\"在这里插入图片描述\" src=\"image\\59c47eb35c4748948c96ac6bf1a0eb17.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b8ac44ce50c546b5bfeb507a0ab7ef4f.png\"/><br/> 第二步还是从库重启（Linux中）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5f1f8347417441ccb00d15c08ff5cb5a.png\"/><br/> 第三部，设置连接到主机<br/> 运行SQL<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dda57b14af0845aca9056e4788a34fea.png\"/></p>\n<p>运行一下<br/> 具体的可以去从机用show master status查看</p>\n<pre><code class=\"prism language-sql\">change master <span class=\"token keyword\">to</span> master_host<span class=\"token operator\">=</span><span class=\"token string\">'ip'</span><span class=\"token punctuation\">,</span>master_user<span class=\"token operator\">=</span><span class=\"token string\">'xiaoming'</span><span class=\"token punctuation\">,</span>master_password<span class=\"token operator\">=</span><span class=\"token string\">'Root@123456'</span><span class=\"token punctuation\">,</span>master_log_file<span class=\"token operator\">=</span><span class=\"token string\">'mysql-bin.eo0001'</span><span class=\"token punctuation\">,</span>master_log_pos<span class=\"token operator\">=</span>主机的position\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1f88d8237d804843849777aa1c3e0f4e.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e9080c8d03a24206a4a00b553b1c9ade.png\"/><br/> <mark>这里我是两台服务器，一台docker安装的mysql（从机）<br/> 另一台是普通安装的mysql做主机，配置过程中遇到了很多问题，参考了下面的链接</mark><br/> <a href=\"https://blog.csdn.net/xizhen2791/article/details/123660049\">参考教程</a></p>\n<p>一定一定记着上面从机连接命令运行成功后要启动从机也就是</p>\n<pre><code class=\"prism language-sql\">slave <span class=\"token keyword\">start</span>\n</code></pre>\n<p>最后运行<code>start slave</code>就算是执行成功了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cf6e9e14501149a197b7a6cc329cc1d0.png\"/><br/> 查看一下从机状态</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">show</span> slave <span class=\"token keyword\">status</span>\n</code></pre>\n<p>这样就算搭建好了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\54747e8178044d8c9f68a7ecf1862bb7.png\"/></p>\n<h3><a id=\"_860\"></a>测试</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e471059730274a98a3a6b2e71728724f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\dc067197d93b4799a37e5d51f28c5736.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\5657bb24170a4fbe8a9139b954934164.png\"/><br/> 到这里就算搭建完成了</p>\n<h3><a id=\"_867\"></a>遇到的问题</h3>\n<p>这里遇到的问题，连不上<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cbb888adff9c45be994e4087e528d9dc.png\"/><br/> 想本地当主机，外网当从机好像不太行，我就又弄了台服务器做读写分离</p>\n<p>搞到了从机之后，就开始配置，安装MySQL等等</p>\n<p>有的时候会提示io冲突，这是因为之前的从机没有关闭，关闭一下就可以了<br/> <code>stop slave</code> 一下 就可以运行了</p>\n<p>一个从机启动命令忘记了，改了一晚上<br/> 如果不运行从机启动就会变成这样<br/> <img alt=\"在这里插入图片描述\" src=\"image\\85ee4381b01c44ccb0777995ba042e46.png\"/></p>\n<h2><a id=\"_881\"></a>主写从读实战</h2>\n<h3><a id=\"_882\"></a>概述</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f141bcd96b9840bd8a4e1295055408a1.png\"/><br/> 难么如何去确定来的SQL应该分配到哪个库上，这个就要靠Sharding-jdbc框架来读写分离的分流处理<br/> <img alt=\"在这里插入图片描述\" src=\"image\\83f78cd07cd848de9c4b5abd422d4b91.png\"/></p>\n<h3><a id=\"_886\"></a>实战</h3>\n<p>步骤如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f72981dfa9204bab9545793d04bc2ed9.png\"/><br/> 导入Maven坐标</p>\n<pre><code class=\"prism language-sql\">        <span class=\"token operator\">&lt;</span>dependency<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>groupId<span class=\"token operator\">&gt;</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shardingsphere<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">&gt;</span>sharding<span class=\"token operator\">-</span>jdbc<span class=\"token operator\">-</span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">&gt;</span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span>RC1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><mark>配置yml文件</mark></p>\n<pre><code class=\"prism language-sql\">spring:\n  application:\n    name: ccTakeOut\n  shardingsphere:\n    datasource:\n      names:\n        master<span class=\"token punctuation\">,</span>slave\n      <span class=\"token comment\"># 主库（增删改操作）</span>\n      master:\n        <span class=\"token keyword\">type</span>: com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span>DruidDataSource\n        driver<span class=\"token operator\">-</span>class<span class=\"token operator\">-</span>name: com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>Driver\n        url: jdbc:mysql:<span class=\"token comment\">//121.89.200.204:3306/ruiji?characterEncoding=utf-8</span>\n        username: root\n        password: <span class=\"token number\">333</span>\n      <span class=\"token comment\"># 从数据源（读操作）</span>\n      slave:\n        <span class=\"token keyword\">type</span>: com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span>DruidDataSource\n        driver<span class=\"token operator\">-</span>class<span class=\"token operator\">-</span>name: com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>Driver\n        url: jdbc:mysql:<span class=\"token comment\">//121.36.51.170:3306/ruiji?characterEncoding=utf-8</span>\n        username: root\n        password: <span class=\"token number\">333</span>\n    masterslave:\n      <span class=\"token comment\"># 读写分离配置</span>\n      <span class=\"token keyword\">load</span><span class=\"token operator\">-</span>balance<span class=\"token operator\">-</span><span class=\"token keyword\">algorithm</span><span class=\"token operator\">-</span><span class=\"token keyword\">type</span>: round_robin <span class=\"token comment\">#轮询（如果有多个从库会轮询着读）</span>\n      <span class=\"token comment\"># 最终的数据源名称</span>\n      name: dataSource\n      <span class=\"token comment\"># 主库数据源名称</span>\n      master<span class=\"token operator\">-</span><span class=\"token keyword\">data</span><span class=\"token operator\">-</span>source<span class=\"token operator\">-</span>name: master\n      <span class=\"token comment\"># 从库数据源名称列表，多个逗号分隔</span>\n      slave<span class=\"token operator\">-</span><span class=\"token keyword\">data</span><span class=\"token operator\">-</span>source<span class=\"token operator\">-</span>names: slave\n    props:\n      <span class=\"token keyword\">sql</span>:\n        <span class=\"token keyword\">show</span>: <span class=\"token boolean\">true</span> <span class=\"token comment\">#开启SQL显示，默认false</span>\n  main:\n    allow<span class=\"token operator\">-</span>bean<span class=\"token operator\">-</span>definition<span class=\"token operator\">-</span>overriding: <span class=\"token boolean\">true</span> <span class=\"token comment\">#允许bean数据源覆盖</span>\n\n</code></pre>\n<p>解读一下yml配置<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7e5c203773a04fdd9b9a096659db9749.png\"/><br/> <strong>允许Bean定义覆盖很重要</strong></p>\n<h3><a id=\"_940\"></a>测试</h3>\n<p>启动项目，可以看到，读写操作分别到达了不同的主机上<br/> 读写分离测试<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f647f0ab726e48f7a4ae0445970980d2.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\fd937b8b481946bba8325127319d22f9.png\"/></p>\n<h1><a id=\"Nginx_945\"></a>Nginx部署</h1>\n<p><a href=\"https://blog.csdn.net/weixin_46906696/article/details/125569407?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125569407%22,%22source%22:%22weixin_46906696%22%7D&amp;ctrtid=O48Rx\">Nginx笔记</a></p>\n<h1><a id=\"_948\"></a>前后端分离开发</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5ae7a5c5f65049e698b47a060c9b9ac8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\9b200bae5d514949b1fed2860598906a.png\"/></p>\n<h2><a id=\"_951\"></a>开发流程</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9d4d3ca75521432a999246d1ff68cea2.png\"/></p>\n<h2><a id=\"YApi_953\"></a>YApi</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b56ddabf9931461dab56dafdd5614088.png\"/></p>\n<h2><a id=\"Swagger_956\"></a>Swagger（常用）</h2>\n<p>主要作用就是帮助后端人员生成后端接口文档的<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7352d150c2b64d3e9c84f15ce56c7c1d.png\"/><br/> 使用方式<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b22b2f0ae0c04a4db76fe8e8fa047615.png\"/><br/> 导入坐标</p>\n<pre><code class=\"prism language-sql\">        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token comment\">--knife4j接口管理--&gt;</span>\n        <span class=\"token operator\">&lt;</span>dependency<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>groupId<span class=\"token operator\">&gt;</span>com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>xiaoymin<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">&gt;</span>knife4j<span class=\"token operator\">-</span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">&gt;</span><span class=\"token number\">3.0</span><span class=\"token number\">.2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>导入配置类<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8efe0ecd0f32415296336792c002cb93.png\"/><br/> 具体配置位置<code>com.cc.config.WebMvcConfig</code></p>\n<p>启动服务，访问路径+doc.html<br/> 进入之后就可以对已有的接口进行管理了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\28fa1199bed745909c1ab3566ef46517.png\"/></p>\n<h2><a id=\"Swagger_980\"></a>Swagger常用注解</h2>\n<p>直接生成的注解内容并不是很完善<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7b2482af3df7429ea060c692c9778524.png\"/><br/> Swagger常用注解<br/> <img alt=\"在这里插入图片描述\" src=\"image\\96378f7383e34de1a6ef9f7785989c2d.png\"/><br/> 以实体类为例<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0fbe9d3e59ee47d0b5a9f8d6b21609af.png\"/><br/> Controller上的注解<br/> <img alt=\"在这里插入图片描述\" src=\"image\\920dcfe50e8544f0ab5a42581722b3e3.png\"/><br/> 以上均为示例，最终完善好注解，文档会更好用，更详细。</p>\n<h1><a id=\"_991\"></a>项目部署</h1>\n<h2><a id=\"_992\"></a>前端</h2>\n<p>前端作为一个工程，同样需要打包，打包完为dist目录<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a2cee8e970754767bf5efab50eb3d065.png\"/><br/> 把这个dist目录，扔进Nginx里HTML文件夹就可以了，也就是那个静态资源<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e05ae7caf6ce4c82b5dd35e96ba97059.png\"/><br/> 传上来不算完，还要好好配置一下<br/> 一个是静态资源，另一个是反向代理</p>\n<h3><a id=\"_999\"></a>静态资源配置</h3>\n<p>先配置静态资源<br/> <img alt=\"在这里插入图片描述\" src=\"image\\85400722cc984e53bc62af167a80ba13.png\"/></p>\n<h3><a id=\"_1002\"></a>请求代理配置</h3>\n<p>重启Nginx，测试一下，访问。<br/> 随便一个请求可以看到，带了前缀<br/> <img alt=\"在这里插入图片描述\" src=\"image\\77debb51210c4259a4c59d76778d4f9b.png\"/><br/> 后端项目给的端口是9001<br/> 请求路径为：http://www.ccsmile.fun:9001/api/employee/login<br/> 我们后端是没有这个api的前缀的<br/> 通过重写url，就可以把<br/> <code>http://www.ccsmile.fun:9001/api/employee/login</code><br/> 变成<br/> <code>http://www.ccsmile.fun:9001/employee/login</code>的请求地址，这样就完成了请求代理转发操作<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cebfe85548264cdaafb056fb8a16c5b9.png\"/><br/> 配置文件如下</p>\n<pre><code class=\"prism language-sql\">server{\n  listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n  server_name localhost<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#静态资源配置</span>\n  location <span class=\"token operator\">/</span>{\n    root html<span class=\"token operator\">/</span>dist<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">index</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n  }\n<span class=\"token comment\">#请求转发代理，重写URL+转发</span>\n  location <span class=\"token operator\">^</span><span class=\"token operator\">~</span> <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>{\n          rewrite <span class=\"token operator\">^</span><span class=\"token operator\">/</span>api<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>$ <span class=\"token operator\">/</span>$<span class=\"token number\">1</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          proxy_pass http:<span class=\"token comment\">//后端服务ip:端口号;</span>\n  }\n<span class=\"token comment\">#其他</span>\n  error_page <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span> <span class=\"token operator\">/</span><span class=\"token number\">50</span>x<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n  location <span class=\"token operator\">=</span> <span class=\"token operator\">/</span><span class=\"token number\">50</span>x<span class=\"token punctuation\">.</span>html{\n      root html<span class=\"token punctuation\">;</span>\n  }\n}\n</code></pre>\n<p>最后保存文件，重启Nginx，就配置完成了<br/> 不过还是不知道为啥不太好用，还有待解决，实在不行就在后端上加入接收请求前缀就好了</p>\n<h2><a id=\"_1039\"></a>后端</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\23e1f1e20f0b420ca3fa8856aa07efaa.png\"/><br/> 上传脚本，自动拉取最新脚本<br/> 这样在开发端和Linux端就通过Gitee间接实现同步了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c2cf53f4a6044202b5e5b7136a9bc0ef.png\"/><br/> 脚本内容</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">#!/bin/sh</span>\necho <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span>\necho  自动化部署脚本启动\necho <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span>\n\necho 停止原来运行中的工程\nAPP_NAME<span class=\"token operator\">=</span>reggie_take_out\n\ntpid<span class=\"token operator\">=</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk '{print $2}'<span class=\"token punctuation\">`</span></span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> ${tpid} <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    echo <span class=\"token string\">'Stop Process...'</span>\n    <span class=\"token keyword\">kill</span> <span class=\"token operator\">-</span><span class=\"token number\">15</span> $tpid\nfi\nsleep <span class=\"token number\">2</span>\ntpid<span class=\"token operator\">=</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk '{print $2}'<span class=\"token punctuation\">`</span></span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> ${tpid} <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    echo <span class=\"token string\">'Kill Process!'</span>\n    <span class=\"token keyword\">kill</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span> $tpid\n<span class=\"token keyword\">else</span>\n    echo <span class=\"token string\">'Stop Success!'</span>\nfi\n\necho 准备从Git仓库拉取最新代码\ncd <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span><span class=\"token keyword\">local</span><span class=\"token operator\">/</span>javaapp<span class=\"token operator\">/</span>reggie_take_out\n\necho 开始从Git仓库拉取最新代码\ngit pull\necho 代码拉取完成\n\necho 开始打包\noutput<span class=\"token operator\">=</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>mvn clean package -Dmaven.test.skip=true<span class=\"token punctuation\">`</span></span>\n\ncd target\n\necho 启动项目\nnohup java <span class=\"token operator\">-</span>jar reggie_take_out<span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span><span class=\"token keyword\">SNAPSHOT</span><span class=\"token punctuation\">.</span>jar <span class=\"token operator\">&amp;</span><span class=\"token operator\">&gt;</span> reggie_take_out<span class=\"token punctuation\">.</span>log <span class=\"token operator\">&amp;</span>\necho 项目启动完成\n\n\n</code></pre>\n<p>执行脚本就OK了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\079d294160f94539b7b3db5d09af969e.png\"/></p>\n<p>记得修改yml文件中的部分内容，比如文件路径等等信息~<br/> 完结撒花啦</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}