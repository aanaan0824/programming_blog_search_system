{"blogid": "120209948", "writerAge": "码龄1年", "writerBlogNum": "52", "writerCollect": "239", "writerComment": "190", "writerFan": "492", "writerGrade": "4级", "writerIntegral": "1122", "writerName": "ZDDWLIG", "writerProfileAdress": "writer_image\\profile_120209948.jpg", "writerRankTotal": "43290", "writerRankWeekly": "278457", "writerThumb": "321", "writerVisitNum": "56764", "blog_read_count": "6019", "blog_time": "于 2021-09-09 22:06:26 发布", "blog_title": "C语言qsort（）函数的使用（详解）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%E5%8F%82%E6%95%B0%E5%90%AB%E4%B9%89-toc\" style=\"margin-left:0px;\"><a href=\"#1.%E5%8F%82%E6%95%B0%E5%90%AB%E4%B9%89\" title=\"1.参数含义\">1.参数含义</a></p>\n<p id=\"1.%E9%A6%96%E5%85%83%E7%B4%A0%E5%9C%B0%E5%9D%80base-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E9%A6%96%E5%85%83%E7%B4%A0%E5%9C%B0%E5%9D%80base\" title=\"1.首元素地址base\">1.首元素地址base</a></p>\n<p id=\"2.%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0num-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0num\" title=\"2.元素个数num\">2.元素个数num</a></p>\n<p id=\"3.%E5%85%83%E7%B4%A0%E5%A4%A7%E5%B0%8Fsize-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E5%85%83%E7%B4%A0%E5%A4%A7%E5%B0%8Fsize\" title=\"3.元素大小size\">3.元素大小size</a></p>\n<p id=\"4.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%AF%94%E8%BE%83%E5%87%BD%E6%95%B0compar-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%AF%94%E8%BE%83%E5%87%BD%E6%95%B0compar\" title=\"4.自定义比较函数compar\">4.自定义比较函数compar</a></p>\n<p id=\"2.%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:0px;\"><a href=\"#2.%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F\" title=\"2.使用方式\">2.使用方式</a></p>\n<p id=\"1.%E5%A4%B4%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%A4%B4%E6%96%87%E4%BB%B6\" title=\"1.头文件\">1.头文件</a></p>\n<p id=\"2.compar%E7%9A%84%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:40px;\"><a href=\"#2.compar%E7%9A%84%E5%AE%9E%E7%8E%B0\" title=\"2.compar的实现\">2.compar的实现</a></p>\n<p id=\"3.%E6%95%B4%E4%BD%93%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:0px;\"><a href=\"#3.%E6%95%B4%E4%BD%93%E4%BB%A3%E7%A0%81\" title=\"3.整体代码\">3.整体代码</a></p>\n<hr id=\"hr-toc\"/>\n<p> qsort（）函数（quick sort）是八大排序算法中的快速排序，能够排序任意数据类型的数组其中包括整形，浮点型，字符串甚至还有自定义的结构体类型。</p>\n<h1 id=\"1.%E5%8F%82%E6%95%B0%E5%90%AB%E4%B9%89\">1.参数含义</h1>\n<pre><code>void qsort (void* base, size_t num, size_t size,int (*compar)(const void*,const void*));</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\20210909210153132.png\"/></p>\n<p> 上图是qsort函数各个参数的含义，让我们一个个来看。</p>\n<h2 id=\"1.%E9%A6%96%E5%85%83%E7%B4%A0%E5%9C%B0%E5%9D%80base\">1.首元素地址base</h2>\n<p>我们要排序一组数据，首先我们需要找到这组数据在哪，因此我们直接将首元素的地址传给qsort函数来确定从哪开始排序。</p>\n<h2 id=\"2.%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0num\">2.元素个数num</h2>\n<p>我们知道了从哪开始，也要知道在哪结束才能确定一组需要排序的数据，但是我们不方便直接将结尾元素的地址传入函数，因此我们将需要排序的元素的个数传给qsort函数来确定一组数据。</p>\n<h2 id=\"3.%E5%85%83%E7%B4%A0%E5%A4%A7%E5%B0%8Fsize\">3.元素大小size</h2>\n<p>我们知道qsort函数能排序任意数据类型的一组数据，因此我们用void*类型的指针来接收元素，但是我们知道void*类型的指针不能进行加减操作，也就无法移动，那么在函数内部我们究竟用什么类型的指针来操作变量呢？我们可以将void*类型的指针强制类型转换成char*类型的指针后来操作元素，因为char*类型的指针移动的单位字节长度是1个字节，我们只需要再知道我们需要操作的数据是几个字节就可以操作指针从一个元素移动到下一个元素，因此我们需要将元素大小传入qsort函数。</p>\n<h2 id=\"4.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%AF%94%E8%BE%83%E5%87%BD%E6%95%B0compar\">4.自定义比较函数compar</h2>\n<p>我们需要告诉qsort函数我们希望数据按照怎么的方式进行比较，比如对于几个字符串，我们可以比较字符串的大小（strcmp），也可以比较字符串的长度（strlen），因此我们要告诉qsort函数我们希望的比较方式，我们就需要传入一个比较函数compar就简写为cmp吧。</p>\n<h1 id=\"2.%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F\">2.使用方式</h1>\n<h2 id=\"1.%E5%A4%B4%E6%96%87%E4%BB%B6\">1.头文件</h2>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\20210909211942978.png\"/></p>\n<p> 要使用qsort函数我们首先需要引用一个头文件&lt;stdlib,h&gt;</p>\n<pre><code>#include &lt;stdlib.h&gt;</code></pre>\n<h2 id=\"2.compar%E7%9A%84%E5%AE%9E%E7%8E%B0\">2.compar的实现</h2>\n<p></p>\n<p>qsort函数给cmp函数规定了特定的参数。因此我们设计cmp函数时要严格遵守其参数设定。</p>\n<pre><code>int compar (const void* e1, const void* e2);</code></pre>\n<p>如果你要比较的数据是整形：</p>\n<pre><code>int cmp_int(const void* e1, const void* e2)\n{\n\treturn *(int*)e1 - *(int*)e2;\n}</code></pre>\n<p>如果你要比较的数据是浮点型：</p>\n<pre><code>int cmp_float(const void* e1, const void* e2)\n{\n\treturn (int)(*(float*)e1 - *(float*)e2);\n}</code></pre>\n<p>如果你要比较的是字符串的大小：</p>\n<pre><code>int cmp_str_size(const void* e1, const void* e2)\n{\n\treturn strcmp((char*)e1,(char*)e2);\n}</code></pre>\n<p>如果你要比较的是字符串的长度：</p>\n<pre><code>int cmp_str_len(const void* e1, const void* e2)\n{\n\treturn strlen((char*)e1)-strlen((char*)e2);\n}</code></pre>\n<p>如果你要比较的数据是结构体变量：</p>\n<pre><code>int cmp_by_age(const void*e1, const void*e2)\n{\n\treturn (int)(((stu*)e1)-&gt;weight - ((stu*)e2)-&gt;weight);\n}</code></pre>\n<p> 需要注意的是：返回结果一定要确保是整形，如果不是一定要强制类型转换成整形！</p>\n<h1 id=\"3.%E6%95%B4%E4%BD%93%E4%BB%A3%E7%A0%81\">3.整体代码</h1>\n<p>快速排序结构体变量示例：</p>\n<pre><code>#include &lt;stdlib.h&gt;\ntypedef struct stu\n{\n\t//char name;\n\tint age;\n\tfloat weight;\n\tdouble hight;\n}stu;\nint cmp_by_age(const void*e1, const void*e2)\n{\n\treturn (int)(((stu*)e1)-&gt;weight - ((stu*)e2)-&gt;weight);\n}\nint main()\n{\n\tstu class1[3] = { {17,185.5,190.8}, {16,160.9,200.7}, {18,120.3,150.5} };\n\tint sz = sizeof(class1) / sizeof(class1[0]);\n\tint i;\n\tqsort(class1, sz,sizeof(class1[0]), cmp_by_age);\n\tfor (i = 0; i &lt; 3; i++)\n\t{\n\t\tprintf(\"%.1f\\n\", class1[i].weight);\n\t}\n\treturn 0;\n}</code></pre>\n<p></p>\n</div>\n</div>"}