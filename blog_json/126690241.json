{"blogid": "126690241", "writerAge": "码龄2年", "writerBlogNum": "111", "writerCollect": "381", "writerComment": "18", "writerFan": "117", "writerGrade": "4级", "writerIntegral": "1221", "writerName": "Wangsh@", "writerProfileAdress": "writer_image\\profile_126690241.jpg", "writerRankTotal": "15138", "writerRankWeekly": "4029", "writerThumb": "79", "writerVisitNum": "112200", "blog_read_count": "104", "blog_time": "于 2022-09-05 22:10:38 发布", "blog_title": "Docker - compose容器编排工具 - 搭建一个自己的博客", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p> </p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E7%9F%A5%E8%AF%86%E7%82%B91%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20compose%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%9F%A5%E8%AF%86%E7%82%B91%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20compose%EF%BC%9F\">知识点1：什么是 compose？</a></p>\n<p id=\"%E7%9F%A5%E8%AF%86%E7%82%B92%EF%BC%9Acompose%E7%9A%84%E5%AE%89%E8%A3%85-toc\" style=\"margin-left:0px;\"><a href=\"#%E7%9F%A5%E8%AF%86%E7%82%B92%EF%BC%9Acompose%E7%9A%84%E5%AE%89%E8%A3%85\">知识点2：compose的安装</a></p>\n<p id=\"%E5%85%B6%E5%AE%9E%E5%9C%A8%E5%AE%B6%E7%9B%AE%E5%BD%95%E5%88%9B%E5%BB%BA%E4%BA%86%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%EF%BC%9A%2Froot%2F.docker%2Fcli-plugins-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%85%B6%E5%AE%9E%E5%9C%A8%E5%AE%B6%E7%9B%AE%E5%BD%95%E5%88%9B%E5%BB%BA%E4%BA%86%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%EF%BC%9A%2Froot%2F.docker%2Fcli-plugins\">其实在家目录创建了一个目录：/root/.docker/cli-plugins</a></p>\n<p id=\"%E6%8E%88%E4%BA%88%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%9D%83%E9%99%90-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%8E%88%E4%BA%88%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%9D%83%E9%99%90\">授予可执行权限</a></p>\n<p id=\"%C2%A0%E6%B5%8B%E8%AF%95compose%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E6%B5%8B%E8%AF%95compose%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\"> 测试compose是否安装成功</a></p>\n<p id=\"%E7%9F%A5%E8%AF%86%E7%82%B93%EF%BC%9A%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9C%A8%20Docker%20Compose%20%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%9A%84%E7%AE%80%E5%8D%95%20Python%20Web%20%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%9F%A5%E8%AF%86%E7%82%B93%EF%BC%9A%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9C%A8%20Docker%20Compose%20%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%9A%84%E7%AE%80%E5%8D%95%20Python%20Web%20%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\">知识点3：构建一个在 Docker Compose 上运行的简单 Python Web 应用程序</a></p>\n<p id=\"1%E3%80%81%E4%B8%BA%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#1%E3%80%81%E4%B8%BA%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%EF%BC%9A\">1、为项目创建一个目录：</a></p>\n<p id=\"2%E3%80%81%E5%9C%A8%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA%E7%9A%84%E6%96%87%E4%BB%B6app.py-toc\" style=\"margin-left:80px;\"><a href=\"#2%E3%80%81%E5%9C%A8%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA%E7%9A%84%E6%96%87%E4%BB%B6app.py\">2、在项目目录中创建一个名为的文件app.py</a></p>\n<p id=\"3%E3%80%81%E5%9C%A8%E6%82%A8%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA%E7%9A%84%E6%96%87%E4%BB%B6requirements.txt-toc\" style=\"margin-left:80px;\"><a href=\"#3%E3%80%81%E5%9C%A8%E6%82%A8%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA%E7%9A%84%E6%96%87%E4%BB%B6requirements.txt\">3、在您的项目目录中创建另一个名为的文件requirements.txt</a></p>\n<p id=\"4%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AADockerfile-toc\" style=\"margin-left:80px;\"><a href=\"#4%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AADockerfile\">4、创建一个Dockerfile</a></p>\n<p id=\"5%E3%80%81%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdocker-compose.yml%E6%96%87%E4%BB%B6%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1-toc\" style=\"margin-left:80px;\"><a href=\"#5%E3%80%81%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdocker-compose.yml%E6%96%87%E4%BB%B6%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1\">5、 创建一个docker-compose.yml文件定义服务</a></p>\n<p id=\"6%E3%80%81%E4%BD%BF%E7%94%A8compose%E6%9E%84%E5%BB%BA%E7%A8%8B%E5%BA%8F-toc\" style=\"margin-left:80px;\"><a href=\"#6%E3%80%81%E4%BD%BF%E7%94%A8compose%E6%9E%84%E5%BB%BA%E7%A8%8B%E5%BA%8F\">6、使用compose构建程序</a></p>\n<p id=\"%E7%9F%A5%E8%AF%86%E7%82%B94%EF%BC%9A%E4%BD%BF%E7%94%A8compose%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%9F%A5%E8%AF%86%E7%82%B94%EF%BC%9A%E4%BD%BF%E7%94%A8compose%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99\">知识点4：使用compose 搭建个人博客网站</a></p>\n<p id=\"1%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BA%E7%9B%AE%E5%BD%95-toc\" style=\"margin-left:80px;\"><a href=\"#1%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BA%E7%9B%AE%E5%BD%95\">1、创建一个空目录</a></p>\n<p id=\"2%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdocker-compose.yml%E7%94%A8%E4%BA%8E%E5%90%AF%E5%8A%A8%E6%82%A8%E7%9A%84%C2%A0WordPress%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E4%B8%80%E4%B8%AA%E5%B8%A6%E6%9C%89%E5%8D%B7%E6%8C%82%E8%BD%BD%E7%9A%84%E5%8D%95%E7%8B%ACMySQL%E5%AE%9E%E4%BE%8B%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E6%80%A7-toc\" style=\"margin-left:80px;\"><a href=\"#2%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdocker-compose.yml%E7%94%A8%E4%BA%8E%E5%90%AF%E5%8A%A8%E6%82%A8%E7%9A%84%C2%A0WordPress%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E4%B8%80%E4%B8%AA%E5%B8%A6%E6%9C%89%E5%8D%B7%E6%8C%82%E8%BD%BD%E7%9A%84%E5%8D%95%E7%8B%ACMySQL%E5%AE%9E%E4%BE%8B%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E6%80%A7\">2、创建一个docker-compose.yml用于启动您的 WordPress博客的文件和一个带有卷挂载的单独MySQL实例以实现数据持久性</a></p>\n<p id=\"3%E3%80%81%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:80px;\"><a href=\"#3%E3%80%81%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE\">3、构建项目</a></p>\n<p id=\"4%E3%80%81%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%89%93%E5%BC%80%20WordPress-toc\" style=\"margin-left:80px;\"><a href=\"#4%E3%80%81%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%89%93%E5%BC%80%20WordPress\">4、在浏览器中打开 WordPress</a></p>\n<p></p>\n<p>场景：</p>\n<p><span style=\"color:#1c7331;\"><strong>例如：我们现在需要启动10个容器，其中3个nginx，2个redis，3个mysql，1个zabbix，1个ansible<br/>       有些容器需求先启动，有容器需要后启动，在启动的时候是有先后顺序的。</strong></span></p>\n<blockquote>\n<p><span style=\"color:#1c7331;\"><strong>批量启动容器，而且启动的时候容器之间是有依赖关系，需要考虑启动顺序的</strong></span></p>\n<p><span style=\"color:#1c7331;\"><strong>编排的内容全部写到一个yaml文件里，docker 的compose根据这个yaml文件里的安排去启动容器。</strong></span></p>\n</blockquote>\n<h2 id=\"%E7%9F%A5%E8%AF%86%E7%82%B91%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20compose%EF%BC%9F\">知识点1：什么是 compose？</h2>\n<blockquote>\n<p><span style=\"color:#1c7331;\"><strong>compose 是一个容器编排工具：</strong></span></p>\n<p><span style=\"color:#1c7331;\"><strong>        启动一个容器，进行哪些配置，例如端口，进程，卷，是否链接其他容器等</strong></span></p>\n<p><span style=\"color:#1c7331;\"><strong>        compose 是Docker容器进行编排的工具，</strong></span></p>\n<p><span style=\"color:#1c7331;\"><strong>Compose 是 Docker 容器进行编排的工具，定义和运行多容器的应用，可以一条命令启动多个容器，使用Docker Compose不再需要使用shell脚本来启动容器。</strong></span></p>\n</blockquote>\n<p><img alt=\"\" height=\"467\" src=\"image\\a8a685ebfac24c1d867ec509d1e23e76.png\" width=\"1174\"/></p>\n<p><span style=\"color:#a2e043;\"><strong>###############################################################################################</strong></span></p>\n<h1 id=\"%E7%9F%A5%E8%AF%86%E7%82%B92%EF%BC%9Acompose%E7%9A%84%E5%AE%89%E8%A3%85\">知识点2：compose的安装</h1>\n<pre><code class=\"language-bash\">DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}\n\n mkdir -p $DOCKER_CONFIG/cli-plugins\n\n curl -SL https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose</code></pre>\n<h2 id=\"%E5%85%B6%E5%AE%9E%E5%9C%A8%E5%AE%B6%E7%9B%AE%E5%BD%95%E5%88%9B%E5%BB%BA%E4%BA%86%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%EF%BC%9A%2Froot%2F.docker%2Fcli-plugins\">其实在家目录创建了一个目录：/root/.docker/cli-plugins</h2>\n<blockquote>\n<p> 因为compose源码在github上面，所以下载速度比较慢</p>\n</blockquote>\n<h2 id=\"%E6%8E%88%E4%BA%88%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%9D%83%E9%99%90\">授予可执行权限</h2>\n<p><img alt=\"\" height=\"306\" src=\"image\\1466831e14dd4e27ac3f48f56e0e91c3.png\" width=\"950\"/></p>\n<h2 id=\"%C2%A0%E6%B5%8B%E8%AF%95compose%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\"> 测试compose是否安装成功</h2>\n<pre><code class=\"language-bash\">[root@docker cli-plugins]# docker compose version\nDocker Compose version v2.7.0\n[root@docker cli-plugins]# pwd\n/root/.docker/cli-plugins\n</code></pre>\n<h2 id=\"%E7%9F%A5%E8%AF%86%E7%82%B93%EF%BC%9A%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9C%A8%20Docker%20Compose%20%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%9A%84%E7%AE%80%E5%8D%95%20Python%20Web%20%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\">知识点3：构建一个在 Docker Compose 上运行的简单 Python Web 应用程序</h2>\n<h3 id=\"1%E3%80%81%E4%B8%BA%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%EF%BC%9A\">1、为项目创建一个目录：</h3>\n<pre><code class=\"language-bash\">[root@docker1 /]# mkdir composetest\n[root@docker1 /]# cd composetest/\n</code></pre>\n<h3 id=\"2%E3%80%81%E5%9C%A8%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA%E7%9A%84%E6%96%87%E4%BB%B6app.py\">2、在项目目录中创建一个名为的文件<font face=\"monospace\">app.py</font></h3>\n<pre><code class=\"language-bash\">import time\n\nimport redis\nfrom flask import Flask\n\napp = Flask(__name__)\ncache = redis.Redis(host='redis', port=6379)\n\ndef get_hit_count():\n    retries = 5\n    while True:\n        try:\n            return cache.incr('hits')\n        except redis.exceptions.ConnectionError as exc:\n            if retries == 0:\n                raise exc\n            retries -= 1\n            time.sleep(0.5)\n\n@app.route('/')\ndef hello():\n    count = get_hit_count()\n    return 'Hello World! I have been seen {} times.\\n'.format(count)</code></pre>\n<h3 id=\"3%E3%80%81%E5%9C%A8%E6%82%A8%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA%E7%9A%84%E6%96%87%E4%BB%B6requirements.txt\">3、在您的项目目录中创建另一个名为的文件<code class=\"language-plaintext\">requirements.txt</code></h3>\n<pre><code class=\"language-bash\">flask\nredis</code></pre>\n<h3 id=\"4%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AADockerfile\">4、创建一个Dockerfile</h3>\n<blockquote>\n<p><span style=\"color:#1c7331;\"><strong>编写一个构建 Docker 映像的 Dockerfile。该映像包含 Python 应用程序所需的所有依赖项，包括 Python 本身。</strong></span></p>\n</blockquote>\n<pre><code class=\"language-bash\"># syntax=docker/dockerfile:1\nFROM python:3.7-alpine\nWORKDIR /code\nENV FLASK_APP=app.py\nENV FLASK_RUN_HOST=0.0.0.0\nRUN apk add --no-cache gcc musl-dev linux-headers\nCOPY requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nEXPOSE 5000\nCOPY . .\nCMD [\"flask\", \"run\"]</code></pre>\n<blockquote>\n<ul><li><span style=\"color:#1c7331;\"><strong>从 Python 3.7 映像开始构建映像。</strong></span></li><li><span style=\"color:#1c7331;\"><strong>将工作目录设置为<code class=\"language-plaintext\">/code</code>.</strong></span></li><li><span style=\"color:#1c7331;\"><strong>设置命令使用的环境变量<code class=\"language-plaintext\">flask</code>。</strong></span></li><li><span style=\"color:#1c7331;\"><strong>安装 gcc 和其他依赖项</strong></span></li><li><span style=\"color:#1c7331;\"><strong>复制<code class=\"language-plaintext\">requirements.txt</code>并安装 Python 依赖项。</strong></span></li><li><span style=\"color:#1c7331;\"><strong>向镜像添加元数据以描述容器正在侦听端口 5000</strong></span></li><li><span style=\"color:#1c7331;\"><strong>将项目中的当前目录复制<code class=\"language-plaintext\">.</code>到镜像中的workdir <code class=\"language-plaintext\">.</code>。</strong></span></li><li><span style=\"color:#1c7331;\"><strong>将容器的默认命令设置为<code class=\"language-plaintext\">flask run</code>.</strong></span></li></ul>\n</blockquote>\n<h3 id=\"5%E3%80%81%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdocker-compose.yml%E6%96%87%E4%BB%B6%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1\">5、 创建一个docker-compose.yml文件定义服务</h3>\n<pre><code class=\"language-bash\">version: \"3.9\"\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:5000\"\n  redis:\n    image: \"redis:alpine\"</code></pre>\n<h3 id=\"6%E3%80%81%E4%BD%BF%E7%94%A8compose%E6%9E%84%E5%BB%BA%E7%A8%8B%E5%BA%8F\">6、使用compose构建程序</h3>\n<pre><code class=\"language-bash\">[root@docker1 composetest]# ls\napp.py  docker-compose.yml  Dockerfile  requirements.txt\n[root@docker1 composetest]# docker compose up\n</code></pre>\n<h2 id=\"%E7%9F%A5%E8%AF%86%E7%82%B94%EF%BC%9A%E4%BD%BF%E7%94%A8compose%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99\">知识点4：使用compose 搭建个人博客网站</h2>\n<h3 id=\"1%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BA%E7%9B%AE%E5%BD%95\">1、创建一个空目录</h3>\n<pre><code class=\"language-bash\">[root@docker1 /]# mkdir my_wordpress\n[root@docker1 /]# cd my_wordpress/\n</code></pre>\n<h3 id=\"2%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdocker-compose.yml%E7%94%A8%E4%BA%8E%E5%90%AF%E5%8A%A8%E6%82%A8%E7%9A%84%C2%A0WordPress%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E4%B8%80%E4%B8%AA%E5%B8%A6%E6%9C%89%E5%8D%B7%E6%8C%82%E8%BD%BD%E7%9A%84%E5%8D%95%E7%8B%ACMySQL%E5%AE%9E%E4%BE%8B%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E6%80%A7\">2、创建一个<code class=\"language-plaintext\">docker-compose.yml</code>用于启动您的 <code class=\"language-plaintext\">WordPress</code>博客的文件和一个带有卷挂载的单独<code class=\"language-plaintext\">MySQL</code>实例以实现数据持久性</h3>\n<pre><code class=\"language-bash\">services:\n  db:\n    # We use a mariadb image which supports both amd64 &amp; arm64 architecture\n    image: mariadb:10.6.4-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8.0.27\n    command: '--default-authentication-plugin=mysql_native_password'\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      - MYSQL_ROOT_PASSWORD=somewordpress\n      - MYSQL_DATABASE=wordpress\n      - MYSQL_USER=wordpress\n      - MYSQL_PASSWORD=wordpress\n    expose:\n      - 3306\n      - 33060\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - 80:80\n    restart: always\n    environment:\n      - WORDPRESS_DB_HOST=db\n      - WORDPRESS_DB_USER=wordpress\n      - WORDPRESS_DB_PASSWORD=wordpress\n      - WORDPRESS_DB_NAME=wordpress\nvolumes:\n  db_data:</code></pre>\n<h3 id=\"3%E3%80%81%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE\">3、构建项目</h3>\n<pre><code class=\"language-bash\">[root@docker1 my_wordpress]# docker compose up -d\n[+] Running 2/2\n ⠿ Container my_wordpress-wordpress-1  Started                                                       2.6s\n ⠿ Container my_wordpress-db-1         Started    </code></pre>\n<p>- d 表示在后台运行容器服务</p>\n<p>docker compose ps 表示列出目前项目中的所有容器</p>\n<pre><code class=\"language-bash\">[root@docker1 my_wordpress]# docker compose ps\nNAME                       COMMAND                  SERVICE             STATUS              PORTS\nmy_wordpress-db-1          \"docker-entrypoint.s…\"   db                  running             3306/tcp, 33060/tcp\nmy_wordpress-wordpress-1   \"docker-entrypoint.s…\"   wordpress           running             0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp\n</code></pre>\n<h3 id=\"4%E3%80%81%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%89%93%E5%BC%80%20WordPress\">4、在<span style=\"color:#0f161e;\"><span style=\"background-color:#ffffff;\">浏览器中打开 WordPress</span></span></h3>\n<p>完成所需资料，然后点击安装wordpress </p>\n<p><img alt=\"\" height=\"992\" src=\"image\\175b53b91b40471086eaedf9750c046f.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"641\" src=\"image\\c9093f47a4094530995bd6defcc272b8.png\" width=\"1012\"/></p>\n<p> wordpress后台管理：</p>\n<p><img alt=\"\" height=\"998\" src=\"image\\0cf9188d13ba47d8855fe2cda7e01832.png\" width=\"1200\"/></p>\n<p> </p>\n<p> </p>\n</div>\n</div>"}