{"blogid": "126398122", "writerAge": "码龄5年", "writerBlogNum": "82", "writerCollect": "612", "writerComment": "73", "writerFan": "5306", "writerGrade": "5级", "writerIntegral": "1830", "writerName": "熊思宇", "writerProfileAdress": "writer_image\\profile_126398122.jpg", "writerRankTotal": "9706", "writerRankWeekly": "1170", "writerThumb": "149", "writerVisitNum": "238959", "blog_read_count": "1484", "blog_time": "已于 2022-08-22 11:02:41 修改", "blog_title": "C# .Net MAUI 从入门到入土", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"></p>\n<h1 id=\"what-is-net-maui\">什么是 .NET MAUI</h1>\n<p>.NET 多平台应用 UI (.NET MAUI) 是一个跨平台框架，用于使用 C# 和 XAML 创建本机移动和桌面应用。</p>\n<p>使用 .NET MAUI，可以从单个共享代码库开发可在 Android、iOS、macOS 和 Windows 上运行的应用。</p>\n<p><img alt=\"\" height=\"581\" src=\"image\\3addf578b85a4af2883afd96baf75e03.png\" width=\"658\"/></p>\n<p></p>\n<h1 id=\".NET%20MAUI%20%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%C2%A0\">.NET MAUI 的工作原理 </h1>\n<p>.NET MAUI 将 Android、iOS、macOS 和 Windows API 统一到单个 API 中，该 API 允许在任意位置运行一次的开发人员体验，同时提供对每个本机平台的各个方面的深入访问。</p>\n<p>.NET 6 提供了一系列特定于平台的框架来创建应用：适用于 Android 的 .NET、适用于 iOS 的 .NET、适用于 macOS 的 .NET 和 Windows UI 3 (WinUI 3) 库。 这些框架都有权访问同一个 .NET 6 基类库 (BCL) 。 此库将基础平台的详细信息从代码中抽象化。 BCL 依赖于 .NET 运行时，为代码提供执行环境。 对于 Android、iOS 和 macOS，环境由 Mono 实现，这是 .NET 运行时的实现。 在 Windows 上，.NET CoreCLR 提供执行环境。</p>\n<p>虽然 BCL 使在不同平台上运行的应用能够共享常见的业务逻辑，但各种平台具有为应用定义用户界面的不同方式，并且它们提供了不同的模型，用于指定用户界面元素的通信和互操作方式。 可以使用适用于 Android、适用于 iOS 的 .NET for iOS、适用于 macOS 的 .NET 或 WinUI 3) 的相应平台特定框架 (.NET 单独为每个平台创建 UI，但此方法要求你为每个单独的设备系列维护代码库。</p>\n<p>.NET MAUI 提供了一个框架，用于为移动和桌面应用构建 UI。 下图显示了 .NET MAUI 应用的体系结构的高级视图：</p>\n<p><img alt=\"\" height=\"729\" src=\"image\\ea7e32b1ad0a4ee6a8605be3785d5b0d.png\" width=\"1152\"/></p>\n<p>在 .NET MAUI 应用中，编写主要与 .NET MAUI API (1) 交互的代码。 然后，.NET MAUI 直接使用本机平台 API (3) 。 此外，应用代码还可以根据需要直接练习平台 API (2) 。</p>\n<p>.NET MAUI 应用可以在电脑或 Mac 上编写，并编译为本机应用包：</p>\n<ul><li>使用 .NET MAUI 编译的 Android 应用从 C# 编译为中间语言 (IL) ，然后在应用启动时 (JIT) 编译为本机程序集。</li><li>使用 .NET MAUI 生成的 iOS 应用完全提前 (AOT) 从 C# 编译为本机 ARM 程序集代码。</li><li>使用 .NET MAUI 构建的 macOS 应用使用 Mac Catalyst，这是 Apple 提供的一种解决方案，可将使用 UIKit 生成的 iOS 应用引入桌面，并根据需要使用其他 AppKit 和平台 API 进行扩充。</li><li>使用 .NET MAUI 生成的 Windows 应用使用 Windows UI 3 (WinUI 3) 库来创建面向 Windows 桌面的本机应用。 有关 WinUI 3 的详细信息，请参阅 <a href=\"https://docs.microsoft.com/zh-cn/windows/apps/winui/\" title=\"Windows UI 库\">Windows UI 库</a>。</li></ul>\n<p></p>\n<p>上面是微软官方的一些介绍，文档在此：</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/maui/\" title=\".NET 多平台应用 UI 文档 - .NET MAUI | Microsoft Docs\">.NET 多平台应用 UI 文档 - .NET MAUI | Microsoft Docs</a></p>\n<p>github 开发文档</p>\n<p><a href=\"https://github.com/dotnet/maui\" title=\"GitHub - dotnet/maui: .NET MAUI is the .NET Multi-platform App UI, a framework for building native device applications spanning mobile, tablet, and desktop.\">GitHub - dotnet/maui: .NET MAUI is the .NET Multi-platform App UI, a framework for building native device applications spanning mobile, tablet, and desktop.</a></p>\n<p></p>\n<h1 id=\"%E5%BC%80%E5%A7%8B%E5%85%A5%E9%97%A8\">入门案例</h1>\n<p>Visual Studio Installer，选择 vs2022，添加  .NET Multi-platform App UI 模块，如下图</p>\n<p><img alt=\"\" height=\"476\" src=\"image\\56bff3b9638a44a8aba04649f1c1724a.png\" width=\"1200\"/></p>\n<p></p>\n<h2 id=\"1.%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE\">1.新建项目</h2>\n<p>选择 .NET MAUI 应用</p>\n<p><img alt=\"\" height=\"613\" src=\"image\\ac29ca224caf41b085eeb47b00416949.png\" width=\"817\"/></p>\n<p>框架这里选择 .NET6</p>\n<p><img alt=\"\" height=\"276\" src=\"image\\38b4250dbed04e4193d2d6d4186d1fc8.png\" width=\"982\"/></p>\n<p>点击创建 即可</p>\n<p>生成项目后，会自动联网下载对应的组件，如果显示缺少对应的依赖，稍等一会就好</p>\n<p><img alt=\"\" height=\"393\" src=\"image\\c1d7f5c2257c4135940c0fe63445ff83.png\" width=\"437\"/></p>\n<p>在这里可以切换对应的平台，不过平时我们开发，选择 windows 即可。</p>\n<p><img alt=\"\" height=\"384\" src=\"image\\e2bd642461134c0a9533bcf3b535ff22.png\" width=\"748\"/></p>\n<p>直接运行，会提示打开开发者模式</p>\n<p><img alt=\"\" height=\"351\" src=\"image\\12a377cda9754ff3b1b7cb964eb1e421.png\" width=\"878\"/></p>\n<p>点击适合开发人员的设置，打开就行了</p>\n<p><img alt=\"\" height=\"287\" src=\"image\\2b7ff87658e548bcb84c0b6eab174f99.png\" width=\"300\"/></p>\n<p> 运行后，界面如下</p>\n<p><img alt=\"\" height=\"994\" src=\"image\\0f63dd272b704c68aa5e251c2cce5d38.png\" width=\"1200\"/></p>\n<p>我们看看代码，写法其实和 WPF 差不多 </p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MauiAppTest.MainPage\"&gt;\n\n    &lt;ScrollView&gt;\n        &lt;VerticalStackLayout\n            Spacing=\"25\"\n            Padding=\"30,0\"\n            VerticalOptions=\"Center\"&gt;\n\n            &lt;Image\n                Source=\"dotnet_bot.png\"\n                SemanticProperties.Description=\"Cute dot net bot waving hi to you!\"\n                HeightRequest=\"200\"\n                HorizontalOptions=\"Center\" /&gt;\n\n            &lt;Label\n                Text=\"Hello, World!\"\n                SemanticProperties.HeadingLevel=\"Level1\"\n                FontSize=\"32\"\n                HorizontalOptions=\"Center\" /&gt;\n\n            &lt;Label\n                Text=\"Welcome to .NET Multi-platform App UI\"\n                SemanticProperties.HeadingLevel=\"Level2\"\n                SemanticProperties.Description=\"Welcome to dot net Multi platform App U I\"\n                FontSize=\"18\"\n                HorizontalOptions=\"Center\" /&gt;\n\n            &lt;Button\n                x:Name=\"CounterBtn\"\n                Text=\"Click me\"\n                SemanticProperties.Hint=\"Counts the number of times you click\"\n                Clicked=\"OnCounterClicked\"\n                HorizontalOptions=\"Center\" /&gt;\n\n        &lt;/VerticalStackLayout&gt;\n    &lt;/ScrollView&gt;\n\n&lt;/ContentPage&gt;\n</code></pre>\n<p>这个时候你会发现，在WPF中，XAML代码对应的界面在哪里？</p>\n<p></p>\n<h2 id=\"2.%E6%89%93%E5%BC%80XAML%E5%AF%B9%E5%BA%94%E7%9A%84%E7%95%8C%E9%9D%A2\">2.打开XAML对应的界面</h2>\n<p>运行程序后，我们点击 界面中的第二个图标，有点像摄像头</p>\n<p><img alt=\"\" height=\"385\" src=\"image\\93b1412737034cd4b8251063ef398350.png\" width=\"1115\"/></p>\n<p>注意这里 ，运行程序的时候，要点击 Windows Machine ，而不要点击右边的运行图标</p>\n<p><img alt=\"\" height=\"107\" src=\"image\\cb267aeec8b747759b555be73fd3dee8.png\" width=\"508\"/></p>\n<p> 我们在编辑的时候，界面大概就是这样子，没错，在开发界面时，就是要运行起来修改</p>\n<p><img alt=\"\" height=\"1118\" src=\"image\\1e03783cde77467ead822a73c9b0b0b2.png\" width=\"1200\"/></p>\n<p></p>\n<h2 id=\"3.%E5%B0%8F%E6%A1%88%E4%BE%8B\">3.UI效果</h2>\n<p>下面就用官方的这个例子的基础上写一些界面效果</p>\n<pre><code class=\"language-cs\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MauiAppTest.MainPage\" &gt;\n\n    &lt;ScrollView&gt;\n        &lt;Grid&gt;\n            &lt;Grid.RowDefinitions&gt;\n                &lt;RowDefinition Height=\"130\"/&gt;\n                &lt;RowDefinition Height=\"23\"/&gt;\n                &lt;RowDefinition Height=\"23\"/&gt;\n                &lt;RowDefinition Height=\"100\"/&gt;\n                &lt;RowDefinition Height=\"100\"/&gt;\n                &lt;RowDefinition Height=\"200\"/&gt;\n                &lt;RowDefinition/&gt;\n            &lt;/Grid.RowDefinitions&gt;\n            &lt;Grid Grid.RowSpan=\"2\" Background=\"#4f51c0\" Margin=\"0\"/&gt;\n\n            &lt;!--头--&gt;\n            &lt;Grid VerticalOptions=\"Center\" Margin=\"15,0\" Grid.RowSpan=\"2\"&gt;\n                &lt;Grid.RowDefinitions&gt;\n                    &lt;RowDefinition Height=\"40\"/&gt;\n                    &lt;RowDefinition/&gt;\n                &lt;/Grid.RowDefinitions&gt;\n                &lt;Grid.ColumnDefinitions&gt;\n                    &lt;ColumnDefinition/&gt;\n                    &lt;ColumnDefinition Width=\"40\"/&gt;\n                &lt;/Grid.ColumnDefinitions&gt;\n                &lt;Label \n                    Text=\"晚上好!\"\n                    FontSize=\"18\"\n                    TextColor=\"White\" FontAttributes=\"Bold\" HorizontalOptions=\"Start\" VerticalOptions=\"Center\"/&gt;\n                &lt;Label Text=\"博学不穷，笃行不倦！今天你想学点什么?\" TextColor=\"#99FFFFFF\" FontSize=\"13\"\n                   Grid.Row=\"1\"/&gt;\n            &lt;/Grid&gt;\n\n            &lt;Grid Grid.Row=\"1\" Grid.RowSpan=\"2\" Margin=\"15,0\"&gt;\n                &lt;Frame CornerRadius=\"10\" BorderColor=\"#DDD\" Margin=\"0,1\"/&gt;\n                &lt;!--TextBox--&gt;\n                &lt;Entry BackgroundColor=\"Transparent\" Placeholder=\"搜索你喜欢的课程\" Margin=\"10,1,10,1\"\n                       VerticalOptions=\"Center\"/&gt;\n            &lt;/Grid&gt;\n        &lt;/Grid&gt;\n    &lt;/ScrollView&gt;\n&lt;/ContentPage&gt;\n</code></pre>\n<p>运行后</p>\n<p><img alt=\"\" height=\"375\" src=\"image\\2479030e59b14e2ab8a99689f8082bb7.png\" width=\"400\"/></p>\n<p>界面只做了一半，真的写不下去了....</p>\n<p>自带的UI控件特别少，而且巨难用....</p>\n<p></p>\n<h2 id=\"4.%E6%80%BB%E7%BB%93\">4.总结</h2>\n<p>看了官方说的那么漂亮，这个框架多么多么的厉害，暂时我还是<span style=\"color:#fe2c24;\"><strong>不推荐使用</strong></span>，在开发的过程中，我发现了非常多的bug，比如，关闭 安卓模拟器，又会自动打开，再次关闭安卓模拟器，VS 编辑器 调试 模式关闭不了， 等了几分钟，后面才报错自动停止，VS 编辑器 里写代码更是不方便，有些关键字根本打不出来，大小写必须严格区分，你必须将关键字记清楚，将整个单词打完后，你才会发现，哦，没拼错，而且，这和WPF写法根本不一致，区别还是有一些的，再等等吧，后续也许会更完美！</p>\n<p></p>\n<h1 id=\"%E7%BB%93%E6%9D%9F\"></h1>\n<p>end</p>\n</div>\n</div>"}