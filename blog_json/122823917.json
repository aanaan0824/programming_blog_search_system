{"blogid": "122823917", "writerAge": "码龄5年", "writerBlogNum": "358", "writerCollect": "1372", "writerComment": "144", "writerFan": "6923", "writerGrade": "6级", "writerIntegral": "7728", "writerName": "香煎三文鱼", "writerProfileAdress": "writer_image\\profile_122823917.jpg", "writerRankTotal": "1949", "writerRankWeekly": "1434", "writerThumb": "226", "writerVisitNum": "694721", "blog_read_count": "2076", "blog_time": "已于 2022-02-08 17:04:04 修改", "blog_title": "C#封装DLL类库，调用类库", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1VS_0\"></a>1、在VS中创建项目选择类库</h2>\n<p>我这里是netcore的项目就选择netcore的 根据项目定<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dfbcd3a735a141d8b07d90e923a0e4e6.png\"/></p>\n<h2><a id=\"2__5\"></a>2.新建好项目可自己新建一个类 写自己需要的方法</h2>\n<p><strong>注意：被调用的方法名都要写成public</strong><br/> 这里我写了一个公用方法的类，里边写了一个生成随机数据的方法<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ecc582d790bb40a786882cd24ca3d7a1.png\"/></p>\n<h2><a id=\"3bindebugdll_11\"></a>3.点击项目生成解决方案，然后在项目目录的bin/debug下即可发现封装好的dll类库</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\47765b91d153412e8bd3ca32d04108ba.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\2b66c26538da45e8b70bfce8dc9c45e9.png\"/></p>\n<h2><a id=\"4DLL_namespace_DLL_16\"></a>4.封装成DLL时程序集名字要跟程序里的 namespace 命名一致，如下图，否则应用DLL时无法引用成功。</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3f50a2b5e9e54b5cae77c64eb68ae36e.png\"/></p>\n<h2><a id=\"C__22\"></a>C# 调用类库</h2>\n<p>1.在项目中右键依赖项选择添加项目引用<br/> <img alt=\"在这里插入图片描述\" src=\"image\\60f820c3af2049aeaaecee6d8c68fd6c.png\"/></p>\n<p>2.选择浏览，找到刚刚生成dll类库，点击添加<br/> <img alt=\"在这里插入图片描述\" src=\"image\\895d48edaffd45a1abdcdd4aaffb0d06.png\"/><br/> 3.在需要使用的控制器中引用<br/> <img alt=\"在这里插入图片描述\" src=\"image\\98afdc82aa79460f97889c814964d662.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">ClassLibrary1</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TestController<span class=\"token punctuation\">.</span>Controllers</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Route</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"api/[controller]/[action]\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ApiController</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControllerBase</span></span>\n    <span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpGet</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> authcode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">PublicMethodssssssss</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PublicMethodssssssss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//实例化类</span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">RandomData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用dll的函数</span>\n        \n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"cReflectorexe_51\"></a>世面上破解c#库的软件非常多，非常著名的就是Reflector.exe，深受各程序员喜爱</h2>\n<p>https://blog.csdn.net/qq_39569480/article/details/122827244?spm=1001.2014.3001.5502</p>\n<h2><a id=\"_54\"></a>如何才能不被破解呢？保护知识产权非常重要</h2>\n<p>https://blog.csdn.net/qq_39569480/article/details/122826883?spm=1001.2014.3001.5502</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}