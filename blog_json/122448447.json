{"blogid": "122448447", "writerAge": "码龄5年", "writerBlogNum": "33", "writerCollect": "87", "writerComment": "3", "writerFan": "87", "writerGrade": "2级", "writerIntegral": "383", "writerName": "几行代码", "writerProfileAdress": "writer_image\\profile_122448447.jpg", "writerRankTotal": "135411", "writerRankWeekly": "122658", "writerThumb": "36", "writerVisitNum": "55777", "blog_read_count": "5376", "blog_time": "于 2022-01-12 15:33:15 发布", "blog_title": "QueryWrapper、UpdateWrapper和LambdaWrapper的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1><a class=\"link-info\" href=\"https://blog.csdn.net/waitle500/article/details/122448447\" title=\"mybatis plus条件构造器关系图\">mybatis plus条件构造器关系图</a></h1>\n<p><img alt=\"\" height=\"613\" src=\"image\\b656f16de3b7446890d1fba801a888a8.png\" width=\"1200\"/></p>\n<p></p>\n<p> 介绍 ：</p>\n<p>1.上图绿色框为抽象类abstract<br/> 2.蓝色框为正常class类，可new对象<br/> 3.黄色箭头指向为父子类关系，箭头指向为父类</p>\n<p><strong><span style=\"color:#4da8ee;\">废话不多说,直接上示例 :</span></strong></p>\n<p><strong>注：示例中的 Service接口 都继承了 IService 的接口 </strong></p>\n<h2 id=\"1-querywrapper\"><a class=\"link-info\" href=\"https://blog.csdn.net/waitle500/article/details/122448447\" title=\"1. QueryWrapper\">1. QueryWrapper</a></h2>\n<blockquote>\n<p>继承自 <code>AbstractWrapper</code> ,自身的内部属性 <code>entity</code> 也用于生成 where 条件<br/> 及 <code>LambdaQueryWrapper</code>, 可以通过 <code>new QueryWrapper().lambda()</code> 方法获取到</p>\n</blockquote>\n<h3 id=\"11-select函数\">1.1 select函数</h3>\n<pre><code class=\"language-java\">//String... sqlSelect 表示不定参数，也就是调用这个方法的时候这里可以传入多个String对象。\nselect(String... sqlSelect)\nselect(Predicate&lt;TableFieldInfo&gt; predicate)\nselect(Class&lt;T&gt; entityClass, Predicate&lt;TableFieldInfo&gt; predicate)\n</code></pre>\n<ul><li><strong>设置查询字段</strong></li></ul>\n<blockquote>\n<p>过滤查询字段,<span style=\"color:#fe2c24;\">入参不包含 class 的调用前需要<code>wrapper</code>内的<code>entity</code>属性必须有值</span>! 这两类方法重复调用以最后一次调用为准!</p>\n</blockquote>\n<ul><li><strong>示例</strong></li></ul>\n<pre><code class=\"language-java\">@Test\npublic void test(){\n    QueryWrapper&lt;Demo&gt; queryWrapper = new QueryWrapper&lt;&gt;();\n    //需要查询出来的字段\n    queryWrapper.select(\"test1\",\"test2\");\n    List&lt;Demo&gt; list = demoMapper.selectList(queryWrapper);\n    list.forEach(System.out::println);\n}\n</code></pre>\n<p> 控制台输出</p>\n<pre><code class=\"language-java\">Demo(id=null, test1=1111, test2=2222, test3=null, test4=null)\nDemo(id=null, test1=5555, test2=6666, test3=null, test4=null)</code></pre>\n<ul><li><strong>可以排除或指定要查询的字段</strong></li></ul>\n<pre><code class=\"language-java\">QueryWrapper&lt;Demo&gt; wrapper = new QueryWrapper&lt;&gt;();\n//常量在前，变量再后避免空指针\nwrapper.select(Demo.class,i -&gt; !\"1111\".equals(i.getTest1()));\n</code></pre>\n<h2 id=\"2-updatewrapper\"><a class=\"link-info\" href=\"https://blog.csdn.net/waitle500/article/details/122448447\" title=\"2. UpdateWrapper\">2. UpdateWrapper</a></h2>\n<blockquote>\n<p>继承自 <code>AbstractWrapper</code> ,自身的内部属性 <code>entity</code> 也用于生成 where 条件<br/> 及 <code>LambdaUpdateWrapper</code>, 可以通过 <code>new UpdateWrapper().lambda()</code> 方法获取!</p>\n</blockquote>\n<h3 id=\"21-set函数\">2.1 set函数</h3>\n<pre><code class=\"language-java\">//column 表字段，val 值 ，condition表示该条件是否加入最后生成的sql中\nset(String column, Object val)\nset(boolean condition, String column, Object val)\n</code></pre>\n<ul><li> <p><strong>示例</strong></p> </li></ul>\n<pre><code class=\"language-java\">UpdateWrapper&lt;ManagerSection&gt; updateWrapper = new UpdateWrapper&lt;&gt;();\nupdateWrapper.set(\"status\",status);\nupdateWrapper.eq(\"id\",id);\nboolean result = iProjectUnitService.update(updateWrapper);</code></pre>\n<h3 id=\"22-setsql函数\">2.2 setSql函数</h3>\n<pre><code>setSql(String sql)\n</code></pre>\n<ul><li> <p><strong>示例</strong></p> </li></ul>\n<pre><code class=\"language-java\">@Test\npublic void test(){\n    UpdateWrapper&lt;Demo&gt; updateWrapper = new UpdateWrapper&lt;&gt;();\n    // 设置sql语句部分\n    updateWrapper.setSql(\"test3 = 18\");\n    updateWrapper.eq(\"test1\",\"1111\");\n    userService.update(updateWrapper);\n}\n</code></pre>\n<h2 id=\"3-lambdawrapper\"><a class=\"link-info\" href=\"https://blog.csdn.net/waitle500/article/details/122448447\" title=\"3. LambdaWrapper\">3. LambdaWrapper</a></h2>\n<h3 id=\"31-lambdaquerywrapper\">3.1 LambdaQueryWrapper</h3>\n<pre><code class=\"language-java\">LambdaQueryWrapper&lt;ManagerSectionPerson&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();\nqueryWrapper.eq(ManagerSectionPerson::getId,id)\n            .between(ManagerSectionPerson::getInvalid,0,1);\nList&lt;ManagerSectionPerson &gt; personList = this.list(queryWrapper);</code></pre>\n<h3 id=\"32-lambdaupdatewrapper\">3.2 LambdaUpdateWrapper</h3>\n<pre><code class=\"language-java\">LambdaUpdateWrapper&lt;ManagerSectionPerson&gt; updateWrapper = new LambdaUpdateWrapper&lt;&gt;();\nupdateWrapper.eq(ManagerSectionPerson::getId, id)\n             .le(ManagerSectionPerson::getLockStatus,30)\n             .set(ManagerSectionPerson::getInvalid,1)\n             .setSql(\"status = 1\");\nthis.update(updateWrapper);</code></pre>\n<p></p>\n<h3 id=\"使用-wrapper-自定义sql\"><a class=\"link-info\" href=\"https://blog.csdn.net/waitle500/article/details/122448447\" title=\"4.使用 Wrapper 自定义SQL\">4.使用 Wrapper 自定义SQL</a></h3>\n<p><strong>4.1  注解方式 Mapper.java</strong></p>\n<pre><code class=\"language-java\">@Select(\"select * from mysql_data ${ew.customSqlSegment}\")\nList&lt;MysqlData&gt; getAll(@Param(Constants.WRAPPER) Wrapper wrapper\n</code></pre>\n<p><strong>4.2  XML形式 Mapper.xml</strong></p>\n<pre><code class=\"language-java\">&lt;select id=\"getAll\" resultType=\"MysqlData\"&gt;\n\tSELECT * FROM mysql_data ${ew.customSqlSegment}\n&lt;/select&gt;</code></pre>\n<p><span style=\"color:#0d0016;\"><strong> 下面图表为条件构造器使用中的各个方法格式和说明，如有不懂可参考官方文档内容</strong></span><img alt=\"在这里插入图片描述\" src=\"image\\20210430103844807.png\"/></p>\n<p></p>\n</div>\n</div>"}