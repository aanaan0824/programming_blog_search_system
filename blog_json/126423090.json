{"blogid": "126423090", "writerAge": "码龄21天", "writerBlogNum": "189", "writerCollect": "184", "writerComment": "17", "writerFan": "290", "writerGrade": "5级", "writerIntegral": "1947", "writerName": "π大星的日常", "writerProfileAdress": "writer_image\\profile_126423090.jpg", "writerRankTotal": "11335", "writerRankWeekly": "1018", "writerThumb": "31", "writerVisitNum": "21866", "blog_read_count": "5236", "blog_time": "于 2022-08-19 13:29:16 发布", "blog_title": "阿里一面 | 说说你对 MySQL 死锁的理解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>1、什么是死锁？</h1>\n<blockquote>\n<p>死锁指的是在两个或两个以上不同的进程或线程中，由于存在共同资源的竞争或进程（或线程）间的通讯而导致各个线程间相互挂起等待，如果没有外力作用，最终会引发整个系统崩溃。</p>\n</blockquote>\n<h1>2、Mysql出现死锁的必要条件</h1>\n<ul><li> <p>资源独占条件</p> </li></ul>\n<blockquote>\n<p>指多个事务在竞争同一个资源时存在互斥性，即在一段时间内某资源只由一个事务占用，也可叫独占资源（如行锁）。</p>\n</blockquote>\n<ul><li> <p>请求和保持条件</p> </li></ul>\n<blockquote>\n<p>指在一个事务a中已经获得锁A，但又提出了新的锁B请求，而该锁B已被其它事务b占有，此时该事务a则会阻塞，但又对自己已获得的锁A保持不放。</p>\n</blockquote>\n<ul><li> <p>不剥夺条件</p> </li></ul>\n<blockquote>\n<p>指一个事务a中已经获得锁A，在未提交之前，不能被剥夺，只能在使用完后提交事务再自己释放。</p>\n</blockquote>\n<ol><li> <p>相互获取锁条件</p> </li></ol>\n<blockquote>\n<p>指在发生死锁时，必然存在一个相互获取锁过程，即持有锁A的事务a在获取锁B的同时，持有锁B的事务b也在获取锁A，最终导致相互获取而各个事务都阻塞。</p>\n</blockquote>\n<h1><strong>3、 Mysql经典死锁案例</strong></h1>\n<blockquote>\n<p>假设存在一个转账情景，A账户给B账户转账50元的同时，B账户也给A账户转账30元，那么在这过程中是否会存在死锁情况呢？</p>\n</blockquote>\n<h1><strong>3.1 建表语句</strong></h1>\n<pre><code>CREATE TABLE `account` (\n  `id` int(11) NOT NULL COMMENT '主键',\n  `user_id` varchar(56) NOT NULL COMMENT '用户id',\n  `balance` float(10,2) DEFAULT NULL COMMENT '余额',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `idx_user_id` (`user_id`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='账户余额表';\n</code></pre>\n<h1><strong>3.2 初始化相关数据</strong></h1>\n<pre><code>INSERT INTO `test`.`account` (`id`, `user_id`, `balance`) VALUES (1, 'A', 80.00);\nINSERT INTO `test`.`account` (`id`, `user_id`, `balance`) VALUES (2, 'B', 60.00);\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\530fe422f8217d55e9ca587b4bfda844.png\"/></p>\n<p></p>\n<h1><strong>3.3 正常转账过程</strong></h1>\n<blockquote>\n<p>在说死锁问题之前，咱们先来看看正常的转账过程。<br/> 正常情况下，A用户给B用户转账50元，可在一个事务内完成，需要先获取A用户的余额和B用户的余额，因为之后需要修改这两条数据，所以需要通过写锁（for UPDATE）锁住他们，防止其他事务更改导致我们的更改丢失而引起脏数据。<br/> 相关sql如下：</p>\n</blockquote>\n<p>开启事务之前需要先把mysql的自动提交关闭</p>\n<pre><code>set autocommit=0;\n# 查看事务自动提交状态状态\n</code></pre>\n<p><code>show VARIABLES like 'autocommit';![在这里插入图片描述](https://img-blog.csdnimg.cn/a486a4ed5c9d4240bd115ac7b3ce5a39.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_</code></p>\n<p><code>Q1NETiBA6ZqQIOmjjg==,size_20,color_FFFFFF,t_70,g_se,x_16)</code></p>\n<pre><code># 转账sql\nSTART TRANSACTION;\n# 获取A 的余额并存入A_balance变量：80\nSELECT user_id,@A_balance:=balance from account where user_id = 'A' for UPDATE;\n# 获取B 的余额并存入B_balance变量:60\nSELECT user_id,@B_balance:=balance from account where user_id = 'B' for UPDATE;\n\n# 修改A 的余额\nUPDATE account set balance = @A_balance - 50 where user_id = 'A';\n# 修改B 的余额\nUPDATE account set balance = @B_balance + 50 where user_id = 'B';\nCOMMIT;\n</code></pre>\n<p>执行后的结果：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\bc7fb75f92af933e0b34732393a6a158.png\"/></p>\n<p></p>\n<p>可以看到数据更新都是正常的情况</p>\n<h1><strong>3.4 死锁转账过程</strong></h1>\n<p>初始化的余额为：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\2509a5e09695683b4add4b90d6b0e4ba.png\"/></p>\n<p></p>\n<blockquote>\n<p>假设在高并发情况下存在这种场景，A用户给B用户转账50元的同时，B用户也给A用户转账30元。</p>\n</blockquote>\n<p>那么我们的java程序操作的过程和时间线如下：</p>\n<ol><li> <p>A用户给B用户转账50元，需在程序中开启事务1来执行sql，并获取A的余额同时锁住A这条数据。</p> </li></ol>\n<pre><code># 事务1\nset autocommit=0;\nSTART TRANSACTION;\n# 获取A 的余额并存入A_balance变量：80\nSELECT user_id,@A_balance:=balance from account where user_id = 'A' for UPDATE;\n</code></pre>\n<p>2.B用户给A用户转账30元，需在程序中开启事务2来执行sql，并获取B的余额同时锁住B这条数据。</p>\n<pre><code># 事务2\nset autocommit=0;\nSTART TRANSACTION;\n# 获取A 的余额并存入A_balance变量：60\nSELECT user_id,@A_balance:=balance from account where user_id = 'B' for UPDATE;\n</code></pre>\n<p>3.在事务1中执行剩下的sql</p>\n<pre><code># 获取B 的余额并存入B_balance变量:60\nSELECT user_id,@B_balance:=balance from account where user_id = 'B' for UPDATE;\n\n# 修改A 的余额\nUPDATE account set balance = @A_balance - 50 where user_id = 'A';\n# 修改B 的余额\nUPDATE account set balance = @B_balance + 50 where user_id = 'B';\nCOMMIT;\n</code></pre>\n<p><img alt=\"\" height=\"751\" src=\"image\\58e726eb44e940b793850b68e5e55e35.png\" width=\"1080\"/></p>\n<p> </p>\n<p>可以看到，在事务1中获取B数据的写锁时出现了超时情况。为什么会这样呢？主要是因为我们在步骤2的时候已经在事务2中获取到B数据的写锁了，那么在事务2提交或回滚前事务1永远都拿不到B数据的写锁。</p>\n<p></p>\n<p>4.在事务2中执行剩下的sql</p>\n<pre><code># 获取A 的余额并存入B_balance变量:60\nSELECT user_id,@B_balance:=balance from account where user_id = 'A' for UPDATE;\n\n# 修改B 的余额\nUPDATE account set balance = @A_balance - 30 where user_id = 'B';\n# 修改A 的余额\nUPDATE account set balance = @B_balance + 30 where user_id = 'A';\nCOMMIT;\n</code></pre>\n<p><img alt=\"\" height=\"753\" src=\"image\\60acb733843543818c6498ef58b602fa.png\" width=\"1080\"/></p>\n<p> </p>\n<blockquote>\n<p>同理可得，在事务2中获取A数据的写锁时也出现了超时情况。因为步骤1的时候已经在事务1中获取到A数据的写锁了，那么在事务1提交或回滚前事务2永远都拿不到A数据的写锁。</p>\n</blockquote>\n<p>5. 为什么会出现这种情况呢？</p>\n<blockquote>\n<p>主要是因为事务1和事务2存在相互等待获取锁的过程，导致两个事务都挂起阻塞，最终抛出获取锁超时的异常。</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\2c90a925c771f9910c1a5bb61854587d.png\"/></p>\n<p></p>\n<h1><strong>3.5 死锁导致的问题</strong></h1>\n<blockquote>\n<p>众所周知，数据库的连接资源是很珍贵的，如果一个连接因为事务阻塞长时间不释放，那么后面新的请求要执行的sql也会排队等待，越积越多，最终会拖垮整个应用。一旦你的应用部署在微服务体系中而又没有做熔断处理，由于整个链路被阻断，那么就会引发雪崩效应，导致很严重的生产事故。</p>\n</blockquote>\n<h1><strong>4、如何解决死锁问题？</strong></h1>\n<blockquote>\n<p>要想解决死锁问题，我们可以从死锁的四个必要条件入手。<br/> 由于资源独占条件和不剥夺条件是锁本质的功能体现，无法修改，所以咱们从另外两个条件尝试去解决。</p>\n</blockquote>\n<h1><strong>4.1 打破请求和保持条件</strong></h1>\n<blockquote>\n<p>根据上面定义可知，出现这个情况是因为事务1和事务2同时去竞争锁A和锁B，那么我们是否可以保证锁A和锁B一次只能被一个事务竞争和持有呢？<br/> 答案是肯定可以的。下面咱们通过伪代码来看看：</p>\n</blockquote>\n<pre><code>/**\n* 事务1入参(A, B)\n* 事务2入参(B, A)\n**/\npublic void transferAccounts(String userFrom, String userTo) {\n     // 获取分布式锁\n     Lock lock = Redisson.getLock();\n     // 开启事务\n     JDBC.excute(\"START TRANSACTION;\");\n     // 执行转账sql\n     JDBC.excute(\"# 获取A 的余额并存入A_balance变量：80\\n\" +\n             \"SELECT user_id,@A_balance:=balance from account where user_id = '\" + userFrom + \"' for UPDATE;\\n\" +\n             \"# 获取B 的余额并存入B_balance变量:60\\n\" +\n             \"SELECT user_id,@B_balance:=balance from account where user_id = '\" + userTo + \"' for UPDATE;\\n\" +\n             \"\\n\" +\n             \"# 修改A 的余额\\n\" +\n             \"UPDATE account set balance = @A_balance - 50 where user_id = '\" + userFrom + \"';\\n\" +\n             \"# 修改B 的余额\\n\" +\n             \"UPDATE account set balance = @B_balance + 50 where user_id = '\" + userTo + \"';\\n\");\n     // 提交事务\n     JDBC.excute(\"COMMIT;\");\n     // 释放锁\n     lock.unLock();\n}\n</code></pre>\n<blockquote>\n<p>上面的伪代码显而易见可以解决死锁问题，因为所有的事务都是通过分布式锁来串行执行的。</p>\n</blockquote>\n<p>那么这样就真的万事大吉了吗？</p>\n<blockquote>\n<p>在小流量情况下看起来是没问题的，但是在高并发场景下这里将成为整个服务的性能瓶颈，因为即使你部署了再多的机器，但由于分布式锁的原因，你的业务也只能串行进行，服务性能并不因为集群部署而提高并发量，完全无法满足分布式业务下快、准、稳的要求，所以咱们不妨换种方式来看看怎么解决死锁问题。</p>\n</blockquote>\n<h1><strong>4.2 打破相互获取锁条件（推荐）</strong></h1>\n<blockquote>\n<p>要打破这个条件其实也很简单，那就是事务再获取锁的过程中保证顺序获取即可，也就是锁A始终在锁B之前获取。<br/> 我们来看看之前的伪代码怎么优化？</p>\n</blockquote>\n<pre><code>/**\n* 事务1入参(A, B)\n* 事务2入参(B, A)\n**/\npublic void transferAccounts(String userFrom, String userTo) {\n     // 对用户A和B进行排序，让userFrom始终为用户A，userTo始终为用户B\n     if (userFrom.hashCode() &gt; userTo.hashCode()) {\n         String tmp = userFrom;\n         userFrom = userTo;\n         userTo = tmp;\n     }\n     // 开启事务\n     JDBC.excute(\"START TRANSACTION;\");\n     // 执行转账sql\n     JDBC.excute(\"# 获取A 的余额并存入A_balance变量：80\\n\" +\n             \"SELECT user_id,@A_balance:=balance from account where user_id = '\" + userFrom + \"' for UPDATE;\\n\" +\n             \"# 获取B 的余额并存入B_balance变量:60\\n\" +\n             \"SELECT user_id,@B_balance:=balance from account where user_id = '\" + userTo + \"' for UPDATE;\\n\" +\n             \"\\n\" +\n             \"# 修改A 的余额\\n\" +\n             \"UPDATE account set balance = @A_balance - 50 where user_id = '\" + userFrom + \"';\\n\" +\n             \"# 修改B 的余额\\n\" +\n             \"UPDATE account set balance = @B_balance + 50 where user_id = '\" + userTo + \"';\\n\");\n     // 提交事务\n     JDBC.excute(\"COMMIT;\");\n }\n</code></pre>\n<blockquote>\n<p>假设事务1的入参为(A, B)，事务2入参为(B, A)，由于我们对两个用户参数进行了排序，所以在事务1中需要先获取锁A在获取锁B，事务2也是一样要先获取锁A在获取锁B，两个事务都是顺序获取锁，所以也就打破了相互获取锁的条件，最终完美解决死锁问题。</p>\n</blockquote>\n<h1><strong>5、总结</strong></h1>\n<p>因为mysql在互联网中的大量使用，所以死锁问题还是经常会被问到，希望兄弟们能掌握这方面的知识，提高自己的竞争力。</p>\n</div>\n</div>"}