{"blogid": "126708333", "writerAge": "码龄15年", "writerBlogNum": "312", "writerCollect": "581", "writerComment": "284", "writerFan": "1829", "writerGrade": "6级", "writerIntegral": "6568", "writerName": "与自己作战", "writerProfileAdress": "writer_image\\profile_126708333.jpg", "writerRankTotal": "2688", "writerRankWeekly": "383", "writerThumb": "380", "writerVisitNum": "386329", "blog_read_count": "722", "blog_time": "已于 2022-09-05 23:08:01 修改", "blog_title": "Java 进阶多线程(一)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_2\">一、多线程</a></li><li><ul><li><a href=\"#1Thread_3\">1、继承Thread类(方式一)</a></li><li><ul><li><a href=\"#1_4\">1）实现多线程</a></li><li><a href=\"#2_11\">2）优缺点</a></li></ul>\n</li><li><a href=\"#2Runnable_16\">2、实现Runnable接口(方式二)</a></li><li><ul><li><a href=\"#1_17\">1）实现多线程</a></li><li><a href=\"#2_23\">2）实现多线程(匿名内部类方式)</a></li><li><a href=\"#3_28\">3）优缺点</a></li></ul>\n</li><li><a href=\"#3CallableFutureTask_33\">3、实现Callable、FutureTask接口(方式三)</a></li><li><ul><li><a href=\"#1_34\">1）实现多线程</a></li><li><a href=\"#2_40\">2）优缺点</a></li></ul>\n</li><li><a href=\"#4Thread_52\">4、Thread线程</a></li><li><ul><li><a href=\"#1Thread_53\">1）Thread的构造器</a></li></ul>\n</li><li><a href=\"#5Thread_101\">5、Thread的方法</a></li><li><ul><li><a href=\"#1Thread_102\">1）Thread获取和设置线程名称</a></li><li><a href=\"#2Thread_125\">2）Thread类获得当前线程的对象</a></li><li><a href=\"#3Thread_153\">3）Thread类的线程休眠方法：</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_200\">二、线程安全</a></li><li><a href=\"#_202\">三、线程同步</a></li><li><ul><li><a href=\"#1_210\">1、同步代码块</a></li><li><a href=\"#2_228\">2、同步方法</a></li><li><a href=\"#3Lock_249\">3、Lock锁</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>一、多线程</h1>\n<h2><a id=\"1Thread_3\"></a>1、继承Thread类(方式一)</h2>\n<h3><a id=\"1_4\"></a>1）实现多线程</h3>\n<blockquote>\n<p>继承Thread类<br/> 重写run()方法<br/> 创建线程对象<br/> 调用start()方法启动</p>\n</blockquote>\n<p><font color=\"Red\"><strong>调用run方法会当成普通方法执行，只有调用start方法才是启动一个新的线程执行</strong></font></p>\n<h3><a id=\"2_11\"></a>2）优缺点</h3>\n<ul><li>优点</li></ul>\n<blockquote>\n<p>编码简单</p>\n</blockquote>\n<ul><li>缺点</li></ul>\n<blockquote>\n<p>是单继承，线程类继承Thread后，不能继承其他类，不便于扩展</p>\n</blockquote>\n<h2><a id=\"2Runnable_16\"></a>2、实现Runnable接口(方式二)</h2>\n<h3><a id=\"1_17\"></a>1）实现多线程</h3>\n<blockquote>\n<p>定义一个线程任务类MyRunnable实现Runnable接口，重写run()方法<br/> 创建MyRunnable对象<br/> 把MyRunnable任务对象交给Thread线程对象处理<br/> 调用线程对象的start()方法启动线程</p>\n</blockquote>\n<h3><a id=\"2_23\"></a>2）实现多线程(匿名内部类方式)</h3>\n<blockquote>\n<p>创建Runnable的匿名内部类对象<br/> 交给Thread处理<br/> 调用线程对象的start()启动线程</p>\n</blockquote>\n<h3><a id=\"3_28\"></a>3）优缺点</h3>\n<ul><li>优点</li></ul>\n<blockquote>\n<p>实现了Runnale接口，可以继续继承和实现</p>\n</blockquote>\n<ul><li>缺点</li></ul>\n<blockquote>\n<p>线程有执行结果是不能直接返回</p>\n</blockquote>\n<h2><a id=\"3CallableFutureTask_33\"></a>3、实现Callable、FutureTask接口(方式三)</h2>\n<h3><a id=\"1_34\"></a>1）实现多线程</h3>\n<blockquote>\n<p>创建Callable接口实现类,重写call()方法,封装<br/> 用FutureTask把Callable对象封装成线程任务对象<br/> 线程任务对象交给Thread处理，调用start()方法启动线程,执行任务<br/> 执行完毕后,通过FutureTask的get方法去获取任务执行的结果</p>\n</blockquote>\n<h3><a id=\"2_40\"></a>2）优缺点</h3>\n<ul><li>优点</li></ul>\n<blockquote>\n<p>线程任务类只是实现接口，可以继续继承类和实现接口，扩展性强。<br/> 可以在线程执行完毕后去获取线程执行的结果。</p>\n</blockquote>\n<ul><li>缺点</li></ul>\n<blockquote>\n<p>编码复杂</p>\n</blockquote>\n<table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>public FutureTask&lt;&gt;(Callable call)</code></td><td>把Callable对象封装成FutureTask对象</td></tr><tr><td><code>public V get() throws Exception</code></td><td>获取线程执行call方法返回的结果</td></tr></tbody></table>\n<h2><a id=\"4Thread_52\"></a>4、Thread线程</h2>\n<h3><a id=\"1Thread_53\"></a>1）Thread的构造器</h3>\n<table><thead><tr><th>构造器</th><th>解释</th></tr></thead><tbody><tr><td><code>public Thread(String name) </code></td><td>为当前线程指定名称</td></tr><tr><td><code>public Thread(Runnable target) </code></td><td>封装Runnable对象成为线程对象</td></tr><tr><td><code>public Thread(Runnable target ，String name ) </code></td><td>封装Runnable对象成为线程对象，并指定线程名称</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2cd4f154c39d44dc86c1a199030935c3.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Runnable \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" ===&gt;&gt; \"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassStructure</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyRunnable</span> myRunnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//分配一个带有指定目标新的线程对象</span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>myRunnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取当前线程名称</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前名称-1：\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//设置新的名称</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread-1-新\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> newName <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前名称-1：\"</span><span class=\"token operator\">+</span> newName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//启动多线程</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">MyRunnable</span> mr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//分配一个带有指定目标新的线程对象并指定名称</span>\n        <span class=\"token class-name\">Thread</span> td <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mr<span class=\"token punctuation\">,</span><span class=\"token string\">\"指定名称：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> strName <span class=\"token operator\">=</span> td<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前名称-2：\"</span><span class=\"token operator\">+</span> strName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        td<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"5Thread_101\"></a>5、Thread的方法</h2>\n<h3><a id=\"1Thread_102\"></a>1）Thread获取和设置线程名称</h3>\n<table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>String getName​() </code></td><td>获取当前线程的名称，默认线程名称是Thread-索引</td></tr><tr><td><code>void setName​(String name) </code></td><td>将此线程的名称更改为指定的名称，通过构造器也可以设置线程名称</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a44a0192b3da41658f36dc0918a6a099.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassStructure</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> nameNew <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameNew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h3><a id=\"2Thread_125\"></a>2）Thread类获得当前线程的对象</h3>\n<table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>public static Thread currentThread()</code></td><td>返回对当前正在执行的线程对象的引用</td></tr></tbody></table>\n<p><font color=\"red\">注意：</font></p>\n<blockquote>\n<p>1、此方法是Thread类的静态方法，可以直接使用Thread类调用。<br/> 2、这个方法是在哪个线程执行中调用的，就会得到哪个线程对象。</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//获得当前正在执行的线程对象</span>\n            <span class=\"token class-name\">Thread</span> td <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//获取当前线程名称</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"3Thread_153\"></a>3）Thread类的线程休眠方法：</h3>\n<table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>public static void sleep(long time) </code></td><td>让当前线程休眠指定的时间后再继续执行，单位为毫秒</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5dfcd8e4f64e4f1fa9bbbea74fb8f5fc.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//获得当前正在执行的线程对象</span>\n            <span class=\"token class-name\">Thread</span> td <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//获取当前线程名称</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassStructure</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyRunnable</span> mr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//分配一个带有指定目标新的线程对象并指定名称</span>\n        <span class=\"token class-name\">Thread</span> td <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mr<span class=\"token punctuation\">,</span><span class=\"token string\">\"指定名称：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> strName <span class=\"token operator\">=</span> td<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前名称-2：\"</span><span class=\"token operator\">+</span> strName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//暂停3秒</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        td<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h1><a id=\"_200\"></a>二、线程安全</h1>\n<blockquote>\n<p>多个线程同时访问同一个共享资源且存在修改该资源</p>\n</blockquote>\n<h1><a id=\"_202\"></a>三、线程同步</h1>\n<ul><li>概念</li></ul>\n<blockquote>\n<p>解决线程安全问题</p>\n</blockquote>\n<ul><li>保证线程安全</li></ul>\n<blockquote>\n<p>多个线程实现先后依次访问共享资源，可以解决安全问题</p>\n</blockquote>\n<ul><li>思想</li></ul>\n<blockquote>\n<p>加锁：让多个线程实现先后依次访问共享资源，可以解决安全问题</p>\n</blockquote>\n<h2><a id=\"1_210\"></a>1、同步代码块</h2>\n<ul><li>原理</li></ul>\n<blockquote>\n<p>每次只能一个线程进入，执行完毕后自动解锁，其它线程才可以进来执行</p>\n</blockquote>\n<ul><li>作用</li></ul>\n<blockquote>\n<p>线程安全问题的核心代码给上锁</p>\n</blockquote>\n<ul><li>实现线程安全</li></ul>\n<blockquote>\n<p>对出现问题的核心代码是使用synchronized进行加锁<br/> 每次只能一个线程占锁进入执行</p>\n</blockquote>\n<ul><li>格式</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>同步锁对象<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t操作共享资源的代码<span class=\"token punctuation\">(</span>核心代码<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>同步锁对象要求</li></ul>\n<blockquote>\n<p>对于实例方法建议使用this作为锁对象<br/> 对于静态方法建议使用字节码（类名.class）对象作为锁对象</p>\n</blockquote>\n<h2><a id=\"2_228\"></a>2、同步方法</h2>\n<ul><li>原理</li></ul>\n<blockquote>\n<p>每次只能一个线程进入，执行完毕后自动解锁，其它线程才可以进来执行</p>\n</blockquote>\n<ul><li>作用</li></ul>\n<blockquote>\n<p>线程安全问题的核心代码给上锁</p>\n</blockquote>\n<ul><li>格式</li><li>实现线程安全</li></ul>\n<blockquote>\n<p>对出现问题的核心代码是使用synchronized进行加锁<br/> 每次只能一个线程占锁进入执行</p>\n</blockquote>\n<pre><code class=\"prism language-java\">修饰符 <span class=\"token keyword\">synchronized</span> 返回值类型 方法名称<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t操作共享资源的代码\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>同步锁对象要求</li></ul>\n<blockquote>\n<p>对于实例方法建议使用this作为锁对象<br/> 对于静态方法建议使用字节码（类名.class）对象作为锁对象</p>\n</blockquote>\n<ul><li>底层原理</li></ul>\n<blockquote>\n<p>如果方法是实例方法：同步方法默认用this作为的锁对象。但是代码要高度面向对象<br/> 如果方法是静态方法：同步方法默认用类名.class作为的锁对象</p>\n</blockquote>\n<h2><a id=\"3Lock_249\"></a>3、Lock锁</h2>\n<ul><li>原理</li></ul>\n<blockquote>\n<p>锁对象Lock，使用更加灵活、方便<br/> Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作<br/> Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来构建Lock锁对象</p>\n</blockquote>\n<table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>public ReentrantLock​()</code></td><td>获得Lock锁的实现类对象</td></tr><tr><td><code>void lock()</code></td><td>加锁</td></tr><tr><td><code>void unlock()</code></td><td>解锁</td></tr></tbody></table>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}