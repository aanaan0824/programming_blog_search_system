{"blogid": "115487212", "writerAge": "码龄2年", "writerBlogNum": "313", "writerCollect": "5606", "writerComment": "1255", "writerFan": "751", "writerGrade": "6级", "writerIntegral": "7777", "writerName": "麒麟来编程", "writerProfileAdress": "writer_image\\profile_115487212.jpg", "writerRankTotal": "3719", "writerRankWeekly": "18899", "writerThumb": "1363", "writerVisitNum": "413860", "blog_read_count": "12463", "blog_time": "于 2021-04-07 16:10:28 发布", "blog_title": "【金三银四】多线程面试题（2021最新版）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E6%9C%80%E5%90%8E-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%9C%80%E5%90%8E\">前言</a></p>\n<p id=\"1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F\">1.多线程有什么用？</a></p>\n<p id=\"2.%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#2.%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">2.线程和进程的区别是什么？</a></p>\n<p id=\"3.Java%20%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#3.Java%20%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9F\">3.Java 实现线程有哪几种方式？</a></p>\n<p id=\"4.%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B%E6%96%B9%E6%B3%95%20start()%E5%92%8C%20run()%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#4.%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B%E6%96%B9%E6%B3%95%20start%28%29%E5%92%8C%20run%28%29%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\">4.启动线程方法 start()和 run()有什么区别？</a></p>\n<p id=\"5.%E6%80%8E%E4%B9%88%E7%BB%88%E6%AD%A2%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E7%BB%88%E6%AD%A2%E7%BA%BF%E7%A8%8B%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#5.%E6%80%8E%E4%B9%88%E7%BB%88%E6%AD%A2%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E7%BB%88%E6%AD%A2%E7%BA%BF%E7%A8%8B%EF%BC%9F\">5.怎么终止一个线程？如何优雅地终止线程？</a></p>\n<p id=\"6.%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E7%8A%B6%E6%80%81%EF%BC%9F%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E6%B5%81%E8%BD%AC%E7%9A%84%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#6.%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E7%8A%B6%E6%80%81%EF%BC%9F%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E6%B5%81%E8%BD%AC%E7%9A%84%EF%BC%9F\">6.一个线程的生命周期有哪几种状态？它们之间如何流转的？</a></p>\n<p id=\"7.%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%20wait()%E5%92%8C%20sleep()%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#7.%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%20wait%28%29%E5%92%8C%20sleep%28%29%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\">7.线程中的 wait()和 sleep()方法有什么区别？</a></p>\n<p id=\"8.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#8.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%9F\">8.多线程同步有哪几种方法？</a></p>\n<p id=\"9.%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%BB%E9%94%81%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#9.%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%BB%E9%94%81%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%EF%BC%9F\">9.什么是死锁？如何避免死锁？</a></p>\n<p id=\"10.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#10.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1%EF%BC%9F\">10.多线程之间如何进行通信？</a></p>\n<p id=\"11%E3%80%81%E7%BA%BF%E7%A8%8B%E6%80%8E%E6%A0%B7%E6%8B%BF%E5%88%B0%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#11%E3%80%81%E7%BA%BF%E7%A8%8B%E6%80%8E%E6%A0%B7%E6%8B%BF%E5%88%B0%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%EF%BC%9F\">11、线程怎样拿到返回结果？</a></p>\n<p id=\"12%E3%80%81violatile%20%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#12%E3%80%81violatile%20%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9F\">12、violatile 关键字的作用？</a></p>\n<p id=\"13%E3%80%81%E6%96%B0%E5%BB%BA%20T1%E3%80%81T2%E3%80%81T3%20%E4%B8%89%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%83%E4%BB%AC%E6%8C%89%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#13%E3%80%81%E6%96%B0%E5%BB%BA%20T1%E3%80%81T2%E3%80%81T3%20%E4%B8%89%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%83%E4%BB%AC%E6%8C%89%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C%EF%BC%9F\">13、新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？</a></p>\n<p id=\"14%E3%80%81%E6%80%8E%E4%B9%88%E6%8E%A7%E5%88%B6%E5%90%8C%E4%B8%80%E6%97%B6%E9%97%B4%E5%8F%AA%E6%9C%89%203%20%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#14%E3%80%81%E6%80%8E%E4%B9%88%E6%8E%A7%E5%88%B6%E5%90%8C%E4%B8%80%E6%97%B6%E9%97%B4%E5%8F%AA%E6%9C%89%203%20%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%EF%BC%9F\">14、怎么控制同一时间只有 3 个线程运行？</a></p>\n<p id=\"15%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#15%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9F\">15、为什么要使用线程池？</a></p>\n<p id=\"16%E3%80%81%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B9%B6%E8%AE%B2%E8%AE%B2%E5%85%B6%E4%B8%AD%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#16%E3%80%81%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B9%B6%E8%AE%B2%E8%AE%B2%E5%85%B6%E4%B8%AD%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E3%80%82\">16、常用的几种线程池并讲讲其中的工作原理。</a></p>\n<p id=\"17%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B%20submit()%E5%92%8C%20execute()%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#17%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B%20submit%28%29%E5%92%8C%20execute%28%29%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F\">17、线程池启动线程 submit()和 execute()方法有什么不同？</a></p>\n<p id=\"18%E3%80%81CyclicBarrier%20%E5%92%8C%20CountDownLatch%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#18%E3%80%81CyclicBarrier%20%E5%92%8C%20CountDownLatch%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\">18、CyclicBarrier 和 CountDownLatch 的区别？</a></p>\n<p id=\"19%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%B4%BB%E9%94%81%E3%80%81%E9%A5%A5%E9%A5%BF%E3%80%81%E6%97%A0%E9%94%81%E3%80%81%E6%AD%BB%E9%94%81%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#19%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%B4%BB%E9%94%81%E3%80%81%E9%A5%A5%E9%A5%BF%E3%80%81%E6%97%A0%E9%94%81%E3%80%81%E6%AD%BB%E9%94%81%EF%BC%9F\">19、什么是活锁、饥饿、无锁、死锁？</a></p>\n<p id=\"20%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#20%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%9F\">20、什么是原子性、可见性、有序性？</a></p>\n<p id=\"21%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#21%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F\">21、什么是守护线程？有什么用？</a></p>\n<p id=\"22%E3%80%81%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%91%E7%94%9F%E5%BC%82%E5%B8%B8%E4%BC%9A%E6%80%8E%E6%A0%B7%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#22%E3%80%81%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%91%E7%94%9F%E5%BC%82%E5%B8%B8%E4%BC%9A%E6%80%8E%E6%A0%B7%EF%BC%9F\">22、一个线程运行时发生异常会怎样？</a></p>\n<p id=\"23%E3%80%81%E7%BA%BF%E7%A8%8B%20yield()%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#23%E3%80%81%E7%BA%BF%E7%A8%8B%20yield%28%29%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F\">23、线程 yield()方法有什么用？</a></p>\n<p id=\"24%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E5%85%A5%E9%94%81%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#24%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E5%85%A5%E9%94%81%EF%BC%9F\">24、什么是重入锁？</a></p>\n<p id=\"25%E3%80%81Synchronized%20%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E7%94%A8%E6%B3%95%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#25%E3%80%81Synchronized%20%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E7%94%A8%E6%B3%95%EF%BC%9F\">25、Synchronized 有哪几种用法？</a></p>\n<p id=\"26%E3%80%81Fork%2FJoin%20%E6%A1%86%E6%9E%B6%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#26%E3%80%81Fork%2FJoin%20%E6%A1%86%E6%9E%B6%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84%EF%BC%9F\">26、Fork/Join 框架是干什么的？</a></p>\n<p id=\"27%E3%80%81%E7%BA%BF%E7%A8%8B%E6%95%B0%E8%BF%87%E5%A4%9A%E4%BC%9A%E9%80%A0%E6%88%90%E4%BB%80%E4%B9%88%E5%BC%82%E5%B8%B8%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#27%E3%80%81%E7%BA%BF%E7%A8%8B%E6%95%B0%E8%BF%87%E5%A4%9A%E4%BC%9A%E9%80%A0%E6%88%90%E4%BB%80%E4%B9%88%E5%BC%82%E5%B8%B8%EF%BC%9F\">27、线程数过多会造成什么异常？</a></p>\n<p id=\"28%E3%80%81%E8%AF%B4%E8%AF%B4%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%92%8C%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#28%E3%80%81%E8%AF%B4%E8%AF%B4%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%92%8C%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88%E3%80%82\">28、说说线程安全的和不安全的集合。</a></p>\n<p id=\"29%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%20CAS%20%E7%AE%97%E6%B3%95%EF%BC%9F%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BA%94%E7%94%A8%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#29%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%20CAS%20%E7%AE%97%E6%B3%95%EF%BC%9F%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BA%94%E7%94%A8%E3%80%82\">29、什么是 CAS 算法？在多线程中有哪些应用。</a></p>\n<p id=\"30%E3%80%81%E6%80%8E%E4%B9%88%E6%A3%80%E6%B5%8B%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E9%94%81%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#30%E3%80%81%E6%80%8E%E4%B9%88%E6%A3%80%E6%B5%8B%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E9%94%81%EF%BC%9F\">30、怎么检测一个线程是否拥有锁？</a></p>\n<p id=\"31%E3%80%81Jdk%20%E4%B8%AD%E6%8E%92%E6%9F%A5%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98%E7%94%A8%E4%BB%80%E4%B9%88%E5%91%BD%E4%BB%A4%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#31%E3%80%81Jdk%20%E4%B8%AD%E6%8E%92%E6%9F%A5%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98%E7%94%A8%E4%BB%80%E4%B9%88%E5%91%BD%E4%BB%A4%EF%BC%9F\">31、Jdk 中排查多线程问题用什么命令？</a></p>\n<p id=\"32%E3%80%81%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#32%E3%80%81%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88%EF%BC%9F\">32、线程同步需要注意什么？</a></p>\n<p id=\"33%E3%80%81%E7%BA%BF%E7%A8%8B%20wait()%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%89%8D%E6%8F%90%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#33%E3%80%81%E7%BA%BF%E7%A8%8B%20wait%28%29%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%89%8D%E6%8F%90%EF%BC%9F\">33、线程 wait()方法使用有什么前提？</a></p>\n<p id=\"34%E3%80%81Fork%2FJoin%20%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#34%E3%80%81Fork%2FJoin%20%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%9F\">34、Fork/Join 框架使用有哪些要注意的地方？</a></p>\n<p id=\"35%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#35%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%EF%BC%9F\">35、线程之间如何传递数据？</a></p>\n<p id=\"36%E3%80%81%E4%BF%9D%E8%AF%81%22%E5%8F%AF%E8%A7%81%E6%80%A7%22%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#36%E3%80%81%E4%BF%9D%E8%AF%81%22%E5%8F%AF%E8%A7%81%E6%80%A7%22%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9F\">36、保证\"可见性\"有哪几种方式？</a></p>\n<p id=\"37%E3%80%81%E8%AF%B4%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%20Lock%20%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E9%94%81%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#37%E3%80%81%E8%AF%B4%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%20Lock%20%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E9%94%81%E3%80%82\">37、说几个常用的 Lock 接口实现锁。</a></p>\n<p id=\"38%E3%80%81ThreadLocal%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#38%E3%80%81ThreadLocal%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F\">38、ThreadLocal 是什么？有什么应用场景？</a></p>\n<p id=\"39%E3%80%81ReadWriteLock%20%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#39%E3%80%81ReadWriteLock%20%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F\">39、ReadWriteLock 有什么用？</a></p>\n<p id=\"40%E3%80%81FutureTask%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#40%E3%80%81FutureTask%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">40、FutureTask 是什么？</a></p>\n<p id=\"41%E3%80%81%E6%80%8E%E4%B9%88%E5%94%A4%E9%86%92%E4%B8%80%E4%B8%AA%E9%98%BB%E5%A1%9E%E7%9A%84%E7%BA%BF%E7%A8%8B%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#41%E3%80%81%E6%80%8E%E4%B9%88%E5%94%A4%E9%86%92%E4%B8%80%E4%B8%AA%E9%98%BB%E5%A1%9E%E7%9A%84%E7%BA%BF%E7%A8%8B%EF%BC%9F\">41、怎么唤醒一个阻塞的线程？</a></p>\n<p id=\"42%E3%80%81%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%AF%B9%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E5%B8%AE%E5%8A%A9%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#42%E3%80%81%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%AF%B9%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E5%B8%AE%E5%8A%A9%EF%BC%9F\">42、不可变对象对多线程有什么帮助？</a></p>\n<p id=\"43%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#43%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F\">43、多线程上下文切换是什么意思？</a></p>\n<p id=\"44%E3%80%81Java%20%E4%B8%AD%E7%94%A8%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#44%E3%80%81Java%20%E4%B8%AD%E7%94%A8%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%9F\">44、Java 中用到了什么线程调度算法？</a></p>\n<p id=\"45%E3%80%81Thread.sleep(0)%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#45%E3%80%81Thread.sleep%280%29%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">45、Thread.sleep(0)的作用是什么？</a></p>\n<p id=\"46%E3%80%81Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%9F%9F%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E7%9A%84%EF%BC%8C%E5%93%AA%E4%BA%9B%E6%98%AF%E4%B8%8D%E5%85%B1%E4%BA%AB%E7%9A%84%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#46%E3%80%81Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%9F%9F%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E7%9A%84%EF%BC%8C%E5%93%AA%E4%BA%9B%E6%98%AF%E4%B8%8D%E5%85%B1%E4%BA%AB%E7%9A%84%EF%BC%9F\">46、Java 内存模型是什么，哪些区域是线程共享的，哪些是不共享的？</a></p>\n<p id=\"%E2%80%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%80%8B\">​</a></p>\n<p id=\"47%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#47%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%EF%BC%9F\">47、什么是乐观锁和悲观锁？</a></p>\n<p id=\"48%E3%80%81Hashtable%20%E7%9A%84%20size()%E6%96%B9%E6%B3%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E5%90%8C%E6%AD%A5%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#48%E3%80%81Hashtable%20%E7%9A%84%20size%28%29%E6%96%B9%E6%B3%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E5%90%8C%E6%AD%A5%EF%BC%9F\">48、Hashtable 的 size()方法为什么要做同步？</a></p>\n<p id=\"49%E3%80%81%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%92%8C%E5%90%8C%E6%AD%A5%E5%9D%97%EF%BC%8C%E5%93%AA%E7%A7%8D%E6%9B%B4%E5%A5%BD%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#49%E3%80%81%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%92%8C%E5%90%8C%E6%AD%A5%E5%9D%97%EF%BC%8C%E5%93%AA%E7%A7%8D%E6%9B%B4%E5%A5%BD%EF%BC%9F\">49、同步方法和同步块，哪种更好？</a></p>\n<p id=\"50%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E6%97%8B%E9%94%81%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#50%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E6%97%8B%E9%94%81%EF%BC%9F\">50、什么是自旋锁？</a></p>\n<p id=\"51%E3%80%81Runnable%20%E5%92%8C%20Thread%20%E7%94%A8%E5%93%AA%E4%B8%AA%E5%A5%BD%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#51%E3%80%81Runnable%20%E5%92%8C%20Thread%20%E7%94%A8%E5%93%AA%E4%B8%AA%E5%A5%BD%EF%BC%9F\">51、Runnable 和 Thread 用哪个好？</a></p>\n<p id=\"52%E3%80%81Java%20%E4%B8%AD%20notify%20%E5%92%8C%20notifyAll%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#52%E3%80%81Java%20%E4%B8%AD%20notify%20%E5%92%8C%20notifyAll%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\">52、Java 中 notify 和 notifyAll 有什么区别？</a></p>\n<p id=\"53%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%20wait%2Fnotify%2FnotifyAll%20%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%E4%B8%8D%E5%9C%A8%20thread%20%E7%B1%BB%E9%87%8C%E9%9D%A2%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#53%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%20wait%2Fnotify%2FnotifyAll%20%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%E4%B8%8D%E5%9C%A8%20thread%20%E7%B1%BB%E9%87%8C%E9%9D%A2%EF%BC%9F\">53、为什么 wait/notify/notifyAll 这些方法不在 thread 类里面？</a></p>\n<p id=\"54%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%20wait%20%E5%92%8C%20notify%20%E6%96%B9%E6%B3%95%E8%A6%81%E5%9C%A8%E5%90%8C%E6%AD%A5%E5%9D%97%E4%B8%AD%E8%B0%83%E7%94%A8%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#54%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%20wait%20%E5%92%8C%20notify%20%E6%96%B9%E6%B3%95%E8%A6%81%E5%9C%A8%E5%90%8C%E6%AD%A5%E5%9D%97%E4%B8%AD%E8%B0%83%E7%94%A8%EF%BC%9F\">54、为什么 wait 和 notify 方法要在同步块中调用？</a></p>\n<p id=\"55%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%9C%A8%E5%BE%AA%E7%8E%AF%E4%B8%AD%E6%A3%80%E6%9F%A5%E7%AD%89%E5%BE%85%E6%9D%A1%E4%BB%B6%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#55%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%9C%A8%E5%BE%AA%E7%8E%AF%E4%B8%AD%E6%A3%80%E6%9F%A5%E7%AD%89%E5%BE%85%E6%9D%A1%E4%BB%B6%EF%BC%9F\">55、为什么你应该在循环中检查等待条件？</a></p>\n<p id=\"56%E3%80%81Java%20%E4%B8%AD%E5%A0%86%E5%92%8C%E6%A0%88%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#56%E3%80%81Java%20%E4%B8%AD%E5%A0%86%E5%92%8C%E6%A0%88%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F\">56、Java 中堆和栈有什么不同？</a></p>\n<p id=\"57%E3%80%81%E4%BD%A0%E5%A6%82%E4%BD%95%E5%9C%A8%20Java%20%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#57%E3%80%81%E4%BD%A0%E5%A6%82%E4%BD%95%E5%9C%A8%20Java%20%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%EF%BC%9F\">57、你如何在 Java 中获取线程堆栈？</a></p>\n<p id=\"58%E3%80%81%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#58%E3%80%81%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%9F\">58、如何创建线程安全的单例模式？</a></p>\n<p id=\"59%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%BB%E5%A1%9E%E5%BC%8F%E6%96%B9%E6%B3%95%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#59%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%BB%E5%A1%9E%E5%BC%8F%E6%96%B9%E6%B3%95%EF%BC%9F\">59、什么是阻塞式方法？</a></p>\n<p id=\"60%E3%80%81%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1%E6%97%B6%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%98%9F%E5%88%97%E5%B7%B2%E6%BB%A1%E4%BC%9A%E6%97%B6%E5%8F%91%E4%BC%9A%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#60%E3%80%81%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1%E6%97%B6%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%98%9F%E5%88%97%E5%B7%B2%E6%BB%A1%E4%BC%9A%E6%97%B6%E5%8F%91%E4%BC%9A%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F\">60、提交任务时线程池队列已满会时发会生什么？</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#%E6%9C%80%E5%90%8E\">最后</a></p>\n<hr id=\"hr-toc\"/>\n<p><strong style=\"color:#4f4f4f;font-size:28px;font-weight:bold;\">前言</strong></p>\n<h1 id=\"%E6%9C%80%E5%90%8E\"><a name=\"t81\"></a></h1>\n<p>现在不管是大公司还是小公司，去面试都会问到多线程与并发编程的知识，大家面试的时候这方面的知识一定要提前做好储备。</p>\n<p>小编分享的这份金三银四Java后端开发面试总结包含了JavaOOP、Java集合容器、Java异常、并发编程、Java反射、Java序列化、JVM、Redis、Spring MVC、MyBatis、MySQL数据库、消息中间件MQ、Dubbo、Linux、ZooKeeper、 分布式&amp;数据结构与算法等26个专题技术点，都是小编在各个大厂总结出来的面试真题，已经有很多粉丝靠这份PDF拿下众多大厂的offer，今天在这里总结分享给到大家！【持续更新中！】</p>\n<p>完整版Java面试题地址：<a href=\"https://mp.weixin.qq.com/s/VZ7wormwowlSPnA_XAnZaw\">2021最新面试题合集集锦</a>。</p>\n<table cellspacing=\"0\"><tbody><tr><td>序号</td><td>专题</td><td>内容</td><td>链接地址</td></tr><tr><td>1</td><td>中间件</td><td>【金三银四】Java中间件面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/114002362\">https://blog.csdn.net/SQY0809/article/details/114002362</a></u></td></tr><tr><td>2</td><td>微服务</td><td>【金三银四】Java微服务面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/113923549\">https://blog.csdn.net/SQY0809/article/details/113923549</a></u></td></tr><tr><td>3</td><td>并发编程</td><td>【金三银四】Java并发编程面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/113895576\">https://blog.csdn.net/SQY0809/article/details/113895576</a></u></td></tr><tr><td>4</td><td> Java基础</td><td>【金三银四】Java基础知识面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115146056\">https://blog.csdn.net/SQY0809/article/details/115146056</a></u></td></tr><tr><td>5</td><td>Spring Boot</td><td>【金三银四】Spring Boot面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115186811\">https://blog.csdn.net/SQY0809/article/details/115186811</a></u></td></tr><tr><td>6</td><td> Redis</td><td>【金三银四】Redis面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115188010\">https://blog.csdn.net/SQY0809/article/details/115188010</a></u></td></tr><tr><td>7</td><td> Spring MVC</td><td>【金三银四】Spring MVC面试题（2021最新版）</td><td><a href=\"https://blog.csdn.net/SQY0809/article/details/115220638\">https://blog.csdn.net/SQY0809/article/details/115220638</a></td></tr><tr><td>8</td><td>Spring Cloud</td><td>【金三银四】Spring Cloud面试题（2021最新版）</td><td><a href=\"https://blog.csdn.net/SQY0809/article/details/115220987\">https://blog.csdn.net/SQY0809/article/details/115220987</a></td></tr><tr><td>9</td><td>MySQL优化</td><td>【金三银四】MySQL优化面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115254620\">https://blog.csdn.net/SQY0809/article/details/115254620</a></u></td></tr><tr><td>10</td><td>JVM</td><td>【金三银四】JVM性能调优面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115283079\">https://blog.csdn.net/SQY0809/article/details/115283079</a></u></td></tr><tr><td>11</td><td>Linux</td><td>【金三银四】Linux面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115283583\">https://blog.csdn.net/SQY0809/article/details/115283583</a></u></td></tr><tr><td>12</td><td>Mybatis</td><td>【金三银四】Mybatis面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115285732\">https://blog.csdn.net/SQY0809/article/details/115285732</a></u></td></tr><tr><td>13</td><td>网络编程</td><td>【金三银四】TCP，UDP，Socket，Http网络编程面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115464896\">https://blog.csdn.net/SQY0809/article/details/115464896</a></u></td></tr><tr><td>14</td><td>设计模式</td><td>【金三银四】设计模式面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115466449\">https://blog.csdn.net/SQY0809/article/details/115466449</a></u></td></tr><tr><td>15</td><td>大数据</td><td>金三银四】大数据面试题100道（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115484939\">https://blog.csdn.net/SQY0809/article/details/115484939</a></u></td></tr><tr><td>16</td><td>Tomcat</td><td>【金三银四】Tomcat面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115486648\">https://blog.csdn.net/SQY0809/article/details/115486648</a></u></td></tr><tr><td>17</td><td>多线程</td><td>【金三银四】多线程面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115487212\">https://blog.csdn.net/SQY0809/article/details/115487212</a></u></td></tr><tr><td>18</td><td>Nginx</td><td>【金三银四】Nginx_BIO_NIO_AIO面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115488446\">https://blog.csdn.net/SQY0809/article/details/115488446</a></u></td></tr><tr><td>19</td><td>memcache</td><td>【金三银四】memcache面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115494213\">https://blog.csdn.net/SQY0809/article/details/115494213</a></u></td></tr><tr><td>20</td><td>java异常</td><td>【金三银四】java异常面试题（2021最新版）</td><td><u><a href=\"https://blog.csdn.net/SQY0809/article/details/115530401\">https://blog.csdn.net/SQY0809/article/details/115530401</a></u></td></tr><tr><td>21</td><td>Java虚拟机</td><td>【金三银四】Java虚拟机面试题（2021最新版）</td><td><a href=\"https://blog.csdn.net/SQY0809/article/details/115532365\">https://blog.csdn.net/SQY0809/article/details/115532365</a></td></tr><tr><td>22</td><td>Java集合</td><td>【金三银四】Java集合面试题（2021最新版）</td><td><a href=\"https://blog.csdn.net/SQY0809/article/details/115599284\">https://blog.csdn.net/SQY0809/article/details/115599284</a></td></tr><tr><td>23</td><td>Git常用命令</td><td>【金三银四】Git常用命令（2021最新版）</td><td><a href=\"https://blog.csdn.net/SQY0809/article/details/115602390\">https://blog.csdn.net/SQY0809/article/details/115602390</a></td></tr><tr><td>24</td><td>Elasticsearch</td><td>【金三银四】Elasticsearch面试题（2021最新版）</td><td><a href=\"https://blog.csdn.net/SQY0809/article/details/115604293\">https://blog.csdn.net/SQY0809/article/details/115604293</a></td></tr><tr><td>25</td><td>Dubbo</td><td>【金三银四】Dubbo面试题（2021最新版）</td><td><a href=\"https://blog.csdn.net/SQY0809/article/details/115605560\">https://blog.csdn.net/SQY0809/article/details/115605560</a></td></tr></tbody></table>\n<h3 id=\"1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F\">1.多线程有什么用？</h3>\n<p>1）发挥多核CPU 的优势</p>\n<p>随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4 核、8 核甚至 16 核的也都不少见，如果是单线程的程序，那么在双核 CPU 上 就浪费了 50%， 在 4 核 CPU 上就浪费了 75%。单核 CPU 上所谓的\"多线程\"那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快， 看着像多个线程\"同时\"运行罢了。多核 CPU 上的多线程才是真正的多线程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU 的优势来，达到充分利用CPU 的目的。</p>\n<p>2）防止阻塞</p>\n<p>从程序运行效率的角度来看，单核 CPU 不但不会发挥出多线程的优势，反而会因为在单核CPU 上运行多线程导致线程上下文的切换，而降低程序整体的效率。但</p>\n<p>是单核 CPU 我们还是要应用多线程，就是为了防止阻塞。试想，如果单核 CPU 使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。</p>\n<p>3）便于建模</p>\n<p>这是另外一个没有这么明显的优点了。假设有一个大的任务 A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务 A 分解成几个小任务，任务B、任务 C、任务 D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。</p>\n<h3 id=\"2.%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">2.线程和进程的区别是什么？</h3>\n<p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p>\n<h3 id=\"3.Java%20%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9F\">3.Java 实现线程有哪几种方式？</h3>\n<ul><li><span style=\"color:#000000;\">1</span><span style=\"color:#000000;\">）继承 </span><span style=\"color:#000000;\">Thread </span><span style=\"color:#000000;\">类实现多线程 </span></li><li><span style=\"color:#000000;\">2</span><span style=\"color:#000000;\">）实现 </span><span style=\"color:#000000;\">Runnable </span><span style=\"color:#000000;\">接口方式实现多线程 </span></li><li><span style=\"color:#000000;\">3</span><span style=\"color:#000000;\">）使用 </span><span style=\"color:#000000;\">ExecutorService</span><span style=\"color:#000000;\">、</span><span style=\"color:#000000;\">Callable</span><span style=\"color:#000000;\">、</span><span style=\"color:#000000;\">Future </span><span style=\"color:#000000;\">实现有返回结果的多线程</span></li></ul>\n<h3 id=\"4.%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B%E6%96%B9%E6%B3%95%20start()%E5%92%8C%20run()%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\">4.启动线程方法 start()和 run()有什么区别？</h3>\n<p><span style=\"color:#000000;\">只有调用了 </span><span style=\"color:#000000;\">start()</span><span style=\"color:#000000;\">方法，才会表现出多线程的特性，不同线程的 </span><span style=\"color:#000000;\">run()</span><span style=\"color:#000000;\">方法里面的代码交替执行。如果只是调用 run()</span><span style=\"color:#000000;\">方法，那么代码还是同步执行的，必须等待一个线程的 run()</span><span style=\"color:#000000;\">方法里面的代码全部执行完毕之后，另外一个线程才可以执行其 </span><span style=\"color:#000000;\">run()方法里面的代码。</span></p>\n<h3 id=\"5.%E6%80%8E%E4%B9%88%E7%BB%88%E6%AD%A2%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E7%BB%88%E6%AD%A2%E7%BA%BF%E7%A8%8B%EF%BC%9F\">5.怎么终止一个线程？如何优雅地终止线程？</h3>\n<p><span style=\"color:#000000;\">stop </span><span style=\"color:#000000;\">终止，不推荐。</span></p>\n<h3 id=\"6.%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E7%8A%B6%E6%80%81%EF%BC%9F%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E6%B5%81%E8%BD%AC%E7%9A%84%EF%BC%9F\">6.一个线程的生命周期有哪几种状态？它们之间如何流转的？</h3>\n<p><span style=\"color:#000000;\">NEW</span><span style=\"color:#000000;\">：毫无疑问表示的是刚创建的线程，还没有开始启动。 </span></p>\n<p><span style=\"color:#000000;\">RUNNABLE: </span><span style=\"color:#000000;\">表示线程已经触发 </span><span style=\"color:#000000;\">start()</span><span style=\"color:#000000;\">方式调用，线程正式启动，线程处于运行中状态。 </span></p>\n<p><span style=\"color:#000000;\">BLOCKED</span><span style=\"color:#000000;\">：表示线程阻塞，等待获取锁，如碰到 </span><span style=\"color:#000000;\">synchronized</span><span style=\"color:#000000;\">、</span><span style=\"color:#000000;\">lock </span><span style=\"color:#000000;\">等关键字等</span><span style=\"color:#000000;\">占用临界区的情况，一旦获取到锁就进行 RUNNABLE </span><span style=\"color:#000000;\">状态继续运行。 </span></p>\n<p><span style=\"color:#000000;\">WAITING</span><span style=\"color:#000000;\">：表示线程处于无限制等待状态，等待一个特殊的事件来重新唤醒，如通过wait()</span><span style=\"color:#000000;\">方法进行等待的线程等待一个 </span><span style=\"color:#000000;\">notify()</span><span style=\"color:#000000;\">或者 </span><span style=\"color:#000000;\">notifyAll()</span><span style=\"color:#000000;\">方法，通过 </span><span style=\"color:#000000;\">join()</span><span style=\"color:#000000;\">方法进行等待的线程等待目标线程运行结束而唤醒，一旦通过相关事件唤醒线程，线程就进入了 RUNNABLE </span><span style=\"color:#000000;\">状态继续运行。 </span></p>\n<p><span style=\"color:#000000;\">TIMED_WAITING</span><span style=\"color:#000000;\">：表示线程进入了一个有时限的等待，如 </span><span style=\"color:#000000;\">sleep(3000)</span><span style=\"color:#000000;\">，等待 </span><span style=\"color:#000000;\">3 </span><span style=\"color:#000000;\">秒后线程重新进行 RUNNABLE </span><span style=\"color:#000000;\">状态继续运行。 </span></p>\n<p><span style=\"color:#000000;\">TERMINATED</span><span style=\"color:#000000;\">：表示线程执行完毕后，进行终止状态。需要注意的是，一旦线程通过 start </span><span style=\"color:#000000;\">方法启动后就再也不能回到初始 </span><span style=\"color:#000000;\">NEW </span><span style=\"color:#000000;\">状态，线程终止后也不能再回到 RUNNABLE 状态</span></p>\n<h3 id=\"7.%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%20wait()%E5%92%8C%20sleep()%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\">7.线程中的 wait()和 sleep()方法有什么区别？</h3>\n<p><span style=\"color:#000000;\">这个问题常问，</span><span style=\"color:#000000;\">sleep </span><span style=\"color:#000000;\">方法和 </span><span style=\"color:#000000;\">wait </span><span style=\"color:#000000;\">方法都可以用来放弃 </span><span style=\"color:#000000;\">CPU </span><span style=\"color:#000000;\">一定的时间，不同点在于如果线程持有某个对象的监视器，sleep </span><span style=\"color:#000000;\">方法不会放弃这个对象的监视器，</span><span style=\"color:#000000;\">wait 方法会放弃这个对象的监视器 </span></p>\n<h3 id=\"8.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%9F\">8.多线程同步有哪几种方法？</h3>\n<p><span style=\"color:#000000;\">Synchronized </span><span style=\"color:#000000;\">关键字，</span><span style=\"color:#000000;\">Lock </span><span style=\"color:#000000;\">锁实现，分布式锁等。 </span></p>\n<h3 id=\"9.%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%BB%E9%94%81%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%EF%BC%9F\">9.什么是死锁？如何避免死锁？</h3>\n<p><span style=\"color:#000000;\">死锁就是两个线程相互等待对方释放对象锁。 </span></p>\n<h3 id=\"10.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1%EF%BC%9F\">10.多线程之间如何进行通信？</h3>\n<p><span style=\"color:#000000;\">wait/notify</span></p>\n<h3 id=\"11%E3%80%81%E7%BA%BF%E7%A8%8B%E6%80%8E%E6%A0%B7%E6%8B%BF%E5%88%B0%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%EF%BC%9F\">11、线程怎样拿到返回结果？</h3>\n<p><span style=\"color:#000000;\">实现</span><span style=\"color:#000000;\">Callable </span><span style=\"color:#000000;\">接口。 </span>​​​​​​​</p>\n<h3 id=\"12%E3%80%81violatile%20%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9F\">12、violatile 关键字的作用？</h3>\n<p><img alt=\"\" height=\"339\" src=\"image\\20210407155808469.png\" width=\"791\"/></p>\n<h3 id=\"13%E3%80%81%E6%96%B0%E5%BB%BA%20T1%E3%80%81T2%E3%80%81T3%20%E4%B8%89%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%83%E4%BB%AC%E6%8C%89%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C%EF%BC%9F\">13、新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？</h3>\n<p><span style=\"color:#000000;\">用 </span><span style=\"color:#000000;\">join </span><span style=\"color:#000000;\">方法。 </span></p>\n<h3 id=\"14%E3%80%81%E6%80%8E%E4%B9%88%E6%8E%A7%E5%88%B6%E5%90%8C%E4%B8%80%E6%97%B6%E9%97%B4%E5%8F%AA%E6%9C%89%203%20%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%EF%BC%9F\">14、怎么控制同一时间只有 3 个线程运行？</h3>\n<p><span style=\"color:#000000;\">用 </span><span style=\"color:#000000;\">Semaphore</span><span style=\"color:#000000;\">。 </span></p>\n<h3 id=\"15%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9F\">15、为什么要使用线程池？</h3>\n<p><span style=\"color:#000000;\">我们知道不用线程池的话，每个线程都要通过 </span><span style=\"color:#000000;\">new Thread(xxRunnable).start()</span><span style=\"color:#000000;\">的方式来创建并运行一个线程，线程少的话这不会是问题，而真实环境可能会开启多个</span><span style=\"color:#cce8cf;\">1</span><span style=\"color:#000000;\">线程让系统和程序达到最佳效率，当线程数达到一定数量就会耗尽系统的 CPU </span><span style=\"color:#000000;\">和内存资源，也会造成 GC</span><span style=\"color:#000000;\">频繁收集和停顿，因为每次创建和销毁一个线程都是要消 耗系统资源的，如果为每个任务都创建线程这无疑是一个很大的性能瓶颈。所以，线程池中的线程复用极大节省了系统资源，当线程一段时间不再有任务处理时它也 会自动销毁，而不会长驻内存。</span></p>\n<h3 id=\"16%E3%80%81%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B9%B6%E8%AE%B2%E8%AE%B2%E5%85%B6%E4%B8%AD%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E3%80%82\">16、常用的几种线程池并讲讲其中的工作原理。</h3>\n<p><img alt=\"\" height=\"602\" src=\"image\\2021040715590354.png\" width=\"621\"/></p>\n<h3 id=\"17%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B%20submit()%E5%92%8C%20execute()%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F\">17、线程池启动线程 submit()和 execute()方法有什么不同？</h3>\n<p><img alt=\"\" height=\"86\" src=\"image\\20210407155912504.png\" width=\"600\"/></p>\n<h3 id=\"18%E3%80%81CyclicBarrier%20%E5%92%8C%20CountDownLatch%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\">18、CyclicBarrier 和 CountDownLatch 的区别？</h3>\n<p><span style=\"color:#000000;\">两个看上去有点像的类，都在 </span><span style=\"color:#000000;\">java.util.concurrent </span><span style=\"color:#000000;\">下，都可以用来表示代码运行到某个点上，二者的区别在于： </span></p>\n<p><span style=\"color:#000000;\">1.CyclicBarrier </span><span style=\"color:#000000;\">的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch </span><span style=\"color:#000000;\">则不是，某线程运 行到某个点上之后，只是给某个数值-1 </span><span style=\"color:#000000;\">而已，该线程继续运行</span><span style=\"color:#cce8cf;\">1</span></p>\n<p><span style=\"color:#000000;\">2.CyclicBarrier </span><span style=\"color:#000000;\">只能唤起一个任务，</span><span style=\"color:#000000;\">CountDownLatch </span><span style=\"color:#000000;\">可以唤起多个任务 </span></p>\n<p><span style=\"color:#000000;\">3.CyclicBarrier </span><span style=\"color:#000000;\">可 重 用 ， </span><span style=\"color:#000000;\">CountDownLatch </span><span style=\"color:#000000;\">不 可 重 用 ， 计 数 值 为 </span><span style=\"color:#000000;\">0 </span><span style=\"color:#000000;\">该CountDownLatch就不可再用了</span></p>\n<h3 id=\"19%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%B4%BB%E9%94%81%E3%80%81%E9%A5%A5%E9%A5%BF%E3%80%81%E6%97%A0%E9%94%81%E3%80%81%E6%AD%BB%E9%94%81%EF%BC%9F\">19、什么是活锁、饥饿、无锁、死锁？</h3>\n<p><img alt=\"\" height=\"652\" src=\"image\\20210407160001458.png\" width=\"604\"/></p>\n<h3 id=\"20%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%9F\">20、什么是原子性、可见性、有序性？</h3>\n<p><img alt=\"\" height=\"661\" src=\"image\\20210407160017935.png\" width=\"620\"/></p>\n<h3 id=\"21%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F\">21、什么是守护线程？有什么用？</h3>\n<p><span style=\"color:#000000;\">什么是守护线程？与守护线程相对应的就是用户线程，守护线程就是守护用户线程，当用户线程全部执行完结束之后，守护线程才会跟着结束。也就是守护线程必 须伴随着用户线程，如果一个应用内只存在一个守护线程，没有用户线程，守护线程自然会退出。</span></p>\n<h3 id=\"22%E3%80%81%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%91%E7%94%9F%E5%BC%82%E5%B8%B8%E4%BC%9A%E6%80%8E%E6%A0%B7%EF%BC%9F\">22、一个线程运行时发生异常会怎样？</h3>\n<p><span style=\"color:#000000;\">如果异常没有被捕获该线程将会停止执行。</span><span style=\"color:#000000;\">Thread.UncaughtExceptionHandler </span><span style=\"color:#000000;\">是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常将造 成线程中断的时 候 JVM </span><span style=\"color:#000000;\">会 使 用 </span><span style=\"color:#000000;\">Thread.getUncaughtExceptionHandler() </span><span style=\"color:#000000;\">来 查 询 线程 的UncaughtExceptionHandler </span><span style=\"color:#000000;\">并 将 线 程 和 异 常 作 为 参 数 传 递 给 </span><span style=\"color:#000000;\">handler </span><span style=\"color:#000000;\">的 uncaughtException()方法进行处理。</span></p>\n<h3 id=\"23%E3%80%81%E7%BA%BF%E7%A8%8B%20yield()%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F\">23、线程 yield()方法有什么用？</h3>\n<p><span style=\"color:#000000;\">Yield </span><span style=\"color:#000000;\">方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃 CPU </span><span style=\"color:#000000;\">占用而不能保证使其它线程一定 能占用 CPU</span><span style=\"color:#000000;\">，执行</span><span style=\"color:#000000;\">yield()</span><span style=\"color:#000000;\">的线程有可能在进入到暂停状态后马上又被执行。</span></p>\n<h3 id=\"24%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E5%85%A5%E9%94%81%EF%BC%9F\">24、什么是重入锁？</h3>\n<p><span style=\"color:#000000;\">所谓重入锁，指的是以线程为单位，当一个线程获取对象锁之后，这个线程可以再次获取本对象上的锁，而其他的线程是不可以的。</span></p>\n<h3 id=\"25%E3%80%81Synchronized%20%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E7%94%A8%E6%B3%95%EF%BC%9F\">25、Synchronized 有哪几种用法？</h3>\n<p><span style=\"color:#000000;\">锁类、锁方法、锁代码块</span></p>\n<h3 id=\"26%E3%80%81Fork%2FJoin%20%E6%A1%86%E6%9E%B6%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84%EF%BC%9F\">26、Fork/Join 框架是干什么的？</h3>\n<p><span style=\"color:#000000;\">大任务自动分散小任务，并发执行，合并小任务结果。 </span>​​​​​​​</p>\n<h3 id=\"27%E3%80%81%E7%BA%BF%E7%A8%8B%E6%95%B0%E8%BF%87%E5%A4%9A%E4%BC%9A%E9%80%A0%E6%88%90%E4%BB%80%E4%B9%88%E5%BC%82%E5%B8%B8%EF%BC%9F\">27、线程数过多会造成什么异常？</h3>\n<p><span style=\"color:#000000;\">线程过多会造成栈溢出，也有可能会造成堆异常</span></p>\n<h3 id=\"28%E3%80%81%E8%AF%B4%E8%AF%B4%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%92%8C%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88%E3%80%82\">28、说说线程安全的和不安全的集合。</h3>\n<p><span style=\"color:#000000;\">Java </span><span style=\"color:#000000;\">中平时用的最多的 </span><span style=\"color:#000000;\">Map </span><span style=\"color:#000000;\">集合就是 </span><span style=\"color:#000000;\">HashMap </span><span style=\"color:#000000;\">了，它是线程不安全的。 看下面两个场景： </span></p>\n<p><span style=\"color:#000000;\">1</span><span style=\"color:#000000;\">、当用在方法内的局部变量时，局部变量属于当前线程级别的变量，其他线程访问不了，所以这时也不存在线程安全不安全的问题了。</span><span style=\"color:#cce8cf;\">1</span></p>\n<p><span style=\"color:#000000;\">2</span><span style=\"color:#000000;\">、当用在单例对象成员变量的时候呢？这时候多个线程过来访问的就是同一个HashMap 了，对同个 </span><span style=\"color:#000000;\">HashMap </span><span style=\"color:#000000;\">操作这时候就存在线程安全的问题了。</span></p>\n<h3 id=\"29%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%20CAS%20%E7%AE%97%E6%B3%95%EF%BC%9F%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BA%94%E7%94%A8%E3%80%82\">29、什么是 CAS 算法？在多线程中有哪些应用。</h3>\n<p><img alt=\"\" height=\"146\" src=\"image\\20210407160243712.png\" width=\"604\"/></p>\n<h3 id=\"30%E3%80%81%E6%80%8E%E4%B9%88%E6%A3%80%E6%B5%8B%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E9%94%81%EF%BC%9F\">30、怎么检测一个线程是否拥有锁？</h3>\n<p><span style=\"color:#000000;\">java.lang.Thread#holdsLock </span><span style=\"color:#000000;\">方法 </span>​​​​​​​</p>\n<h3 id=\"31%E3%80%81Jdk%20%E4%B8%AD%E6%8E%92%E6%9F%A5%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98%E7%94%A8%E4%BB%80%E4%B9%88%E5%91%BD%E4%BB%A4%EF%BC%9F\">31、Jdk 中排查多线程问题用什么命令？</h3>\n<p><span style=\"color:#000000;\">jstack</span></p>\n<h3 id=\"32%E3%80%81%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88%EF%BC%9F\">32、线程同步需要注意什么？</h3>\n<p><span style=\"color:#000000;\">1</span><span style=\"color:#000000;\">、尽量缩小同步的范围，增加系统吞吐量。 </span></p>\n<p><span style=\"color:#000000;\">2</span><span style=\"color:#000000;\">、分布式同步锁无意义，要使用分布式锁。 </span></p>\n<p><span style=\"color:#000000;\">3</span><span style=\"color:#000000;\">、防止死锁，注意加锁顺序。</span></p>\n<h3 id=\"33%E3%80%81%E7%BA%BF%E7%A8%8B%20wait()%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%89%8D%E6%8F%90%EF%BC%9F\">33、线程 wait()方法使用有什么前提？</h3>\n<p><span style=\"color:#000000;\">要在同步块中使用。</span></p>\n<h3 id=\"34%E3%80%81Fork%2FJoin%20%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%9F\">34、Fork/Join 框架使用有哪些要注意的地方？</h3>\n<p><span style=\"color:#000000;\">如果任务拆解的很深，系统内的线程数量堆积，导致系统性能性能严重下降；如果函数的调用栈很深，会导致栈内存溢出； </span></p>\n<h3 id=\"35%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%EF%BC%9F\">35、线程之间如何传递数据？</h3>\n<p><img alt=\"\" height=\"63\" src=\"image\\20210407160337763.png\" width=\"606\"/></p>\n<h3 id=\"36%E3%80%81%E4%BF%9D%E8%AF%81%22%E5%8F%AF%E8%A7%81%E6%80%A7%22%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9F\">36、保证\"可见性\"有哪几种方式？</h3>\n<p><span style=\"color:#000000;\">synchronized </span><span style=\"color:#000000;\">和 </span><span style=\"color:#000000;\">viotatile</span></p>\n<h3 id=\"37%E3%80%81%E8%AF%B4%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%20Lock%20%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E9%94%81%E3%80%82\">37、说几个常用的 Lock 接口实现锁。</h3>\n<p><span style=\"color:#000000;\">ReentrantLock</span><span style=\"color:#000000;\">、</span><span style=\"color:#000000;\">ReadWriteLock</span></p>\n<h3 id=\"38%E3%80%81ThreadLocal%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F\">38、ThreadLocal 是什么？有什么应用场景？</h3>\n<p><span style=\"color:#000000;\">ThreadLocal </span><span style=\"color:#000000;\">的作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。用来解决数据库连接、Session </span><span style=\"color:#000000;\">管理等。 </span></p>\n<h3 id=\"39%E3%80%81ReadWriteLock%20%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F\">39、ReadWriteLock 有什么用？</h3>\n<p><span style=\"color:#000000;\">ReadWriteLock </span><span style=\"color:#000000;\">是一个读写锁接口，</span><span style=\"color:#000000;\">ReentrantReadWriteLock </span><span style=\"color:#000000;\">是 </span><span style=\"color:#000000;\">ReadWriteLock </span><span style=\"color:#000000;\">接口的一个具体实现，实现了读写的分离，读锁是共享的，写锁是独占的，读和读之间不会互斥，读和写、写和读、写和写之间才会互斥，提升了读写的性能。</span></p>\n<h3 id=\"40%E3%80%81FutureTask%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">40、FutureTask 是什么？</h3>\n<p><span style=\"color:#000000;\">FutureTask </span><span style=\"color:#000000;\">表示一个异步运算的任务，</span><span style=\"color:#000000;\">FutureTask </span><span style=\"color:#000000;\">里面可以传入一个 </span><span style=\"color:#000000;\">Callable </span><span style=\"color:#000000;\">的具</span><span style=\"color:#cce8cf;\">1</span><span style=\"color:#000000;\">体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。 </span></p>\n<h3 id=\"41%E3%80%81%E6%80%8E%E4%B9%88%E5%94%A4%E9%86%92%E4%B8%80%E4%B8%AA%E9%98%BB%E5%A1%9E%E7%9A%84%E7%BA%BF%E7%A8%8B%EF%BC%9F\">41、怎么唤醒一个阻塞的线程？</h3>\n<p><img alt=\"\" height=\"86\" src=\"image\\20210407160520850.png\" width=\"753\"/></p>\n<h3 id=\"42%E3%80%81%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%AF%B9%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E5%B8%AE%E5%8A%A9%EF%BC%9F\">42、不可变对象对多线程有什么帮助？</h3>\n<p><img alt=\"\" height=\"52\" src=\"image\\20210407160525957.png\" width=\"737\"/></p>\n<h3 id=\"43%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F\">43、多线程上下文切换是什么意思？</h3>\n<p><img alt=\"\" height=\"59\" src=\"image\\20210407160533597.png\" width=\"742\"/></p>\n<h3 id=\"44%E3%80%81Java%20%E4%B8%AD%E7%94%A8%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%9F\">44、Java 中用到了什么线程调度算法？</h3>\n<p><img alt=\"\" height=\"51\" src=\"image\\20210407160602907.png\" width=\"743\"/></p>\n<h3 id=\"45%E3%80%81Thread.sleep(0)%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">45、Thread.sleep(0)的作用是什么？</h3>\n<p><img alt=\"\" height=\"110\" src=\"image\\20210407160607508.png\" width=\"752\"/></p>\n<h3 id=\"46%E3%80%81Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%9F%9F%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E7%9A%84%EF%BC%8C%E5%93%AA%E4%BA%9B%E6%98%AF%E4%B8%8D%E5%85%B1%E4%BA%AB%E7%9A%84%EF%BC%9F\">46、Java 内存模型是什么，哪些区域是线程共享的，哪些是不共享的？</h3>\n<p><img alt=\"\" height=\"574\" src=\"image\\20210407160627978.png\" width=\"755\"/></p>\n<h3 id=\"%E2%80%8B\"><img alt=\"\" height=\"394\" src=\"image\\20210407160639943.png\" width=\"769\"/></h3>\n<h3 id=\"47%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%EF%BC%9F\">47、什么是乐观锁和悲观锁？</h3>\n<p><img alt=\"\" height=\"189\" src=\"image\\20210407160646541.png\" width=\"745\"/></p>\n<h3 id=\"48%E3%80%81Hashtable%20%E7%9A%84%20size()%E6%96%B9%E6%B3%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E5%90%8C%E6%AD%A5%EF%BC%9F\">48、Hashtable 的 size()方法为什么要做同步？</h3>\n<p><img alt=\"\" height=\"318\" src=\"image\\20210407160652921.png\" width=\"761\"/></p>\n<h3 id=\"49%E3%80%81%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%92%8C%E5%90%8C%E6%AD%A5%E5%9D%97%EF%BC%8C%E5%93%AA%E7%A7%8D%E6%9B%B4%E5%A5%BD%EF%BC%9F\">49、同步方法和同步块，哪种更好？</h3>\n<p><img alt=\"\" height=\"80\" src=\"image\\20210407160656743.png\" width=\"767\"/></p>\n<h3 id=\"50%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E6%97%8B%E9%94%81%EF%BC%9F\">50、什么是自旋锁？</h3>\n<p><span style=\"color:#000000;\">自旋锁是采用让当前线程不停地的在循环体内执行实现的，当循环的条件被其他线程改变时才能进入临界区。 </span></p>\n<h3 id=\"51%E3%80%81Runnable%20%E5%92%8C%20Thread%20%E7%94%A8%E5%93%AA%E4%B8%AA%E5%A5%BD%EF%BC%9F\">51、Runnable 和 Thread 用哪个好？</h3>\n<p><span style=\"color:#000000;\">Java </span><span style=\"color:#000000;\">不支持类的多重继承，但允许你实现多个接口。所以如果你要继承其他类，也</span><span style=\"color:#000000;\">为了减少类之间的耦合性，Runnable </span><span style=\"color:#000000;\">会更好。</span></p>\n<h3 id=\"52%E3%80%81Java%20%E4%B8%AD%20notify%20%E5%92%8C%20notifyAll%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\">52、Java 中 notify 和 notifyAll 有什么区别？</h3>\n<p><span style=\"color:#000000;\">notify()</span><span style=\"color:#000000;\">方法不能唤醒某个具体的线程，所以只有一个线程在等待的时候它才有用武之地。 </span></p>\n<p><span style=\"color:#000000;\">而 </span><span style=\"color:#000000;\">notifyAll()</span><span style=\"color:#000000;\">唤醒所有线程并允许他们争夺锁确保了至少有一个线程能继续运行。</span></p>\n<h3 id=\"53%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%20wait%2Fnotify%2FnotifyAll%20%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%E4%B8%8D%E5%9C%A8%20thread%20%E7%B1%BB%E9%87%8C%E9%9D%A2%EF%BC%9F\">53、为什么 wait/notify/notifyAll 这些方法不在 thread 类里面？</h3>\n<p><img alt=\"\" height=\"214\" src=\"image\\20210407160842796.png\" width=\"757\"/></p>\n<h3 id=\"54%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%20wait%20%E5%92%8C%20notify%20%E6%96%B9%E6%B3%95%E8%A6%81%E5%9C%A8%E5%90%8C%E6%AD%A5%E5%9D%97%E4%B8%AD%E8%B0%83%E7%94%A8%EF%BC%9F\">54、为什么 wait 和 notify 方法要在同步块中调用？</h3>\n<p><img alt=\"\" height=\"76\" src=\"image\\20210407160846434.png\" width=\"766\"/></p>\n<h3 id=\"55%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%9C%A8%E5%BE%AA%E7%8E%AF%E4%B8%AD%E6%A3%80%E6%9F%A5%E7%AD%89%E5%BE%85%E6%9D%A1%E4%BB%B6%EF%BC%9F\">55、为什么你应该在循环中检查等待条件？</h3>\n<p><img alt=\"\" height=\"141\" src=\"image\\20210407160850871.png\" width=\"805\"/></p>\n<h3 id=\"56%E3%80%81Java%20%E4%B8%AD%E5%A0%86%E5%92%8C%E6%A0%88%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F\">56、Java 中堆和栈有什么不同？</h3>\n<p><img alt=\"\" height=\"140\" src=\"image\\20210407160857340.png\" width=\"738\"/></p>\n<h3 id=\"57%E3%80%81%E4%BD%A0%E5%A6%82%E4%BD%95%E5%9C%A8%20Java%20%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%EF%BC%9F\">57、你如何在 Java 中获取线程堆栈？</h3>\n<p><img alt=\"\" height=\"113\" src=\"image\\20210407160902740.png\" width=\"775\"/></p>\n<h3 id=\"58%E3%80%81%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%9F\">58、如何创建线程安全的单例模式？</h3>\n<p><img alt=\"\" height=\"137\" src=\"image\\20210407160907445.png\" width=\"596\"/></p>\n<h3 id=\"59%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%BB%E5%A1%9E%E5%BC%8F%E6%96%B9%E6%B3%95%EF%BC%9F\">59、什么是阻塞式方法？</h3>\n<p><span style=\"color:#000000;\">阻塞式方法是指程序会一直等待该方法完成期间不做其他事情，</span><span style=\"color:#000000;\">ServerSocket </span><span style=\"color:#000000;\">的</span><span style=\"color:#000000;\">accept()方法就是一直等待客户端连接。这里的阻塞是指调用结果返回之前，当前 </span></p>\n<p><span style=\"color:#000000;\">线程会被挂起，直到得到结果之后才会返回。此外，还有异步和非阻塞式方法在任务完成前就返回。</span></p>\n<h3 id=\"60%E3%80%81%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1%E6%97%B6%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%98%9F%E5%88%97%E5%B7%B2%E6%BB%A1%E4%BC%9A%E6%97%B6%E5%8F%91%E4%BC%9A%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F\">60、提交任务时线程池队列已满会时发会生什么？</h3>\n<p><span style=\"color:#000000;\">当线程数小于最大线程池数 </span><span style=\"color:#000000;\">maximumPoolSize </span><span style=\"color:#000000;\">时就会创建新线程来处理，而线程数大于等于最大线程池数 maximumPoolSize </span><span style=\"color:#000000;\">时就会执行拒绝策略。</span></p>\n<blockquote>\n<p>面试题答案解析完整文档：【<a href=\"https://mp.weixin.qq.com/s/VZ7wormwowlSPnA_XAnZaw\">多线程面试题</a><a href=\"https://mp.weixin.qq.com/s/_jDst7MjxaQFcaokWyRzvA\">【附答案解析】</a>】</p>\n</blockquote>\n<h1>最后</h1>\n<p>篇幅有限，其他内容就不在这里一一展示了，整理不易，欢迎大家一起交流，喜欢小编分享的文章记得关注我点赞哟，感谢支持！</p>\n</div>\n</div>"}