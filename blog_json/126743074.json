{"blogid": "126743074", "writerAge": "码龄7年", "writerBlogNum": "169", "writerCollect": "1848", "writerComment": "132", "writerFan": "169", "writerGrade": "5级", "writerIntegral": "4067", "writerName": "骑着蜗牛向前跑", "writerProfileAdress": "writer_image\\profile_126743074.jpg", "writerRankTotal": "5355", "writerRankWeekly": "17067", "writerThumb": "618", "writerVisitNum": "498275", "blog_read_count": "15", "blog_time": "已于 2022-09-07 12:17:55 修改", "blog_title": "spring 单元测试为 logback 添加环境变量", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"_0\"></a>场景描述</h3>\n<p>spring 项目中配置了 logback 收集日志，同时使用 @SpringBootTest 做单元测试。此时就报错了，文件找不见。</p>\n<blockquote>\n<p>ERROR in ch.qos.logback.core.rolling.RollingFileAppender[file] - Failed to create parent directories for [/home/zhu/app/logs/2022-09-07.log]<br/> ERROR in ch.qos.logback.core.rolling.RollingFileAppender[file] - openFile(null,true) call failed. java.io.FileNotFoundException: /home/zhu/app/logs/2022-09-07.log (No such file or directory)</p>\n</blockquote>\n<hr/>\n<h3><a id=\"_9\"></a>原因</h3>\n<p><code>logback-spring.xml</code> 文件中这么写的，bosc.rec.logSavePath 指定保存日志文件，可以在 <code>application.yml</code> 指定。</p>\n<pre><code class=\"prism language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span> <span class=\"token attr-name\">scan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">packagingData</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>springProperty</span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>context<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LOG_HOME<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">source</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bosc.rec.logSavePath<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  \t<span class=\"token comment\">&lt;!-- 中间内容省略了 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-yml\"><span class=\"token comment\"># application.yml</span>\n<span class=\"token key atrule\">bosc</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rec</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">logSavePath</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{<!-- --></span>LOG_SAVE_PATH<span class=\"token punctuation\">:</span>/home/zhu/app/logs<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当单元测试启动时先加载 logback 的配置，再执行测试 case。日志文件找不到，就会抛出上面的异常。而且使用 <code>@Before</code>, <code>@BeforeAll</code> 或者 <code>static</code> 方法，在内部 <code>System.setProperty()</code> 设置环境变量的方式也都不能解决问题。因为这些方法的执行都晚于 logback 配置的加载。</p>\n<hr/>\n<h3><a id=\"_31\"></a>解决办法</h3>\n<p>直接上代码。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PropertyExtension</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeforeAllCallback</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExtensionContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOG_SAVE_PATH\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/Users/mac/Downloads/bosc/logs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">JobManageApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ScenePipelineRepositoryImplTest</span> <span class=\"token punctuation\">{<!-- --></span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token class-name\">ScenePipelineRepository</span> repository<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save_ScenePipeline_succeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// 内容省略</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_59\"></a>啰嗦几句</h3>\n<p>之所以抛出异常是因为使用 @SpringBootTest 做单元测试，这个注解会在执行测试 case 时会启动整个 spring 服务，所以会执行 spring 的初始化过程，加载一大堆的东西，从而包括了 logback 这玩意。</p>\n<p>但这样使用是不合理的：</p>\n<p>原因一：单测只测一个功能点，有必要把整个服务都启动吗？又不是做集成测试。</p>\n<p>原因二：假如服务中有定时任务 或者 向其他服务发请求的功能，那么这个任务也会运行，这是单测不想看到的现象。</p>\n<p>@SpringBootTest 适合做集成测试，测试成功后采用 @ignore 将测试类注解掉。</p>\n<p>spring 三层结构，每层都有单测，每层测试的目的和方式都不一样。</p>\n<p><a href=\"https://blog.csdn.net/yy_diego/article/details/123288489?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166252395516800184176654%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=166252395516800184176654&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-123288489-null-null.article_score_rank_blog&amp;utm_term=%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95&amp;spm=1018.2226.3001.4450\">曾今写过的一篇单测博客</a></p>\n<p>要让团队成员都遵守一些规矩还是有些挑战的。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}