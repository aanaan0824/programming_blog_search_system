{"blogid": "123489772", "writerAge": "码龄7年", "writerBlogNum": "83", "writerCollect": "800", "writerComment": "661", "writerFan": "2562", "writerGrade": "5级", "writerIntegral": "2578", "writerName": "隐 风", "writerProfileAdress": "writer_image\\profile_123489772.jpg", "writerRankTotal": "9938", "writerRankWeekly": "4750", "writerThumb": "754", "writerVisitNum": "302413", "blog_read_count": "7146", "blog_time": "已于 2022-03-25 19:59:45 修改", "blog_title": "阿里一面，说说你对Mysql死锁的理解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>又到了金三银四的时候，大家都按耐不住内心的躁动，我在这里给大家分享下之前面试中遇到的一个知识点（死锁问题），如有不足，欢迎大佬们指点指点。</strong></p>\n<h2><a id=\"1_3\"></a><strong>1、什么是死锁？</strong></h2>\n<blockquote>\n<p>死锁指的是在两个或两个以上不同的进程或线程中，由于存在共同资源的竞争或进程（或线程）间的通讯而导致各个线程间相互挂起等待，如果没有外力作用，最终会引发整个系统崩溃。</p>\n</blockquote>\n<h2><a id=\"2Mysql_7\"></a><strong>2、Mysql出现死锁的必要条件</strong></h2>\n<ol><li><strong>资源独占条件</strong></li></ol>\n<blockquote>\n<p>指多个事务在竞争同一个资源时存在互斥性，即在一段时间内某资源只由一个事务占用，也可叫独占资源（如行锁）。</p>\n</blockquote>\n<ol start=\"2\"><li><strong>请求和保持条件</strong></li></ol>\n<blockquote>\n<p>指在一个事务a中已经获得锁A，但又提出了新的锁B请求，而该锁B已被其它事务b占有，此时该事务a则会阻塞，但又对自己已获得的锁A保持不放。</p>\n</blockquote>\n<ol start=\"3\"><li><strong>不剥夺条件</strong></li></ol>\n<blockquote>\n<p>指一个事务a中已经获得锁A，在未提交之前，不能被剥夺，只能在使用完后提交事务再自己释放。</p>\n</blockquote>\n<ol start=\"4\"><li><strong>相互获取锁条件</strong></li></ol>\n<blockquote>\n<p>指在发生死锁时，必然存在一个相互获取锁过程，即持有锁A的事务a在获取锁B的同时，持有锁B的事务b也在获取锁A，最终导致相互获取而各个事务都阻塞。</p>\n</blockquote>\n<h2><a id=\"3_Mysql_24\"></a><strong>3、 Mysql经典死锁案例</strong></h2>\n<blockquote>\n<p>假设存在一个转账情景，A账户给B账户转账50元的同时，B账户也给A账户转账30元，那么在这过程中是否会存在死锁情况呢？</p>\n</blockquote>\n<h3><a id=\"31__28\"></a><strong>3.1 建表语句</strong></h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>account<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'主键'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">56</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>balance<span class=\"token punctuation\">`</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'余额'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">`</span>idx_user_id<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> <span class=\"token keyword\">BTREE</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'账户余额表'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"32__38\"></a><strong>3.2 初始化相关数据</strong></h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token punctuation\">`</span>test<span class=\"token punctuation\">`</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>account<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">`</span>balance<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token punctuation\">`</span>test<span class=\"token punctuation\">`</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>account<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">`</span>balance<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c1b31c58c3f14feebbbb072aae44b7cb.png\"/></p>\n<h3><a id=\"33__45\"></a><strong>3.3 正常转账过程</strong></h3>\n<blockquote>\n<p><strong>在说死锁问题之前，咱们先来看看正常的转账过程。</strong><br/> 正常情况下，A用户给B用户转账50元，可在一个事务内完成，需要先获取A用户的余额和B用户的余额，因为之后需要修改这两条数据，所以需要通过写锁（for UPDATE）锁住他们，防止其他事务更改导致我们的更改丢失而引起脏数据。<br/> <strong>相关sql如下</strong>：</p>\n</blockquote>\n<p><strong><mark>开启事务之前需要先把mysql的自动提交关闭</mark></strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">set</span> autocommit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 查看事务自动提交状态状态</span>\n<span class=\"token keyword\">show</span> VARIABLES <span class=\"token operator\">like</span> <span class=\"token string\">'autocommit'</span><span class=\"token punctuation\">;</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>在这里插入图片描述<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https:<span class=\"token comment\">//img-blog.csdnimg.cn/a486a4ed5c9d4240bd115ac7b3ce5a39.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZqQIOmjjg==,size_20,color_FFFFFF,t_70,g_se,x_16)</span>\n\n</code></pre>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\"># 转账sql</span>\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 获取A 的余额并存入A_balance变量：80</span>\n<span class=\"token keyword\">SELECT</span> user_id<span class=\"token punctuation\">,</span><span class=\"token variable\">@A_balance</span>:<span class=\"token operator\">=</span>balance <span class=\"token keyword\">from</span> account <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 获取B 的余额并存入B_balance变量:60</span>\n<span class=\"token keyword\">SELECT</span> user_id<span class=\"token punctuation\">,</span><span class=\"token variable\">@B_balance</span>:<span class=\"token operator\">=</span>balance <span class=\"token keyword\">from</span> account <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 修改A 的余额</span>\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">set</span> balance <span class=\"token operator\">=</span> <span class=\"token variable\">@A_balance</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span> <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 修改B 的余额</span>\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">set</span> balance <span class=\"token operator\">=</span> <span class=\"token variable\">@B_balance</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span> <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行后的结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\27fa338866e0420c91822ea678d976ab.png\"/><br/> <strong>可以看到数据更新都是正常的情况</strong></p>\n<h3><a id=\"34__76\"></a><strong>3.4 死锁转账过程</strong></h3>\n<p>初始化的余额为：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\770db81ac5eb45c089165264e56ce01c.png\"/></p>\n<blockquote>\n<p>假设在高并发情况下存在这种场景，A用户给B用户转账50元的同时，B用户也给A用户转账30元。</p>\n</blockquote>\n<p><strong>那么我们的java程序操作的过程和时间线如下：</strong></p>\n<ol><li>A用户给B用户转账50元，需在程序中开启事务1来执行sql，并获取A的余额同时锁住A这条数据。</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\"># 事务1</span>\n<span class=\"token keyword\">set</span> autocommit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 获取A 的余额并存入A_balance变量：80</span>\n<span class=\"token keyword\">SELECT</span> user_id<span class=\"token punctuation\">,</span><span class=\"token variable\">@A_balance</span>:<span class=\"token operator\">=</span>balance <span class=\"token keyword\">from</span> account <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"2\"><li>B用户给A用户转账30元，需在程序中开启事务2来执行sql，并获取B的余额同时锁住B这条数据。</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\"># 事务2</span>\n<span class=\"token keyword\">set</span> autocommit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 获取A 的余额并存入A_balance变量：60</span>\n<span class=\"token keyword\">SELECT</span> user_id<span class=\"token punctuation\">,</span><span class=\"token variable\">@A_balance</span>:<span class=\"token operator\">=</span>balance <span class=\"token keyword\">from</span> account <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"3\"><li>在事务1中执行剩下的sql</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\"># 获取B 的余额并存入B_balance变量:60</span>\n<span class=\"token keyword\">SELECT</span> user_id<span class=\"token punctuation\">,</span><span class=\"token variable\">@B_balance</span>:<span class=\"token operator\">=</span>balance <span class=\"token keyword\">from</span> account <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 修改A 的余额</span>\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">set</span> balance <span class=\"token operator\">=</span> <span class=\"token variable\">@A_balance</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span> <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 修改B 的余额</span>\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">set</span> balance <span class=\"token operator\">=</span> <span class=\"token variable\">@B_balance</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span> <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\294a080f369a4e54be86d434725a2ed1.png\"/></p>\n<blockquote>\n<p>可以看到，在事务1中获取B数据的写锁时出现了超时情况。为什么会这样呢？<strong>主要是因为我们在步骤2的时候已经在事务2中获取到B数据的写锁了，那么在事务2提交或回滚前事务1永远都拿不到B数据的写锁。</strong></p>\n</blockquote>\n<ol start=\"4\"><li>在事务2中执行剩下的sql</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\"># 获取A 的余额并存入B_balance变量:60</span>\n<span class=\"token keyword\">SELECT</span> user_id<span class=\"token punctuation\">,</span><span class=\"token variable\">@B_balance</span>:<span class=\"token operator\">=</span>balance <span class=\"token keyword\">from</span> account <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 修改B 的余额</span>\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">set</span> balance <span class=\"token operator\">=</span> <span class=\"token variable\">@A_balance</span> <span class=\"token operator\">-</span> <span class=\"token number\">30</span> <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 修改A 的余额</span>\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">set</span> balance <span class=\"token operator\">=</span> <span class=\"token variable\">@B_balance</span> <span class=\"token operator\">+</span> <span class=\"token number\">30</span> <span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2029daf726104afd99f6c83527643e01.png\"/></p>\n<blockquote>\n<p>同理可得，在事务2中获取A数据的写锁时也出现了超时情况。<strong>因为步骤1的时候已经在事务1中获取到A数据的写锁了，那么在事务1提交或回滚前事务2永远都拿不到A数据的写锁。</strong></p>\n</blockquote>\n<ol start=\"5\"><li><strong>为什么会出现这种情况呢？</strong></li></ol>\n<blockquote>\n<p>主要是因为事务1和事务2存在相互等待获取锁的过程，导致两个事务都挂起阻塞，最终抛出获取锁超时的异常。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\77942091b5664eb08513d55cc58a00e4.png\"/></p>\n<h3><a id=\"35__138\"></a><strong>3.5 死锁导致的问题</strong></h3>\n<blockquote>\n<p>众所周知，数据库的连接资源是很珍贵的，如果一个连接因为事务阻塞长时间不释放，那么后面新的请求要执行的sql也会排队等待，越积越多，最终会拖垮整个应用。一旦你的应用部署在微服务体系中而又没有做熔断处理，由于整个链路被阻断，那么就会引发雪崩效应，导致很严重的生产事故。</p>\n</blockquote>\n<h2><a id=\"4_143\"></a><strong>4、如何解决死锁问题？</strong></h2>\n<blockquote>\n<p>要想解决死锁问题，我们可以从死锁的<strong>四个必要条件</strong>入手。<br/> 由于<strong>资源独占条件</strong>和<strong>不剥夺条件</strong>是锁本质的功能体现，无法修改，所以咱们从另外两个条件尝试去解决。</p>\n</blockquote>\n<h3><a id=\"41__148\"></a><strong>4.1 打破请求和保持条件</strong></h3>\n<blockquote>\n<p>根据上面定义可知，出现这个情况是因为事务1和事务2同时去竞争锁A和锁B，那么我们是否可以保证锁A和锁B一次只能被一个事务竞争和持有呢？<br/> 答案是肯定可以的。下面咱们通过伪代码来看看：</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n* 事务1入参(A, B)\n* 事务2入参(B, A)\n**/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transferAccounts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userFrom<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userTo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token comment\">// 获取分布式锁</span>\n     <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token class-name\">Redisson</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 开启事务</span>\n     JDBC<span class=\"token punctuation\">.</span><span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"START TRANSACTION;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 执行转账sql</span>\n     JDBC<span class=\"token punctuation\">.</span><span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# 获取A 的余额并存入A_balance变量：80\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"SELECT user_id,@A_balance:=balance from account where user_id = '\"</span> <span class=\"token operator\">+</span> userFrom <span class=\"token operator\">+</span> <span class=\"token string\">\"' for UPDATE;\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"# 获取B 的余额并存入B_balance变量:60\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"SELECT user_id,@B_balance:=balance from account where user_id = '\"</span> <span class=\"token operator\">+</span> userTo <span class=\"token operator\">+</span> <span class=\"token string\">\"' for UPDATE;\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"# 修改A 的余额\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"UPDATE account set balance = @A_balance - 50 where user_id = '\"</span> <span class=\"token operator\">+</span> userFrom <span class=\"token operator\">+</span> <span class=\"token string\">\"';\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"# 修改B 的余额\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"UPDATE account set balance = @B_balance + 50 where user_id = '\"</span> <span class=\"token operator\">+</span> userTo <span class=\"token operator\">+</span> <span class=\"token string\">\"';\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 提交事务</span>\n     JDBC<span class=\"token punctuation\">.</span><span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"COMMIT;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 释放锁</span>\n     lock<span class=\"token punctuation\">.</span><span class=\"token function\">unLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>上面的伪代码显而易见可以解决死锁问题，因为所有的事务都是通过分布式锁来串行执行的。</p>\n</blockquote>\n<p><strong>那么这样就真的<mark>万事大吉</mark>了吗？</strong></p>\n<blockquote>\n<p>在小流量情况下看起来是没问题的，但是在<mark>高并发场景</mark>下这里将成为整个服务的<mark>性能瓶颈</mark>，因为即使你部署了再多的机器，但由于<mark>分布式锁</mark>的原因，你的业务也只能串行进行，服务性能并不因为集群部署而提高并发量，完全无法满足分布式业务下快、准、稳的要求，所以咱们不妨换种方式来看看怎么解决死锁问题。</p>\n</blockquote>\n<h3><a id=\"42__184\"></a><strong>4.2 打破相互获取锁条件（推荐）</strong></h3>\n<blockquote>\n<p>要打破这个条件其实也很简单，那就是事务再获取锁的过程中保证顺序获取即可，也就是锁A始终在锁B之前获取。<br/> 我们来看看之前的伪代码怎么优化？</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n* 事务1入参(A, B)\n* 事务2入参(B, A)\n**/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transferAccounts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userFrom<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userTo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token comment\">// 对用户A和B进行排序，让userFrom始终为用户A，userTo始终为用户B</span>\n     <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userFrom<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> userTo<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token class-name\">String</span> tmp <span class=\"token operator\">=</span> userFrom<span class=\"token punctuation\">;</span>\n         userFrom <span class=\"token operator\">=</span> userTo<span class=\"token punctuation\">;</span>\n         userTo <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n         flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 开启事务</span>\n     JDBC<span class=\"token punctuation\">.</span><span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"START TRANSACTION;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 执行转账sql</span>\n     JDBC<span class=\"token punctuation\">.</span><span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# 获取userFrom  的余额并存入A_balance变量：80\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"SELECT user_id,@A_balance:=balance from account where user_id = '\"</span> <span class=\"token operator\">+</span> userFrom <span class=\"token operator\">+</span> <span class=\"token string\">\"' for UPDATE;\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"# 获取userTo  的余额并存入B_balance变量:60\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"SELECT user_id,@B_balance:=balance from account where user_id = '\"</span> <span class=\"token operator\">+</span> userTo <span class=\"token operator\">+</span> <span class=\"token string\">\"' for UPDATE;\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"# 修改userFrom  的余额\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"UPDATE account set balance = @A_balance - \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">*</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" where user_id = '\"</span> <span class=\"token operator\">+</span> userFrom <span class=\"token operator\">+</span> <span class=\"token string\">\"';\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"# 修改userTo  的余额\\n\"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"UPDATE account set balance = @B_balance + \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">*</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" where user_id = '\"</span> <span class=\"token operator\">+</span> userTo <span class=\"token operator\">+</span> <span class=\"token string\">\"';\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 提交事务</span>\n     JDBC<span class=\"token punctuation\">.</span><span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"COMMIT;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>假设事务1的入参为(A, B)，事务2入参为(B, A)，由于我们对两个用户参数进行了排序，所以在事务1中需要先获取锁A在获取锁B，事务2也是一样要先获取锁A在获取锁B，两个事务都是顺序获取锁，所以也就打破了相互获取锁的条件，最终完美解决死锁问题。</p>\n</blockquote>\n<h2><a id=\"5_222\"></a><strong>5、总结</strong></h2>\n<blockquote>\n<p>因为mysql在互联网中的大量使用，所以死锁问题还是经常会被问到，希望兄弟们能掌握这方面的知识，提高自己的竞争力。</p>\n</blockquote>\n<blockquote>\n<p>最后，外出打工不易，希望各位兄弟找到自己心仪的工作，虎年发发发！<br/> 也希望兄弟们能<mark>关注、点赞、收藏、评论</mark>支持一波，非常感谢大家！</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}