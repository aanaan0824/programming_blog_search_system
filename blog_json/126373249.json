{"blogid": "126373249", "writerAge": "码龄1年", "writerBlogNum": "23", "writerCollect": "753", "writerComment": "1126", "writerFan": "915", "writerGrade": "5级", "writerIntegral": "2524", "writerName": "摆烂阳", "writerProfileAdress": "writer_image\\profile_126373249.jpg", "writerRankTotal": "8151", "writerRankWeekly": "88", "writerThumb": "855", "writerVisitNum": "29948", "blog_read_count": "396", "blog_time": "已于 2022-08-20 01:12:28 修改", "blog_title": "【python笔记】第四节 序列类型初始", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>💕💕💕 博主昵称：摆烂阳💕💕💕<br/> 🥰<a href=\"https://blog.csdn.net/qinshuoyang1?spm=1010.2135.3001.5343\">点击跳转到博主主页</a><br/> 👩‍💻博主研究方向：web渗透测试 、python编程<br/> 📃博主寄语：希望本篇文章能给大家带来帮助，有不足的地方，希望友友们给予指导</p>\n</blockquote>\n<p>————————————————</p>\n<p></p>\n<div class=\"toc\">\n<h3>人生苦短，我学python</h3>\n<ul><li><a href=\"#_12\">一、序列简介</a></li><li><a href=\"#_36\">二、列表和元组</a></li><li><a href=\"#___128\">三、 序列类型基本操作</a></li><li><ul><li><a href=\"#1_132\">1、下标</a></li><li><ul><li><a href=\"#11_133\">1.1正向下标</a></li><li><a href=\"#12__161\">1.2 反向下标</a></li></ul>\n</li><li><a href=\"#2_172\">2、切片</a></li><li><a href=\"#3_213\">3、成员运算符</a></li><li><a href=\"#4_239\">4、序列运算</a></li><li><a href=\"#5_261\">5、序列常用内置函数</a></li><li><ul><li><a href=\"#51_len_286\">5.1 len()</a></li><li><a href=\"#52_maxmin_305\">5.2 max()和min()</a></li><li><a href=\"#53_sum_318\">5.3 sum()</a></li><li><a href=\"#54sorted_331\">5.4sorted()</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_347\">本章小结</a></li></ul>\n</div>\n<br/>\n<img alt=\"在这里插入图片描述\" src=\"image\\178ed1f195694639ba7ce52c52d4cdbd.png\"/>\n<p></p>\n<h1><a id=\"_12\"></a>一、序列简介</h1>\n<p><strong>数值类型：可以表示数值</strong></p>\n<blockquote>\n<p>int 整型 = 整数</p>\n</blockquote>\n<blockquote>\n<p>float 浮点型 = 小数</p>\n</blockquote>\n<blockquote>\n<p>bool 布尔型 = 用于判断/也可以作为数值进行运算</p>\n</blockquote>\n<p><strong>序列类型：存储多个数据的一种数据类型</strong></p>\n<blockquote>\n<p>str 字符串 -&gt; 数字 字母，特殊符号，中文等数据</p>\n</blockquote>\n<blockquote>\n<p>list 列表</p>\n</blockquote>\n<blockquote>\n<p>tuple 元组</p>\n</blockquote>\n<p><strong>序列是指可以存放多个数值的连续内存空间，这些值是按照一定顺序排列，可以通过每个值所在位置的下标访问它</strong></p>\n<h1><a id=\"_36\"></a>二、列表和元组</h1>\n<p><strong>列表是python一种数据类型，list是一个有序可以装各种数据类型的容器。</strong></p>\n<p><strong>list的创建：</strong></p>\n<blockquote>\n<p><strong>直接使用[]括起来，各个元素使用英文逗号分隔开</strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\">name_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'摆烂阳'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'从不吃晚饭'</span><span class=\"token punctuation\">,</span>  <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name_list<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>range() 函数 : 可以根据给定的参数来生成整数序列, 返回的迭代器</strong></p>\n<blockquote>\n<p><strong>迭代器是需要转换成列表才能查看</strong></p>\n</blockquote>\n<p><strong>具体语法：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>stop<span class=\"token punctuation\">)</span> <span class=\"token comment\"># start 和 stop 代表2个参数</span>\n<span class=\"token comment\"># start 开始</span>\n<span class=\"token comment\"># stop 结束</span>\n<span class=\"token comment\"># 注意：包头不包尾，从start开始到stop结束 [start,stop)</span>\n<span class=\"token comment\">#  start &lt;= x &lt; stop , x ∈ z</span>\n\n<span class=\"token comment\"># 生成 1~1000 的列表</span>\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 由于不包尾，所以1001取不到，只会取到1000</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> \n<span class=\"token number\">0</span>\n<span class=\"token comment\"># 生成 0 ~ 100 之间的偶数</span>\n\n\n\n<span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>stop<span class=\"token punctuation\">,</span>step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># start 开始</span>\n<span class=\"token comment\"># stop 结束</span>\n<span class=\"token comment\"># step 步长</span>\n<span class=\"token comment\"># 生成 0 ~ 100 之间的偶数</span>\nli <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">104</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 输出 1 ~ 100 中 7的倍数</span>\n<span class=\"token comment\"># 第一步 确定头尾</span>\n<span class=\"token comment\"># 第二步 跨步</span>\nli2 <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li2<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 凡是有 固定的 差值的 整数，都可以使用range生成</span>\n\n\n如果希望生成降序的整数序列，步长可以改为负数\n<span class=\"token comment\"># 10 ~ 1 列表</span>\nli <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10头   0尾</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 生成列表 8 6 4 2 0</span>\ns <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>元组跟列表基本一样</strong>，都可以用来存储多个数据，最大的区别是列表可以修改，而元组是不行，<strong>元组最大特色是不能修改</strong></p>\n<p><strong>元组的创建</strong></p>\n<blockquote>\n<p><strong>() 英文括号括起来，每个元素用逗号隔开</strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token number\">111</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"摆烂阳\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p><strong>配合range()函数，再用tuple类型转换</strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\">t <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"___128\"></a>三、 序列类型基本操作</h1>\n<blockquote>\n<p><strong>序列类型：list，tuple，str</strong></p>\n</blockquote>\n<h2><a id=\"1_132\"></a>1、下标</h2>\n<h3><a id=\"11_133\"></a>1.1正向下标</h3>\n<blockquote>\n<p><strong>在序列类型中每一个元素都会存在一个下标，下标是从左往右默认从0开始。可以通过下标去提取元素</strong></p>\n</blockquote>\n<p>语法格式：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 提取方式：序列[下标]</span>\n\n<span class=\"token comment\"># 注意这里是 []</span>\n\n\n只有函数的后面才跟<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"Python\"</span>  <span class=\"token comment\"># 下标 = 第几个 - 1</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 访问元素时不可以超过最大下标，超过则报错</span>\n\n\n嵌套列表的提取<span class=\"token punctuation\">,</span>比方说提取 摆\nlis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"摆\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"烂\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\nmj <span class=\"token operator\">=</span> lis<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">#  mj = [\"摆\",\"烂\"]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mj<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"12__161\"></a>1.2 反向下标</h3>\n<blockquote>\n<p><strong>反向下标和正向下表不同的地方在于反向下标是从右至左开始，右边第一位的值为-1</strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"python3\"</span>\n<span class=\"token comment\"># 此时提取 t</span>\n<span class=\"token comment\"># 正向 2  反向 -5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># print(s[-5])</span>\n</code></pre>\n<h2><a id=\"2_172\"></a>2、切片</h2>\n<p><strong>在Python中， 切片 (slice) 是对序列型对象 (如 list, string, tuple)的一种高级索引方法。 普通索引只取出序列中 一个下标 对应的元素，而切片取出序列中 一个范围 对应的元素，这里的范围不是狭义上的连续片段。</strong></p>\n<blockquote>\n<p><strong>如果想截取序列中的一段序列，就可以使用切片</strong></p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"prism language-python\">L <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"稿子\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斧头\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"铁锹\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AK47\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98K\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"锄头\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 提取出 枪械武器类别 到新列表中</span>\n<span class=\"token comment\"># 切片语法  序列[start:stop:step]</span>\n\n<span class=\"token comment\"># 和range有点相似，同样是包头不包尾</span>\n\nL <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"稿子\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斧头\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"铁锹\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AK47\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98K\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"锄头\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world!\"</span>\n\n<span class=\"token comment\"># hello</span>\n<span class=\"token comment\"># 1.先确定h的下标  0</span>\n<span class=\"token comment\"># 2.再确定o的下标  4  # 不包尾 + 1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># hlo</span>\n<span class=\"token comment\"># 1.先确定头的下标 0</span>\n<span class=\"token comment\"># 2.再确定尾的下标 4+1</span>\n<span class=\"token comment\"># 3.在确定步长 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world!\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 头部参数如果没写，默认是从头开始切</span>\n                <span class=\"token comment\"># 尾部参数如果没写，默认切到底</span>\n\n    \ns <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world!\"</span>\n<span class=\"token comment\"># 反转序列类型</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 如果说步长是负数的话，头就是右边，尾就是左边</span>\n</code></pre>\n<h2><a id=\"3_213\"></a>3、成员运算符</h2>\n<p><strong>in ： 属于</strong></p>\n<p><strong>not in : 不属于</strong></p>\n<table><thead><tr><th align=\"left\">运算符</th><th align=\"left\">描述</th><th align=\"left\">实例</th></tr></thead><tbody><tr><td align=\"left\">in</td><td align=\"left\">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align=\"left\">x 在 y 序列中 , 如果 x 在 y 序列能找到，则返回 True。</td></tr><tr><td align=\"left\">not in</td><td align=\"left\">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align=\"left\">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello My friend\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"H\"</span> <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 字符串中 空格也算做一个字符</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h\"</span> <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ll\"</span> <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fr \"</span> <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hlo\"</span> <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 不行 得连续</span>\n\n</code></pre>\n<h2><a id=\"4_239\"></a>4、序列运算</h2>\n<p>序列类型 只能做 <code>加法 和 乘法</code></p>\n<p>序列的相加 就是 两边 拼接</p>\n<p>序列的相乘 就是 重复和自己拼接</p>\n<pre><code class=\"prism language-python\">s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"摆烂阳\"</span>\ns2 <span class=\"token operator\">=</span> <span class=\"token string\">\"从不吃晚饭\"</span>\n\nlist1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"摆烂阳\"</span><span class=\"token punctuation\">]</span>\nlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"从不吃晚饭\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 直接拼接</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">+</span> list2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 直接合并</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['摆烂阳', '摆烂阳', '摆烂阳', '摆烂阳', '摆烂阳']</span>\n</code></pre>\n<h2><a id=\"5_261\"></a>5、序列常用内置函数</h2>\n<p><strong>什么是内置函数</strong></p>\n<blockquote>\n<p><strong>python官方提供好的功能，可以直接拿来使用，比如print,input</strong></p>\n</blockquote>\n<table><thead><tr><th align=\"left\">函数</th><th align=\"left\">功能</th></tr></thead><tbody><tr><td align=\"left\">len()</td><td align=\"left\">计算序列的长度，即返回序列中包含多少个元素。</td></tr><tr><td align=\"left\">max()</td><td align=\"left\">找出序列中的最大元素。</td></tr><tr><td align=\"left\">min()</td><td align=\"left\">找出序列中的最小元素。</td></tr><tr><td align=\"left\">sum()</td><td align=\"left\">计算元素和。</td></tr><tr><td align=\"left\">sorted()</td><td align=\"left\">对元素进行排序。</td></tr></tbody></table>\n<p><strong>学内置函数主要学这2点</strong></p>\n<blockquote>\n<p>1.<strong>函数的功能</strong><br/> 2.<strong>函数的参数</strong></p>\n</blockquote>\n<h3><a id=\"51_len_286\"></a>5.1 len()</h3>\n<blockquote>\n<p><strong>len(seq): 计算序列的长度，即返回序列中包含多少个元素</strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\">seq：序列\n\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"hello,world\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nli <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"摆烂阳\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"52_maxmin_305\"></a>5.2 max()和min()</h3>\n<blockquote>\n<p><strong>max(seq) 找出序列中的最大元素。</strong></p>\n<p><strong>min(seq) 找出序列中的最小元素。</strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\">seq<span class=\"token punctuation\">:</span>序列\nli <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"53_sum_318\"></a>5.3 sum()</h3>\n<blockquote>\n<p><strong>sum(seq): 求序列元素的和</strong></p>\n</blockquote>\n<pre><code class=\"prism language-python\">seq<span class=\"token punctuation\">:</span>序列\n    \nli <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"54sorted_331\"></a>5.4sorted()</h3>\n<blockquote>\n<p><strong>sorted(seq) 对元素进行排序。</strong></p>\n</blockquote>\n<p>升序 sorted(seq)</p>\n<p>降序 sorted(seq,reverse=True)</p>\n<pre><code class=\"prism language-python\">li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span>reverse<span class=\"token operator\">=</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_347\"></a>本章小结</h1>\n<blockquote>\n<p>本文是本人以前笔记，<a href=\"https://blog.csdn.net/qinshuoyang1?spm=1010.2135.3001.5343\">博主主页跳转链接</a>如果有哪里不对的话欢迎各位大佬指出问题，本人也是初学python，希望可以和各位朋友一起学习进步。</p>\n<p><a href=\"https://blog.csdn.net/qinshuoyang1/category_11959615.html\">点击跳转到博主python专栏：</a><br/> 如果有喜欢web安全的朋友，请在web渗透专栏中进行查看，<a href=\"https://blog.csdn.net/qinshuoyang1/category_11922322.html?spm=1001.2014.3001.5482\">点击跳转到博主web渗透专栏</a></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}