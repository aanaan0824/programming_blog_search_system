{"blogid": "125531889", "writerAge": "码龄2年", "writerBlogNum": "58", "writerCollect": "6737", "writerComment": "5577", "writerFan": "20458", "writerGrade": "7级", "writerIntegral": "11819", "writerName": "小威要向诸佬学习呀", "writerProfileAdress": "writer_image\\profile_125531889.jpg", "writerRankTotal": "915", "writerRankWeekly": "9", "writerThumb": "4557", "writerVisitNum": "232864", "blog_read_count": "20298", "blog_time": "已于 2022-07-11 16:44:05 修改", "blog_title": "这些Java基础知识，诸佬们都还记得嘛(学习，复习，面试都可)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>前言：大家好，我是小威，一个明天即将入职准大三学生。本篇将记录前几次面试中经常被问到的知识点。<br/> <strong>本篇文章记录的基础知识，适合在学Java的小白，也适合复习中，面试中的大佬</strong>🤩🤩。<br/> <strong>如果文章有什么需要改进的地方还请大佬不吝赐教</strong>👏👏。<br/> 小威在此先感谢各位大佬啦~~🤞🤞<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/417238f8768d4fdea722225b6d26a066.gif#pic_center\"/></p>\n<blockquote>\n<p>🏠个人主页：<a href=\"https://blog.csdn.net/qq_53847859?spm=1011.2415.3001.5343\">小威要向诸佬学习呀</a><br/> 🧑个人简介：大家好，我是小威，一个想要与大家共同进步的男人😉😉<br/> 目前状况🎉：目前大二，在一家满意的公司实习👏👏</p>\n<p>🎁如果大佬在准备面试，可以使用我找实习前用的刷题神器哦<a href=\"https://www.nowcoder.com/link/pc_csdncpt_xiaowei_sf\">刷题神器点这里哟</a><br/> 💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p>\n</blockquote>\n<p>牛客部分使用反馈，个人感觉还不错，帮我找到了心仪的公司，希望各位伙伴儿们通过它也能提高不少🥂🥂🥂</p>\n<p>以下正文开始<br/> <img alt=\"在这里插入图片描述\" src=\"image\\31e03fccb5c94753a4625fed41efb68a.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_20\">🧁创建线程的三种方法</a></li><li><ul><li><a href=\"#Thread_27\">🍦继承Thread类</a></li><li><a href=\"#Runnable_35\">🍵实现Runnable接口</a></li><li><a href=\"#Callable_43\">🍸实现Callable接口</a></li></ul>\n</li><li><a href=\"#trycatchfinally_56\">🍬try...catch和finally</a></li><li><a href=\"#Linux_84\">🍭Linux文件数字权限</a></li><li><a href=\"#_102\">🍉深拷贝和前拷贝的区别</a></li><li><ul><li><a href=\"#_104\">🍑深拷贝</a></li><li><a href=\"#_111\">🍄浅拷贝</a></li></ul>\n</li><li><a href=\"#_127\">🍻什么时候用不到索引</a></li><li><a href=\"#_137\">🥤子集</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_20\"></a>🧁创建线程的三种方法</h1>\n<p>创建线程有三种方法，分别是：</p>\n<ul><li>继承Thread类；</li><li>实现Runnable接口，重写run()方法；</li><li>实现Callable接口</li></ul>\n<h2><a id=\"Thread_27\"></a>🍦继承Thread类</h2>\n<ol><li> <p>定义一个类继承Thread类，并重写该类的run⽅法，该run方法的方法体里面就表示了线程要完成的任务。我们把run()方法称为执行体；</p> </li><li> <p>创建Thread子类的实例对象，也就是创建了线程对象；</p> </li><li> <p>手动调用线程对象的start()方法来启动该线程。</p> </li></ol>\n<h2><a id=\"Runnable_35\"></a>🍵实现Runnable接口</h2>\n<p>因为类只支持单方面的继承，所以第一种创建线程的方法有一定的局限性，而接口可以实现多个。</p>\n<ul><li> <p>定义一个Runnable接口的实现类，并重写该接⼝的run()⽅法，我们所重写的run()⽅法的⽅法体同样是该线程的线程执行体；</p> </li><li> <p>创建 Runnable实现类的实例对象；</p> </li><li> <p>使用Thread有参构造方法创建线程实例，并将Runnable接口的实现类的实例对象作为参数传入；</p> </li><li> <p>调⽤线程对象的start()⽅法来启动该线程。</p> </li></ul>\n<h2><a id=\"Callable_43\"></a>🍸实现Callable接口</h2>\n<p>通过Callable和Future创建线程</p>\n<ol><li> <p>创建Callable接⼝的实现类，并且重写Callable接口里面的call()⽅法，该call()方法即为线程执⾏体，并且有返回值。</p> </li><li> <p>创建Callable实现类的实例，使⽤FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()⽅法的返回值。</p> </li><li> <p>使⽤FutureTask对象作为Thread对象的target创建并启动新线程。</p> </li><li> <p>调⽤FutureTask对象的get()⽅法来获得子线程执⾏结束后的返回值</p> </li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1e4a2e5540b040c880d2891632a04755.png\"/></p>\n<h1><a id=\"trycatchfinally_56\"></a>🍬try…catch和finally</h1>\n<p>首先，try…catch对异常的捕获是为了使程序能够有效地执行。</p>\n<p>try…catch…finally结构<br/> try<br/> {<!-- --><br/> <strong>执行的代码，其中可能有异常。如果发现异常，会立即跳到catch执行。否则不会执行catch里面的内容</strong><br/> }<br/> catch(Exception e)<br/> {<!-- --><br/> <strong>try里面执行的代码发生了异常才会进行catch处理</strong><br/> }<br/> finally<br/> {<!-- --><br/> <strong>不管什么情况都会执行，包括try catch 里面用了return ,可以理解为只要执行了try或者catch，就一定会执行 finally</strong><br/> }</p>\n<blockquote>\n<p>try-catch-finally的执行顺序是：</p>\n<ol><li>不管有没有出现异常，finally块中的代码都会执行；</li><li>当try和catch中有return时，finally仍然会执行；</li><li>finally是在return后面的表达式运算后执行的</li></ol>\n<p>try-catch-finally 其中 catch 和 finally 都可以被省略，但是不能同时省略，也就是说有 try 的时候，必须后面跟一个 catch 或者 finally。</p>\n</blockquote>\n<h1><a id=\"Linux_84\"></a>🍭Linux文件数字权限</h1>\n<p><strong>首先解释文件中r ，w， x， - 的含义，r是只读权限，w是写的权限，x是可执行权限, -是没有任何权限。</strong><br/> 目录中 r w x的含义，r具有ls（列出目录下的文件）权限，w是在目录上可以增加、删除、创建权限，x是具有ls –l（以长格式的形式查看当前目录下所有可见文件的属性）权限。<br/> 数字如何表示权限呢？<br/> 我们规定读（r）为4，写（w）为2，执行权限（x）为1。<br/> 所以<br/> rwx为7，rw为6，rx为5，wx为3等。<br/> 而它表示的权限分为自己，自己群组其他成员，其它组。例如：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">chmod</span> <span class=\"token number\">777</span> <span class=\"token function\">file</span> //所有人都可读，写，执行\n<span class=\"token function\">chmod</span> <span class=\"token number\">700</span> <span class=\"token function\">file</span> //自己可读，写，执行，其他人不可以\n<span class=\"token function\">chmod</span> <span class=\"token number\">775</span> <span class=\"token function\">file</span> //自己和同组人员可读，写，执行，而其他组可读，执行，不可写\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/dfa72dbb35b64d5da623a717391e9567.gif#pic_center\"/></p>\n<h1><a id=\"_102\"></a>🍉深拷贝和前拷贝的区别</h1>\n<p>深拷贝和浅拷贝最近的这几次面试中经常问到的问题。</p>\n<h2><a id=\"_104\"></a>🍑深拷贝</h2>\n<p><strong>深拷贝和浅拷贝是指对象的拷贝，一个对象存在两种类型的属性，一种是基本数据类型，一种是引用类型。</strong></p>\n<p>深拷贝：即拷贝基本数据类型的值，也会针对实例对象的引用地址所指向的对象进行复制，深拷贝出来的对象，类的内部执行的对象不是同一个深拷贝是一个整个独立的对象拷贝，<strong>并且深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存</strong>。当对象和它所引用的对象一起拷贝时即发生深拷贝。</p>\n<p><strong>深拷贝把要复制的对象所引用的对象都复制了一遍。</strong></p>\n<h2><a id=\"_111\"></a>🍄浅拷贝</h2>\n<p>浅拷贝浅拷贝将原对象或原数组的引用直接赋给新对象，新数组，新对象／数组只是原对象的一个引用（拷贝后的引用都是指向同一个对象的实例，彼此之间的操作会互相影响）</p>\n<p><strong>浅拷贝复制的只是一层的变量，并不会复制深层变量绑定的变量。</strong></p>\n<blockquote>\n<p>区别：<br/> <strong>深拷贝拷贝的是多层，每一层次的数据都会拷贝，并且深拷贝只拷贝内容，拷贝的两个对象也拥有不同的地址</strong>。拷贝出来的对象发生改变时，原来的对象不会发生改变，两者互不影响。</p>\n<p><strong>浅拷贝只拷贝一层，更深层次对象级别只拷贝引用地址</strong>。当浅拷贝的对象发生改变时，原来的对象也会发生相同的改变。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\988379fa2d61427d9424a0d45ae23e2d.png\"/></p>\n<h1><a id=\"_127\"></a>🍻什么时候用不到索引</h1>\n<p>如果面试官问到这里，可能是想要问最左匹配原则。</p>\n<p>最左匹配原则，顾名思义：<strong>最左优先</strong>，以最左边的为起点任何连续的索引都能匹配上。<strong>同时遇到范围查询(&gt;、&lt;、between、like)就会停⽌匹配</strong>。<br/> mysql创建复合索引的规则是⾸先对复合索引最左边的字段的数据进⾏排序，在此基础上，再对后⾯的字段进⾏排序，这样第⼀个字段是绝对有序的，后⾯的字段就是⽆序的了，<strong>⼀般情况下第⼆个字段进⾏条件判断是⽤不到索引的</strong>，可能出现type是index类型的，这就是mysql 最左前缀的原因。<br/> 举个栗子：假设创建了顺序为（a，b，c）的索引<br/> 1.当查询条件为a=1 and b=1 或b=1 and a=1（查询优化器会调换a与b的位置），这时候都可以走索引。<br/> 2.当查询条件为a=1 and b&gt;1 and c=1 时 ，由于是范围查找，a和b走索引，c不走索引<br/> 3.当查询条件为b=1时查询时也不会走索引</p>\n<h1><a id=\"_137\"></a>🥤子集</h1>\n<p>分享一道最近面试问到的算法题。<br/> Leetcode78 子集<br/> 题目：<br/> 给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。<br/> 解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。</p>\n<p>示例 1：</p>\n<blockquote>\n<p>输入：nums = [1,2,3]<br/> 输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</p>\n</blockquote>\n<p>示例 2：</p>\n<blockquote>\n<p>输入：nums = [0]<br/> 输出：[[],[0]]</p>\n</blockquote>\n<p>题解：本题用到了回溯的算法思想，题解如下。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 存放符合条件结果的集合</span>\n    <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用来存放符合条件结果</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">subsets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">subsetsHelper</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">subsetsHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//「遍历这个树的时候，把所有节点都记录下来，就是要求的子集集合」。</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//终止条件可以不加</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> startIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">subsetsHelper</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            path<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/58c0730f87b549049178b9bfeb8829c7.gif#pic_center\"/></p>\n<blockquote>\n<p>文章到这里就结束了，如果有什么疑问的地方请指出，诸佬们一起讨论🍻<br/> 最后再次给大家安利一波牛客，点击<a href=\"https://www.nowcoder.com/link/pc_csdncpt_xiaowei_sf\">刷题神器</a><br/> 注册牛客，快来和博主一起刷题吧嘿嘿嘿👏 再次感谢各位小伙伴儿们的支持🤞</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0118388c46f740ad90805ea0c495aeb4.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}