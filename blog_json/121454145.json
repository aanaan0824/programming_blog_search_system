{"blogid": "121454145", "writerAge": "码龄5年", "writerBlogNum": "46", "writerCollect": "56", "writerComment": "6", "writerFan": "61", "writerGrade": "3级", "writerIntegral": "599", "writerName": "王凌波", "writerProfileAdress": "writer_image\\profile_121454145.jpg", "writerRankTotal": "271563", "writerRankWeekly": "85989", "writerThumb": "13", "writerVisitNum": "25849", "blog_read_count": "1042", "blog_time": "已于 2022-05-01 17:22:30 修改", "blog_title": "Rust 用于 STM32 开发", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>我的开发板有两个了 LED 灯，做一个用按键控制两个灯的小测试。电路图如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f620627cd2384c95877bbf25c28c4c88.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\7a32773462cf405a88521cf60adcf88c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\8a6c1ce3ff9d404fa8bcb16490cfd5d7.png\"/></p>\n<p>可见 LED 连接在 PF9 和 PF10 引脚，按键连接在 PA0 引脚。</p>\n<p>用 Cargo 创建一个 Rust 项目，并在一下文件中添加代码：</p>\n<p><code>./memory.x</code>：需要自己新建。这是用来配置存储分布的，我的 MCU 是 stm32f407 系列的。</p>\n<pre><code class=\"prism language-jsx\">MEMORY\n{\n  /* NOTE 1 K = 1 KiBi = 1024 bytes */\n  FLASH : ORIGIN = 0x08000000, LENGTH = 512K\n  RAM : ORIGIN = 0x20000000, LENGTH = 100K\n}\n</code></pre>\n<p><code>./Cargo.toml</code>：做一些项目配置，加载需要的库。</p>\n<pre><code class=\"prism language-jsx\">[package]\nname = \"stm32led\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[profile.release]\npanic = \"abort\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nembedded-hal = \"0.2\"\nnb = \"1\"\ncortex-m = \"0.7\"\ncortex-m-rt = \"0.7\"\n# Panic behaviour, see https://crates.io/keywords/panic-impl for alternatives\npanic-halt = \"0.2\"\n\n[dependencies.stm32f4xx-hal]\nversion = \"0.13.1\"\nfeatures = [\"stm32f407\"]\n</code></pre>\n<p><code>./src/main.rs</code>：代码源文件。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#![no_std]</span>\n<span class=\"token attribute attr-name\">#![no_main]</span>\n\n<span class=\"token keyword\">use</span> panic_halt <span class=\"token keyword\">as</span> _<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">cortex_m_rt<span class=\"token punctuation\">::</span></span>entry<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> stm32f4xx_hal <span class=\"token keyword\">as</span> hal<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">hal<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token namespace\">prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> pac<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[entry]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token namespace\">pac<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Peripherals</span><span class=\"token punctuation\">::</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token namespace\">cortex_m<span class=\"token punctuation\">::</span>peripheral<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Peripherals</span><span class=\"token punctuation\">::</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> gf <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">.</span><span class=\"token constant\">GPIOF</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> ga <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">.</span><span class=\"token constant\">GPIOA</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> led0 <span class=\"token operator\">=</span> gf<span class=\"token punctuation\">.</span>pf9<span class=\"token punctuation\">.</span><span class=\"token function\">into_push_pull_output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> led1 <span class=\"token operator\">=</span> gf<span class=\"token punctuation\">.</span>pf10<span class=\"token punctuation\">.</span><span class=\"token function\">into_push_pull_output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> ga<span class=\"token punctuation\">.</span>pa0<span class=\"token punctuation\">.</span><span class=\"token function\">into_pull_down_input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> rcc <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">.</span><span class=\"token constant\">RCC</span><span class=\"token punctuation\">.</span><span class=\"token function\">constrain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> clocks <span class=\"token operator\">=</span> rcc<span class=\"token punctuation\">.</span>cfgr<span class=\"token punctuation\">.</span><span class=\"token function\">sysclk</span><span class=\"token punctuation\">(</span><span class=\"token number\">168</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">MHz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Create a delay abstraction based on SysTick</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> delay <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">.</span><span class=\"token constant\">SYST</span><span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>clocks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// On for 1s, off for 1s.</span>\n            <span class=\"token keyword\">if</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">is_high</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                led1<span class=\"token punctuation\">.</span><span class=\"token function\">set_high</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                led0<span class=\"token punctuation\">.</span><span class=\"token function\">set_low</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">is_low</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                led1<span class=\"token punctuation\">.</span><span class=\"token function\">set_low</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                led0<span class=\"token punctuation\">.</span><span class=\"token function\">set_high</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            delay<span class=\"token punctuation\">.</span><span class=\"token function\">delay_ms</span><span class=\"token punctuation\">(</span><span class=\"token number\">50_u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>./Makefile</code>：可选。</p>\n<pre><code class=\"prism language-makefile\">stm32led.bin : \n\tcargo rustc --release --target thumbv7em-none-eabihf -- -C link-arg=-Tlink.x\n\tarm-none-eabi-objcopy target/thumbv7em-none-eabihf/release/stm32led -O binary stm32led.bin\n\nload:\n\tsudo stm32flash -w stm32led.bin -v -g 0x00 /dev/ttyUSB0\n\nclean:\n\trm stm32led.bin\n</code></pre>\n<p><strong>编译下载执行：</strong> 成功 load 后你就可以通过按 KEY_UP 键，切换 LED0 和 LED1 的亮灭。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">make</span> clean\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> load\n</code></pre>\n<p><strong>一些注意的点：</strong></p>\n<ul><li>编译前需要安装 thumbv7em-none-eabihf： <code>rustup target add thumbv7em-none-eabihf</code>，其他的 MCU 要安装对应的文件。</li><li>编译指令为 <code>cargo rustc --release --target thumbv7em-none-eabihf -- -C link-arg=-Tlink.x</code> ，注意不是 build 而是 rustc，还有 -C 前的两个横杠不可以省略。</li><li>我用的下载工具是 stm32flash，需要单独安装： <code>yay -S stm32flash</code></li><li>stm32flash 不能直接下载 Rust 编译的二进制文件，需要用 <code>objcopy</code> 去转换为 bin 文件。在 Makefile 中有这一指令，这个指令可由安装 arm-none-eabi-gcc 获得： <code>sudo pacman -S arm-none-eabi-gcc</code></li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}