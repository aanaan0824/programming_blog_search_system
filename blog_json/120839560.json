{"blogid": "120839560", "writerAge": "码龄3年", "writerBlogNum": "181", "writerCollect": "78", "writerComment": "6", "writerFan": "38", "writerGrade": "5级", "writerIntegral": "1851", "writerName": "renwen1579", "writerProfileAdress": "writer_image\\profile_120839560.jpg", "writerRankTotal": "12913", "writerRankWeekly": "83077", "writerThumb": "22", "writerVisitNum": "78574", "blog_read_count": "6937", "blog_time": "于 2021-10-19 10:36:16 发布", "blog_title": "C#---二维数组", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1wZ4y1A7if?p=49\" title=\"【千锋合集】史上最全Unity3D全套教程|匠心之作_哔哩哔哩_bilibili\">【千锋合集】史上最全Unity3D全套教程|匠心之作_哔哩哔哩_bilibili</a></p>\n</blockquote>\n<p><img alt=\"\" height=\"266\" src=\"image\\b66645cbe80c4cf5b2e6faaa65acf58b.png\" width=\"459\"/></p>\n<p>1.有两个下标的数组称为二维数组</p>\n<p>2.二维数组本质上是以数组作为数组元素的数组，即数组的数组</p>\n<p>二维数组的初始化</p>\n<p>动态初始化</p>\n<p>类型[，] 数组名=new 类型[常量表达式1，常量表达式2]； </p>\n<p>例如：int[,] array=new int[2,3]{<!-- -->{1,2,3},{1,2,3}}</p>\n<p>int[,] map=new int[,]{<!-- -->{1,2,3},{4,5,6}}</p>\n<p></p>\n<p>注意：第二维的个数必须相同，例如上面的写法会出现编译错误</p>\n<p><img alt=\"\" height=\"222\" src=\"image\\6def9362e3b649ceb47d8e1be7796c3e.png\" width=\"454\"/></p>\n<blockquote>\n<p>using System;</p>\n<p>namespace SecondArray<br/> {<!-- --><br/>     class Program<br/>     {<!-- --><br/>         static void Main(string[] args)<br/>         {<!-- --><br/>             int[] array = { 1, 2, 3, 4 };<br/>             int[][] newArray = { new int[] { 1, 3, 4, 5, 6 }, new int[] { 2, 4, 6, 8, 2 } };<br/>             //动态初始化<br/>             int[,] csharpArray = new int[3, 5];<br/>             int[,] maps = new int[,] { {3,5},{1,2},{2,4} };<br/>             Console.WriteLine(maps[2, 1]);<br/>             //获取二维数组的长度,相当于二维数组的元素个数（总长度）<br/>             Console.WriteLine(maps.Length);<br/>             //如何获取二维数组的长度<br/>             Console.WriteLine(\"0:\" + maps.GetLength(0));<br/>             Console.WriteLine(\"1:\" + maps.GetLength(1));<br/>             //二维数组的遍历<br/>             int[,] heroData = {<!-- --><br/>                 {3,0,0},<br/>                 {0,5,0},<br/>                 {1,0,2},<br/>                 {0,1,3}<br/>             };<br/>             for (int i = 0; i &lt; heroData.GetLength(0); i++) {<!-- --><br/>                 for (int j = 0; j &lt; heroData.GetLength(1); j++) {<!-- --><br/>                     Console.Write(heroData[i, j]+\"\\t\");<br/>                 }<br/>                 //换行<br/>                 Console.WriteLine();<br/>             }<br/>         }<br/>     }<br/> }</p>\n</blockquote>\n<blockquote>\n<p>using System;</p>\n<p>namespace SecondArray01<br/> {<!-- --><br/>     class Program<br/>     {<!-- --><br/>         static void Main(string[] args)<br/>         {<!-- --><br/>             int[,] heroData = {<!-- --><br/>                 {3,0,0},<br/>                 {0,5,0},<br/>                 {1,0,2},<br/>                 {0,1,3}<br/>             };<br/>             //定义数组<br/>             int[,] dataStatistics = new int[heroData.GetLength(1),heroData.GetLength(0)];<br/>             for (int i = 0; i &lt; heroData.GetLength(0); i++) { <br/>                 for(int j = 0; j &lt; heroData.GetLength(1); j++)<br/>                 {<!-- --><br/>                     dataStatistics[j, i] = heroData[i, j];<br/>                 }<br/>             }</p>\n<p>        //遍历新数组<br/>             for (int i = 0; i &lt; dataStatistics.GetLength(0); i++) {<!-- --><br/>                 for (int j = 0; j &lt; dataStatistics.GetLength(1); j++) {<!-- --><br/>                     Console.Write(dataStatistics[i,j]+\"\\t\");<br/>                 }<br/>                 Console.WriteLine();<br/>             }<br/>         }<br/>     }<br/> }</p>\n</blockquote>\n<p> <img alt=\"\" height=\"69\" src=\"image\\0376da8b5fa44bce8eebdc39ed890299.png\" width=\"260\"/></p>\n<p><strong> 迭代遍历foreach</strong></p>\n<p>foreack(迭代类型 迭代变量名 in 迭代集合){<!-- --></p>\n<p>        //循环体</p>\n<p>}</p>\n<p>迭代类型：必须和后面的迭代集合匹配，也可以使用模糊数据类型var</p>\n<p>迭代集合：可以是数组、字符串、集合等</p>\n<blockquote>\n<p>using System;</p>\n<p>namespace TestForeach<br/> {<!-- --><br/>     class Program<br/>     {<!-- --><br/>         static void Main(string[] args)<br/>         {<!-- --><br/>             int[] number = { 3, 5, 7, 9 };<br/>             foreach (var item in number)<br/>             {<!-- --><br/>                 Console.WriteLine(item);<br/>             }   <br/>         }<br/>     }<br/> }</p>\n</blockquote>\n<p>底层消耗比for循环高</p>\n<blockquote>\n<p>using System;</p>\n<p>namespace TestForeach<br/> {<!-- --><br/>     class Program<br/>     {<!-- --><br/>         static void Main(string[] args)<br/>         {<!-- --><br/>             int[] number = { 3, 5, 7, 9 };<br/>             foreach (var item in number)<br/>             {<!-- --><br/>                 Console.WriteLine(item);<br/>             }<br/>             int[,] map = { { 0, 0, 0 }, { 1, 0, 3 }, { 5, 0, 8 }, { -1, 0, -2 } };<br/>             Console.WriteLine(\"foreach遍历二维数组\");<br/>             foreach (var item in map) { Console.WriteLine(item); }<br/>             Console.WriteLine(\"foreach遍历string\");<br/>             string str = \"Hello,Unity!\";<br/>             foreach (var item in str) {<!-- --><br/>                 Console.WriteLine(item);<br/>             }<br/>         }<br/>     }<br/> }</p>\n</blockquote>\n<p></p>\n<p></p>\n</div>\n</div>"}