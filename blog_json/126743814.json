{"blogid": "126743814", "writerAge": "码龄6年", "writerBlogNum": "616", "writerCollect": "551", "writerComment": "151", "writerFan": "58", "writerGrade": "6级", "writerIntegral": "7154", "writerName": "风水道人", "writerProfileAdress": "writer_image\\profile_126743814.jpg", "writerRankTotal": "3353", "writerRankWeekly": "22605", "writerThumb": "158", "writerVisitNum": "435138", "blog_read_count": "7", "blog_time": "于 2022-09-07 13:33:03 发布", "blog_title": "SpringCloud集成seata分布式事务控制", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>1.官网下载对应的包</p>\n<p><a href=\"https://seata.io/zh-cn/docs/overview/what-is-seata.html\" title=\"Seata 是什么\">Seata 是什么</a></p>\n<p>2.解压如图：进入conf进行配置</p>\n<p><img alt=\"\" height=\"201\" src=\"image\\443e9f4684164c49bbfb62b9ce75b68b.png\" width=\"831\"/></p>\n<p>3.分别配置file.conf  和registry.conf</p>\n<p><img alt=\"\" height=\"597\" src=\"image\\abb74a4be3a144c4bc7f17577a1cd837.png\" width=\"888\"/> </p>\n<p>registry.conf 文件修改</p>\n<p></p>\n<p><img alt=\"\" height=\"495\" src=\"image\\221a2495e35f4f739566d911badc0f61.png\" width=\"887\"/> </p>\n<p> ### <strong>接着就是seata链接的数据库执行SQL文件</strong></p>\n<pre><code class=\"language-sql\">DROP TABLE IF EXISTS `global_table`;\nCREATE TABLE `global_table` (\n  `xid` VARCHAR(128)  NOT NULL,\n  `transaction_id` BIGINT,\n  `status` TINYINT NOT NULL,\n  `application_id` VARCHAR(32),\n  `transaction_service_group` VARCHAR(32),\n  `transaction_name` VARCHAR(128),\n  `timeout` INT,\n  `begin_time` BIGINT,\n  `application_data` VARCHAR(2000),\n  `gmt_create` DATETIME,\n  `gmt_modified` DATETIME,\n  PRIMARY KEY (`xid`),\n  KEY `idx_gmt_modified_status` (`gmt_modified`, `status`),\n  KEY `idx_transaction_id` (`transaction_id`)\n);\n\n\nDROP TABLE IF EXISTS `branch_table`;\nCREATE TABLE `branch_table` (\n  `branch_id` BIGINT NOT NULL,\n  `xid` VARCHAR(128) NOT NULL,\n  `transaction_id` BIGINT ,\n  `resource_group_id` VARCHAR(32),\n  `resource_id` VARCHAR(256) ,\n  `lock_key` VARCHAR(128) ,\n  `branch_type` VARCHAR(8) ,\n  `status` TINYINT,\n  `client_id` VARCHAR(64),\n  `application_data` VARCHAR(2000),\n  `gmt_create` DATETIME,\n  `gmt_modified` DATETIME,\n  PRIMARY KEY (`branch_id`),\n  KEY `idx_xid` (`xid`)\n);\n\n\nDROP TABLE IF EXISTS `lock_table`;\nCREATE TABLE `lock_table` (\n  `row_key` VARCHAR(128) NOT NULL,\n  `xid` VARCHAR(96),\n  `transaction_id` LONG ,\n  `branch_id` LONG,\n  `resource_id` VARCHAR(256) ,\n  `table_name` VARCHAR(32) ,\n  `pk` VARCHAR(36) ,\n  `gmt_create` DATETIME ,\n  `gmt_modified` DATETIME,\n  PRIMARY KEY(`row_key`)\n);</code></pre>\n<p>启动注册中心》seata 根据自己系统运行，windows通过命令窗口</p>\n<p><img alt=\"\" height=\"183\" src=\"image\\93ec02a01e344f04b811da89dcb7e9a3.png\" width=\"844\"/></p>\n<p>启动成功后就是集成在项目中了</p>\n<p>分别把file.conf 和registry.conf（我的项目中复制了配置没有修改可以正常运行）复制到项目ｒｅｓｏｕｒｃｅ项目底下并作修改。</p>\n<p><img alt=\"\" height=\"646\" src=\"image\\c1ac3ed821844bfcb7fd488d466ce146.png\" width=\"667\"/></p>\n<p>贴出ｆｉｌｅ．ｃｏｎｆ</p>\n<pre><code class=\"language-Puppet\">transport {\n# tcp udt unix-domain-socket\ntype = \"TCP\"\n#NIO NATIVE\nserver = \"NIO\"\n#enable heartbeat\nheartbeat = true\n#thread factory for netty\nthread-factory {\nboss-thread-prefix = \"NettyBoss\"\nworker-thread-prefix = \"NettyServerNIOWorker\"\nserver-executor-thread-prefix = \"NettyServerBizHandler\"\nshare-boss-worker = false\nclient-selector-thread-prefix = \"NettyClientSelector\"\nclient-selector-thread-size = 1\nclient-worker-thread-prefix = \"NettyClientWorkerThread\"\n# netty boss thread size,will not be used for UDT\nboss-thread-size = 1\n#auto default pin or 8\nworker-thread-size = 8\n}\nshutdown {\n# when destroy server, wait seconds\nwait = 3\n}\nserialization = \"seata\"\ncompressor = \"none\"\n}\n\nservice {\n\nvgroup_mapping.xjzd_tx_group = \"default\" #修改自定义事务组名称\n\ndefault.grouplist = \"127.0.0.1:8091\"\nenableDegrade = false\ndisable = false\nmax.commit.retry.timeout = \"-1\"\nmax.rollback.retry.timeout = \"-1\"\ndisableGlobalTransaction = false\n}\n\n\nclient {\nasync.commit.buffer.limit = 10000\nlock {\nretry.internal = 10\nretry.times = 30\n}\nreport.retry.count = 5\ntm.commit.retry.count = 1\ntm.rollback.retry.count = 1\n}\n\n## transaction log store\nstore {\n## store mode: file、db\nmode = \"db\"\n\n## file store\nfile {\ndir = \"sessionStore\"\n\n# branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\nmax-branch-session-size = 16384\n# globe session size , if exceeded throws exceptions\nmax-global-session-size = 512\n# file buffer size , if exceeded allocate new buffer\nfile-write-buffer-cache-size = 16384\n# when recover batch read size\nsession.reload.read_size = 100\n# async, sync\nflush-disk-mode = async\n}\n\n## database store\ndb {\n## the implement of etc.\ndatasource = \"dbcp\"\n## mysql/oracle/h2/oceanbase etc.\ndb-type = \"mysql\"\ndriver-class-name = \"com.mysql.jdbc.Driver\"\nurl = \"jdbc:mysql://127.0.0.1:3306/seata\"\nuser = \"root\"\npassword = \"123456\"\nmin-conn = 1\nmax-conn = 3\nglobal.table = \"global_table\"\nbranch.table = \"branch_table\"\nlock-table = \"lock_table\"\nquery-limit = 100\n}\n}\nlock {\n## the lock store mode: local、remote\nmode = \"remote\"\n\nlocal {\n## store locks in user's database\n}\n\nremote {\n## store locks in the seata's server\n}\n}\nrecovery {\n#schedule committing retry period in milliseconds\ncommitting-retry-period = 1000\n#schedule asyn committing retry period in milliseconds\nasyn-committing-retry-period = 1000\n#schedule rollbacking retry period in milliseconds\nrollbacking-retry-period = 1000\n#schedule timeout retry period in milliseconds\ntimeout-retry-period = 1000\n}\n\ntransaction {\nundo.data.validation = true\nundo.log.serialization = \"jackson\"\nundo.log.save.days = 7\n#schedule delete expired undo_log in milliseconds\nundo.log.delete.period = 86400000\nundo.log.table = \"undo_log\"\n}\n\n## metrics settings\nmetrics {\nenabled = false\nregistry-type = \"compact\"\n# multi exporters use comma divided\nexporter-list = \"prometheus\"\nexporter-prometheus-port = 9898\n}\n\nsupport {\n## spring\nspring {\n# auto proxy the DataSource bean\ndatasource.autoproxy = false\n}\n}</code></pre>\n<p> </p>\n<p> </p>\n<pre style=\"margin-left:0;text-align:left;\"><span style=\"color:#464646;\"><span style=\"background-color:#ffffff;\">接着修改配置文件</span></span></pre>\n<p><img alt=\"\" height=\"270\" src=\"image\\fc064adffcf04834b135b3babdc82e09.png\" width=\"625\"/></p>\n<p> </p>\n<pre style=\"margin-left:0;text-align:left;\"><span style=\"color:#464646;\"><span style=\"background-color:#ffffff;\">接着在该项目的数据库创建一张表测试</span></span></pre>\n<pre><code class=\"language-sql\">DROP TABLE IF EXISTS `undo_log`;\nCREATE TABLE `undo_log` (\n  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` BIGINT(20) NOT NULL,\n  `xid` VARCHAR(100) NOT NULL,\n  `context` VARCHAR(128) NOT NULL,\n  `rollback_info` LONGBLOB NOT NULL,\n  `log_status` INT(11) NOT NULL,\n  `log_created` DATETIME NOT NULL,\n  `log_modified` DATETIME NOT NULL,\n  `ext` VARCHAR(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</code></pre>\n<p><img alt=\"\" height=\"589\" src=\"image\\d437c46e25f247daa77f77d29eb01bdb.png\" width=\"886\"/></p>\n<p></p>\n<p><strong>完！！！！！！！！！！！ </strong></p>\n</div>\n</div>"}