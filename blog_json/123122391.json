{"blogid": "123122391", "writerAge": "码龄13年", "writerBlogNum": "46", "writerCollect": "81", "writerComment": "28", "writerFan": "62", "writerGrade": "3级", "writerIntegral": "601", "writerName": "程老师2088", "writerProfileAdress": "writer_image\\profile_123122391.jpg", "writerRankTotal": "50152", "writerRankWeekly": "20666", "writerThumb": "28", "writerVisitNum": "43495", "blog_read_count": "2116", "blog_time": "已于 2022-02-24 22:36:45 修改", "blog_title": "【C#】一文教你搭个简易的Socket服务器", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>C#里面提供了Socket类，通过该类，可以很轻松地搭建起Socket服务端和客户端。本文将尽量以最简单的方式、最少的代码量来说明一个简易的Socket服务器是怎么搭建起来的。</p>\n<p>首先，大概讲下整个思路和流程：</p>\n<p>（1）首先要明白一个概念：整个服务器，实际上就是由一个Socket对象监听端口；</p>\n<p>（2）我们会通过一个新的线程监听客户端发起连接请求，这样的好处是避免堵塞主线程；</p>\n<p>（3）当与客户端建立起连接之后，我们还会新建线程来专门接受该socket客户端的数据。</p>\n<p>先新建各类：</p>\n<pre><code class=\"language-cs\">public class SocketServer\n{\n\n}</code></pre>\n<p>定义一些属性变量：</p>\n<pre><code class=\"language-cs\">        //端口号\n        private int SocketServerPort = 5002;\n        //处理连接请求的线程\n        private Thread acceptConnectReqThd;</code></pre>\n<p>然后写一个服务器启动的函数Start</p>\n<pre><code>       /// &lt;summary&gt;\n        /// 启动服务器\n        /// &lt;/summary&gt;\n        public bool Start()\n        {\n            try\n            {\n                //创建一个socket对象\n                Socket socketWatch = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n                //获取IP\n                IPAddress ip = IPAddress.Any;\n                //创建端口号\n                IPEndPoint port = new IPEndPoint(ip, SocketServerPort);\n                //监听\n                socketWatch.Bind(port);\n                Console.WriteLine(\"监听成功\");\n                socketWatch.Listen(20);  //设定最大的挂起长度\n\n                //新建线程来处理连接请求\n                acceptConnectReqThd = new Thread(AcceptConnectReqHandler);\n                acceptConnectReqThd.IsBackground = true;\n                acceptConnectReqThd.Start(socketWatch);  //把socket对象当做参数传递给到线程里面的方法\n\n                return true;\n            }\n            catch(Exception e)\n            {\n                return false;\n            }\n        }</code></pre>\n<p>执行Start函数之后，我们就创建了一个socket对象，并监听我们设定的端口号5002。并添加了个线程来处理客户端的连接请求。</p>\n<p>接下来我们实现AcceptConnectReqHandler方法，即线程驱动的方法：</p>\n<pre><code>       /// &lt;summary&gt;\n        /// 连接请求的处理函数\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"_socket\"&gt;&lt;/param&gt;\n        private void AcceptConnectReqHandler(object _socket)\n        {\n            try\n            {\n                //服务端的socket对象\n                Socket serverSocket = (Socket)_socket;\n\n                while (true)\n                {\n                    //获取客户端socket。Accept方法处理任何传入的连接请求，并返回可用于与远程主机通信数据的Socket对象，即客户端的socket。\n                    //这一句话会卡主线程。只要没有新的链接进来，就会一直卡主不动（等待中）。\n                    //收到连接事件后，会往下执行，通过while又回到这里继续等待\n                    Socket clientSocket = serverSocket.Accept();  \n\n                    //创建接受客户端消息的线程\n                    Thread acceptMsgReqThd = new Thread(ReciveMsgReqHandler);\n                    acceptMsgReqThd.IsBackground = true;\n                    acceptMsgReqThd.Start(clientSocket);\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"服务端处理连接事件异常:\" + e.ToString());\n            }\n        }</code></pre>\n<p>这个线程驱动的函数里面，只要收到一个客户端的请求链接，就会再新建一个线程来收数据。有N个客户端链接，就会添加N个线程。</p>\n<p>现在我们来实现收数据的方法ReciveMsgReqHandler</p>\n<pre><code>       /// &lt;summary&gt;\n        /// 接收客户端socket消息\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"_socket\"&gt;&lt;/param&gt;\n        private void ReciveMsgReqHandler(object _socket)\n        {\n            Socket clientSocket = (Socket)_socket;\n            try\n            {\n                while(true)\n                {\n                    //客户端连接成功后，接受来自客户端的消息\n                    if (clientSocket == null)\n                    {\n                        continue;\n                    }\n                    byte[] buffer = new byte[MAX_SEND_FILE_LENGTH];  //数据缓冲区。\n                    //实际接收到的有效字节数\n                    //Receive也是个卡线程的方法\n                    Console.WriteLine(\"等待接受客户端的数据:\");\n                    int dataLength = clientSocket.Receive(buffer);\n                    Console.WriteLine(\"接受到客户端的数据，字节数:\" + dataLength);\n                    //如果客户端关闭，发送的数据就为空，就跳出循环\n                    if (dataLength == 0)\n                    {\n                        break;\n                    }\n                    \n                    //假设收到的是个字符串（先这么假定），转成字符串处理\n                    string strMsg = Encoding.UTF8.GetString(buffer, 1, dataLength - 1);\n                    Console.WriteLine(\"接受到客户端的消息:\" + strMsg);\n                }\n                //中止当前线程\n                Thread.CurrentThread.Abort();\n            }\n            catch(Exception e)\n            {\n                SocketException socketExp = e as SocketException;\n                if (socketExp!=null &amp;&amp; socketExp.NativeErrorCode == 10054)\n                {\n                    Console.WriteLine(\"socket客户端关闭:\" + e.ToString());\n                }\n                else\n                {\n                    Console.WriteLine(\"======接受消息异常：\" + e.ToString());\n                }\n                //中止当前线程\n                Thread.CurrentThread.Abort();\n            }\n        }</code></pre>\n<p></p>\n<p></p>\n<p>就这样一个简易的socket服务器就搭建起来了。</p>\n<p>调用方式：</p>\n<pre><code>SGSocketServer socketServer = new SGSocketServer();\nsocketServer.Start();</code></pre>\n<p>当然，要达到工程应用级别，还要做更多一些工作。但千里之行始于足下，有了这个基础之后就可以不断地往里面添加业务逻辑。</p>\n</div>\n</div>"}