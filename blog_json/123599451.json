{"blogid": "123599451", "writerAge": "码龄3年", "writerBlogNum": "3", "writerCollect": "29", "writerComment": "4", "writerFan": "5", "writerGrade": "1级", "writerIntegral": "45", "writerName": "SingleWong_", "writerProfileAdress": "writer_image\\profile_123599451.jpg", "writerRankTotal": "193834", "writerRankWeekly": "404897", "writerThumb": "6", "writerVisitNum": "5819", "blog_read_count": "4018", "blog_time": "已于 2022-05-20 19:50:16 修改", "blog_title": "ZLMediaKit + wvp-GB28181-pro部署（windows64位）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>ZLMediaKit + wvp-GB28181-pro部署（windows64位）</h3>\n<ul><li><a href=\"#wiki_1\">一、参考链接（多看wiki）</a></li><li><ul><li><a href=\"#11_ZLMediaKit_2\">1.1. ZLMediaKit</a></li><li><a href=\"#12_wvpGB28181pro_5\">1.2. wvp-GB28181-pro</a></li><li><a href=\"#13__8\">1.3. 参考</a></li></ul>\n</li><li><a href=\"#_windwosZLMediaKit_12\">二 、在windwos环境下部署ZLMediaKit</a></li><li><ul><li><a href=\"#21__13\">2.1. 准备</a></li><li><a href=\"#22_libsrtpwebrtc_20\">2.2. 编译libsrtp（webrtc需要）</a></li><li><a href=\"#23_ZLMediaKit_40\">2.3. 编译ZLMediaKit</a></li><li><a href=\"#24__57\">2.4. 运行</a></li></ul>\n</li><li><a href=\"#windowswvpGB28181pro_74\">三、在windows环境下部署wvp-GB28181-pro</a></li><li><ul><li><a href=\"#31__75\">3.1. 准备</a></li><li><a href=\"#32_WVPPRO_82\">3.2. 编译WVP-PRO</a></li><li><a href=\"#33__109\">3.3. 配置</a></li><li><a href=\"#34__213\">3.4. 运行</a></li><li><a href=\"#35__223\">3.5. 添加摄像头</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"wiki_1\"></a>一、参考链接（多看wiki）</h1>\n<h2><a id=\"11_ZLMediaKit_2\"></a>1.1. ZLMediaKit</h2>\n<ol><li><a href=\"https://github.com/ZLMediaKit/ZLMediaKit\">github</a></li><li><a href=\"https://gitee.com/xia-chu/ZLMediaKit\">gitee</a></li></ol>\n<h2><a id=\"12_wvpGB28181pro_5\"></a>1.2. wvp-GB28181-pro</h2>\n<ol start=\"3\"><li><a href=\"https://github.com/648540858/wvp-GB28181-pro\">github</a></li><li><a href=\"https://gitee.com/pan648540858/wvp-GB28181-pro\">gitee</a></li></ol>\n<h2><a id=\"13__8\"></a>1.3. 参考</h2>\n<ol start=\"5\"><li><a href=\"https://blog.csdn.net/byna11sina11/article/details/119786889\">ZLMediaKit在Windows下启用WebRtc编译（64位）</a></li><li><a href=\"https://blog.csdn.net/haysonzeng/article/details/116754065\">ZLMediaKit webRTC编译与测试</a></li><li><a href=\"https://blog.csdn.net/qq_36801998/article/details/117701370\">JAVA-WVP+ZLMediaKit+MediaServerUI实现摄像头 GB28181推流播放录制</a></li></ol>\n<h1><a id=\"_windwosZLMediaKit_12\"></a>二 、在windwos环境下部署ZLMediaKit</h1>\n<h2><a id=\"21__13\"></a>2.1. 准备</h2>\n<table><thead><tr><th>software</th><th>version</th></tr></thead><tbody><tr><td><a href=\"https://github.com/Kitware/CMake/releases/tag/v3.20.5\">cmake</a></td><td>3.20.5</td></tr><tr><td>Microsoft Visual Studio</td><td>2017</td></tr><tr><td><a href=\"http://slproweb.com/products/Win32OpenSSL.html\">openssl</a></td><td>1.1.1m</td></tr><tr><td><a href=\"https://github.com/cisco/libsrtp/releases/tag/v2.4.0\">libsrtp</a></td><td>2.4.0</td></tr></tbody></table>\n<h2><a id=\"22_libsrtpwebrtc_20\"></a>2.2. 编译libsrtp（webrtc需要）</h2>\n<ol><li>需要将openssl添加到环境变量：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\62ed835d31544920b42088f9f5d04283.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\e252d06bf31a465f8390aa16d7c45d35.png\"/></li><li>解压并新建build文件夹：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\da51806a1eea4d16b3bfae973c9f04b8.png\"/></li><li>新建文件夹用于存放make install后的文件，如：D:\\DevelopTools\\libsrtp\\srtp2。</li><li>打开cmake-gui，设置源代码和build路径，点击Configure设置生成器：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1f6fe5b80cdf49eea3900997e073d27f.png\"/></li><li>配置cmake选项：</li></ol>\n<ul><li>勾选BUILD_SHARED_LIBS，生成srtp2.dll</li><li>填写CMAKE_INSTALL_PREFIX，用于存放make install后的include和lib</li><li>勾选ENABLE_OPENSSL，已经将openssl放入环境变量，会自动加载openssl的库文件路径</li></ul>\n<ol start=\"6\"><li>点击Configure后，如下图所示，然后点击Generate，在build文件夹中生成libsrtp的solution：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0509b4b40b874a5b98f2faee20c144e4.png\"/></li><li>在build文件夹中双击打开libsrtp2.sln，在vs2017中生成解决方案，再右键INSTALL点击生成：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\29193d965ca44179b11c9b9f666c0ea3.png\"/></li><li>在CMAKE_INSTALL_PREFIX配置的路径下生成以下文件：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d04e6c6a08064f9a9a6b1824b0bec98e.png\"/></li><li>最后，添加libsrtp的环境变量：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1cb4d578d88c47a787b984571be9f3ed.png\"/></li></ol>\n<h2><a id=\"23_ZLMediaKit_40\"></a>2.3. 编译ZLMediaKit</h2>\n<ol><li>下载源代码：</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 国内用户推荐从同步镜像网站gitee下载 </span>\n<span class=\"token function\">git</span> clone --depth <span class=\"token number\">1</span> https://gitee.com/xia-chu/ZLMediaKit\n<span class=\"token builtin class-name\">cd</span> ZLMediaKit\n<span class=\"token comment\"># 千万不要忘记执行这句命令</span>\n<span class=\"token function\">git</span> submodule update --init\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e549714aada2490a8c6f80371ca5d079.png\"/></p>\n<ol start=\"2\"><li>打开cmake-gui，设置源代码和新建的build文件夹路径，点击Configure配置vs2017、x64。然后填写CMAKE_INSTALL_PREFIX路径（D:\\ZLMediaKit），勾选ENABLE_WEBRTC，同样会自动加载openssl的相关配置。最后点击Generate，在build文件夹中生成ZLMediaKit.sln：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f10fc6d161c744e6bf8a10b26b0a2f67.png\"/></li><li>双击打开ZLMediaKit.sln，生成解决方案，再右键INSTALL点击生成：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\538cd16e738a445bb4636a66f6cc6a07.png\"/></li><li>最后会在D:\\DevelopTools\\zlm\\ZLMediaKit\\release\\windows64\\Debug\\Debug路径下生成以下文件：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dcdb905ad448438ca7803e67e9c7ea5a.png\"/></li></ol>\n<h2><a id=\"24__57\"></a>2.4. 运行</h2>\n<ol><li>由于没有webrtc测试前端文件，所以需要将ZLMediaKit根目录下的www文件夹，拷贝到MediaServer.exe同级目录，然后在当前目录cmd中执行MediaServer.exe，或直接双击它：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\83a4acab8b8c45ecb39346519eb1878c.png\"/><br/> Remark：启动MediaServer.exe时端口号被占用：1. 更改config.ini配置文件；2. 结束相关进程。</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 查询占用554端口号的进程（如：PID为17928）</span>\n<span class=\"token function\">netstat</span> -ano<span class=\"token operator\">|</span>findsrt <span class=\"token number\">554</span>\n<span class=\"token comment\"># 查询PID为17928的进程名称（如：MediaServer.exe）</span>\ntasklist<span class=\"token operator\">|</span><span class=\"token function\">find</span> <span class=\"token number\">17928</span>\n<span class=\"token comment\"># 结束进程（可以通过命令行结束进程，也可以在任务管理器的服务中根据PID结束进程）</span>\ntaskkill /pid <span class=\"token number\">17928</span>  -t  -f\n</code></pre>\n<ol start=\"2\"><li>在MediaServer.exe的同级目录中配置config.ini。我这里先没配置，直接运行后打开网页，会有webrtc。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\68a4e297be414b91822ae8027dc74899.png\"/><br/> 不过我点进去后是乱码。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3ec3deed63f2409d803a2b952dd3fe34.png\"/></li></ol>\n<h1><a id=\"windowswvpGB28181pro_74\"></a>三、在windows环境下部署wvp-GB28181-pro</h1>\n<h2><a id=\"31__75\"></a>3.1. 准备</h2>\n<p>项目运行依赖redis、jdk1.8，打包依赖git、maven、nodejs、npm。</p>\n<table><thead><tr><th>software</th><th>version</th></tr></thead><tbody><tr><td><a href=\"https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100\">redis</a>：<a href=\"https://blog.csdn.net/u011301348/article/details/105113511?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164775443216780271978502%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164775443216780271978502&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105113511.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Eregister&amp;utm_term=windows%E5%AE%89%E8%A3%85redis&amp;spm=1018.2226.3001.4187\">参考链接</a></td><td>win-3.2.100</td></tr><tr><td><a href=\"https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/\">maven</a></td><td>3.6.3</td></tr><tr><td><a href=\"https://nodejs.org/download/release/v14.19.0/\">node/npm</a></td><td>14.19.0/6.14.16</td></tr></tbody></table>\n<h2><a id=\"32_WVPPRO_82\"></a>3.2. 编译WVP-PRO</h2>\n<ol><li>下载源代码：</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">git</span> clone https://gitee.com/pan648540858/wvp-GB28181-pro\n</code></pre>\n<ol start=\"2\"><li>编译静态页面：</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">cd</span> wvp-GB28181-pro/web_src/\n<span class=\"token comment\"># 配置仓库，不然可能会出现网络问题导致编译报错</span>\n<span class=\"token function\">npm</span> --registry<span class=\"token operator\">=</span>https://registry.npm.taobao.org\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token function\">npm</span> run build\n\n编译如果报错, 一般都是网络问题, 导致的依赖包下载失败\n编译完成后在src/main/resources下出现static目录\n</code></pre>\n<ol start=\"3\"><li>打包项目, 生成可执行jar</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">cd</span> wvp-GB28181-pro\nmvn package\n\n编译如果报错, 一般都是网络问题, 导致的依赖包下载失败\n编译完成后在target目录下出现wvp-pro-x.x-xxxxxxxx.jar，比如我的是wvp-pro-2.2.1-05201142.jar\n</code></pre>\n<h2><a id=\"33__109\"></a>3.3. 配置</h2>\n<ol><li>配置application-dev.yml（在src/main/resources目录下），新生成的内容如下所示：</li></ol>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># [可选]上传文件大小限制</span>\n    <span class=\"token key atrule\">servlet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">multipart</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">max-file-size</span><span class=\"token punctuation\">:</span> 10MB\n            <span class=\"token key atrule\">max-request-size</span><span class=\"token punctuation\">:</span> 100MB\n    <span class=\"token comment\"># REDIS数据库配置</span>\n    <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># [必须修改] Redis服务器IP, REDIS安装在本机的,使用127.0.0.1</span>\n        <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 127.0.0.1\n        <span class=\"token comment\"># [必须修改] 端口号</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>\n        <span class=\"token comment\"># [可选] 数据库 DB</span>\n        <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n        <span class=\"token comment\"># [可选] 访问密码,若你的redis服务器没有设置密码，就不需要用密码去连接</span>\n        <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> xxxx\n        <span class=\"token comment\"># [可选] 超时时间</span>\n        <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span>\n        <span class=\"token comment\"># [可选] jdbc数据库配置, 项目使用sqlite作为数据库，一般不需要配置</span>\n        <span class=\"token comment\"># mysql数据源</span>\n    <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource\n        <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>3306/wvp<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;characterEncoding=UTF8&amp;rewriteBatchedStatements=true&amp;serverTimezone=PRC&amp;useSSL=false</span>\n        <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> xxxx\n        <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> xxxx\n        <span class=\"token key atrule\">druid</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">initialSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>                       <span class=\"token comment\"># 连接池初始化连接数</span>\n            <span class=\"token key atrule\">maxActive</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>                        <span class=\"token comment\"># 连接池最大连接数</span>\n            <span class=\"token key atrule\">minIdle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>                            <span class=\"token comment\"># 连接池最小空闲连接数</span>\n            <span class=\"token key atrule\">maxWait</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60000</span>                        <span class=\"token comment\"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</span>\n            <span class=\"token key atrule\">keepAlive</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>                       <span class=\"token comment\"># 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。</span>\n            <span class=\"token key atrule\">validationQuery</span><span class=\"token punctuation\">:</span> select 1             <span class=\"token comment\"># 检测连接是否有效sql，要求是查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</span>\n            <span class=\"token key atrule\">testWhileIdle</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>                   <span class=\"token comment\"># 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span>\n            <span class=\"token key atrule\">testOnBorrow</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>                   <span class=\"token comment\"># 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span>\n            <span class=\"token key atrule\">testOnReturn</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>                   <span class=\"token comment\"># 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span>\n            <span class=\"token key atrule\">poolPreparedStatements</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>         <span class=\"token comment\"># 是否開啟PSCache，並且指定每個連線上PSCache的大小</span>\n            <span class=\"token key atrule\">timeBetweenEvictionRunsMillis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60000</span>  <span class=\"token comment\"># 配置間隔多久才進行一次檢測，檢測需要關閉的空閒連線，單位是毫秒</span>\n            <span class=\"token key atrule\">minEvictableIdleTimeMillis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300000</span>    <span class=\"token comment\"># 配置一個連線在池中最小生存的時間，單位是毫秒</span>\n            <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span> stat<span class=\"token punctuation\">,</span>wall<span class=\"token punctuation\">,</span>slf4j             <span class=\"token comment\"># 配置监控统计拦截的filters，监控统计用的filter:sta, 日志用的filter:log4j, 防御sql注入的filter:wall</span>\n            <span class=\"token key atrule\">useGlobalDataSourceStat</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>         <span class=\"token comment\"># 合并多个DruidDataSource的监控数据</span>\n            <span class=\"token comment\"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span>\n            <span class=\"token key atrule\">connectionProperties</span><span class=\"token punctuation\">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=1000\n            <span class=\"token comment\">#stat-view-servlet.url-pattern: /admin/druid/*</span>\n\n<span class=\"token comment\">#[可选] WVP监听的HTTP端口, 网页和接口调用都是这个端口</span>\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18080</span>\n\n<span class=\"token comment\"># 作为28181服务器的配置</span>\n<span class=\"token key atrule\">sip</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># [必须修改] 本机的IP</span>\n    <span class=\"token key atrule\">ip</span><span class=\"token punctuation\">:</span> 10.16.xxx.xxx\n    <span class=\"token comment\"># [可选] 28181服务监听的端口</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5060</span>\n    <span class=\"token comment\"># 根据国标6.1.2中规定，domain宜采用ID统一编码的前十位编码。国标附录D中定义前8位为中心编码（由省级、市级、区级、基层编号组成，参照GB/T 2260-2007）</span>\n    <span class=\"token comment\"># 后两位为行业编码，定义参照附录D.3</span>\n    <span class=\"token comment\"># 3701020049标识山东济南历下区 信息行业接入</span>\n    <span class=\"token comment\"># [可选]</span>\n    <span class=\"token key atrule\">domain</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4401020049</span>\n    <span class=\"token comment\"># [可选]</span>\n    <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">44010200492000000001</span>\n    <span class=\"token comment\"># [可选] 默认设备认证密码，后续扩展使用设备单独密码, 移除密码将不进行校验</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> admin123\n\n<span class=\"token comment\">#zlm 默认服务器配置</span>\n<span class=\"token key atrule\">media</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> j6i8Pv5SnnLyuoib\n    <span class=\"token comment\"># [必须修改] zlm服务器的内网IP</span>\n    <span class=\"token key atrule\">ip</span><span class=\"token punctuation\">:</span> 10.16.xxx.xxx\n    <span class=\"token comment\"># [必须修改] zlm服务器的http.port</span>\n    <span class=\"token key atrule\">http-port</span><span class=\"token punctuation\">:</span> xxxx\n    <span class=\"token comment\"># [可选] zlm服务器的hook.admin_params=secret</span>\n    <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span> 035c73f7<span class=\"token punctuation\">-</span>bb6b<span class=\"token punctuation\">-</span>4889<span class=\"token punctuation\">-</span>a715<span class=\"token punctuation\">-</span>d9eb2d1925cc\n    <span class=\"token comment\"># 启用多端口模式, 多端口模式使用端口区分每路流，兼容性更好。 单端口使用流的ssrc区分， 点播超时建议使用多端口测试</span>\n    <span class=\"token key atrule\">rtp</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># [可选] 是否启用多端口模式, 开启后会在portRange范围内选择端口用于媒体流传输</span>\n        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token comment\"># [可选] 在此范围内选择端口用于媒体流传输, 必须提前在zlm上配置该属性，不然自动配置此属性可能不成功</span>\n        <span class=\"token key atrule\">port-range</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">,</span><span class=\"token number\">30500</span> <span class=\"token comment\"># 端口范围</span>\n        <span class=\"token comment\"># [可选] 国标级联在此范围内选择端口发送媒体流,</span>\n        <span class=\"token key atrule\">send-port-range</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">,</span><span class=\"token number\">30500</span> <span class=\"token comment\"># 端口范围</span>\n    <span class=\"token comment\"># 录像辅助服务， 部署此服务可以实现zlm录像的管理与下载， 0 表示不使用</span>\n    <span class=\"token key atrule\">record-assist-port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18081</span>\n<span class=\"token comment\"># [可选] 日志配置, 一般不需要改</span>\n<span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>logback<span class=\"token punctuation\">-</span>spring<span class=\"token punctuation\">-</span>local.xml\n\n<span class=\"token comment\"># 版本信息， 不需修改</span>\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@project.version@\"</span>\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@project.description@\"</span>\n    <span class=\"token key atrule\">artifact-id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@project.artifactId@\"</span>\n\n</code></pre>\n<p>Remark：</p>\n<ul><li>记得开启redis服务。</li><li>先在mysql中新建wvp数据库，然后建表：1. 运行sql目录下的mysql.sql（可能会报错）；2. 或复制mysql.sql中的内容，在wvp数据库中以查询的方式建表：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9bcb5ccedfed4de28558f8e23d35efd7.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\34b9f78a30c04260afa296ca89f92eab.png\"/></li><li>media.id要与zlm的config.ini中[general]下的mediaServerId一致，比如我的是j9awLgYX8c7TpGN1。</li></ul>\n<h2><a id=\"34__213\"></a>3.4. 运行</h2>\n<ol><li>启动ZLM<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f0d6207d96ec413c925a428d2a8b8a10.png\"/></li><li>运行WVP：1. cd cd wvp-GB28181-pro/target; java -jar wvp-pro-*.jar；2. 直接用idea运行<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9a1d116a8b5846c98565b0ba9ee0aa22.png\"/></li><li>访问web：http://ip:port<br/> 比如我部署的服务ip为10.16.31.250， server.port为18080， 那么访问地址为http://10.16.31.250:108080, 会自动跳转到登陆页,默认用户名：admin， 密码：admin。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5c9dee7f0b024de9b41a15e0eeab288c.png\"/></li><li>首页<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5db9ef3662a04f3997db09a70faf76fe.png\"/></li></ol>\n<h2><a id=\"35__223\"></a>3.5. 添加摄像头</h2>\n<ol><li> <p>配置海康IPC GB28181协议传输<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a76de8ce719848d4b88e42f30461c758.png\"/></p> </li><li> <p>注册成功<br/> <img alt=\"在这里插入图片描述\" src=\"image\\df5dda0c771b495bb4fe048fca1cc0d8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\23a2397f3c354ddd8bb64d42faa3ea59.png\"/></p> </li><li> <p>实时监控<br/> <img alt=\"在这里插入图片描述\" src=\"image\\19508c287e2642a6a33fa8ca9bbc6edb.png\"/></p> </li><li> <p>拉流代理<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5e2ec90ae24d4807b68a8be975d5c7f4.png\"/></p> </li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}