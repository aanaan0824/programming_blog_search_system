{"blogid": "121672529", "writerAge": "码龄4年", "writerBlogNum": "221", "writerCollect": "11871", "writerComment": "723", "writerFan": "4717", "writerGrade": "7级", "writerIntegral": "13588", "writerName": "zsffuture", "writerProfileAdress": "writer_image\\profile_121672529.jpg", "writerRankTotal": "5469", "writerRankWeekly": "13449", "writerThumb": "2605", "writerVisitNum": "2115476", "blog_read_count": "9701", "blog_time": "于 2021-12-02 19:45:00 发布", "blog_title": "cmake使用教（二） install的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>这里主要介绍使用cmake进行install方面的操作：</p>\n<p>通过cmake可以 安装的内容可以包括目标二进制、动态库、静态库以及文件、目录、脚本等，下面分别进行简述一下：</p>\n<p><a class=\"link-info\" href=\"https://cmake.org/cmake/help/v3.22/command/install.html?highlight=install\" title=\"细节可以参考官网，这里简单描述一下\">细节可以参考官网，这里简单描述一下</a></p>\n<h1>1.目标文件的安装</h1>\n<pre><code class=\"language-python\">install(TARGETS targets... [EXPORT &lt;export-name&gt;]\n        [RUNTIME_DEPENDENCIES args...|RUNTIME_DEPENDENCY_SET &lt;set-name&gt;]\n        [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE|\n          PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]\n         [DESTINATION &lt;dir&gt;]\n         [PERMISSIONS permissions...]\n         [CONFIGURATIONS [Debug|Release|...]]\n         [COMPONENT &lt;component&gt;]\n         [NAMELINK_COMPONENT &lt;component&gt;]\n         [OPTIONAL] [EXCLUDE_FROM_ALL]\n         [NAMELINK_ONLY|NAMELINK_SKIP]\n        ] [...]\n        [INCLUDES DESTINATION [&lt;dir&gt; ...]]\n        )</code></pre>\n<p style=\"text-align:justify;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">下表显示了目标类型及其关联变量和内置默认值，这些默认值适用于未指定目标的情况：</span></span></p>\n<table cellspacing=\"0\"><thead><tr><th style=\"background-color:#eeddee;text-align:left;\"> <p style=\"text-align:justify;\">目标类型</p> </th><th style=\"background-color:#eeddee;text-align:left;\"> <p style=\"text-align:justify;\">GNUInstallDirs 变量</p> </th><th style=\"background-color:#eeddee;text-align:left;\"> <p style=\"text-align:justify;\">内置默认值</p> </th></tr></thead><tbody><tr><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>RUNTIME</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>${CMAKE_INSTALL_BINDIR}</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>bin</code></p> </td></tr><tr><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>LIBRARY</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>${CMAKE_INSTALL_LIBDIR}</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>lib</code></p> </td></tr><tr><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>ARCHIVE</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>${CMAKE_INSTALL_LIBDIR}</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>lib</code></p> </td></tr><tr><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>PRIVATE_HEADER</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>${CMAKE_INSTALL_INCLUDEDIR}</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>include</code></p> </td></tr><tr><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>PUBLIC_HEADER</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>${CMAKE_INSTALL_INCLUDEDIR}</code></p> </td><td style=\"background-color:#ffffff;text-align:left;\"> <p style=\"text-align:justify;\"><code>include</code></p> </td></tr></tbody></table>\n<p>参数中的TARGETS后面跟的就是我们通过ADD_EXECUTABLE 或者ADD_LIBRARY 定义的目标文件，可能是可执行二进制、动态库、静态库。<br/> 目标类型也就相对应的有三种，ARCHIVE特指静态库，LIBRARY特指动态库，RUNTIME特指可执行目标二进制。<br/> DESTINATION定义了安装的路径，如果路径以/开头，那么指的是绝对路径，这时候CMAKE_INSTALL_PREFIX其实就无效了.<br/> 如果你希望使用CMAKE_INSTALL_PREFIX来定义安装路径，就要写成相对路径，即不要以/开头，那么安装后的路径就是${CMAKE_INSTALL_PREFIX}/&lt;DESTINATION定义的路径&gt;<br/> 举个简单的例子：</p>\n<pre><code>INSTALL(TARGETS myrun mylib mystaticlib\nRUNTIME DESTINATION bin\nLIBRARY DESTINATION lib\nARCHIVE DESTINATION libstatic\n)</code></pre>\n<p>上面的例子会将：<br/> 可执行二进制myrun 安装到${CMAKE_INSTALL_PREFIX}/bin 目录<br/> 动态库libmylib安装到${CMAKE_INSTALL_PREFIX}/lib目录<br/> 静态库libmystaticlib 安装到${CMAKE_INSTALL_PREFIX}/libstatic目录<br/> 特别注意的是你不需要关心TARGETS具体生成的路径，只需要写上TARGETS名称就可以<br/> 了。</p>\n<h1>2.普通文件安装</h1>\n<pre><code class=\"language-python\">install(&lt;FILES|PROGRAMS&gt; files...\n        TYPE &lt;type&gt; | DESTINATION &lt;dir&gt;\n        [PERMISSIONS permissions...]\n        [CONFIGURATIONS [Debug|Release|...]]\n        [COMPONENT &lt;component&gt;]\n        [RENAME &lt;name&gt;] [OPTIONAL] [EXCLUDE_FROM_ALL])</code></pre>\n<p></p>\n<table><thead><tr><th> <p><code>TYPE</code> Argument</p> </th><th> <p>GNUInstallDirs Variable</p> </th><th> <p>Built-In Default</p> </th></tr></thead><tbody><tr><td> <p><code>BIN</code></p> </td><td> <p><code>${CMAKE_INSTALL_BINDIR}</code></p> </td><td> <p><code>bin</code></p> </td></tr><tr><td> <p><code>SBIN</code></p> </td><td> <p><code>${CMAKE_INSTALL_SBINDIR}</code></p> </td><td> <p><code>sbin</code></p> </td></tr><tr><td> <p><code>LIB</code></p> </td><td> <p><code>${CMAKE_INSTALL_LIBDIR}</code></p> </td><td> <p><code>lib</code></p> </td></tr><tr><td> <p><code>INCLUDE</code></p> </td><td> <p><code>${CMAKE_INSTALL_INCLUDEDIR}</code></p> </td><td> <p><code>include</code></p> </td></tr><tr><td> <p><code>SYSCONF</code></p> </td><td> <p><code>${CMAKE_INSTALL_SYSCONFDIR}</code></p> </td><td> <p><code>etc</code></p> </td></tr><tr><td> <p><code>SHAREDSTATE</code></p> </td><td> <p><code>${CMAKE_INSTALL_SHARESTATEDIR}</code></p> </td><td> <p><code>com</code></p> </td></tr><tr><td> <p><code>LOCALSTATE</code></p> </td><td> <p><code>${CMAKE_INSTALL_LOCALSTATEDIR}</code></p> </td><td> <p><code>var</code></p> </td></tr><tr><td> <p><code>RUNSTATE</code></p> </td><td> <p><code>${CMAKE_INSTALL_RUNSTATEDIR}</code></p> </td><td> <p><code>&lt;LOCALSTATE dir&gt;/run</code></p> </td></tr><tr><td> <p><code>DATA</code></p> </td><td> <p><code>${CMAKE_INSTALL_DATADIR}</code></p> </td><td> <p><code>&lt;DATAROOT dir&gt;</code></p> </td></tr><tr><td> <p><code>INFO</code></p> </td><td> <p><code>${CMAKE_INSTALL_INFODIR}</code></p> </td><td> <p><code>&lt;DATAROOT dir&gt;/info</code></p> </td></tr><tr><td> <p><code>LOCALE</code></p> </td><td> <p><code>${CMAKE_INSTALL_LOCALEDIR}</code></p> </td><td> <p><code>&lt;DATAROOT dir&gt;/locale</code></p> </td></tr><tr><td> <p><code>MAN</code></p> </td><td> <p><code>${CMAKE_INSTALL_MANDIR}</code></p> </td><td> <p><code>&lt;DATAROOT dir&gt;/man</code></p> </td></tr><tr><td> <p><code>DOC</code></p> </td><td> <p><code>${CMAKE_INSTALL_DOCDIR}</code></p> </td><td> <p><code>&lt;DATAROOT dir&gt;/doc</code></p> </td></tr></tbody></table>\n<p>可用于安装一般文件，并可以指定访问权限，文件名是此指令所在路径下的相对路径。如果默认不定义权限PERMISSIONS，安装后的权限为：<br/> OWNER_WRITE, OWNER_READ, GROUP_READ,和WORLD_READ，即 644权限。 </p>\n<h1>3.目录的安装</h1>\n<pre><code>install(DIRECTORY dirs...\n        TYPE &lt;type&gt; | DESTINATION &lt;dir&gt;\n        [FILE_PERMISSIONS permissions...]\n        [DIRECTORY_PERMISSIONS permissions...]\n        [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]\n        [CONFIGURATIONS [Debug|Release|...]]\n        [COMPONENT &lt;component&gt;] [EXCLUDE_FROM_ALL]\n        [FILES_MATCHING]\n        [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]\n         [EXCLUDE] [PERMISSIONS permissions...]] [...])</code></pre>\n<p>这里主要介绍其中的DIRECTORY、PATTERN 以及 PERMISSIONS 参数。<br/> DIRECTORY 后面连接的是所在Source目录的相对路径，但务必注意：abc和 abc/有很大的区别。<br/> 如果目录名不以/结尾，那么这个目录将被安装为目标路径下的abc，如果目录名以/结尾，<br/> 代表将这个目录中的内容安装到目标路径，但不包括这个目录本身。<br/> PATTERN用于使用正则表达式进行过滤，PERMISSIONS用于指定PATTERN过滤后的文件权限。<br/> 我们来看一个例子:</p>\n<pre><code class=\"language-python\">INSTALL(DIRECTORY icons scripts/ DESTINATION share/myproj\nPATTERN \"CVS\" EXCLUDE\nPATTERN \"scripts/*\"\nPERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ\nGROUP_EXECUTE GROUP_READ)</code></pre>\n<p>这条指令的执行结果是：<br/> 将icons 目录安装到 &lt;prefix&gt;/share/myproj，将 scripts/中的内容安装到<br/> &lt;prefix&gt;/share/myproj<br/> 不包含目录名为CVS的目录，对于scripts/* 文件指定权限为 OWNER_EXECUTE<br/> OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ.</p>\n<p>这里测试一下：根据<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_42398658/article/details/121669986\" title=\"上一篇\">上一篇</a>的文章进行安装测试：</p>\n<h1>4.测试</h1>\n<p>修改根目录下的CMakeLists.txt文件如下，其实就增加了install，这里你需要先创建几个文件，才能尝试安装：</p>\n<pre><code class=\"language-python\"># 多个目录多个源文件\ncmake_minimum_required(VERSION 2.8)\n\nproject(test1)\n# 遍历当前目录的所有文件并使用DIR_SRCS保存，也可以通过SET(SRC_LIST main.c)进行指定\naux_source_directory(. DIR_SRCS)\n\n# 添加生成可执行文件的保存目录,不会保存中间产物，如果不指定该目录则和中间产物保存在一起\nset(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin )\n# 添加头文件\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n# 这里将子目录条件到工程，并指定编译的输出产物，默认输出产物保存到build/src文件夹下，\n# 如果不指定库目录保存路径同样也会保存到该路径下\nadd_subdirectory(src)\n\n# 上面定义了将src子目录加入工程，并指定编译输出(包含编译中间结果)路径为\n# bin目录。如果不进行 bin目录的指定，那么编译结果(包括中间结果)都将存放在\n# build/src 目录(这个目录跟原有的src目录对应)，指定 bin 目录后，相当于在编译时\n# 将src重命名为bin，所有的中间结果和目标二进制都将存放在bin目录。\n\n# 指定生成目标\nadd_executable(test1 main.cpp)\n\n# 添加链接库\n# 把子目录集src的编译成的库文件链接到这里\ntarget_link_libraries(test1 add)\n\nmessage(STATUS  ${PROJECT_SOURCE_DIR} \"------完成编译和链接生成可执行文件-----\")\n\n# 添加安装信息如copyright readme\ninstall(FILES copyright README.md DESTINATION share/doc/cmake/test)\n# 安装runtest.sh\ninstall(PROGRAMS runtest.sh DESTINATION bin)\n\n# 这里按照doc目录下的文件\ninstall(DIRECTORY doc/ DESTINATION share/doc/cmake/test)</code></pre>\n<p>进入build，执行如下命令：</p>\n<pre><code>cmake -DCMAKE_INSTALL_PREFIX=/home/ubuntu/work/usr ..\nmake\nmake install </code></pre>\n<p>这是只是测试使用，因此安装在home/ubuntu/work/usr下，也可以默认安装，默认安装的路径为：</p>\n<p>如果我没有定义CMAKE_INSTALL_PREFIX会安装到什么地方？<br/> 你可以尝试以下，cmake ..;make;make install，你会发现<br/> CMAKE_INSTALL_PREFIX的默认定义是/usr/local</p>\n<p><img alt=\"\" height=\"245\" src=\"image\\37b9feb7694b4af99e287a5be71db951.png\" width=\"320\"/></p>\n<p> </p>\n<p>下一节介绍静态库和动态库的构建</p>\n<p></p>\n</div>\n</div>"}