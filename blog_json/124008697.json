{"blogid": "124008697", "writerAge": "码龄1年", "writerBlogNum": "3", "writerCollect": "13", "writerComment": "4", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "42", "writerName": "weixin_57512580", "writerProfileAdress": "writer_image\\profile_124008697.jpg", "writerRankTotal": "188700", "writerRankWeekly": "1108037", "writerThumb": "8", "writerVisitNum": "9121", "blog_read_count": "4316", "blog_time": "于 2022-04-07 10:50:45 发布", "blog_title": "Unity中的Character Controller 简介", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"margin-left:0;text-align:justify;\"><img alt=\"\" height=\"224\" src=\"image\\d034c87233294d1c8183a50df9ba7598.png\" width=\"455\"/></p>\n<p style=\"margin-left:0;text-align:justify;\">Slope Limit :坡度限制</p>\n<p style=\"margin-left:0;text-align:justify;\">Step Offset :每步偏移量</p>\n<p style=\"margin-left:0;text-align:justify;\">Skin Width :皮肤厚度</p>\n<p style=\"margin-left:0;text-align:justify;\">Min Move Distance :最小移动距离</p>\n<p style=\"margin-left:0;text-align:justify;\">Center ：中心</p>\n<p style=\"margin-left:0;text-align:justify;\">Radius :半径</p>\n<p style=\"margin-left:0;text-align:justify;\">Height :高度</p>\n<p style=\"margin-left:0;text-align:justify;\"></p>\n<p style=\"margin-left:0;text-align:justify;\">Unity中可以使用character controller实现角色的控制，在unity中先创建一个需要被控制的角色，可以方块体等，为主角加入CharacterController组件</p>\n<p style=\"margin-left:0;text-align:justify;\">创建C#脚本，写入一下脚本</p>\n<p style=\"margin-left:0;text-align:justify;\">public Transform m_transform;</p>\n<p style=\"margin-left:0;text-align:justify;\">CharacterController m_ch;</p>\n<p style=\"margin-left:0;text-align:justify;\">void Start()</p>\n<p style=\"margin-left:0;text-align:justify;\">    {<!-- --></p>\n<p style=\"margin-left:0;text-align:justify;\">        m_transform = this.transform;</p>\n<p style=\"margin-left:0;text-align:justify;\">        m_ch = this.GetComponent&lt;CharacterController&gt;();</p>\n<p style=\"margin-left:0;text-align:justify;\">    }</p>\n<p style=\"margin-left:0;text-align:justify;\">m_transfrom = this,transform; //的作用是获取主角的transform组件</p>\n<p style=\"margin-left:0;text-align:justify;\">m_ch = this.GetComponent&lt;CharacterController&gt;(); </p>\n<p style=\"margin-left:0;text-align:justify;\">//的作用是获取主角的characterController组件</p>\n<p style=\"margin-left:0;text-align:justify;\"></p>\n<p style=\"margin-left:0;text-align:justify;\">继续向脚本中添加代码</p>\n<p style=\"margin-left:0;text-align:left;\">    <span style=\"color:#0000FF;\">float</span><span style=\"color:#000000;\"> m_movSpeed = 5.0f;      //</span><span style=\"color:#000000;\">移动速度</span></p>\n<p style=\"margin-left:0;text-align:left;\">    <span style=\"color:#0000FF;\">float</span><span style=\"color:#000000;\"> m_rotSpeed = 1.0f;      //</span><span style=\"color:#000000;\">旋转速度</span></p>\n<p style=\"margin-left:0;text-align:left;\">    <span style=\"color:#0000FF;\">float</span><span style=\"color:#000000;\"> m_jumphight = 3f;       //</span><span style=\"color:#000000;\">跳跃高度</span></p>\n<p style=\"margin-left:0;text-align:left;\">    <span style=\"color:#0000FF;\">float</span><span style=\"color:#000000;\"> m_gravity = 9.8f;       //</span><span style=\"color:#000000;\">重力加速度</span></p>\n<p style=\"margin-left:0;text-align:left;\">    <span style=\"color:#0000FF;\">private</span><span style=\"color:#000000;\"> Vector3 Velocity = Vector3.zero;     //</span><span style=\"color:#000000;\">竖直方向上的一个向量</span></p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<p style=\"margin-left:0;text-align:left;\">    <span style=\"color:#0000FF;\">public</span><span style=\"color:#000000;\"> Transform m_groundcheck;   //</span><span style=\"color:#000000;\">与地面接触的检测器</span></p>\n<p style=\"margin-left:0;text-align:left;\">    <span style=\"color:#0000FF;\">public</span> <span style=\"color:#0000FF;\">float</span><span style=\"color:#000000;\"> m_checkradius = 0.2f;      //</span><span style=\"color:#000000;\">地面检测器的范围</span></p>\n<p style=\"margin-left:0;text-align:left;\">    <span style=\"color:#0000FF;\">private</span> <span style=\"color:#0000FF;\">bool</span><span style=\"color:#000000;\"> m_isground;          //</span><span style=\"color:#000000;\">一个判断是否与地面接触的bool值，接触则为true</span></p>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#0000FF;\">public</span><span style=\"color:#000000;\"> LayerMask layerMask;        //</span><span style=\"color:#000000;\">地面层</span></p>\n<p style=\"margin-left:0;text-align:justify;\"></p>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#000000;\">这里提到了一个地面检测器，地面检测器的做法为在，主角的底部添加一个空的游戏体，调整一个合适的大小，尽量小一些</span></p>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#000000;\">添加结束之后，我们在脚本中继续添加如下代码</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#0000FF;\">void</span> <span style=\"color:#0000FF;\">Update</span><span style=\"color:#000000;\">()</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">    {<!-- --></span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">        m_isground = Physics.CheckSphere(m_groundcheck.position, m_checkradius, layerMask);</span></p>\n<p style=\"margin-left:0;text-align:left;\">        <span style=\"color:#0000FF;\">if</span><span style=\"color:#000000;\"> (m_isground &amp;&amp; Velocity.y &lt;0)</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">        {<!-- --></span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">            Velocity.y = 0;</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">        }</span></p>\n<p style=\"margin-left:0;text-align:left;\">        <span style=\"color:#0000FF;\">if</span><span style=\"color:#000000;\"> (m_isground &amp;&amp; Input.GetButtonDown(</span><span style=\"color:#a31515;\">\"Jump\"</span><span style=\"color:#000000;\">))</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">        {<!-- --></span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">            Velocity.y += Mathf.Sqrt(m_jumphight * m_gravity);</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">        }</span></p>\n<p style=\"margin-left:0;text-align:left;\">        <span style=\"color:#008000;\">//</span><span style=\"color:#008000;\">控制主角</span></p>\n<p style=\"margin-left:0;text-align:left;\">        <span style=\"color:#0000FF;\">var</span><span style=\"color:#000000;\"> vertical = Input.GetAxis(</span><span style=\"color:#a31515;\">\"Vertical\"</span><span style=\"color:#000000;\">);  </span><span style=\"color:#008000;\">//</span><span style=\"color:#008000;\">键入ws</span></p>\n<p style=\"margin-left:0;text-align:left;\">        <span style=\"color:#0000FF;\">var</span><span style=\"color:#000000;\"> horizontal = Input.GetAxis(</span><span style=\"color:#a31515;\">\"Horizontal\"</span><span style=\"color:#000000;\">); </span><span style=\"color:#008000;\">//</span><span style=\"color:#008000;\">键入ad Horizontal</span></p>\n<p style=\"margin-left:0;text-align:left;\">        <span style=\"color:#0000FF;\">var</span><span style=\"color:#000000;\"> motion = transform.forward * vertical * m_movSpeed * Time.deltaTime;</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">        Velocity.y -= m_gravity * Time.deltaTime;    </span><span style=\"color:#008000;\">//</span><span style=\"color:#008000;\">重力加速度 a += g*时间</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">        m_ch.Move(Velocity * Time.deltaTime);  </span><span style=\"color:#008000;\">//</span><span style=\"color:#008000;\">竖直方向的移动</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">        m_ch.Move(motion); </span><span style=\"color:#008000;\">//</span><span style=\"color:#008000;\">水平方向的移动</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">        m_transform.Rotate(Vector3.up,horizontal * m_rotSpeed);  </span><span style=\"color:#008000;\">//</span><span style=\"color:#008000;\">旋转</span></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">}</span></p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"color:#000000;\">m_isground = Physics.CheckSphere(m_groundcheck.position, m_checkradius, layerMask);</span><span style=\"color:#000000;\">这串代码为一个触碰检测，如果检测体m_groundcheck与layerMask接触后则返回一个true</span></p>\n<p style=\"margin-left:0;text-align:left;\"></p>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#000000;\">Velocity.y += Mathf.Sqrt(m_jumphight * m_gravity);</span></p>\n<p style=\"margin-left:0;text-align:justify;\"><span style=\"color:#000000;\">计算跳跃的近似公式</span></p>\n<p style=\"margin-left:0;text-align:justify;\"><img alt=\"\" height=\"96\" src=\"image\\620c5df28615461daf7bc87e041c09c4.png\" width=\"762\"/></p>\n</div>\n</div>"}