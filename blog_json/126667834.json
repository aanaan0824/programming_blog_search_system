{"blogid": "126667834", "writerAge": "码龄2年", "writerBlogNum": "353", "writerCollect": "50", "writerComment": "3", "writerFan": "729", "writerGrade": "5级", "writerIntegral": "3460", "writerName": "哇嘎123", "writerProfileAdress": "writer_image\\profile_126667834.jpg", "writerRankTotal": "6194", "writerRankWeekly": "3722", "writerThumb": "18", "writerVisitNum": "53817", "blog_read_count": "195", "blog_time": "于 2022-09-02 20:17:13 发布", "blog_title": "Express 路由", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>路由：实际上就是映射关系</p>\n<p>现实中的路由案例：打10086时候 有那些按键<strong><span style=\"color:#fe2c24;\"> 按键1-------业务1 按键2------业务2</span></strong></p>\n<p> 在这里：<span style=\"color:#fe2c24;\">路由=按键与服务之间的映射关系</span></p>\n<hr/>\n<p>Express中的路由：是<span style=\"color:#fe2c24;\">客户端的请求</span>与<span style=\"color:#fe2c24;\">服务器处理函</span>数之间的映射关系</p>\n<p>Express中的路由组成的三部分：</p>\n<ul><li>请求的类型</li><li>请求的URL地址</li><li>处理函数</li></ul>\n<p> ——app.METHOD(PATH,HANDLER)  </p>\n<p>METHOD---请求类型（GET\\POST）</p>\n<p>PATH——请求的url地址（与客户端的相关）</p>\n<p>HANDLER——处理函数，与之对应的处理函数（映射到服务器端的处理函数）</p>\n<p>简单的路由1:get请求类型</p>\n<pre><code class=\"language-javascript\">app.get('/user',function(req,res){\n    res.send({\"name\":\"zj\",\"age\":66,\"gender\":\"男\"} )\n})</code></pre>\n<p>简单的路由1:post请求类型</p>\n<pre><code class=\"language-javascript\">app.post('/user',function(req,res){\n    res.send('post请求的响应')\n})\n</code></pre>\n<h3></h3>\n<hr/>\n<h3> 路由的匹配过程 </h3>\n<p>每一个请求到达服务器的时候，需要经过路由的匹配，匹配成功才会调用对应的处理函数 </p>\n<p>在匹配时，会按照路由<span style=\"color:#fe2c24;\">的顺序进</span>行匹配，如果<span style=\"color:#fe2c24;\">请求类型</span>和请<span style=\"color:#fe2c24;\">求的URL同</span>时匹配成功，则Express会将这次请求，转交给对应的function函数进行处理——客户端的请求会从上到下进行匹配路由</p>\n<hr/>\n<p>路由最简单的用法：将在服务器上挂载路由——实验案例</p>\n<p>首先新建文件夹——然后运行npm init -y——初始化package.json文件</p>\n<p>——然后在你的文件夹下安装需要的包-- npm i express</p>\n<p><img alt=\"\" height=\"138\" src=\"image\\edf8f49aa71d46239e81a8813bdd3169.png\" width=\"366\"/></p>\n<p><img alt=\"\" height=\"88\" src=\"image\\421d0abaf034470b85af850636ee86ff.png\" width=\"746\"/></p>\n<p><img alt=\"\" height=\"65\" src=\"image\\874b9f97e5c94affb5ab4f8bfc41de7d.png\" width=\"692\"/></p>\n<p>使用： <span style=\"color:#fe2c24;\"> nodemon</span> .\\最简单的路由服务器.js启动服务器</p>\n<pre><code class=\"language-javascript\">\n//导入express模块\nconst express=require('express')\n\n//创建web服务器\nconst app=express()\n//挂载路由\napp.get('/',(req,res)=&gt;{\n    res.send('处理函数 这是服务器给的 响应客户端的根url的get请求')\n})\napp.post('/',(req,res)=&gt;{\n    res.send('处理函数 这是服务器给的 响应客户端的根url的post请求')\n})\n\n//启动服务器、使用80端口\napp.listen(80,()=&gt;{\n    console.log('http://127.0.0.1 启动成功')\n})</code></pre>\n<p> <img alt=\"\" height=\"49\" src=\"image\\1b1598a760ed4c67b9b0e633bc521293.png\" width=\"644\"/></p>\n<p> <img alt=\"\" height=\"518\" src=\"image\\cb624756f8bd4631a4949ff0d01ef577.png\" width=\"1149\"/></p>\n<p> <img alt=\"\" height=\"516\" src=\"image\\ff8132949a1b4cf6b99b97bbbe6a8706.png\" width=\"1010\"/></p>\n<p>但上述的挂载路由（直接挂载在APP上）的方式实际中不常用——  导致代码量太多，不方便管理--使用路由模块化管理--将路由抽离为单独的模块</p>\n<hr/>\n<h3><strong> 路由模块化创建</strong></h3>\n<ul><li>创建路由模块对应的.js文件——自定义的文件，专门用于挂载路由</li><li>调用express.Router()函数创建路由对象（<span style=\"color:#fe2c24;\">路由的实例）</span>——前面的时候：const app=express()返回的是app,<span style=\"color:#fe2c24;\">服务器的实例</span></li><li>向<span style=\"color:#fe2c24;\">路由实例对</span>象上挂载具体的路由（原来是app上）</li><li>使用module.exports向外共享路由对象</li><li>使用app.use()注册路由模块</li></ul>\n<p> <img alt=\"\" height=\"65\" src=\"image\\f566da14014d41978b35eb39bbdc48d9.png\" width=\"414\"/></p>\n<pre><code class=\"language-javascript\">//导入express\nconst express=require('express')\n//创建路由对象\nconst Router=express.Router()\n//挂载具体路由\nRouter.get('/user/a',function(req,res){\n    res.send('GET USER A')\n})\nRouter.post('/user/b',(req,res)=&gt;{\n    res.send('POST USER B')\n})\n//向外导出路由\nmodule.exports=Router//之前={对象 对象里面是属性 可以做一个省略}</code></pre>\n<hr/>\n<p><strong>路由模块的注册和使用</strong></p>\n<p>使用require导入路由模块，使用app.use(<span style=\"color:#fe2c24;\">自定义路由模块</span>)注册模块------让路由模块和服务器之间联系起来</p>\n<p>原先使用express向外托管静态资源的时候使用过app.use(<span style=\"color:#fe2c24;\">express.static('文件夹的路径'</span>))</p>\n<p><span style=\"color:#fe2c24;\">app.use()的作用：用来注册全局中间件--</span></p>\n<pre><code class=\"language-javascript\">//导入express\nconst express=require('express')\n//创建路由对象\nconst Router=express.Router()\n//挂载具体路由\nRouter.get('/user/a',function(req,res){\n    res.send('GET USER A')\n})\nRouter.post('/user/b',(req,res)=&gt;{\n    res.send('POST USER B')\n})\n//向外导出路由\nmodule.exports=Router//之前={对象 对象里面是属性 可以做一个省略}</code></pre>\n<p><img alt=\"\" height=\"406\" src=\"image\\bf2d8eae15f4485ab93dc7535de9723f.png\" width=\"1000\"/></p>\n<p> <img alt=\"\" height=\"606\" src=\"image\\a36e37d8f1f643b2a023b34bcbd5177d.png\" width=\"1200\"/></p>\n<hr/>\n<p>为路由模块添加统一的访问前缀——<span style=\"color:#fe2c24;\">在前面托管静态资源的时候有使用过</span>app.use(<span style=\"color:#fe2c24;\">express.static('文件夹的路径'</span>))------我们使用url访问静态资源的时候这个文件夹是不会出现在访问路径中——如果希望我们访问的时候有这个地址，我们需要在前面加上一个参数，app.use('/文件夹名字'，<span style=\"color:#fe2c24;\">express.static('文件夹的路径'</span>))——相似</p>\n<p><img alt=\"\" height=\"870\" src=\"image\\ce203bfde8284834afe61eb68915ee82.png\" width=\"942\"/></p>\n<p>app.use('/api',router)------------在原先路由的访问url中全部加上了一个前缀</p>\n<p><img alt=\"\" height=\"468\" src=\"image\\bfccc50711ca4a1aac200d78c0d88e6f.png\" width=\"845\"/></p>\n<p><img alt=\"\" height=\"445\" src=\"image\\34572cf26f1b48e1a1b16b4f7fb55f78.png\" width=\"1084\"/></p>\n<p> </p>\n</div>\n</div>"}