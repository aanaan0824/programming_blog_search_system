{"blogid": "126611927", "writerAge": "码龄3年", "writerBlogNum": "71", "writerCollect": "100", "writerComment": "7", "writerFan": "67", "writerGrade": "3级", "writerIntegral": "798", "writerName": "宁氓", "writerProfileAdress": "writer_image\\profile_126611927.jpg", "writerRankTotal": "23398", "writerRankWeekly": "2028", "writerThumb": "82", "writerVisitNum": "7534", "blog_read_count": "464", "blog_time": "于 2022-08-30 21:25:35 发布", "blog_title": "Selenium自动化测试框架", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>一.Selenium概述</h2>\n<h3>1.1 什么是框架? </h3>\n<pre><code class=\"hljs\">    框架（framework）是一个框子——指其约束性，也是一个架子——指其支撑性。是一个基本概念上的\n结构用于去解决或者处理复杂的问题。\n    框架是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义\n认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。\n    框架，其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用\n别人搭好的舞台，你来做表演。</code></pre>\n<h3>1.2 为什么使用框架?</h3>\n<pre><code class=\"hljs\">1)自己从头实现太复杂\n\n2)使用框架能够更专注于业务逻辑，加快开发速度\n\n3)框架的使用能够处理更多细节问题\n\n4)使用人数多，稳定性，扩展性好\n</code></pre>\n<h3>1.3 Selenium 工作原理</h3>\n<p><img alt=\"\" height=\"432\" src=\"image\\1983f242b69b464b98dc0bb079cc60b5.png\" width=\"770\"/></p>\n<h2>二.Selenium API基础</h2>\n<h3>1. 前提操作</h3>\n<p>(1)导入库</p>\n<pre><code class=\"language-python\">from selenium import webdriver</code></pre>\n<p>(2)创建浏览器对象</p>\n<pre><code class=\"language-python\">driver=webdriver.Chrome()   #创建浏览器对象  谷歌浏览器\ndriver.get('https://www.baidu.com/')  #访问网址 百度</code></pre>\n<h3>2.方法</h3>\n<p>我们需要使用dir()来查看方法</p>\n<pre><code class=\"language-python\">print(dir(driver)) </code></pre>\n<p><img alt=\"\" height=\"337\" src=\"image\\97e41279947c452babecb049dcd43f11.png\" width=\"1176\"/></p>\n<p> (1) 调整浏览器的尺寸</p>\n<pre><code class=\"language-python\">driver.maximize_window()  #窗口最大化\nprint(driver.get_window_size())   #获取浏览器尺寸   {'height': 1020, 'width': 945}\ndriver.set_window_size(width='1200',height='1000')  #设置浏览器尺寸         </code></pre>\n<p>(2) 调整浏览器的位置</p>\n<pre><code class=\"language-python\">print(driver.get_window_position())   #获取浏览器位置  {'x': 10, 'y': 10}\nprint(driver.set_window_position(100,100))      #设置浏览器位置</code></pre>\n<p>(3) 获取当前页面的url </p>\n<pre><code class=\"language-python\">print(driver.current_url)   #https://www.baidu.com/</code></pre>\n<p>(4) 获取当前页面的title</p>\n<pre><code class=\"language-python\">print(driver.title)   #百度一下，你就知道</code></pre>\n<p>(5) 刷新页面</p>\n<pre><code class=\"language-python\">driver.refresh()</code></pre>\n<p>(6) 返回上一页/下一页</p>\n<pre><code class=\"language-python\">driver.back()      #上一页\ndriver.forward()   #下一页</code></pre>\n<p>(7) 保存图片</p>\n<pre><code class=\"language-python\"># 方式一:\ndata=driver.get_screenshot_as_png()\nwith open('111.jpg','wb') as f:\n    f.write(data)\n# 方式二:\ndriver.get_screenshot_as_file('222.jpg')</code></pre>\n<p>(8) 查看网页源码</p>\n<pre><code class=\"language-python\">print(driver.page_source)</code></pre>\n<p><img alt=\"\" height=\"317\" src=\"image\\8563e6adb8c448cba34a2c2b6764280a.png\" width=\"1180\"/></p>\n<p> (9) 关闭网页</p>\n<pre><code class=\"language-python\">driver.close()  #关闭当前页面\ndriver.quit()   #关闭所有页面</code></pre>\n<h3>3. 元素定位</h3>\n<pre><code class=\"language-python\"># 方式一: driver.find_element_by_xxx(value)\n# 方式二:driver.find_element(By.xxx,value)\n\n# 1.id\ninput=driver.find_element_by_id('kw')\ninput.send_keys(12306)\n# 2.class\ninput=driver.find_element_by_class_name('s_ipt')\ninput.send_keys(12306)\n# 3.name\ninput=driver.find_element_by_name('wd')\ninput.send_keys(12306)\n# 4.xpath\ninput=driver.find_element_by_xpath('//*[@id=\"kw\"]')\ninput.send_keys(12306)\n# 5.css\ninput=driver.find_element_by_css_selector('#kw')\ninput.send_keys(12306)\n# 6.link_text 全匹配\nnews=driver.find_element_by_link_text('新闻')\nnews.click()\n# 7.partial_link_text  模糊匹配\nnews=driver.find_element_by_partial_link_text('闻')\nnews.click()\n# 8.tag name  标签名\nput=driver.find_element_by_tag_name(\"span\")\nput.click()</code></pre>\n<h2>三.Selenium API高级</h2>\n<h3>3.1 页面跳转</h3>\n<pre><code class=\"language-python\">from selenium import webdriver\n\ndriver=webdriver.Chrome()\ndriver.get('http://bj.58.com')\n\n# 获取当前页面的句柄\nh1=driver.window_handles\nprint('58同城:',h1)\n\n# 定位元素  宠物\na=driver.find_element_by_link_text('宠物')\n# 点击宠物\na.click()\n\n# 获取点击跳转之后的句柄\nh2=driver.window_handles\nprint('宠物:',h2)\n# 跳转句柄\ndriver.switch_to.window(h2[1])\n\n# 定位元素  宠物狗\ndog=driver.find_element_by_xpath('/html/body/div[3]/div[1]/dl[1]/dd[1]/a/strong')\n# dog=driver.find_element_by_link_text('宠物狗')\ndog.click()\n\n# 获取点击跳转之后的句柄\nh3=driver.window_handles\nprint('宠物狗:',h3)\n# 跳转句柄\ndriver.switch_to.window(h3[2])\n\n# 定位元素\nsmall=driver.find_element_by_css_selector('#selection &gt; dl:nth-child(1) &gt; dd &gt; a:nth-child(6)')\nsmall.click()</code></pre>\n<h3>3.2 表单跳转</h3>\n<pre><code class=\"language-python\">from selenium import webdriver\nimport time\ndriver=webdriver.Chrome()\ndriver.get('https://qzone.qq.com/')  #访问qq空间页面\ndriver.maximize_window()  #窗口最大化\n\n#定位表单\nframe=driver.find_element_by_id('login_frame')\n# 表单跳转\ndriver.switch_to.frame(frame)\ntime.sleep(2)\n# 点击密码登录\ndriver.find_element_by_link_text('密码登录').click()\ntime.sleep(2)\n# 输入账号\ndriver.find_element_by_id('u').send_keys('1720003909')\ntime.sleep(2)\n# 输入密码\ndriver.find_element_by_id('p').send_keys('xqy20001220')\ntime.sleep(2)\n# 点击登录\ndriver.find_element_by_id('login_button').click()\n# 关闭页面\ndriver.close()</code></pre>\n<h3>3.3 弹出框操作</h3>\n<pre><code class=\"language-python\">#进入弹出框\n    driver.switch_to.alert\n#接收警告\n    accept()\n#解散警告\n    dismiss()\n#发送文本到警告框\n    send_keys(data)</code></pre>\n<p>代码:</p>\n<pre><code class=\"language-python\">from selenium import webdriver\nimport time\n\ndriver=webdriver.Chrome()\ndriver.get('https://www.baidu.com/')\n\n# 定位 设置\nset=driver.find_element_by_id('s-usersetting-top')\nset.click()\n\n# 定位 搜索设置\nsearch=driver.find_element_by_xpath('//*[@id=\"s-user-setting-menu\"]/div/a[1]/span')\nsearch.click()\n\n# 定位 每页20条\npage=driver.find_element_by_xpath('/html/body/div[1]/div[6]/div/div/div/div[1]/form/div/ul/li[3]/span[2]/span[2]/label')\npage.click()\n\n# 定位 保存设置\nsave=driver.find_element_by_css_selector('#se-setting-7 &gt; a.prefpanelgo.setting-btn.c-btn.c-btn-primary')\nsave.click()\n\ntime.sleep(2)\ndriver.switch_to.alert.accept()     #弹框处理\n# driver.switch_to.alert.dissmiss() #弹框处理</code></pre>\n<h3>3.4 滚动条操作</h3>\n<pre><code class=\"language-python\">from selenium import webdriver\nimport time\n\ndriver=webdriver.Chrome()\ndriver.get('http://bj.58.com')\n\ntime.sleep(3)\n# 滚动条到底部\n# js=\"var q=document.documentElement.scrollTop=10000\"\njs = \"window.scrollTo(0,document.body.scrollHeight)\"\ndriver.execute_script(js)  #执行js\n\ntime.sleep(3)\n# 顶部\njs=\"window.scrollTo(0,0)\"\ndriver.execute_script(js)\n\ntime.sleep(3)\n# 移动到指定元素\ntarget = driver.find_element_by_xpath('/html/body/div[3]/div[1]/div[1]/div/div[2]/div[2]/a[13]') #定位移动到的元素\ndriver.execute_script(\"arguments[0].scrollIntoView();\", target)\ntarget.click()</code></pre>\n<h3>3.5 鼠标键盘操作</h3>\n<pre><code class=\"language-python\">from selenium import webdriver\nfrom selenium.webdriver import ActionChains  #鼠标操作\nfrom selenium.webdriver.common.keys import Keys  #键盘操作\nimport time\n\ndriver=webdriver.Chrome()\ndriver.get('https://www.baidu.com/')\n\n# 定位元素  更多\nmore=driver.find_element_by_link_text('更多')\n\n#鼠标操作\nActionChains(driver).click(more).perform()   #鼠标左击\nActionChains(driver).context_click(more).perform() #鼠标右击\nActionChains(driver).move_to_element(more).perform()  #鼠标悬浮\n\n#键盘操作\nsrk = driver.find_element_by_id(\"kw\")\nsrk.send_keys(12306)\ntime.sleep(2)\nsrk.send_keys(Keys.CONTROL,\"a\")\nsrk.send_keys(Keys.CONTROL,\"x\")\ntime.sleep(2)\nsrk.send_keys(Keys.CONTROL,'v')</code></pre>\n<h3>3.6 下拉框操作</h3>\n<pre><code class=\"language-python\">from selenium import webdriver\n\ndriver=webdriver.Chrome()\ndriver.get('https://www.baidu.com/')\n\ndriver.maximize_window()\n\n# 定位元素  设置按钮\nset=driver.find_element_by_id('s-usersetting-top')\nset.click()\n\n# 定位元素   高级搜索\nfind=driver.find_element_by_xpath('//*[@id=\"s-user-setting-menu\"]/div/a[2]/span')\nfind.click()\n\n# 定位元素  全部时间\ntime=driver.find_element_by_class_name('c-select-selected-value')\ntime.click()\n\n# 定位元素  最近一月\nm=driver.find_elements_by_class_name('c-select-item')\n\n#方式一:\nm[3].click()\n\n#方式二\nfor i in m:\n    if i=='最近一月':\n        i.click()</code></pre>\n<h3>3.7 等待操作</h3>\n<p>(1)强制等待</p>\n<pre><code class=\"language-python\">import time         #强制等待:无论网络是否良好,必须等待对应的时间,才会执行下面的代码\ntime.sleep(3)</code></pre>\n<p>(2) 隐式等待</p>\n<pre><code class=\"language-python\">driver.implicitly_wait(100)  #隐式等待,当前界面的所有元素全部加载完成,才会执行下面的代码</code></pre>\n<p>(3) 显示等待</p>\n<pre><code class=\"language-python\">from selenium.webdriver.support.wait import WebDriverWait   #导入显性等待的包\nfrom selenium.webdriver.support import expected_conditions as EC  #判断所需要的元素是否已经被加载出来\nfrom selenium.webdriver.common.by import By  #定位\n\n# 定位元素  设置按钮\nWebDriverWait(driver,10,0.5).until(EC.presence_of_element_located((By.ID,\"s-usersetting-top\")))\nset=driver.find_element_by_id('s-usersetting-top')\nset.click()</code></pre>\n<h2>四.Selenium IDE</h2>\n<h3>4.1 什么是Selenium IDE?</h3>\n<pre><code class=\"hljs\">    Selenium的IDE(集成开发环境)是一个易于使用的Firefox插件,用于开发Selenium测试案例。\n它提供了一个图形用户界面，用于记录使用Firefox浏览器，用来学习和使用Selenium用户操作，\n但它只能用于只用Firefox浏览器不支持其它浏览器</code></pre>\n<h3>4.2 IDE功能简介</h3>\n<p><img alt=\"\" height=\"573\" src=\"image\\f934bdbaf0ba4c83b875d05dd98f2dbc.png\" width=\"875\"/></p>\n</div>\n</div>"}