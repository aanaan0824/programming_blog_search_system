{"blogid": "122696986", "writerAge": "码龄4年", "writerBlogNum": "637", "writerCollect": "6696", "writerComment": "355", "writerFan": "19772", "writerGrade": "6级", "writerIntegral": "8518", "writerName": "小熊coder", "writerProfileAdress": "writer_image\\profile_122696986.jpg", "writerRankTotal": "1686", "writerRankWeekly": "298", "writerThumb": "1423", "writerVisitNum": "788482", "blog_read_count": "11031", "blog_time": "已于 2022-06-29 22:39:38 修改", "blog_title": "Pandas教程（非常详细）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_8\">教程特点</a></li><li><a href=\"#_14\">阅读条件</a></li></ul>\n</li><li><a href=\"#Pandas_18\">Pandas是什么</a></li><li><ul><li><a href=\"#Pandas_40\">Pandas主要特点</a></li><li><a href=\"#Pandas_54\">Pandas主要优势</a></li><li><a href=\"#Pandas_63\">Pandas内置数据结构</a></li></ul>\n</li><li><a href=\"#Pandas_86\">Pandas库下载和安装</a></li><li><ul><li><a href=\"#Windows_100\">Windows系统安装</a></li><li><a href=\"#Linux_106\">Linux系统安装</a></li><li><ul><li><ul><li><a href=\"#1_Ubuntu_110\">1) Ubuntu用户</a></li><li><a href=\"#2_Fedora_118\">2) Fedora用户</a></li></ul>\n</li></ul>\n</li><li><a href=\"#MacOSX_126\">MacOSX系统安装</a></li></ul>\n</li><li><a href=\"#Pandas_Series_134\">Pandas Series入门教程</a></li><li><ul><li><a href=\"#Series_147\">创建Series对象</a></li><li><ul><li><ul><li><a href=\"#1_Series_170\">1) 创建一个空Series对象</a></li><li><a href=\"#2_ndarraySeries_185\">2) ndarray创建Series对象</a></li><li><a href=\"#3_dictSeries_234\">3) dict创建Series对象</a></li><li><a href=\"#4_Series_281\">4) 标量创建Series对象</a></li></ul>\n</li></ul>\n</li><li><a href=\"#Series_304\">访问Series数据</a></li><li><ul><li><ul><li><a href=\"#1__308\">1) 位置索引访问</a></li><li><a href=\"#2__358\">2) 索引标签访问</a></li></ul>\n</li></ul>\n</li><li><a href=\"#Series_407\">Series常用属性</a></li><li><ul><li><ul><li><a href=\"#1_axes_446\">1) axes</a></li><li><a href=\"#2_dtype_463\">2) dtype</a></li><li><a href=\"#3_empty_480\">3) empty</a></li><li><a href=\"#4_ndim_499\">4) ndim</a></li><li><a href=\"#5_size_523\">5) size</a></li><li><a href=\"#6_values_546\">6) values</a></li><li><a href=\"#7_index_573\">7) index</a></li></ul>\n</li></ul>\n</li><li><a href=\"#Series_596\">Series常用方法</a></li><li><ul><li><ul><li><a href=\"#1_headtail_598\">1) head()&amp;tail()查看数据</a></li><li><a href=\"#2_isnullnonull_656\">2) isnull()&amp;nonull()检测缺失值</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#Pandas_DataFrame_691\">Pandas DataFrame入门教程（图解版）</a></li><li><ul><li><a href=\"#DataFrame_695\">认识DataFrame结构</a></li><li><a href=\"#DataFrame_747\">创建DataFrame对象</a></li><li><ul><li><ul><li><a href=\"#1_DataFrame_773\">1) 创建空的DataFrame对象</a></li><li><a href=\"#2_DataFame_791\">2) 列表创建DataFame对象</a></li><li><a href=\"#3__851\">3) 字典嵌套列表创建</a></li><li><a href=\"#4_DataFrame_897\">4) 列表嵌套字典创建DataFrame对象</a></li><li><a href=\"#5_SeriesDataFrame_964\">5) Series创建DataFrame对象</a></li></ul>\n</li></ul>\n</li><li><a href=\"#DataFrame_988\">列索引操作DataFrame</a></li><li><ul><li><ul><li><a href=\"#1__992\">1) 列索引选取数据列</a></li><li><a href=\"#2__1014\">2) 列索引添加数据列</a></li><li><a href=\"#3__1078\">3) 列索引删除数据列</a></li></ul>\n</li></ul>\n</li><li><a href=\"#DataFrame_1123\">行索引操作DataFrame</a></li><li><ul><li><ul><li><a href=\"#1__1127\">1) 标签索引选取</a></li><li><a href=\"#2__1147\">2) 整数索引选取</a></li><li><a href=\"#3__1169\">3) 切片操作多行选取</a></li><li><a href=\"#4__1190\">4) 添加数据行</a></li><li><a href=\"#5__1213\">5) 删除数据行</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_1246\">常用属性和方法汇总</a></li><li><ul><li><ul><li><a href=\"#1_TTranspose_1296\">1) T（Transpose）转置</a></li><li><a href=\"#2_axes_1322\">2) axes</a></li><li><a href=\"#3_dtypes_1344\">3) dtypes</a></li><li><a href=\"#4_empty_1369\">4) empty</a></li><li><a href=\"#5_ndim_1392\">5) ndim</a></li><li><a href=\"#6_shape_1412\">6) shape</a></li><li><a href=\"#7_size_1431\">7) size</a></li><li><a href=\"#8_values_1451\">8) values</a></li><li><a href=\"#9_headtail_1479\">9) head()&amp;tail()查看数据</a></li><li><a href=\"#10_shift_1526\">10) shift()移动行或列</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#Pandas_Panel_1603\">Pandas Panel三维数据结构</a></li><li><ul><li><a href=\"#pandasPanel_1615\">pandas.Panel()</a></li><li><a href=\"#Panel__1634\">创建Panel 对象</a></li><li><ul><li><ul><li><a href=\"#1_Panel_1638\">1) 创建一个空Panel</a></li><li><a href=\"#2_ndarray_1658\">2) ndarray三维数组创建</a></li><li><a href=\"#3_DataFrame_1681\">3) DataFrame创建</a></li></ul>\n</li></ul>\n</li><li><a href=\"#Panel_1703\">Panel中选取数据</a></li><li><ul><li><ul><li><a href=\"#1__items_1707\">1) 使用 items选取数据</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#Python_Pandas_1732\">Python Pandas描述性统计</a></li><li><ul><li><a href=\"#sum_1803\">sum()求和</a></li><li><a href=\"#mean_1865\">mean()求均值</a></li><li><a href=\"#std_1889\">std()求标准差</a></li><li><a href=\"#_1915\">数据汇总描述</a></li></ul>\n</li><li><a href=\"#Python_Pandas_2011\">Python Pandas绘图教程（详解版）</a></li><li><ul><li><a href=\"#_2044\">柱状图</a></li><li><a href=\"#_2099\">直方图</a></li><li><a href=\"#_2135\">箱型图</a></li><li><a href=\"#_2151\">区域图</a></li><li><a href=\"#_2167\">散点图</a></li><li><a href=\"#_2183\">饼状图</a></li></ul>\n</li><li><a href=\"#Pandas_csv_2199\">Pandas csv读写文件</a></li><li><ul><li><a href=\"#read_csv_2223\">read_csv()</a></li><li><ul><li><ul><li><a href=\"#1__2244\">1) 自定义索引</a></li><li><a href=\"#2_dtype_2265\">2) 查看每一列的dtype</a></li><li><a href=\"#3__2287\">3) 更改文件标头名</a></li><li><a href=\"#4__2330\">4) 跳过指定的行数</a></li></ul>\n</li></ul>\n</li><li><a href=\"#to_csv_2350\">to_csv()</a></li></ul>\n</li><li><a href=\"#Pandas_Excel_2390\">Pandas Excel读写操作详解</a></li><li><ul><li><a href=\"#to_excel_2394\">to_excel()</a></li><li><a href=\"#read_excel_2447\">read_excel()</a></li></ul>\n</li><li><a href=\"#PandasNumPy_2524\">Pandas和NumPy的比较</a></li><li><ul><li><a href=\"#_2530\">创建数组</a></li><li><a href=\"#_2570\">布尔索引</a></li><li><a href=\"#_2617\">重塑数组形状</a></li><li><a href=\"#PdansNumPy_2654\">Pdans与NumPy区别</a></li><li><a href=\"#ndarray_2668\">转换ndarray数组</a></li></ul>\n</li></ul>\n</div>\n<br/> 转载于：\n<a href=\"http://c.biancheng.net/pandas/\">http://c.biancheng.net/pandas/</a>\n<p></p>\n<p>Pandas 库是一个免费、开源的第三方 Python 库，是 Python 数据分析必不可少的工具之一，它为 Python 数据分析提供了高性能，且易于使用的数据结构，即 Series 和 DataFrame。Pandas 自诞生后被应用于众多的领域，比如金融、统计学、社会科学、建筑工程等。</p>\n<p>Pandas 库基于 Python NumPy 库开发而来，因此，它可以与 Python 的科学计算库配合使用。Pandas 提供了两种数据结构，分别是 Series（一维数组结构）与 DataFrame（二维数组结构），这两种数据结构极大地增强的了 Pandas 的数据分析能力。在本套教程中，我们将学习 Python Pandas 的各种方法、特性以及如何在实践中运用它们。</p>\n<h2><a id=\"_8\"></a>教程特点</h2>\n<p>本套教程是为 Pandas 初学者打造的，学习完本套教程，您将在一定程度上掌握 Pandas 的基础知识，以及各种功能。如果您是从事数据分析的工作人员，那么这套教程会对您有所帮助。</p>\n<p>本套教程对 Python Pandas 库进行详细地讲解，包括文件读写、统计学函数、缺失值处理、以及数据可视化等重点知识。为了降低初学者的学习门槛，我们的教程尽量采用通俗易懂、深入浅出的语言风格，相信通过对本套教程的学习，您一定会收获颇丰。</p>\n<h2><a id=\"_14\"></a>阅读条件</h2>\n<p>在开始学习本套教程前，首先您应该对于数据分析、数据可视化的概念有一定程度的了解，并且您已经熟练掌握 Python 语言的基础知识。其次，由于 Pandas 库是在 NumPy 库的基础上构建而来，所以建议您提前学习《<a href=\"http://c.biancheng.net/numpy/\">Python NumPy教程</a>》。</p>\n<h1><a id=\"Pandas_18\"></a>Pandas是什么</h1>\n<p>Pandas 是一个开源的第三方 Python 库，从 Numpy 和 Matplotlib 的基础上构建而来，享有数据分析“三剑客之一”的盛名（NumPy、Matplotlib、Pandas）。Pandas 已经成为 Python 数据分析的必备高级工具，它的目标是成为强大、灵活、可以支持任何编程语言的数据分析工具。</p>\n<p><img alt=\"pandas教程\" src=\"https://img-blog.csdnimg.cn/img_convert/17d76a327705255b39d9008ea35daa61.gif\"/><br/> 图1：Pandas Logo</p>\n<p>Pandas 这个名字来源于面板数据（Panel Data）与数据分析（data analysis）这两个名词的组合。在经济学中，Panel Data 是一个关于多维数据集的术语。Pandas 最初被应用于金融量化交易领域，现在它的应用领域更加广泛，涵盖了农业、工业、交通等许多行业。</p>\n<p>Pandas 最初由 Wes McKinney（韦斯·麦金尼）于 2008 年开发，并于 2009 年实现开源。目前，Pandas 由 PyData 团队进行日常的开发和维护工作。在 2020 年 12 月，PyData 团队公布了最新的 Pandas 1.20 版本 。</p>\n<p>在 Pandas 没有出现之前，Python 在数据分析任务中主要承担着数据采集和数据预处理的工作，但是这对数据分析的支持十分有限，并不能突出 Python 简单、易上手的特点。Pandas 的出现使得 Python 做数据分析的能力得到了大幅度提升，它主要实现了数据分析的五个重要环节：</p>\n<ul><li>加载数据</li><li>整理数据</li><li>操作数据</li><li>构建数据模型</li><li>分析数据</li></ul>\n<h2><a id=\"Pandas_40\"></a>Pandas主要特点</h2>\n<p>Pandas 主要包括以下几个特点：</p>\n<ul><li>它提供了一个简单、高效、带有默认标签（也可以自定义标签）的 DataFrame 对象。</li><li>能够快速得从不同格式的文件中加载数据（比如 Excel、CSV 、SQL文件），然后将其转换为可处理的对象；</li><li>能够按数据的行、列标签进行分组，并对分组后的对象执行聚合和转换操作；</li><li>能够很方便地实现数据归一化操作和缺失值处理；</li><li>能够很方便地对 DataFrame 的数据列进行增加、修改或者删除的操作；</li><li>能够处理不同格式的数据集，比如矩阵数据、异构数据表、时间序列等；</li><li>提供了多种处理数据集的方式，比如构建子集、切片、过滤、分组以及重新排序等。</li></ul>\n<p>上述知识点将在后续学习中为大家一一讲解。</p>\n<h2><a id=\"Pandas_54\"></a>Pandas主要优势</h2>\n<p>与其它语言的数据分析包相比，Pandas 具有以下优势：</p>\n<ul><li>Pandas 的 DataFrame 和 Series 构建了适用于数据分析的存储结构；</li><li>Pandas 简洁的 API 能够让你专注于代码的核心层面；</li><li>Pandas 实现了与其他库的集成，比如 Scipy、scikit-learn 和 Matplotlib；</li><li>Pandas 官方网站（<a href=\"https://pandas.pydata.org/\">点击访问</a>）提供了完善资料支持，及其良好的社区环境。</li></ul>\n<h2><a id=\"Pandas_63\"></a>Pandas内置数据结构</h2>\n<p>我们知道，构建和处理二维、多维数组是一项繁琐的任务。Pandas 为解决这一问题， 在 ndarray 数组（NumPy 中的数组）的基础上构建出了两种不同的数据结构，分别是 Series（一维数据结构）DataFrame（二维数据结构）：</p>\n<ul><li>Series 是带标签的一维数组，这里的标签可以理解为索引，但这个索引并不局限于整数，它也可以是字符类型，比如 a、b、c 等；</li><li>DataFrame 是一种表格型数据结构，它既有行标签，又有列标签。</li></ul>\n<p>下面对上述数据结构做简单地的说明：</p>\n<table><thead><tr><th>数据结构</th><th>维度</th><th>说明</th></tr></thead><tbody><tr><td>Series</td><td>1</td><td>该结构能够存储各种数据类型，比如字符数、整数、浮点数、Python 对象等，Series 用 name 和 index 属性来描述 数据值。Series 是一维数据结构，因此其维数不可以改变。</td></tr><tr><td>DataFrame</td><td>2</td><td>DataFrame 是一种二维表格型数据的结构，既有行索引，也有列索引。行索引是 index，列索引是 columns。 在创建该结构时，可以指定相应的索引值。</td></tr></tbody></table>\n<p>由于上述数据结构的存在，使得处理多维数组数任务变的简单。在《<a href=\"http://c.biancheng.net/pandas/series.html\">Pandas Series入门教程</a>》和《<a href=\"http://c.biancheng.net/pandas/dataframe.html\">Pandas DataFrame入门教程（图解）</a>》两节中，我们会对上述数据结构做详细讲解。</p>\n<p>注意，在 Pandas 0.25 版本后，Pamdas 废弃了 Panel 数据结构，如果感兴趣可阅读《<a href=\"http://c.biancheng.net/pandas/panel.html\">Pandas Panel三维数据结构</a>》一节。</p>\n<h1><a id=\"Pandas_86\"></a>Pandas库下载和安装</h1>\n<p>Python 官方标准发行版并没有自带 Pandas 库，因此需要另行安装。除了标准发行版外，还有一些第三方机构发布的 Python 免费发行版， 它们在官方版本的基础上开发而来，并有针对性的提前安装了一些 Python 模块，从而满足某些特定领域的需求，比如专门适应于科学计算领域的 Anaconda，它就提前安装了多款适用于科学计算的软件包。</p>\n<p>对于第三方发行版而言，它们已经自带 Pandas 库，所以无须另行安装。下面介绍了常用的免费发行版：</p>\n<ol><li> <p>Anaconda（官网下载：https://www.anaconda.com/）是一个开源的 Python 发行版，包含了 180 多个科学包及其依赖项。除了支持 Windows 系统外，也支持 Linux 和 Mac 系统。</p> </li><li> <p>Python(x,y)（下载地址：https://python-xy.github.io/）是一款基于 Python、Qt （图形用户界面）和 Spyder （交互式开发环境）开发的软件，主要用于数值计算、数据分析和数据可视化等工程项目，目前只支持 Python 2 版本。</p> </li><li> <p>WinPython（下载地址：https://sourceforge.net/projects/winpython/files/）一个免费的 Python 发行版，包含了常用的科学计算包与 Spyder IDE，但仅支持 Windows 系统。</p> </li></ol>\n<p>下面介绍在不同操作系统环境下，标准发行版安装 Pandas 的方法。</p>\n<h2><a id=\"Windows_100\"></a>Windows系统安装</h2>\n<p>使用 pip 包管理器安装 Pandas，是最简单的一种安装方式。在 CMD 命令提示符界面行执行以下命令：</p>\n<p>pip install pandas</p>\n<h2><a id=\"Linux_106\"></a>Linux系统安装</h2>\n<p>对于不同的版本的 Linux 系统，您可以采用它们各自的包管理器来安装 Pandas。</p>\n<h4><a id=\"1_Ubuntu_110\"></a>1) Ubuntu用户</h4>\n<p>Pandas 通常需要与其他软件包一起使用，因此可采用以下命令，一次性安装所有包：</p>\n<pre><code>sudo apt-get install numpy scipy matplotlib pandas\n</code></pre>\n<h4><a id=\"2_Fedora_118\"></a>2) Fedora用户</h4>\n<p>对于 Fedora 用户而言，可采用以下命令安装：</p>\n<pre><code>sudo yum install numpy scipy matplotlib pandas\n</code></pre>\n<h2><a id=\"MacOSX_126\"></a>MacOSX系统安装</h2>\n<p>对于 Mac 用户而言，同样可以直接使用 pip 包管理器来安装，命令如下：</p>\n<pre><code>pip install pandas\n</code></pre>\n<h1><a id=\"Pandas_Series_134\"></a>Pandas Series入门教程</h1>\n<p>Series 结构，也称 Series 序列，是 Pandas 常用的数据结构之一，它是一种类似于一维数组的结构，由一组数据值（value）和一组标签组成，其中标签与数据值之间是一一对应的关系。</p>\n<p>Series 可以保存任何数据类型，比如整数、字符串、浮点数、Python 对象等，它的标签默认为整数，从 0 开始依次递增。Series 的结构图，如下所示：</p>\n<p><img alt=\"pandas series\" src=\"https://img-blog.csdnimg.cn/img_convert/3fb584ac2a62450795ee73713183b6fe.gif\"/></p>\n<p>通过标签我们可以更加直观地查看数据所在的索引位置。</p>\n<h2><a id=\"Series_147\"></a>创建Series对象</h2>\n<p>Pandas 使用 Series() 函数来创建 Series 对象，通过这个对象可以调用相应的方法和属性，从而达到处理数据的目的：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ns<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> dtype<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>参数说明如下所示：</p>\n<table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>输入的数据，可以是列表、常量、ndarray 数组等。</td></tr><tr><td>index</td><td>索引值必须是惟一的，如果没有传递索引，则默认为 np.arrange(n)。</td></tr><tr><td>dtype</td><td>dtype表示数据类型，如果没有提供，则会自动判断得出。</td></tr><tr><td>copy</td><td>表示对 data 进行拷贝，默认为 False。</td></tr></tbody></table>\n<p>我们也可以使用数组、字典、标量值或者 Python 对象来创建 Series 对象。下面展示了创建 Series 对象的不同方法：</p>\n<h4><a id=\"1_Series_170\"></a>1) 创建一个空Series对象</h4>\n<p>使用以下方法可以创建一个空的 Series 对象，如下所示：</p>\n<pre><code>import pandas as pd\n#输出数据为空\ns = pd.Series()\nprint(s)\n</code></pre>\n<p>输出结果如下：</p>\n<p>Series([], dtype: float64)</p>\n<h4><a id=\"2_ndarraySeries_185\"></a>2) ndarray创建Series对象</h4>\n<p>ndarray 是 NumPy 中的数组类型，当 data 是 ndarry 时，传递的索引必须具有与数组相同的长度。假如没有给 index 参数传参，在默认情况下，索引值将使用是 range(n) 生成，其中 n 代表数组长度，如下所示：</p>\n<p>[0,1,2,3…. range(len(array))-1]</p>\n<p>使用默认索引，创建 Series 序列对象：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code>0   a\n1   b\n2   c\n3   d\ndtype: object\n</code></pre>\n<p>上述示例中没有传递任何索引，所以索引默认从 0 开始分配 ，其索引范围为 0 到<code>len(data)-1</code>，即 0 到 3。这种设置方式被称为“隐式索引”。</p>\n<p>除了上述方法外，你也可以使用“显式索引”的方法定义索引标签，示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#自定义索引标签（即显示索引）</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span><span class=\"token number\">102</span><span class=\"token punctuation\">,</span><span class=\"token number\">103</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>100  a\n101  b\n102  c\n103  d\ndtype: object\n</code></pre>\n<h4><a id=\"3_dictSeries_234\"></a>3) dict创建Series对象</h4>\n<p>您可以把 dict 作为输入数据。如果没有传入索引时会按照字典的键来构造索引；反之，当传递了索引时需要将索引标签与字典中的值一一对应。</p>\n<p>下面两组示例分别对上述两种情况做了演示。</p>\n<p>示例1，没有传递索引时：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2.</span><span class=\"token punctuation\">}</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>a 0.0\nb 1.0\nc 2.0\ndtype: float64\n</code></pre>\n<p>示例 2，为<code>index</code>参数传递索引时：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2.</span><span class=\"token punctuation\">}</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>b 1.0\nc 2.0\nd NaN\na 0.0\ndtype: float64\n</code></pre>\n<p>当传递的索引值无法找到与其对应的值时，使用 NaN（非数字）填充。</p>\n<h4><a id=\"4_Series_281\"></a>4) 标量创建Series对象</h4>\n<p>如果 data 是标量值，则必须提供索引，示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出如下：</p>\n<pre><code>0  5\n1  5\n2  5\n3  5\ndtype: int64\n</code></pre>\n<p>标量值按照 index 的数量进行重复，并与其一一对应。</p>\n<h2><a id=\"Series_304\"></a>访问Series数据</h2>\n<p>上述讲解了创建 Series 对象的多种方式，那么我们应该如何访问 Series 序列中元素呢？分为两种方式，一种是位置索引访问；另一种是索引标签访问。</p>\n<h4><a id=\"1__308\"></a>1) 位置索引访问</h4>\n<p>这种访问方式与 ndarray 和 list 相同，使用元素自身的下标进行访问。我们知道数组的索引计数从 0 开始，这表示第一个元素存储在第 0 个索引位置上，以此类推，就可以获得 Series 序列中的每个元素。下面看一组简单的示例：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#位置下标</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#标签下标</span>\n</code></pre>\n<p>输出结果：</p>\n<p>1<br/> 1</p>\n<p>通过切片的方式访问 Series 序列中的数据，示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>a  1\nb  2\nc  3\ndtype: int64\n</code></pre>\n<p>如果想要获取最后三个元素，也可以使用下面的方式：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>c  3\nd  4\ne  5\ndtype: int64\n</code></pre>\n<h4><a id=\"2__358\"></a>2) 索引标签访问</h4>\n<p>Series 类似于固定大小的 dict，把 index 中的索引标签当做 key，而把 Series 序列中的元素值当做 value，然后通过 index 索引标签来访问或者修改元素值。</p>\n<p>示例1，使用索标签访问单个元素值：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span>）\n</code></pre>\n<p>输出结果：</p>\n<p>6</p>\n<p>示例 2，使用索引标签访问多个元素值</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>a    6\nc    8\nd    9\ndtype: int64\n</code></pre>\n<p>示例3，如果使用了 index 中不包含的标签，则会触发异常：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#不包含f值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>......\nKeyError: 'f'\n</code></pre>\n<h2><a id=\"Series_407\"></a>Series常用属性</h2>\n<p>下面我们介绍 Series 的常用属性和方法。在下表列出了 Series 对象的常用属性。</p>\n<table><thead><tr><th>名称</th><th>属性</th></tr></thead><tbody><tr><td>axes</td><td>以列表的形式返回所有行索引标签。</td></tr><tr><td>dtype</td><td>返回对象的数据类型。</td></tr><tr><td>empty</td><td>返回一个空的 Series 对象。</td></tr><tr><td>ndim</td><td>返回输入数据的维数。</td></tr><tr><td>size</td><td>返回输入数据的元素数量。</td></tr><tr><td>values</td><td>以 ndarray 的形式返回 Series 对象。</td></tr><tr><td>index</td><td>返回一个RangeIndex对象，用来描述索引的取值范围。</td></tr></tbody></table>\n<p>现在创建一个 Series 对象，并演示如何使用上述表格中的属性。如下所示：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>0    0.898097\n1    0.730210\n2    2.307401\n3   -1.723065\n4    0.346728\ndtype: float64\n</code></pre>\n<p>上述示例的行索引标签是 [0,1,2,3,4]。</p>\n<h4><a id=\"1_axes_446\"></a>1) axes</h4>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"The axes are:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>axes<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果</p>\n<pre><code>The axes are:\n[RangeIndex(start=0, stop=5, step=1)]\n</code></pre>\n<h4><a id=\"2_dtype_463\"></a>2) dtype</h4>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"The dtype is:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>The dtype is:\nfloat64\n</code></pre>\n<h4><a id=\"3_empty_480\"></a>3) empty</h4>\n<p>返回一个布尔值，用于判断数据对象是否为空。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否为空对象?\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>是否为空对象?\nFalse\n</code></pre>\n<h4><a id=\"4_ndim_499\"></a>4) ndim</h4>\n<p>查看序列的维数。根据定义，Series 是一维数据结构，因此它始终返回 1。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>ndim<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>0    0.311485\n1    1.748860\n2   -0.022721\n3   -0.129223\n4   -0.489824\ndtype: float64\n1\n</code></pre>\n<h4><a id=\"5_size_523\"></a>5) size</h4>\n<p>返回 Series 对象的大小(长度)。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#series的长度大小</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>0   -1.866261\n1   -0.636726\n2    0.586037\ndtype: float64\n3\n</code></pre>\n<h4><a id=\"6_values_546\"></a>6) values</h4>\n<p>以数组的形式返回 Series 对象中的数据。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出series中数据\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>0   -0.502100\n1    0.696194\n2   -0.982063\n3    0.416430\n4   -1.384514\n5    0.444303\ndtype: float64\n输出series中数据\n[-0.50210028  0.69619407 -0.98206327  0.41642976 -1.38451433  0.44430257]\n</code></pre>\n<h4><a id=\"7_index_573\"></a>7) index</h4>\n<p>该属性用来查看 Series 中索引的取值范围。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#显示索引</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ns<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#隐式索引</span>\ns1<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>隐式索引：\nIndex(['a', 'b', 'c', 'd'], dtype='object')\n显示索引：\nRangeIndex(start=0, stop=4, step=1)\n</code></pre>\n<h2><a id=\"Series_596\"></a>Series常用方法</h2>\n<h4><a id=\"1_headtail_598\"></a>1) head()&amp;tail()查看数据</h4>\n<p>如果想要查看 Series 的某一部分数据，可以使用 head() 或者 tail() 方法。其中 head() 返回前 n 行数据，默认显示前 5 行数据。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"The original series is:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#返回前三行数据</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>原系列输出结果:\n0    1.249679\n1    0.636487\n2   -0.987621\n3    0.999613\n4    1.607751\nhead(3)输出：\ndtype: float64\n0    1.249679\n1    0.636487\n2   -0.987621\ndtype: float64\n</code></pre>\n<p>tail() 返回的是后 n 行数据，默认为后 5 行。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#原series</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#输出后两行数据</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>原Series输出：\n0    0.053340\n1    2.165836\n2   -0.719175\n3   -0.035178\n输出后两行数据：\ndtype: float64\n2   -0.719175\n3   -0.035178\ndtype: float64\n</code></pre>\n<h4><a id=\"2_isnullnonull_656\"></a>2) isnull()&amp;nonull()检测缺失值</h4>\n<p>isnull() 和 nonull() 用于检测 Series 中的缺失值。所谓缺失值，顾名思义就是值不存在、丢失、缺少。</p>\n<ul><li>isnull()：如果为值不存在或者缺失，则返回 True。</li><li>notnull()：如果值不存在或者缺失，则返回 False。</li></ul>\n<p>其实不难理解，在实际的数据分析任物中，数据的收集往往要经历一个繁琐的过程。在这个过程中难免会因为一些不可抗力，或者人为因素导致数据丢失的现象。这时，我们可以使用相应的方法对缺失值进行处理，比如均值插值、数据补齐等方法。上述两个方法就是帮助我们检测是否存在缺失值。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token comment\">#None代表缺失数据</span>\ns<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#是空值返回True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>notnull<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#空值返回False</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>0    False\n1    False\n2    False\n3     True\ndtype: bool\n\nnotnull():\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n</code></pre>\n<h1><a id=\"Pandas_DataFrame_691\"></a>Pandas DataFrame入门教程（图解版）</h1>\n<p>DataFrame 是 Pandas 的重要数据结构之一，也是在使用 Pandas 进行数据分析过程中最常用的结构之一，可以这么说，掌握了 DataFrame 的用法，你就拥有了学习数据分析的基本能力。</p>\n<h2><a id=\"DataFrame_695\"></a>认识DataFrame结构</h2>\n<p>DataFrame 一个表格型的数据结构，既有行标签（index），又有列标签（columns），它也被称异构数据表，所谓异构，指的是表格中每列的数据类型可以不同，比如可以是字符串、整型或者浮点型等。其结构图示意图，如下所示：</p>\n<p><img alt=\"Dataframe结构示意图\" src=\"https://img-blog.csdnimg.cn/img_convert/2273f193f6a9798bd0677273e69f09df.gif\"/></p>\n<p>表格中展示了某个销售团队个人信息和绩效评级（rating）的相关数据。数据以行和列形式来表示，其中每一列表示一个属性，而每一行表示一个条目的信息。</p>\n<p>下表展示了上述表格中每一列标签所描述数据的数据类型，如下所示：</p>\n<table><thead><tr><th>Column</th><th>Type</th></tr></thead><tbody><tr><td>name</td><td>String</td></tr><tr><td>age</td><td>integer</td></tr><tr><td>gender</td><td>String</td></tr><tr><td>rating</td><td>Float</td></tr></tbody></table>\n<p>DataFrame 的每一行数据都可以看成一个 Series 结构，只不过，DataFrame 为这些行中每个数据值增加了一个列标签。因此 DataFrame 其实是从 Series 的基础上演变而来。在数据分析任务中 DataFrame 的应用非常广泛，因为它描述数据的更为清晰、直观。</p>\n<p>通过示例对 DataFrame 结构做进一步讲解。 下面展示了一张学生成绩表，如下所示：</p>\n<p><img alt=\"pandas dataframe结构\" src=\"https://img-blog.csdnimg.cn/img_convert/c29c1ec72bb208922f80baa7070d3368.gif\"/></p>\n<p>DataFrame 结构类似于 Execl 的表格型，表格中列标签的含义如下所示：</p>\n<ul><li>Regd.No：表示登记的序列号</li><li>Name：学生姓名</li><li>Marks：学生分数</li></ul>\n<p>同 Series 一样，DataFrame 自带行标签索引，默认为“隐式索引”即从 0 开始依次递增，行标签与 DataFrame 中的数据项一一对应。上述表格的行标签从 0 到 5，共记录了 5 条数据（图中将行标签省略）。当然你也可以用“显式索引”的方式来设置行标签。</p>\n<p>下面对 DataFrame 数据结构的特点做简单地总结，如下所示：</p>\n<ul><li>DataFrame 每一列的标签值允许使用不同的数据类型；</li><li>DataFrame 是表格型的数据结构，具有行和列；</li><li>DataFrame 中的每个数据值都可以被修改。</li><li>DataFrame 结构的行数、列数允许增加或者删除；</li><li>DataFrame 有两个方向的标签轴，分别是行标签和列标签；</li><li>DataFrame 可以对行和列执行算术运算。</li></ul>\n<h2><a id=\"DataFrame_747\"></a>创建DataFrame对象</h2>\n<p>创建 DataFrame 对象的语法格式如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">,</span> dtype<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>参数说明：</p>\n<table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>输入的数据，可以是 ndarray，series，list，dict，标量以及一个 DataFrame。</td></tr><tr><td>index</td><td>行标签，如果没有传递 index 值，则默认行标签是 np.arange(n)，n 代表 data 的元素个数。</td></tr><tr><td>columns</td><td>列标签，如果没有传递 columns 值，则默认列标签是 np.arange(n)。</td></tr><tr><td>dtype</td><td>dtype表示每一列的数据类型。</td></tr><tr><td>copy</td><td>默认为 False，表示复制数据 data。</td></tr></tbody></table>\n<p>Pandas 提供了多种创建 DataFrame 对象的方式，主要包含以下五种，分别进行介绍。</p>\n<h4><a id=\"1_DataFrame_773\"></a>1) 创建空的DataFrame对象</h4>\n<p>使用下列方式创建一个空的 DataFrame，这是 DataFrame 最基本的创建方法。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code>Empty DataFrame\nColumns: []\nIndex: []\n</code></pre>\n<h4><a id=\"2_DataFame_791\"></a>2) 列表创建DataFame对象</h4>\n<p>可以使用单一列表或嵌套列表来创建一个 DataFrame。</p>\n<p>示例 1，单一列表创建 DataFrame：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出如下：</p>\n<pre><code>     0\n0    1\n1    2\n2    3\n3    4\n4    5\n</code></pre>\n<p>示例 2，使用嵌套列表创建 DataFrame 对象：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Alex'</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Clarke'</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>      Name      Age\n0     Alex      10\n1     Bob       12\n2     Clarke    13\n</code></pre>\n<p>示例 3，指定数值元素的数据类型为 float：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Alex'</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Clarke'</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>      Name     Age\n0     Alex     10.0\n1     Bob      12.0\n2     Clarke   13.0\n</code></pre>\n<h4><a id=\"3__851\"></a>3) 字典嵌套列表创建</h4>\n<p>data 字典中，键对应的值的元素长度必须相同（也就是列表长度相同）。如果传递了索引，那么索引的长度应该等于数组的长度；如果没有传递索引，那么默认情况下，索引将是 range(n)，其中 n 代表数组长度。</p>\n<p>示例 4：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Steve'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ricky'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">42</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>      Age      Name\n0     28        Tom\n1     34       Jack\n2     29      Steve\n3     42      Ricky\n</code></pre>\n<p>注意：这里使用了默认行标签，也就是 range(n)。它生成了 0,1,2,3，并分别对应了列表中的每个元素值。</p>\n<p>示例 5，现在给上述示例 4 添加自定义的行标签：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Steve'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ricky'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">42</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'rank1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rank2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rank3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rank4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code>         Age    Name\nrank1    28      Tom\nrank2    34     Jack\nrank3    29    Steve\nrank4    42    Ricky\n</code></pre>\n<p>注意：index 参数为每行分配了一个索引。</p>\n<h4><a id=\"4_DataFrame_897\"></a>4) 列表嵌套字典创建DataFrame对象</h4>\n<p>列表嵌套字典可以作为输入数据传递给 DataFrame 构造函数。默认情况下，字典的键被用作列名。</p>\n<p>示例 6 如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>    a    b      c\n0   1   2     NaN\n1   5   10   20.0\n</code></pre>\n<p>注意：如果其中某个元素值缺失，也就是字典的 key 无法找到对应的 value，将使用 NaN 代替。</p>\n<p>示例 7，给上述示例 6 添加行标签索引：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>        a   b       c\nfirst   1   2     NaN\nsecond  5   10   20.0\n</code></pre>\n<p>示例 8，如何使用字典嵌套列表以及行、列索引表创建一个 DataFrame 对象。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\ndf1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>#df2输出\n         a  b\nfirst    1  2\nsecond   5  10\n\n#df1输出\n         a  b1\nfirst    1  NaN\nsecond   5  NaN\n</code></pre>\n<p>注意：因为 b1 在字典键中不存在，所以对应值为 NaN。</p>\n<h4><a id=\"5_SeriesDataFrame_964\"></a>5) Series创建DataFrame对象</h4>\n<p>您也可以传递一个字典形式的 Series，从而创建一个 DataFrame 对象，其输出结果的行索引是所有 index 的合集。 示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'one'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'two'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code>      one    two\na     1.0    1\nb     2.0    2\nc     3.0    3\nd     NaN    4\n</code></pre>\n<p>注意：对于 one 列而言，此处虽然显示了行索引 ‘d’，但由于没有与其对应的值，所以它的值为 NaN。</p>\n<h2><a id=\"DataFrame_988\"></a>列索引操作DataFrame</h2>\n<p>DataFrame 可以使用列索（columns index）引来完成数据的选取、添加和删除操作。下面依次对这些操作进行介绍。</p>\n<h4><a id=\"1__992\"></a>1) 列索引选取数据列</h4>\n<p>您可以使用列索引，轻松实现数据选取，示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'one'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'two'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>a     1.0\nb     2.0\nc     3.0\nd     NaN\nName: one, dtype: float64\n</code></pre>\n<h4><a id=\"2__1014\"></a>2) 列索引添加数据列</h4>\n<p>使用 columns 列索引表标签可以实现添加新的数据列，示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'one'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'two'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#使用df['列']=值，插入新的数据列</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#将已经存在的数据列做相加运算</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'four'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>使用列索引创建新数据列:\n     one   two   three\na    1.0    1    10.0\nb    2.0    2    20.0\nc    3.0    3    30.0\nd    NaN    4    NaN\n\n已存在的数据列做算术运算：\n      one   two   three    four\na     1.0    1    10.0     11.0\nb     2.0    2    20.0     22.0\nc     3.0    3    30.0     33.0\nd     NaN    4     NaN     NaN\n</code></pre>\n<p>上述示例，我们初次使用了 DataFrame 的算术运算，这和 NumPy 非常相似。除了使用<code>df[]=value</code>的方式外，您还可以使用 insert() 方法插入新的列，示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ninfo<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Helen'</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ndf<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span>columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#注意是column参数</span>\n<span class=\"token comment\">#数值1代表插入到columns列表的索引位置</span>\ndf<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>column<span class=\"token operator\">=</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">91</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>添加前：\n    name  age\n0   Jack   18\n1  Helen   19\n2   John   17\n\n添加后：\n    name  score  age\n0   Jack     91   18\n1  Helen     90   19\n2   John     75   17\n</code></pre>\n<h4><a id=\"3__1078\"></a>3) 列索引删除数据列</h4>\n<p>通过 del 和 pop() 都能够删除 DataFrame 中的数据列。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'one'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'two'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'three'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Our dataframe is:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#使用del删除</span>\n<span class=\"token keyword\">del</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#使用pop方法删除</span>\ndf<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>原DataFrame:\n      one   three  two\na     1.0    10.0   1\nb     2.0    20.0   2\nc     3.0    30.0   3\nd     NaN     NaN   4\n\n使用del删除 first:\n      three    two\na     10.0     1\nb     20.0     2\nc     30.0     3\nd     NaN      4\n\n使用 pop()删除:\n   three\na  10.0\nb  20.0\nc  30.0\nd  NaN\n</code></pre>\n<h2><a id=\"DataFrame_1123\"></a>行索引操作DataFrame</h2>\n<p>理解了上述的列索引操作后，行索引操作就变的简单。下面看一下，如何使用行索引来选取 DataFrame 中的数据。</p>\n<h4><a id=\"1__1127\"></a>1) 标签索引选取</h4>\n<p>可以将行标签传递给 loc 函数，来选取数据。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'one'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'two'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>one 2.0two 2.0Name: b, dtype: float64\n</code></pre>\n<p>注意：loc 允许接两个参数分别是行和列，参数之间需要使用“逗号”隔开，但该函数只能接收标签索引。</p>\n<h4><a id=\"2__1147\"></a>2) 整数索引选取</h4>\n<p>通过将数据行所在的索引位置传递给 iloc 函数，也可以实现数据行选取。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'one'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'two'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>）\n</code></pre>\n<p>输出结果：</p>\n<pre><code>one   3.0\ntwo   3.0\nName: c, dtype: float64\n</code></pre>\n<p>注意：iloc 允许接受两个参数分别是行和列，参数之间使用“逗号”隔开，但该函数只能接收整数索引。</p>\n<h4><a id=\"3__1169\"></a>3) 切片操作多行选取</h4>\n<p>您也可以使用切片的方式同时选取多行。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'one'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'two'</span> <span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#左闭右开</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>   one  two\nc  3.0    3\nd  NaN    4\n</code></pre>\n<h4><a id=\"4__1190\"></a>4) 添加数据行</h4>\n<p>使用 append() 函数，可以将新的数据行添加到 DataFrame 中，该函数会在行末追加数据行。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#在行末追加新数据行</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>   a  b\n0  1  2\n1  3  4\n0  5  6\n1  7  8\n</code></pre>\n<h4><a id=\"5__1213\"></a>5) 删除数据行</h4>\n<p>您可以使用行索引标签，从 DataFrame 中删除某一行数据。如果索引标签存在重复，那么它们将被一起删除。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#注意此处调用了drop()方法</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>执行drop(0)前：\n   a  b\n0  1  2\n1  3  4\n0  5  6\n1  7  8\n\n执行drop(0)后：\n  a b\n1 3 4\n1 7 8\n</code></pre>\n<p>在上述的示例中，默认使用 range(2) 生成了行索引，并通过 drop(0) 同时删除了两行数据。</p>\n<h2><a id=\"_1246\"></a>常用属性和方法汇总</h2>\n<p>DataFrame 的属性和方法，与 Series 相差无几，如下所示：</p>\n<table><thead><tr><th>名称</th><th>属性&amp;方法描述</th></tr></thead><tbody><tr><td>T</td><td>行和列转置。</td></tr><tr><td>axes</td><td>返回一个仅以行轴标签和列轴标签为成员的列表。</td></tr><tr><td>dtypes</td><td>返回每列数据的数据类型。</td></tr><tr><td>empty</td><td>DataFrame中没有数据或者任意坐标轴的长度为0，则返回True。</td></tr><tr><td>ndim</td><td>轴的数量，也指数组的维数。</td></tr><tr><td>shape</td><td>返回一个元组，表示了 DataFrame 维度。</td></tr><tr><td>size</td><td>DataFrame中的元素数量。</td></tr><tr><td>values</td><td>使用 numpy 数组表示 DataFrame 中的元素值。</td></tr><tr><td>head()</td><td>返回前 n 行数据。</td></tr><tr><td>tail()</td><td>返回后 n 行数据。</td></tr><tr><td>shift()</td><td>将行或列移动指定的步幅长度</td></tr></tbody></table>\n<p>下面对 DataFrame 常用属性进行演示，首先我们创建一个 DataFrame 对象，示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#输出series</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>输出 series 数据:\n     Name  years  Rating\n0  c语言中文网    5    4.23\n1     编程帮     6    3.24\n2      百度     15    3.98\n3   360搜索     28    2.56\n4      谷歌     3     3.20\n5     微学苑    19    4.60\n6  Bing搜索     23    3.80\n</code></pre>\n<h4><a id=\"1_TTranspose_1296\"></a>1) T（Transpose）转置</h4>\n<p>返回 DataFrame 的转置，也就是把行和列进行交换。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#输出DataFrame的转置</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Our data series is:\n             0         1      2      3       4    5       6\nName    c语言中文网   编程帮    百度  360搜索   谷歌  微学苑  Bing搜索\nyears        5        6      15      28      3     19      23\nRating    4.23       3.24    3.98    2.56    3.2   4.6     3.8\n</code></pre>\n<h4><a id=\"2_axes_1322\"></a>2) axes</h4>\n<p>返回一个行标签、列标签组成的列表。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#输出行、列标签</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>axes<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>[RangeIndex(start=0, stop=7, step=1), Index(['Name', 'years', 'Rating'], dtype='object')]\n</code></pre>\n<h4><a id=\"3_dtypes_1344\"></a>3) dtypes</h4>\n<p>返回每一列的数据类型。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#输出行、列标签</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>dtypes<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Name       object\nyears       int64\nRating     float64\ndtype:     object\n</code></pre>\n<h4><a id=\"4_empty_1369\"></a>4) empty</h4>\n<p>返回一个布尔值，判断输出的数据对象是否为空，若为 True 表示对象为空。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#判断输入数据是否为空</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>判断输入对象是否为空：\nFalse\n</code></pre>\n<h4><a id=\"5_ndim_1392\"></a>5) ndim</h4>\n<p>返回数据对象的维数。DataFrame 是一个二维数据结构。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#DataFrame的维度</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>ndim<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<p>2</p>\n<h4><a id=\"6_shape_1412\"></a>6) shape</h4>\n<p>返回一个代表 DataFrame 维度的元组。返回值元组 (a,b)，其中 a 表示行数，b 表示列数。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#DataFrame的形状</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n输出结果：\n</code></pre>\n<p>(7, 3)</p>\n<h4><a id=\"7_size_1431\"></a>7) size</h4>\n<p>返回 DataFrame 中的元素数量。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#DataFrame的中元素个数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<p>21</p>\n<h4><a id=\"8_values_1451\"></a>8) values</h4>\n<p>以 ndarray 数组的形式返回 DataFrame 中的数据。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#DataFrame的数据</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>[['c语言中文网' 5 4.23]\n['编程帮' 6 3.24]\n['百度' 15 3.98]\n['360搜索' 28 2.56]\n['谷歌' 3 3.2]\n['微学苑' 19 4.6]\n['Bing搜索' 23 3.8]]\n</code></pre>\n<h4><a id=\"9_headtail_1479\"></a>9) head()&amp;tail()查看数据</h4>\n<p>如果想要查看 DataFrame 的一部分数据，可以使用 head() 或者 tail() 方法。其中 head() 返回前 n 行数据，默认显示前 5 行数据。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#获取前3行数据</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>     Name       years   Rating\n0   c语言中文网      5     4.23\n1    编程帮         6     3.24\n2    百度          15     3.98\n</code></pre>\n<p>tail() 返回后 n 行数据，示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c语言中文网'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'编程帮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'360搜索'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'谷歌'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微学苑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bing搜索'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'years'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#构建DataFrame</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#获取后2行数据</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>      Name     years   Rating\n5     微学苑      19     4.6\n6    Bing搜索     23     3.8\n</code></pre>\n<h4><a id=\"10_shift_1526\"></a>10) shift()移动行或列</h4>\n<p>如果您想要移动 DataFrame 中的某一行/列，可以使用 shift() 函数实现。它提供了一个<code>periods</code>参数，该参数表示在特定的轴上移动指定的步幅。</p>\n<p>shif() 函数的语法格式如下：</p>\n<p>DataFrame.shift(periods=1, freq=None, axis=0)</p>\n<p>参数说明如下：</p>\n<table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>peroids</td><td>类型为int，表示移动的幅度，可以是正数，也可以是负数，默认值为1。</td></tr><tr><td>freq</td><td>日期偏移量，默认值为None，适用于时间序。取值为符合时间规则的字符串。</td></tr><tr><td>axis</td><td>如果是 0 或者 “index” 表示上下移动，如果是 1 或者 “columns” 则会左右移动。</td></tr><tr><td>fill_value</td><td>该参数用来填充缺失值。</td></tr></tbody></table>\n<p>该函数的返回值是移动后的 DataFrame 副本。下面看一组简单的实例：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd \ninfo<span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a_data'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n<span class=\"token string\">'b_data'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n<span class=\"token string\">'c_data'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">#移动幅度为3</span>\ninfo<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">(</span>periods<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  \n</code></pre>\n<p>输出结果：</p>\n<pre><code>   a_data  b_data  c_data\n0     NaN     NaN     NaN\n1     NaN     NaN     NaN\n2     NaN     NaN     NaN\n3    40.0    20.0    22.0\n4    28.0    37.0    17.0\n</code></pre>\n<p>下面使用 fill_value 参数填充 DataFrame 中的缺失值，如下所示：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd \ninfo<span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a_data'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n<span class=\"token string\">'b_data'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n<span class=\"token string\">'c_data'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">#移动幅度为3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">(</span>periods<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#将缺失值和原数值替换为52</span>\ninfo<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">(</span>periods<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>fill_value<span class=\"token operator\">=</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span>  \n</code></pre>\n<p>输出结果：</p>\n<pre><code>原输出结果：\n   a_data  b_data  c_data\n0     NaN     NaN     NaN\n1     NaN     NaN     NaN\n2     NaN     NaN     NaN\n3    40.0    20.0    22.0\n4    28.0    37.0    17.0\n\n替换后输出：\n   a_data  b_data  c_data\n0      52      52      52\n1      52      52      52\n2      52      52      52\n3      52      52      52\n4      52      52      52\n</code></pre>\n<p>注意：fill_value 参数不仅可以填充缺失值，还也可以对原数据进行替换。</p>\n<h1><a id=\"Pandas_Panel_1603\"></a>Pandas Panel三维数据结构</h1>\n<p>Panel 结构也称“面板结构”，它源自于 Panel Data 一词，翻译为“面板数据”。如果您使用的是 Pandas 0.25 以前的版本，那么您需要掌握本节内容，否则，作为了解内容即可。</p>\n<p>自 Pandas 0.25 版本后， Panel 结构已经被废弃。</p>\n<p>Panel 是一个用来承载数据的三维数据结构，它有三个轴，分别是 items（0 轴），major_axis（1 轴），而 minor_axis（2 轴）。这三个轴为描述、操作 Panel 提供了支持，其作用介绍如下：</p>\n<ul><li>items：axis =0，Panel 中的每个 items 都对应一个 DataFrame。</li><li>major_axis：axis=1，用来描述每个 DataFrame 的行索引。</li><li>minor_axis：axis=2，用来描述每个 DataFrame 的列索引。</li></ul>\n<h2><a id=\"pandasPanel_1615\"></a>pandas.Panel()</h2>\n<p>您可以使用下列构造函数创建一个 Panel，如下所示：</p>\n<p>pandas.Panel(data, items, major_axis, minor_axis, dtype, copy)</p>\n<p>参数说明如下：</p>\n<table><thead><tr><th>参数名称</th><th>描述说明</th></tr></thead><tbody><tr><td>data</td><td>输入数据，可以是 ndarray，Series，列表，字典，或者 DataFrame。</td></tr><tr><td>items</td><td>axis=0</td></tr><tr><td>major_axis</td><td>axis=1</td></tr><tr><td>minor_axis</td><td>axis=2</td></tr><tr><td>dtype</td><td>每一列的数据类型。</td></tr><tr><td>copy</td><td>默认为 False，表示是否复制数据。</td></tr></tbody></table>\n<h2><a id=\"Panel__1634\"></a>创建Panel 对象</h2>\n<p>下面介绍创建 Panel 对象的两种方式：一种是使用 nadarry 数组创建，另一种使用 DataFrame 对象创建。首先，我们学习如何创建一个空的 Panel 对象。</p>\n<h4><a id=\"1_Panel_1638\"></a>1) 创建一个空Panel</h4>\n<p>使用 Panel 的构造函数创建，如下所示：</p>\n<pre><code>import pandas as pd\np = pd.Panel()\nprint(p)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>&lt;class 'pandas.core.panel.Panel'&gt;\nDimensions: 0 (items) x 0 (major_axis) x 0 (minor_axis)\nItems axis: None\nMajor_axis axis: None\nMinor_axis axis: None\n</code></pre>\n<h4><a id=\"2_ndarray_1658\"></a>2) ndarray三维数组创建</h4>\n<pre><code>import pandas as pd\nimport numpy as np\n#返回均匀分布的随机样本值位于[0,1）之间\ndata = np.random.rand(2,4,5)\np = pd.Panel(data)\nprint (p)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>&lt;class 'pandas.core.panel.Panel'&gt;\nDimensions: 2 (items) x 4 (major_axis) x 5 (minor_axis)\nItems axis: 0 to 1\nMajor_axis axis: 0 to 3\nMinor_axis axis: 0 to 4\n</code></pre>\n<p>请注意与上述示例的空 Panel 进行对比。</p>\n<h4><a id=\"3_DataFrame_1681\"></a>3) DataFrame创建</h4>\n<p>下面使用 DataFrame 创建一个 Panel，示例如下：</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndata = {'Item1' : pd.DataFrame(np.random.randn(4, 3)),\n   'Item2' : pd.DataFrame(np.random.randn(4, 2))}\np = pd.Panel(data)\nprint(p)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Dimensions: 2 (items) x 4 (major_axis) x 3 (minor_axis)\nItems axis: Item1 to Item2\nMajor_axis axis: 0 to 3\nMinor_axis axis: 0 to 2\n</code></pre>\n<h2><a id=\"Panel_1703\"></a>Panel中选取数据</h2>\n<p>如果想要从 Panel 对象中选取数据，可以使用 Panel 的三个轴来实现，也就是<code>items</code>，<code>major_axis</code>，<code>minor_axis</code>。下面介绍其中一种，大家体验一下即可。</p>\n<h4><a id=\"1__items_1707\"></a>1) 使用 items选取数据</h4>\n<p>示例如下：</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndata = {'Item1':pd.DataFrame(np.random.randn(4, 3)),\n   'Item2':pd.DataFrame(np.random.randn(4, 2))}\np = pd.Panel(data)\nprint(p['Item1'])\n</code></pre>\n<p>输出结果：</p>\n<pre><code>            0          1          2\n0    0.488224  -0.128637   0.930817\n1    0.417497   0.896681   0.576657\n2   -2.775266   0.571668   0.290082\n3   -0.400538  -0.144234   1.110535\n</code></pre>\n<p>上述示例中 data，包含了两个数据项，我们选择了 item1，输出结果是 4 行 3 列的 DataFrame，其行、列索引分别对应 major_axis 和 minor_axis。</p>\n<h1><a id=\"Python_Pandas_1732\"></a>Python Pandas描述性统计</h1>\n<p>描述统计学（descriptive statistics）是一门统计学领域的学科，主要研究如何取得反映客观现象的数据，并以图表形式对所搜集的数据进行处理和显示，最终对数据的规律、特征做出综合性的描述分析。Pandas 库正是对描述统计学知识完美应用的体现，可以说如果没有“描述统计学”作为理论基奠，那么 Pandas 是否存在犹未可知。下列表格对 Pandas 常用的统计学函数做了简单的总结：</p>\n<table><thead><tr><th>函数名称</th><th>描述说明</th></tr></thead><tbody><tr><td>count()</td><td>统计某个非空值的数量。</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>mean()</td><td>求均值</td></tr><tr><td>median()</td><td>求中位数</td></tr><tr><td>mode()</td><td>求众数</td></tr><tr><td>std()</td><td>求标准差</td></tr><tr><td>min()</td><td>求最小值</td></tr><tr><td>max()</td><td>求最大值</td></tr><tr><td>abs()</td><td>求绝对值</td></tr><tr><td>prod()</td><td>求所有数值的乘积。</td></tr><tr><td>cumsum()</td><td>计算累计和，axis=0，按照行累加；axis=1，按照列累加。</td></tr><tr><td>cumprod()</td><td>计算累计积，axis=0，按照行累积；axis=1，按照列累积。</td></tr><tr><td>corr()</td><td>计算数列或变量之间的相关系数，取值-1到1，值越大表示关联性越强。</td></tr></tbody></table>\n<p>从描述统计学角度出发，我们可以对 DataFrame 结构执行聚合计算等其他操作，比如 sum() 求和、mean()求均值等方法。</p>\n<p>在 DataFrame 中，使用聚合类方法时需要指定轴(axis)参数。下面介绍两种传参方式：</p>\n<ul><li>对行操作，默认使用 axis=0 或者使用 “index”；</li><li>对列操作，默认使用 axis=1 或者使用 “columns”。</li></ul>\n<p><img alt=\"axis轴示意图\" src=\"https://img-blog.csdnimg.cn/img_convert/cd863a57c83d12948957913b595b1dfd.gif\"/><br/> 图1：axis轴示意图</p>\n<p>从图 1 可以看出，axis=0 表示按垂直方向进行计算，而 axis=1 则表示按水平方向。下面让我们创建一个 DataFrame，使用它对本节的内容进行演示。</p>\n<p>创建一个 DataFrame 结构，如下所示：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token comment\">#创建字典型series结构</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小亮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小华'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老赵'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小曹'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小陈'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'老李'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小冯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小何'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老张'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.78</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.80</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>   Name  Age  Rating\n0    小明   25    4.23\n1    小亮   26    3.24\n2    小红   25    3.98\n3    小华   23    2.56\n4    老赵   30    3.20\n5    小曹   29    4.60\n6    小陈   23    3.80\n7    老李   34    3.78\n8    老王   40    2.98\n9    小冯   30    4.80\n10   小何   51    4.10\n11   老张   46    3.65\n</code></pre>\n<h2><a id=\"sum_1803\"></a>sum()求和</h2>\n<p>在默认情况下，返回 axis=0 的所有值的和。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token comment\">#创建字典型series结构</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小亮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小华'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老赵'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小曹'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小陈'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'老李'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小冯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小何'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老张'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.78</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.80</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#默认axis=0或者使用sum(\"index\")</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Name      小明小亮小红小华老赵小曹小陈老李老王小冯小何老张\nAge                            382\nRating                       44.92\ndtype: object\n</code></pre>\n<p><strong>注意</strong>：sum() 和 cumsum() 函数可以同时处理数字和字符串数据。虽然字符聚合通常不被使用，但使用这两个函数并不会抛出异常；而对于 abs()、cumprod() 函数则会抛出异常，因为它们无法操作字符串数据。</p>\n<p>下面再看一下 axis=1 的情况，如下所示：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小亮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小华'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老赵'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小曹'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小陈'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'老李'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小冯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小何'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老张'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.78</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.80</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#也可使用sum(\"columns\")或sum(1)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>0     29.23\n1     29.24\n2     28.98\n3     25.56\n4     33.20\n5     33.60\n6     26.80\n7     37.78\n8     42.98\n9     34.80\n10    55.10\n11    49.65\ndtype: float64\n</code></pre>\n<h2><a id=\"mean_1865\"></a>mean()求均值</h2>\n<p>示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小亮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小华'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老赵'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小曹'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小陈'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'老李'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小冯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小何'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老张'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.78</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.80</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Age       31.833333\nRating     3.743333\ndtype: float64\n</code></pre>\n<h2><a id=\"std_1889\"></a>std()求标准差</h2>\n<p>返回数值列的标准差，示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小亮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小华'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老赵'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小曹'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小陈'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'老李'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小冯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小何'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老张'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.78</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.80</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Age       13.976983\nRating     0.661628\ndtype: float64\n</code></pre>\n<p>标准差是方差的算术平方根，它能反映一个数据集的离散程度。注意，平均数相同的两组数据，标准差未必相同。</p>\n<h2><a id=\"_1915\"></a>数据汇总描述</h2>\n<p>describe() 函数显示与 DataFrame 数据列相关的统计信息摘要。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小亮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小华'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老赵'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小曹'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小陈'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'老李'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小冯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小何'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老张'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.78</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.80</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#创建DataFrame对象</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#求出数据的所有描述信息</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>             Age     Rating\ncount  12.000000  12.000000\nmean   34.916667   3.743333\nstd    13.976983   0.661628\nmin    19.000000   2.560000\n25%    24.500000   3.230000\n50%    28.000000   3.790000\n75%    45.750000   4.132500\nmax    59.000000   4.800000\n</code></pre>\n<p>describe() 函数输出了平均值、std 和 IQR 值(四分位距)等一系列统计信息。通过 describe() 提供的<code>include</code>能够筛选字符列或者数字列的摘要信息。</p>\n<p>include 相关参数值说明如下：</p>\n<ul><li>object： 表示对字符列进行统计信息描述；</li><li>number：表示对数字列进行统计信息描述；</li><li>all：汇总所有列的统计信息。</li></ul>\n<p>下面看一组示例，如下所示：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小亮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小华'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老赵'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小曹'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小陈'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'老李'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小冯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小何'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老张'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.78</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.80</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span>include<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>       Name\ncount    12\nunique   12\ntop      小红\nfreq      1\n</code></pre>\n<p>最后使用<code>all</code>参数，看一下输出结果，如下所示：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小亮'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小华'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老赵'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小曹'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小陈'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'老李'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老王'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小冯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小何'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'老张'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">'Rating'</span><span class=\"token punctuation\">:</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.24</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.56</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.78</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.98</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.80</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span>include<span class=\"token operator\">=</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>       Name        Age     Rating\ncount    12  12.000000  12.000000\nunique   12        NaN        NaN\ntop      小红       NaN       NaN\nfreq      1        NaN        NaN\nmean    NaN  34.916667   3.743333\nstd     NaN  13.976983   0.661628\nmin     NaN  19.000000   2.560000\n25%     NaN  24.500000   3.230000\n50%     NaN  28.000000   3.790000\n75%     NaN  45.750000   4.132500\nmax     NaN  59.000000   4.800000\n</code></pre>\n<h1><a id=\"Python_Pandas_2011\"></a>Python Pandas绘图教程（详解版）</h1>\n<p>Pandas 在数据分析、数据可视化方面有着较为广泛的应用，Pandas 对 Matplotlib 绘图软件包的基础上单独封装了一个<code>plot()</code>接口，通过调用该接口可以实现常用的绘图操作。本节我们深入讲解一下 Pandas 的绘图操作。</p>\n<p>Pandas 之所以能够实现了数据可视化，主要利用了 Matplotlib 库的 plot() 方法，它对 plot() 方法做了简单的封装，因此您可以直接调用该接口。下面看一组简单的示例：</p>\n<pre><code>import pandas as pd\nimport numpy as np\n#创建包含时间序列的数据\ndf = pd.DataFrame(np.random.randn(8,4),index=pd.date_range('2/1/2020',periods=8), columns=list('ABCD'))\ndf.plot()\n</code></pre>\n<p>输结果图，如下所示：</p>\n<p><img alt=\"pandas matplotlib\" src=\"image\\e47d52d11757fda4b1eba21fb4db73d4.png\"/><br/> 图1：Pandas绘图</p>\n<p>如上图所示，如果行索引中包含日期，Pandas 会自动调用 gct().autofmt_xdate() 来格式化 x 轴。</p>\n<p>除了使用默认的线条绘图外，您还可以使用其他绘图方式，如下所示：</p>\n<ul><li>柱状图：bar() 或 barh()</li><li>直方图：hist()</li><li>箱状箱：box()</li><li>区域图：area()</li><li>散点图：scatter()</li></ul>\n<p>通过关键字参数<code>kind</code>可以把上述方法传递给 plot()。</p>\n<h2><a id=\"_2044\"></a>柱状图</h2>\n<p>创建一个柱状图，如下所示：</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.rand(10,4),columns=['a','b','c','d','e'])\n#或使用df.plot(kind=\"bar\")\ndf.plot.bar()\n</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"Pandas bar()\" src=\"image\\a982090cfeb83c246b5d585310650c55.png\"/><br/> 图2：Pandas绘制柱状图</p>\n<p>通过设置参数<code>stacked=True</code>可以生成柱状堆叠图，示例如下：</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.rand(10,5),columns=['a','b','c','d','e'])\ndf.plot(kind=\"bar\",stacked=True)\n#或者使用df.plot.bar(stacked=\"True\")\n</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"pandas bar()\" src=\"image\\e9b28d4b08287d6138aca1dcbbc26c1d.png\"/><br/> 图3：Pandas绘制柱状图</p>\n<p>如果要绘制水平柱状图，您可以使用以下方法：</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.rand(10,4),columns=['a','b','c','d'])\nprint(df)\ndf.plot.barh(stacked=True)\n</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"水平柱状图\" src=\"image\\6abc1074130159635c83067c0a682e2b.png\"/><br/> 图4：水平柱状图</p>\n<h2><a id=\"_2099\"></a>直方图</h2>\n<p>plot.hist() 可以实现绘制直方图，并且它还可以指定 bins（构成直方图的箱数）。</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'A':np.random.randn(100)+2,'B':np.random.randn(100),'C':\nnp.random.randn(100)-2}, columns=['A', 'B', 'C'])\nprint(df)\n#指定箱数为15\ndf.plot.hist(bins=15)\n</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"pandas直方图\" src=\"image\\9e54961462ffcc93e767817e9d7ea07d.png\"/><br/> 图5：绘制直方图</p>\n<p>给每一列数据都绘制一个直方图，需要使以下方法：</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'A':np.random.randn(100)+2,'B':np.random.randn(100),'C':\nnp.random.randn(100)-2,'D':np.random.randn(100)+3},columns=['A', 'B', 'C','D'])\n#使用diff绘制\ndf.diff().hist(color=\"r\",alpha=0.5,bins=15)\n</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"直方图\" src=\"image\\df570ec842e88b6aca48eeb6f4b7bada.png\"/><br/> 图6：直方图绘制</p>\n<h2><a id=\"_2135\"></a>箱型图</h2>\n<p>通过调用 Series.box.plot() 、DataFrame.box.plot() 或者 DataFrame.boxplot() 方法来绘制箱型图，它将每一列数据的分布情况，以可视化的图像展现出来。</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.rand(10, 4), columns=['A', 'B', 'C', 'D'])\ndf.plot.box()\n</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"箱型图绘制\" src=\"image\\8bd0bd49986c65abc0a5f199b3c0af10.png\"/><br/> 图7：绘制箱型图</p>\n<h2><a id=\"_2151\"></a>区域图</h2>\n<p>您可以使用 Series.plot.area() 或 DataFrame.plot.area() 方法来绘制区域图。</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.rand(5, 4), columns=['a', 'b', 'c', 'd'])\ndf.plot.area()\n</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"绘制区域图\" src=\"image\\198db08471c598f48d12ea0ea4b32138.png\"/><br/> 图8：绘制区域图</p>\n<h2><a id=\"_2167\"></a>散点图</h2>\n<p>使用 DataFrame.plot.scatter() 方法来绘制散点图，如下所示：</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.rand(30, 4), columns=['a', 'b', 'c', 'd'])\ndf.plot.scatter(x='a',y='b')\n</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"散点图\" src=\"image\\20520d0f50c985f62f97c5c4d8567fd7.png\"/><br/> 图9：绘制散点图</p>\n<h2><a id=\"_2183\"></a>饼状图</h2>\n<p>饼状图可以通过 DataFrame.plot.pie() 方法来绘制。示例如下：</p>\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame(3 * np.random.rand(4), index=['go', 'java', 'c++', 'c'], columns=['L'])\ndf.plot.pie(subplots=True)\n</code></pre>\n<p>输出结果：</p>\n<p><img alt=\"饼状图\" src=\"image\\32c852fea807f7f6536486c907e1385d.png\"/><br/> 图10：Pandas绘制饼状图</p>\n<h1><a id=\"Pandas_csv_2199\"></a>Pandas csv读写文件</h1>\n<p>在《<a href=\"http://c.biancheng.net/pandas/file-operate.html\">Python Pandas读取文件</a>》中，我们讲解了多种用 Pandas 读写文件的方法。本节我们讲解如何应用这些方法 。</p>\n<p>我们知道，文件的读写操作属于计算机的 IO 操作，Pandas IO 操作提供了一些读取器函数，比如 pd.read_csv()、pd.read_json 等，它们都返回一个 Pandas 对象。</p>\n<p>在 Pandas 中用于读取文本的函数有两个，分别是： read_csv() 和 read_table() ，它们能够自动地将表格数据转换为 DataFrame 对象。其中 read_csv 的语法格式，如下：</p>\n<pre><code>pandas.read_csv(filepath_or_buffer, sep=',', delimiter=None, header='infer',names=None, index_col=None, usecols=None)\n</code></pre>\n<p>下面，新建一个 txt 文件，并添加以下数据：</p>\n<pre><code>ID,Name,Age,City,Salary\n1,Jack,28,Beijing,22000\n2,Lida,32,Shanghai,19000\n3,John,43,Shenzhen,12000\n4,Helen,38,Hengshui,3500\n</code></pre>\n<p>将 txt 文件另存为 person.csv 文件格式，直接修改文件扩展名即可。接下来，对此文件进行操作。</p>\n<h2><a id=\"read_csv_2223\"></a>read_csv()</h2>\n<p>read_csv() 表示从 CSV 文件中读取数据，并创建 DataFrame 对象。</p>\n<pre><code>import pandas as pd\n#需要注意文件的路径\ndf=pd.read_csv(\"C:/Users/Administrator/Desktop/person.csv\")\nprint (df)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>   ID   Name  Age      City  Salary\n0   1   Jack   28   Beijing   22000\n1   2   Lida   32  Shanghai   19000\n2   3   John   43  Shenzhen   12000\n3   4  Helen   38  Hengshui    3500\n</code></pre>\n<h4><a id=\"1__2244\"></a>1) 自定义索引</h4>\n<p>在 CSV 文件中指定了一个列，然后使用<code>index_col</code>可以实现自定义索引。</p>\n<pre><code>import pandas as pd\ndf=pd.read_csv(\"C:/Users/Administrator/Desktop/person.csv\",index_col=['ID'])\nprint(df)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>     Name  Age      City  Salary\nID                             \n1    Jack   28   Beijing   22000\n2    Lida   32  Shanghai   19000\n3    John   43  Shenzhen   12000\n4   Helen   38  Hengshui    3500\n</code></pre>\n<h4><a id=\"2_dtype_2265\"></a>2) 查看每一列的dtype</h4>\n<pre><code>import pandas as pd\n#转换salary为float类型\ndf=pd.read_csv(\"C:/Users/Administrator/Desktop/person.csv\",dtype={'Salary':np.float64})\nprint(df.dtypes)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>ID          int64\nName       object\nAge         int64\nCity       object\nSalary    float64\ndtype: object\n</code></pre>\n<p>注意：默认情况下，Salary 列的 dtype 是 int 类型，但结果显示其为 float 类型，因为我们已经在上述代码中做了类型转换。</p>\n<h4><a id=\"3__2287\"></a>3) 更改文件标头名</h4>\n<p>使用 names 参数可以指定头文件的名称。</p>\n<pre><code>import pandas as pd\ndf=pd.read_csv(\"C:/Users/Administrator/Desktop/person.csv\",names=['a','b','c','d','e'])\nprint(df)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>    a      b    c         d       e\n0  ID   Name  Age      City  Salary\n1   1   Jack   28   Beijing   22000\n2   2   Lida   32  Shanghai   19000\n3   3   John   43  Shenzhen   12000\n4   4  Helen   38  Hengshui    3500\n</code></pre>\n<p>注意：文件标头名是附加的自定义名称，但是您会发现，原来的标头名（列标签名）并没有被删除，此时您可以使用<code>header</code>参数来删除它。</p>\n<p>通过传递标头所在行号实现删除，如下所示：</p>\n<pre><code>import pandas as pd\ndf=pd.read_csv(\"C:/Users/Administrator/Desktop/person.csv\",names=['a','b','c','d','e'],header=0)\nprint(df)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>   a      b   c         d      e\n0  1   Jack  28   Beijing  22000\n1  2   Lida  32  Shanghai  19000\n2  3   John  43  Shenzhen  12000\n3  4  Helen  38  Hengshui   3500\n</code></pre>\n<p>假如原标头名并没有定义在第一行，您也可以传递相应的行号来删除它。</p>\n<h4><a id=\"4__2330\"></a>4) 跳过指定的行数</h4>\n<p><code>skiprows</code>参数表示跳过指定的行数。</p>\n<pre><code>import pandas as pd\ndf=pd.read_csv(\"C:/Users/Administrator/Desktop/person.csv\",skiprows=2)\nprint(df)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>   2   Lida  32  Shanghai  19000\n0  3   John  43  Shenzhen  12000\n1  4  Helen  38  Hengshui   3500\n</code></pre>\n<p>注意：包含标头所在行。</p>\n<h2><a id=\"to_csv_2350\"></a>to_csv()</h2>\n<p>Pandas 提供的 to_csv() 函数用于将 DataFrame 转换为 CSV 数据。如果想要把 CSV 数据写入文件，只需向函数传递一个文件对象即可。否则，CSV 数据将以字符串格式返回。</p>\n<p>下面看一组简单的示例：</p>\n<pre><code>import pandas as pd \ndata = {'Name': ['Smith', 'Parker'], 'ID': [101, 102], 'Language': ['Python', 'JavaScript']} \ninfo = pd.DataFrame(data) \nprint('DataFrame Values:\\n', info) \n#转换为csv数据\ncsv_data = info.to_csv() \nprint('\\nCSV String Values:\\n', csv_data)   \n</code></pre>\n<p>输出结果：</p>\n<pre><code>DataFrame:\n      Name   ID    Language\n0   Smith  101      Python\n1  Parker  102  JavaScript\n\ncsv数据:\n,Name,ID,Language\n0,Smith,101,Python\n1,Parker,102,JavaScript\n</code></pre>\n<p>指定 CSV 文件输出时的分隔符，并将其保存在 pandas.csv 文件中，代码如下：</p>\n<pre><code>import pandas as pd\n#注意：pd.NaT表示null缺失数据\ndata = {'Name': ['Smith', 'Parker'], 'ID': [101, pd.NaT], 'Language': ['Python', 'JavaScript']}\ninfo = pd.DataFrame(data)\ncsv_data = info.to_csv(\"C:/Users/Administrator/Desktop/pandas.csv\",sep='|')\n</code></pre>\n<h1><a id=\"Pandas_Excel_2390\"></a>Pandas Excel读写操作详解</h1>\n<p>Excel 是由微软公司开发的办公软件之一，它在日常工作中得到了广泛的应用。在数据量较少的情况下，Excel 对于数据的处理、分析、可视化有其独特的优势，因此可以显著提升您的工作效率。但是，当数据量非常大时，Excel 的劣势就暴露出来了，比如，操作重复、数据分析难等问题。Pandas 提供了操作 Excel 文件的函数，可以很方便地处理 Excel 表格。</p>\n<h2><a id=\"to_excel_2394\"></a>to_excel()</h2>\n<p>通过 to_excel() 函数可以将 Dataframe 中的数据写入到 Excel 文件。</p>\n<p>如果想要把单个对象写入 Excel 文件，那么必须指定目标文件名；如果想要写入到多张工作表中，则需要创建一个带有目标文件名的<code>ExcelWriter</code>对象，并通过<code>sheet_name</code>参数依次指定工作表的名称。</p>\n<p>to_ecxel() 语法格式如下：</p>\n<pre><code>DataFrame.to_excel(excel_writer, sheet_name='Sheet1', na_rep='', float_format=None, columns=None, header=True, index=True, index_label=None, startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None)  \n</code></pre>\n<p>下表列出函数的常用参数项，如下表所示：</p>\n<table><thead><tr><th>参数名称</th><th>描述说明</th></tr></thead><tbody><tr><td>excel_wirter</td><td>文件路径或者 ExcelWrite 对象。</td></tr><tr><td>sheet_name</td><td>指定要写入数据的工作表名称。</td></tr><tr><td>na_rep</td><td>缺失值的表示形式。</td></tr><tr><td>float_format</td><td>它是一个可选参数，用于格式化浮点数字符串。</td></tr><tr><td>columns</td><td>指要写入的列。</td></tr><tr><td>header</td><td>写出每一列的名称，如果给出的是字符串列表，则表示列的别名。</td></tr><tr><td>index</td><td>表示要写入的索引。</td></tr><tr><td>index_label</td><td>引用索引列的列标签。如果未指定，并且 hearder 和 index 均为为 True，则使用索引名称。如果 DataFrame 使用 MultiIndex，则需要给出一个序列。</td></tr><tr><td>startrow</td><td>初始写入的行位置，默认值0。表示引用左上角的行单元格来储存 DataFrame。</td></tr><tr><td>startcol</td><td>初始写入的列位置，默认值0。表示引用左上角的列单元格来储存 DataFrame。</td></tr><tr><td>engine</td><td>它是一个可选参数，用于指定要使用的引擎，可以是 openpyxl 或 xlsxwriter。</td></tr></tbody></table>\n<p>下面看一组简单的示例：</p>\n<pre><code>import pandas as pd\n#创建DataFrame数据\ninfo_website = pd.DataFrame({'name': ['编程帮', 'c语言中文网', '微学苑', '92python'],\n     'rank': [1, 2, 3, 4],\n     'language': ['PHP', 'C', 'PHP','Python' ],\n     'url': ['www.bianchneg.com', 'c.bianchneg.net', 'www.weixueyuan.com','www.92python.com' ]})\n#创建ExcelWrite对象\nwriter = pd.ExcelWriter('website.xlsx')\ninfo_website.to_excel(writer)\nwriter.save()\nprint('输出成功')\n</code></pre>\n<p>上述代码执行后会自动生成 website.xlsx 文件，文件内容如下：</p>\n<p><img alt=\"Pandas操作Excel\" src=\"https://img-blog.csdnimg.cn/img_convert/9711d6a8776050bf35006b1644a755df.gif\"/><br/> 图1：DataFrame转为Excel</p>\n<h2><a id=\"read_excel_2447\"></a>read_excel()</h2>\n<p>如果您想读取 Excel 表格中的数据，可以使用 read_excel() 方法，其语法格式如下：</p>\n<pre><code>pd.read_excel(io, sheet_name=0, header=0, names=None, index_col=None,\n              usecols=None, squeeze=False,dtype=None, engine=None,\n              converters=None, true_values=None, false_values=None,\n              skiprows=None, nrows=None, na_values=None, parse_dates=False,\n              date_parser=None, thousands=None, comment=None, skipfooter=0,\n              convert_float=True, **kwds)\n</code></pre>\n<p>下表对常用参数做了说明：</p>\n<table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>io</td><td>表示 Excel 文件的存储路径。</td></tr><tr><td>sheet_name</td><td>要读取的工作表名称。</td></tr><tr><td>header</td><td>指定作为列名的行，默认0，即取第一行的值为列名；若数据不包含列名，则设定 header = None。若将其设置 为 header=2，则表示将前两行作为多重索引。</td></tr><tr><td>names</td><td>一般适用于Excel缺少列名，或者需要重新定义列名的情况；names的长度必须等于Excel表格列的长度，否则会报错。</td></tr><tr><td>index_col</td><td>用做行索引的列，可以是工作表的列名称，如 index_col = ‘列名’，也可以是整数或者列表。</td></tr><tr><td>usecols</td><td>int或list类型，默认为None，表示需要读取所有列。</td></tr><tr><td>squeeze</td><td>boolean，默认为False，如果解析的数据只包含一列，则返回一个Series。</td></tr><tr><td>converters</td><td>规定每一列的数据类型。</td></tr><tr><td>skiprows</td><td>接受一个列表，表示跳过指定行数的数据，从头部第一行开始。</td></tr><tr><td>nrows</td><td>需要读取的行数。</td></tr><tr><td>skipfooter</td><td>接受一个列表，省略指定行数的数据，从尾部最后一行开始。</td></tr></tbody></table>\n<p>示例如下所示：</p>\n<pre><code>import pandas as pd\n#读取excel数据\ndf = pd.read_excel('website.xlsx',index_col='name',skiprows=[2])\n#处理未命名列\ndf.columns = df.columns.str.replace('Unnamed.*', 'col_label')\nprint(df)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>           col_label     rank    language          agelimit\nname                                                 \n编程帮           0         1        PHP       www.bianchneg.com\n微学苑           2         3        PHP       www.weixueyuan.com\n92python        3         4        Python    www.92python.com\n</code></pre>\n<p>再看一组示例：</p>\n<pre><code>import pandas as pd\n#读取excel数据\n#index_col选择前两列作为索引列\n#选择前三列数据，name列作为行索引\ndf = pd.read_excel('website.xlsx',index_col='name',index_col=[0,1],usecols=[1,2,3])\n#处理未命名列，固定用法\ndf.columns = df.columns.str.replace('Unnamed.*', 'col_label')\nprint(df)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>                   language\nname      rank        \n编程帮       1          PHP\nc语言中文网   2           C\n微学苑       3          PHP\n92python    4         Python\n</code></pre>\n<h1><a id=\"PandasNumPy_2524\"></a>Pandas和NumPy的比较</h1>\n<p>我们知道 Pandas 是在 NumPy 的基础构建而来，因此，熟悉 NumPy 可以更加有效的帮助我们使用 Pandas。</p>\n<p>NumPy 主要用 C语言编写，因此，在计算还和处理一维或多维数组方面，它要比 Python 数组快得多。关于 NumPy 的学习，可以参考《<a href=\"http://c.biancheng.net/numpy/\">Python NumPy教程</a>》。</p>\n<h2><a id=\"_2530\"></a>创建数组</h2>\n<p>数组的主要作用是在一个变量中存储多个值。NumPy 可以轻松地处理多维数组，示例如下:</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\narr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"打印新建数组: \"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#使用for循环读取数据 </span>\n<span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>&lt;class 'numpy.ndarray'&gt;\n打印新建数组: 2 4 6 8 10\n</code></pre>\n<p>虽然 Python 本身没有数组这个说法，不过 Python 提供一个 array 模块，用于创建数字、字符类型的数组，它能够容纳字符型、整型、浮点型等基本类型。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> array\n<span class=\"token comment\">#注意此处的 'l' 表示有符号int类型 </span>\narr <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"新建数组: \"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<p>输出结果：</p>\n<pre><code>&lt;class 'array.array'&gt;\n新建数组: 2 4 6 8 10\n</code></pre>\n<h2><a id=\"_2570\"></a>布尔索引</h2>\n<p>布尔索引是 NumPy 的重要特性之一，通常与 Pandas 一起使用。它的主要作用是过滤 DataFrame 中的数据，比如布尔值的掩码操作。</p>\n<p>下面示例展示了如何使用布尔索引访问 DataFrame 中的数据。</p>\n<p>首先创建一组包含布尔索引的数据，如下所示：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd \n<span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"William\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Phill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Parker\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"28\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"39\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"34\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"36\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>  \ninfo <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>          name age\nTrue     Smith  28\nTrue   William  39\nFalse    Phill  34\nTrue    Parker  36\n</code></pre>\n<p>然后使用<code>.loc</code>访问索引为 True 的数据。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd   \n<span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"William\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Phill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Parker\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"28\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"39\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"34\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"36\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>  \ninfo <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#返回所有为 True的数据     </span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<p>输出结果：</p>\n<pre><code>         name age\nTrue    Smith  28\nTrue  William  39\nTrue   Parker  36\n</code></pre>\n<h2><a id=\"_2617\"></a>重塑数组形状</h2>\n<p>在不改变数组数据的情况下，对数组进行变形操作，即改变数组的维度，比如 2<em>3（两行三列）的二维数组变维 3</em>2（三行两列）的二维数组。变形操作可以通过 reshape() 函数实现。</p>\n<p>示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np \narr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原数组: \\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> \narr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n变形后数组:\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> \narr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n变形后数组:\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：<br/> 原数组:</p>\n<pre><code>[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]\n\n变形后数组:\n[[ 0  1  2  3  4  5  6  7]\n[ 8  9 10 11 12 13 14 15]]\n\n变形后数组:\n[[ 0  1]\n[ 2  3]\n[ 4  5]\n[ 6  7]\n[ 8  9]\n[10 11]\n[12 13]\n[14 15]]\n</code></pre>\n<h2><a id=\"PdansNumPy_2654\"></a>Pdans与NumPy区别</h2>\n<p>Pandas 和 NumPy 被认为是科学计算与机器学习中必不可少的库，因为它们具有直观的语法和高性能的矩阵计算能力。下面对 Pandas 与 NumPy 进行简单的总结，如下表所示：</p>\n<table><thead><tr><th>比较项</th><th>Pandas</th><th>NumPy</th></tr></thead><tbody><tr><td>适应性</td><td>Pandas主要用来处理类表格数据。</td><td>NumPy 主要用来处理数值数据。</td></tr><tr><td>工具</td><td>Pandas提供了Series和DataFrame数据结构。</td><td>NumPy 构建了 ndarray array来容纳数据。</td></tr><tr><td>性能</td><td>Pandas对于处理50万行以上的数据更具优势。</td><td>NumPy 则对于50万以下或者更少的数据，性能更佳。</td></tr><tr><td>内存利用率</td><td>与 NumPy相比，Pandas会消耗大量的内存。</td><td>NumPy 会消耗较少的内存。</td></tr><tr><td>对象</td><td>Pandas 提供了 DataFrame 2D数据表对象。</td><td>NumPy 则提供了一个多维数组 ndarray 对象</td></tr></tbody></table>\n<h2><a id=\"ndarray_2668\"></a>转换ndarray数组</h2>\n<p>在某些情况下，需要执行一些 NumPy 数值计算的高级函数，这个时候您可以使用 to_numpy() 函数，将 DataFrame 对象转换为 NumPy ndarray 数组，并将其返回。函数的语法格式如下：</p>\n<p>DataFrame.to_numpy(dtype=None, copy=False)</p>\n<p>参数说明如下：</p>\n<ul><li>dtype：可选参数，表示数据类型；</li><li>copy：布尔值参数，默认值为 Fales，表示返回值不是其他数组的视图。</li></ul>\n<p>下面使用示例，了解该函数的使用方法。示例 1：</p>\n<pre><code class=\"prism language-python\">info <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"P\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#给info添加R列 </span>\ninfo<span class=\"token punctuation\">[</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2020-12-23'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#将其转化为numpy数组 </span>\nn<span class=\"token operator\">=</span>info<span class=\"token punctuation\">.</span>to_numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code>[[2 4.0 Timestamp('2020-12-23 00:00:00')]\n[3 5.8 Timestamp('2020-12-24 00:00:00')]]\n</code></pre>\n<p>可以通过 type 查看其类型，输出如下：</p>\n<p>numpy.ndarray</p>\n<p>示例2：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd \n<span class=\"token comment\">#创建DataFrame对象</span>\ninfo <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">76</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \ncolumns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DataFrame\\n----------\\n'</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">#转换DataFrame为数组array</span>\narr <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>to_numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nNumpy Array\\n----------\\n'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> \n</code></pre>\n<p>输出结果：</p>\n<pre><code>DataFrame\n----------\n     x   y   z\n0  17  62  35\n1  25  36  54\n2  42  20  15\n3  48  62  76\n\nNumpy Array\n----------\n[[17 62 35]\n[25 36 54]\n[42 20 15]\n[48 62 76]]\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}