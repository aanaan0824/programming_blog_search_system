{"blogid": "109442403", "writerAge": "码龄5年", "writerBlogNum": "288", "writerCollect": "20190", "writerComment": "572", "writerFan": "69821", "writerGrade": "7级", "writerIntegral": "10705", "writerName": "吮指原味张", "writerProfileAdress": "writer_image\\profile_109442403.jpg", "writerRankTotal": "2583", "writerRankWeekly": "479", "writerThumb": "3680", "writerVisitNum": "1188248", "blog_read_count": "130764", "blog_time": "于 2020-11-02 15:11:13 发布", "blog_title": "C#(Csharp)基础教程(上)(菜鸟教程笔记)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>博客已更新：<a href=\"https://blog.csdn.net/mahoon411/article/details/109522934\">C#(Csharp)基础教程(中)(菜鸟教程笔记)</a><br/> 内容包括：判断、循环、封装、方法、可空类型、数组、字符串、结构体、枚举。</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#1_C__4\">1. C# 及其开发环境简介</a></li><li><ul><li><a href=\"#11_C__5\">1.1 C# 概述</a></li><li><a href=\"#12_C__20\">1.2 C# 的编程功能</a></li><li><a href=\"#13_C_Net_35\">1.3 C# 与.Net的关系</a></li><li><ul><li><a href=\"#131_Net_37\">1.3.1 .Net</a></li><li><a href=\"#132_C_60\">1.3.2 C#</a></li></ul>\n</li><li><a href=\"#14_C_Integrated_Development_Environment__IDE_62\">1.4 C# 的集成开发环境（Integrated Development Environment - IDE）</a></li><li><ul><li><a href=\"#141_Windows_C__63\">1.4.1 Windows上编写 C# 程序</a></li><li><a href=\"#142_Linux__Mac_OS__C__72\">1.4.2 Linux / Mac OS 上编写 C# 程序</a></li></ul>\n</li></ul>\n</li><li><a href=\"#2_C__78\">2. C# 程序结构</a></li><li><ul><li><a href=\"#21_Hello_World_79\">2.1 Hello World</a></li></ul>\n</li><li><a href=\"#3_C__122\">3. C# 基本语法</a></li><li><ul><li><a href=\"#31__123\">3.1 程序实例</a></li><li><a href=\"#32_C__172\">3.2 C# 基本语法</a></li><li><ul><li><a href=\"#321_using_173\">3.2.1 using关键字</a></li><li><a href=\"#322_class_218\">3.2.2 class关键字</a></li><li><a href=\"#323__220\">3.2.3 注释</a></li><li><a href=\"#323__233\">3.2.3 成员变量</a></li><li><a href=\"#324__235\">3.2.4 实例化一个类</a></li><li><a href=\"#325__242\">3.2.5 标识符</a></li><li><a href=\"#326_C__251\">3.2.6 C# 关键字</a></li><li><a href=\"#327_C__258\">3.2.7 C# 占位符{}</a></li></ul>\n</li></ul>\n</li><li><a href=\"#4_C__294\">4. C# 数据类型</a></li><li><ul><li><a href=\"#41_Value_types_300\">4.1 值类型（Value types）</a></li><li><a href=\"#42_Reference_types_326\">4.2 引用类型（Reference types）</a></li><li><ul><li><a href=\"#421_Object_340\">4.2.1 对象（Object）类型</a></li><li><a href=\"#422_Dynamic_358\">4.2.2 动态（Dynamic）类型</a></li><li><a href=\"#423_String_371\">4.2.3 字符串（String）类型</a></li></ul>\n</li><li><a href=\"#43_Pointer_types_402\">4.3 指针类型（Pointer types）</a></li></ul>\n</li><li><a href=\"#5_C__416\">5. C# 类型转换</a></li><li><ul><li><a href=\"#51_C__471\">5.1 C# 类型转换方法</a></li><li><a href=\"#52_ConvertToInt32_506\">5.2 Convert.ToInt32()的取整</a></li></ul>\n</li><li><a href=\"#6_C__536\">6. C# 变量</a></li><li><ul><li><a href=\"#61_C__541\">6.1 C# 中的变量定义</a></li><li><a href=\"#62_C__561\">6.2 C# 中的变量初始化</a></li><li><a href=\"#63__608\">6.3 接受来自用户的值</a></li><li><a href=\"#64_C__Lvalues__Rvalues_617\">6.4 C# 中的 Lvalues 和 Rvalues</a></li></ul>\n</li><li><a href=\"#7_C__633\">7. C# 常量</a></li><li><ul><li><a href=\"#71__636\">7.1 整数常量</a></li><li><a href=\"#72__660\">7.2 浮点常量</a></li><li><a href=\"#73__672\">7.3 字符常量</a></li><li><a href=\"#74__696\">7.4 字符串常量</a></li><li><a href=\"#75__716\">7.5 定义常量</a></li><li><a href=\"#76__757\">7.6 静态常量和动态常量</a></li><li><ul><li><a href=\"#761_const_758\">7.6.1 静态常量（编译时常量）const</a></li><li><a href=\"#762_readonly_765\">7.6.2 动态常量（运行时常量）readonly</a></li><li><a href=\"#763__782\">7.6.3 静态常量与动态常量的使用场景</a></li></ul>\n</li></ul>\n</li><li><a href=\"#8_C__788\">8. C# 运算符</a></li><li><ul><li><a href=\"#81__789\">8.1 算术运算符</a></li><li><a href=\"#82__900\">8.2 关系运算符</a></li><li><a href=\"#83__961\">8.3 逻辑运算符</a></li><li><a href=\"#84__1013\">8.4 位运算符</a></li><li><a href=\"#85__1075\">8.5 赋值运算符</a></li><li><a href=\"#86__1143\">8.6 其他运算符</a></li><li><a href=\"#87_C__1185\">8.7 C# 中的运算符优先级</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_C__4\"></a>1. C# 及其开发环境简介</h1>\n<h2><a id=\"11_C__5\"></a>1.1 C# 概述</h2>\n<p>C# 是一个现代的、通用的、面向对象的编程语言，它是由微软（Microsoft）开发的，由 Ecma 和 ISO 核准认可的。</p>\n<p>C# 是由 Anders Hejlsberg 和他的团队在 .Net 框架开发期间开发的。</p>\n<p>C# 是专为公共语言基础结构（CLI）设计的。CLI 由可执行代码和运行时环境组成，允许在不同的计算机平台和体系结构上使用各种高级语言。<br/> 下面列出了 C# 成为一种广泛应用的专业语言的原因：</p>\n<ul><li>现代的、通用的编程语言。</li><li>面向对象。</li><li>面向组件。</li><li>容易学习。</li><li>结构化语言。</li><li>它产生高效率的程序。</li><li>它可以在多种计算机平台上编译。</li><li>.Net 框架的一部分。</li></ul>\n<h2><a id=\"12_C__20\"></a>1.2 C# 的编程功能</h2>\n<p>虽然 C# 的构想十分接近于传统高级语言 C 和 C++，是一门面向对象的编程语言，但是它与 Java 非常相似，有许多强大的编程功能，因此得到广大程序员的青睐。<br/> 下面列出 C# 一些重要的功能：</p>\n<ul><li>布尔条件（Boolean Conditions）</li><li>自动垃圾回收（Automatic Garbage Collection）</li><li>标准库（Standard Library）</li><li>组件版本（Assembly Versioning）</li><li>属性（Properties）和事件（Events）</li><li>委托（Delegates）和事件管理（Events Management）</li><li>易于使用的泛型（Generics）</li><li>索引器（Indexers）</li><li>条件编译（Conditional Compilation）</li><li>简单的多线程（Multithreading）</li><li>LINQ 和 Lambda 表达式</li><li>集成 Windows</li></ul>\n<h2><a id=\"13_C_Net_35\"></a>1.3 C# 与.Net的关系</h2>\n<p>在这里，主要讨论创建 C# 编程所需的工具。前面已经提到 C# 是 .Net 框架的一部分，且用于编写 .Net 应用程序。因此，在讨论运行 C# 程序的可用工具之前，让我们先了解一下 C# 与 .Net 框架之间的关系。</p>\n<h3><a id=\"131_Net_37\"></a>1.3.1 .Net</h3>\n<p>.NET是微软公司下的一个开发平台，.NET核心就是.NET Framwork（.NET框架）是.NET程序开发和运行的环境，在这个平台下可以用不同的语言进行开发，因为.NET是跨语言的一个平台。语言可以是C#,f#,j#,vb.net等等。java和.NET不同的一点是，java是跨平台的，不跨语言的。.NET跨平台仅限于安卓系统和 iOS 苹果系统。<br/> .Net 框架是一个创新的平台，能帮您编写出下面类型的应用程序：</p>\n<ul><li>Windows 应用程序</li><li>Web 应用程序</li><li>Web 服务</li></ul>\n<p>.Net 框架应用程序是多平台的应用程序。框架的设计方式使它适用于下列各种语言：C#、C++、Visual Basic、Jscript、COBOL 等等。所有这些语言可以访问框架，彼此之间也可以互相交互。<br/> .Net 框架由一个巨大的代码库组成，用于 C# 等客户端语言。下面列出一些 .Net 框架的组件：</p>\n<ul><li>公共语言运行库（Common Language Runtime - CLR）</li><li>.Net 框架类库（.Net Framework Class Library）</li><li>公共语言规范（Common Language Specification）</li><li>通用类型系统（Common Type System）</li><li>元数据（Metadata）和组件（Assemblies）</li><li>Windows 窗体（Windows Forms）</li><li>ASP.Net 和 ASP.Net AJAX</li><li>ADO.Net</li><li>Windows 工作流基础（Windows Workflow Foundation - WF）</li><li>Windows 显示基础（Windows Presentation Foundation）</li><li>Windows 通信基础（Windows Communication Foundation - WCF）</li><li>LINQ</li></ul>\n<p>如需了解每个组件的详细信息，请参阅微软（Microsoft）的文档。</p>\n<h3><a id=\"132_C_60\"></a>1.3.2 C#</h3>\n<p>C#是一个.NET平台下的一个程序设计语言，仅仅是一个语言。是运行在.net CLR上的，用于创建应用程序的高级语言。 程序设计语言是为了方便开发人员和计算机沟通的工具。</p>\n<h2><a id=\"14_C_Integrated_Development_Environment__IDE_62\"></a>1.4 C# 的集成开发环境（Integrated Development Environment - IDE）</h2>\n<h3><a id=\"141_Windows_C__63\"></a>1.4.1 Windows上编写 C# 程序</h3>\n<p>微软（Microsoft）提供了下列用于 C# 编程的开发工具：</p>\n<ul><li>Visual Studio 2010 (VS)</li><li>Visual C# 2010 Express (VCE)</li><li>Visual Web Developer</li></ul>\n<p>后面两个是免费使用的，可从微软官方网址下载。使用这些工具，您可以编写各种 C# 程序，从简单的命令行应用程序到更复杂的应用程序。您也可以使用基本的文本编辑器（比如 Notepad）编写 C# 源代码文件，并使用命令行编译器（.NET 框架的一部分）编译代码为组件。<br/> Visual C# Express 和 Visual Web Developer Express 版本是 Visual Studio 的定制版本，且具有相同的外观和感观。它们保留 Visual Studio 的大部分功能。</p>\n<h3><a id=\"142_Linux__Mac_OS__C__72\"></a>1.4.2 Linux / Mac OS 上编写 C# 程序</h3>\n<p>虽然 .NET 框架是运行在 Windows 操作系统上，但是也有一些运行于其它操作系统上的版本可供选择。Mono 是 .NET 框架的一个开源版本，它包含了一个 C# 编译器，且可运行于多种操作系统上，比如各种版本的 Linux 和 Mac OS。如需了解更多详情，请访问 Go Mono。<br/> Mono 的目的不仅仅是跨平台地运行微软 .NET 应用程序，而且也为 Linux 开发者提供了更好的开发工具。Mono 可运行在多种操作系统上，包括 Android、BSD、iOS、Linux、OS X、Windows、Solaris 和 UNIX。</p>\n<blockquote>\n<ul><li>VS 是 Visual Studio，它是微软提供的一个工具集，由各种各样的工具组成。VS 可以支持 C/C++、VB、JAVA、C# 编程。然了一次只能支持一种编程方式。在 VS 安装完成，第一次运行的时候会让你选择常用语言，如果你选择 C/C++，那么他就成了能够进行 C/C++ 编程的平台也许就是你所说的 VC 了。如果不想用 C/C++ 的话，只需要修改一下他的初始化设置，选择别的编程语言，就成为了另一种的语言的编程环境了。</li><li>VC 是 Visual C++，是一个独立的 C/C++ 的开发工具，比较著名的是 VC6.0，现在的 VC2010其实就是 VC10.0。再通俗一点，以 VS2010 和 VC2010 为例，VS2010 相当与 Office2010，包括了 World2010、Excel2010 等，而 VC2010 就相当于是 World2010。</li></ul>\n</blockquote>\n<h1><a id=\"2_C__78\"></a>2. C# 程序结构</h1>\n<h2><a id=\"21_Hello_World_79\"></a>2.1 Hello World</h2>\n<p>一个 C# 程序主要包括以下部分：</p>\n<ul><li>命名空间声明（Namespace declaration）</li><li>一个 class</li><li>Class 方法</li><li>Class 属性</li><li>一个 Main 方法</li><li>语句（Statements）&amp; 表达式（Expressions）</li><li>注释</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> HelloWorldApplication\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token comment\">/* 我的第一个 C# 程序*/</span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Hello</span> World\n</code></pre>\n<ul><li>程序的第一行 <code>using System;</code> - using 关键字用于在程序中包含 System 命名空间。 一个程序一般有多个 using 语句。</li><li>下一行是 namespace 声明。一个 namespace 里包含了一系列的类。HelloWorldApplication 命名空间包含了类 HelloWorld。</li><li>下一行是 class 声明。类 HelloWorld 包含了程序使用的数据和方法声明。类一般包含多个方法。方法定义了类的行为。在这里，HelloWorld 类只有一个 Main 方法。</li><li>下一行定义了 Main 方法，是所有 C# 程序的 入口点。Main 方法说明当执行时 类将做什么动作。</li><li>下一行<code>/*...*/</code>将会被编译器忽略，且它会在程序中添加额外的注释。</li><li>Main 方法通过语句 <code>Console.WriteLine(\"Hello World\");</code> 指定了它的行为。<br/> WriteLine 是一个定义在 System 命名空间中的 Console 类的一个方法。该语句会在屏幕上显示消息 <code>\"Hello World\"</code>。</li><li>最后一行 <code>Console.ReadKey();</code> 是针对 VS.NET 用户的。这使得程序会等待一个按键的动作，防止程序从 Visual Studio .NET 启动时屏幕会快速运行并关闭。<br/> 以下几点值得注意：</li></ul>\n<p>C# 是大小写敏感的。</p>\n<ul><li>所有的语句和表达式必须以分号（;）结尾。</li><li>程序的执行从 Main 方法开始。</li><li>与 Java 不同的是，文件名可以不同于类的名称。</li></ul>\n<h1><a id=\"3_C__122\"></a>3. C# 基本语法</h1>\n<h2><a id=\"31__123\"></a>3.1 程序实例</h2>\n<p>C# 是一种面向对象的编程语言。在面向对象的程序设计方法中，程序由各种相互交互的对象组成。相同种类的对象通常具有相同的类型，或者说，是在相同的 class 中。<br/> 例如，以 Rectangle（矩形）对象为例。它具有 length 和 width 属性。根据设计，它可能需要接受这些属性值、计算面积和显示细节。<br/> 让我们来看看一个 Rectangle（矩形）类的实现，并借此讨论 C# 的基本语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> RectangleApplication\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 成员变量</span>\n        <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Acceptdetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            length <span class=\"token operator\">=</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">;</span>    \n            width <span class=\"token operator\">=</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> length <span class=\"token operator\">*</span> width<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length: {0}\"</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Width: {0}\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Area: {0}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExecuteRectangle</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Rectangle</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            r<span class=\"token punctuation\">.</span><span class=\"token function\">Acceptdetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            r<span class=\"token punctuation\">.</span><span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\">Length<span class=\"token punctuation\">:</span> <span class=\"token number\">4.5</span>\nWidth<span class=\"token punctuation\">:</span> <span class=\"token number\">3.5</span>\nArea<span class=\"token punctuation\">:</span> <span class=\"token number\">15.75</span>\n</code></pre>\n<h2><a id=\"32_C__172\"></a>3.2 C# 基本语法</h2>\n<h3><a id=\"321_using_173\"></a>3.2.1 using关键字</h3>\n<p>在任何 C# 程序中的第一条语句都是：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一般在程序开头添加 <code>using System;</code>，这时<code>System.String</code> 就可简写为<code>string</code> 。<br/> 例如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// using System;</span>\n\n<span class=\"token keyword\">namespace</span> ConsoleApp1\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>和</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> ConsoleApp1\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">string</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>是等价的。<br/> <code>using</code> 关键字用于在程序中包含命名空间。一个程序可以包含多个 <code>using</code> 语句。</p>\n<h3><a id=\"322_class_218\"></a>3.2.2 class关键字</h3>\n<p>class关键字用于声明一个<strong>类</strong></p>\n<h3><a id=\"323__220\"></a>3.2.3 注释</h3>\n<p>注释是用于解释代码。编译器会忽略注释的条目。在 C# 程序中，多行注释以<code>/*</code>开始，并以字符 <code>*/</code> 终止，如下所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">/* This program demonstrates\nThe basic syntax of C# programming \nLanguage */</span>\n</code></pre>\n<p>单行注释是用 ‘//’ 符号表示。例如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">}</span><span class=\"token comment\">//end class Rectangle    </span>\n</code></pre>\n<h3><a id=\"323__233\"></a>3.2.3 成员变量</h3>\n<p>变量是类的属性或数据成员，用于存储数据。在上面的程序中，Rectangle 类有两个<strong>成员变量</strong>，名为 length 和 width。</p>\n<h3><a id=\"324__235\"></a>3.2.4 实例化一个类</h3>\n<p>在上面的程序中，类 ExecuteRectangle 是一个包含 Main() 方法和实例化 Rectangle 类的类。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Rectangle</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"325__242\"></a>3.2.5 标识符</h3>\n<p>标识符是用来识别类、变量、函数或任何其它用户定义的项目。在 C# 中，类的命名必须遵循如下基本规则：</p>\n<ul><li>标识符必须以字母、下划线或 @ 开头，后面可以跟一系列的字母、数字（ 0 - 9 ）、下划线（ _ ）、@。</li><li>标识符中的第一个字符不能是数字。</li><li>标识符必须不包含任何嵌入的空格或符号，比如 ? - +! # % ^ &amp; * ( ) [ ] { } . ; : \" ’ / \\。</li><li>标识符不能是 C# 关键字。除非它们有一个 @ 前缀。 例如，@if 是有效的标识符，但 if 不是，因为 if 是关键字。</li><li>标识符必须区分大小写。大写字母和小写字母被认为是不同的字母。</li><li>不能与C#的类库名称相同。</li></ul>\n<h3><a id=\"326_C__251\"></a>3.2.6 C# 关键字</h3>\n<p>关键字是 C# 编译器预定义的<strong>保留字</strong>。这些关键字不能用作标识符，但是，如果您想使用这些关键字作为标识符，可以在关键字前面加上 @ 字符作为前缀。<br/> 在 C# 中，有些关键字在代码的上下文中有特殊的意义，如 get 和 set，这些被称为<strong>上下文关键字</strong>（contextual keywords）。<br/> 下表列出了 C# 中的<strong>保留关键字</strong>（Reserved Keywords）和<strong>上下文关键字</strong>（Contextual Keywords）：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20201105212915396.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201105212927453.png\"/></p>\n<h3><a id=\"327_C__258\"></a>3.2.7 C# 占位符{}</h3>\n<ul><li>当 WriteLine() 函数有多个参数时，输出第一个参数(双引号内的)中的内容，而第二个及后面的参数中的内容替换掉第一个参数中对应位置的占位符一起输出。</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A:{0}，a:{1}\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\">A<span class=\"token punctuation\">:</span><span class=\"token number\">65</span>，a<span class=\"token punctuation\">:</span><span class=\"token number\">97</span>\n</code></pre>\n<ul><li>如果第一个参数没有留占位符,那么第二个参数内容不输出。</li></ul>\n<pre><code class=\"prism language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A:,a:\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\">A<span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">:</span>\n</code></pre>\n<ul><li>占位符从零开始计数,且占位符中的数字不能大于第二个及后面的参数的总个数减一(要求占位符必须有可替换的值)。<br/> 占位符数字与第二个及后面的参数字符位置一一对应。</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A:{1}，a:{0}\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\">A<span class=\"token punctuation\">:</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">:</span><span class=\"token number\">65</span>\n</code></pre>\n<h1><a id=\"4_C__294\"></a>4. C# 数据类型</h1>\n<p>在 C# 中，变量分为以下几种类型：</p>\n<ul><li>值类型（Value types）</li><li>引用类型（Reference types）</li><li>指针类型（Pointer types）</li></ul>\n<h2><a id=\"41_Value_types_300\"></a>4.1 值类型（Value types）</h2>\n<p>值类型变量可以直接分配给一个值。它们是从类 System.ValueType 中派生的。<br/> 值类型直接包含数据。比如 int、char、float，它们分别存储数字、字符、浮点数。当您声明一个 int 类型时，系统分配内存来存储值。<br/> 下表列出了 C# 2010 中可用的值类型：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201105220751816.png\"/><br/> 如需得到一个类型或一个变量在特定平台上的准确尺寸，可以使用 sizeof 方法。表达式 sizeof(type) 产生以字节为单位存储对象或类型的存储尺寸。下面举例获取任何机器上 int 类型的存储尺寸：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> DataTypeApplication\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of int: {0}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Size</span> of <span class=\"token keyword\">int</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n</code></pre>\n<h2><a id=\"42_Reference_types_326\"></a>4.2 引用类型（Reference types）</h2>\n<p>引用类型<strong>不包含</strong>存储在变量中的<strong>实际数据</strong>，但它们<strong>包含</strong>对变量的<strong>引用</strong>。</p>\n<p>换句话说，它们指的是一个<strong>内存位置</strong>。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其他变量会自动反映这种值的变化。内置的<strong>引用类型</strong>有：object、dynamic 和 string。</p>\n<blockquote>\n<p>就像仓库，仓库里有货架，货架上有编号：A1,A2,A3…, 这些编号就可以看做是引用类型，现在来了一批货，有 “土豆，黄瓜，西红柿”，这些就是值类型，如果你想让 A1=土豆，那么就要把土豆搬到 A1 里面去，这就叫装箱，装箱需要耗费人力和工时（也就是耗费CPU和内存），同理拆箱就要把对应编号的货物搬出来，也是需要耗费人力和工时。</p>\n</blockquote>\n<blockquote>\n<ul><li>从内存上看，值类型是在栈中的操作，而引用类型是在堆中的操作。<br/> （导致 =&gt; 值类型存取速度快，引用类型存取速度慢。）</li><li>从本质上看，值类型表示实际数据，引用类型表示指向存储在内存堆中的数据的指针或引用。<br/> （值类型是具体的那个数值所占用的空间大小，而引用类型是存放那个数值的空间地址。）</li><li>从来源上看，值类型继承自System.ValueType，引用类型继承自System.Object。</li><li>特别的：结构体是值类型，类和string是引用类型。</li></ul>\n</blockquote>\n<h3><a id=\"421_Object_340\"></a>4.2.1 对象（Object）类型</h3>\n<p><strong>对象</strong>（Object）类型 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的<strong>终极基类</strong>。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p>\n<p>当一个值类型转换为对象类型时，则被称为<strong>装箱</strong>；另一方面，当一个对象类型转换为值类型时，则被称为<strong>拆箱</strong>。</p>\n<ul><li><strong>装箱</strong>：值类型转换为对象类型, 实例：</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">object</span> obj <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span><span class=\"token comment\">//整型数据转换为了对象类型（装箱）</span>\n</code></pre>\n<ul><li><strong>拆箱</strong>：之前由值类型转换而来的对象类型再转回值类型, 实例：</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">object</span> obj <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span><span class=\"token comment\">//先装箱</span>\n<span class=\"token keyword\">int</span> nval <span class=\"token operator\">=</span> （<span class=\"token keyword\">int</span>）obj<span class=\"token punctuation\">;</span><span class=\"token comment\">//再拆箱</span>\n</code></pre>\n<p>只有装过箱的数据才能拆箱。</p>\n<h3><a id=\"422_Dynamic_358\"></a>4.2.2 动态（Dynamic）类型</h3>\n<p>您可以存储任何类型的值在<strong>动态数据类型</strong>变量中。这些变量的类型检查是在<strong>运行</strong>时发生的。<br/> 声明动态类型的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">dynamic</span> <span class=\"token operator\">&lt;</span>variable_name<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>实例为：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">dynamic</span> d <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>动态类型</strong>与<strong>对象类型</strong>相似，但是对象类型变量的类型检查是在<strong>编译</strong>时发生的，而动态类型变量的类型检查是在<strong>运行</strong>时发生的。</p>\n<h3><a id=\"423_String_371\"></a>4.2.3 字符串（String）类型</h3>\n<p>字符串（String）类型 允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。<br/> 例如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"runoob.com\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一个 @引号字符串：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token string\">@\"runoob.com\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>C# string 字符串的前面可以加 @（称作\"<strong>逐字字符串</strong>\"）将转义字符（\\）当作普通字符对待，比如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> str <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Windows\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>等价于：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"C:\\\\Windows\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> str <span class=\"token operator\">=</span> <span class=\"token string\">@\"&lt;script type=\"\"text/javascript\"\"&gt;\n    &lt;!--\n    --&gt;\n&lt;/script&gt;\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>用户自定义<strong>引用类型</strong>有：class、interface 或 delegate。我们将在以后的章节中讨论这些类型。</p>\n<h2><a id=\"43_Pointer_types_402\"></a>4.3 指针类型（Pointer types）</h2>\n<p>指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。<br/> 声明指针类型的语法：</p>\n<pre><code class=\"prism language-csharp\">type<span class=\"token operator\">*</span> identifier<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>例如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> cptr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> iptr<span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"5_C__416\"></a>5. C# 类型转换</h1>\n<p>类型转换从根本上说是<strong>类型铸造</strong>，或者说是把数据从一种类型转换为另一种类型。在 C# 中，类型铸造有两种形式：</p>\n<ul><li><strong>隐式类型转换</strong> ：这些转换是 C# 默认的以安全方式进行的转换, 不会导致数据丢失。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。</li><li><strong>显式类型转换</strong> ：显式类型转换，即强制类型转换。通过用户使用预定义的函数显式完成的，显式转换需要强制转换运算符，而且强制转换会造成数据丢失。转换类型的范围大小和从属关系和隐式转换相反。显式转换可能会导致数据出错，或者转换失败，甚至无法编译成功。</li></ul>\n<p>下面的实例显示了一个隐式的类型转换：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> TypeConvertion\n<span class=\"token punctuation\">{<!-- --></span>   <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class2</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Class1</span> <span class=\"token comment\">//类Class2是类Class1的子类</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> inum <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> lnum <span class=\"token operator\">=</span> inum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 进行了隐式转换，将 int 型（数据范围小）数据转换为了 long 型（数据范围大）的数据</span>\n            <span class=\"token class-name\">Class1</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里也是隐式转换，将一个新建的 Class2 实例转换为了其基类 Class1 类型的实例 C1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面的实例显示了一个显式的类型转换：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> TypeConversionApplication\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExplicitConversion</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">5673.74</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 强制转换 double 为 int</span>\n            i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>d<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">5673</span>\n</code></pre>\n<h2><a id=\"51_C__471\"></a>5.1 C# 类型转换方法</h2>\n<p>C# 提供了下列内置的类型转换方法：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201106110519371.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201106110535163.png\"/><br/> 下面的实例把不同值的类型转换为字符串类型：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> TypeConversionApplication\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringConversion</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">75</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">53.005f</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">2345.7652</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">75</span>\n<span class=\"token number\">53.005</span>\n<span class=\"token number\">2345.7652</span>\nTrue\n</code></pre>\n<h2><a id=\"52_ConvertToInt32_506\"></a>5.2 Convert.ToInt32()的取整</h2>\n<p>C# 中对 double 类型的数据取整，可以使用Convert.ToInt32()方法，也可使用 int 强制转换为整数，使用 int 时并不存在四舍五入的情况，而是直接将后面的小数位数丢掉。比如:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.35</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1.65</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b1 <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}使用convert方法转化的结果为：{1}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}使用int强制转换的结果为：{1}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}使用convert方法转化的结果为：{1}\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}使用int强制转换的结果为：{1}\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1.35</span>使用convert方法转化的结果为：<span class=\"token number\">1</span>\n<span class=\"token number\">1.35</span>使用<span class=\"token keyword\">int</span>强制转换的结果为：<span class=\"token number\">1</span>\n<span class=\"token number\">1.65</span>使用convert方法转化的结果为：<span class=\"token number\">2</span>\n<span class=\"token number\">1.65</span>使用<span class=\"token keyword\">int</span>强制转换的结果为：<span class=\"token number\">1</span>\n</code></pre>\n<h1><a id=\"6_C__536\"></a>6. C# 变量</h1>\n<p>一个变量只不过是一个供程序操作的存储区的名字。在 C# 中，每个变量都有一个特定的类型，类型决定了变量的内存大小和布局。范围内的值可以存储在内存中，可以对变量进行一系列操作。<br/> 我们已经讨论了各种数据类型。C# 中提供的基本的值类型大致可以分为以下几类：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2020110612100177.png\"/><br/> C# 允许定义其他值类型的变量，比如 enum，也允许定义引用类型变量，比如 class。这些我们将在以后的章节中进行讨论。在本章节中，我们只研究基本变量类型。</p>\n<h2><a id=\"61_C__541\"></a>6.1 C# 中的变量定义</h2>\n<p>C# 中变量定义的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token operator\">&lt;</span>data_type<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span>variable_list<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在这里，data_type 必须是一个有效的 C# 数据类型，可以是 char、int、float、double 或其他用户自定义的数据类型。variable_list 可以由一个或多个用逗号分隔的标识符名称组成。<br/> 一些有效的变量定义如下所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>您可以在变量定义时进行初始化：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"62_C__561\"></a>6.2 C# 中的变量初始化</h2>\n<p>变量通过在等号后跟一个常量表达式进行初始化（赋值）。初始化的一般形式为：</p>\n<pre><code class=\"prism language-csharp\">variable_name <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>变量可以在声明时被初始化（指定一个初始值）。初始化由一个等号后跟一个常量表达式组成，如下所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token operator\">&lt;</span>data_type<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span>variable_name<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一些实例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 初始化 d 和 f. */</span>\n<span class=\"token keyword\">byte</span> z <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* 初始化 z. */</span>\n<span class=\"token keyword\">double</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 声明 pi 的近似值 */</span>\n<span class=\"token keyword\">char</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 变量 x 的值为 'x' */</span>\n</code></pre>\n<p>正确地初始化变量是一个良好的编程习惯，否则有时程序会产生意想不到的结果。<br/> 请看下面的实例，使用了各种类型的变量：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> VariableDefinition\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">short</span> a<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> b <span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">/* 实际初始化 */</span>\n            a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = {0}, b = {1}, c = {2}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n</code></pre>\n<h2><a id=\"63__608\"></a>6.3 接受来自用户的值</h2>\n<p>System 命名空间中的 Console 类提供了一个函数 ReadLine()，用于接收来自用户的输入，并把它存储到一个变量中。<br/> 例如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\nnum <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>函数 Convert.ToInt32() 把用户输入的数据转换为 int 数据类型，因为 Console.ReadLine() 只接受字符串格式的数据。</p>\n<h2><a id=\"64_C__Lvalues__Rvalues_617\"></a>6.4 C# 中的 Lvalues 和 Rvalues</h2>\n<p>C# 中的两种表达式：</p>\n<ul><li>lvalue(左值)：lvalue 表达式可以出现在赋值语句的左边或右边。</li><li>rvalue(右值)：rvalue 表达式可以出现在赋值语句的右边，不能出现在赋值语句的左边。</li></ul>\n<p>变量是 lvalue 的，所以可以出现在赋值语句的左边。数值是 rvalue 的，因此不能被赋值，不能出现在赋值语句的左边。下面是一个有效的语句：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面是一个无效的语句，会产生编译时错误：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">10</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"7_C__633\"></a>7. C# 常量</h1>\n<p>常量是固定值，程序执行期间不会改变。常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量或者字符串常量，还有枚举常量。<br/> 常量可以被当作常规的变量，只是它们的值在定义后不能被修改。</p>\n<h2><a id=\"71__636\"></a>7.1 整数常量</h2>\n<p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，没有前缀则表示十进制。<br/> 整数常量也可以有后缀，可以是 U 和 L 的组合，其中，U 和 L 分别表示 unsigned 和 long。后缀可以是大写或者小写，多个后缀以任意顺序进行组合。<br/> 这里有一些整数常量的实例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">212</span>         <span class=\"token comment\">/* 合法 */</span>\n<span class=\"token number\">215</span>u        <span class=\"token comment\">/* 合法 */</span>\n<span class=\"token number\">0</span>xFeeL      <span class=\"token comment\">/* 合法 */</span>\n<span class=\"token number\">078</span>         <span class=\"token comment\">/* 非法：8 不是一个八进制数字 */</span>\n<span class=\"token number\">032</span>UU       <span class=\"token comment\">/* 非法：不能重复后缀 */</span>\n</code></pre>\n<p>以下是各种类型的整数常量的实例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">85</span>         <span class=\"token comment\">/* 十进制 */</span>\n<span class=\"token number\">0213</span>       <span class=\"token comment\">/* 八进制 */</span>\n<span class=\"token number\">0x4b</span>       <span class=\"token comment\">/* 十六进制 */</span>\n<span class=\"token number\">30</span>         <span class=\"token comment\">/* int */</span>\n<span class=\"token number\">30</span>u        <span class=\"token comment\">/* 无符号 int */</span>\n<span class=\"token number\">30</span>l        <span class=\"token comment\">/* long */</span>\n<span class=\"token number\">30</span>ul       <span class=\"token comment\">/* 无符号 long */</span>\n</code></pre>\n<h2><a id=\"72__660\"></a>7.2 浮点常量</h2>\n<p>一个浮点常量是由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。<br/> 这里有一些浮点常量的实例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">3.14159</span>       <span class=\"token comment\">/* 合法 */</span>\n<span class=\"token number\">314159</span>E<span class=\"token operator\">-</span><span class=\"token number\">5</span>L    <span class=\"token comment\">/* 合法 */</span>\n<span class=\"token number\">510</span>E          <span class=\"token comment\">/* 非法：不完全指数 */</span>\n<span class=\"token number\">210f</span>          <span class=\"token comment\">/* 非法：没有小数或指数 */</span>\n<span class=\"token punctuation\">.</span>e55          <span class=\"token comment\">/* 非法：缺少整数或小数 */</span>\n</code></pre>\n<p>使用小数形式表示时，必须包含小数点、指数或同时包含两者。使用指数形式表示时，必须包含整数部分、小数部分或同时包含两者。有符号的指数是用 e 或 E 表示的。</p>\n<h2><a id=\"73__672\"></a>7.3 字符常量</h2>\n<p>字符常量是括在单引号里，例如，‘x’，且可存储在一个简单的字符类型变量中。一个字符常量可以是一个普通字符（例如 ‘x’）、一个转义序列（例如 ‘\\t’）或者一个通用字符（例如 ‘\\u02C0’）。<br/> 在 C# 中有一些特定的字符，当它们的前面带有反斜杠时有特殊的意义，可用于表示换行符（\\n）或制表符 tab（\\t）。在这里，列出一些转义序列码：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201111222927347.png\"/><br/> 以下是一些转义序列字符的实例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> EscapeChar\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\\tWorld\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Hello</span>   World\n</code></pre>\n<h2><a id=\"74__696\"></a>7.4 字符串常量</h2>\n<p>字符串常量是括在双引号<code>\"\"</code>里，或者是括在<code>@\"\"</code>里。字符串常量包含的字符与字符常量相似，可以是：普通字符、转义序列和通用字符<br/> 使用字符串常量时，可以把一个很长的行拆成多个行，可以使用空格分隔各个部分。<br/> 这里是一些字符串常量的实例。下面所列的各种形式表示相同的字符串。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// hello, world</span>\n<span class=\"token keyword\">string</span> b <span class=\"token operator\">=</span> <span class=\"token string\">@\"hello, world\"</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// hello, world</span>\n<span class=\"token keyword\">string</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"hello \\t world\"</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// hello     world</span>\n<span class=\"token keyword\">string</span> d <span class=\"token operator\">=</span> <span class=\"token string\">@\"hello \\t world\"</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// hello \\t world</span>\n<span class=\"token keyword\">string</span> e <span class=\"token operator\">=</span> <span class=\"token string\">\"Joe said \\\"Hello\\\" to me\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Joe said \"Hello\" to me</span>\n<span class=\"token keyword\">string</span> f <span class=\"token operator\">=</span> <span class=\"token string\">@\"Joe said \"\"Hello\"\" to me\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Joe said \"Hello\" to me</span>\n<span class=\"token keyword\">string</span> g <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\\\\\\server\\\\share\\\\file.txt\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \\\\server\\share\\file.txt</span>\n<span class=\"token keyword\">string</span> h <span class=\"token operator\">=</span> <span class=\"token string\">@\"\\\\server\\share\\file.txt\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \\\\server\\share\\file.txt</span>\n<span class=\"token keyword\">string</span> i <span class=\"token operator\">=</span> <span class=\"token string\">\"one\\r\\ntwo\\r\\nthree\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">string</span> j <span class=\"token operator\">=</span> <span class=\"token string\">@\"one\ntwo\nthree\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"75__716\"></a>7.5 定义常量</h2>\n<p>常量是使用 const 关键字来定义的 。定义一个常量的语法如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">const</span> <span class=\"token operator\">&lt;</span>data_type<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span>constant_name<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面的代码演示了如何在程序中定义和使用常量：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleClass</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">SampleClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            x <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SampleClass</span> mC <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SampleClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x = {0}, y = {1}\"</span><span class=\"token punctuation\">,</span> mC<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> mC<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c1 = {0}, c2 = {1}\"</span><span class=\"token punctuation\">,</span>\n                          SampleClass<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">,</span> SampleClass<span class=\"token punctuation\">.</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\">x <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">22</span>\nc1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n</code></pre>\n<h2><a id=\"76__757\"></a>7.6 静态常量和动态常量</h2>\n<h3><a id=\"761_const_758\"></a>7.6.1 静态常量（编译时常量）const</h3>\n<p>在编译时就确定了值，必须在声明时就进行初始化且之后不能进行更改，可在类和方法中定义。定义方法如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> a<span class=\"token operator\">=</span><span class=\"token number\">3.14</span>；<span class=\"token comment\">// 正确声明常量的方法</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 错误，没有初始化</span>\n</code></pre>\n<h3><a id=\"762_readonly_765\"></a>7.6.2 动态常量（运行时常量）readonly</h3>\n<p>在运行时确定值，只能在声明时或构造函数中初始化，只能在类中定义。定义方法如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 声明时初始化</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 构造函数中初始化</span>\n    <span class=\"token function\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"763__782\"></a>7.6.3 静态常量与动态常量的使用场景</h3>\n<p>在下面两种情况下，可以使用 const 常量：</p>\n<ul><li>取值永久不变(比如圆周率、一天包含的小时数、地球的半径等)。</li><li>对程序性能要求非常苛刻。</li></ul>\n<p>除此之外的其他情况都应该优先采用 readonly 常量。</p>\n<h1><a id=\"8_C__788\"></a>8. C# 运算符</h1>\n<h2><a id=\"81__789\"></a>8.1 算术运算符</h2>\n<p>下表显示了 C# 支持的所有算术运算符。假设变量 A 的值为 10，变量 B 的值为 20，则：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201111224530877.png\"/><br/> 请看下面的实例，了解 C# 中所有可用的算术运算符：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> OperatorsAppl\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 1 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 2 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 3 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 4 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 5 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// ++a 先进行自增运算再赋值</span>\n            c <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 6 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 此时 a 的值为 22</span>\n            <span class=\"token comment\">// --a 先进行自减运算再赋值</span>\n            c <span class=\"token operator\">=</span> <span class=\"token operator\">--</span>a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 7 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Line</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">31</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">11</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">210</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">2</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">1</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">6</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">22</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">7</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">21</span>\n</code></pre>\n<p>c = a++: 先将 a 赋值给 c，再对 a 进行自增运算。<br/> c = ++a: 先将 a 进行自增运算，再将 a 赋值给 c 。<br/> c = a --: 先将 a 赋值给 c，再对 a 进行自减运算。<br/> c = --a: 先将 a 进行自减运算，再将 a 赋值给 c 。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> OperatorsAppl\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// a++ 先赋值再进行自增运算</span>\n            b <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = {0}\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// ++a 先进行自增运算再赋值</span>\n            a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重新初始化 a</span>\n            b <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = {0}\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// a-- 先赋值再进行自减运算</span>\n            a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重新初始化 a</span>\n            b<span class=\"token operator\">=</span> a<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = {0}\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// --a 先进行自减运算再赋值</span>\n            a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重新初始化 a</span>\n            b<span class=\"token operator\">=</span> <span class=\"token operator\">--</span>a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = {0}\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\">a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n</code></pre>\n<h2><a id=\"82__900\"></a>8.2 关系运算符</h2>\n<p>下表显示了 C# 支持的所有关系运算符。假设变量 A 的值为 10，变量 B 的值为 20，则：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201111225547920.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n     \n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n          Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 1 - a 等于 b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n          Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 1 - a 不等于 b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n          Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 2 - a 小于 b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n          Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 2 - a 不小于 b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n          Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 3 - a 大于 b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n          Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 3 - a 不大于 b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">/* 改变 a 和 b 的值 */</span>\n      a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n      b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 4 - a 小于或等于 b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&gt;=</span> a<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 5 - b 大于或等于 a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Line</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> a 不等于 b\n<span class=\"token class-name\">Line</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> a 不小于 b\n<span class=\"token class-name\">Line</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> a 大于 b\n<span class=\"token class-name\">Line</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> a 小于或等于 b\n<span class=\"token class-name\">Line</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> b 大于或等于 a\n</code></pre>\n<h2><a id=\"83__961\"></a>8.3 逻辑运算符</h2>\n<p>下表显示了 C# 支持的所有逻辑运算符。假设变量 A 为布尔值 true，变量 B 为布尔值 false，则：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201111225659378.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> OperatorsAppl\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">bool</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n           \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n               Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 1 - 条件为真\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">||</span> b<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 2 - 条件为真\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/* 改变 a 和 b 的值 */</span>\n            a <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            b <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 3 - 条件为真\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 3 - 条件不为真\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 4 - 条件为真\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Line</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> 条件为真\n<span class=\"token class-name\">Line</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> 条件为真\n<span class=\"token class-name\">Line</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> 条件不为真\n<span class=\"token class-name\">Line</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> 条件为真\n</code></pre>\n<h2><a id=\"84__1013\"></a>8.4 位运算符</h2>\n<p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201111225824805.png\"/><br/> A = 0011 1100</p>\n<p>B = 0000 1101<br/> -----------------------<br/> A&amp;B = 0000 1100</p>\n<p>A|B = 0011 1101</p>\n<p>A^B = 0011 0001</p>\n<p>~A = 1100 0011</p>\n<p>下表列出了 C# 支持的位运算符。假设变量 A 的值为 60，变量 B 的值为 13，则：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201111225943153.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> OperatorsAppl\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* 60 = 0011 1100 */</span>  \n            <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* 13 = 0000 1101 */</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          \n\n             c <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* 12 = 0000 1100 */</span>\n             Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 1 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n             c <span class=\"token operator\">=</span> a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* 61 = 0011 1101 */</span>\n             Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 2 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n             c <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* 49 = 0011 0001 */</span>\n             Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 3 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n             c <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>a<span class=\"token punctuation\">;</span>               <span class=\"token comment\">/*-61 = 1100 0011 */</span>\n             Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 4 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n             c <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 240 = 1111 0000 */</span>\n             Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 5 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n             c <span class=\"token operator\">=</span> a <span class=\"token operator\">&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 15 = 0000 1111 */</span>\n             Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 6 - c 的值是 {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Line</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">12</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">61</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">49</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token operator\">-</span><span class=\"token number\">61</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">240</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">6</span> <span class=\"token operator\">-</span> c 的值是 <span class=\"token number\">15</span>\n</code></pre>\n<h2><a id=\"85__1075\"></a>8.5 赋值运算符</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20201111230058980.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> OperatorsAppl\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 1 - =  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">+</span><span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 2 - += c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">-</span><span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 3 - -=  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">*</span><span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 4 - *=  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">/</span><span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 5 - /=  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">%</span><span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 6 - %=  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 7 - &lt;&lt;=  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">&gt;</span><span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 8 - &gt;&gt;=  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 9 - &amp;=  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">^</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 10 - ^=  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            c <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line 11 - |=  c 的值 = {0}\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Line</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token operator\">=</span>     c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">441</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token operator\">/</span><span class=\"token operator\">=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">6</span> <span class=\"token operator\">-</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">7</span> <span class=\"token operator\">-</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">44</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">8</span> <span class=\"token operator\">-</span> <span class=\"token operator\">&gt;</span><span class=\"token operator\">&gt;=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">9</span> <span class=\"token operator\">-</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token class-name\">Line</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span> <span class=\"token operator\">|</span><span class=\"token operator\">=</span>    c 的值 <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n</code></pre>\n<h2><a id=\"86__1143\"></a>8.6 其他运算符</h2>\n<p>下表列出了 C# 支持的其他一些重要的运算符，包括 <code>sizeof</code>、<code>typeof</code> 和 <code>? :</code>。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201111230254968.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> OperatorsAppl\n<span class=\"token punctuation\">{<!-- --></span>\n   \n   <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n         \n         <span class=\"token comment\">/* sizeof 运算符的实例 */</span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int 的大小是 {0}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"short 的大小是 {0}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"double 的大小是 {0}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         \n         <span class=\"token comment\">/* 三元运算符的实例 */</span>\n         <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n         a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n         b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b 的值是 {0}\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b 的值是 {0}\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">int</span> 的大小是 <span class=\"token number\">4</span>\n<span class=\"token keyword\">short</span> 的大小是 <span class=\"token number\">2</span>\n<span class=\"token keyword\">double</span> 的大小是 <span class=\"token number\">8</span>\nb 的值是 <span class=\"token number\">30</span>\nb 的值是 <span class=\"token number\">20</span>\n</code></pre>\n<h2><a id=\"87_C__1185\"></a>8.7 C# 中的运算符优先级</h2>\n<p>运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。<br/> 例如 x = 7 + 3 * 2，在这里，x 被赋值为 13，而不是 20，因为运算符 * 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。<br/> 下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20201120152910972.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}