{"blogid": "126211111", "writerAge": "码龄1年", "writerBlogNum": "36", "writerCollect": "157", "writerComment": "473", "writerFan": "573", "writerGrade": "4级", "writerIntegral": "1292", "writerName": "~小明学编程", "writerProfileAdress": "writer_image\\profile_126211111.jpg", "writerRankTotal": "14540", "writerRankWeekly": "412", "writerThumb": "396", "writerVisitNum": "106423", "blog_read_count": "17857", "blog_time": "于 2022-08-08 10:00:00 发布", "blog_title": "Java的运算符与逻辑控制", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>作者：~小明学编程 </p>\n<p>文章专栏：JavaSE基础</p>\n<p>目之所及皆为回忆，心之所想皆为过往<br/><img alt=\"在这里插入图片描述\" src=\"image\\d442b31176604cfabe85d69115e07b16.png\"/></p>\n</blockquote>\n<p>由于Java的运算符与C语言的相差不大，在这里主要介绍一下Java运算符的特别之处，就不做详细的介绍了。</p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E8%BF%90%E7%AE%97%E7%AC%A6-toc\" style=\"margin-left:0px;\"><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\">运算符</a></p>\n<p id=\"%E5%9F%BA%E6%9C%AC%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E6%A8%A1(%2B%20-%20*%20%2F%20%25)-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E6%A8%A1%28%2B%20-%20*%20%2F%20%25%29\">基本四则运算符：加减乘除模(+ - * / %)</a></p>\n<p id=\"%E5%A2%9E%E9%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%20%2B%3D%20-%3D%20*%3D%20%25%3D-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A2%9E%E9%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%20%2B%3D%20-%3D%20*%3D%20%25%3D\">增量运算符 += -= *= %=</a></p>\n<p id=\"%C2%A0%E8%87%AA%E5%A2%9E%2F%E8%87%AA%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%20%2B%2B%20---toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E8%87%AA%E5%A2%9E%2F%E8%87%AA%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%20%2B%2B%20--\"> 自增/自减运算符 ++ --</a></p>\n<p id=\"%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\">关系运算符</a></p>\n<p id=\"%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a></p>\n<p id=\"%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97\">位运算符与移位运算</a></p>\n<p id=\"%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6\">条件运算符</a></p>\n<p id=\"%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\">运算符的优先级</a></p>\n<p id=\"%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6\">逻辑控制</a></p>\n<p id=\"%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\">分支结构</a></p>\n<p id=\"if%20%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:80px;\"><a href=\"#if%20%E8%AF%AD%E5%8F%A5\">if 语句</a></p>\n<p id=\"switch%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:80px;\"><a href=\"#switch%E8%AF%AD%E5%8F%A5\">switch语句</a></p>\n<p id=\"%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\">循环结构</a></p>\n<p id=\"%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA-toc\" style=\"margin-left:0px;\"><a href=\"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\">输入输出</a></p>\n<p id=\"%E8%BE%93%E5%87%BA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%BE%93%E5%87%BA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0\">输出到控制台</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E8%BF%90%E7%AE%97%E7%AC%A6\">运算符</h1>\n<h2 id=\"%E5%9F%BA%E6%9C%AC%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E6%A8%A1(%2B%20-%20*%20%2F%20%25)\"><span style=\"color:#333333;\"><strong>基本四则运算符：加减乘除模</strong></span><span style=\"color:#333333;\"><strong>(+ - * / %)</strong></span></h2>\n<p>加减乘除在这里就不讲了，和C语言没啥区别，在这里值得我们说的是取余运算%，在JAVA中</p>\n<p>我们不仅能对整数进行%运算，还能对浮点型进行%运算。</p>\n<pre><code class=\"language-java\">public class Dome {\n    public static void main(String[] args) {\n        int x=4;\n        int y=3;\n        float a=11.5f;\n        float b=1.5f;\n        System.out.println(a%b);\n        System.out.println(x%y);\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"208\" src=\"image\\04b3e77bd69e4c0783e2fc452a2dc27d.png\" width=\"742\"/></p>\n<h2 id=\"%E5%A2%9E%E9%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%20%2B%3D%20-%3D%20*%3D%20%25%3D\"><span style=\"color:#333333;\"><strong>增量运算符 </strong></span><span style=\"color:#333333;\">+= -= *= %=</span></h2>\n<p><img alt=\"\" height=\"313\" src=\"image\\13e61a3787a3400aad3f4c45672b9d19.png\" width=\"651\"/></p>\n<p> 这里我们会看到有报错，这是因为我们事先对b进行了一个整型提升，b+5的类型成为了int型赋给byte型明显放不下，所以会报错，但是b+=5；则不会报错，这是因为我们的增量运算符给b+5做了一个强制类型转换等同于b=(byte)(b+5);</p>\n<pre><code class=\"language-java\">    public static void main(String[] args) {\n        int a=20;\n        a+=10;\n        byte b=5;\n//        b=b+5;错误写法\n        b+=5;//等同于b=(byte)(b+5);\n        System.out.println(a+\" \"+b);\n    }</code></pre>\n<p><img alt=\"\" height=\"635\" src=\"image\\bb4a4a3fc9ae4390a30db6e449603eeb.png\" width=\"1038\"/></p>\n<h2 id=\"%C2%A0%E8%87%AA%E5%A2%9E%2F%E8%87%AA%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%20%2B%2B%20--\"> <span style=\"color:#333333;\"><strong>自增</strong></span><span style=\"color:#333333;\"><strong>/</strong></span><span style=\"color:#333333;\"><strong>自减运算符 </strong></span><span style=\"color:#333333;\">++ -- </span></h2>\n<p>自增自减运算符与C语言一样详见请看<a href=\"http://t.csdn.cn/S5Ml9\" title=\"http://t.csdn.cn/S5Ml9\">http://t.csdn.cn/S5Ml9</a></p>\n<h2 id=\"%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span style=\"color:#333333;\"><strong>关系运算符</strong></span></h2>\n<div>\n<span style=\"color:#333333;\">关系运算符主要有六个</span>\n<span style=\"color:#333333;\">: </span>\n<span style=\"color:#333333;\">== != &lt; &gt; &lt;= &gt;= </span>\n<span style=\"color:#333333;\">，其计算结果是</span>\n<span style=\"color:#333333;\"> true </span>\n<span style=\"color:#333333;\">或者</span>\n<span style=\"color:#333333;\"> false </span>\n<span style=\"color:#333333;\">。</span>\n</div>\n<h2 id=\"%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span style=\"color:#333333;\"><strong>逻辑运算符</strong></span></h2>\n<div>\n<span style=\"color:#333333;\">逻辑运算符主要有三个</span>\n<span style=\"color:#333333;\">: </span>\n<span style=\"color:#333333;\">&amp;&amp; || ! ，运算结果都是</span>\n<span style=\"color:#333333;\"> boolean</span>\n<span style=\"color:#333333;\">类型。</span>\n</div>\n<div></div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">&amp; </span>\n<span style=\"color:#333333;\">和</span>\n<span style=\"color:#333333;\"> | </span>\n<span style=\"color:#333333;\">如果表达式结果为</span>\n<span style=\"color:#333333;\"> boolean </span>\n<span style=\"color:#333333;\">时</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">也表示逻辑运算</span>\n<span style=\"color:#333333;\">. </span>\n<span style=\"color:#333333;\">但与</span>\n<span style=\"color:#333333;\"> &amp;&amp; || </span>\n<span style=\"color:#333333;\">相比</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">它们不支持短路求值</span>\n<span style=\"color:#333333;\">. </span>\n</div>\n<div></div>\n<div>\n 也就是在&amp;运算符中如果我们判断了&amp;左边是假，我们不会停止判断会继续判断右边是否为真，当然即使右边为真也不影响我们最后的结果为假。\n</div>\n<div></div>\n<div>\n<h2 id=\"%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97\"><span style=\"color:#333333;\"><strong>位运算符与移位运算</strong></span></h2>\n<p><a href=\"http://t.csdn.cn/cZoDV\" title=\"http://t.csdn.cn/cZoDV\">http://t.csdn.cn/cZoDV</a>这里是C语言的运算符和JAVA的基本一样，不一样的是移位运算，这里我们主要说一下</p>\n<div>\n<span style=\"color:#333333;\"><strong>无符号右移</strong></span>\n<span style=\"color:#333333;\"><strong> &gt;&gt;&gt;: </strong></span>\n<span style=\"color:#333333;\">最右侧位不要了</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">最左侧补</span>\n<span style=\"color:#333333;\"> 0.</span>\n</div>\n<div></div>\n</div>\n<div>\n<span style=\"color:#333333;\"><strong>注意</strong></span>\n<span style=\"color:#333333;\"><strong>: </strong></span>\n</div>\n<blockquote>\n<div>\n<span style=\"color:#333333;\">1. </span>\n<span style=\"color:#333333;\">左移</span>\n<span style=\"color:#333333;\"> 1 </span>\n<span style=\"color:#333333;\">位</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">相当于原数字</span>\n<span style=\"color:#333333;\"> * 2. </span>\n<span style=\"color:#333333;\">左移</span>\n<span style=\"color:#333333;\"> N </span>\n<span style=\"color:#333333;\">位</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">相当于原数字</span>\n<span style=\"color:#333333;\"> * 2 </span>\n<span style=\"color:#333333;\">的</span>\n<span style=\"color:#333333;\">N</span>\n<span style=\"color:#333333;\">次方</span>\n<span style=\"color:#333333;\">. </span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">2. </span>\n<span style=\"color:#333333;\">右移</span>\n<span style=\"color:#333333;\"> 1 </span>\n<span style=\"color:#333333;\">位</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">相当于原数字</span>\n<span style=\"color:#333333;\"> / 2. </span>\n<span style=\"color:#333333;\">右移</span>\n<span style=\"color:#333333;\"> N </span>\n<span style=\"color:#333333;\">位</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">相当于原数字</span>\n<span style=\"color:#333333;\"> / 2 </span>\n<span style=\"color:#333333;\">的</span>\n<span style=\"color:#333333;\">N</span>\n<span style=\"color:#333333;\">次方</span>\n<span style=\"color:#333333;\">. </span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">3. </span>\n<span style=\"color:#333333;\">由于计算机计算移位效率高于计算乘除</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">当某个代码正好乘除</span>\n<span style=\"color:#333333;\"> 2 </span>\n<span style=\"color:#333333;\">的</span>\n<span style=\"color:#333333;\">N</span>\n<span style=\"color:#333333;\">次方的时候可以用移位运算代替</span>\n<span style=\"color:#333333;\">. </span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">4. </span>\n<span style=\"color:#333333;\">移动负数位或者移位位数过大都没有意义</span>\n<span style=\"color:#333333;\">. </span>\n</div>\n</blockquote>\n<h2 id=\"%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6\"><span style=\"color:#333333;\"><strong>条件运算符 </strong></span></h2>\n<div>\n<span style=\"color:#333333;\">条件运算符只有一个</span>\n<span style=\"color:#333333;\">: </span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">表达式</span>\n<span style=\"color:#333333;\">1 ? </span>\n<span style=\"color:#333333;\">表达式</span>\n<span style=\"color:#333333;\">2 : </span>\n<span style=\"color:#333333;\">表达式</span>\n<span style=\"color:#333333;\">3 </span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">当 </span>\n<span style=\"color:#333333;\">表达式</span>\n<span style=\"color:#333333;\">1 </span>\n<span style=\"color:#333333;\">的值为</span>\n<span style=\"color:#333333;\"> true </span>\n<span style=\"color:#333333;\">时</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">整个表达式的值为 </span>\n<span style=\"color:#333333;\">表达式</span>\n<span style=\"color:#333333;\">2 </span>\n<span style=\"color:#333333;\">的值</span>\n<span style=\"color:#333333;\">; </span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">当 </span>\n<span style=\"color:#333333;\">表达式</span>\n<span style=\"color:#333333;\">1 </span>\n<span style=\"color:#333333;\">的值为</span>\n<span style=\"color:#333333;\"> false </span>\n<span style=\"color:#333333;\">时</span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">整个表达式的值为 </span>\n<span style=\"color:#333333;\">表达式</span>\n<span style=\"color:#333333;\">3 </span>\n<span style=\"color:#333333;\">的值</span>\n<span style=\"color:#333333;\">. </span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#333333;\">也是</span>\n<span style=\"color:#333333;\"> Java </span>\n<span style=\"color:#333333;\">中唯一的一个 </span>\n<span style=\"color:#333333;\"><strong>三目运算符</strong></span>\n<span style=\"color:#333333;\">, </span>\n<span style=\"color:#333333;\">是条件判断语句的简化写法</span>\n</div>\n<p></p>\n<h2 id=\"%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\">运算符的优先级</h2>\n<div>\n<span style=\"color:#333333;\">运算符之间是有</span>\n<span style=\"color:#333333;\"><strong>优先级</strong></span>\n<span style=\"color:#333333;\">的</span>\n<span style=\"color:#333333;\">. </span>\n<span style=\"color:#333333;\">具体的规则我们</span>\n<span style=\"color:#333333;\"><strong>不必记忆</strong></span>\n<span style=\"color:#333333;\">. </span>\n<span style=\"color:#333333;\">在可能存在歧义的代码中加上括号即可</span>\n</div>\n<p></p>\n<h1 id=\"%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6\">逻辑控制</h1>\n<h2 id=\"%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span style=\"color:#333333;\"><strong>分支结构 </strong></span></h2>\n<h3 id=\"if%20%E8%AF%AD%E5%8F%A5\"><span style=\"color:#333333;\"><strong>if </strong></span><span style=\"color:#333333;\"><strong>语句 </strong></span></h3>\n<pre><code class=\"language-java\">if(布尔表达式){\n\n // 语句 \n\n}</code></pre>\n<p>这里我们需要强调的是if后面的括号里面必须是布尔表达式，这与C语言是不同的，不能将一个整型变量放到里面进行判断。</p>\n<h3 id=\"switch%E8%AF%AD%E5%8F%A5\">switch语句</h3>\n<p>这里我们重点讲解一下Java的switch语句</p>\n<div>\n<span style=\"color:#f3f3f4;\"><span style=\"background-color:#fe2c24;\">1.多个case后的常量值不可以重复 </span></span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#f3f3f4;\"><span style=\"background-color:#fe2c24;\">2.switch的括号内只能是以下类型的表达式： </span></span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#f3f3f4;\"><span style=\"background-color:#fe2c24;\">基本类型：byte、char、short、int，注意不能是long类型 </span></span>\n</div>\n<div></div>\n<div>\n<span style=\"color:#f3f3f4;\"><span style=\"background-color:#fe2c24;\">引用类型：String常量串、枚举类型</span></span>\n</div>\n<p></p>\n<h2 id=\"%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span style=\"color:#333333;\"><strong>循环结构</strong></span></h2>\n<p><span style=\"color:#333333;\"><strong>循环结构与C语言唯一出入还是括号内必须放布尔表达式，主要是多多练习</strong></span></p>\n<h1 id=\"%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"><span style=\"color:#333333;\"><strong>输入输出</strong></span></h1>\n<h2 id=\"%E8%BE%93%E5%87%BA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0\"><span style=\"color:#333333;\"><strong>输出到控制台</strong></span></h2>\n<div>\n<span style=\"color:#333333;\"><strong>基本语法</strong></span>\n</div>\n<div>\n   \n <div>\n<pre><code class=\"language-java\">System.out.println(msg); // 输出一个字符串, 带换行\nSystem.out.print(msg); // 输出一个字符串, 不带换行\nSystem.out.printf(format, msg); // 格式化输出</code></pre>\n<div>\n<pre><code class=\"language-java\">int x = 10;\nSystem.out.printf(\"x = %d\\n\", x);\n\n\n</code></pre>\n<div>\n<img alt=\"\" height=\"799\" src=\"image\\ac647b1214b5451bbe60f74cda9a3776.png\" width=\"1200\"/>\n</div>\n<p> </p>\n</div>\n</div>\n</div>\n<div>\n<span style=\"color:#333333;\"><strong>从键盘输入</strong></span>\n</div>\n<div></div>\n<div>\n<div>\n<span style=\"color:#333333;\"><strong>使用</strong></span>\n<span style=\"color:#333333;\"><strong> Scanner </strong></span>\n<span style=\"color:#333333;\"><strong>读取字符串</strong></span>\n<span style=\"color:#333333;\"><strong>/</strong></span>\n<span style=\"color:#333333;\"><strong>整数</strong></span>\n<span style=\"color:#333333;\"><strong>/</strong></span>\n<span style=\"color:#333333;\"><strong>浮点数</strong></span>\n</div>\n<div></div>\n<div>\n<div>\n<pre><code class=\"language-java\">    import java.util.Scanner; // 需要导入 util 包\n    Scanner sc = new Scanner(System.in);\n    System.out.println(\"请输入你的姓名：\");\n    String name = sc.nextLine();\n    System.out.println(\"请输入你的年龄：\");\n    int age = sc.nextInt();\n    System.out.println(\"请输入你的工资：\");\n    flfloat salary = sc.nextFloat();\n    System.out.println(\"你的信息如下：\");\n    System.out.println(\"姓名: \"+name+\"\\n\"+\"年龄：\"+age+\"\\n\"+\"工资：\"+salary);\n    sc.close(); // 注意, 要记得调用关闭方法</code></pre>\n<p></p>\n<pre><code class=\"language-java\">public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int a= scanner.nextInt();\n        String str = scanner.nextLine();\n        System.out.println(str);\n        System.out.println(a);\n        if (a%2==0)\n            System.out.println(\"偶数\");\n        else\n            System.out.println(\"奇数\");\n\n    }</code></pre>\n<p><img alt=\"\" height=\"206\" src=\"image\\d63d91d9587c4eaa9b32fc4e736ccc71.png\" width=\"525\"/></p>\n<p> 我们可以看到我们还没有输入字符程序就直接进行下去把我们的数字给打印下来了，这是BUG当我们的数字输入在字符串前面的时候程序会直接向下运行，不给我们接受字符串的机会，要想接受字符串只有将str的接受放在a 的前面才行。</p>\n</div>\n</div>\n</div>\n<p></p>\n</div>\n</div>"}