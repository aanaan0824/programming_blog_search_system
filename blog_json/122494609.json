{"blogid": "122494609", "writerAge": "码龄2年", "writerBlogNum": "80", "writerCollect": "239", "writerComment": "77", "writerFan": "48", "writerGrade": "4级", "writerIntegral": "1060", "writerName": "野奔在山外的猫", "writerProfileAdress": "writer_image\\profile_122494609.jpg", "writerRankTotal": "19558", "writerRankWeekly": "173071", "writerThumb": "57", "writerVisitNum": "113377", "blog_read_count": "5675", "blog_time": "已于 2022-04-26 21:30:12 修改", "blog_title": "【解决】SerializedObjectNotCreatableException: Object at index 0 is null", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>开发平台：Unity<br/> 编程平台：Visual Studio 2017以上<br/> 使用语言：C#<br/>  </p>\n<h2><a id=\"_4\"></a>问题描述</h2>\n<p>  SerializedObjectNotCreatableException: Object at index 0 is null<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6b51270a979e4273953ef5a99e0f971f.png\"/><br/>  </p>\n<h2><a id=\"_8\"></a>问题剖析</h2>\n<h3><a id=\"_9\"></a>问题情况一：</h3>\n<ul><li>该问题报错以为程序序列化过程中出现空值无法处理与赋值造成的。<br/> 具体案例如下：</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"X轴向最大数\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxXCount <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"X轴向文本内容\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> xCount<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    xCount <span class=\"token operator\">=</span> EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X轴大小\"</span><span class=\"token punctuation\">,</span> xCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxXCount <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>xCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>  这是一个拓展编辑器脚本的部分代码内容。其中<code>EditorGUILayout.TextField(Title, String)</code>用于在<code>EditorWindow</code>上绘制文本输入框。【可参考继承<code>Monobehaviour</code>的<code>public string str;</code>在<strong>Inspector</strong>下的公开】。脚本经历一下步骤：</p>\n<ul><li>建立 TextField 窗口</li><li>将 TextFiled 文本内容转换为 Int 数据类型并存储于<code>maxXCount</code>中</li></ul>\n<p>  值得注意的是，<code>OnGUI()</code>是固定时间刷新EditorWindow上的数值。在初次打开<code>EditorWindow</code>面板时，TextField 窗口内的数据时为空（<code>string.Empyty</code>），对这种数据无法使用<code>Convert.ToInt32()</code>进行转换。</p>\n<hr/>\n<h3><a id=\"_30\"></a>问题情况二：</h3>\n<p>这是通过<code>System.Reflection</code>反射获取的UnityEditor关于Transform组件的内容的程序段，目的在于修改/拓展原生Transform组件信息。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnEnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n      _Editor <span class=\"token operator\">=</span> <span class=\"token function\">CreateEditor</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetAssembly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Editor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UnityEditor.TransformInspector\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>【错误】<s>其中关于 <code>GetAssembly().GetType()</code>中的<code>flase</code>为禁用 throw On Error，即抛出异常问题。很神奇/幸运 的是这类异常报错有时候并不影响工具的运行，对整个项目不会产生坏影响。对这类由Unity底层设计出现的错误，仅设置<code>flase</code>即可规避问题</s> 。</p>\n<hr/>\n<p>【推测】<s>根据Unity生命周期，Editor的激活调用在OnReset。而OnInspectorGUI()位于OnReset - OnEnable之后，然后反复调用OnInspectorGUI。在调用扩展编辑器上仅出现一次关于此类的报错。但出现一个问题 OnInspectorGUI结束后再次重复调用。唯一需要确认的时CreatSerializedObject()方法是如何？</s></p>\n<hr/>\n<p><font color=\"green\">【更新】</font><code>Editor.CreateEditor()</code>用于创建自定义编辑器扩展。其解释需要<code>Target</code>与<code>Type</code>两个参数。</p>\n<ul><li><code>Target</code>：源于继承的<code>Editor</code>提供。</li><li><code>Type</code>：通过反射获取。而正是因为这个参数导致 SerializedObject Not CreatableException 的<strong>最终原因</strong>。</li></ul>\n<p>  在<code>Editor.CreateEditor()</code>方法中，解释无指明<strong>Editor Type</strong>类型情况下，返回为<code>Editor</code>对象为<code>NULL</code>。查阅反射文章，对电脑性能要求极高，同时开销极大。则是否可以理解当执行下列代码段：</p>\n<pre><code class=\"prism language-csharp\">Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetAssembly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Editor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UnityEditor.TransformInspector\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>  获取<strong>Transform Type</strong>类型这一过程在极短的计算机时间内并没有完成对<strong>Type</strong>类型的赋值。于是，在每一次的切换Inspector窗口所对应的对象，其Inspector会销毁与创建新的组件对象。即使出现此类报错，也仅是偶然或一段时间。但组件扩展依旧正常运行。</p>\n<p>  原理可参考<code>UnityWebRequest</code>，直接访问服务器，可能出现【正在连接中】，而非【连接成功】。所以搭配协程<code>IEnumerator</code>进行<code>Yeild return request.SendWebRequest();</code>直到确认到服务器连接后进行。<br/>  </p>\n<h2><a id=\"_57\"></a>解决方案：</h2>\n<h3><a id=\"_58\"></a>一、直接解决（根据实际逻辑情况处理，不一定有效解决）</h3>\n<p>  检查代码是否出现类似赋值于转置情况。预先赋值。例如：在 <code>xCount = EditorGUILayout.TextField(\"X轴大小\", xCount);</code>前添加 <code>xCount = maxXCount.ToString();</code>进行赋值。</p>\n<h3><a id=\"_61\"></a>二、替换代码逻辑思路（同上）</h3>\n<p>  修改<code>EditorGUILayout.TextField(Title, String)</code>为<code>EditorGUILayout.TextField(String)</code>或如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxXCount <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxXCount<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>备注：该方法在<code>EditorWindow</code>上可使用，但无法添加文本标题。仅使用<code>GUILayout.Label(Title)</code>来完成排版。对排版界面上友强迫性的人不会很友好。</p>\n<h3><a id=\"font_colorgreenfont_67\"></a>三、关于问题二的解决方法<font color=\"green\">【更新】</font></h3>\n<ol><li>使用类同<code>IEnumerator</code>的优先获取Type，直到反射过程完成后，再进行创建<code>Editor</code>。<br/> 注意：因为是面向Editor模式下的编辑器扩展，<strong>据笔者理解情报Editor模式下无法使用协程。</strong><br/> 弊端：受限制计算机性能差异，每次打开Inspector窗口，会不稳定的出现Transform组件（扩展版）。</li><li>使用<code>DrawDefaultInspector()</code>替代<code>base.OnInspectorGUI();</code>。扩展Transform组件并不对原组件进行修改重设计。该方法适用于基于原组件界面基础上添加额外的Button等小部件。因而在<code>Awake/OnEnable</code>阶段的<code>Editor</code>创建及相关属性可删除（未使用）。</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}