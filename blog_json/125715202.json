{"blogid": "125715202", "writerAge": "码龄9年", "writerBlogNum": "129", "writerCollect": "3331", "writerComment": "3783", "writerFan": "13673", "writerGrade": "7级", "writerIntegral": "10422", "writerName": "半身风雪", "writerProfileAdress": "writer_image\\profile_125715202.jpg", "writerRankTotal": "1251", "writerRankWeekly": "38", "writerThumb": "3377", "writerVisitNum": "149390", "blog_read_count": "968", "blog_time": "于 2022-07-11 10:59:03 发布", "blog_title": "【Kubernetes 系列】如何优雅的配置 Java 微服务", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>作者：<a href=\"https://blog.csdn.net/u010755471\">半身风雪</a><br/> 上一节：<a href=\"http://t.csdn.cn/o2UPI\">一文学会Kubernetes Service安全的暴露应用</a><br/> 内容简介：上一节主要学习了 service 模块，及它的关联标签，还有 service 如何将集群暴露给外部。本节我们会学到如何以及为什么要实现外部化微服务应用配置。 具体来说，你将学习如何使用 Kubernetes ConfigMaps 和 Secrets 设置环境变量， 然后在 MicroProfile config 中使用它们。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3ef05a853941404cb82d8692aa87683e.png\"/></p>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>配置 Java 微服务</h3>\n<ul><li><a href=\"#_13\">目标</a></li><li><a href=\"#_22\">一、实现外部化应用配置</a></li><li><ul><li><a href=\"#11_Kubernetes_ConfigMaps__Secrets_26\">1.1、创建 Kubernetes ConfigMaps 和 Secrets</a></li><li><a href=\"#12_32\">1.2、外部化配置</a></li></ul>\n</li><li><a href=\"#Java__38\">二、Java 微服务实战部署</a></li><li><ul><li><a href=\"#21kubectl_44\">2.1、验证kubectl</a></li><li><a href=\"#22_55\">2.2、进入项目目录</a></li><li><a href=\"#23Maven_64\">2.3、Maven构建应用</a></li><li><a href=\"#24Kubernetes_82\">2.4、部署到Kubernetes</a></li></ul>\n</li><li><a href=\"#_91\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_13\"></a>目标</h1>\n<ul><li>创建 Kubernetes ConfigMap 和 Secret</li><li>使用 MicroProfile Config 注入微服务配置</li></ul>\n<hr/>\n<h1><a id=\"_22\"></a>一、实现外部化应用配置</h1>\n<p>在 Kubernetes 中，为 docker 容器设置环境变量有几种不同的方式，比如： <strong>Dockerfile、kubernetes.yml、Kubernetes ConfigMaps、和 Kubernetes Secrets</strong>。本节课程主要讲解怎么用后两个方式去设置你的环境变量，而环境变量的值将注入到你的微服务里。 使用 <strong>ConfigMaps</strong> 和 <strong>Secrets</strong> 的一个好处是他们能在多个容器间复用， 比如赋值给不同的容器中的不同环境变量。</p>\n<h2><a id=\"11_Kubernetes_ConfigMaps__Secrets_26\"></a>1.1、创建 Kubernetes ConfigMaps 和 Secrets</h2>\n<p><strong>ConfigMaps</strong> 是存储非机密键值对的 API 对象。 <strong>ConfigMap API</strong> 本节不做过多的解释，现在你只需要认识它，知道它能够做什么就可以了，我们将在下节文章里面，会做一个详细的解释，本节我们会学习如何用 <strong>ConfigMap</strong> 来保存应用名字。</p>\n<p><strong>Secrets</strong> 尽管也用来存储键值对，但区别于 <strong>ConfigMaps</strong> 的是：它针对机密/敏感数据，且存储格式为 Base64 编码。 <strong>secrets</strong> 的这种特性使得它适合于存储证书、密钥、令牌。</p>\n<h2><a id=\"12_32\"></a>1.2、外部化配置</h2>\n<p>外部化应用配置之所以有用处，是因为配置常常根据环境的不同而变化。 为了实现此功能，我们用到了 Java 上下文和依赖注入<code>（Contexts and Dependency Injection, CDI）、MicroProfile 配置。 MicroProfile config</code> 是 <strong>MicroProfile</strong> 的功能特性， 是<strong>一组开放 Java 技术，用于开发、部署云原生微服务</strong>。</p>\n<p>CDI 提供一套标准的依赖注入能力，使得应用程序可以由相互协作的、松耦合的 beans 组装而成。 MicroProfile Config 为 app 和微服务提供从各种来源，比如应用、运行时、环境，获取配置参数的标准方法。 基于来源定义的优先级，属性可以自动的合并到单独一组应用可以通过 API 访问到的属性。 CDI &amp; MicroProfile 都会被用在互动教程中， 用来从 Kubernetes ConfigMaps 和 Secrets 获得外部提供的属性，并注入应用程序代码中。</p>\n<h1><a id=\"Java__38\"></a>二、Java 微服务实战部署</h1>\n<p>本章节我们会部署两个Java微服务到Kubernetes，并使用MicroProfile Config、Kubernetes ConfigMaps和Secrets更改它们的配置。</p>\n<p>首先，确保我们的Kubernetes环境已经设置好。一旦终端完成消息输出并准备好输入，就应该开始设置了。</p>\n<h2><a id=\"21kubectl_44\"></a>2.1、验证kubectl</h2>\n<p>执行<code>kubectl version</code>命令确认已准备就绪:</p>\n<pre><code class=\"prism language-yaml\">$ kubectl version\n<span class=\"token key atrule\">Client Version</span><span class=\"token punctuation\">:</span> version.Info<span class=\"token punctuation\">{<!-- --></span>Major<span class=\"token punctuation\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> Minor<span class=\"token punctuation\">:</span><span class=\"token string\">\"20\"</span><span class=\"token punctuation\">,</span> GitVersion<span class=\"token punctuation\">:</span><span class=\"token string\">\"v1.20.4\"</span><span class=\"token punctuation\">,</span> GitCommit<span class=\"token punctuation\">:</span><span class=\"token string\">\"e87da0bd6e03ec3fea7933c4b5263d151aafd07c\"</span><span class=\"token punctuation\">,</span> GitTreeState<span class=\"token punctuation\">:</span><span class=\"token string\">\"clean\"</span><span class=\"token punctuation\">,</span> BuildDate<span class=\"token punctuation\">:</span><span class=\"token string\">\"2021-02-18T16:12:00Z\"</span><span class=\"token punctuation\">,</span> GoVersion<span class=\"token punctuation\">:</span><span class=\"token string\">\"go1.15.8\"</span><span class=\"token punctuation\">,</span> Compiler<span class=\"token punctuation\">:</span><span class=\"token string\">\"gc\"</span><span class=\"token punctuation\">,</span> Platform<span class=\"token punctuation\">:</span><span class=\"token string\">\"linux/amd64\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token key atrule\">Server Version</span><span class=\"token punctuation\">:</span> version.Info<span class=\"token punctuation\">{<!-- --></span>Major<span class=\"token punctuation\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> Minor<span class=\"token punctuation\">:</span><span class=\"token string\">\"20\"</span><span class=\"token punctuation\">,</span> GitVersion<span class=\"token punctuation\">:</span><span class=\"token string\">\"v1.20.2\"</span><span class=\"token punctuation\">,</span> GitCommit<span class=\"token punctuation\">:</span><span class=\"token string\">\"faecb196815e248d3ecfb03c680a4507229c2a56\"</span><span class=\"token punctuation\">,</span> GitTreeState<span class=\"token punctuation\">:</span><span class=\"token string\">\"clean\"</span><span class=\"token punctuation\">,</span> BuildDate<span class=\"token punctuation\">:</span><span class=\"token string\">\"2021-01-13T13:20:00Z\"</span><span class=\"token punctuation\">,</span> GoVersion<span class=\"token punctuation\">:</span><span class=\"token string\">\"go1.15.5\"</span><span class=\"token punctuation\">,</span> Compiler<span class=\"token punctuation\">:</span><span class=\"token string\">\"gc\"</span><span class=\"token punctuation\">,</span> Platform<span class=\"token punctuation\">:</span><span class=\"token string\">\"linux/amd64\"</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>现在应该看到kubectl 虚拟端和服务器的版本。如果是这样，环境就已经设置好了。如果没有看到Kubernetes服务器的版本，请稍等片刻，然后重复前面的命令，直到显示出来。</p>\n<h2><a id=\"22_55\"></a>2.2、进入项目目录</h2>\n<p>执行<code>cd sample-kubernetes-config/start/</code> 命令进入项目目录。它包含MicroProfile微服务的实现、MicroProfile运行时的配置和Kubernetes配置。</p>\n<pre><code class=\"prism language-powershell\">$ cd sample-kubernetes-config/<span class=\"token function\">start</span><span class=\"token operator\">/</span>\n</code></pre>\n<p>你会看到一个 <code>finish</code> 目录，我们将部署的两个微服务被称为“<strong>system</strong>”和“<strong>inventory</strong>”。系统微服务返回运行它的容器的JVM属性。目录微服务将来自系统微服务的属性添加到目录中。这里说明了如何在Kubernetes集群中独立的两个微服务之间实现通信。</p>\n<h2><a id=\"23Maven_64\"></a>2.3、Maven构建应用</h2>\n<p>要用Maven构建应用程序，依次运行以下命令:</p>\n<pre><code class=\"prism language-powershell\">$ mvn package <span class=\"token operator\">-</span>pl system    \n</code></pre>\n<p>这里将会输出很多的信息，我只截取部分，以作演示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b03dd27fda3a49ba9dae59e5ba080ac5.png\"/></p>\n<pre><code class=\"prism language-powershell\">$ mvn package <span class=\"token operator\">-</span>pl inventory\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4611c3415e1941edbce8fb06b899b675.png\"/></p>\n<p>如图所示，现在我们分别构建了系统，库存两个微服务。</p>\n<h2><a id=\"24Kubernetes_82\"></a>2.4、部署到Kubernetes</h2>\n<p>现在，我们需要将它们部署到Kubernetes。执行 <code>kubectl apply -f kubernetes.yaml</code> 命令，完成部署：</p>\n<pre><code class=\"prism language-powershell\">$ kubectl apply <span class=\"token operator\">-</span>f kubernetes<span class=\"token punctuation\">.</span>yaml\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\07cbb337afe1448bae96b8b091ce1c27.png\"/></p>\n<h1><a id=\"_91\"></a>总结</h1>\n<p>通过本节文章，我们已经学会了如何配置Java 微服务，也学习了在创建系统，库存等微服务的相关命令行。当然，在文中关于<strong>ConfigMap API</strong>的详细，我将在下一篇带领大家一起学习。关于Kubernetes清单的信息，我们可以查看之前的文章，<a href=\"http://t.csdn.cn/vMuru\">【Kubernetes 系列】 一文带你吃透 K8S 中Pod 的生命周期</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}