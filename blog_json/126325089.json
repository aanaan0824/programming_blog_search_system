{"blogid": "126325089", "writerAge": "码龄10年", "writerBlogNum": "42", "writerCollect": "7", "writerComment": "4", "writerFan": "2", "writerGrade": "3级", "writerIntegral": "486", "writerName": "Three Big Stones", "writerProfileAdress": "writer_image\\profile_126325089.jpg", "writerRankTotal": "38453", "writerRankWeekly": "12564", "writerThumb": "2", "writerVisitNum": "12073", "blog_read_count": "1021", "blog_time": "于 2022-08-13 22:27:13 发布", "blog_title": "C#使用WebSocket与网页实时通信", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>目的：使用Fleck框架实现网页与服务端实时通信</p>\n<p>传统的网站采用http方式与服务端通信，属于请求响应模式，如何让网页与服务器之间能使用TCP这种双向通信方式实时交流，答案就是使用WebSocket技术。</p>\n<p>Fleck框架的安装方式：</p>\n<p>1、使用NuGet包管理工具安装</p>\n<p>Install-Package Fleck -Version 1.2.0</p>\n<p>2、下载Fleck源码并编译程序集供服务端引用</p>\n<p>github地址：<a href=\"https://github.com/statianzo/Fleck/archive/refs/heads/master.zip\" title=\"https://github.com/statianzo/Fleck/archive/refs/heads/master.zip\">https://github.com/statianzo/Fleck/archive/refs/heads/master.zip</a></p>\n<p>gitee地址：<a href=\"https://gitee.com/mylikekefu/Fleck/repository/archive/master.zip\" title=\"https://gitee.com/mylikekefu/Fleck/repository/archive/master.zip\">https://gitee.com/mylikekefu/Fleck/repository/archive/master.zip</a></p>\n<p>直接在VS中打开项目，并生成fleck项目程序集</p>\n<p>3、新建WebSocket服务端项目，命名WebSocketConsoleApp</p>\n<p>4、引用程序集Fleck.dll</p>\n<p>5、程序入口类编写服务端代码，如下所示：</p>\n<pre><code class=\"language-cs\">        static void Main(string[] args)\n        {\n            FleckLog.Level = LogLevel.Debug;\n            var allSockets = new List&lt;IWebSocketConnection&gt;();\n            var server = new WebSocketServer(\"ws://192.168.3.3:50000\");\n            server.Start(socket =&gt; {\n            //客户端连接上服务端，则在socket列表添加一个客户端\n            socket.OnOpen = () =&gt; {\n                Console.WriteLine(\"Open!\");\n                allSockets.Add(socket);\n            };\n            //客户端离线，则从socket列表删除这个客户端\n            socket.OnClose = () =&gt; {\n                Console.WriteLine(\"Close!\");\n                allSockets.Remove(socket);\n            };\n            socket.OnMessage = message =&gt; {\n                Console.WriteLine(message);\n                //给发送消息的客户端回复一条消息\n                socket.Send(\"Echo:\" + message);\n            });\n\n            var input = Console.ReadLine();\n            //给所有客户端发送消息\n            while(input!=\"exit\")\n            {\n                foreach (var socket in allSockets.ToList())\n                {\n                    socket.Send(input);\n                }\n                input = Console.ReadLine();\n            }\n        }</code></pre>\n<p>6、启动项目，打印如下信息，服务端启动成功。</p>\n<p><img alt=\"\" height=\"101\" src=\"image\\e202ed9ed42e4ef6bc195e295c429f80.png\" width=\"827\"/></p>\n<p>7、新建客户端，使用浏览器F12控制台模拟websocket客户端，代码如下所示：</p>\n<pre><code class=\"language-javascript\">ws = new WebSocket(\"ws://192.168.3.3:50000\");\nws.onopen = function() { \n    ws.send('websocekt测试'); \n};\nws.onmessage = function(e) {\n    alert(\"收到服务端的消息：\" + e.data);\n};</code></pre>\n<p>打开两个浏览器页面，分别F12，控制台中输入以上代码，表示新建了两个客户端，将会分别收到服务端回复的消息。</p>\n<p><img alt=\"\" height=\"678\" src=\"image\\c6c50dae51da44859ead75f553e9544a.png\" width=\"1200\"/></p>\n<p>在其中一个客户端输入代码：ws.send('xtt');发现只有这个客户端收到了回复的消息。</p>\n<p>查看服务端打印情况如下所示：</p>\n<p><img alt=\"\" height=\"549\" src=\"image\\74f04c85cc4f4e7894b7caaf84254e70.png\" width=\"843\"/></p>\n</div>\n</div>"}