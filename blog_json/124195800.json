{"blogid": "124195800", "writerAge": "码龄4年", "writerBlogNum": "336", "writerCollect": "9462", "writerComment": "583", "writerFan": "12799", "writerGrade": "7级", "writerIntegral": "9950", "writerName": "wendy_ya", "writerProfileAdress": "writer_image\\profile_124195800.jpg", "writerRankTotal": "2010", "writerRankWeekly": "808", "writerThumb": "2092", "writerVisitNum": "1231147", "blog_read_count": "2144", "blog_time": "已于 2022-04-16 16:08:13 修改", "blog_title": "Qt实战案例（42）——利用Qt实现自定义标题栏功能（自定义最大化、最小化、关闭等功能）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#_3\">一、项目介绍（为什么要自自定义标题栏功能）</a></li><li><a href=\"#_11\">二、项目基本配置</a></li><li><a href=\"#UI_14\">三、UI界面设计</a></li><li><a href=\"#_23\">四、主程序实现</a></li><li><ul><li><a href=\"#41__24\">4.1 隐藏边框</a></li><li><a href=\"#42__41\">4.2 设置最大化（还原），最小化，关闭按钮的样式风格</a></li><li><a href=\"#43__55\">4.3 关闭按钮的实现</a></li><li><a href=\"#44__65\">4.4 最大化（还原）按钮的实现</a></li><li><a href=\"#45__85\">4.5 最小化按钮的实现</a></li><li><a href=\"#46__95\">4.6 实现界面移动</a></li></ul>\n</li><li><a href=\"#_148\">五、效果演示</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_3\"></a>一、项目介绍（为什么要自自定义标题栏功能）</h2>\n<p>无论是使用qtdesigner，还是直接在程序中创建一个Qwidget，qt程序生成的界面都会生成一个默认的标题栏。<br/> 该标题栏实质上应当是一个边框，只不过这个边框上可以显示ico，标题，可以进行最大化最小化等操作。<br/> 标题栏的颜色随计算机系统的主题变化，且形式固定，如果为界面设置统一的背景和风格，这个标题栏就会非常的突兀，丑陋。<strong>因此，如果想要获得一个和谐的统一的UI界面，我们最好把系统生成的默认标题栏去掉，自己重现默认标题栏附带的功能。</strong></p>\n<ul><li>默认标题栏，在统一背景下显得很突兀</li><li>自定义标题栏，可以自己设计按键的大小，图标，位置，能够和背景更加统一<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2247e5c6fc1b464ea0537d6253e20c6b.png\"/></li></ul>\n<h2><a id=\"_11\"></a>二、项目基本配置</h2>\n<p>新建一个Qt案例，项目名称为“UITest”，基类选择“QWidget”，点击选中创建UI界面复选框，完成项目创建。</p>\n<h2><a id=\"UI_14\"></a>三、UI界面设计</h2>\n<p>UI界面布局如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\13db4cd6207149fa9e13c3c3691a0ba9.png\"/><br/> 在UI界面中分别添加三个toolbutton按钮：</p>\n<table><thead><tr><th>序号</th><th>名称</th><th>类型</th><th>属性</th></tr></thead><tbody><tr><td>①</td><td>tbn_close</td><td>QToolButton</td><td>\\</td></tr><tr><td>②</td><td>tbn_max</td><td>QToolButton</td><td>\\</td></tr><tr><td>③</td><td>tbn_min</td><td>QToolButton</td><td>\\</td></tr></tbody></table>\n<h2><a id=\"_23\"></a>四、主程序实现</h2>\n<h3><a id=\"41__24\"></a>4.1 隐藏边框</h3>\n<p>QT编程中使用以下语句可以去除系统自动生成的默认边框。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">setWindowFlags</span><span class=\"token punctuation\">(</span>Qt<span class=\"token operator\">::</span>FramelessWindowHint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//隐藏边框 </span>\n</code></pre>\n<p>通过修改setWindowFlags的输入，我们还可以将边框修改成特殊的样式，比如只带一个关闭按钮。<br/> Qt::FramelessWindowHint用于生成无边界窗口。用户无法通过窗口系统移动或调整无边框窗口的大小。</p>\n<p>由于标题栏的本质是一个边框，或者说一个group，这个边框作为限制，UI内容嵌套在边框里，而边框则“悬浮”在桌面上，因此去掉标题栏后会存在如下问题：</p>\n<ol><li>因此，去除边框后，首当其冲，<strong>UI界面会因为失去边框丢失调整大小的能力，表现出来的就是鼠标无法选中界面的边缘，达到拖动边缘改变大小的目的。</strong></li><li>因为改变界面在桌面上的位置原本由边框实现，去除边框后，<strong>UI与桌面不存在明确的布局关系，界面内容将无法移动。</strong></li><li>原本程序的最大化（还原），最小化，关闭等功能由标题栏的按钮实现，去除标题栏后，<strong>该类操作界面的方式就会消失</strong>，不过我们仍可以通过底部状态栏右键操作界面。</li></ol>\n<p><code>总结而言，去除标题栏后，我们将无法通过按钮对界面进行最大化（还原），最小化，关闭等操作，无法拖动界面，也无法改变界面的大小，而这些也将是我们后续亟待实现的功能。</code></p>\n<h3><a id=\"42__41\"></a>4.2 设置最大化（还原），最小化，关闭按钮的样式风格</h3>\n<p>首先，设置按钮样式：</p>\n<pre><code class=\"prism language-cpp\">    ui<span class=\"token operator\">-&gt;</span>tbn_close<span class=\"token operator\">-&gt;</span><span class=\"token function\">setIcon</span><span class=\"token punctuation\">(</span><span class=\"token function\">QIcon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/img/close.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ui<span class=\"token operator\">-&gt;</span>tbn_max<span class=\"token operator\">-&gt;</span><span class=\"token function\">setIcon</span><span class=\"token punctuation\">(</span><span class=\"token function\">QIcon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/img/max.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ui<span class=\"token operator\">-&gt;</span>tbn_min<span class=\"token operator\">-&gt;</span><span class=\"token function\">setIcon</span><span class=\"token punctuation\">(</span><span class=\"token function\">QIcon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/img/min.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>绘制或找到符合自己界面风格的各按钮标志，并提前添加到QT的素材文件（.qrc）里，然后在程序中调用相应图片：</p>\n<pre><code class=\"prism language-cpp\">    <span class=\"token comment\">//设置样式表(默认背景颜色、悬停时背景颜色、按下时背景颜色)</span>\n    <span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QToolButton{background-color:rgba(0,0,0,0);}QToolButton:hover{background-color:rgba(255,255,255,0.5);}QToolButton:pressed{background-color: rgba(100,100,100,1);}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"43__55\"></a>4.3 关闭按钮的实现</h3>\n<p>要实现关闭操作，只需要在关闭按钮clicked槽函数下调用QT默认的close事件即可：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//close</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">on_tbn_close_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//关闭事件</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"44__65\"></a>4.4 最大化（还原）按钮的实现</h3>\n<p>最大化（还原）按钮的实现方式如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//max-restore</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">on_tbn_max_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">isMaximized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">showNormal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//还原事件</span>\n        ui<span class=\"token operator\">-&gt;</span>tbn_max<span class=\"token operator\">-&gt;</span><span class=\"token function\">setIcon</span><span class=\"token punctuation\">(</span><span class=\"token function\">QIcon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/img/max.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">showMaximized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//最大化事件</span>\n        ui<span class=\"token operator\">-&gt;</span>tbn_max<span class=\"token operator\">-&gt;</span><span class=\"token function\">setIcon</span><span class=\"token punctuation\">(</span><span class=\"token function\">QIcon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/img/restore.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>利用isMaximized()函数可以判断UI界面当前的状态，以分别实现最大化和还原的功能。功能切换时注意更换按钮上显示的图标icon，以显示其当前真正的功能。</p>\n<h3><a id=\"45__85\"></a>4.5 最小化按钮的实现</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//min</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">on_tbn_min_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">showMinimized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最小化</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"46__95\"></a>4.6 实现界面移动</h3>\n<p>因为改变界面在桌面上的位置原本由边框实现，去除边框后，<strong>UI与桌面不存在明确的布局关系，界面内容将无法移动。</strong></p>\n<p>联想一下，正常情况下界面移动的操作过程是什么？鼠标左键长按标题栏中的非按钮位置，然后拖动鼠标，界面从起始位置移动到鼠标停留的位置。<strong>在此过程中，起到定位作用的参数分别有，界面当前的位置，鼠标光标的起始位置，鼠标光标终止位置，起到触发作用则是鼠标左键的长按动作。</strong></p>\n<p>用QT编程的思路解析该过程，可以表述为：<code>鼠标左键长按作为信号，该信号触发的槽函数为计算操作过程中鼠标位置的变化，再将界面按鼠标位置的变化移动，达成鼠标拖动界面的效果。</code></p>\n<p>因此，根据上述分析，鼠标拖动界面移动的实现至少需要两个部分：</p>\n<ol><li> <p>识别鼠标的长按动作及落点，长按动作用于触发移动操作，落点则用于判断当前位置应不应该移动界面。</p> </li><li> <p>根据记录的鼠标位置，计算出鼠标在桌面坐标系中的变化，再将界面按照变化调整位置。</p> </li></ol>\n<p><strong>Step1：通过鼠标点击事件，识别鼠标左键按下操作，并记录当前位置：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">mousePressEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-&gt;</span><span class=\"token function\">button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Qt<span class=\"token operator\">::</span>LeftButton<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        whereismouse<span class=\"token operator\">=</span>event<span class=\"token operator\">-&gt;</span><span class=\"token function\">pos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Step2：通过鼠标移动事件，计算鼠标光标的坐标变化，并借助move事件使界面进行相同的移动：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">mouseMoveEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-&gt;</span><span class=\"token function\">buttons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Qt<span class=\"token operator\">::</span>LeftButton<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//当窗口最大化或最小化时也不进行触发</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">isMaximized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">isMinimized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//当在按钮之类需要鼠标操作的地方不进行触发(防误触)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-&gt;</span>tbn_close<span class=\"token operator\">-&gt;</span><span class=\"token function\">underMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>ui<span class=\"token operator\">-&gt;</span>tbn_max<span class=\"token operator\">-&gt;</span><span class=\"token function\">underMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>ui<span class=\"token operator\">-&gt;</span>tbn_min<span class=\"token operator\">-&gt;</span><span class=\"token function\">underMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Widget</span><span class=\"token operator\">::</span><span class=\"token function\">mapToGlobal</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-&gt;</span><span class=\"token function\">pos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>whereismouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//移动</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    event<span class=\"token operator\">-&gt;</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>underMouse()函数可以判断鼠标当前是否悬浮在相应控件上，通过该语句可以控制界面拖动的生效范围，使其不在按钮之类需要鼠标操作的地方误触发。</p>\n<h2><a id=\"_148\"></a>五、效果演示</h2>\n<p>完整效果如下：<br/> </p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"aguq8roM-1650096476848\" src=\"https://live.csdn.net/v/embed/198708\"></iframe>\n<p>利用Qt实现自定义标题栏功能示例</p>\n</div>\n<p></p>\n<hr/>\n<p>如果没有看懂的话，完整代码可以参考：<a href=\"https://download.csdn.net/download/didi_ya/85153071\">https://download.csdn.net/download/didi_ya/85153071</a></p>\n<p>ok，以上便是本文的全部内容了，如果对你有所帮助，记得点个赞哟~</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}