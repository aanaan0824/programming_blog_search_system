{"blogid": "125761143", "writerAge": "码龄2年", "writerBlogNum": "48", "writerCollect": "669", "writerComment": "1135", "writerFan": "1942", "writerGrade": "5级", "writerIntegral": "2353", "writerName": "广龙宇", "writerProfileAdress": "writer_image\\profile_125761143.jpg", "writerRankTotal": "8128", "writerRankWeekly": "115", "writerThumb": "618", "writerVisitNum": "1805821", "blog_read_count": "6109", "blog_time": "已于 2022-08-30 08:02:07 修改", "blog_title": "【一起学Rust · 项目实战】命令行IO项目minigrep——测试驱动开发完善功能", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"\" src=\"image\\1e9067c2a8114a7a8acc4bcd42fab072.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">前言</a></li><li><a href=\"#_13\">一、任务目的</a></li><li><a href=\"#_31\">二、编写测试失败用例</a></li><li><ul><li><a href=\"#1_33\">1.增加测试模块和测试函数</a></li><li><a href=\"#2search_58\">2.编写search函数</a></li></ul>\n</li><li><a href=\"#_67\">三、修改代码，让代码测试通过</a></li><li><ul><li><a href=\"#1__82\">1. 按行读取</a></li><li><a href=\"#2__98\">2. 检查关键字</a></li><li><a href=\"#3__116\">3. 存储搜索结果</a></li><li><a href=\"#4__134\">4. 运行测试</a></li></ul>\n</li><li><a href=\"#_139\">四、在程序中使用代码</a></li><li><a href=\"#_160\">总结</a></li><li><a href=\"#_165\">作业</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<p>经过前面三节的学习，我们的小工具minigrep已经实现了读取指定文件内容，并且为了后期开发和测试的方便，重构了整个项目，使错误处理规整化，模块规范化。本次我们将采用<code>测试驱动开发（以后简称TDD）</code>的模式进行开发，为程序编写几个程序测试用例，测试程序搜索查询字符串并返回匹配的行示例的功能，这些功能会在后面开发过程中用到。</p>\n<blockquote>\n<p>测试驱动开发，英文全称Test-Driven Development，简称TDD，是一种不同于传统软件开发流程的新型的开发方法。它要求在编写某个功能的代码之前先编写测试代码，然后只编写使测试通过的功能代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，并加速开发过程。</p>\n</blockquote>\n<hr/>\n<h1><a id=\"_13\"></a>一、任务目的</h1>\n<p>了解<code>测试驱动开发模式（TDD）</code>，熟悉其开发步骤。使用TDD开发模式，编写我们所需要的测试功能代码，逐步增加软件的功能。</p>\n<p>TDD是一个软件开发技术，它遵循如下步骤：</p>\n<ol><li>编写一个失败的测试，并运行它以确保它失败的原因是你所期望的。</li><li>编写或修改足够的代码来使新的测试通过。</li><li>重构刚刚增加或修改的代码，并确保测试仍然能通过。</li><li>从步骤 1 开始重复！</li></ol>\n<p><strong>使用TDD开发模式的好处</strong></p>\n<ol><li>有助于驱动代码的设计</li><li>有助于在开发过程中保持高测试覆盖率</li></ol>\n<h1><a id=\"_31\"></a>二、编写测试失败用例</h1>\n<h2><a id=\"1_33\"></a>1.增加测试模块和测试函数</h2>\n<p>我们仿照创建库时里面自带的测试代码，编写测试模块，在其中我们写了个<code>one_result</code>函数用来测试，其中定义了query搜索关键词和contents内容，模拟我们实际操作中获取到的参数，调用了一个<code>search</code>函数，将刚才的参数传入，并且<code>断言</code>返回的就是关键词那一行的vector。</p>\n<p>这里我们传入的关键词是<code>芙蓉</code>，因此，如果<code>search</code>运行正常的话就会返回<code>芙蓉老秋霜，团扇羞网尘。戚姬髡发入舂市，万古共悲辛。</code>。</p>\n<blockquote>\n<p><code>search</code>函数还没写，因此直接编译必然会报错，这里我们希望传入这两个值并且返回关键词所在的行才这么写的，<code>search</code>函数的编写按照我们调用的样子来写。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">one_result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"芙蓉\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\n中山孺子妾，特以色见珍。虽然不如延年妹，亦是当时绝世人。\n桃李出深井，花艳惊上春。一贵复一贱，关天岂由身。\n芙蓉老秋霜，团扇羞网尘。戚姬髡发入舂市，万古共悲辛。\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"芙蓉老秋霜，团扇羞网尘。戚姬髡发入舂市，万古共悲辛。\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2search_58\"></a>2.编写search函数</h2>\n<p>由于这里我们是编写测试错误的用例，要确保程序出错是按照我们所期望的方式出错，因此这里我们在search函数返回一个空的vector，确保代码能够编译，且返回的不是我们所预期的结果，代码如下，</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时我们运行一下测试，结果返回断言的<code>左值不等于右值</code>，说明我们写的代码是没有问题的，在后面我们会修复这个错误，让代码测试通过，如下图<br/> <img alt=\"\" src=\"image\\47c4e01285404208b5b9dcd67374af95.png\"/></p>\n<h1><a id=\"_67\"></a>三、修改代码，让代码测试通过</h1>\n<p>目前测试之所以会失败是因为我们总是返回一个空的 vector。为了让程序能够通过测试，我们需要完善<code>search</code>函数的逻辑，返回正确的结果。<code>search</code>的程序流程图如下</p>\n<div class=\"mermaid sequence-diagram flow-chart\">\n<svg height=\"459.3000068664551\" preserveaspectratio=\"xMidYMid meet\" style=\"overflow: hidden; position: relative;\" version=\"1.1\" viewbox=\"0 0 414.200008392334 459.3000068664551\" width=\"414.200008392334\" xmlns=\"http://www.w3.org/2000/svg\">\n<desc style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n   Created with Raphaël 2.3.0\n  </desc>\n<defs style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n<marker id=\"raphael-marker-endblock33-objswwvc\" markerheight=\"3\" markerwidth=\"3\" orient=\"auto\" refx=\"1.5\" refy=\"1.5\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n<use fill=\"black\" stroke=\"none\" stroke-width=\"1.6667\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" transform=\"rotate(180 1.5 1.5) scale(0.6,0.6)\"></use>\n</marker>\n<marker id=\"raphael-marker-endblock33-objstq0r\" markerheight=\"3\" markerwidth=\"3\" orient=\"auto\" refx=\"1.5\" refy=\"1.5\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n<use fill=\"black\" stroke=\"none\" stroke-width=\"1.6667\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" transform=\"rotate(180 1.5 1.5) scale(0.6,0.6)\"></use>\n</marker>\n<marker id=\"raphael-marker-endblock33-obj3mx7e\" markerheight=\"3\" markerwidth=\"3\" orient=\"auto\" refx=\"1.5\" refy=\"1.5\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n<use fill=\"black\" stroke=\"none\" stroke-width=\"1.6667\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" transform=\"rotate(180 1.5 1.5) scale(0.6,0.6)\"></use>\n</marker>\n<marker id=\"raphael-marker-endblock33-obj5abnn\" markerheight=\"3\" markerwidth=\"3\" orient=\"auto\" refx=\"1.5\" refy=\"1.5\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n<use fill=\"black\" stroke=\"none\" stroke-width=\"1.6667\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" transform=\"rotate(180 1.5 1.5) scale(0.6,0.6)\"></use>\n</marker>\n<marker id=\"raphael-marker-endblock33-objo4er6\" markerheight=\"3\" markerwidth=\"3\" orient=\"auto\" refx=\"1.5\" refy=\"1.5\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n<use fill=\"black\" stroke=\"none\" stroke-width=\"1.6667\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" transform=\"rotate(180 1.5 1.5) scale(0.6,0.6)\"></use>\n</marker>\n</defs>\n<rect class=\"flowchart\" fill=\"#ffffff\" height=\"39.20000076293945\" id=\"st\" rx=\"20\" ry=\"20\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" transform=\"matrix(1,0,0,1,73.6,30.7)\" width=\"50\" x=\"0\" y=\"0\"></rect>\n<text class=\"flowchartt\" fill=\"#000000\" font-size=\"14px\" id=\"stt\" stroke=\"none\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;\" text-anchor=\"start\" transform=\"matrix(1,0,0,1,73.6,30.7)\" x=\"10\" y=\"19.600000381469727\">\n<tspan dy=\"5.599999904632568\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n    开始\n   </tspan>\n</text>\n<rect class=\"flowchart\" fill=\"#ffffff\" height=\"39.20000076293945\" id=\"op3\" rx=\"0\" ry=\"0\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" transform=\"matrix(1,0,0,1,38.2593,150.6)\" width=\"120.68144989013672\" x=\"0\" y=\"0\"></rect>\n<text class=\"flowchartt\" fill=\"#000000\" font-size=\"14px\" id=\"op3t\" stroke=\"none\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;\" text-anchor=\"start\" transform=\"matrix(1,0,0,1,38.2593,150.6)\" x=\"10\" y=\"19.600000381469727\">\n<tspan dy=\"5.599999904632568\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n    定义存储Vector\n   </tspan>\n</text>\n<path class=\"flowchart\" d=\"M48.30000114440918,24.15000057220459L0,48.30000114440918L96.60000228881836,96.60000228881836L193.20000457763672,48.30000114440918L96.60000228881836,0L0,48.30000114440918\" fill=\"#ffffff\" id=\"cond\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;\" transform=\"matrix(1,0,0,1,2,241.8)\"></path>\n<text class=\"flowchartt\" fill=\"#000000\" font-size=\"14px\" id=\"condt\" stroke=\"none\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;\" text-anchor=\"start\" transform=\"matrix(1,0,0,1,2,241.8)\" x=\"53.30000114440918\" y=\"48.30000114440918\">\n<tspan dy=\"5.600000381469727\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n    是否到达尾行？\n   </tspan>\n</text>\n<rect class=\"flowchart\" fill=\"#ffffff\" height=\"39.20000076293945\" id=\"e\" rx=\"20\" ry=\"20\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" transform=\"matrix(1,0,0,1,74,419.1)\" width=\"49.20000076293945\" x=\"0\" y=\"0\"></rect>\n<text class=\"flowchartt\" fill=\"#000000\" font-size=\"14px\" id=\"et\" stroke=\"none\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;\" text-anchor=\"start\" transform=\"matrix(1,0,0,1,74,419.1)\" x=\"10\" y=\"19.600000381469727\">\n<tspan dy=\"5.599999904632568\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n    结束\n   </tspan>\n</text>\n<rect class=\"flowchart\" fill=\"#ffffff\" height=\"39.20000076293945\" id=\"insert_op\" rx=\"0\" ry=\"0\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" transform=\"matrix(1,0,0,1,274.4,270.5)\" width=\"138.8000030517578\" x=\"0\" y=\"0\"></rect>\n<rect fill=\"#ffffff\" height=\"39.20000076293945\" id=\"insert_opi\" rx=\"0\" ry=\"0\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;\" transform=\"matrix(1,0,0,1,274.4,270.5)\" width=\"118.80000305175781\" x=\"10\" y=\"0\"></rect>\n<text class=\"flowchartt\" fill=\"#000000\" font-size=\"14px\" id=\"insert_opt\" stroke=\"none\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;\" text-anchor=\"start\" transform=\"matrix(1,0,0,1,274.4,270.5)\" x=\"20\" y=\"19.600000381469727\">\n<tspan dy=\"5.599999904632568\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n    是否包含关键词\n   </tspan>\n</text>\n<path d=\"M98.60000228881836,69.9000015258789C98.60000228881836,69.9000015258789,98.60000228881836,138.04796350056495,98.60000228881836,149.09538702380507\" fill=\"none\" marker-end=\"url(#raphael-marker-endblock33-objswwvc)\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;\"></path>\n<path d=\"M98.60000228881836,189.8000030517578C98.60000228881836,189.8000030517578,98.60000228881836,231.7738800048828,98.60000228881836,240.29982376098633\" fill=\"none\" marker-end=\"url(#raphael-marker-endblock33-objstq0r)\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;\"></path>\n<path d=\"M98.60000228881836,338.4000053405762C98.60000228881836,338.4000053405762,98.60000228881836,406.5479673152622,98.60000228881836,417.59539083850234\" fill=\"none\" marker-end=\"url(#raphael-marker-endblock33-obj3mx7e)\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;\"></path>\n<text fill=\"#000000\" font-size=\"14px\" stroke=\"none\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;\" text-anchor=\"start\" x=\"103.60000228881836\" y=\"348.4000053405762\">\n<tspan dy=\"4.799999237060547\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n    yes\n   </tspan>\n</text>\n<path d=\"M195.20000457763672,290.100004196167C195.20000457763672,290.100004196167,262.0102200268275,290.100004196167,272.90602664793573,290.100004196167\" fill=\"none\" marker-end=\"url(#raphael-marker-endblock33-obj5abnn)\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;\"></path>\n<text fill=\"#000000\" font-size=\"14px\" stroke=\"none\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;\" text-anchor=\"start\" x=\"200.20000457763672\" y=\"280.100004196167\">\n<tspan dy=\"4.799985885620117\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n    no\n   </tspan>\n</text>\n<path d=\"M343.8000068664551,270.50000381469727C343.8000068664551,270.50000381469727,343.8000068664551,125.60000228881836,343.8000068664551,125.60000228881836C343.8000068664551,125.60000228881836,98.60000228881836,125.60000228881836,98.60000228881836,125.60000228881836C98.60000228881836,125.60000228881836,98.60000228881836,143.6874132156372,98.60000228881836,149.092440309003\" fill=\"none\" marker-end=\"url(#raphael-marker-endblock33-objo4er6)\" stroke=\"#000000\" stroke-width=\"1\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;\"></path>\n</svg>\n</div>\n<h2><a id=\"1__82\"></a>1. 按行读取</h2>\n<p>Rust提供了可以按行读取文本的方法<code>lines</code>，他的调用方法是</p>\n<pre><code class=\"prism language-rust\">contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>该方法返回一个数组，其中每一位元素都是文本内容的一行。我们用for循环来读取每一行，并且对每一行进行操作，所以对<code>search</code>函数这样改动</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 对文本行进行操作</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2__98\"></a>2. 检查关键字</h2>\n<p>检查关键字实际上就是查找字符串，Rust字符串也提供了可以查找字符串的方法<code>contains</code>，他是这么调用的</p>\n<pre><code class=\"prism language-rust\">contents<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>现在我们将他加入<code>search</code>函数中</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 对文本行进行操作</span>\n            <span class=\"token keyword\">if</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3__116\"></a>3. 存储搜索结果</h2>\n<p>现在我们可以遍历完每一行，并且对每一行进行检查是否存在我们要找的关键字，所以现在要考虑的就是怎么把这些包含关键字的行保存并返回。考虑在for循环之外创建一个Vector，每当有符合条件的行就在for循环的判断中加入进去，代码如下</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> results <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    results\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里定义了一个可变的Vector类型的变量<code>results</code>，然后在for循环中判断，如果有符合条件的行就把这行加到<code>results</code>中，最后返回<code>results</code>。</p>\n<h2><a id=\"4__134\"></a>4. 运行测试</h2>\n<p>现在我们来运行一下这个测试用例，<br/> <img alt=\"\" src=\"image\\a79311d236624bf18eb2ddea1efba99e.png\"/><br/> 可见我们写的<code>search</code>函数是符合条件的，通过了测试。</p>\n<h1><a id=\"_139\"></a>四、在程序中使用代码</h1>\n<p>我们的项目主要逻辑都是放在<code>run</code>函数中的，因此我们只需要在<code>run</code>函数中调用<code>search</code>函数，并输出每一行的内容就好了，以下是代码</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时运行程序来看看效果，<br/> <img alt=\"\" src=\"image\\ef2499def76144ceaa467174606b8d71.png\"/><br/> 输入个比较短的关键字，查看是否能找到所有行<br/> <img alt=\"\" src=\"image\\bb03f5d1d4b04a8bae83bfd48c433dd7.png\"/><br/> 输入一个里面不存在的关键字<br/> <img alt=\"\" src=\"image\\38e96daf858e492d9c3ea2894f3a3ba7.png\"/></p>\n<hr/>\n<h1><a id=\"_160\"></a>总结</h1>\n<p>现在我们就基本完成了这个小工具的开发，创建了个属于自己的小工具，学习了如何组织程序，驱动测试开发的开发方法，还有一些文件输入输出、生命周期、测试和命令行解析的内容。</p>\n<p>到现在为止，这个小工具的主要功能就算是开发完毕了，后续我们将优化处理环境变量和输出标准内容，待续。</p>\n<h1><a id=\"_165\"></a>作业</h1>\n<p>到现在为止你已经基本完成这个小案列，请思考以下内容：</p>\n<ul><li>对于字符串的操作，比如字符串分割，字符串替换等怎么用Rust来写。</li><li>测试驱动开发有什么优点，有哪些步骤。</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}