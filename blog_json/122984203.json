{"blogid": "122984203", "writerAge": "码龄5年", "writerBlogNum": "38", "writerCollect": "543", "writerComment": "25", "writerFan": "3661", "writerGrade": "3级", "writerIntegral": "616", "writerName": "木头linux", "writerProfileAdress": "writer_image\\profile_122984203.jpg", "writerRankTotal": "44273", "writerRankWeekly": "2790", "writerThumb": "92", "writerVisitNum": "71452", "blog_read_count": "1919", "blog_time": "已于 2022-02-20 10:22:48 修改", "blog_title": "一文彻底搞懂extern用法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>一、定义和声明的区别</h2>\n<p><strong>声明：</strong>用来告诉编译器变量的名称和类型，而<span style=\"color:#a2e043;\"><strong>不分配内存，不赋初值</strong></span>。</p>\n<p><strong>定义：</strong>为了给变量分配内存，<span style=\"color:#a2e043;\"><strong>可以为变量赋初值</strong></span>。</p>\n<p><span style=\"color:#a2e043;\"><strong>注：定义要为变量分配内存空间；而声明不需要为变量分配内存空间。</strong></span></p>\n<hr/>\n<h2><strong>二、extern用法</strong></h2>\n<h3><strong>2.1 extern 函数</strong></h3>\n<p><strong>为什么要用extern 函数呢？直接#include相应的头文件不可以嘛？</strong></p>\n<p>例子，如led.cpp 想调用delay.cpp中的delayms函数,有两种方法：</p>\n<p><strong>方法1：</strong>include 头文件，即直接 #delay.h </p>\n<p><strong>方法2:</strong>  extern 方法 ，extern void delayms这句在调用文件中使用，表示引用全局函数delayms()。</p>\n<p><strong>优点：<span style=\"color:#a2e043;\">不inlcude delayms.h就不会引入大量头文件，进而不会引入大量的无关函数。</span></strong>这样做的一个明显的好处是，会加速程序的编译（确切的说是预处理）的过程，节省时间。<span style=\"color:#fe2c24;\"><strong> 在makefile中需要led.o和delay.o写在一起，否则link的时候找不到delayms而报错。</strong></span></p>\n<h3><span style=\"color:#0d0016;\"><strong>2.2 extern 变量</strong></span></h3>\n<p><span style=\"color:#0d0016;\">如果文件b.c需要引用a.c中变量int v，就可以在b.c中声明extern int v，然后就可以引用变量v。<strong>能够被其他模块以extern修饰符引用到的变量通常是全局变量。</strong>注意，extern int v可以放在a.c中的任何地方，具体作用范围和局部变量相同。</span></p>\n<p><span style=\"color:#0d0016;\"><strong>extern的原理很简单，就是告诉编译器：</strong></span><span style=\"color:#a2e043;\"><strong>“你现在编译的文件中，有一个标识符虽然没有在本文件中定义，但是它是在别的文件中定义的全局变量，你要放行！”</strong></span></p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"247\" src=\"image\\93d3916b2cc74f35a36a1fd0d21741e9.png\" width=\"466\"/></p>\n<h3> 2.3 在C++文件中调用C方式编译的函数</h3>\n<p>比如在C＋＋中调用C库函数，就需要在C＋＋程序中用extern “C”声明要引用的函数。<strong>这是给链接器用的，告诉链接器在链接的时候用C函数规范来链接。</strong>主要原因是C＋＋和C程序编译完成后在目标代码中命名规则不同。 </p>\n<p><span style=\"color:#fe2c24;\"><strong>注意：声明可以多次，定义只能一次。</strong></span></p>\n<pre><code class=\"language-cpp\">extern int i; //声明，不是定义\nint i; //声明，也是定义</code></pre>\n<hr/>\n<h2><strong>三、通俗讲解</strong></h2>\n<p>非常难以理解的是，<strong>在<span style=\"color:#fe2c24;\">定义变量</span>的时候，这个extern居然可以被省略(定义时，默认均省略)；在<span style=\"color:#fe2c24;\">声明变量</span>的时候，这个extern必须添加在变量前</strong>，所以有时会让你搞不清楚到底是声明还是定义。</p>\n<p>或者说，<span style=\"color:#fe2c24;\"><strong>变量前有extern不一定就是声明（首先声明必须要有extern，但是定义如果不省略也可以有extern），而变量前无extern就只能是定义（声明必须要有extern，没有extern只能是定义省略extern的情况）！！！</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>一般来讲，定义默认省略extern，因此可以得到：有extern为声明，没有extern为定义。</strong></span></p>\n<p><span style=\"color:#a2e043;\"><strong>小技巧：无论是否有extern修饰，赋初值==定义。如下两种方式是等价的，必为定义！！！</strong></span></p>\n<pre><code class=\"language-cpp\">//如果在声明的时候给变量赋值，那么就去掉extern直接定义变量赋值是等价的\nextern int a = 10;//尽量不要写这种定义方式\nint a = 10;//上述两条语句等价</code></pre>\n</div>\n</div>"}