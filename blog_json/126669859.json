{"blogid": "126669859", "writerAge": "码龄3年", "writerBlogNum": "79", "writerCollect": "78", "writerComment": "0", "writerFan": "450", "writerGrade": "4级", "writerIntegral": "849", "writerName": "Yengi", "writerProfileAdress": "writer_image\\profile_126669859.jpg", "writerRankTotal": "21486", "writerRankWeekly": "3975", "writerThumb": "46", "writerVisitNum": "21699", "blog_read_count": "76", "blog_time": "于 2022-09-02 20:18:03 发布", "blog_title": "stm32f4xx-systick系统滴答时钟", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">一、系统滴答时钟</a></li><li><ul><li><a href=\"#1_5\">1、简介</a></li><li><ul><li><a href=\"#_17\">注意：</a></li></ul>\n</li><li><a href=\"#2_31\">2、工作原理（向下计数，向上计数）</a></li><li><a href=\"#3_36\">3、频率的概念</a></li></ul>\n</li><li><a href=\"#_40\">二、库函数</a></li><li><a href=\"#_119\">四、延时函数</a></li><li><ul><li><a href=\"#1_121\">1、系统定时器的用途</a></li><li><a href=\"#2_129\">2、官方示例</a></li><li><a href=\"#3_181\">3、寄存器</a></li><li><a href=\"#4_190\">4、毫秒级延时函数</a></li><li><a href=\"#5_207\">5、微秒级延时函数</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一、系统滴答时钟</h1>\n<h2><a id=\"1_5\"></a>1、简介</h2>\n<p>​ SysTick叫做系统嘀嗒时钟，系统定时器，属于Cortex-M4内核中的一个（外设）外围设备，并且是24bit向下递减的计数器</p>\n<p>lSystick定时器，是一个简单的定时器，对于CM3,CM4内核芯片，都有Systick定时器。</p>\n<p>lSystick定时器常用来做延时，或者实时系统的心跳时钟。这样可以节省MCU资源，不用浪费一个定时器。比如UCOS中，分时复用，需要一个最小的时间戳，一般在STM32+UCOS系统中，都采用Systick做UCOS心跳时钟</p>\n<p>《STM32F4xx中文参考手册.pdf》 第108页</p>\n<p>RCC 向 Cortex 系统定时器 (SysTick) 馈送 8 分频的 AHB 时钟 (HCLK) (168M/8=21M)。SysTick 可使用此时钟作为时钟源，也可使用 HCLK 作为时钟源，具体可在 SysTick 控制和状态寄存器中配置</p>\n<h3><a id=\"_17\"></a>注意：</h3>\n<p>1）定时器的位数越多，定时时间更长</p>\n<p>2）通过计数值间接计算定时时间，不能像操作系统直接调用函数实现延时或定时功能</p>\n<p>计数值，就是要进行多少个计数</p>\n<p>168000000 次 = 1S</p>\n<p>168000 次 = 1ms</p>\n<p>168 次 = 1us</p>\n<h2><a id=\"2_31\"></a>2、工作原理（向下计数，向上计数）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ba2e60fa9ecf4909a93d19ba6818c070.png\"/></p>\n<h2><a id=\"3_36\"></a>3、频率的概念</h2>\n<p>​ 物质在1S内完成周期性变化的次数叫做频率，常用f表示。为了纪念德国物理学家赫兹的贡献，人们把频率的单位命名为赫兹，简称“赫”，符号为Hz</p>\n<h1><a id=\"_40\"></a>二、库函数</h1>\n<p>参考文档：《Cortex M3与M4权威指南.pdf》314页</p>\n<pre><code class=\"prism language-c\">固件库中的Systick相关函数：\n  <span class=\"token function\">SysTick_CLKSourceConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//Systick时钟源选择 misc.c文件中</span>\n  <span class=\"token function\">SysTick_Config</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> ticks<span class=\"token punctuation\">)</span> <span class=\"token comment\">//初始化systick,时钟为HCLK,并开启中断</span>\n                        <span class=\"token comment\">//core_cm3.h/core_cm4.h文件中</span>\nuSystick中断服务函数：\n  <span class=\"token keyword\">void</span> <span class=\"token function\">SysTick_Handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>1、系统嘀嗒时钟配置</p>\n<p>uint32_t SysTick_Config(uint32_t ticks);<br/> <img alt=\"在这里插入图片描述\" src=\"image\\70e74f44aeb1482cafb0dcf1697331d2.png\"/></p>\n<p>示例：</p>\n<p>系统定时器触发1khz的中断，中断周期时间T=1/f = 1000ms/1000 = 1ms</p>\n<p>系统定时器连接到PLL输出的168Mhz时钟</p>\n<p>只要系统定时器进行168000000次计数，就是1s时间的到达</p>\n<p>只要系统定时器进行168000次计数，就是1ms时间的到达</p>\n<p>只要系统定时器进行168次计数，就是1us时间的到达</p>\n<p>SysTick_Config(SystemCoreClock / 1000);</p>\n<p>SysTick_Config(168000); // 168MHz / 1000 = 168000</p>\n<p>三、最大定时时间</p>\n<p>1、确定最大的计数值2<sup>24-1，若计算到0，则进行2</sup>24次方计数</p>\n<p>1000ms TMax</p>\n<p>----- == -----</p>\n<p>168000000 2^24</p>\n<p>Tmax = 2^24 * 1000ms / 168000000 = ms</p>\n<p>16,777,216 * 1000 / 168000000 = 99.86ms</p>\n<p>初始化系统定时器，1s内内核触发1000次中断，说白了，定时1ms，能够成功</p>\n<p>SysTick_Config(SystemCoreClock / 1000);</p>\n<p>初始化系统定时器，1s内内核触发10次中断，说白了，定时100ms，不能成功</p>\n<p>SysTick_Config(SystemCoreClock / 10);</p>\n<p>初始化系统定时器，1s内内核触发11次中断，说白了，定时90.90ms，能够成功</p>\n<p>SysTick_Config(SystemCoreClock / 11);</p>\n<p>总结：填写中断频率值不能小于11，否则定时时间不准确</p>\n<h1><a id=\"_119\"></a>四、延时函数</h1>\n<h2><a id=\"1_121\"></a>1、系统定时器的用途</h2>\n<p>没有操作系统：只用于延时</p>\n<p>有操作系统(Ucos freertos)：为操作系统提供精准的定时中断（50ms）</p>\n<h2><a id=\"2_129\"></a>2、官方示例</h2>\n<p>参考文档：《Cortex M3与M4权威指南.pdf》314页</p>\n<p>In many cases you might not want to use the SysTick_Config function because you might want to use the reference clock or you might not want to enable the SysTick interrupt. In these cases you need to program the SysTick registers directly,and the following sequence is recommended</p>\n<p>在许多情况下，您可能不想使用SysTick_Config函数，因为您可能想使用参考时钟或不想启用SysTick中断。在这些情况下，您需要直接对SysTick寄存器进行编程，建议采用以下顺序</p>\n<ol><li>Disable the SysTick timer by writing 0 to SysTick-&gt;CTRL. This step is optional. It is recommended for reusable code because the SysTick could have been enabled previously.</li></ol>\n<p>通过将0写入SysTick-&gt;CTRL来禁用SysTick定时器。此步骤是可选的。建议使用可重用代码，因为之前可能已启用SysTick。</p>\n<ol start=\"2\"><li>Write the new reload value to SysTick-&gt;LOAD. The reload value should be the interval value e1.</li></ol>\n<p>将新的重新加载值写入SysTick-&gt;LOAD。重新加载值应该是间隔值e1。</p>\n<ol start=\"3\"><li>Write to the SysTick Current Value register SysTick-&gt;VAL with any value to clear the current value to 0.</li></ol>\n<p>使用任何值写入SysTick当前值寄存器SysTick-&gt;VAL，将当前值清除为0。</p>\n<ol start=\"4\"><li>Write to the SysTick Control and Status register SysTick-&gt;CTRL to start the SysTick timer.</li></ol>\n<p>写入SysTick控件和状态寄存器SysTick-&gt;CTRL以启动SysTick定时器</p>\n<p>If you want to use the SysTick timer in polling mode, you can use the count flagin the SysTick Control and Status Register(SysTick-&gt;CTRL) to determinewhen thetimer reaches zero. For example, you can create a timed delay by setting the SysTicktimer to a certain value and waiting until it reaches zero</p>\n<p>参考文档：《Cortex M3与M4权威指南.pdf》316页</p>\n<p>官方给的示例代码更改之后：1ms</p>\n<pre><code class=\"prism language-c\">SysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// Disable SysTick</span>\n\nSysTick<span class=\"token operator\">-&gt;</span>LOAD <span class=\"token operator\">=</span> <span class=\"token number\">168000</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 配置计数值（168000-1） ~ 0</span>\n\nSysTick<span class=\"token operator\">-&gt;</span>VAL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// Clear current value as well as count flag</span>\n\nSysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// Enable SysTick timer with processor clock</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>SysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00010000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Wait until count flag is set</span>\n\nSysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// Disable SysTick</span>\n</code></pre>\n<p>参考文档：《Cortex M3与M4权威指南.pdf》315页</p>\n<h2><a id=\"3_181\"></a>3、寄存器</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b414ccab858e478bb1f9d5db01eb19f7.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\18bd4aa29ba24da481cedc0c1d52ac52.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5f69fc36dc5d4265b0866a915290aa9a.png\"/></p>\n<h2><a id=\"4_190\"></a>4、毫秒级延时函数</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">delay_ms</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tSysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \t\t\t\t\t\t<span class=\"token comment\">// 关闭系统定时器</span>\n\t\tSysTick<span class=\"token operator\">-&gt;</span>LOAD <span class=\"token operator\">=</span> <span class=\"token number\">168000</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">// 配置计数值（168000-1） ~ 0\t</span>\n\t\tSysTick<span class=\"token operator\">-&gt;</span>VAL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \t\t\t\t\t\t<span class=\"token comment\">// 清除当前值和计数标志</span>\n\t\tSysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> \t\t\t\t\t<span class=\"token comment\">// 使用处理器时钟启用SysTick定时器</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>SysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00010000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 等待直到设置计数标志</span>\n\t<span class=\"token punctuation\">}</span>\t\n\tSysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 关闭系统定时器</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"5_207\"></a>5、微秒级延时函数</h2>\n<pre><code class=\"prism language-c\">\n<span class=\"token keyword\">void</span> <span class=\"token function\">delay_ms</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tSysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \t\t\t\t\t\t<span class=\"token comment\">// 关闭系统定时器</span>\n\t\tSysTick<span class=\"token operator\">-&gt;</span>LOAD <span class=\"token operator\">=</span> <span class=\"token number\">168</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">// 配置计数值（168-1） ~ 0</span>\n\t\tSysTick<span class=\"token operator\">-&gt;</span>VAL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \t\t\t\t\t\t<span class=\"token comment\">// 清除当前值和计数标志</span>\n\t\tSysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> \t\t\t\t\t<span class=\"token comment\">// 使用处理器时钟启用SysTick定时器</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>SysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00010000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 等待直到设置计数标志</span>\n\t<span class=\"token punctuation\">}</span>\t\n\tSysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 关闭系统定时器</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>应用场景：</p>\n<p>1、微波炉的定时控制</p>\n<p>2、洗衣机的定时控制</p>\n<p>3、秒表</p>\n<blockquote>\n<p>VAL = 0; // 清除当前值和计数标志<br/> SysTick-&gt;CTRL = 5; // 使用处理器时钟启用SysTick定时器<br/> while ((SysTick-&gt;CTRL &amp; 0x00010000)==0);// 等待直到设置计数标志<br/> } <br/> SysTick-&gt;CTRL = 0; // 关闭系统定时器<br/> }</p>\n</blockquote>\n<pre><code>\n应用场景：\n\n1、微波炉的定时控制\n\n2、洗衣机的定时控制\n\n3、秒表\n\n4、智能定时夜灯\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}