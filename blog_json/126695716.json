{"blogid": "126695716", "writerAge": "码龄1年", "writerBlogNum": "44", "writerCollect": "1902", "writerComment": "2997", "writerFan": "2202", "writerGrade": "6级", "writerIntegral": "7100", "writerName": "敲代码の流川枫", "writerProfileAdress": "writer_image\\profile_126695716.jpg", "writerRankTotal": "2211", "writerRankWeekly": "65", "writerThumb": "2493", "writerVisitNum": "30359", "blog_read_count": "205", "blog_time": "已于 2022-09-07 08:53:57 修改", "blog_title": "计数排序算法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong> </strong></p>\n<p class=\"img-center\"><img alt=\"ced485cbb11e458d81a746890b32cf3f.gif\" src=\"https://img-blog.csdnimg.cn/ced485cbb11e458d81a746890b32cf3f.gif\"/></p>\n<blockquote>\n<p> 作者：<span style=\"color:#faa572;\">敲代码の流川枫</span></p>\n<p>博客主页：<a href=\"https://blog.csdn.net/chenchenchencl?spm=1011.2421.3001.5343\" title=\"流川枫的博客\">流川枫的博客</a></p>\n<p>专栏：<a href=\"https://blog.csdn.net/chenchenchencl/category_11932758.html\" title=\"和我一起学java\">和我一起学java</a></p>\n<p>语录：<span style=\"color:#faa572;\">Stay hungry stay foolish</span></p>\n<p><span style=\"color:#faa572;\">工欲善其事必先利其器，给大家介绍一款超牛的斩获大厂offer利器——牛客网</span></p>\n<p><span style=\"color:#faa572;\"><a href=\"https://www.nowcoder.com/link/pc_csdncpt_qdmdlcf_c\" title=\"点击免费注册和我一起刷题吧\">点击免费注册和我一起刷题吧</a>    </span></p>\n<p><img alt=\"\" height=\"955\" src=\"image\\b7ed09732c5a44eab60c8ae3f89210b2.png\" width=\"1200\"/></p>\n</blockquote>\n<p><strong>文章目录</strong></p>\n<p id=\"1.%20%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3-toc\"><a href=\"#1.%20%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3\">1. 算法思想</a></p>\n<p id=\"2.%20%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3-toc\"><a href=\"#2.%20%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3\">2. 算法图解</a></p>\n<p id=\"3.%20%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-toc\"><a href=\"#3.%20%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">3. 代码实现</a></p>\n<p id=\"4.%20%E7%AE%97%E6%B3%95%E7%89%B9%E7%82%B9-toc\"><a href=\"#4.%20%E7%AE%97%E6%B3%95%E7%89%B9%E7%82%B9\">4. 算法特点</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"1.%20%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3\">1. 算法思想</h1>\n<p>一提到排序，大多的思路都离不开数据之间的比较，今天分享一种不需要比较的排序思路</p>\n<p>计数排序就是一个排序时不比较元素大小的排序算法</p>\n<p>对一定范围内的整数排序的时候速度非常快，优于其他算法。同时局限性也比较大，只能对于整数进行排序，并且待排序元素分布较连续，跨度小的情况</p>\n<p>如果一个数组里<strong>所有元素都是整数</strong>，且在0—k以内，那对于这个数组的每个元素来说，如果能知道数组里有多少项小于或等于该元素，就能准确地给出该元素在排序后的数组的位置</p>\n<p>具体操作步骤</p>\n<p>我们来看这个数组</p>\n<p class=\"img-center\"><img alt=\"\" height=\"220\" src=\"image\\84dfa17080d24fdf816006419aa01d39.png\" width=\"1056\"/></p>\n<p> 对于这个数组，元素5之前有8个元素小于或等于5，包含5，因此排序后5所在的位置肯定是7</p>\n<p>因此我们构造一个（5+1）大小的数组，里面存下所有对应A中每个元素之前的元素个数，就能在线性时间内完成排序</p>\n<h1 id=\"2.%20%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3\">2. 算法图解</h1>\n<p> 升序图示：</p>\n<p>接下来我们的操作是：初始化一个大小为（5+1）的计数数组，所有元素值为0，遍历整个数组，将原始数组中的每个元素值转化为计数数组的下标，并将计数数组下标对应的元素值大小+1</p>\n<p class=\"img-center\"><img alt=\"\" height=\"346\" src=\"image\\9fb18bca821842f69dd30fe06c0c5b9f.png\" width=\"1104\"/></p>\n<p>接下来我们开始遍历计数数组，然后对原数组进行操作</p>\n<p>计数数组0位置的值是2，我们在原始数组的前两个位置放入0，放入一个值后，计数数组该位置的值就减1，原始数组索引向后移动准备存放下一个值</p>\n<p class=\"img-center\"><img alt=\"\" height=\"594\" src=\"image\\4a19fd86d91941a0bd4dfdc135623d75.png\" width=\"1119\"/></p>\n<p>当计数数组的0位置元素值减为0时，计数数组索引向后移动指向下一个位置，如果下一个位置元素为0 ，即证明没有当前下标的元素，索引继续后移</p>\n<p class=\"img-center\"><img alt=\"\" height=\"625\" src=\"image\\a3ff92e90602462fa86879ce600129d7.png\" width=\"1117\"/></p>\n<p class=\"img-center\"><img alt=\"\" height=\"604\" src=\"image\\58c383715b18422f8ce7275d7340eed4.png\" width=\"1129\"/></p>\n<p>每次在原始数组放进一个元素时，计数数组的某个位置的元素值都会减一，直到计数数组的值全为0时，排序已经完成</p>\n<p class=\"img-center\"><img alt=\"\" height=\"578\" src=\"image\\156104b5d24847078ff2f12f37aa768d.png\" width=\"1105\"/></p>\n<h1 id=\"3.%20%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">3. 代码实现</h1>\n<p>在实际应用中，我们会同时找出数组中的max和min，主要为了节省空间。如果[1004,1020,1070]这样的数据要排序，是不需要建立1070+1这样的计数数组的，只需要长度为1070-1004+1=67的数组，就能囊括从最小到最大元素之间的所有元素了</p>\n<p>如果待排序数组的元素值跨度太大了，就不要用计数排序了，太浪费空间了</p>\n<p>我们看计数排序的代码:</p>\n<pre><code>import java.util.Arrays;\n\npublic class CountingSort {\n\n    public int[] sortArray(int[] nums){\n        if(nums.length==0)return nums;\n        //寻找最大值和最小值\n        //bias：偏移量，用于定位每个元素在计数数组中的下标位置\n        int bais,min=nums[0],max = nums[0];\n        for (int i = 1; i &lt; nums.length ; i++) {\n            if(nums[i]&gt;max)\n                max = nums[i];\n            if(nums[i]&lt;min)\n                min = nums[i];\n        }\n        bais = 0-min;\n        //获得计数数组内容\n        int[] counterArray = new int[max-min+1];\n        Arrays.fill(counterArray,0);\n\n        //遍历整个数组，将原始数组每个元素转化为计数数组的下标\n        //并将计数数组下标对应的元素值大小进行累加\n        for (int i = 0; i &lt; nums.length; i++) {\n            counterArray[nums[i]+bais]++;\n        }\n        System.out.println(\"计数数组为\");\n        PrintArray.print(counterArray);\n        System.out.println(\"-----------\");\n        int index = 0;//访问原始数组的下标计数器\n        int i = 0;//访问计数数组的下标计数器\n        //开始访问计数数组，将计数数组的元素转换后，重新写回原始数组\n        while(index&lt;nums.length){\n            //只要计数数组当前下标元素的值不是0，就将计数数组的元素转换后重新写回原始数组\n            if(counterArray[i]!=0){\n                nums[index] = i-bais;\n                counterArray[i]--;\n                index++;\n            }\n            else i++;\n            PrintArray.print(counterArray);\n            PrintArray.print(nums);\n            System.out.println(\"---------\");\n        }\n\n        return nums;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {2,5,3,0,2,3,0,3};\n        CountingSort countingSort = new CountingSort();\n        countingSort.sortArray(array);\n    }\n}\nclass PrintArray{\n    public static void print(int[] nums){\n        System.out.println(Arrays.toString(nums));\n    }\n}\n</code></pre>\n<p>结果：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"791\" src=\"image\\bb099fa33f9741719ffbdd4c3d591836.png\" width=\"970\"/></p>\n<h1 id=\"4.%20%E7%AE%97%E6%B3%95%E7%89%B9%E7%82%B9\">4. 算法特点</h1>\n<p>时间复杂度为O(n+k)，空间复杂度为O(n)，适合数据范围跨度较小的排序</p>\n<blockquote>\n<p><span style=\"color:#faa572;\">“ 本期的分享就到这里了， 记得给博主一个三连哈，你的支持是我创作的最大动力！</span></p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"ced485cbb11e458d81a746890b32cf3f.gif\" src=\"https://img-blog.csdnimg.cn/ced485cbb11e458d81a746890b32cf3f.gif\"/></p>\n<p></p>\n</div>\n</div>"}