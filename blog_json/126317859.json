{"blogid": "126317859", "writerAge": "码龄2年", "writerBlogNum": "63", "writerCollect": "864", "writerComment": "972", "writerFan": "1315", "writerGrade": "5级", "writerIntegral": "2904", "writerName": "贤蛋大眼萌", "writerProfileAdress": "writer_image\\profile_126317859.jpg", "writerRankTotal": "6654", "writerRankWeekly": "92", "writerThumb": "703", "writerVisitNum": "34306", "blog_read_count": "1506", "blog_time": "于 2022-08-13 12:20:12 发布", "blog_title": "【Vue全家桶】新一代的状态管理--Pinia", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>【Vue全家桶】新一代的状态管理--Pinia</h3>\n<ul><li><ul><li><a href=\"#__Pinia_1\">🦴 什么是 Pinia</a></li><li><ul><li><a href=\"#_Pinia_13\">如何使用 Pinia</a></li></ul>\n</li><li><a href=\"#_Store_41\">🌂认识 Store</a></li><li><ul><li><a href=\"#1_store_47\">1. 定义一个store</a></li><li><a href=\"#2__store_55\">2. 使用 store</a></li></ul>\n</li><li><a href=\"#__State_63\">🧳 操作 State</a></li><li><a href=\"#_Getters_84\">🍨 Getters</a></li><li><ul><li><a href=\"#1__Getters_86\">1. 认识和定义 Getters</a></li><li><a href=\"#2__Getters_93\">2. 访问 Getters</a></li></ul>\n</li><li><a href=\"#_Action_137\">🍳认识和定义 Action</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"__Pinia_1\"></a>🦴 什么是 Pinia</h2>\n<p>Pinia (西班牙语中的菠萝)，本质上依然是一个<mark>状态管理的库</mark>，用于跨组件、页面进行状态共享.</p>\n<p>pinia 与 vuex 的区别：</p>\n<ol><li> <p>更友好的TypeScript支持，Vuex之前对TS的支持很不友好</p> </li><li> <p><strong>与 Vuex 相比，Pinia 提供了一个更简单的 API，具有更少的仪式，提供了 Composition-API 风格的 API</strong></p> </li><li> <p>不再有modules的嵌套结构</p> </li><li> <p>也不再有命名空间的概念，不需要记住它们的复杂关系</p> </li></ol>\n<h3><a id=\"_Pinia_13\"></a>如何使用 Pinia</h3>\n<ol><li>安装 pinia</li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> pinia\n</code></pre>\n<ol start=\"2\"><li>创建一个pinia</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// src/stores/index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createPinia <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> pinia\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//main.js</span>\n<span class=\"token keyword\">import</span> pinia <span class=\"token keyword\">from</span> <span class=\"token string\">'./stores'</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_Store_41\"></a>🌂认识 Store</h2>\n<p>一个 Store （如 Pinia）是一个实体，它会持有为绑定到你组件树的<mark>状态和业务逻辑</mark>，也就是保存了全局的状态</p>\n<blockquote>\n<p>这样就可以定义任意数量的Store来管理你的状态，包括 <code>state、getters、actions</code></p>\n</blockquote>\n<h3><a id=\"1_store_47\"></a>1. 定义一个store</h3>\n<ul><li> <p>Store 是使用 defineStore() 定义的，</p> </li><li> <p>且它需要一个唯一名称，作为第一个参数传递</p> </li></ul>\n<p><img alt=\"image-20220812152348346\" src=\"image\\55ddc85247e418a95e6a8f430116c48a.png\"/></p>\n<h3><a id=\"2__store_55\"></a>2. 使用 store</h3>\n<p><img alt=\"image-20220812152432057\" src=\"image\\9a26d2800541d38146baac32e0583655.png\"/></p>\n<p><img alt=\"image-20220812154916315\" src=\"image\\80aa1894e174b3215f8ceb03dd5c8ed2.png\"/></p>\n<h2><a id=\"__State_63\"></a>🧳 操作 State</h2>\n<p>state 是 store 的核心部分，store是用来实现我们管理状态的。</p>\n<p><img alt=\"image-20220812163115369\" src=\"image\\631149fcad9f5a459986e61066b79f53.png\"/></p>\n<ul><li><strong>方式一：直接一个个修改state</strong></li><li><strong>方式二：一次性修改多个状态</strong></li><li><strong>方式三：替换state</strong></li><li><strong>方式四：重置state</strong></li></ul>\n<p><img alt=\"image-20220812165009960\" src=\"image\\3d35373d49c5399130e6d12155a14192.png\"/></p>\n<p><img alt=\"image-20220812165858904\" src=\"image\\1b3ec94f5fadf2d232ba55ee963f6b30.png\"/></p>\n<p><img alt=\"image-20220812170350560\" src=\"image\\5f814a130035215fc4f6556ac1008eb5.png\"/></p>\n<p><img alt=\"image-20220812170540664\" src=\"image\\775b79997915e03ab9ece547e31b09ce.png\"/></p>\n<h2><a id=\"_Getters_84\"></a>🍨 Getters</h2>\n<h3><a id=\"1__Getters_86\"></a>1. 认识和定义 Getters</h3>\n<p><mark>Getters</mark>相当于Store的计算属性：</p>\n<ul><li>可以用 defineStore() 中的 getters 属性定义；</li><li>getters中可以定义接受一个state作为参数的函数；</li></ul>\n<h3><a id=\"2__Getters_93\"></a>2. 访问 Getters</h3>\n<ul><li> <p><strong>方式一：访问当前 store 的Getters</strong></p> </li><li> <p><strong>方式二：Getters 中访问自己的其他Getters</strong></p> </li><li> <p><strong>方式三：访问其他的 store 的Getters</strong></p> </li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 1. 基本使用</span>\n    <span class=\"token function\">debouleCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 2. 一个 getters 引入另外一个 getters</span>\n    <span class=\"token function\">useDebouleCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>debouleCount <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 3. getter也支持返回一个函数</span>\n    <span class=\"token function\">getFriendById</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> state<span class=\"token punctuation\">.</span>vagetabel<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">const</span> vagetabel <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>vagetabel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vagetabel<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> vagetabel\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 4.访问其他store中的Getters</span>\n    <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 获取user信息</span>\n      <span class=\"token keyword\">const</span> useStore <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 获取自己的state</span>\n      <span class=\"token comment\">// 拼接信息</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>useStore<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - count:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220812181122665\" src=\"image\\98dbb66d07ec4371836bce18f55c8c96.png\"/></p>\n<h2><a id=\"_Action_137\"></a>🍳认识和定义 Action</h2>\n<blockquote>\n<p>Action 可以理解成组件中的 methods ，和getters一样，在action中可以通过this访问整个store实例的所有操作。</p>\n</blockquote>\n<p><img alt=\"image-20220813121159762\" src=\"image\\5e9c085e496d362dc2c256c88d9e34f9.png\"/></p>\n<blockquote>\n<p>Action 是支持异步操作的，所以可以使用 await。</p>\n</blockquote>\n<p><img alt=\"image-20220813121241994\" src=\"image\\4da700421af9ecfe6e80c9fed0e1bc32.png\"/></p>\n<p><img alt=\"喜欢就一键三连吧！\" src=\"image\\bfb5dacd16813059ae2d91be6f88dae7.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}