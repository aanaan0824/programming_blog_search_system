{"blogid": "126743542", "writerAge": "码龄13年", "writerBlogNum": "137", "writerCollect": "10", "writerComment": "7", "writerFan": "14", "writerGrade": "4级", "writerIntegral": "1549", "writerName": "okokabcd", "writerProfileAdress": "writer_image\\profile_126743542.jpg", "writerRankTotal": "15036", "writerRankWeekly": "6905", "writerThumb": "12", "writerVisitNum": "24750", "blog_read_count": "19", "blog_time": "于 2022-09-07 13:13:50 发布", "blog_title": "leetcode 101. Symmetric Tree 对称二叉树(简单)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>一、题目大意</h1>\n<p>给你一个二叉树的根节点 root ， 检查它是否轴对称。</p>\n<p><strong>示例 1：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c2f75f326bd64f62a78389156fdb1cbb.png\"/></p>\n<blockquote>\n<p>输入：root = [1,2,2,3,4,4,3]<br/> 输出：true</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b1cf513508f849d484a3461b80dd9d9e.png\"/></p>\n<blockquote>\n<p>输入：root = [1,2,2,null,3,null,3]<br/> 输出：false</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul><li> <p>树中节点数目在范围 [1, 1000] 内</p> </li><li> <p>-100 &lt;= Node.val &lt;= 100</p> </li></ul>\n<p>**进阶：**你可以运用递归和迭代两种方法解决这个问题吗？</p>\n<p>来源：力扣（LeetCode）<br/> 链接：https://leetcode.cn/problems/symmetric-tree<br/> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h1><a id=\"_37\"></a>二、解题思路</h1>\n<p>判断一个树是否对称等价于判断左右子树是否对称。分四步:(1)如果两个子树都为空指针，则它们相等或对称(2) 如果两个子树只有一个为空指针，则它们不相等或不对称(3)如果两个子树根节点的值不相等， 则它们不相等或不对称(4)根据相等或对称要求，进行递归处理。</p>\n<h1><a id=\"_41\"></a>三、解题方法</h1>\n<h2><a id=\"31_Java_43\"></a>3.1 Java实现</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isMirror</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMirror</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// (1)如果两个子树都为空指针，则它们相等或对称</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// (2) 如果两个子树只有一个为空指针，则它们不相等或不对称</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// (3)如果两个子树根节点的值不相等， 则它们不相等或不对称</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> left<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// (4)根据相等或对称要求，进行递归处理。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isMirror</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMirror</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_81\"></a>四、总结小记</h1>\n<ul><li>2022/9/7 做管理给待遇一定要由远及近</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}