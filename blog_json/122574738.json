{"blogid": "122574738", "writerAge": "码龄6年", "writerBlogNum": "57", "writerCollect": "343", "writerComment": "73", "writerFan": "65", "writerGrade": "4级", "writerIntegral": "930", "writerName": "冰凌呀", "writerProfileAdress": "writer_image\\profile_122574738.jpg", "writerRankTotal": "19241", "writerRankWeekly": "24976", "writerThumb": "72", "writerVisitNum": "77762", "blog_read_count": "2880", "blog_time": "于 2022-01-19 11:36:13 发布", "blog_title": "C# socket tcp 通讯的实现（0基础）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>原理</h1>\n<p>        远程服务器运行服务器程序，建立起socket服务器，不断监听某端口，当有信息传递过来时，对该信息进行处理，并给信息来源反馈处理结果。</p>\n<p>        本地客户端建立器socket连接，连接上服务器后，可以向对方发送和接收消息。</p>\n<p>        总而言之，socket通讯仅仅是本地客户端和远程服务器进行信息交互的“电话协议”，客户端和服务器就是两台“电话”，这一点无论tcp通讯抑或是udp通讯皆是如此。</p>\n<h1>架构</h1>\n<p>        本文采用<strong>【控制台应用程序】</strong>的形式来表述，去除了桌面程序很多无必要代码生成的干扰，方便大家直接学习核心的部分。</p>\n<p>服务器socket搭建流程。</p>\n<p>        1.创建socket实例（选择ipv4协议，流形式，tcp协议作为其参数，因为这篇博客分享的是tcp通讯的实现）</p>\n<p>        2.绑定指定ip地址和端口号（本文示例ip=127.0.0.1，port=8808，个人比较迷信，喜欢喜庆一点的数字）</p>\n<p>        3.开启监听队列，设置好监听队列的最多数目，如果同时被太多客户端连接的话，我们可怜的内存和CPU可能处理不过来，设置队列的目的是让超过指定数目的客户端连接先排好队，再依次处理，这个排队的细节不需要我们处理，大佬底层里已经封装好（本文设置队列为8）</p>\n<p>        4.开启新线程接收客户端连接（由于同一时间可能不同的客户端对服务器发起连接请求，所以我们需要利用多线程技术）</p>\n<p>        5.在每个客户端连接后，我们对其开启接收信息线程（tcp是可靠连接，连接上之后，直到连接断开之前，双方都可以互相发送消息，直至某一方主动关闭）</p>\n<p></p>\n<p>客户端socket搭建流程</p>\n<p>        1.创建socket实例（选择ipv4协议，流形式，tcp协议作为其参数，因为这篇博客分享的是tcp通讯的实现）</p>\n<p>        2.连接上述ip地址和端口号（本文示例ip=127.0.0.1，port=8808，个人比较迷信，喜欢喜庆一点的数字）</p>\n<p>        3.开启发送消息线程</p>\n<p>        4.开启接收消息线程</p>\n<h1>代码（服务端）</h1>\n<pre><code class=\"language-cs\">class Program\n    {\n        static Socket server;\n\n        static readonly Dictionary&lt;string, Socket&gt; clients = new Dictionary&lt;string, Socket&gt;();\n\n        static void Main()\n        {\n\n            CreateServer();\n\n            new Thread(() =&gt;\n             {\n                 try\n                 {\n                     Accept(server);\n                 }\n                 catch (Exception e)\n                 {\n                     Console.WriteLine(e.Message);\n                 }\n             }).Start();\n        }\n\n        static void CreateServer()\n        {\n            server = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n            IPAddress iPAddress = new IPAddress(new byte[] { 127, 0, 0, 1 });\n            int port = 8088;\n            EndPoint endPoint = new IPEndPoint(iPAddress, port);\n            server.Bind(endPoint);\n            server.Listen(8);\n\n            Console.WriteLine(\"tcp端口已经打开,127.0.0.1:8088\");\n            DisplayAllClients();\n\n        }\n\n        static void Accept(Object obj)\n        {\n            Socket socket = (Socket)obj;\n            while (true)\n            {\n                Socket client = socket.Accept();\n                string ip = client.RemoteEndPoint.ToString();\n                if (!clients.ContainsKey(ip))\n                {\n                    clients.Add(ip, client);\n                    Console.WriteLine(ip + \"已连接\");\n                    DisplayAllClients();\n                }\n\n                new Thread(() =&gt;\n                {\n                    try\n                    {\n                        Recieve(client);\n                    }\n                    catch (Exception e)\n                    {\n                        Console.WriteLine(e.Message);\n                        clients.Remove(ip);\n                    }\n                })\n                { IsBackground = true }.Start();\n            }\n        }\n\n        static void Recieve(Object obj)\n        {\n            Socket client = (Socket)obj;\n            while (true)\n            {\n                try\n                {\n                    byte[] buffer = new byte[1024 * 1024 * 8];\n                    int length = client.Receive(buffer);\n\n                    string message = Encoding.Default.GetString(buffer, 0, length);\n\n                    if (message == null || message.Length == 0 || message == \"close\")\n                    {\n                        string ip = client.RemoteEndPoint.ToString();\n                        Console.WriteLine(ip + \"连接断开！\");\n                        clients.Remove(ip);\n                        DisplayAllClients();\n                        break;\n                    }\n\n                    Console.WriteLine(client.RemoteEndPoint.ToString() + \":\" + message);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(e.Message);\n                    clients.Remove(client.RemoteEndPoint.ToString());\n                    DisplayAllClients();\n                    break;\n                }\n            }\n        }\n\n        static void DisplayAllClients()\n        {\n            if (clients.Values.Count == 0)\n            {\n                Console.WriteLine(\"目前无连接\");\n                Console.WriteLine(\"等待新的连接\");\n            }\n            else\n            {\n                Console.WriteLine(\"目前所有连接\");\n                Console.WriteLine(\"+==========+\");\n                foreach (Socket client in clients.Values)\n                {\n                    Console.WriteLine(client.RemoteEndPoint.ToString());\n                }\n                Console.WriteLine(\"+==========+\");\n                Console.WriteLine();\n            }\n        }\n    }</code></pre>\n<p>别忘了引用名命空间</p>\n<blockquote>\n<p>using System;<br/> using System.Collections.Generic;<br/> using System.Net;<br/> using System.Net.Sockets;<br/> using System.Text;<br/> using System.Threading;        </p>\n</blockquote>\n<h1>代码（客户端）</h1>\n<pre><code class=\"language-cs\">class Program\n    {\n        static Socket client;\n\n        static void Main(string[] args)\n        {\n            CreateClient();\n\n            new Thread(() =&gt;\n            {\n                Thread.Sleep(500);\n                SendMessage();\n            }).Start();\n\n            new Thread(() =&gt;\n            {\n                Thread.Sleep(500);\n                ReceiveMessage();\n            }).Start();\n\n        }\n\n        static void CreateClient()\n        {\n            try\n            {\n                IPAddress iPAdress = new IPAddress(new byte[] { 127, 0, 0, 1 });\n                int port = 8088;\n                IPEndPoint iPEndPoint = new IPEndPoint(iPAdress, port);\n                client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n                client.Connect(iPEndPoint);\n                Console.WriteLine(\"已经连接上服务器\");\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n                Console.ReadKey();\n                Process.GetCurrentProcess().Close();\n            }\n        }\n\n        static void SendMessage()\n        {\n            try\n            {\n                while (true)\n                {\n                    Console.WriteLine(\"等待发送信息，回车-&gt;发送，close-&gt;断开连接\");\n                    string s = Console.ReadLine();\n                    client.Send(Encoding.Default.GetBytes(s));\n                    Console.WriteLine(\"发送成功！\\n\");\n\n                    if (s == \"close\")\n                    {\n                        client.Close();\n                        break;\n                    }\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n\n        static void ReceiveMessage()\n        {\n            try\n            {\n                while (true)\n                {\n                    byte[] buffer = new byte[1024 * 1024 * 8];\n                    int length = client.Receive(buffer);\n                    string msg = Encoding.Default.GetString(buffer, 0, length);\n                    if (buffer.Length &gt; 0)\n                    {\n                        Console.WriteLine(\"服务器:\" + msg);\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"断开连接\");\n                        break;\n                    }\n                    Thread.Sleep(100);\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }</code></pre>\n<p> 同样别忘了名命空间</p>\n<blockquote>\n<p>using System;<br/> using System.Diagnostics;<br/> using System.Net;<br/> using System.Net.Sockets;<br/> using System.Text;<br/> using System.Threading;</p>\n</blockquote>\n<h1>测试</h1>\n<p>        1.创建完成两个项目并分别复制代码进去后，引入名命空间去除编译报错，分别生成解决方案。</p>\n<p>        2.分别找到两个exe可执行文件，<strong>先开启服务器程序</strong>，再开启客户端程序。</p>\n<p><img alt=\"\" height=\"161\" src=\"image\\d392aeb8401b464abf965fd1d4c55517.png\" width=\"1029\"/></p>\n<p>        3.客户端主动向服务器发送消息</p>\n<p><img alt=\"\" height=\"220\" src=\"image\\789aa22772764e68aa66e43f5d4a4131.png\" width=\"1028\"/></p>\n<p>        4.客户端主动关闭连接</p>\n<p><img alt=\"\" height=\"279\" src=\"image\\5b8b439ec22d4c54b75910759c16bb0d.png\" width=\"557\"/></p>\n<h1>总结</h1>\n<p>        socket通讯在信息交互中占据非常重要的地位，我们学习C#这一门语言需要对这个知识点重点掌握，必须能够自己手撕socket通讯服务器和客户端的基本架构代码，这对个人理解多线程这一块内容也是非常有帮助的。</p>\n<p>        以上的介绍如果你都认真参考并自己动手参与代码编写，你就会发现我根本就没说得很详细。没错，我是故意的！</p>\n<p>        发现问题先自己优先思考，有问题欢迎加扣提出（17359 40176 冰凌），事先声明，免费答疑。如果你只是单纯来上课的，我可是会厚着脸皮要饭的哦。</p>\n<p> </p>\n</div>\n</div>"}