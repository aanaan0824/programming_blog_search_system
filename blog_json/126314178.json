{"blogid": "126314178", "writerAge": "码龄163天", "writerBlogNum": "80", "writerCollect": "2730", "writerComment": "3078", "writerFan": "3541", "writerGrade": "6级", "writerIntegral": "7836", "writerName": "北极的三哈", "writerProfileAdress": "writer_image\\profile_126314178.jpg", "writerRankTotal": "1807", "writerRankWeekly": "16", "writerThumb": "2685", "writerVisitNum": "648258", "blog_read_count": "7678", "blog_time": "已于 2022-08-24 16:28:34 修改", "blog_title": "Python基本数据类型字符串操作总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/4f047c5263c3424b9353a21c7f6ccf8b.gif#pic_center\"/></p>\n<blockquote>\n<p>🤵‍♂️ 个人主页: <a href=\"https://blog.csdn.net/m0_68744965?spm=1000.2115.3001.5343\">@Flyme awei 个主页</a><br/> 👨‍💻 作者简介：<code>Python</code>领域新星创作者。<br/> 📒 系列专栏：《<a href=\"https://blog.csdn.net/m0_68744965/category_11957439.html?spm=1001.2014.3001.5482\">在线编程-Python篇</a>》<br/> 🌐 推荐一款<code>找工作神器</code>网站: 《<a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">牛客网</a>》 |<code>笔试题库</code>|<code>面试经验</code>|<code>实习招聘内推</code>|<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dea16c53cc2248b98bbdde065312ba6a.png\"/><br/> 🐋 希望大家多多支持😘一起进步呀！<br/> 📝 如果文章对你有帮助的话，欢迎评论 💬点赞 👍收藏 📂加关注</p>\n</blockquote>\n<h1><a id=\"_11\"></a>前言</h1>\n<blockquote>\n<p>  今天是《<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a>》的第13天<br/>   <a href=\"http://t.csdn.cn/MlJR4\">昨天学习Python组合数据类型——集合类型：集合</a><br/>   今天学习Python基本数据类型——字符串</p>\n</blockquote>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_11\">前言</a></li><li><a href=\"#Python_22\">Python基本数据类型——字符串</a></li><li><ul><li><a href=\"#_30\">一、字符串的驻留机制</a></li><li><ul><li><a href=\"#1_31\">1.字符串</a></li><li><a href=\"#2_34\">2.什么叫字符串的驻留机制</a></li><li><a href=\"#3_55\">3.字符串驻留机制的几种情况（交互式）</a></li><li><a href=\"#42_96\">4.强制2个字符串指向同一个对象</a></li><li><a href=\"#5_PyCharm_108\">5. PyCharm对字符串进行了优化处理</a></li><li><a href=\"#6_110\">6.字符串驻留机制的优缺点</a></li></ul>\n</li><li><a href=\"#_116\">二、字符串类型的操作</a></li><li><ul><li><a href=\"#1_758\">1.字符串操作符</a></li><li><a href=\"#2_765\">2.字符串处理函数</a></li><li><a href=\"#3_775\">3.字符串处理方法</a></li><li><a href=\"#4_787\">4.字符串的查询操作</a></li><li><a href=\"#5_810\">5.字符串大小写转换操作</a></li><li><a href=\"#6_835\">6.字符串内容对齐操作方法</a></li><li><a href=\"#7_859\">7.字符串的劈分操作</a></li><li><a href=\"#8_889\">8.判断字符串的方法</a></li><li><a href=\"#9_923\">9.字符串的替换与合并操作</a></li><li><a href=\"#10_946\">10.字符串的比较运算</a></li><li><a href=\"#11_977\">11.字符串的切片操作</a></li><li><a href=\"#12_997\">12.格式化字符串</a></li><li><ul><li><a href=\"#121_998\">12.1为什么要格式化字符串</a></li><li><a href=\"#122_1002\">12.2格式化字符串的三种方式</a></li></ul>\n</li><li><a href=\"#13_1059\">13.数值与字符串类型转换函数</a></li></ul>\n</li><li><a href=\"#_1066\">三、字符串编码转换</a></li><li><ul><li><a href=\"#1_1067\">1.为什么要进行字符串编码转换</a></li><li><a href=\"#2_1071\">2.编码与解码的方式</a></li></ul>\n</li><li><a href=\"#_1087\">四、总结</a></li><li><ul><li><a href=\"#1_1088\">1.字符串操作符</a></li><li><a href=\"#2_1095\">2.字符串处理函数</a></li><li><a href=\"#3_1105\">3.字符串处理方法</a></li><li><a href=\"#4_1117\">4.字符串的查询操作</a></li><li><a href=\"#5_1125\">5.字符串大小写转换操作</a></li><li><a href=\"#6_1134\">6.字符串内容对齐操作方法</a></li><li><a href=\"#7_1142\">7.字符串的劈分操作</a></li><li><a href=\"#8_1148\">8.判断字符串的方法</a></li><li><a href=\"#9_1158\">9.字符串的替换与合并操作</a></li><li><a href=\"#10_1164\">10.字符串的比较运算</a></li><li><a href=\"#11_1176\">11.数值与字符串类型转换函数</a></li><li><a href=\"#__1185\">**`推 荐:牛客题霸-经典高频面试题库`**</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"Python_22\"></a>Python基本数据类型——字符串</h1>\n<blockquote>\n<p>字符串又称为字符序列，根据字符串的内容多少分为<font color=\"#d71345\" face=\"微软雅黑\">单行字符串</font>和<font color=\"#d71345\" face=\"微软雅黑\">多行字符串</font>。</p>\n</blockquote>\n<blockquote>\n<p><font color=\"#d71345\" face=\"微软雅黑\">单行字符串</font>可以由一对单引号<code>' '</code>或一对双引号<code>\" \"</code>作为边界，单引号和双引号的作用相同。当使用单引号时双引号可以作为字符串的一部分，使用双引号时，单引号可以作为字符串的一部分。</p>\n</blockquote>\n<blockquote>\n<p><font color=\"#d71345\" face=\"微软雅黑\">多行字符串</font>由一对三单引号<code>''' '''</code>或三双引号<code>\"\"\" \"\"\"</code>作为边界来表示，二者作用相同。</p>\n</blockquote>\n<h2><a id=\"_30\"></a>一、字符串的驻留机制</h2>\n<h3><a id=\"1_31\"></a>1.字符串</h3>\n<blockquote>\n<p>字符串：<code>Python</code>基本数据类型:是一个不可变序列</p>\n</blockquote>\n<h3><a id=\"2_34\"></a>2.什么叫字符串的驻留机制</h3>\n<blockquote>\n<p>仅保存一份相同且不可变字符串的方法，不同的值会被保存在字符串的驻留池中。</p>\n</blockquote>\n<blockquote>\n<p><code>Python</code>的驻留机制会对相同的字符串只保留一份拷贝，后续创建相同的字符串时，不会开辟新的空间，而是把字符串的地址付给新创建的变量。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo24.py</span>\n<span class=\"token comment\"># @author: Flyme awei</span>\n<span class=\"token comment\"># @email : 1071505897@qq.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/11 16:07</span>\n\n\na <span class=\"token operator\">=</span> <span class=\"token string\">'python'</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span>\nc <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''python'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5d8258c2ced84553a1f6f246f8aaecec.png\"/></p>\n<h3><a id=\"3_55\"></a>3.字符串驻留机制的几种情况（交互式）</h3>\n<ol><li>字符串的长度为<code>1</code></li><li>符合标识符的字符串（只包含字母，数字，下划线）</li><li>字符串只在编译是进行驻留，而非运行时</li><li><code>[-5,256]</code>之间的整数数字</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token keyword\">is</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token keyword\">is</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'abc_def'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">'abc_def'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token keyword\">is</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'abc%def'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">'abc%def'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token operator\">==</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> s1 <span class=\"token keyword\">is</span> s2\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token number\">256</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> b <span class=\"token operator\">=</span> <span class=\"token number\">256</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token keyword\">is</span> b\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token number\">257</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> b <span class=\"token operator\">=</span> <span class=\"token number\">257</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token keyword\">is</span> b\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">==</span> b\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> \n</code></pre>\n<h3><a id=\"42_96\"></a>4.强制2个字符串指向同一个对象</h3>\n<blockquote>\n<p><code>sys</code>中的<code>intern</code>方法强制两个字符串指向同一个对象</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''sys中的intern方法强制两个字符串指向同一个对象'''</span>\n<span class=\"token keyword\">import</span> sys\na <span class=\"token operator\">=</span> <span class=\"token string\">'abc%'</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'abc%'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\na <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span><span class=\"token builtin\">intern</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2989905230512 2989905230512</span>\n\n</code></pre>\n<h3><a id=\"5_PyCharm_108\"></a>5. PyCharm对字符串进行了优化处理</h3>\n<h3><a id=\"6_110\"></a>6.字符串驻留机制的优缺点</h3>\n<blockquote>\n<p>  当需要值相同的字符串时，可以直接从字符串池里拿来使用，避免频繁的创建和销毁，提升效率和节约内存，因此拼接字符串和修改字符串是会比较影响性能的。</p>\n</blockquote>\n<blockquote>\n<p>  在需要进行字符串拼接时建议使用 <code>str</code>类型的<code>join</code>方法，而非<code>+</code> ,因为<code>join()</code>方法是先计算出所有字符中的长度，然后再拷贝，只<code>new</code>一次对象，效率要比\"<code>+</code>\"效率高 。</p>\n</blockquote>\n<h2><a id=\"_116\"></a>二、字符串类型的操作</h2>\n<p><strong><code>Python</code>类<code>str</code>内置源码：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    str = \"(对象)——&gt; str\n    \n\tStr (bytes_or_buffer[， encoding[， errors]]) -&gt; Str\n\t\n\t从给定的对象创建一个新的字符串对象。如果编码或，则对象必须公开数据缓冲区\n\t将使用给定的编码和错误处理程序进行解码。\n\t\n\t否则，返回object.__str__()的结果(如果已定义)或repr(对象)。\n\t\n\t编码默认为sys.getdefaultencoding()。\n\t\n\tErrors默认为'strict'。\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">capitalize</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a capitalized version of the string.\n        \n        More specifically, make the first character have upper case and the rest lower\n        case.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">casefold</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return a version of the string suitable for caseless comparisons. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">center</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        返回一个居中长度为width的字符串。\n        \n\t\t使用指定的填充字符(默认为空格)填充。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        S.count(sub[， start[， end]]) -&gt; \n        \n        int .count(sub[， start[， end]]返回子字符串sub in不重叠出现的次数\n        \n\t\t字符串(开始:结束)。可选参数start和end是用切片表示法解释。\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Encode the string using the codec registered for encoding.\n        \n          encoding\n            The encoding in which to encode the string.\n          errors\n            The error handling scheme to use for encoding errors.\n            The default is 'strict' meaning that encoding errors raise a\n            UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and\n            'xmlcharrefreplace' as well as any other name registered with\n            codecs.register_error that can handle UnicodeEncodeErrors.\n          \n          使用注册用于编码的编解码器对字符串进行编码。\n          \n\t\t\t编码\n\t\t\t用于编码字符串的编码方式。\n\t\t\t错误\n\t\t\t用于编码错误的错误处理方案。\n\t\t\t默认值是'strict'，意味着编码错误会引发UnicodeEncodeError。\n\t\t\t其他可能的值有'ignore'， 'replace'和'xmlcharrefreplace'以及注册的任何其他名称编解码器。\n\t\t\t可以处理UnicodeEncodeErrors的register_error。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">endswith</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> suffix<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        S.endswith(suffix[, start[, end]]) -&gt; bool\n        \n        Return True if S ends with the specified suffix, False otherwise.\n        With optional start, test S beginning at that position.\n        With optional end, stop comparing S at that position.\n        suffix can also be a tuple of strings to try.\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">expandtabs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a copy where all tab characters are expanded using spaces.\n        \n        If tabsize is not given, a tab size of 8 characters is assumed.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        S.find(sub[, start[, end]]) -&gt; int\n        \n        Return the lowest index in S where substring sub is found,\n        such that sub is contained within S[start:end].  Optional\n        arguments start and end are interpreted as in slice notation.\n        \n        Return -1 on failure.\n\n        S.find(sub[， start[， end]]) -&gt; int\n        \n\t\t返回S中找到子串sub的最低下标，这样，sub包含在S[start:end]中。\n\t\t可选参数start和end被解释为切片表示法。\n\t\t\n\t\t失败时返回-1。\n\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># known special case of str.format</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        S.format(*args, **kwargs) -&gt; str\n        \n        Return a formatted version of S, using substitutions from args and kwargs.\n        The substitutions are identified by braces ('{' and '}').\n        \n        S.format(*args， **kwargs) -&gt; str\n        \n\t\t使用args和kwargs的替换，返回S的格式化版本。\n\t\t替换由大括号('{'和'}')标识。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">format_map</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mapping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        S.format_map(mapping) -&gt; str\n        \n        Return a formatted version of S, using substitutions from mapping.\n        The substitutions are identified by braces ('{' and '}').\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        S.index(sub[, start[, end]]) -&gt; int\n        \n        Return the lowest index in S where substring sub is found,\n        such that sub is contained within S[start:end].  Optional\n        arguments start and end are interpreted as in slice notation.\n        \n        Raises ValueError when the substring is not found.\n        \n        S.index(sub[， start[， end]]) -&gt; int \n        .index(sub[， start[， end]]\n\t\t\n\t\t返回S中找到子串sub的最低下标，这样，sub包含在S[start:end]中。\n\t\t可选参数start和end被解释为切片表示法。\n\t\t\n\t\t当没有找到子字符串时引发ValueError。\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isalnum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is an alpha-numeric string, False otherwise.\n        \n        A string is alpha-numeric if all characters in the string are alpha-numeric and\n        there is at least one character in the string.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is an alphabetic string, False otherwise.\n        \n        A string is alphabetic if all characters in the string are alphabetic and there\n        is at least one character in the string.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isascii</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if all characters in the string are ASCII, False otherwise.\n        \n        ASCII characters have code points in the range U+0000-U+007F.\n        Empty string is ASCII too.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isdecimal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is a decimal string, False otherwise.\n        \n        A string is a decimal string if all characters in the string are decimal and\n        there is at least one character in the string.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is a digit string, False otherwise.\n        \n        A string is a digit string if all characters in the string are digits and there\n        is at least one character in the string.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isidentifier</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is a valid Python identifier, False otherwise.\n        \n        Call keyword.iskeyword(s) to test whether string s is a reserved identifier,\n        such as \"def\" or \"class\".\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">islower</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is a lowercase string, False otherwise.\n        \n        A string is lowercase if all cased characters in the string are lowercase and\n        there is at least one cased character in the string.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isnumeric</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is a numeric string, False otherwise.\n        \n        A string is numeric if all characters in the string are numeric and there is at\n        least one character in the string.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isprintable</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is printable, False otherwise.\n        \n        A string is printable if all of its characters are considered printable in\n        repr() or if it is empty.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is a whitespace string, False otherwise.\n        \n        A string is whitespace if all characters in the string are whitespace and there\n        is at least one character in the string.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">istitle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is a title-cased string, False otherwise.\n        \n        In a title-cased string, upper- and title-case characters may only\n        follow uncased characters and lowercase characters only cased ones.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isupper</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return True if the string is an uppercase string, False otherwise.\n        \n        A string is uppercase if all cased characters in the string are uppercase and\n        there is at least one cased character in the string.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ab<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> pq<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> rs<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Concatenate any number of strings.\n        \n        The string whose method is called is inserted in between each given string.\n        The result is returned as a new string.\n        \n        Example: '.'.join(['ab', 'pq', 'rs']) -&gt; 'ab.pq.rs'\n        \n        连接任意数量的字符串。\n        \n\t\t调用其方法的字符串被插入到每个给定字符串之间。\n\t\t结果以新字符串的形式返回。\n\t\t\n\t\t例如:“。”。Join (['ab'， 'pq'， 'rs']) -&gt; 'ab.pq.rs'\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">ljust</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a left-justified string of length width.\n        \n        Padding is done using the specified fill character (default is a space).\n        \n        返回长度为width的左对齐字符串。\n        \n\t\t使用指定的填充字符(默认为空格)填充。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lower</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return a copy of the string converted to lowercase. \n        \t返回转换为小写的字符串副本。\"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lstrip</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a copy of the string with leading whitespace removed.\n        \n        If chars is given and not None, remove characters in chars instead.\n        \n        返回删除前导空格的字符串副本。\n        \n\t\t如果给出了chars而不是None，则删除chars中的字符。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maketrans</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a translation table usable for str.translate().\n        \n        If there is only one argument, it must be a dictionary mapping Unicode\n        ordinals (integers) or characters to Unicode ordinals, strings or None.\n        Character keys will be then converted to ordinals.\n        If there are two arguments, they must be strings of equal length, and\n        in the resulting dictionary, each character in x will be mapped to the\n        character at the same position in y. If there is a third argument, it\n        must be a string, whose characters will be mapped to None in the result.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Partition the string into three parts using the given separator.\n        \n        This will search for the separator in the string.  If the separator is found,\n        returns a 3-tuple containing the part before the separator, the separator\n        itself, and the part after it.\n        \n        If the separator is not found, returns a 3-tuple containing the original string\n        and two empty strings.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a copy with all occurrences of substring old replaced by new.\n        \n          count\n            Maximum number of occurrences to replace.\n            -1 (the default value) means replace all occurrences.\n        \n        If the optional argument count is given, only the first count occurrences are\n        replaced.\n        \n        返回一个副本，其中所有出现的子字符串old都被new替换。\n        \n\t\t数\n\t\t替换的最大次数。\n\t\t-1(默认值)表示替换所有匹配项。\n\t\t\n\t\t如果给出了可选参数count，则只出现第一个count更换。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rfind</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        S.rfind(sub[, start[, end]]) -&gt; int\n        \n        Return the highest index in S where substring sub is found,\n        such that sub is contained within S[start:end].  Optional\n        arguments start and end are interpreted as in slice notation.\n        \n        Return -1 on failure.\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rindex</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        S.rindex(sub[, start[, end]]) -&gt; int\n        \n        Return the highest index in S where substring sub is found,\n        such that sub is contained within S[start:end].  Optional\n        arguments start and end are interpreted as in slice notation.\n        \n        Raises ValueError when the substring is not found.\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rjust</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a right-justified string of length width.\n        \n        Padding is done using the specified fill character (default is a space).\n        \n        返回长度为width的右对齐字符串。\n        \n\t\t使用指定的填充字符(默认为空格)填充。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rpartition</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Partition the string into three parts using the given separator.\n        \n        This will search for the separator in the string, starting at the end. If\n        the separator is found, returns a 3-tuple containing the part before the\n        separator, the separator itself, and the part after it.\n        \n        If the separator is not found, returns a 3-tuple containing two empty strings\n        and the original string.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rsplit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a list of the words in the string, using sep as the delimiter string.\n        \n          sep\n            The delimiter according which to split the string.\n            None (the default value) means split according to any whitespace,\n            and discard empty strings from the result.\n          maxsplit\n            Maximum number of splits to do.\n            -1 (the default value) means no limit.\n        \n        Splits are done starting at the end of the string and working to the front.\n        \n        返回字符串中的单词列表，使用sep作为分隔符字符串。\n\t\tsep\n\t\t 用来分割字符串的分隔符。\n\t\t None(默认值)表示根据任何空格进行分割，并从结果中丢弃空字符串。\n\t\t\n\t\tmaxsplit\n\t\t 最大分割次数。\n\t\t -1(默认值)表示无限制。\n\t\t\n\t  劈叉从绳子的末端开始，一直到前面。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rstrip</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a copy of the string with trailing whitespace removed.\n        \n        If chars is given and not None, remove characters in chars instead.\n        \n        返回字符串的副本，删除尾随空格。\n        \n\t\t如果给出了chars而不是None，则删除chars中的字符。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a list of the words in the string, using sep as the delimiter string.\n        \n          sep\n            The delimiter according which to split the string.\n            None (the default value) means split according to any whitespace,\n            and discard empty strings from the result.\n          maxsplit\n            Maximum number of splits to do.\n            -1 (the default value) means no limit.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">splitlines</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a list of the lines in the string, breaking at line boundaries.\n        \n        Line breaks are not included in the resulting list unless keepends is given and\n        true.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">startswith</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        S.startswith(prefix[, start[, end]]) -&gt; bool\n        \n        Return True if S starts with the specified prefix, False otherwise.\n        With optional start, test S beginning at that position.\n        With optional end, stop comparing S at that position.\n        prefix can also be a tuple of strings to try.\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">strip</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a copy of the string with leading and trailing whitespace removed.\n        \n        If chars is given and not None, remove characters in chars instead.\n        \n        返回删除前导和尾随空格的字符串副本。\n        \n\t\t如果给出了chars而不是None，则删除chars中的字符。\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">swapcase</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Convert uppercase characters to lowercase and lowercase characters to uppercase. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">title</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a version of the string where each word is titlecased.\n        \n        More specifically, words start with uppercased characters and all remaining\n        cased characters have lower case.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Replace each character in the string using the given translation table.\n        \n          table\n            Translation table, which must be a mapping of Unicode ordinals to\n            Unicode ordinals, strings, or None.\n        \n        The table must implement lookup/indexing via __getitem__, for instance a\n        dictionary or list.  If this operation raises LookupError, the character is\n        left untouched.  Characters mapped to None are deleted.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">upper</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return a copy of the string converted to uppercase. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">zfill</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Pad a numeric string with zeros on the left, to fill a field of the given width.\n        \n        The string is never truncated.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self+value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__contains__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return key in self. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self==value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__format__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return a formatted version of the string as described by format_spec. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getattribute__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return getattr(self, name). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self[key]. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getnewargs__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__ge__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&gt;=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__gt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&gt;value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__hash__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return hash(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'strict'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># known special case of str.__init__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        str(object='') -&gt; str\n        str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n        \n        Create a new string object from the given object. If encoding or\n        errors is specified, then the object must expose a data buffer\n        that will be decoded using the given encoding and error handler.\n        Otherwise, returns the result of object.__str__() (if defined)\n        or repr(object).\n        encoding defaults to sys.getdefaultencoding().\n        errors defaults to 'strict'.\n        # (copied from class doc)\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Implement iter(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return len(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__le__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&lt;=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&lt;value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__mod__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self%value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__mul__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self*value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span> <span class=\"token comment\"># known case of __new__</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Create and return a new object.  See help(type) for accurate signature. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__ne__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self!=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return repr(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__rmod__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return value%self. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__rmul__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return value*self. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__sizeof__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return the size of the string in memory, in bytes. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return str(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n</code></pre>\n<h3><a id=\"1_758\"></a>1.字符串操作符</h3>\n<table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td><code>x+y</code>,连接两个字符串<code>x</code>和<code>y</code></td></tr><tr><td><code>*</code></td><td><code>x*n</code>或<code>n*x</code>,复制n次字符串<code>x</code></td></tr><tr><td><code>in</code></td><td><code>x in s</code>,如果<code>x</code>是<code>s</code>的字串，返回<code>True</code>,否则返回<code>False</code></td></tr></tbody></table>\n<h3><a id=\"2_765\"></a>2.字符串处理函数</h3>\n<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>len(x)</code></td><td>返回字符串<code>x</code>的长度，也可返回其它组合数据类型元素的个数</td></tr><tr><td><code>str(x)</code></td><td>返回任意类型<code>x</code>所对应的字符串形式</td></tr><tr><td><code>char(x)</code></td><td>返回<code>Unicode</code>编码<code>x</code>对应的单字符</td></tr><tr><td><code>ord(x)</code></td><td>返回x表示的Unicode编码</td></tr><tr><td><code>hex(x)</code></td><td>返回整数<code>x</code>对应<code>十六进制</code>的小写形式字符串</td></tr><tr><td><code>oct(x)</code></td><td>返回整数<code>x</code>对应<code>八进制</code>的小写形式字符串</td></tr></tbody></table>\n<h3><a id=\"3_775\"></a>3.字符串处理方法</h3>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>s.lower()</code></td><td>字符串<code>s</code>全部转为小写</td></tr><tr><td><code>s.upper(</code>)</td><td>字符串<code>s</code>全部转为大写</td></tr><tr><td><code>s.split(sep=None)</code></td><td>返回一个列表，由<code>s</code>根据<code>sep</code>被分割的部分构成，省略<code>sep</code>默认以<code>空格</code>分割</td></tr><tr><td><code>s.count(sub)</code></td><td>返回字串<code>sub</code>出现的次数</td></tr><tr><td><code>s.replace(old, new)</code></td><td>返回字符串<code>s</code>的副本，所有<code>old</code>字串被替换为<code>new</code></td></tr><tr><td><code>s.center(width, fillchar)</code></td><td>字符串居中函数，<code>fillchar</code>参数可选</td></tr><tr><td><code>s.strip(chars)</code></td><td>从字符串<code>s</code>中去掉咋其左侧和右侧<code>chars</code>中出现的字符</td></tr><tr><td><code>s.join(iter)</code></td><td>将<code>iter</code>变量的每一个元素增加一个<code>s</code>字符串</td></tr></tbody></table>\n<h3><a id=\"4_787\"></a>4.字符串的查询操作</h3>\n<table><thead><tr><th>方法名称</th><th>作用</th></tr></thead><tbody><tr><td><code>index()</code></td><td>查找字串<code>substr</code>第一次出现的位置，如果查找的字串不存在，抛<code>ValueError</code>异常</td></tr><tr><td><code>rindex()</code></td><td>查找字串<code>substr</code>最后一次出现的位置，如果查找的字串不存在，抛<code>ValueError</code>异常</td></tr><tr><td><code>find()</code></td><td>查找字串<code>substr</code>第一次出现的位置，如果查找的字串不存在，返回<code>-1</code></td></tr><tr><td><code>rfind()</code></td><td>查找字串<code>substr</code>最后一次出现的位置，如果查找的字串不存在，返回<code>-1</code></td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''\nindex（）查找第一次出现的位置  抛异常\nrindex（）查找最后一次次出现的位置  抛异常\n\nfind（）查找第一次出现的位置  不抛异常，返回值为-1\nrfind（）查找最后一次出现的位置  抛异常\n'''</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello,hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>rindex<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'lo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'ui'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -1</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\228ab12dbdb345b093fde7bd42d8e449.png\"/></p>\n<h3><a id=\"5_810\"></a>5.字符串大小写转换操作</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>upper()</code></td><td>把所有的字符串转换为<code>大写</code>字母</td></tr><tr><td><code>lower()</code></td><td>把所有的字符串转换为<code>小写</code>字母</td></tr><tr><td><code>swapcase()</code></td><td>将<code>大写</code>字符转换为<code>小写</code>字符，将<code>小写</code>字符转换为<code>大写</code>字符。</td></tr><tr><td><code>capitalize()</code></td><td>使<code>第一个字符</code>为<code>大写</code>字母，其余字符为小写字母</td></tr><tr><td><code>title()</code></td><td>返回字符串的一个版本，其中每个单词都有标题。更具体地说，单词以大写字母开头，其余都以大写字母开头区分大小写的字符小写。</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符串的大小写转换</span>\n<span class=\"token comment\"># 1.upper（）把字符串中的所有字符转为大写</span>\n<span class=\"token comment\"># 2.lower（）把字符串中的所有字符都转换为小写</span>\n<span class=\"token comment\"># 3.swap case() 大转小，小转大</span>\n<span class=\"token comment\"># 4.capitalize()把第一个字符转为大写，其余字符转为小写</span>\n<span class=\"token comment\"># 5.title（）把字符串首字母转换为大写，把剩余的转换为小写</span>\n\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hellopython'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 转大写</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 转换后id改变，会产生一个新的空间</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>swapcase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\db659603310b4463adba85c02682e318.png\"/></p>\n<h3><a id=\"6_835\"></a>6.字符串内容对齐操作方法</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>center(width,'')</code></td><td>返回一个居中长度为<code>width</code>的字符串。使用指定的填充字符(默认为空格)填充。</td></tr><tr><td><code>ljust(width,' ')</code></td><td>返回长度为<code>width</code>的左对齐字符串。使用指定的填充字符(默认为空格)填充。</td></tr><tr><td><code>rjust(width,' ')</code></td><td>返回长度为<code>width</code>的右对齐字符串。使用指定的填充字符(默认为空格)填充。</td></tr><tr><td><code>zfill('int')</code></td><td>在左侧填充<code>数字字符串</code>，以填充给定宽度的字段。字符串永远不会被截断。</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">'''字符串的对其操作'''</span>\n<span class=\"token comment\"># 1.center 居中对齐</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello,python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2.ljust 左对齐</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3.rjust 右对齐</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3.zfill 右对齐，左侧为0填充</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b8cd87a469f44c47bb916cb24fd7ae4d.png\"/></p>\n<h3><a id=\"7_859\"></a>7.字符串的劈分操作</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>split()</code></td><td>返回字符串中的单词列表，使用<code>sep</code>作为分隔符字符串。<code>sep</code>用来分割字符串的分隔符。None(默认值)表示根据任何空格进行分割，并从结果中丢弃空字符串。<code>maxsplit</code>最大分割次数。<code>-1</code>(默认值)表示无限制。</td></tr><tr><td><code>rsplit()</code></td><td>返回字符串中的单词列表，使用<code>sep</code>作为分隔符字符串。<code>sep</code>用来分割字符串的分隔符。<code>None</code>(默认值)表示根据任何空格进行分割，并从结果中丢弃空字符串。<code>maxsplit</code>最大分割次数。<code>-1</code>(默认值)表示无限制。劈叉从绳子的<code>末端</code>开始，一直到前面。</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符串的劈分操作  split</span>\n<span class=\"token comment\"># 1. split从字符串左侧开始分割，默认值为空格字符串，返回值是一个列表</span>\n<span class=\"token comment\">#  以通过参数sep指定劈分字符串是劈分符</span>\n<span class=\"token comment\"># 通过maxsplit指定劈分字符串的最大劈分次数</span>\n\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello#world#python'</span>\nlst <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\ns1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello|world|python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>sep<span class=\"token operator\">=</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello|world|python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>sep<span class=\"token operator\">=</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">,</span> maxsplit<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 以参数sep 指定劈分字符串是劈分符</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2.rsplit  从右侧开始劈分</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>rsplit<span class=\"token punctuation\">(</span>sep<span class=\"token operator\">=</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">,</span> maxsplit<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9c69f4ffb235421eadf98633599da956.png\"/></p>\n<h3><a id=\"8_889\"></a>8.判断字符串的方法</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>isidentifier()</code></td><td>判断字符串是合法标识符</td></tr><tr><td><code>isspace()</code></td><td>判断字符串是否全部由空字符串组成（回车，换行，水平制表）</td></tr><tr><td><code>isalpha()</code></td><td>判断是否全部由字符组成</td></tr><tr><td><code>isdecimal()</code></td><td>判断是否全部由十进制数字组成</td></tr><tr><td><code>isnumeric()</code></td><td>判断是否全部由数字组成</td></tr><tr><td><code>isalnum()</code></td><td>判断字符串是否全部由字母和数字组成</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1. isidentifier 判断字符串是合法标识符</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello, python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.'</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>isidentifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span>isidentifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n\n<span class=\"token comment\"># 2. isspase 判断字符串是否全部由空字符串组成（回车，换行，水平制表）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'   '</span><span class=\"token punctuation\">.</span>isspace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. isalpha  判断是否全部由字符组成</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fhaisdfh'</span><span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4. isnumeric 判断是否全部由数字组成</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'67867'</span><span class=\"token punctuation\">.</span>isnumeric<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5. isdecimal 判断是否全部由十进制数字组成</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'78'</span><span class=\"token punctuation\">.</span>isdecimal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 6. iszlnum 判断字符串是否全部由字母和数字组成</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yut6786'</span><span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\746d45756bf04f01bd17b93795162583.png\"/></p>\n<h3><a id=\"9_923\"></a>9.字符串的替换与合并操作</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>replace()</code></td><td>返回一个副本，其中所有出现的子字符串<code>old</code>都被<code>new</code>替换。<code>count</code>替换的最大次数。<code>-1</code>(默认值)表示替换所有匹配项。如果给出了可选参数<code>count</code>，则只出现第一个<code>count</code>更换。</td></tr><tr><td><code>join()</code></td><td>连接任意数量的字符串。调用其方法的字符串被插入到每个给定字符串之间。结果以新字符串的形式返回。例如: <code>'.'.join(['ab', 'pq', 'rs']) -&gt; 'ab.pq.rs'</code></td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.字符串的替换  replace（）</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello,Python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'Python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello,python,python,python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 通过第三个参数指定最大替换次数</span>\n\n<span class=\"token comment\"># 2.字符串合并 join（） 将列表或元组中字符串合并成一个字符串</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\645f47ed78d143759c52129057d0befb.png\"/></p>\n<h3><a id=\"10_946\"></a>10.字符串的比较运算</h3>\n<blockquote>\n<p>两个字符串进行比较时，比较的是<code>ordinal value</code> （原始值) ，如果相等则继续比较下一个字符，知道两个字符串不相等</p>\n</blockquote>\n<table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>!=</td><td>不等于</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符窜的比较</span>\n<span class=\"token comment\"># 运算符 &gt; &lt; == &lt;= &gt;= !=</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span> <span class=\"token operator\">&gt;</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span> <span class=\"token operator\">&gt;</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''调用内置函数ord可以得到指定字符的ordinal value '''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''== 与 is 的区别'''</span>\n<span class=\"token comment\"># == 比较的是 value</span>\n<span class=\"token comment\"># is 比较的是 id</span>\na <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'pthon'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bccc017b8d8344d0bac01cd0892de111.png\"/></p>\n<h3><a id=\"11_977\"></a>11.字符串的切片操作</h3>\n<blockquote>\n<p>对字符串中某个子串或区间的检索称为切片。</p>\n</blockquote>\n<p><strong>语法如下：</strong></p>\n<blockquote>\n<p><code>字符串或字符串变量[N:M]</code><br/> 切片获取字符串<code>N</code>到<code>M</code>（不包含<code>M</code>）的子字符串，其中，<code>N</code>和<code>M</code>为字符串的索引序号，可以混合使用正向递增序号和反向递减序号。切片要求<code>N</code>和<code>M</code> 都在字符串的索引区间，如果<code>N</code>大于<code>M</code>，则返回空字符串。如果<code>N</code>缺失，则默认将<code>N</code>设为<code>0</code>；如果<code>M</code>缺失，则默认表示到字符串结尾。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字符串的切片操作</span>\n<span class=\"token comment\"># 字符串是不可变类型 不能进行 增 删 改 操作</span>\n<span class=\"token comment\"># 切片将产生新的对象</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello,python'</span>\n<span class=\"token comment\"># print(s[start : end : step])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认从字符串最后一个语速开始切，到字符串第一个元素结束</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a2f0ffe94e0646959bef36ecee081dd2.png\"/></p>\n<h3><a id=\"12_997\"></a>12.格式化字符串</h3>\n<h4><a id=\"121_998\"></a>12.1为什么要格式化字符串</h4>\n<blockquote>\n<p>在字符串中整合变量是需要使用字符串的格式化方法。<br/> 字符串格式化用于解决字符串和变量同时输出的格式安排问题。</p>\n</blockquote>\n<h4><a id=\"122_1002\"></a>12.2格式化字符串的三种方式</h4>\n<ol><li><code>%</code>作为占位符</li><li><code>{}</code>作为占位符’'.format()</li><li><code>f</code> ‘我叫<code>%s</code>，今年<code>%d</code>岁了’ <code>%s</code> 占了一个字符串 <code>%d</code> 占了一个整数</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9a7dfa85b4d64b0abcb819c7fc4801c0.png\"/><br/> <code>s = \"python\"</code></p>\n<ul><li><code>&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;</code></li></ul>\n<table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td><code>{:25}.format(s)</code></td><td>默认左对齐</td></tr><tr><td><code>{:1}.format(s)</code></td><td>指定宽度为<code>1</code>，不足变量<code>s</code>的宽度，以实际变量宽度为准</td></tr><tr><td><code>{:^25}.format(s)</code></td><td>居中对齐</td></tr><tr><td><code>{:&gt;25}.format(s)</code></td><td>右对齐</td></tr><tr><td><code>{:*^25}.format(s)</code></td><td>居中对齐，填充<code>*</code>号</td></tr><tr><td><code>{:+^25}.format(s)</code></td><td>居中对齐填充<code>+</code>号</td></tr><tr><td><code>{:^1}.format(s)</code></td><td>指定宽度为<code>1</code>，不足变量<code>s</code>的宽度，以实际变量宽度为准</td></tr></tbody></table>\n<ul><li><code>&lt;,&gt;&lt;.精度&gt;&lt;类型&gt;</code>,其中，逗号<code>(,)</code>用于显示数字类型的千分位分隔符。</li></ul>\n<table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td><code>\"{:-^25,}\".format(1234567890)</code></td><td><code>'------1,234,567,890------'</code></td></tr><tr><td><code>\"{0:-^25}\".format(1234567890)</code></td><td><code>'-------1234567890--------'</code></td></tr></tbody></table>\n<ul><li><code>&lt;.精度&gt;</code>有小数点<code>(.)</code>开头。</li></ul>\n<table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td><code>\"{:2f}\".format(12345.6788890)</code></td><td><code>'12345.67'</code></td></tr><tr><td><code>\"{:25.3f}\".format(12345.67890)</code></td><td><code>' 12345.679'</code></td></tr><tr><td><code>\"{:.5}\".format(\"123456789\")</code></td><td><code>'12345</code>’</td></tr><tr><td><code>\"{:.15)\".format('123456789')</code></td><td><code>'123456789'</code></td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 格式化字符串</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span>\nage <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我叫%s,今年%d岁了'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># % 作为占位符</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我的名字是{0}，我今年{1}岁了'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {} 作为占位符</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'我叫</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">，今年</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>age<span class=\"token punctuation\">}</span></span><span class=\"token string\">岁'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 表示宽度 %10d</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%10d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 表示小数点位数 %.nf  精度 :.n</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.3f'</span> <span class=\"token operator\">%</span> <span class=\"token number\">3.78234685</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 三位小数</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{:.3}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.34638567</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 三位有效数字</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\be42f39bd6144e73aacfa0615daf0692.png\"/></p>\n<h3><a id=\"13_1059\"></a>13.数值与字符串类型转换函数</h3>\n<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>int(x)</code></td><td>将<code>x</code>转换为整数，<code>x</code>可以是浮点数或数字类字符串</td></tr><tr><td><code>folat(x)</code></td><td>将<code>x</code>转换为浮点数，<code>x</code>可以是整数或数字类字符串</td></tr><tr><td><code>str(x</code>)</td><td>将<code>x</code>转换为整数，<code>x</code>可以是整数或浮点数</td></tr></tbody></table>\n<h2><a id=\"_1066\"></a>三、字符串编码转换</h2>\n<h3><a id=\"1_1067\"></a>1.为什么要进行字符串编码转换</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e67af7a390b04666b5604a899d84f9d8.png\"/></p>\n<h3><a id=\"2_1071\"></a>2.编码与解码的方式</h3>\n<p><strong>编码</strong>：<code>s.encode()</code>将字符串转换为<code>二进制</code>数据(<code>bytes</code>)<br/> <strong>解码</strong>：<code>s.decode()</code>将<code>bytes</code>类型的数据转换成字符串类型</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">'人生苦短，我用Python！'</span>\n<span class=\"token comment\"># 编码</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf_8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># utf-8 一个中文占两个字节</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'GBK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># GBK 一个中文占三个字节</span>\n\n<span class=\"token comment\"># 解码</span>\nbyte <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'GBK'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 编码</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'GBK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 解码</span>\n<span class=\"token comment\"># 编码和解码格式要相同</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\73de2458c0954b59a35be66e2a8eaf80.png\"/></p>\n<h2><a id=\"_1087\"></a>四、总结</h2>\n<h3><a id=\"1_1088\"></a>1.字符串操作符</h3>\n<table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td><code>x+y</code>,连接两个字符串<code>x</code>和<code>y</code></td></tr><tr><td><code>*</code></td><td><code>x*n</code>或<code>n*x</code>,复制n次字符串<code>x</code></td></tr><tr><td><code>in</code></td><td><code>x in s</code>,如果<code>x</code>是<code>s</code>的字串，返回<code>True</code>,否则返回<code>False</code></td></tr></tbody></table>\n<h3><a id=\"2_1095\"></a>2.字符串处理函数</h3>\n<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>len(x)</code></td><td>返回字符串<code>x</code>的长度，也可返回其它组合数据类型元素的个数</td></tr><tr><td><code>str(x)</code></td><td>返回任意类型<code>x</code>所对应的字符串形式</td></tr><tr><td><code>char(x)</code></td><td>返回<code>Unicode</code>编码<code>x</code>对应的单字符</td></tr><tr><td><code>ord(x)</code></td><td>返回x表示的Unicode编码</td></tr><tr><td><code>hex(x)</code></td><td>返回整数<code>x</code>对应<code>十六进制</code>的小写形式字符串</td></tr><tr><td><code>oct(x)</code></td><td>返回整数<code>x</code>对应<code>八进制</code>的小写形式字符串</td></tr></tbody></table>\n<h3><a id=\"3_1105\"></a>3.字符串处理方法</h3>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>s.lower()</code></td><td>字符串<code>s</code>全部转为小写</td></tr><tr><td><code>s.upper(</code>)</td><td>字符串<code>s</code>全部转为大写</td></tr><tr><td><code>s.split(sep=None)</code></td><td>返回一个列表，由<code>s</code>根据<code>sep</code>被分割的部分构成，省略<code>sep</code>默认以<code>空格</code>分割</td></tr><tr><td><code>s.count(sub)</code></td><td>返回字串<code>sub</code>出现的次数</td></tr><tr><td><code>s.replace(old, new)</code></td><td>返回字符串<code>s</code>的副本，所有<code>old</code>字串被替换为<code>new</code></td></tr><tr><td><code>s.center(width, fillchar)</code></td><td>字符串居中函数，<code>fillchar</code>参数可选</td></tr><tr><td><code>s.strip(chars)</code></td><td>从字符串<code>s</code>中去掉咋其左侧和右侧<code>chars</code>中出现的字符</td></tr><tr><td><code>s.join(iter)</code></td><td>将<code>iter</code>变量的每一个元素增加一个<code>s</code>字符串</td></tr></tbody></table>\n<h3><a id=\"4_1117\"></a>4.字符串的查询操作</h3>\n<table><thead><tr><th>方法名称</th><th>作用</th></tr></thead><tbody><tr><td><code>index()</code></td><td>查找字串<code>substr</code>第一次出现的位置，如果查找的字串不存在，抛<code>ValueError</code>异常</td></tr><tr><td><code>rindex()</code></td><td>查找字串<code>substr</code>最后一次出现的位置，如果查找的字串不存在，抛<code>ValueError</code>异常</td></tr><tr><td><code>find()</code></td><td>查找字串<code>substr</code>第一次出现的位置，如果查找的字串不存在，返回<code>-1</code></td></tr><tr><td><code>rfind()</code></td><td>查找字串<code>substr</code>最后一次出现的位置，如果查找的字串不存在，返回<code>-1</code></td></tr></tbody></table>\n<h3><a id=\"5_1125\"></a>5.字符串大小写转换操作</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>upper()</code></td><td>把所有的字符串转换为<code>大写</code>字母</td></tr><tr><td><code>lower()</code></td><td>把所有的字符串转换为<code>小写</code>字母</td></tr><tr><td><code>swapcase()</code></td><td>将<code>大写</code>字符转换为<code>小写</code>字符，将<code>小写</code>字符转换为<code>大写</code>字符。</td></tr><tr><td><code>capitalize()</code></td><td>使<code>第一个字符</code>为<code>大写</code>字母，其余字符为小写字母</td></tr><tr><td><code>title()</code></td><td>返回字符串的一个版本，其中每个单词都有标题。更具体地说，单词以大写字母开头，其余都以大写字母开头区分大小写的字符小写。</td></tr></tbody></table>\n<h3><a id=\"6_1134\"></a>6.字符串内容对齐操作方法</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>center(width,'')</code></td><td>返回一个居中长度为<code>width</code>的字符串。使用指定的填充字符(默认为空格)填充。</td></tr><tr><td><code>ljust(width,' ')</code></td><td>返回长度为<code>width</code>的左对齐字符串。使用指定的填充字符(默认为空格)填充。</td></tr><tr><td><code>rjust(width,' ')</code></td><td>返回长度为<code>width</code>的右对齐字符串。使用指定的填充字符(默认为空格)填充。</td></tr><tr><td><code>zfill('int')</code></td><td>在左侧填充<code>数字字符串</code>，以填充给定宽度的字段。字符串永远不会被截断。</td></tr></tbody></table>\n<h3><a id=\"7_1142\"></a>7.字符串的劈分操作</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>split()</code></td><td>返回字符串中的单词列表，使用<code>sep</code>作为分隔符字符串。<code>sep</code>用来分割字符串的分隔符。None(默认值)表示根据任何空格进行分割，并从结果中丢弃空字符串。<code>maxsplit</code>最大分割次数。<code>-1</code>(默认值)表示无限制。</td></tr><tr><td><code>rsplit()</code></td><td>返回字符串中的单词列表，使用<code>sep</code>作为分隔符字符串。<code>sep</code>用来分割字符串的分隔符。<code>None</code>(默认值)表示根据任何空格进行分割，并从结果中丢弃空字符串。<code>maxsplit</code>最大分割次数。<code>-1</code>(默认值)表示无限制。劈叉从绳子的<code>末端</code>开始，一直到前面。</td></tr></tbody></table>\n<h3><a id=\"8_1148\"></a>8.判断字符串的方法</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>isidentifier()</code></td><td>判断字符串是合法标识符</td></tr><tr><td><code>isspace()</code></td><td>判断字符串是否全部由空字符串组成（回车，换行，水平制表）</td></tr><tr><td><code>isalpha()</code></td><td>判断是否全部由字符组成</td></tr><tr><td><code>isdecimal()</code></td><td>判断是否全部由十进制数字组成</td></tr><tr><td><code>isnumeric()</code></td><td>判断是否全部由数字组成</td></tr><tr><td><code>isalnum()</code></td><td>判断字符串是否全部由字母和数字组成</td></tr></tbody></table>\n<h3><a id=\"9_1158\"></a>9.字符串的替换与合并操作</h3>\n<table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>replace()</code></td><td>返回一个副本，其中所有出现的子字符串<code>old</code>都被<code>new</code>替换。<code>count</code>替换的最大次数。<code>-1</code>(默认值)表示替换所有匹配项。如果给出了可选参数<code>count</code>，则只出现第一个<code>count</code>更换。</td></tr><tr><td><code>join()</code></td><td>连接任意数量的字符串。调用其方法的字符串被插入到每个给定字符串之间。结果以新字符串的形式返回。例如: <code>'.'.join(['ab', 'pq', 'rs']) -&gt; 'ab.pq.rs'</code></td></tr></tbody></table>\n<h3><a id=\"10_1164\"></a>10.字符串的比较运算</h3>\n<table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>!=</td><td>不等于</td></tr></tbody></table>\n<h3><a id=\"11_1176\"></a>11.数值与字符串类型转换函数</h3>\n<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>int(x)</code></td><td>将<code>x</code>转换为整数，<code>x</code>可以是浮点数或数字类字符串</td></tr><tr><td><code>folat(x)</code></td><td>将<code>x</code>转换为浮点数，<code>x</code>可以是整数或数字类字符串</td></tr><tr><td><code>str(x</code>)</td><td>将<code>x</code>转换为整数，<code>x</code>可以是整数或浮点数</td></tr></tbody></table>\n<hr/>\n<h3><a id=\"__1185\"></a><strong><code>推 荐:牛客题霸-经典高频面试题库</code></strong></h3>\n<blockquote>\n<p>🌐 <code>找工作神器-|笔试题库|面试经验|大厂面试题</code> 👉 <a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">点击链接进行注册学习</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\0fcd593a13244dc3ac10f4355142a7c4.png\"/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}