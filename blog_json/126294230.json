{"blogid": "126294230", "writerAge": "码龄2年", "writerBlogNum": "63", "writerCollect": "860", "writerComment": "970", "writerFan": "1315", "writerGrade": "5级", "writerIntegral": "2899", "writerName": "贤蛋大眼萌", "writerProfileAdress": "writer_image\\profile_126294230.jpg", "writerRankTotal": "6654", "writerRankWeekly": "92", "writerThumb": "700", "writerVisitNum": "34227", "blog_read_count": "2325", "blog_time": "于 2022-08-11 22:07:03 发布", "blog_title": "【Vue全家桶】Vuex状态管理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>【Vue全家桶】Vuex状态管理</h3>\n<ul><li><ul><li><a href=\"#_1__2\">🚀 1. 什么是状态管理</a></li><li><a href=\"#_Vuex_14\">⏰ Vuex的使用</a></li><li><a href=\"#___mapState__98\">🦴 单一状态树 和 mapState 辅助函数</a></li><li><ul><li><a href=\"#1__100\">1. 单一状态树</a></li><li><a href=\"#2_mapState__106\">2. mapState 辅助函数</a></li></ul>\n</li><li><a href=\"#_getters__118\">🍦 getters 的基本使用</a></li><li><ul><li><a href=\"#1_getter__120\">1. getter 的使用</a></li><li><a href=\"#2_getters__126\">2. getters 第二个参数</a></li><li><a href=\"#3_getters___132\">3. getters 的返回函数 (了解)</a></li><li><a href=\"#4_mapGetters__138\">4. mapGetters 的辅助函数</a></li></ul>\n</li><li><a href=\"#_mutation__142\">🍧 mutation 基本使用</a></li><li><ul><li><a href=\"#1_mutation__152\">1. mutation 携带数据</a></li><li><a href=\"#2_mutation__158\">2. mutation 重要原则</a></li></ul>\n</li><li><a href=\"#_actions__162\">🥄 actions 的基本使用</a></li><li><ul><li><a href=\"#1_actions__174\">1. actions 的分发操作</a></li><li><a href=\"#2_actions__180\">2. actions 的辅助函数</a></li><li><a href=\"#3_actions__184\">3. actions 的异步操作</a></li></ul>\n</li><li><a href=\"#_module__188\">🥢 module 的基本使用</a></li><li><ul><li><a href=\"#1_module__194\">1. module 的局部状态</a></li><li><a href=\"#2_module__200\">2. module 的命名空间</a></li><li><a href=\"#3_module__206\">3. module 修改或派发根组件</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1__2\"></a>🚀 1. 什么是状态管理</h2>\n<p>在开发中，我们会的应用程序需要处理各种各样的数据，这些 数据需要保存在我们应用程序中的某一个位置，对于这些数据 的管理我们就称之为是<mark>状态管理</mark></p>\n<p><img alt=\"image-20220730154941258\" src=\"image\\c58b7d9d33906ac6a8264c9534072600.png\"/></p>\n<blockquote>\n<p>Vuex 的状态管理的基本实现（这里采用官方的图解）</p>\n<p><img alt=\"image-20220730155736580\" src=\"image\\e6551764eb587ef5393ced119b51e9cf.png\"/></p>\n</blockquote>\n<h2><a id=\"_Vuex_14\"></a>⏰ Vuex的使用</h2>\n<ol><li>安装vuex</li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vuex\n</code></pre>\n<ol start=\"2\"><li> <p>基本使用 :</p> <p>store本质上是一个容器 --&gt; 存着大部分应用中的状态。</p>\n<blockquote>\n<p>vuex 的状态存储是响应式的，当store中的状态发生变化时，那么响应的组件也会被更新。</p>\n</blockquote> </li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\"./store\"</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// src/store/index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      state<span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//App.vue</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> store 中的counter <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>方式一：模板<span class=\"token operator\">:</span>App当前计数<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>方式二：optionsAPI中的computed使用<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>storeCounter<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>方式三：在compositionAPI中setup函数使用<span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>counter<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">storeCounter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> toRefs <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> counter <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">toRefs</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"increment\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n \n<span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<h2><a id=\"___mapState__98\"></a>🦴 单一状态树 和 mapState 辅助函数</h2>\n<h3><a id=\"1__100\"></a>1. 单一状态树</h3>\n<blockquote>\n<p>意味着每一个应用就只包含一个 <mark>store</mark>实例</p>\n</blockquote>\n<p>优点：如果状态信息包含了多个 store 实例对象，那么之后维护和管理起来就会比较麻烦。<mark>单一状态树</mark>是我们最直接的方式找到某一个状态的片段，所以维护起来也比较方便</p>\n<h3><a id=\"2_mapState__106\"></a>2. mapState 辅助函数</h3>\n<p>​ 如果需要获取多个状态的时候，可以使用 mapSate 辅助函数</p>\n<blockquote>\n<p>这里有两种方式，分别是在optionsAPI 和 composition API中使用 mapState</p>\n</blockquote>\n<p><img alt=\"image-20220810142208934\" src=\"image\\5dc56933c43504d444e3caf0ae59e5b1.png\"/></p>\n<p><img alt=\"image-20220810143615648\" src=\"image\\9fd844433a2226f7c7812abe9faf0b9e.png\"/></p>\n<h2><a id=\"_getters__118\"></a>🍦 getters 的基本使用</h2>\n<h3><a id=\"1_getter__120\"></a>1. getter 的使用</h3>\n<p>场景：当需要我们将store中的某些属性经过一些列的变化之后再使用，这个时候可以选择使用getters</p>\n<p><img alt=\"image-20220810150609319\" src=\"image\\48019d52afc7e77e2ac23bdb505189ba.png\"/></p>\n<h3><a id=\"2_getters__126\"></a>2. getters 第二个参数</h3>\n<p>在上述场景中，getters接受的第一个参数是state，getters 也可以接收第二个参数</p>\n<p><img alt=\"image-20220810151136728\" src=\"image\\8aa02c84f88393ea4df23293551e8feb.png\"/></p>\n<h3><a id=\"3_getters___132\"></a>3. getters 的返回函数 (了解)</h3>\n<p>getters中的函数本身，可以返回一个函数，那么在使用的地方相当于可以调用这个函数</p>\n<p><img alt=\"image-20220810151536014\" src=\"image\\180879ccedd900ae4e4203e22ffb10c1.png\"/></p>\n<h3><a id=\"4_mapGetters__138\"></a>4. mapGetters 的辅助函数</h3>\n<p><img alt=\"image-20220810155909551\" src=\"image\\a8d9f222fb7e73806b173dd816e44ba7.png\"/></p>\n<h2><a id=\"_mutation__142\"></a>🍧 mutation 基本使用</h2>\n<blockquote>\n<p>改变vuex中的store的状态的唯一方法是提交mutation</p>\n<p>注意：在pinia中是取消了mutation，后续会继续讲。搭配vue3的composition API会比vuex更好，所以这里使用 options API演示</p>\n</blockquote>\n<p><img alt=\"image-20220810154709618\" src=\"image\\528a68275e51f4676ca804505c75bd46.png\"/></p>\n<p><img alt=\"image-20220810154655694\" src=\"image\\9bf228e1d58c7692c669445e70c500de.png\"/></p>\n<h3><a id=\"1_mutation__152\"></a>1. mutation 携带数据</h3>\n<p>很多时候我们在提交mutation的时候会携带一些数据，这个时候可以这样使用</p>\n<img alt=\"image-20220810160241568\" src=\"image\\image-20220810160241568.png\"/>\n<h3><a id=\"2_mutation__158\"></a>2. mutation 重要原则</h3>\n<p><mark>mutation 必须是同步函数</mark>，即不允许使用异步函数（例如发送网络请求）</p>\n<h2><a id=\"_actions__162\"></a>🥄 actions 的基本使用</h2>\n<p>Action类似于mutation，不同在于：</p>\n<ul><li>Action提交的是mutation，而不是直接变更状态；</li><li>Action可以包含<mark>任意异步</mark>操作；</li></ul>\n<p>参数<mark>context</mark>：</p>\n<ul><li>context是一个和store实例均有相同方法和属性的context对象；</li><li>可以从其中获取到commit方法来提交一个mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters；</li></ul>\n<h3><a id=\"1_actions__174\"></a>1. actions 的分发操作</h3>\n<p><img alt=\"image-20220810180252741\" src=\"image\\88bb0bb4f36fae53a62bde4b81e88aa0.png\"/></p>\n<p><img alt=\"image-20220810180415814\" src=\"image\\80221e7796405b11ad3b0311aee1a4c4.png\"/></p>\n<h3><a id=\"2_actions__180\"></a>2. actions 的辅助函数</h3>\n<p><img alt=\"image-20220810181044206\" src=\"image\\3f2608330fda064b11204facdc094e5f.png\"/></p>\n<h3><a id=\"3_actions__184\"></a>3. actions 的异步操作</h3>\n<p><img alt=\"image-20220810183811372\" src=\"image\\0cb58a1800c78c29e68b127bde2e600b.png\"/></p>\n<h2><a id=\"_module__188\"></a>🥢 module 的基本使用</h2>\n<p>​ 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象，当应用变得非常复杂时，store 对象就有可能变得相当臃肿。所以Vuex允许我们将 store 分割成模块（module）。</p>\n<p>​ 每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</p>\n<h3><a id=\"1_module__194\"></a>1. module 的局部状态</h3>\n<p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。</p>\n<p><img alt=\"image-20220811162003351\" src=\"image\\1177025f97c9c70de0b1ef92dd011458.png\"/></p>\n<h3><a id=\"2_module__200\"></a>2. module 的命名空间</h3>\n<blockquote>\n<p>​ 默认情况下，模块内部的action和mutation仍然是注册在全局的命名空间中的。<mark>所以命名不可以重复</mark></p>\n<p>​ 如果我们希望模块具有更高的封装度和复用性，可以添加 namespaced: true 的方式使其成为带命名空间的模块： 当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。</p>\n</blockquote>\n<h3><a id=\"3_module__206\"></a>3. module 修改或派发根组件</h3>\n<p>​ 在action中修改root中的state，那么有如下的方式：</p>\n<p><img alt=\"image-20220811220423106\" src=\"image\\820de3b52627533c1a193ebca20f903f.png\"/></p>\n<p><img alt=\"喜欢就一键三连吧！\" src=\"image\\6c49c475df57301612713b21cf91a145.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}