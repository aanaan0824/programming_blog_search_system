{"blogid": "126591004", "writerAge": "码龄2年", "writerBlogNum": "104", "writerCollect": "14", "writerComment": "9", "writerFan": "3", "writerGrade": "4级", "writerIntegral": "1113", "writerName": "Java娜娜", "writerProfileAdress": "writer_image\\profile_126591004.jpg", "writerRankTotal": "19769", "writerRankWeekly": "6828", "writerThumb": "5", "writerVisitNum": "9519", "blog_read_count": "277", "blog_time": "于 2022-08-29 19:22:01 发布", "blog_title": "50 个必须要会的微服务面试题一", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>根据 Gartner 的说法，微服务是云开发的新应用平台。微服务是独立部署和管理的，一旦应用实现在容器内，它们与底层操作系统的交互很少。因此，如果你希望把微服务添加到自己的技术栈中，并想要了解与之相关的技能，那么现在正是潜心研究的时候。为了帮你准备面试，我写出了这篇关于微服务面试题的文章。</p>\n<p>在本文中，我收集了面试官最常问到的问题。</p>\n<h4><a id=\"1_4\"></a>1、说说微服务架构的优势？</h4>\n<p><img alt=\"image.png\" src=\"image\\01a741acc881536b3032884c3f55bb15.png\"/></p>\n<h4><a id=\"2_9\"></a>2、你对微服务是怎么理解的？</h4>\n<ul><li>微服务，又名微服务架构，是一种架构风格，它将应用构建为一个小型自治服务的集合，以业务领域为模型。</li><li>通俗地说，就像蜜蜂通过对蜡制的等边六角形单元来构建它们的蜂巢。</li><li>他们最初从使用各种材料的小单元开始，一点点的搭建出一个大型蜂巢。</li><li>这些小单元组成坚固的结构，将蜂窝的特定部分固定在一起。</li><li>这里，每个小单元都独立于另一个，但它也与其他小单元相关。</li><li>这意味着对一个小单元的损害不会损害其他的单元，因此，蜜蜂可以在不影响完整蜂巢的情况下重建这些单元。</li></ul>\n<p><img alt=\"image.png\" src=\"image\\82599d64dd0fdbe0ec1b4a2234e3ea54.png\"/></p>\n<p><em>图 1：微服务的蜂窝表示</em></p>\n<p>请参考上图。这里，每个六边形都代表单独的服务组件。与蜜蜂的工作类似，每个敏捷团队都使用可用的框架和所选的技术栈构建单独的服务组件。就像在蜂巢中一样，这些服务组件形成一个强大的微服务架构，以提供更好的可扩展性。此外敏捷团队可以单独处理每个服务组件的问题，而不会对整个应用程序产生影响或使影响最小。</p>\n<h4><a id=\"3_25\"></a>3、微服务有哪些特点？</h4>\n<p><img alt=\"image.png\" src=\"image\\fc1dba8c0a350bb6f0fc3d22ddaac740.png\"/></p>\n<p><em>图 2：微服务的特点</em></p>\n<ul><li>解耦（Decoupling）：系统内的服务很大程度上是分离的。因此，整个应用程序可以轻松构建，更改和扩展</li><li>组件化（Componentization）：微服务被视为可以轻松更换和升级的独立组件</li><li>业务能力（Business Capabilities）：微服务非常简单，专注于单一功能</li><li>自治（Autonomy）：开发人员和团队可以彼此独立工作，从而提高速度</li><li>持续交付（ContinousDelivery）：通过软件创建，测试和批准的系统自动化，允许频繁发布软件</li><li>责任（Responsibility）：微服务不关注应用程序作为项目。相反，他们将应用程序视为他们负责的产品</li><li>分散治理（Decentralized Governance）：重点是使用正确的工具来做正确的工作。这意味着没有标准化模式或任何技术模式。开发人员可以自由选择最有用的工具来解决他们的问题</li><li>敏捷（Agility）：微服务支持敏捷开发。任何新功能都可以快速开发并再次丢弃</li></ul>\n<h4><a id=\"4_41\"></a>4、设计微服务的最佳实践是什么？</h4>\n<p>以下是设计微服务的最佳实践：</p>\n<p><img alt=\"image.png\" src=\"image\\95d8dff73c936ba709cf085382a3e909.png\"/></p>\n<p><em>图 4：设计微服务的最佳实践</em></p>\n<h4><a id=\"5_50\"></a>5、微服务架构如何运作？</h4>\n<p>微服务架构具有以下组件：</p>\n<p><img alt=\"image.png\" src=\"image\\b147d4897b25f7f045552f8134c7f3d2.png\"/></p>\n<p><em>图 5：微服务架构</em></p>\n<ul><li>客户端——来自不同设备的不同用户发送请求。</li><li>身份提供商——验证用户或客户身份并颁发安全令牌。</li><li>API 网关——处理客户端请求。</li><li>静态内容——容纳系统的所有内容。</li><li>管理——在节点上平衡服务并识别故障。</li><li>服务发现——查找微服务之间通信路径的指南。</li><li>内容交付网络——代理服务器及其数据中心的分布式网络。</li><li>远程服务——启用驻留在 IT 设备网络上的远程访问信息。</li></ul>\n<h4><a id=\"6_68\"></a>6、微服务架构的优缺点是什么？</h4>\n<p><img alt=\"image.png\" src=\"image\\d41fb8027c6c519e41fb58d42f48d00d.png\"/></p>\n<h4><a id=\"7SOA__73\"></a>7、单体应用，SOA 和微服务架构有什么区别？</h4>\n<p><img alt=\"image.png\" src=\"image\\370f0d0e6063e3155e68a8b22895cf60.png\"/></p>\n<p><em>图 6： 单体应用，SOA 和微服务之间的比较</em></p>\n<ul><li>单体应用类似于一个大容器，其中程序的所有组件都被组装在一起并紧密包装。</li><li>SOA是一组相互通信的服务。通信可以涉及简单的数据传送，也可以涉及两个或多个协调某些活动的服务。</li><li>微服务架构是一种架构风格，它将应用程序构建为以业务域为模型的小型自治服务集合。</li></ul>\n<h4><a id=\"8_84\"></a>8、在使用微服务架构时，你面临哪些挑战？</h4>\n<p>开发一些较小的微服务听起来很容易，但开发它们时经常遇到的挑战如下：</p>\n<ul><li>自动化组件：难以自动化，因为有许多较小的组件。因此，对于每个组件，我们必须遵循 Build，Deploy 和 Monitor 的各个阶段。</li><li>易感性：将大量组件维护在一起变得难以部署，维护，监控和识别问题。它需要在所有组件周围具有很好的感知能力。</li><li>配置管理：有时在各种环境中维护组件的配置变得困难。</li><li>调试：很难找到错误的每一项服务。维护集中式日志记录和仪表板以调试问题至关重要。</li></ul>\n<h4><a id=\"9SOA__93\"></a>9、SOA 和微服务架构之间的主要区别是什么？</h4>\n<p>SOA 和微服务之间的主要区别如下：</p>\n<p><img alt=\"image.png\" src=\"image\\175d2d41ca1664d0c6e5ea5e42a9881a.png\"/></p>\n<h4><a id=\"10_100\"></a>10、微服务有什么特点？</h4>\n<p>你可以列出微服务的特征，如下所示：</p>\n<p><img alt=\"image.png\" src=\"image\\b8ed606aa84878eda6a3fbf3f8893050.png\"/></p>\n<p><em>图 7：微服务的特征</em></p>\n<ul><li>围绕业务功能组织团队</li><li>做产品而不是做项目</li><li>基本的消息传递框架</li><li>去中心化治理</li><li>去中心化管理数据</li><li>基础设施自动化</li><li>容错设计</li></ul>\n<h4><a id=\"11DDD_117\"></a>11、什么是领域驱动设计（DDD）？</h4>\n<p><img alt=\"image.png\" src=\"image\\43630cc62a4434495c667db6fec692c2.png\"/></p>\n<p><em>图 8： DDD 原理</em></p>\n<ul><li>专注于核心领域逻辑</li><li>在模型上找到综合的设计</li><li>不断与领域专家合作，改进应用程序模型并解决与领域相关的问题</li></ul>\n<h4><a id=\"12DDD_128\"></a>12、为什么需要域驱动设计（DDD）？</h4>\n<p><img alt=\"image.png\" src=\"image\\2e7f0168039dd2c18363daaaf5a83465.png\"/></p>\n<p><em>图 9：我们需要 DDD 的因素</em></p>\n<ul><li>映射领域</li><li>降低复杂性</li><li>可测试性</li><li>可维护性</li><li>知识丰富的设计</li><li>将业务和服务结合在一起</li><li>上下文集中</li><li>通用语言</li></ul>\n<h4><a id=\"13Ubiquitous_LanguageUL_143\"></a>13、什么是通用语言（Ubiquitous Language，UL）？</h4>\n<p>如果你必须定义通用语言（UL），那么它是特定域的开发人员和用户使用的通用语言，通过该语言可以轻松解释领域。</p>\n<p>通用语言必须非常清晰，以便将所有团队成员处于同一水平线上，并以机器可以理解的方式进行翻译。</p>\n<h4><a id=\"14_149\"></a>14、什么是内聚？</h4>\n<p>内聚是一个模块内部各元素之间相关联程度的度量。</p>\n<h4><a id=\"15_153\"></a>15、什么是耦合？</h4>\n<p>组件之间依赖关系强度的度量被称为耦合。好的设计总是高内聚和低耦合的。</p>\n<h4><a id=\"16_REST__RESTful__157\"></a>16、什么是 REST / RESTful 以及它的用途是什么？</h4>\n<p>Representational State Transfer（REST）/ RESTful （表述性状态转移）是一种帮助计算机系统通过 Internet 进行通信的架构风格。这使得微服务更容易理解和实现。</p>\n<p>微服务可以用 RESTful API 来实现，当然也可以不用，但是用 RESTful API 去构建松散耦合的微服务总是更容易些。</p>\n<h4><a id=\"17_Spring_Boot__163\"></a>17、你对 Spring Boot 有什么了解？</h4>\n<p>随着新功能的增加，Spring 变得越来越复杂。如果必须启动新的 Spring 项目，必须添加构建路径或添加 Maven 依赖项，配置服务器，添加 Spring 配置。所以一切都必须从头开始。</p>\n<p>Spring Boot 是解决这个问题的方法。使用 Spring Boot 可以避免所有样板代码和配置。因此，基本上认为自己就好像在烤蛋糕一样，Spring 就像做蛋糕所需的原料一样， Spring Boot 就是完整的蛋糕。<br/> <img alt=\"image.png\" src=\"image\\c33db7371455279849a3da0c01c00a2e.png\"/></p>\n<p><em>图 10：Spring Boot 的因素</em></p>\n<h4><a id=\"18Spring_Boot__172\"></a>18、Spring Boot 的执行器是什么？</h4>\n<p>Spring Boot 执行器提供 RESTful 服务，以访问在生产环境中运行程序的当前状态。在执行器的帮助下，你可以检查各种指标并监控自己的程序。</p>\n<h4><a id=\"19_Spring_Cloud_176\"></a>19、什么是 Spring Cloud？</h4>\n<p>根据 Spring Cloud 的官方网站，Spring Cloud 为开发人员提供了一些快速构建分布式系统常见模式的工具（例如配置管理、服务发现、断路器、智能路由、领导选举、分布式会话、集群状态）。在此我向大家推荐一个架构学习交流圈。交流学习指导伪鑫：1253431195（里面有大量的面试题及答案）里面会分享一些资深架构师录制的视频录像：有Spring，MyBatis，Netty源码分析，高并发、高性能、分布式、微服务架构的原理，JVM性能优化、分布式架构等这些成为架构师必备的知识体系。还能领取免费的学习资源，目前受益良多</p>\n<h4><a id=\"20Spring_Cloud__180\"></a>20、Spring Cloud 解决了哪些问题？</h4>\n<p>在使用 Spring Boot 开发分布式微服务时，我们面临的一些问题可以由 Spring Cloud 解决。</p>\n<ul><li>与分布式系统相关的复杂性：这包括网络问题、延迟开销、带宽问题、安全问题。</li><li>处理服务发现的能力：服务发现允许群集中的进程和服务找到彼此并进行通信。</li><li>解决了冗余问题：冗余问题经常发生在分布式系统中。</li><li>负载平衡：改进跨多种计算资源（如计算机集群、网络链接、中央处理单元）的工作负载分配。</li><li>减少性能问题：减少因各种操作开销导致的性能问题。</li></ul>\n<h4><a id=\"21_Spring_MVC__WebMvcTest__190\"></a>21、在 Spring MVC 中使用 WebMvcTest 注释有什么用处？</h4>\n<p><img alt=\"image.png\" src=\"image\\26aa8233afef3f4991ccaf5d73f45986.png\"/></p>\n<p>WebMvcTest 注释用于 Spring MVC 程序的单元测试，其目标是专注于 Spring MVC 组件。在上面显示的快照中，我们只想启动 ToTestController。执行此单元测试时，将不会启动所有其他控制器和映射。</p>\n<h4><a id=\"22_Rest__197\"></a>22、你能否给出关于 Rest 和微服务的要点？</h4>\n<p>REST：虽然你可以通过多种方式实现微服务，但 REST over HTTP 是实现微服务的一种方式。 REST 还用于其他应用程序，如 Web 应用、API 设计和 MV C应用以提供业务数据。</p>\n<p>微服务：微服务是一种体系结构，其中系统的所有组件都被放入单独的组件中，这些组件可以单独构建、部署和扩展。微服务的某些原则和最佳实践有助于构建弹性应用程序。</p>\n<p>简而言之，你可以认为 REST 是构建微服务的媒介。</p>\n<h4><a id=\"23_205\"></a>23、什么是不同类型的微服务测试？</h4>\n<p>在使用微服务时，由于有多个微服务协同工作，测试变得非常复杂。因此，测试分为不同的级别。</p>\n<ul><li>在底层，我们有面向技术的测试，如单元测试和性能测试。这些是完全自动化的。</li><li>在中间层面，我们进行了诸如压力测试和可用性测试之类的探索性测试。</li><li>在顶层， 我们的 验收测试数量很少。这些验收测试有助于利益相关者理解和验证软件功能。</li></ul>\n<h4><a id=\"24_213\"></a>24、你对分布式事务的理解？</h4>\n<p>分布式事务是单个事件导致两个或多个不能以原子方式提交的单独数据源的突变的情况。在微服务的世界中，它变得更加复杂，因为每个服务都是一个工作单元，并且在大多数情况下，多个服务必须协同工作才能使业务成功。</p>\n<h4><a id=\"25Idempotence_217\"></a>25、什么是幂等性（Idempotence）及用在哪里？</h4>\n<p>幂等性是能够以同样的方式做两次，而最终结果将保持不变，就好像它只做了一次的特性。</p>\n<p>用法：在远程服务或数据源中使用幂等性，以便当它多次接收指令时，只处理一次。</p>\n<h4><a id=\"26_223\"></a>26、什么是有界上下文？</h4>\n<p>有界上下文是领域驱动设计的核心模式。 DDD 战略设计部门的重点是处理大型模型和团队。 DDD 通过将大型模型划分为不同的有界上下文并明确其相互关系来处理大型模型。</p>\n<h4><a id=\"27_227\"></a>27、什么是双因素身份验证？</h4>\n<p>双因素身份验证是在帐户登录过程中启用第二级身份验证。</p>\n<p><img alt=\"image.png\" src=\"image\\d6ed1e7f7cef9bb366882089c6ae367e.png\"/></p>\n<p><em>图 11： 双因素认证的表示</em></p>\n<p>因此，如果用户只需要输入用户名和密码，那么就被认为是单因素身份验证。</p>\n<h4><a id=\"28_238\"></a>28、双因素身份验证的凭据类型有哪些？</h4>\n<p>这三种凭证是：</p>\n<p><img alt=\"image.png\" src=\"image\\7f2939ac0922e171c7df26b27afc7aaa.png\"/></p>\n<p><em>图 12： 双因素认证的证书类型</em></p>\n<ul><li>你知道的东西——如：PIN、密码或模式</li><li>你有的东西——如：ATM 卡、电话或 OTP</li><li>你是谁——如：生物特征指纹或声纹</li></ul>\n<h4><a id=\"29_251\"></a>29、什么是客户证书？</h4>\n<p>客户端系统向远程服务器发出经过身份验证的请求所用的数字证书被称为客户端证书。客户端证书在许多相互认证设计中起着非常重要的作用，为请求者的身份提供了强有力的保证。</p>\n<h4><a id=\"30PACT__255\"></a>30、PACT 在微服务架构中的用途是什么？</h4>\n<p>PACT 是一个开源工具，允许测试服务提供者和消费者之间的交互，与合同隔离，从而提高微服务集成的可靠性。</p>\n<p>在微服务中的用法：</p>\n<ul><li>用于在微服务中实现消费者驱动的契约。</li><li>测试微服务的消费者和生产者之间的消费者驱动的契约。</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}