{"blogid": "126213084", "writerAge": "码龄1年", "writerBlogNum": "24", "writerCollect": "56", "writerComment": "12", "writerFan": "278", "writerGrade": "2级", "writerIntegral": "336", "writerName": "代码kobe", "writerProfileAdress": "writer_image\\profile_126213084.jpg", "writerRankTotal": "43613", "writerRankWeekly": "1671", "writerThumb": "70", "writerVisitNum": "8009", "blog_read_count": "1104", "blog_time": "已于 2022-08-24 10:25:24 修改", "blog_title": "算法基础集训（第05天，共106天）------＞全网最全【二分】万字详解，超多经典例题和拓展题：包括两个神仙模板和各种让你头痛的边界情况，最后还有STL内部封装函数", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/236de3198d1b418f83f9b1d95bad0be0.gif\"/></p>\n<p> </p>\n<p></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%EF%BC%9A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%A6%82%E5%BF%B5%E5%AE%9A%E4%B9%89-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%EF%BC%9A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%A6%82%E5%BF%B5%E5%AE%9A%E4%B9%89\"> 一：二分查找概念定义</a></p>\n<p style=\"margin-left:0px;\"></p>\n<p id=\"%C2%A0%E4%BA%8C%EF%BC%9A%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%B8%87%E8%83%BD%E6%A8%A1%E6%9D%BF%EF%BC%88%E5%80%9F%E9%89%B4%E8%AF%95%E7%94%A8%E5%A4%9A%E5%B9%B4%EF%BC%8C%E4%BB%8E%E6%9C%AA%E5%87%BA%E9%94%99%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%BA%8C%EF%BC%9A%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%B8%87%E8%83%BD%E6%A8%A1%E6%9D%BF%EF%BC%88%E5%80%9F%E9%89%B4%E8%AF%95%E7%94%A8%E5%A4%9A%E5%B9%B4%EF%BC%8C%E4%BB%8E%E6%9C%AA%E5%87%BA%E9%94%99%EF%BC%89\"> 二：整数二分查找的两个万能模板（借鉴试用多年，从未出错）</a></p>\n<p id=\"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%BA%E4%BD%95mid%E6%9C%89%E4%B8%A4%E7%A7%8D%E5%8F%96%E5%80%BC%E6%A8%A1%E6%9D%BF%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%BA%E4%BD%95mid%E6%9C%89%E4%B8%A4%E7%A7%8D%E5%8F%96%E5%80%BC%E6%A8%A1%E6%9D%BF%EF%BC%9F\">常见问题：为何mid有两种取值模板？</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p id=\"%E4%B8%89%EF%BC%9A%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%EF%BC%9A%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE\">三：经典题目</a></p>\n<p id=\"%C2%A0%E9%97%AE%E9%A2%98%E4%B8%80%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E9%97%AE%E9%A2%98%E4%B8%80%EF%BC%9A\"> 问题一：</a></p>\n<p id=\"%C2%A0%C2%A0%E9%97%AE%E9%A2%98%E4%BA%8C%EF%BC%88%E6%B5%AE%E7%82%B9%E6%95%B0%E4%BA%8C%E5%88%86%EF%BC%8C%E4%BD%86%E6%98%AF%E6%AF%94%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E8%A6%81%E7%AE%80%E5%8D%95%EF%BC%89%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%E9%97%AE%E9%A2%98%E4%BA%8C%EF%BC%88%E6%B5%AE%E7%82%B9%E6%95%B0%E4%BA%8C%E5%88%86%EF%BC%8C%E4%BD%86%E6%98%AF%E6%AF%94%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E8%A6%81%E7%AE%80%E5%8D%95%EF%BC%89%EF%BC%9A\"> 问题二（浮点数二分，但是比整数二分要简单）：</a></p>\n<p id=\"%C2%A0%E9%97%AE%E9%A2%98%E4%B8%89%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E9%97%AE%E9%A2%98%E4%B8%89%EF%BC%9A\"> 问题三：</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p id=\"%E5%9B%9B%EF%BC%9A%E9%9A%86%E9%87%8D%E4%BB%8B%E7%BB%8D%E5%A4%B4%E6%96%87%E4%BB%B6%3Calgorithm%3E%E4%B8%AD%E7%9A%84lower_bound%E5%92%8Cupper_bound%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%EF%BC%9A%E9%9A%86%E9%87%8D%E4%BB%8B%E7%BB%8D%E5%A4%B4%E6%96%87%E4%BB%B6%3Calgorithm%3E%E4%B8%AD%E7%9A%84lower_bound%E5%92%8Cupper_bound%E5%87%BD%E6%95%B0\">四：隆重介绍头文件中的lower_bound和upper_bound函数</a></p>\n<p style=\"margin-left:0px;\"></p>\n<p id=\"%C2%A0%E4%BA%94%EF%BC%9A%E6%8B%93%E5%B1%95%E9%A2%98%E5%9E%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%BA%94%EF%BC%9A%E6%8B%93%E5%B1%95%E9%A2%98%E5%9E%8B\"> 五：拓展题型</a></p>\n<p id=\"%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84\">山脉数组</a></p>\n<p style=\"margin-left:80px;\"></p>\n<p id=\"%C2%A0%E5%85%AD%EF%BC%9A%E4%B9%A0%E9%A2%98%E7%BB%83%E4%B9%A0%EF%BC%88%E5%90%83%E9%80%8F%E8%BF%99%E4%BA%9B%E9%A2%98%E5%9E%8B%E5%8D%B3%E5%8F%AF%E5%BD%BB%E5%BA%95%E6%8E%8C%E6%8F%A1%E4%BA%8C%E5%88%86%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E5%85%AD%EF%BC%9A%E4%B9%A0%E9%A2%98%E7%BB%83%E4%B9%A0%EF%BC%88%E5%90%83%E9%80%8F%E8%BF%99%E4%BA%9B%E9%A2%98%E5%9E%8B%E5%8D%B3%E5%8F%AF%E5%BD%BB%E5%BA%95%E6%8E%8C%E6%8F%A1%E4%BA%8C%E5%88%86%EF%BC%89\"> 六：习题练习（吃透这些题型即可彻底掌握二分）</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%C2%A0%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0-toc\" style=\"margin-left:0px;\"><a hrefa></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p></p>\n<h1 id=\"%E4%B8%80%EF%BC%9A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%A6%82%E5%BF%B5%E5%AE%9A%E4%B9%89\"> 一：二分查找概念定义</h1>\n<p>        二分查找解决的是<strong>单调函数</strong>上的查找问题。然后就有人问了，我遇到的二分查找都是在数组中找一个数，这个也是函数吗？<br/>         广义地来说，数组就是一些离散的点，所以它是一种<strong>离散函数</strong>。所以，数组元素的查找其实也是在函数中进行查找。如下图所示，代表的是一个五个元素的数组：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6553f775b8e04ff58370b6ef41813437.png\"/></p>\n<hr/>\n<h1 id=\"%C2%A0%E4%BA%8C%EF%BC%9A%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%B8%87%E8%83%BD%E6%A8%A1%E6%9D%BF%EF%BC%88%E5%80%9F%E9%89%B4%E8%AF%95%E7%94%A8%E5%A4%9A%E5%B9%B4%EF%BC%8C%E4%BB%8E%E6%9C%AA%E5%87%BA%E9%94%99%EF%BC%89\"><strong> 二：整数二分查找的两个万能模板（借鉴试用多年，从未出错）</strong></h1>\n<p>二分模板一共有两个，分别适用于不同情况。<br/> 算法思路：假设目标值在闭区间<strong>[l, r]</strong>中， 每次将区间长度缩小一半，当<strong>l = r</strong>时，我们就找到了目标值。</p>\n<p>模板1（往左找答案）：当我们将区间[l, r]划分成<span style=\"color:#fe2c24;\"><strong>[l, mid]</strong></span>和<span style=\"color:#fe2c24;\"><strong>[mid + 1, r]</strong></span>时，其更新操作是<span style=\"color:#fe2c24;\"><strong>r = mid或者l = mid + 1</strong></span>;，计算mid时<strong><span style=\"color:#fe2c24;\">不需要加1</span></strong>。</p>\n<pre><code class=\"language-cpp\">int bsearch_1(int l, int r)\n{\n    while (l &lt; r)\n    {\n        int mid = l + r &gt;&gt; 1;\n        if (check(mid)) r = mid;\n        else l = mid + 1;\n    }\n    return l;\n}</code></pre>\n<p>模板2（往右找答案）： 当我们将区间[l, r]划分成<span style=\"color:#fe2c24;\"><strong>[l, mid - 1]</strong></span>和<span style=\"color:#fe2c24;\"><strong>[mid, r]</strong></span>时，其更新操作是<span style=\"color:#fe2c24;\"><strong>r = mid - 1或者l = mid</strong></span>;此时为了防止死循环，计算mid时<span style=\"color:#fe2c24;\"><strong>需要加1</strong></span>。</p>\n<pre><code class=\"language-cpp\">int bsearch_2(int l, int r)\n{\n    while (l &lt; r)\n    {\n        int mid = l + r + 1 &gt;&gt; 1;\n        if (check(mid)) l = mid;\n        else r = mid - 1;\n    }\n    return l;\n}</code></pre>\n<h3 id=\"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%BA%E4%BD%95mid%E6%9C%89%E4%B8%A4%E7%A7%8D%E5%8F%96%E5%80%BC%E6%A8%A1%E6%9D%BF%EF%BC%9F\">常见问题：为何mid有两种取值模板？</h3>\n<blockquote>\n<p>答：我们拿第二个模板举例子，如果在第二个模板的情况下取mid=l+r&gt;&gt;1,在l+1=r且check函数成立的情况下，那么会运行l=mid这条语句，但是因为mid=l+r&gt;&gt;1,因此此时的l=mid=l，等于没变，所以就会陷入死循环，因此第二种模板的mid要<span style=\"color:#fe2c24;\"><strong>上取整</strong></span>，也就是mid=l+r+1&gt;&gt;1</p>\n</blockquote>\n<hr/>\n<h1 id=\"%E4%B8%89%EF%BC%9A%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE\">三：经典题目</h1>\n<h3 id=\"%C2%A0%E9%97%AE%E9%A2%98%E4%B8%80%EF%BC%9A\"> 问题一：</h3>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\cee2a680b5b84530bf33dbdb5e77d9fb.png\"/></p>\n<p></p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010;\n\nint n, m;\nint q[N];\n\nint main()\n{\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; n; i ++ ) scanf(\"%d\", &amp;q[i]);\n\n    while (m -- )\n    {\n        int x;\n        scanf(\"%d\", &amp;x);\n\n        int l = 0, r = n - 1;\n        while (l &lt; r)\n        {\n            int mid = l + r &gt;&gt; 1;\n            if (q[mid] &gt;= x) r = mid;\n            else l = mid + 1;\n        }\n\n        if (q[l] != x) cout &lt;&lt; \"-1 -1\" &lt;&lt; endl;\n        else\n        {\n            cout &lt;&lt; l &lt;&lt; ' ';\n\n            int l = 0, r = n - 1;\n            while (l &lt; r)\n            {\n                int mid = l + r + 1 &gt;&gt; 1;\n                if (q[mid] &lt;= x) l = mid;\n                else r = mid - 1;\n            }\n\n            cout &lt;&lt; l &lt;&lt; endl;\n        }\n    }\n\n    return 0;\n}\n</code></pre>\n<blockquote>\n<p><span style=\"color:#fe2c24;\">注：该题目十分经典，用到了两个二分的模板，思路并不难，注意输出的格式就行</span></p>\n</blockquote>\n<hr/>\n<h3 id=\"%C2%A0%C2%A0%E9%97%AE%E9%A2%98%E4%BA%8C%EF%BC%88%E6%B5%AE%E7%82%B9%E6%95%B0%E4%BA%8C%E5%88%86%EF%BC%8C%E4%BD%86%E6%98%AF%E6%AF%94%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E8%A6%81%E7%AE%80%E5%8D%95%EF%BC%89%EF%BC%9A\">  问题二（浮点数二分，但是比整数二分要简单）：</h3>\n<p> <img alt=\"\" src=\"image\\5b0049746698497c85f87f0230a55128.png\"/></p>\n<p> 法一（浮点数二分）：</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    double x;\n    cin &gt;&gt; x;\n\n    double l = -100, r = 100;\n    while (r - l &gt; 1e-8)\n    {\n        double mid = (l + r) / 2;\n        if (mid * mid * mid &gt;= x) r = mid;\n        else l = mid;\n    }\n\n    printf(\"%.6lf\\n\", l);\n    return 0;\n}</code></pre>\n<p>法二（c++函数crbt）：</p>\n<pre><code class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main ( ) {\n\n    double  n ;\n\n    cin &gt;&gt;n ;\n\n    printf ( \"%lf\" , cbrt ( n ) ) ; // cbrt 求三次方根\n\n    return 0 ;\n\n}\n</code></pre>\n<blockquote>\n<p>注：浮点数二分的模板很简单，但是要注意精度的问题，一般精度<span style=\"color:#fe2c24;\">eps取到1e-8</span>就肯定可以AC；法二就是利用库函数了，sqrt是求二次方根，crbt是求三次方根,两者都是默认保留六位小数</p>\n</blockquote>\n<hr/>\n<h3 id=\"%C2%A0%E9%97%AE%E9%A2%98%E4%B8%89%EF%BC%9A\"> 问题三：</h3>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\4b9955342ede409db47c0e52bea189eb.png\"/></p>\n<p></p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010;\n\nint n;\nint q[N];\n\nint main()\n{\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i ++ ) scanf(\"%d\", &amp;q[i]);\n\n    int x;\n    scanf(\"%d\", &amp;x);\n\n    int l = 0, r = n - 1;\n    while (l &lt; r)\n    {\n        int mid = l + r &gt;&gt; 1;\n        if (q[mid] &gt;= x) r = mid;\n        else l = mid + 1;\n    }\n     printf(\"%d\",l);\n\n\n    return 0;\n}\n</code></pre>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>注：返回其应该插入的位置，很明显是往左找答案，应该用模板1</strong></span></p>\n</blockquote>\n<hr/>\n<h1 id=\"%E5%9B%9B%EF%BC%9A%E9%9A%86%E9%87%8D%E4%BB%8B%E7%BB%8D%E5%A4%B4%E6%96%87%E4%BB%B6%3Calgorithm%3E%E4%B8%AD%E7%9A%84lower_bound%E5%92%8Cupper_bound%E5%87%BD%E6%95%B0\">四：隆重介绍头文件&lt;algorithm&gt;中的lower_bound和upper_bound函数</h1>\n<blockquote>\n<p>在从小到大的排序数组中，</p>\n<p></p>\n<p><span style=\"color:#fe2c24;\">lower_bound( begin,end,num)</span>：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p>\n<p></p>\n<p><span style=\"color:#fe2c24;\">upper_bound( begin,end,num)</span>：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。<br/>  </p>\n</blockquote>\n<p>举例： </p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include&lt;algorithm&gt;\n\nusing namespace std;\n\nconst int N = 100010;\n\nint n, m;\nint q[N];\n\nint main()\n{\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i ++ ) scanf(\"%d\", &amp;q[i]);\n  \n    int x;\n    scanf(\"%d\", &amp;x);\n    \n    int res1 = lower_bound(q,q+n,x)-q;//返回数组中第一个大于或等于被查数的值\n    int res2 = upper_bound(q,q+n,x)-q;//返回数组中第一个大于被查数的值\n    printf(\"%d  %d\\n\",res1,res2);\n    \n    return 0;\n}\n\n//输出1 3\n</code></pre>\n<hr/>\n<h1 id=\"%C2%A0%E4%BA%94%EF%BC%9A%E6%8B%93%E5%B1%95%E9%A2%98%E5%9E%8B\"> 五：拓展题型</h1>\n<h3 id=\"%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84\"><a class=\"link-info\" href=\"https://leetcode.cn/problems/find-in-mountain-array/\" title=\"山脉数组\">山脉数组</a></h3>\n<pre><code class=\"language-java\">private int findMountainTop(MountainArray mountainArr, int left, int right) {\n        while (left &lt; right) {\n            int mid = left + right&gt;&gt;1;\n            if (mountainArr.get(mid) &lt; mountainArr.get(mid + 1)) {\n                // 下一轮搜索区间 [mid + 1..right]\n                left = mid + 1;\n            } else {\n                // 下一轮搜索区间 [left..mid]\n                right = mid;\n            }\n        }\n        // left == right\n        return left;\n    }\n\n</code></pre>\n<blockquote>\n<p> 注：这道题目的本质就是三个二分，上述我只给出最具有思考意义的二分，其他两段二分和模板一模一样背过就行。这个二分的check函数具有一定的含金量</p>\n<p><span style=\"color:#fe2c24;\"><strong>当mid&lt;mid+1，说明答案在右边，需要执行left=mid+1的操作，否则right=mid</strong></span></p>\n</blockquote>\n<hr/>\n<h1 id=\"%C2%A0%E5%85%AD%EF%BC%9A%E4%B9%A0%E9%A2%98%E7%BB%83%E4%B9%A0%EF%BC%88%E5%90%83%E9%80%8F%E8%BF%99%E4%BA%9B%E9%A2%98%E5%9E%8B%E5%8D%B3%E5%8F%AF%E5%BD%BB%E5%BA%95%E6%8E%8C%E6%8F%A1%E4%BA%8C%E5%88%86%EF%BC%89\"> 六：习题练习（吃透这些题型即可彻底掌握二分）</h1>\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>序号</td><td>题目链接</td><td>难度系数</td></tr><tr><td>1</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/binary-search/\" title=\"二分查找\">二分查找</a></td><td>★☆☆☆☆</td></tr><tr><td>2</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/guess-number-higher-or-lower/\" title=\"猜数字大小\">猜数字大小</a></td><td>★☆☆☆☆</td></tr><tr><td>3</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\" title=\"两数之和-输入有序数组\">两数之和-输入有序数组</a></td><td>★★☆☆☆</td></tr><tr><td>4</td><td><a class=\"link-info\" href=\"https://leetcode.cn/problems/search-insert-position/\" title=\"搜索插入位置\">搜索插入位置</a></td><td>★★☆☆☆</td></tr><tr><td>5</td><td><a class=\"link-info\" href=\"https://leetcode.cn/problems/N6YdxV/\" title=\"查找插入位置\">查找插入位置</a></td><td>★★☆☆☆</td></tr><tr><td>6</td><td><a class=\"link-info\" href=\"https://leetcode.cn/problems/find-smallest-letter-greater-than-target/\" title=\"寻找比目标字母大的最小字母\">寻找比目标字母大的最小字母</a></td><td>★★☆☆☆</td></tr><tr><td>7</td><td><a class=\"link-info\" href=\"https://leetcode.cn/problems/two-sum/\" title=\"两数之和\">两数之和</a></td><td>★★☆☆☆</td></tr><tr><td>8</td><td><a class=\"link-info\" href=\"https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/\" title=\"和为s的两个数字\">和为s的两个数字</a></td><td>★★☆☆☆</td></tr><tr><td>9</td><td><a class=\"link-info\" href=\"https://leetcode.cn/problems/kLl5u1/\" title=\"排序数组中两个数组之和\">排序数组中两个数组之和</a></td><td>★★☆☆☆</td></tr><tr><td>10</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/cuyjEf/\" title=\"按权重生成随机数\">按权重生成随机数</a></td><td>★★☆☆☆</td></tr><tr><td>11</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/random-pick-with-weight/\" title=\"按权重随机选择\">按权重随机选择</a></td><td>★★☆☆☆</td></tr><tr><td>12</td><td><a class=\"link-info\" href=\"https://leetcode.cn/problems/range-frequency-queries/\" title=\"区域内查询数字的频率\">区域内查询数字的频率</a></td><td>★★★☆☆</td></tr><tr><td>13</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/4xy4Wx/\" title=\"采购方案\">采购方案</a></td><td>★★★☆☆</td></tr><tr><td>14</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/2vYnGI/\" title=\"早餐组合\">早餐组合</a></td><td>★★★☆☆</td></tr><tr><td>15</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/find-peak-element/\" title=\"寻找峰值\">寻找峰值</a></td><td>★★★☆☆</td></tr><tr><td>16</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/max-consecutive-ones-iii/\" title=\"最大连续1的个数III\">最大连续1的个数III</a></td><td>★★★☆☆</td></tr><tr><td>17</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/get-equal-substrings-within-budget/\" title=\"尽可能使字符串相等\">尽可能使字符串相等</a></td><td>★★★☆☆</td></tr><tr><td>18</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/minimum-number-of-days-to-make-m-bouquets/\" title=\"制作m竖花所需要的最小天数\">制作m竖花所需要的最小天数</a></td><td>★★★☆☆</td></tr><tr><td>19</td><td><a class=\"link-info\" href=\"https://leetcode.cn/problems/count-number-of-nice-subarrays/\" title=\"统计【优美子数组】\">统计【优美子数组】</a></td><td>★★★★☆</td></tr><tr><td>20</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/maximum-fruits-harvested-after-at-most-k-steps/\" title=\"摘水果\">摘水果</a></td><td>★★★★☆</td></tr><tr><td>21</td><td><a class=\"link-info\" href=\"https://leetcode-cn.com/problems/find-in-mountain-array/\" title=\"山脉数组中查找目标值\">山脉数组中查找目标值</a></td><td>★★★★☆</td></tr></tbody></table>\n<p></p>\n<p></p>\n<h1 idh1>\n</div>\n</div>"}